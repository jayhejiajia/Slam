!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5	//
AREA	trunk/map.h	82;"	d
AddToWorkingArray	trunk/highMap.c	/^static void AddToWorkingArray(int i, TMapStarter *node, short int workingArray[]) $/;"	f	file:
AddToWorkingArray	trunk/lowMap.c	/^static void AddToWorkingArray(int i, TMapStarter *node, short int workingArray[]) $/;"	f	file:
AddToWorldModel	trunk/low.c	/^void AddToWorldModel(TSense sense, int particleNum) {$/;"	f
C	trunk/low.c	/^  double C, D, T;$/;"	m	struct:THold	file:
C	trunk/low.c	/^  double C, D, T;$/;"	m	struct:TSample_struct	file:
C	trunk/map.h	/^  float C, D, T;  \/\/ Minor and major axis of motion, and change of facing, respectively$/;"	m	struct:TParticle_struct
C	trunk/map.h	/^  float C, D, T;$/;"	m	struct:TPath_struct
CC	trunk/Makefile	/^CC = g++$/;"	m
CFLAGS	trunk/Makefile	/^CFLAGS = -g -I. -O3 -Wall -I\/usr\/local\/lib\/g++-include$/;"	m
CheckScore	trunk/low.c	/^inline double CheckScore(TSense sense, int index, int sampleNum) $/;"	f
CloseHighSlam	trunk/high.c	/^void CloseHighSlam()$/;"	f
CloseLowSlam	trunk/low.c	/^void CloseLowSlam()$/;"	f
ConnectDrive	trunk/ThisRobot.cpp	/^int ConnectDrive(int argc, char *argv[]) {$/;"	f
ConnectLaser	trunk/ThisRobot.cpp	/^int ConnectLaser(int argc, char *argv[]) {$/;"	f
ConnectOdometry	trunk/ThisRobot.cpp	/^int ConnectOdometry(int argc, char *argv[]) {$/;"	f
D	trunk/low.c	/^  double C, D, T;$/;"	m	struct:THold	file:
D	trunk/low.c	/^  double C, D, T;$/;"	m	struct:TSample_struct	file:
D	trunk/map.h	/^  float C, D, T;  \/\/ Minor and major axis of motion, and change of facing, respectively$/;"	m	struct:TParticle_struct
D	trunk/map.h	/^  float C, D, T;$/;"	m	struct:TPath_struct
DM	trunk/mt-rand.c	197;"	d	file:
DisposeAncestry	trunk/low.c	/^void DisposeAncestry(TAncestor particleID[]) $/;"	f
Drive	trunk/ThisRobot.cpp	/^void Drive(double speed, double turn) {$/;"	f
FALSE	trunk/basic.h	39;"	d
FILE_FORMAT	trunk/low.c	/^int FILE_FORMAT;$/;"	v
FLAG	trunk/lowMap.c	/^int FLAG;$/;"	v
GAUSSIAN	trunk/basic.h	37;"	d
GetOdometry	trunk/ThisRobot.cpp	/^void GetOdometry(TOdo &odometry) {$/;"	f
GetSensation	trunk/ThisRobot.cpp	/^void GetSensation(TSense &sense) {$/;"	f
HIGH_VARIANCE	trunk/laser.h	33;"	d
H_ID_NUMBER	trunk/map.h	68;"	d
H_MAP_HEIGHT	trunk/map.h	59;"	d
H_MAP_WIDTH	trunk/map.h	58;"	d
H_PARTICLE_NUMBER	trunk/map.h	62;"	d
H_PRIOR	trunk/highMap.c	35;"	d	file:
H_PRIOR_DIST	trunk/highMap.c	34;"	d	file:
H_SAMPLE_NUMBER	trunk/map.h	64;"	d
H_THRESH	trunk/high.c	27;"	d	file:
H_VIDEO	trunk/high.c	/^int H_VIDEO = 1;$/;"	v
HighAddToWorldModel	trunk/high.c	/^void HighAddToWorldModel(TPath *sourcePath, TSenseLog *sourceObs, int maxID)$/;"	f
HighAddTrace	trunk/highMap.c	/^void HighAddTrace(double startx, double starty, double MeasuredDist, double theta, TAncestor *parent, int addEnd) {$/;"	f
HighBuildObservation	trunk/highMap.c	/^inline void HighBuildObservation(int x, int y, char usage)$/;"	f
HighComputeProb	trunk/highMap.c	/^double HighComputeProb(int x, int y, double distance, int ID) $/;"	f
HighComputeProbability	trunk/highMap.c	/^inline double HighComputeProbability(int x, int y, double distance, int parentID) $/;"	f
HighDeleteObservation	trunk/highMap.c	/^void HighDeleteObservation(short int x, short int y, short int node) {$/;"	f
HighDestroyMap	trunk/highMap.c	/^void HighDestroyMap()$/;"	f
HighInitializeFlags	trunk/highMap.c	/^void HighInitializeFlags()$/;"	f
HighInitializeWorldMap	trunk/highMap.c	/^void HighInitializeWorldMap()$/;"	f
HighLineTrace	trunk/highMap.c	/^double HighLineTrace(double startx, double starty, double theta, double MeasuredDist, int parentID) {$/;"	f
HighLocalize	trunk/high.c	/^void HighLocalize(TPath *path, TSenseLog *obs)$/;"	f
HighPrintMap	trunk/high.c	/^void HighPrintMap(char *name, TAncestor *parent)$/;"	f
HighResizeArray	trunk/highMap.c	/^void HighResizeArray(TMapStarter *node, int deadID)$/;"	f
HighSlam	trunk/high.c	/^void HighSlam(TPath *path, TSenseLog *obs)$/;"	f
HighUpdateAncestry	trunk/high.c	/^void HighUpdateAncestry(TPath *path, TSenseLog *obs)$/;"	f
HighUpdateGridSquare	trunk/highMap.c	/^void HighUpdateGridSquare(int x, int y, double distance, int hit, int parentID)$/;"	f
ID	trunk/map.h	/^  short int ID;$/;"	m	struct:MapNode_struct
ID	trunk/map.h	/^  short int generation, ID, numChildren;$/;"	m	struct:TAncestor_struct
ID_NUMBER	trunk/map.h	50;"	d
INLINE	trunk/mt-rand.h	11;"	d
INLINE	trunk/mt-rand.h	9;"	d
InitHighSlam	trunk/high.c	/^void InitHighSlam()$/;"	f
InitLowSlam	trunk/low.c	/^void InitLowSlam()$/;"	f
InitializeRobot	trunk/slam.cpp	/^int InitializeRobot(int argc, char *argv[]) {$/;"	f
InitializeThisRobot	trunk/ThisRobot.cpp	/^int InitializeThisRobot(int argc, char *argv[]) {$/;"	f
K	trunk/mt-rand.c	71;"	d	file:
LDFLAGS	trunk/Makefile	/^LDFLAGS = -lpthread$/;"	m
LOG	trunk/low.c	68;"	d	file:
LOW_DURATION	trunk/low.h	27;"	d
LOW_VARIANCE	trunk/laser.h	32;"	d
L_PRIOR	trunk/lowMap.c	34;"	d	file:
L_PRIOR_DIST	trunk/lowMap.c	37;"	d	file:
L_VIDEO	trunk/low.c	/^int L_VIDEO = 0;$/;"	v
Localize	trunk/low.c	/^void Localize(TSense sense)$/;"	f
LogScorePosition	trunk/high.c	/^double LogScorePosition(double x, double y, double theta, int parent, TSense sense)$/;"	f
LowAddTrace	trunk/lowMap.c	/^void LowAddTrace(double startx, double starty, double MeasuredDist, double theta, int parentID, int addEnd) {$/;"	f
LowBuildObservation	trunk/lowMap.c	/^inline void LowBuildObservation(int x, int y, char usage)$/;"	f
LowComputeProb	trunk/lowMap.c	/^double LowComputeProb(int x, int y, double distance, int ID) $/;"	f
LowComputeProbability	trunk/lowMap.c	/^inline double LowComputeProbability(int x, int y, double distance, int parentID) $/;"	f
LowDeleteObservation	trunk/lowMap.c	/^void LowDeleteObservation(short int x, short int y, short int node) {$/;"	f
LowDestroyMap	trunk/lowMap.c	/^void LowDestroyMap()$/;"	f
LowInitializeFlags	trunk/lowMap.c	/^void LowInitializeFlags()$/;"	f
LowInitializeWorldMap	trunk/lowMap.c	/^void LowInitializeWorldMap()$/;"	f
LowLineTrace	trunk/lowMap.c	/^double LowLineTrace(double startx, double starty, double theta, double MeasuredDist, int parentID, float culling) {$/;"	f
LowResizeArray	trunk/lowMap.c	/^void LowResizeArray(TMapStarter *node, int deadID)$/;"	f
LowSlam	trunk/low.c	/^void LowSlam(int &continueSlam, TPath **path, TSenseLog **obs)$/;"	f
LowUpdateGridSquare	trunk/lowMap.c	/^void LowUpdateGridSquare(int x, int y, double distance, int hit, int parentID)$/;"	f
M	trunk/mt-rand.c	70;"	d	file:
MAP_HEIGHT	trunk/map.h	36;"	d
MAP_PATH_NAME	trunk/slam.cpp	38;"	d	file:
MAP_SCALE	trunk/basic.h	28;"	d
MAP_WIDTH	trunk/map.h	35;"	d
MAX	trunk/basic.cpp	12;"	d	file:
MAX	trunk/basic.h	33;"	d
MAX	trunk/mt-rand.c	196;"	d	file:
MAX_SENSE_RANGE	trunk/basic.cpp	7;"	d	file:
MAX_SENSE_RANGE	trunk/laser.h	37;"	d
MAX_TRACE_ERROR	trunk/high.c	33;"	d	file:
MAX_TRACE_ERROR	trunk/low.c	63;"	d	file:
MIN	trunk/basic.cpp	13;"	d	file:
MIN	trunk/basic.h	34;"	d
MTrandDec	trunk/mt-rand.c	/^double MTrandDec(void) {$/;"	f
MTrandInt	trunk/mt-rand.c	/^int MTrandInt(int max) {$/;"	f
MapNodeStarter_struct	trunk/map.h	/^struct MapNodeStarter_struct {$/;"	s
MapNode_struct	trunk/map.h	/^struct MapNode_struct {$/;"	s
N	trunk/mt-rand.c	69;"	d	file:
PARTICLES_PATH_NAME	trunk/slam.cpp	39;"	d	file:
PARTICLE_NUMBER	trunk/map.h	39;"	d
PASSES	trunk/high.c	30;"	d	file:
PASSES	trunk/low.c	58;"	d	file:
PAncestor	trunk/map.h	/^typedef struct TAncestor_struct *PAncestor;$/;"	t
PLAYBACK	trunk/basic.c	/^char *PLAYBACK, *RECORDING;$/;"	v
PLAYBACK_COMPLETE	trunk/slam.cpp	/^int PLAYBACK_COMPLETE = 0;$/;"	v
PMapNode	trunk/map.h	/^typedef struct MapNode_struct *PMapNode;$/;"	t
PMapStarter	trunk/map.h	/^typedef struct MapNodeStarter_struct *PMapStarter;$/;"	t
PrintMap	trunk/low.c	/^void PrintMap(char *name, TAncestor *parent, int particles, double overlayX, double overlayY, double overlayTheta)$/;"	f
QuickScore	trunk/low.c	/^inline double QuickScore(TSense sense, int index, int sampleNum) $/;"	f
REC	trunk/low.c	69;"	d	file:
RECORDING	trunk/basic.c	/^char *PLAYBACK, *RECORDING;$/;"	v
ReadLog	trunk/low.c	/^int ReadLog(FILE *logFile, TSense &sense, int &continueSlam) {$/;"	f
RotationSpeed	trunk/slam.cpp	/^double RotationSpeed, TranslationSpeed;$/;"	v
SAMPLE_NUMBER	trunk/map.h	45;"	d
SEED	trunk/slam.cpp	34;"	d	file:
SENSE_NUMBER	trunk/ThisRobot.h	25;"	d
SIGN	trunk/basic.cpp	10;"	d	file:
SIGN	trunk/basic.h	31;"	d
SQUARE	trunk/basic.cpp	11;"	d	file:
SQUARE	trunk/basic.h	32;"	d
SRC	trunk/Makefile	/^SRC = mt-rand.o ThisRobot.o basic.o map.o lowMap.o low.o highMap.o high.o slam.o$/;"	m
START_ITERATION	trunk/map.h	27;"	d
Slam	trunk/slam.cpp	/^void *Slam(void *a)$/;"	f
T	trunk/low.c	/^  double C, D, T;$/;"	m	struct:THold	file:
T	trunk/low.c	/^  double C, D, T;$/;"	m	struct:TSample_struct	file:
T	trunk/map.h	/^  float C, D, T;  \/\/ Minor and major axis of motion, and change of facing, respectively$/;"	m	struct:TParticle_struct
T	trunk/map.h	/^  float C, D, T;$/;"	m	struct:TPath_struct
TAncestor	trunk/map.h	/^typedef struct TAncestor_struct TAncestor;$/;"	t
TAncestor_struct	trunk/map.h	/^struct TAncestor_struct {$/;"	s
TEntryList	trunk/map.h	/^typedef struct TEntryList_struct TEntryList;$/;"	t
TEntryList_struct	trunk/map.h	/^struct TEntryList_struct {$/;"	s
THRESH	trunk/low.c	55;"	d	file:
THold	trunk/low.c	/^struct THold {$/;"	s	file:
TMapNode	trunk/map.h	/^typedef struct MapNode_struct TMapNode;$/;"	t
TMapStarter	trunk/map.h	/^typedef struct MapNodeStarter_struct TMapStarter;$/;"	t
TOP_ID_NUMBER	trunk/map.h	73;"	d
TOP_ID_NUMBER	trunk/map.h	75;"	d
TOdo	trunk/ThisRobot.h	/^typedef struct odo_struct TOdo;$/;"	t
TParticle	trunk/map.h	/^typedef struct TParticle_struct TParticle;$/;"	t
TParticle_struct	trunk/map.h	/^struct TParticle_struct {$/;"	s
TPath	trunk/map.h	/^typedef struct TPath_struct TPath;$/;"	t
TPath_struct	trunk/map.h	/^struct TPath_struct {$/;"	s
TRUE	trunk/basic.h	40;"	d
TSample	trunk/high.c	/^typedef struct TSample_struct TSample;$/;"	t	file:
TSample	trunk/low.c	/^typedef struct TSample_struct TSample;$/;"	t	file:
TSample_struct	trunk/high.c	/^struct TSample_struct {$/;"	s	file:
TSample_struct	trunk/low.c	/^struct TSample_struct {$/;"	s	file:
TSense	trunk/ThisRobot.h	/^typedef TSenseSample TSense[SENSE_NUMBER+1];$/;"	t
TSenseLog	trunk/map.h	/^typedef struct TSenseLog_struct TSenseLog;$/;"	t
TSenseLog_struct	trunk/map.h	/^struct TSenseLog_struct {$/;"	s
TSenseSample	trunk/ThisRobot.h	/^typedef struct TSense_struct TSenseSample;$/;"	t
TSense_struct	trunk/ThisRobot.h	/^struct TSense_struct{$/;"	s
TURN_RADIUS	trunk/ThisRobot.h	29;"	d
TranslationSpeed	trunk/slam.cpp	/^double RotationSpeed, TranslationSpeed;$/;"	v
UNKNOWN	trunk/map.h	23;"	d
UpdateAncestry	trunk/low.c	/^void UpdateAncestry(TSense sense, TAncestor particleID[])$/;"	f
VIDEO	trunk/slam.cpp	/^int VIDEO = 10;$/;"	v
WORST_POSSIBLE	trunk/high.c	34;"	d	file:
WORST_POSSIBLE	trunk/low.c	65;"	d	file:
WriteLog	trunk/slam.cpp	/^void WriteLog(FILE *logFile, TSense sense) $/;"	f
ancestryNode	trunk/map.h	/^  TAncestor_struct *ancestryNode; $/;"	m	struct:TParticle_struct
array	trunk/map.h	/^  PMapNode array;$/;"	m	struct:MapNodeStarter_struct
availableID	trunk/low.c	/^int availableID[ID_NUMBER];$/;"	v
children	trunk/low.c	/^int children[PARTICLE_NUMBER];$/;"	v
cleanID	trunk/low.c	/^int cleanID;$/;"	v
continueSlam	trunk/slam.cpp	/^int continueSlam;$/;"	v
curGeneration	trunk/low.c	/^int curGeneration;$/;"	v
cur_saved_particles_used	trunk/low.c	/^int cur_saved_particles_used;$/;"	v
dead	trunk/map.h	/^  short int total, size, dead;$/;"	m	struct:MapNodeStarter_struct
distance	trunk/ThisRobot.h	/^  double theta, distance;$/;"	m	struct:TSense_struct
distance	trunk/map.h	/^  float distance;$/;"	m	struct:MapNode_struct
dummyInit	trunk/mt-rand.c	/^void dummyInit(long i) {$/;"	f
flagMap	trunk/map.c	/^int flagMap[H_MAP_WIDTH][H_MAP_HEIGHT];$/;"	v
generation	trunk/map.h	/^  short int generation, ID, numChildren;$/;"	m	struct:TAncestor_struct
h_availableID	trunk/high.c	/^int h_availableID[H_ID_NUMBER];$/;"	v
h_children	trunk/high.c	/^int h_children[H_PARTICLE_NUMBER];$/;"	v
h_cleanID	trunk/high.c	/^int h_cleanID;$/;"	v
h_curGeneration	trunk/high.c	/^int h_curGeneration;$/;"	v
h_cur_particles_used	trunk/highMap.c	/^int h_cur_particles_used;$/;"	v
h_cur_saved_particles_used	trunk/high.c	/^int h_cur_saved_particles_used;$/;"	v
h_map	trunk/high.c	/^unsigned char h_map[H_MAP_WIDTH][H_MAP_HEIGHT];$/;"	v
h_particle	trunk/highMap.c	/^TParticle h_particle[H_PARTICLE_NUMBER];$/;"	v
h_particleID	trunk/highMap.c	/^TAncestor h_particleID[H_ID_NUMBER];$/;"	v
h_savedParticle	trunk/high.c	/^TParticle h_savedParticle[H_PARTICLE_NUMBER];$/;"	v
hiBit	trunk/mt-rand.c	72;"	d	file:
highMap	trunk/highMap.c	/^PMapStarter highMap[H_MAP_WIDTH][H_MAP_HEIGHT];$/;"	v
hits	trunk/map.h	/^  short int hits;$/;"	m	struct:MapNode_struct
hold	trunk/low.c	/^THold hold[LOW_DURATION];$/;"	v
l_cur_particles_used	trunk/lowMap.c	/^int l_cur_particles_used;$/;"	v
l_particle	trunk/lowMap.c	/^TParticle l_particle[PARTICLE_NUMBER];$/;"	v
l_particleID	trunk/lowMap.c	/^TAncestor l_particleID[ID_NUMBER];$/;"	v
lastTheta	trunk/low.c	/^double lastX, lastY, lastTheta;$/;"	v
lastX	trunk/low.c	/^double lastX, lastY, lastTheta;$/;"	v
lastY	trunk/low.c	/^double lastX, lastY, lastTheta;$/;"	v
left	trunk/mt-rand.c	/^static int      left = -1;   \/* can *next++ this many times before reloading *\/$/;"	v	file:
loBit	trunk/mt-rand.c	73;"	d	file:
loBits	trunk/mt-rand.c	74;"	d	file:
lowMap	trunk/lowMap.c	/^PMapStarter lowMap[MAP_WIDTH][MAP_HEIGHT];$/;"	v
main	trunk/mt-rand.c	/^int main(void)$/;"	f
main	trunk/slam.cpp	/^int main (int argc, char *argv[])$/;"	f
map	trunk/low.c	/^unsigned char map[MAP_WIDTH][MAP_HEIGHT];$/;"	v
mapEntries	trunk/map.h	/^  TEntryList *mapEntries;$/;"	m	struct:TAncestor_struct
meanC_D	trunk/low.c	38;"	d	file:
meanC_T	trunk/low.c	39;"	d	file:
meanD_D	trunk/low.c	43;"	d	file:
meanD_T	trunk/low.c	44;"	d	file:
meanT_D	trunk/low.c	48;"	d	file:
meanT_T	trunk/low.c	49;"	d	file:
mixBits	trunk/mt-rand.c	75;"	d	file:
newSample	trunk/low.c	/^TSample newSample[SAMPLE_NUMBER];$/;"	v
next	trunk/map.h	/^  struct TPath_struct *next;$/;"	m	struct:TPath_struct
next	trunk/map.h	/^  struct TSenseLog_struct *next;$/;"	m	struct:TSenseLog_struct
next	trunk/mt-rand.c	/^static uint32   *next;       \/* next random value is computed from here *\/$/;"	v	file:
node	trunk/map.h	/^  short int node;$/;"	m	struct:TEntryList_struct
numChildren	trunk/map.h	/^  short int generation, ID, numChildren;$/;"	m	struct:TAncestor_struct
obsX	trunk/map.c	/^short int obsX[AREA], obsY[AREA];$/;"	v
obsY	trunk/map.c	/^short int obsX[AREA], obsY[AREA];$/;"	v
observationArray	trunk/map.c	/^short int observationArray[AREA][TOP_ID_NUMBER];$/;"	v
observationID	trunk/map.c	/^int observationID;$/;"	v
odo_struct	trunk/ThisRobot.h	/^struct odo_struct{$/;"	s
odometry	trunk/ThisRobot.cpp	/^TOdo odometry;$/;"	v
parent	trunk/high.c	/^  int    parent;$/;"	m	struct:TSample_struct	file:
parent	trunk/low.c	/^  int parent;$/;"	m	struct:TSample_struct	file:
parent	trunk/map.h	/^  struct TAncestor_struct *parent;$/;"	m	struct:TAncestor_struct
parentGen	trunk/map.h	/^  short int parentGen;$/;"	m	struct:MapNode_struct
path	trunk/map.h	/^  TPath *path;  \/\/ An addition for hierarchical- maintains the partial robot path represented by this particle$/;"	m	struct:TAncestor_struct
probability	trunk/high.c	/^  double probability;$/;"	m	struct:TSample_struct	file:
probability	trunk/low.c	/^  double probability;$/;"	m	struct:TSample_struct	file:
probability	trunk/map.h	/^  double probability; \/\/ The proability of the particle$/;"	m	struct:TParticle_struct
randomMT	trunk/mt-rand.c	/^uint32 randomMT(void)$/;"	f
readFile	trunk/low.c	/^FILE *readFile;$/;"	v
reloadMT	trunk/mt-rand.c	/^uint32 reloadMT(void)$/;"	f
savedParticle	trunk/low.c	/^TParticle savedParticle[PARTICLE_NUMBER];$/;"	v
seedMT	trunk/mt-rand.c	/^void seedMT(uint32 seed)$/;"	f
seen	trunk/map.h	/^  char seen;  \/\/ Used by various functions for speedy traversal of the tree. $/;"	m	struct:TAncestor_struct
sense	trunk/low.c	/^  TSense sense;$/;"	m	struct:THold	file:
sense	trunk/low.c	/^TSense sense;$/;"	v
sense	trunk/map.h	/^  TSense sense;$/;"	m	struct:TSenseLog_struct
size	trunk/map.h	/^  int size, total;$/;"	m	struct:TAncestor_struct
size	trunk/map.h	/^  short int total, size, dead;$/;"	m	struct:MapNodeStarter_struct
source	trunk/map.h	/^  int source;$/;"	m	struct:MapNode_struct
state	trunk/mt-rand.c	/^static uint32   state[N+1];  \/* state vector + 1 extra to not violate ANSI C *\/$/;"	v	file:
tG	trunk/high.c	/^  float x, y, theta, xG, yG, tG;$/;"	m	struct:TSample_struct	file:
theta	trunk/ThisRobot.h	/^  double theta, distance;$/;"	m	struct:TSense_struct
theta	trunk/ThisRobot.h	/^  double x, y, theta;$/;"	m	struct:odo_struct
theta	trunk/high.c	/^  float x, y, theta, xG, yG, tG;$/;"	m	struct:TSample_struct	file:
theta	trunk/low.c	/^  double x, y, theta; $/;"	m	struct:TSample_struct	file:
theta	trunk/map.h	/^  float x, y, theta; \/\/ The current position of the particle, in terms of grid squares and radians$/;"	m	struct:TParticle_struct
total	trunk/map.h	/^  int size, total;$/;"	m	struct:TAncestor_struct
total	trunk/map.h	/^  short int total, size, dead;$/;"	m	struct:MapNodeStarter_struct
uint32	trunk/mt-rand.h	/^typedef unsigned long uint32;$/;"	t
varC_D	trunk/low.c	40;"	d	file:
varC_T	trunk/low.c	41;"	d	file:
varD_D	trunk/low.c	45;"	d	file:
varD_T	trunk/low.c	46;"	d	file:
varT_D	trunk/low.c	50;"	d	file:
varT_T	trunk/low.c	51;"	d	file:
x	trunk/ThisRobot.h	/^  double x, y, theta;$/;"	m	struct:odo_struct
x	trunk/high.c	/^  float x, y, theta, xG, yG, tG;$/;"	m	struct:TSample_struct	file:
x	trunk/low.c	/^  double x, y, theta; $/;"	m	struct:TSample_struct	file:
x	trunk/map.h	/^  float x, y, theta; \/\/ The current position of the particle, in terms of grid squares and radians$/;"	m	struct:TParticle_struct
x	trunk/map.h	/^  short int x, y;$/;"	m	struct:TEntryList_struct
xG	trunk/high.c	/^  float x, y, theta, xG, yG, tG;$/;"	m	struct:TSample_struct	file:
y	trunk/ThisRobot.h	/^  double x, y, theta;$/;"	m	struct:odo_struct
y	trunk/high.c	/^  float x, y, theta, xG, yG, tG;$/;"	m	struct:TSample_struct	file:
y	trunk/low.c	/^  double x, y, theta; $/;"	m	struct:TSample_struct	file:
y	trunk/map.h	/^  float x, y, theta; \/\/ The current position of the particle, in terms of grid squares and radians$/;"	m	struct:TParticle_struct
y	trunk/map.h	/^  short int x, y;$/;"	m	struct:TEntryList_struct
yG	trunk/high.c	/^  float x, y, theta, xG, yG, tG;$/;"	m	struct:TSample_struct	file:
