!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.5	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
B	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    double *B ;     \/* beta [0..n-1] for QR *\/$/;"	m	struct:cs_numeric
CS_COPYRIGHT	tags/before-github-sync/EXTERNAL/csparse/cs.h	14;"	d
CS_CSC	tags/before-github-sync/EXTERNAL/csparse/cs.h	146;"	d
CS_DATE	tags/before-github-sync/EXTERNAL/csparse/cs.h	13;"	d
CS_FLIP	tags/before-github-sync/EXTERNAL/csparse/cs.h	142;"	d
CS_MARK	tags/before-github-sync/EXTERNAL/csparse/cs.h	145;"	d
CS_MARKED	tags/before-github-sync/EXTERNAL/csparse/cs.h	144;"	d
CS_MAX	tags/before-github-sync/EXTERNAL/csparse/cs.h	140;"	d
CS_MIN	tags/before-github-sync/EXTERNAL/csparse/cs.h	141;"	d
CS_SUBSUB	tags/before-github-sync/EXTERNAL/csparse/cs.h	12;"	d
CS_SUBVER	tags/before-github-sync/EXTERNAL/csparse/cs.h	11;"	d
CS_TRIPLET	tags/before-github-sync/EXTERNAL/csparse/cs.h	147;"	d
CS_UNFLIP	tags/before-github-sync/EXTERNAL/csparse/cs.h	143;"	d
CS_VER	tags/before-github-sync/EXTERNAL/csparse/cs.h	10;"	d
L	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    cs *L ;         \/* L for LU and Cholesky, V for QR *\/$/;"	m	struct:cs_numeric
U	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    cs *U ;         \/* U for LU, R for QR, not used for Cholesky *\/$/;"	m	struct:cs_numeric
_CS_H	tags/before-github-sync/EXTERNAL/csparse/cs.h	2;"	d
cc	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int cc [5] ;    \/* coarse column decomposition *\/$/;"	m	struct:cs_dmperm_results
cp	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int *cp ;       \/* column pointers for Cholesky, row counts for QR *\/$/;"	m	struct:cs_symbolic
cs	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^} cs ;$/;"	t
cs_dmperm_results	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^typedef struct cs_dmperm_results    \/* cs_dmperm or cs_scc output *\/$/;"	s
cs_numeric	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^typedef struct cs_numeric   \/* numeric Cholesky, LU, or QR factorization *\/$/;"	s
cs_sparse	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^typedef struct cs_sparse    \/* matrix in compressed-column or triplet form *\/$/;"	s
cs_symbolic	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^typedef struct cs_symbolic  \/* symbolic Cholesky, LU, or QR analysis *\/$/;"	s
csd	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^} csd ;$/;"	t
csn	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^} csn ;$/;"	t
css	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^} css ;$/;"	t
i	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int *i ;        \/* row indices, size nzmax *\/$/;"	m	struct:cs_sparse
leftmost	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int *leftmost ; \/* leftmost[i] = min(find(A(i,:))), for QR *\/$/;"	m	struct:cs_symbolic
lnz	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    double lnz ;    \/* # entries in L for LU or Cholesky; in V for QR *\/$/;"	m	struct:cs_symbolic
m	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int m ;         \/* number of rows *\/$/;"	m	struct:cs_sparse
m2	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int m2 ;        \/* # of rows for QR, after adding fictitious rows *\/$/;"	m	struct:cs_symbolic
n	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int n ;         \/* number of columns *\/$/;"	m	struct:cs_sparse
nb	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int nb ;        \/* # of blocks in fine dmperm decomposition *\/$/;"	m	struct:cs_dmperm_results
nz	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int nz ;        \/* # of entries in triplet matrix, -1 for compressed-col *\/$/;"	m	struct:cs_sparse
nzmax	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int nzmax ;     \/* maximum number of entries *\/$/;"	m	struct:cs_sparse
p	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int *p ;        \/* column pointers (size n+1) or col indices (size nzmax) *\/$/;"	m	struct:cs_sparse
p	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int *p ;        \/* size m, row permutation *\/$/;"	m	struct:cs_dmperm_results
parent	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int *parent ;   \/* elimination tree for Cholesky and QR *\/$/;"	m	struct:cs_symbolic
pinv	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int *pinv ;     \/* inverse row perm. for QR, fill red. perm for Chol *\/$/;"	m	struct:cs_symbolic
pinv	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int *pinv ;     \/* partial pivoting for LU *\/$/;"	m	struct:cs_numeric
q	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int *q ;        \/* fill-reducing column permutation for LU and QR *\/$/;"	m	struct:cs_symbolic
q	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int *q ;        \/* size n, column permutation *\/$/;"	m	struct:cs_dmperm_results
r	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int *r ;        \/* size nb+1, block k is rows r[k] to r[k+1]-1 in A(p,q) *\/$/;"	m	struct:cs_dmperm_results
rr	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int rr [5] ;    \/* coarse row decomposition *\/$/;"	m	struct:cs_dmperm_results
s	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    int *s ;        \/* size nb+1, block k is cols s[k] to s[k+1]-1 in A(p,q) *\/$/;"	m	struct:cs_dmperm_results
unz	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    double unz ;    \/* # entries in U for LU; in R for QR *\/$/;"	m	struct:cs_symbolic
x	tags/before-github-sync/EXTERNAL/csparse/cs.h	/^    double *x ;     \/* numerical values, size nzmax *\/$/;"	m	struct:cs_sparse
cs_add	tags/before-github-sync/EXTERNAL/csparse/cs_add.c	/^cs *cs_add (const cs *A, const cs *B, double alpha, double beta)$/;"	f
cs_amd	tags/before-github-sync/EXTERNAL/csparse/cs_amd.c	/^int *cs_amd (int order, const cs *A)  \/* order 0:natural, 1:Chol, 2:LU, 3:QR *\/$/;"	f
cs_diag	tags/before-github-sync/EXTERNAL/csparse/cs_amd.c	/^static int cs_diag (int i, int j, double aij, void *other) { return (i != j) ; }$/;"	f	file:
cs_wclear	tags/before-github-sync/EXTERNAL/csparse/cs_amd.c	/^static int cs_wclear (int mark, int lemax, int *w, int n)$/;"	f	file:
cs_chol	tags/before-github-sync/EXTERNAL/csparse/cs_chol.c	/^csn *cs_chol (const cs *A, const css *S)$/;"	f
cs_cholsol	tags/before-github-sync/EXTERNAL/csparse/cs_cholsol.c	/^int cs_cholsol (int order, const cs *A, double *b)$/;"	f
cs_compress	tags/before-github-sync/EXTERNAL/csparse/cs_compress.c	/^cs *cs_compress (const cs *T)$/;"	f
HEAD	tags/before-github-sync/EXTERNAL/csparse/cs_counts.c	3;"	d	file:
NEXT	tags/before-github-sync/EXTERNAL/csparse/cs_counts.c	4;"	d	file:
cs_counts	tags/before-github-sync/EXTERNAL/csparse/cs_counts.c	/^int *cs_counts (const cs *A, const int *parent, const int *post, int ata)$/;"	f
init_ata	tags/before-github-sync/EXTERNAL/csparse/cs_counts.c	/^static void init_ata (cs *AT, const int *post, int *w, int **head, int **next)$/;"	f	file:
cs_cumsum	tags/before-github-sync/EXTERNAL/csparse/cs_cumsum.c	/^double cs_cumsum (int *p, int *c, int n)$/;"	f
cs_dfs	tags/before-github-sync/EXTERNAL/csparse/cs_dfs.c	/^int cs_dfs (int j, cs *G, int top, int *xi, int *pstack, const int *pinv)$/;"	f
cs_bfs	tags/before-github-sync/EXTERNAL/csparse/cs_dmperm.c	/^static int cs_bfs (const cs *A, int n, int *wi, int *wj, int *queue,$/;"	f	file:
cs_dmperm	tags/before-github-sync/EXTERNAL/csparse/cs_dmperm.c	/^csd *cs_dmperm (const cs *A, int seed)$/;"	f
cs_matched	tags/before-github-sync/EXTERNAL/csparse/cs_dmperm.c	/^static void cs_matched (int n, const int *wj, const int *imatch, int *p, int *q,$/;"	f	file:
cs_rprune	tags/before-github-sync/EXTERNAL/csparse/cs_dmperm.c	/^static int cs_rprune (int i, int j, double aij, void *other)$/;"	f	file:
cs_unmatched	tags/before-github-sync/EXTERNAL/csparse/cs_dmperm.c	/^static void cs_unmatched (int m, const int *wi, int *p, int *rr, int set)$/;"	f	file:
cs_droptol	tags/before-github-sync/EXTERNAL/csparse/cs_droptol.c	/^int cs_droptol (cs *A, double tol)$/;"	f
cs_tol	tags/before-github-sync/EXTERNAL/csparse/cs_droptol.c	/^static int cs_tol (int i, int j, double aij, void *tol)$/;"	f	file:
cs_dropzeros	tags/before-github-sync/EXTERNAL/csparse/cs_dropzeros.c	/^int cs_dropzeros (cs *A)$/;"	f
cs_nonzero	tags/before-github-sync/EXTERNAL/csparse/cs_dropzeros.c	/^static int cs_nonzero (int i, int j, double aij, void *other)$/;"	f	file:
cs_dupl	tags/before-github-sync/EXTERNAL/csparse/cs_dupl.c	/^int cs_dupl (cs *A)$/;"	f
cs_entry	tags/before-github-sync/EXTERNAL/csparse/cs_entry.c	/^int cs_entry (cs *T, int i, int j, double x)$/;"	f
cs_ereach	tags/before-github-sync/EXTERNAL/csparse/cs_ereach.c	/^int cs_ereach (const cs *A, int k, const int *parent, int *s, int *w)$/;"	f
cs_etree	tags/before-github-sync/EXTERNAL/csparse/cs_etree.c	/^int *cs_etree (const cs *A, int ata)$/;"	f
cs_fkeep	tags/before-github-sync/EXTERNAL/csparse/cs_fkeep.c	/^int cs_fkeep (cs *A, int (*fkeep) (int, int, double, void *), void *other)$/;"	f
cs_gaxpy	tags/before-github-sync/EXTERNAL/csparse/cs_gaxpy.c	/^int cs_gaxpy (const cs *A, const double *x, double *y)$/;"	f
cs_happly	tags/before-github-sync/EXTERNAL/csparse/cs_happly.c	/^int cs_happly (const cs *V, int i, double beta, double *x)$/;"	f
cs_house	tags/before-github-sync/EXTERNAL/csparse/cs_house.c	/^double cs_house (double *x, double *beta, int n)$/;"	f
cs_ipvec	tags/before-github-sync/EXTERNAL/csparse/cs_ipvec.c	/^int cs_ipvec (const int *p, const double *b, double *x, int n)$/;"	f
cs_leaf	tags/before-github-sync/EXTERNAL/csparse/cs_leaf.c	/^int cs_leaf (int i, int j, const int *first, int *maxfirst, int *prevleaf,$/;"	f
cs_load	tags/before-github-sync/EXTERNAL/csparse/cs_load.c	/^cs *cs_load (FILE *f)$/;"	f
cs_lsolve	tags/before-github-sync/EXTERNAL/csparse/cs_lsolve.c	/^int cs_lsolve (const cs *L, double *x)$/;"	f
cs_ltsolve	tags/before-github-sync/EXTERNAL/csparse/cs_ltsolve.c	/^int cs_ltsolve (const cs *L, double *x)$/;"	f
cs_lu	tags/before-github-sync/EXTERNAL/csparse/cs_lu.c	/^csn *cs_lu (const cs *A, const css *S, double tol)$/;"	f
cs_lusol	tags/before-github-sync/EXTERNAL/csparse/cs_lusol.c	/^int cs_lusol (int order, const cs *A, double *b, double tol)$/;"	f
calloc	tags/before-github-sync/EXTERNAL/csparse/cs_malloc.c	6;"	d	file:
cs_calloc	tags/before-github-sync/EXTERNAL/csparse/cs_malloc.c	/^void *cs_calloc (int n, size_t size)$/;"	f
cs_free	tags/before-github-sync/EXTERNAL/csparse/cs_malloc.c	/^void *cs_free (void *p)$/;"	f
cs_malloc	tags/before-github-sync/EXTERNAL/csparse/cs_malloc.c	/^void *cs_malloc (int n, size_t size)$/;"	f
cs_realloc	tags/before-github-sync/EXTERNAL/csparse/cs_malloc.c	/^void *cs_realloc (void *p, int n, size_t size, int *ok)$/;"	f
free	tags/before-github-sync/EXTERNAL/csparse/cs_malloc.c	4;"	d	file:
malloc	tags/before-github-sync/EXTERNAL/csparse/cs_malloc.c	3;"	d	file:
realloc	tags/before-github-sync/EXTERNAL/csparse/cs_malloc.c	5;"	d	file:
cs_augment	tags/before-github-sync/EXTERNAL/csparse/cs_maxtrans.c	/^static void cs_augment (int k, const cs *A, int *jmatch, int *cheap, int *w,$/;"	f	file:
cs_maxtrans	tags/before-github-sync/EXTERNAL/csparse/cs_maxtrans.c	/^int *cs_maxtrans (const cs *A, int seed)  \/*[jmatch [0..m-1]; imatch [0..n-1]]*\/$/;"	f
cs_multiply	tags/before-github-sync/EXTERNAL/csparse/cs_multiply.c	/^cs *cs_multiply (const cs *A, const cs *B)$/;"	f
cs_norm	tags/before-github-sync/EXTERNAL/csparse/cs_norm.c	/^double cs_norm (const cs *A)$/;"	f
cs_permute	tags/before-github-sync/EXTERNAL/csparse/cs_permute.c	/^cs *cs_permute (const cs *A, const int *pinv, const int *q, int values)$/;"	f
cs_pinv	tags/before-github-sync/EXTERNAL/csparse/cs_pinv.c	/^int *cs_pinv (int const *p, int n)$/;"	f
cs_post	tags/before-github-sync/EXTERNAL/csparse/cs_post.c	/^int *cs_post (const int *parent, int n)$/;"	f
cs_print	tags/before-github-sync/EXTERNAL/csparse/cs_print.c	/^int cs_print (const cs *A, int brief)$/;"	f
cs_pvec	tags/before-github-sync/EXTERNAL/csparse/cs_pvec.c	/^int cs_pvec (const int *p, const double *b, double *x, int n)$/;"	f
cs_qr	tags/before-github-sync/EXTERNAL/csparse/cs_qr.c	/^csn *cs_qr (const cs *A, const css *S)$/;"	f
cs_qrsol	tags/before-github-sync/EXTERNAL/csparse/cs_qrsol.c	/^int cs_qrsol (int order, const cs *A, double *b)$/;"	f
cs_randperm	tags/before-github-sync/EXTERNAL/csparse/cs_randperm.c	/^int *cs_randperm (int n, int seed)$/;"	f
cs_reach	tags/before-github-sync/EXTERNAL/csparse/cs_reach.c	/^int cs_reach (cs *G, const cs *B, int k, int *xi, const int *pinv)$/;"	f
cs_scatter	tags/before-github-sync/EXTERNAL/csparse/cs_scatter.c	/^int cs_scatter (const cs *A, int j, double beta, int *w, double *x, int mark,$/;"	f
cs_scc	tags/before-github-sync/EXTERNAL/csparse/cs_scc.c	/^csd *cs_scc (cs *A)     \/* matrix A temporarily modified, then restored *\/$/;"	f
cs_schol	tags/before-github-sync/EXTERNAL/csparse/cs_schol.c	/^css *cs_schol (int order, const cs *A)$/;"	f
cs_spsolve	tags/before-github-sync/EXTERNAL/csparse/cs_spsolve.c	/^int cs_spsolve (cs *G, const cs *B, int k, int *xi, double *x, const int *pinv,$/;"	f
cs_sqr	tags/before-github-sync/EXTERNAL/csparse/cs_sqr.c	/^css *cs_sqr (int order, const cs *A, int qr)$/;"	f
cs_vcount	tags/before-github-sync/EXTERNAL/csparse/cs_sqr.c	/^static int cs_vcount (const cs *A, css *S)$/;"	f	file:
cs_symperm	tags/before-github-sync/EXTERNAL/csparse/cs_symperm.c	/^cs *cs_symperm (const cs *A, const int *pinv, int values)$/;"	f
cs_tdfs	tags/before-github-sync/EXTERNAL/csparse/cs_tdfs.c	/^int cs_tdfs (int j, int k, int *head, const int *next, int *post, int *stack)$/;"	f
cs_transpose	tags/before-github-sync/EXTERNAL/csparse/cs_transpose.c	/^cs *cs_transpose (const cs *A, int values)$/;"	f
cs_updown	tags/before-github-sync/EXTERNAL/csparse/cs_updown.c	/^int cs_updown (cs *L, int sigma, const cs *C, const int *parent)$/;"	f
cs_usolve	tags/before-github-sync/EXTERNAL/csparse/cs_usolve.c	/^int cs_usolve (const cs *U, double *x)$/;"	f
cs_dalloc	tags/before-github-sync/EXTERNAL/csparse/cs_util.c	/^csd *cs_dalloc (int m, int n)$/;"	f
cs_ddone	tags/before-github-sync/EXTERNAL/csparse/cs_util.c	/^csd *cs_ddone (csd *D, cs *C, void *w, int ok)$/;"	f
cs_dfree	tags/before-github-sync/EXTERNAL/csparse/cs_util.c	/^csd *cs_dfree (csd *D)$/;"	f
cs_done	tags/before-github-sync/EXTERNAL/csparse/cs_util.c	/^cs *cs_done (cs *C, void *w, void *x, int ok)$/;"	f
cs_idone	tags/before-github-sync/EXTERNAL/csparse/cs_util.c	/^int *cs_idone (int *p, cs *C, void *w, int ok)$/;"	f
cs_ndone	tags/before-github-sync/EXTERNAL/csparse/cs_util.c	/^csn *cs_ndone (csn *N, cs *C, void *w, void *x, int ok)$/;"	f
cs_nfree	tags/before-github-sync/EXTERNAL/csparse/cs_util.c	/^csn *cs_nfree (csn *N)$/;"	f
cs_sfree	tags/before-github-sync/EXTERNAL/csparse/cs_util.c	/^css *cs_sfree (css *S)$/;"	f
cs_spalloc	tags/before-github-sync/EXTERNAL/csparse/cs_util.c	/^cs *cs_spalloc (int m, int n, int nzmax, int values, int triplet)$/;"	f
cs_spfree	tags/before-github-sync/EXTERNAL/csparse/cs_util.c	/^cs *cs_spfree (cs *A)$/;"	f
cs_sprealloc	tags/before-github-sync/EXTERNAL/csparse/cs_util.c	/^int cs_sprealloc (cs *A, int nzmax)$/;"	f
cs_utsolve	tags/before-github-sync/EXTERNAL/csparse/cs_utsolve.c	/^int cs_utsolve (const cs *U, double *x)$/;"	f
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:LDLT::<anonymous>
EIGEN_LDLT_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	28;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:LDLT
LDLT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    LDLT() : m_matrix(), m_transpositions(), m_isInitialized(false) {}$/;"	f	class:LDLT
LDLT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    LDLT(Index size)$/;"	f	class:LDLT
LDLT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    LDLT(const MatrixType& matrix)$/;"	f	class:LDLT
LDLT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^template<typename _MatrixType, int _UpLo> class LDLT$/;"	c
LDLTType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^  typedef LDLT<_MatrixType,_UpLo> LDLTType;$/;"	t	struct:internal::solve_retval
LDLT_Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^template<typename MatrixType> struct LDLT_Traits<MatrixType,Lower>$/;"	s	namespace:internal
LDLT_Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^template<typename MatrixType> struct LDLT_Traits<MatrixType,Upper>$/;"	s	namespace:internal
MatrixL	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^  typedef TriangularView<MatrixType, UnitLower> MatrixL;$/;"	t	struct:internal::LDLT_Traits
MatrixL	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^  typedef TriangularView<typename MatrixType::AdjointReturnType, UnitLower> MatrixL;$/;"	t	struct:internal::LDLT_Traits
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:LDLT
MatrixU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^  typedef TriangularView<MatrixType, UnitUpper> MatrixU;$/;"	t	struct:internal::LDLT_Traits
MatrixU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^  typedef TriangularView<typename MatrixType::AdjointReturnType, UnitUpper> MatrixU;$/;"	t	struct:internal::LDLT_Traits
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime,$/;"	e	enum:LDLT::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:LDLT::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^      Options = MatrixType::Options & ~RowMajorBit, \/\/ these are the options for the TmpMatrixType, we need a ColMajor matrix here!$/;"	e	enum:LDLT::<anonymous>
PermutationType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    typedef PermutationMatrix<RowsAtCompileTime, MaxRowsAtCompileTime> PermutationType;$/;"	t	class:LDLT
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    typedef typename NumTraits<typename MatrixType::Scalar>::Real RealScalar;$/;"	t	class:LDLT
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:LDLT::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:LDLT
TmpMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    typedef Matrix<Scalar, RowsAtCompileTime, 1, Options, MaxRowsAtCompileTime, 1> TmpMatrixType;$/;"	t	class:LDLT
Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    typedef internal::LDLT_Traits<MatrixType,UpLo> Traits;$/;"	t	class:LDLT
TranspositionType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    typedef Transpositions<RowsAtCompileTime, MaxRowsAtCompileTime> TranspositionType;$/;"	t	class:LDLT
UpLo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^      UpLo = _UpLo$/;"	e	enum:LDLT::<anonymous>
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:LDLT
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^LDLT<MatrixType,_UpLo>& LDLT<MatrixType,_UpLo>::compute(const MatrixType& a)$/;"	f	class:LDLT
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::solve_retval
getL	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^  inline static MatrixL getL(const MatrixType& m) { return m.adjoint(); }$/;"	f	struct:internal::LDLT_Traits
getL	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^  inline static MatrixL getL(const MatrixType& m) { return m; }$/;"	f	struct:internal::LDLT_Traits
getU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^  inline static MatrixU getU(const MatrixType& m) { return m.adjoint(); }$/;"	f	struct:internal::LDLT_Traits
getU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^  inline static MatrixU getU(const MatrixType& m) { return m; }$/;"	f	struct:internal::LDLT_Traits
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^namespace internal {$/;"	n
isNegative	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    inline bool isNegative(void) const$/;"	f	class:LDLT
isPositive	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    inline bool isPositive(void) const$/;"	f	class:LDLT
isPositiveDefinite	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    inline bool isPositiveDefinite() const$/;"	f	class:LDLT
ldlt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^MatrixBase<Derived>::ldlt() const$/;"	f	class:MatrixBase
ldlt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^SelfAdjointView<MatrixType, UpLo>::ldlt() const$/;"	f	class:SelfAdjointView
ldlt_inplace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^template<> struct ldlt_inplace<Lower>$/;"	s	namespace:internal
ldlt_inplace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^template<> struct ldlt_inplace<Upper>$/;"	s	namespace:internal
m_isInitialized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    bool m_isInitialized;$/;"	m	class:LDLT
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    MatrixType m_matrix;$/;"	m	class:LDLT
m_sign	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    int m_sign;$/;"	m	class:LDLT
m_temporary	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    TmpMatrixType m_temporary;$/;"	m	class:LDLT
m_transpositions	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    TranspositionType m_transpositions;$/;"	m	class:LDLT
matrixL	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    inline typename Traits::MatrixL matrixL() const$/;"	f	class:LDLT
matrixLDLT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    inline const MatrixType& matrixLDLT() const$/;"	f	class:LDLT
matrixU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    inline typename Traits::MatrixU matrixU() const$/;"	f	class:LDLT
reconstructedMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^MatrixType LDLT<MatrixType,_UpLo>::reconstructedMatrix() const$/;"	f	class:LDLT
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:LDLT
solve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    bool solve(const MatrixBase<OtherDerived>& b, ResultType *result) const$/;"	f	class:LDLT
solve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:LDLT
solveInPlace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^bool LDLT<MatrixType,_UpLo>::solveInPlace(MatrixBase<Derived> &bAndX) const$/;"	f	class:LDLT
solve_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^struct solve_retval<LDLT<_MatrixType,_UpLo>, Rhs>$/;"	s	namespace:internal
transpositionsP	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    inline const TranspositionType& transpositionsP() const$/;"	f	class:LDLT
unblocked	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^  static EIGEN_STRONG_INLINE bool unblocked(MatrixType& mat, TranspositionType& transpositions, Workspace& temp, int* sign=0)$/;"	f	struct:internal::ldlt_inplace
unblocked	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^  static bool unblocked(MatrixType& mat, TranspositionType& transpositions, Workspace& temp, int* sign=0)$/;"	f	struct:internal::ldlt_inplace
vectorD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LDLT.h	/^    inline Diagonal<const MatrixType> vectorD(void) const$/;"	f	class:LDLT
AlignmentMask	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^      AlignmentMask = int(PacketSize)-1,$/;"	e	enum:LLT::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:LLT::<anonymous>
EIGEN_LLT_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:LLT
LLT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    LLT() : m_matrix(), m_isInitialized(false) {}$/;"	f	class:LLT
LLT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    LLT(Index size) : m_matrix(size, size),$/;"	f	class:LLT
LLT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    LLT(const MatrixType& matrix)$/;"	f	class:LLT
LLT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^template<typename _MatrixType, int _UpLo> class LLT$/;"	c
LLTType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^  typedef LLT<_MatrixType,UpLo> LLTType;$/;"	t	struct:internal::solve_retval
LLT_Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^template<typename MatrixType> struct LLT_Traits<MatrixType,Lower>$/;"	s	namespace:internal
LLT_Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^template<typename MatrixType> struct LLT_Traits<MatrixType,Upper>$/;"	s	namespace:internal
MatrixL	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^  typedef TriangularView<MatrixType, Lower> MatrixL;$/;"	t	struct:internal::LLT_Traits
MatrixL	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^  typedef TriangularView<typename MatrixType::AdjointReturnType, Lower> MatrixL;$/;"	t	struct:internal::LLT_Traits
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:LLT
MatrixU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^  typedef TriangularView<MatrixType, Upper> MatrixU;$/;"	t	struct:internal::LLT_Traits
MatrixU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^  typedef TriangularView<typename MatrixType::AdjointReturnType, Upper> MatrixU;$/;"	t	struct:internal::LLT_Traits
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:LLT::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^      Options = MatrixType::Options,$/;"	e	enum:LLT::<anonymous>
PacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^      PacketSize = internal::packet_traits<Scalar>::size,$/;"	e	enum:LLT::<anonymous>
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    typedef typename NumTraits<typename MatrixType::Scalar>::Real RealScalar;$/;"	t	class:LLT
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:LLT::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:LLT
Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    typedef internal::LLT_Traits<MatrixType,UpLo> Traits;$/;"	t	class:LLT
UpLo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^      UpLo = _UpLo$/;"	e	enum:LLT::<anonymous>
blocked	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^  static EIGEN_STRONG_INLINE typename MatrixType::Index blocked(MatrixType& mat)$/;"	f	struct:internal::llt_inplace
blocked	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^  static typename MatrixType::Index blocked(MatrixType& m)$/;"	f	struct:internal::llt_inplace
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:LLT
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^LLT<MatrixType,_UpLo>& LLT<MatrixType,_UpLo>::compute(const MatrixType& a)$/;"	f	class:LLT
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::solve_retval
getL	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^  inline static MatrixL getL(const MatrixType& m) { return m.adjoint(); }$/;"	f	struct:internal::LLT_Traits
getL	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^  inline static MatrixL getL(const MatrixType& m) { return m; }$/;"	f	struct:internal::LLT_Traits
getU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^  inline static MatrixU getU(const MatrixType& m) { return m.adjoint(); }$/;"	f	struct:internal::LLT_Traits
getU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^  inline static MatrixU getU(const MatrixType& m) { return m; }$/;"	f	struct:internal::LLT_Traits
info	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    ComputationInfo info() const$/;"	f	class:LLT
inplace_decomposition	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^  static bool inplace_decomposition(MatrixType& m)$/;"	f	struct:internal::LLT_Traits
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^namespace internal {$/;"	n
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^namespace internal{$/;"	n
isPositiveDefinite	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    bool isPositiveDefinite() const { return true; }$/;"	f	class:LLT
llt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^MatrixBase<Derived>::llt() const$/;"	f	class:MatrixBase
llt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^SelfAdjointView<MatrixType, UpLo>::llt() const$/;"	f	class:SelfAdjointView
llt_inplace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^template<> struct llt_inplace<Lower>$/;"	s	namespace:internal
llt_inplace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^template<> struct llt_inplace<Upper>$/;"	s	namespace:internal
m_info	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    ComputationInfo m_info;$/;"	m	class:LLT
m_isInitialized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    bool m_isInitialized;$/;"	m	class:LLT
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    MatrixType m_matrix;$/;"	m	class:LLT
matrixL	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    inline typename Traits::MatrixL matrixL() const$/;"	f	class:LLT
matrixLLT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    inline const MatrixType& matrixLLT() const$/;"	f	class:LLT
matrixU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    inline typename Traits::MatrixU matrixU() const$/;"	f	class:LLT
reconstructedMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^MatrixType LLT<MatrixType,_UpLo>::reconstructedMatrix() const$/;"	f	class:LLT
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:LLT
solve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    bool solve(const MatrixBase<OtherDerived>& b, ResultType *result) const$/;"	f	class:LLT
solve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:LLT
solveInPlace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^void LLT<MatrixType,_UpLo>::solveInPlace(MatrixBase<Derived> &bAndX) const$/;"	f	class:LLT
solve_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^struct solve_retval<LLT<_MatrixType, UpLo>, Rhs>$/;"	s	namespace:internal
unblocked	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^  static EIGEN_STRONG_INLINE typename MatrixType::Index unblocked(MatrixType& mat)$/;"	f	struct:internal::llt_inplace
unblocked	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Cholesky/LLT.h	/^  static typename MatrixType::Index unblocked(MatrixType& mat)$/;"	f	struct:internal::llt_inplace
Array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    Array(internal::constructor_without_unaligned_array_assert)$/;"	f	class:Array
Array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array(const Array& other)$/;"	f	class:Array
Array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array(const ArrayBase<OtherDerived>& other)$/;"	f	class:Array
Array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array(const EigenBase<OtherDerived> &other)$/;"	f	class:Array
Array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array(const ReturnByValue<OtherDerived>& other)$/;"	f	class:Array
Array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array(const Scalar& x, const Scalar& y, const Scalar& z)$/;"	f	class:Array
Array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)$/;"	f	class:Array
Array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array(const T0& x, const T1& y)$/;"	f	class:Array
Array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE explicit Array() : Base()$/;"	f	class:Array
Array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE explicit Array(Index dim)$/;"	f	class:Array
Array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^class Array$/;"	c
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    typedef PlainObjectBase<Array> Base;$/;"	t	class:Array
EIGEN_ARRAY_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	26;"	d
EIGEN_MAKE_ARRAY_FIXED_TYPEDEFS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	277;"	d
EIGEN_MAKE_ARRAY_TYPEDEFS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	271;"	d
EIGEN_MAKE_ARRAY_TYPEDEFS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	299;"	d
EIGEN_MAKE_ARRAY_TYPEDEFS_ALL_SIZES	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	283;"	d
EIGEN_MAKE_ARRAY_TYPEDEFS_ALL_SIZES	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	298;"	d
EIGEN_MAKE_ARRAY_TYPEDEFS_LARGE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	301;"	d
EIGEN_USING_ARRAY_TYPEDEFS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	314;"	d
EIGEN_USING_ARRAY_TYPEDEFS_FOR_TYPE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	308;"	d
EIGEN_USING_ARRAY_TYPEDEFS_FOR_TYPE_AND_SIZE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	303;"	d
NeedsToAlign	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    enum { NeedsToAlign = (!(Options&DontAlign))$/;"	e	enum:Array::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    enum { Options = _Options };$/;"	e	enum:Array::<anonymous>
PlainObject	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    typedef typename Base::PlainObject PlainObject;$/;"	t	class:Array
XprBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^  typedef ArrayBase<Array<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> > XprBase;$/;"	t	struct:internal::traits
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^  typedef ArrayXpr XprKind;$/;"	t	struct:internal::traits
innerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    inline Index innerStride() const { return 1; }$/;"	f	class:Array
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^namespace internal {$/;"	n
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array& operator=(const Array& other)$/;"	f	class:Array
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array& operator=(const ArrayBase<OtherDerived>& other)$/;"	f	class:Array
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    EIGEN_STRONG_INLINE Array& operator=(const EigenBase<OtherDerived> &other)$/;"	f	class:Array
outerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    inline Index outerStride() const { return this->innerSize(); }$/;"	f	class:Array
swap	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^    void swap(ArrayBase<OtherDerived> const & other)$/;"	f	class:Array
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Array.h	/^struct traits<Array<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> > : traits<Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> >$/;"	s	namespace:internal
ArrayBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    ArrayBase() : Base() {}$/;"	f	class:ArrayBase
ArrayBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^template<typename Derived> class ArrayBase$/;"	c
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    typedef DenseBase<Derived> Base;$/;"	t	class:ArrayBase
CoeffReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    typedef typename Base::CoeffReturnType CoeffReturnType;$/;"	t	class:ArrayBase
ConstantReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    typedef CwiseNullaryOp<internal::scalar_constant_op<Scalar>,Derived> ConstantReturnType;$/;"	t	class:ArrayBase
EIGEN_ARRAYBASE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	26;"	d
EIGEN_CURRENT_STORAGE_BASE_CLASS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	119;"	d
EIGEN_CURRENT_STORAGE_BASE_CLASS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	129;"	d
Eigen_BaseClassForSpecializationOfGlobalMathFuncImpl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    typedef ArrayBase Eigen_BaseClassForSpecializationOfGlobalMathFuncImpl;$/;"	t	class:ArrayBase
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    typedef typename internal::traits<Derived>::Index Index;$/;"	t	class:ArrayBase
PacketScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    typedef typename internal::packet_traits<Scalar>::type PacketScalar;$/;"	t	class:ArrayBase
PlainObject	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^          > PlainObject;$/;"	t	class:ArrayBase
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:ArrayBase
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:ArrayBase
StorageBaseType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    typedef ArrayBase StorageBaseType;$/;"	t	class:ArrayBase
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	class:ArrayBase
array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    ArrayBase<Derived>& array() { return *this; }$/;"	f	class:ArrayBase
array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    const ArrayBase<Derived>& array() const { return *this; }$/;"	f	class:ArrayBase
matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    MatrixWrapper<Derived> matrix() { return derived(); }$/;"	f	class:ArrayBase
matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    const MatrixWrapper<Derived> matrix() const { return derived(); }$/;"	f	class:ArrayBase
operator *=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^ArrayBase<Derived>::operator*=(const ArrayBase<OtherDerived>& other)$/;"	f	class:ArrayBase
operator +=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    Derived& operator+=(const Scalar& scalar)$/;"	f	class:ArrayBase
operator +=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    template<typename OtherDerived> Derived& operator+=(const MatrixBase<OtherDerived>& )$/;"	f	class:ArrayBase
operator +=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^ArrayBase<Derived>::operator+=(const ArrayBase<OtherDerived>& other)$/;"	f	class:ArrayBase
operator -=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    Derived& operator-=(const Scalar& scalar)$/;"	f	class:ArrayBase
operator -=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    template<typename OtherDerived> Derived& operator-=(const MatrixBase<OtherDerived>& )$/;"	f	class:ArrayBase
operator -=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^ArrayBase<Derived>::operator-=(const ArrayBase<OtherDerived> &other)$/;"	f	class:ArrayBase
operator /=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^ArrayBase<Derived>::operator\/=(const ArrayBase<OtherDerived>& other)$/;"	f	class:ArrayBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayBase.h	/^    Derived& operator=(const ArrayBase& other)$/;"	f	class:ArrayBase
ArrayWrapper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline ArrayWrapper(const ExpressionType& matrix) : m_expression(matrix) {}$/;"	f	class:ArrayWrapper
ArrayWrapper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^class ArrayWrapper : public ArrayBase<ArrayWrapper<ExpressionType> >$/;"	c
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    typedef ArrayBase<ArrayWrapper> Base;$/;"	t	class:ArrayWrapper
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    typedef MatrixBase<MatrixWrapper<ExpressionType> > Base;$/;"	t	class:MatrixWrapper
EIGEN_ARRAYWRAPPER_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	26;"	d
MatrixWrapper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline MatrixWrapper(const ExpressionType& matrix) : m_expression(matrix) {}$/;"	f	class:MatrixWrapper
MatrixWrapper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^class MatrixWrapper : public MatrixBase<MatrixWrapper<ExpressionType> >$/;"	c
NestedExpressionType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    typedef typename internal::nested<ExpressionType>::type NestedExpressionType;$/;"	t	class:ArrayWrapper
NestedExpressionType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    typedef typename internal::nested<ExpressionType>::type NestedExpressionType;$/;"	t	class:MatrixWrapper
ScalarWithConstIfNotLvalue	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^                     >::type ScalarWithConstIfNotLvalue;$/;"	t	class:ArrayWrapper
ScalarWithConstIfNotLvalue	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^                     >::type ScalarWithConstIfNotLvalue;$/;"	t	class:MatrixWrapper
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^  typedef ArrayXpr XprKind;$/;"	t	struct:internal::traits
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:internal::traits
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline const CoeffReturnType coeff(Index index) const$/;"	f	class:ArrayWrapper
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline const CoeffReturnType coeff(Index index) const$/;"	f	class:MatrixWrapper
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline const CoeffReturnType coeff(Index row, Index col) const$/;"	f	class:ArrayWrapper
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline const CoeffReturnType coeff(Index row, Index col) const$/;"	f	class:MatrixWrapper
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline Scalar& coeffRef(Index index)$/;"	f	class:ArrayWrapper
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline Scalar& coeffRef(Index index)$/;"	f	class:MatrixWrapper
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:ArrayWrapper
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:MatrixWrapper
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline const Scalar& coeffRef(Index index) const$/;"	f	class:ArrayWrapper
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline const Scalar& coeffRef(Index index) const$/;"	f	class:MatrixWrapper
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline const Scalar& coeffRef(Index row, Index col) const$/;"	f	class:ArrayWrapper
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline const Scalar& coeffRef(Index row, Index col) const$/;"	f	class:MatrixWrapper
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline Index cols() const { return m_expression.cols(); }$/;"	f	class:ArrayWrapper
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline Index cols() const { return m_expression.cols(); }$/;"	f	class:MatrixWrapper
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline ScalarWithConstIfNotLvalue* data() { return m_expression.data(); }$/;"	f	class:ArrayWrapper
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline ScalarWithConstIfNotLvalue* data() { return m_expression.data(); }$/;"	f	class:MatrixWrapper
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline const Scalar* data() const { return m_expression.data(); }$/;"	f	class:ArrayWrapper
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline const Scalar* data() const { return m_expression.data(); }$/;"	f	class:MatrixWrapper
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline void evalTo(Dest& dst) const { dst = m_expression; }$/;"	f	class:ArrayWrapper
innerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline Index innerStride() const { return m_expression.innerStride(); }$/;"	f	class:ArrayWrapper
innerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline Index innerStride() const { return m_expression.innerStride(); }$/;"	f	class:MatrixWrapper
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^namespace internal {$/;"	n
m_expression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    const NestedExpressionType m_expression;$/;"	m	class:ArrayWrapper
m_expression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    const NestedExpressionType m_expression;$/;"	m	class:MatrixWrapper
outerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline Index outerStride() const { return m_expression.outerStride(); }$/;"	f	class:ArrayWrapper
outerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline Index outerStride() const { return m_expression.outerStride(); }$/;"	f	class:MatrixWrapper
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline const PacketScalar packet(Index index) const$/;"	f	class:ArrayWrapper
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline const PacketScalar packet(Index index) const$/;"	f	class:MatrixWrapper
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline const PacketScalar packet(Index row, Index col) const$/;"	f	class:ArrayWrapper
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline const PacketScalar packet(Index row, Index col) const$/;"	f	class:MatrixWrapper
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline Index rows() const { return m_expression.rows(); }$/;"	f	class:ArrayWrapper
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline Index rows() const { return m_expression.rows(); }$/;"	f	class:MatrixWrapper
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^struct traits<ArrayWrapper<ExpressionType> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^struct traits<MatrixWrapper<ExpressionType> >$/;"	s	namespace:internal
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline void writePacket(Index index, const PacketScalar& x)$/;"	f	class:ArrayWrapper
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline void writePacket(Index index, const PacketScalar& x)$/;"	f	class:MatrixWrapper
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline void writePacket(Index row, Index col, const PacketScalar& x)$/;"	f	class:ArrayWrapper
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ArrayWrapper.h	/^    inline void writePacket(Index row, Index col, const PacketScalar& x)$/;"	f	class:MatrixWrapper
Derived2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    JointAlignment = assign_traits<Derived1,Derived2>::JointAlignment$/;"	e	enum:internal::assign_innervec_CompleteUnrolling::<anonymous>
DstHasDirectAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    DstHasDirectAccess = Derived::Flags & DirectAccessBit,$/;"	e	enum:internal::assign_traits::<anonymous>
DstIsAligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    DstIsAligned = Derived::Flags & AlignedBit,$/;"	e	enum:internal::assign_traits::<anonymous>
EIGEN_ASSIGN_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	28;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  typedef typename Derived1::Index Index;$/;"	t	struct:internal::assign_impl
InnerMaxSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    InnerMaxSize = int(Derived::IsVectorAtCompileTime) ? int(Derived::MaxSizeAtCompileTime)$/;"	e	enum:internal::assign_traits::<anonymous>
InnerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    InnerSize = int(Derived::IsVectorAtCompileTime) ? int(Derived::SizeAtCompileTime)$/;"	e	enum:internal::assign_traits::<anonymous>
JointAlignment	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    JointAlignment = assign_traits<Derived1,Derived2>::JointAlignment$/;"	e	class:internal::assign_innervec_CompleteUnrolling::<anonymous>::Derived2
JointAlignment	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    JointAlignment = assign_traits<Derived1,Derived2>::JointAlignment$/;"	e	enum:internal::assign_innervec_CompleteUnrolling::<anonymous>
JointAlignment	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    JointAlignment = bool(DstIsAligned) && bool(SrcIsAligned) ? Aligned : Unaligned$/;"	e	enum:internal::assign_traits::<anonymous>
MaxSizeAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    MaxSizeAtCompileTime = Derived::SizeAtCompileTime,$/;"	e	enum:internal::assign_traits::<anonymous>
MayInnerVectorize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    MayInnerVectorize  = MightVectorize && int(InnerSize)!=Dynamic && int(InnerSize)%int(PacketSize)==0$/;"	e	enum:internal::assign_traits::<anonymous>
MayLinearVectorize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    MayLinearVectorize = MightVectorize && MayLinearize && DstHasDirectAccess$/;"	e	enum:internal::assign_traits::<anonymous>
MayLinearize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    MayLinearize = StorageOrdersAgree && (int(Derived::Flags) & int(OtherDerived::Flags) & LinearAccessBit),$/;"	e	enum:internal::assign_traits::<anonymous>
MaySliceVectorize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    MaySliceVectorize  = MightVectorize && DstHasDirectAccess$/;"	e	enum:internal::assign_traits::<anonymous>
MayUnrollCompletely	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    MayUnrollCompletely = int(Derived::SizeAtCompileTime) != Dynamic$/;"	e	enum:internal::assign_traits::<anonymous>
MayUnrollInner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    MayUnrollInner      = int(InnerSize) != Dynamic$/;"	e	enum:internal::assign_traits::<anonymous>
MightVectorize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    MightVectorize = StorageOrdersAgree$/;"	e	enum:internal::assign_traits::<anonymous>
PacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    PacketSize = packet_traits<typename Derived::Scalar>::size$/;"	e	enum:internal::assign_traits::<anonymous>
SrcIsAligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    SrcIsAligned = OtherDerived::Flags & AlignedBit,$/;"	e	enum:internal::assign_traits::<anonymous>
StorageOrdersAgree	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    StorageOrdersAgree = (int(Derived::IsRowMajor) == int(OtherDerived::IsRowMajor)),$/;"	e	enum:internal::assign_traits::<anonymous>
Traversal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    Traversal = int(MayInnerVectorize)  ? int(InnerVectorizedTraversal)$/;"	e	enum:internal::assign_traits::<anonymous>
Unrolling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    Unrolling = (int(Traversal) == int(InnerVectorizedTraversal) || int(Traversal) == int(DefaultTraversal))$/;"	e	enum:internal::assign_traits::<anonymous>
UnrollingLimit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    UnrollingLimit      = EIGEN_UNROLLING_LIMIT * (Vectorized ? int(PacketSize) : 1),$/;"	e	enum:internal::assign_traits::<anonymous>
Vectorized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    Vectorized = int(Traversal) == InnerVectorizedTraversal$/;"	e	enum:internal::assign_traits::<anonymous>
assign_DefaultTraversal_CompleteUnrolling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_DefaultTraversal_CompleteUnrolling$/;"	s	namespace:internal
assign_DefaultTraversal_CompleteUnrolling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_DefaultTraversal_CompleteUnrolling<Derived1, Derived2, Stop, Stop>$/;"	s	namespace:internal
assign_DefaultTraversal_InnerUnrolling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_DefaultTraversal_InnerUnrolling$/;"	s	namespace:internal
assign_DefaultTraversal_InnerUnrolling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_DefaultTraversal_InnerUnrolling<Derived1, Derived2, Stop, Stop>$/;"	s	namespace:internal
assign_LinearTraversal_CompleteUnrolling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_LinearTraversal_CompleteUnrolling$/;"	s	namespace:internal
assign_LinearTraversal_CompleteUnrolling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_LinearTraversal_CompleteUnrolling<Derived1, Derived2, Stop, Stop>$/;"	s	namespace:internal
assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, DefaultTraversal, CompleteUnrolling>$/;"	s	namespace:internal
assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, DefaultTraversal, InnerUnrolling>$/;"	s	namespace:internal
assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, DefaultTraversal, NoUnrolling>$/;"	s	namespace:internal
assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, InnerVectorizedTraversal, CompleteUnrolling>$/;"	s	namespace:internal
assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, InnerVectorizedTraversal, InnerUnrolling>$/;"	s	namespace:internal
assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, InnerVectorizedTraversal, NoUnrolling>$/;"	s	namespace:internal
assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, InvalidTraversal, Unrolling>$/;"	s	namespace:internal
assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, LinearTraversal, CompleteUnrolling>$/;"	s	namespace:internal
assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, LinearTraversal, NoUnrolling>$/;"	s	namespace:internal
assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, LinearVectorizedTraversal, CompleteUnrolling>$/;"	s	namespace:internal
assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, LinearVectorizedTraversal, NoUnrolling>$/;"	s	namespace:internal
assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_impl<Derived1, Derived2, SliceVectorizedTraversal, NoUnrolling>$/;"	s	namespace:internal
assign_innervec_CompleteUnrolling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_innervec_CompleteUnrolling$/;"	s	namespace:internal
assign_innervec_CompleteUnrolling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_innervec_CompleteUnrolling<Derived1, Derived2, Stop, Stop>$/;"	s	namespace:internal
assign_innervec_InnerUnrolling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_innervec_InnerUnrolling$/;"	s	namespace:internal
assign_innervec_InnerUnrolling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_innervec_InnerUnrolling<Derived1, Derived2, Stop, Stop>$/;"	s	namespace:internal
assign_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_selector<Derived,OtherDerived,false,false> {$/;"	s	namespace:internal
assign_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_selector<Derived,OtherDerived,false,true> {$/;"	s	namespace:internal
assign_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_selector<Derived,OtherDerived,true,false> {$/;"	s	namespace:internal
assign_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_selector<Derived,OtherDerived,true,true> {$/;"	s	namespace:internal
assign_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct assign_traits$/;"	s	namespace:internal
debug	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  static void debug()$/;"	f	struct:internal::assign_traits
inner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    inner = Index % Derived1::InnerSizeAtCompileTime$/;"	e	enum:internal::assign_DefaultTraversal_CompleteUnrolling::<anonymous>
inner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    inner = Index % Derived1::InnerSizeAtCompileTime,$/;"	e	enum:internal::assign_innervec_CompleteUnrolling::<anonymous>
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^namespace internal {$/;"	n
lazyAssign	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  ::lazyAssign(const DenseBase<OtherDerived>& other)$/;"	f	class:DenseBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^EIGEN_STRONG_INLINE Derived& DenseBase<Derived>::operator=(const DenseBase& other)$/;"	f	class:DenseBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^EIGEN_STRONG_INLINE Derived& DenseBase<Derived>::operator=(const DenseBase<OtherDerived>& other)$/;"	f	class:DenseBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^EIGEN_STRONG_INLINE Derived& MatrixBase<Derived>::operator=(const DenseBase<OtherDerived>& other)$/;"	f	class:MatrixBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^EIGEN_STRONG_INLINE Derived& MatrixBase<Derived>::operator=(const EigenBase<OtherDerived>& other)$/;"	f	class:MatrixBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^EIGEN_STRONG_INLINE Derived& MatrixBase<Derived>::operator=(const MatrixBase& other)$/;"	f	class:MatrixBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^EIGEN_STRONG_INLINE Derived& MatrixBase<Derived>::operator=(const ReturnByValue<OtherDerived>& other)$/;"	f	class:MatrixBase
outer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    outer = Index \/ Derived1::InnerSizeAtCompileTime,$/;"	e	enum:internal::assign_DefaultTraversal_CompleteUnrolling::<anonymous>
outer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^    outer = Index \/ Derived1::InnerSizeAtCompileTime,$/;"	e	enum:internal::assign_innervec_CompleteUnrolling::<anonymous>
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  EIGEN_STRONG_INLINE static Derived& run(Derived& dst, const OtherDerived& other) { return dst.lazyAssign(other.derived()); }$/;"	f	struct:internal::assign_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  EIGEN_STRONG_INLINE static Derived& run(Derived& dst, const OtherDerived& other) { return dst.lazyAssign(other.eval()); }$/;"	f	struct:internal::assign_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  EIGEN_STRONG_INLINE static Derived& run(Derived& dst, const OtherDerived& other) { return dst.lazyAssign(other.transpose()); }$/;"	f	struct:internal::assign_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  EIGEN_STRONG_INLINE static Derived& run(Derived& dst, const OtherDerived& other) { return dst.lazyAssign(other.transpose().eval()); }$/;"	f	struct:internal::assign_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  EIGEN_STRONG_INLINE static void run(Derived1 &, const Derived2 &) {}$/;"	f	struct:internal::assign_DefaultTraversal_CompleteUnrolling
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  EIGEN_STRONG_INLINE static void run(Derived1 &, const Derived2 &) {}$/;"	f	struct:internal::assign_LinearTraversal_CompleteUnrolling
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  EIGEN_STRONG_INLINE static void run(Derived1 &, const Derived2 &) {}$/;"	f	struct:internal::assign_innervec_CompleteUnrolling
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  EIGEN_STRONG_INLINE static void run(Derived1 &, const Derived2 &, int) {}$/;"	f	struct:internal::assign_DefaultTraversal_InnerUnrolling
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  EIGEN_STRONG_INLINE static void run(Derived1 &, const Derived2 &, int) {}$/;"	f	struct:internal::assign_innervec_InnerUnrolling
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  EIGEN_STRONG_INLINE static void run(Derived1 &dst, const Derived2 &src)$/;"	f	struct:internal::assign_DefaultTraversal_CompleteUnrolling
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  EIGEN_STRONG_INLINE static void run(Derived1 &dst, const Derived2 &src)$/;"	f	struct:internal::assign_LinearTraversal_CompleteUnrolling
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  EIGEN_STRONG_INLINE static void run(Derived1 &dst, const Derived2 &src)$/;"	f	struct:internal::assign_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  EIGEN_STRONG_INLINE static void run(Derived1 &dst, const Derived2 &src)$/;"	f	struct:internal::assign_innervec_CompleteUnrolling
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  EIGEN_STRONG_INLINE static void run(Derived1 &dst, const Derived2 &src, int outer)$/;"	f	struct:internal::assign_DefaultTraversal_InnerUnrolling
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  EIGEN_STRONG_INLINE static void run(Derived1 &dst, const Derived2 &src, int outer)$/;"	f	struct:internal::assign_innervec_InnerUnrolling
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  inline static void run(Derived1 &, const Derived2 &) { }$/;"	f	struct:internal::assign_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  inline static void run(Derived1 &dst, const Derived2 &src)$/;"	f	struct:internal::assign_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  static EIGEN_DONT_INLINE void run(const Derived& src, OtherDerived& dst, typename Derived::Index start, typename Derived::Index end)$/;"	f	struct:internal::unaligned_assign_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^  static EIGEN_STRONG_INLINE void run(const Derived&, OtherDerived&, typename Derived::Index, typename Derived::Index) {}$/;"	f	struct:internal::unaligned_assign_impl
unaligned_assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct unaligned_assign_impl$/;"	s	namespace:internal
unaligned_assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Assign.h	/^struct unaligned_assign_impl<false>$/;"	s	namespace:internal
ActualIndex	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^        ActualIndex = ReturnOpposite ? -Index : Index,$/;"	e	enum:internal::BandMatrixBase::DiagonalIntReturnType::<anonymous>
BandMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline BandMatrix(Index rows=Rows, Index cols=Cols, Index supers=Supers, Index subs=Subs)$/;"	f	class:internal::BandMatrix
BandMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^class BandMatrix : public BandMatrixBase<BandMatrix<_Scalar,Rows,Cols,Supers,Subs,Options> >$/;"	c	namespace:internal
BandMatrixBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^class BandMatrixBase : public EigenBase<Derived>$/;"	c	namespace:internal
BandMatrixWrapper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline BandMatrixWrapper(const CoefficientsType& coeffs, Index rows=_Rows, Index cols=_Cols, Index supers=_Supers, Index subs=_Subs)$/;"	f	class:internal::BandMatrixWrapper
BandMatrixWrapper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^class BandMatrixWrapper : public BandMatrixBase<BandMatrixWrapper<_CoefficientsType,_Rows,_Cols,_Supers,_Subs,_Options> >$/;"	c	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    typedef BandMatrix<Scalar,Size,Size,Options&SelfAdjoint?0:1,1,Options|RowMajor> Base;$/;"	t	class:internal::TridiagonalMatrix
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    typedef EigenBase<Derived> Base;$/;"	t	class:internal::BandMatrixBase
BuildType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^      typedef Block<CoefficientsType,1, DiagonalSize> BuildType;$/;"	t	struct:internal::BandMatrixBase::DiagonalIntReturnType
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^      CoeffReadCost = internal::traits<Derived>::CoeffReadCost,$/;"	e	enum:internal::BandMatrixBase::<anonymous>
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    CoeffReadCost = NumTraits<Scalar>::ReadCost,$/;"	e	enum:internal::traits::<anonymous>
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    CoeffReadCost = internal::traits<_CoefficientsType>::CoeffReadCost,$/;"	e	enum:internal::traits::<anonymous>
CoefficientsType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    typedef typename internal::traits<BandMatrix>::CoefficientsType CoefficientsType;$/;"	t	class:internal::BandMatrix
CoefficientsType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    typedef typename internal::traits<BandMatrixWrapper>::CoefficientsType CoefficientsType;$/;"	t	class:internal::BandMatrixWrapper
CoefficientsType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    typedef typename internal::traits<Derived>::CoefficientsType CoefficientsType;$/;"	t	class:internal::BandMatrixBase
CoefficientsType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^  typedef Matrix<Scalar,DataRowsAtCompileTime,ColsAtCompileTime,Options&RowMajor?RowMajor:ColMajor> CoefficientsType;$/;"	t	struct:internal::traits
CoefficientsType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^  typedef _CoefficientsType CoefficientsType;$/;"	t	struct:internal::traits
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^      ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,$/;"	e	enum:internal::BandMatrixBase::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    ColsAtCompileTime = _Cols,$/;"	e	enum:internal::traits::<anonymous>
Conjugate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^        Conjugate = ReturnOpposite && NumTraits<Scalar>::IsComplex,$/;"	e	enum:internal::BandMatrixBase::DiagonalIntReturnType::<anonymous>
DataRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^      DataRowsAtCompileTime = ((Supers!=Dynamic) && (Subs!=Dynamic))$/;"	e	enum:internal::BandMatrixBase::<anonymous>
DataRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    DataRowsAtCompileTime = ((Supers!=Dynamic) && (Subs!=Dynamic)) ? 1 + Supers + Subs : Dynamic$/;"	e	enum:internal::traits::<anonymous>
DenseMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    typedef Matrix<Scalar,RowsAtCompileTime,ColsAtCompileTime> DenseMatrixType;$/;"	t	class:internal::BandMatrixBase
DiagonalIntReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    template<int Index> struct DiagonalIntReturnType {$/;"	s	class:internal::BandMatrixBase
DiagonalSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^        DiagonalSize = (RowsAtCompileTime==Dynamic || ColsAtCompileTime==Dynamic)$/;"	e	enum:internal::BandMatrixBase::DiagonalIntReturnType::<anonymous>
EIGEN_BANDMATRIX_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	26;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^      Flags = internal::traits<Derived>::Flags,$/;"	e	enum:internal::BandMatrixBase::<anonymous>
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    Flags = LvalueBit,$/;"	e	enum:internal::traits::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    typedef typename Base::Index Index;$/;"	t	class:internal::TridiagonalMatrix
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    typedef typename DenseMatrixType::Index Index;$/;"	t	class:internal::BandMatrixBase
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    typedef typename internal::traits<BandMatrix>::Index Index;$/;"	t	class:internal::BandMatrix
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    typedef typename internal::traits<BandMatrixWrapper>::Index Index;$/;"	t	class:internal::BandMatrixWrapper
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^  typedef DenseIndex Index;$/;"	t	struct:internal::traits
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^  typedef typename _CoefficientsType::Index Index;$/;"	t	struct:internal::traits
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^      MaxColsAtCompileTime = internal::traits<Derived>::MaxColsAtCompileTime,$/;"	e	enum:internal::BandMatrixBase::<anonymous>
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    MaxColsAtCompileTime = _Cols,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^      MaxRowsAtCompileTime = internal::traits<Derived>::MaxRowsAtCompileTime,$/;"	e	enum:internal::BandMatrixBase::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    MaxRowsAtCompileTime = _Rows,$/;"	e	enum:internal::traits::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^      Options = internal::traits<Derived>::Options$/;"	e	enum:internal::BandMatrixBase::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    Options = _Options,$/;"	e	enum:internal::traits::<anonymous>
ReturnOpposite	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^        ReturnOpposite = (Options&SelfAdjoint) && (((Index)>0 && Supers==0) || ((Index)<0 && Subs==0)),$/;"	e	enum:internal::BandMatrixBase::DiagonalIntReturnType::<anonymous>
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^      RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,$/;"	e	enum:internal::BandMatrixBase::<anonymous>
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    RowsAtCompileTime = _Rows,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    typedef typename internal::traits<BandMatrix>::Scalar Scalar;$/;"	t	class:internal::BandMatrix
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    typedef typename internal::traits<BandMatrixWrapper>::Scalar Scalar;$/;"	t	class:internal::BandMatrixWrapper
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:internal::BandMatrixBase
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^  typedef _Scalar Scalar;$/;"	t	struct:internal::traits
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^  typedef typename _CoefficientsType::Scalar Scalar;$/;"	t	struct:internal::traits
SizeAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^      SizeAtCompileTime = EIGEN_SIZE_MIN_PREFER_DYNAMIC(RowsAtCompileTime,ColsAtCompileTime)$/;"	e	enum:internal::BandMatrixBase::<anonymous>
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^  typedef Dense StorageKind;$/;"	t	struct:internal::traits
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^  typedef typename _CoefficientsType::StorageKind StorageKind;$/;"	t	struct:internal::traits
Subs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^      Subs   = internal::traits<Derived>::Subs,$/;"	e	enum:internal::BandMatrixBase::<anonymous>
Subs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    Subs = _Subs,$/;"	e	enum:internal::traits::<anonymous>
Supers	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^      Supers = internal::traits<Derived>::Supers,$/;"	e	enum:internal::BandMatrixBase::<anonymous>
Supers	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    Supers = _Supers,$/;"	e	enum:internal::traits::<anonymous>
TridiagonalMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    TridiagonalMatrix(Index size = Size) : Base(size,size,Options&SelfAdjoint?0:1,1) {}$/;"	f	class:internal::TridiagonalMatrix
TridiagonalMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^class TridiagonalMatrix : public BandMatrix<Scalar,Size,Size,Options&SelfAdjoint?0:1,1,Options|RowMajor>$/;"	c	namespace:internal
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^                 BuildType>::type Type;$/;"	t	struct:internal::BandMatrixBase::DiagonalIntReturnType
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline CoefficientsType& coeffs() { return derived().coeffs(); }$/;"	f	class:internal::BandMatrixBase
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline CoefficientsType& coeffs() { return m_coeffs; }$/;"	f	class:internal::BandMatrix
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline const CoefficientsType& coeffs() const { return derived().coeffs(); }$/;"	f	class:internal::BandMatrixBase
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline const CoefficientsType& coeffs() const { return m_coeffs; }$/;"	f	class:internal::BandMatrix
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline const CoefficientsType& coeffs() const { return m_coeffs; }$/;"	f	class:internal::BandMatrixWrapper
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline Block<CoefficientsType,Dynamic,1> col(Index i)$/;"	f	class:internal::BandMatrixBase
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline Index cols() const { return m_coeffs.cols(); }$/;"	f	class:internal::BandMatrix
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline Index cols() const { return m_coeffs.cols(); }$/;"	f	class:internal::BandMatrixWrapper
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline Block<CoefficientsType,1,Dynamic> diagonal(Index i)$/;"	f	class:internal::BandMatrixBase
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline Block<CoefficientsType,1,SizeAtCompileTime> diagonal()$/;"	f	class:internal::BandMatrixBase
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline const Block<const CoefficientsType,1,Dynamic> diagonal(Index i) const$/;"	f	class:internal::BandMatrixBase
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline const Block<const CoefficientsType,1,SizeAtCompileTime> diagonal() const$/;"	f	class:internal::BandMatrixBase
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    template<int N> inline const typename DiagonalIntReturnType<N>::Type diagonal() const$/;"	f	class:internal::BandMatrixBase
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    template<int N> inline typename DiagonalIntReturnType<N>::Type diagonal()$/;"	f	class:internal::BandMatrixBase
diagonalLength	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline Index diagonalLength(Index i) const$/;"	f	class:internal::BandMatrixBase
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	class:internal::BandMatrixBase
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^namespace internal {$/;"	n
m_coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    CoefficientsType m_coeffs;$/;"	m	class:internal::BandMatrix
m_coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    const CoefficientsType& m_coeffs;$/;"	m	class:internal::BandMatrixWrapper
m_rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    internal::variable_if_dynamic<Index, Rows>   m_rows;$/;"	m	class:internal::BandMatrix
m_rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    internal::variable_if_dynamic<Index, _Rows>   m_rows;$/;"	m	class:internal::BandMatrixWrapper
m_subs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    internal::variable_if_dynamic<Index, Subs>   m_subs;$/;"	m	class:internal::BandMatrix
m_subs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    internal::variable_if_dynamic<Index, _Subs>   m_subs;$/;"	m	class:internal::BandMatrixWrapper
m_supers	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    internal::variable_if_dynamic<Index, Supers> m_supers;$/;"	m	class:internal::BandMatrix
m_supers	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    internal::variable_if_dynamic<Index, _Supers> m_supers;$/;"	m	class:internal::BandMatrixWrapper
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline Index rows() const { return m_rows.value(); }$/;"	f	class:internal::BandMatrix
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline Index rows() const { return m_rows.value(); }$/;"	f	class:internal::BandMatrixWrapper
sub	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline const typename Base::template DiagonalIntReturnType<-1>::Type sub() const$/;"	f	class:internal::TridiagonalMatrix
sub	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline typename Base::template DiagonalIntReturnType<-1>::Type sub()$/;"	f	class:internal::TridiagonalMatrix
subs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline Index subs() const { return derived().subs(); }$/;"	f	class:internal::BandMatrixBase
subs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline Index subs() const { return m_subs.value(); }$/;"	f	class:internal::BandMatrix
subs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline Index subs() const { return m_subs.value(); }$/;"	f	class:internal::BandMatrixWrapper
super	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline const typename Base::template DiagonalIntReturnType<1>::Type super() const$/;"	f	class:internal::TridiagonalMatrix
super	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline typename Base::template DiagonalIntReturnType<1>::Type super()$/;"	f	class:internal::TridiagonalMatrix
supers	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline Index supers() const { return derived().supers(); }$/;"	f	class:internal::BandMatrixBase
supers	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline Index supers() const { return m_supers.value(); }$/;"	f	class:internal::BandMatrix
supers	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    inline Index supers() const { return m_supers.value(); }$/;"	f	class:internal::BandMatrixWrapper
toDenseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^    DenseMatrixType toDenseMatrix() const$/;"	f	class:internal::BandMatrixBase
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^struct traits<BandMatrix<_Scalar,_Rows,_Cols,_Supers,_Subs,_Options> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BandMatrix.h	/^struct traits<BandMatrixWrapper<_CoefficientsType,_Rows,_Cols,_Supers,_Subs,_Options> >$/;"	s	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    typedef MapBase<Block> Base;$/;"	t	class:Block
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    typedef typename internal::dense_xpr_base<Block>::type Base;$/;"	t	class:Block
Block	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    inline Block(XprType& xpr, Index i)$/;"	f	class:Block
Block	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    inline Block(XprType& xpr, Index startRow, Index startCol)$/;"	f	class:Block
Block	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    inline Block(XprType& xpr, const Scalar* data, Index blockRows, Index blockCols)$/;"	f	class:Block
Block	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    inline Block(XprType& xpr,$/;"	f	class:Block
Block	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^class Block<XprType,BlockRows,BlockCols, InnerPanel,true>$/;"	c
Block	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^template<typename XprType, int BlockRows, int BlockCols, bool InnerPanel, bool HasDirectAccess> class Block$/;"	c
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    ColsAtCompileTime = MatrixCols == 0 ? 0 : BlockCols,$/;"	e	enum:internal::traits::<anonymous>
EIGEN_BLOCK_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	27;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    Flags = Flags0 | FlagsLinearAccessBit | FlagsLvalueBit | FlagsRowMajorBit$/;"	e	enum:internal::traits::<anonymous>
Flags0	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    Flags0 = traits<XprType>::Flags & ( (HereditaryBits & ~RowMajorBit) |$/;"	e	enum:internal::traits::<anonymous>
FlagsLinearAccessBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    FlagsLinearAccessBit = (RowsAtCompileTime == 1 || ColsAtCompileTime == 1) ? LinearAccessBit : 0,$/;"	e	enum:internal::traits::<anonymous>
FlagsLvalueBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    FlagsLvalueBit = is_lvalue<XprType>::value ? LvalueBit : 0,$/;"	e	enum:internal::traits::<anonymous>
FlagsRowMajorBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    FlagsRowMajorBit = IsRowMajor ? RowMajorBit : 0,$/;"	e	enum:internal::traits::<anonymous>
HasSameStorageOrderAsXprType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    HasSameStorageOrderAsXprType = (IsRowMajor == XprTypeIsRowMajor),$/;"	e	enum:internal::traits::<anonymous>
InnerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    InnerSize = IsRowMajor ? int(ColsAtCompileTime) : int(RowsAtCompileTime),$/;"	e	enum:internal::traits::<anonymous>
InnerStrideAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    InnerStrideAtCompileTime = HasSameStorageOrderAsXprType$/;"	e	enum:internal::traits::<anonymous>
IsRowMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    IsRowMajor = (MaxRowsAtCompileTime==1&&MaxColsAtCompileTime!=1) ? 1$/;"	e	enum:internal::traits::<anonymous>
MaskAlignedBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    MaskAlignedBit = (InnerPanel && (OuterStrideAtCompileTime!=Dynamic) && ((OuterStrideAtCompileTime % packet_traits<Scalar>::size) == 0)) ? AlignedBit : 0,$/;"	e	enum:internal::traits::<anonymous>
MaskPacketAccessBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    MaskPacketAccessBit = (InnerSize == Dynamic || (InnerSize % packet_traits<Scalar>::size) == 0)$/;"	e	enum:internal::traits::<anonymous>
MatrixCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    MatrixCols = traits<XprType>::ColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
MatrixRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    MatrixRows = traits<XprType>::RowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    MaxColsAtCompileTime = BlockCols==0 ? 0$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    MaxRowsAtCompileTime = BlockRows==0 ? 0$/;"	e	enum:internal::traits::<anonymous>
OuterStrideAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    OuterStrideAtCompileTime = HasSameStorageOrderAsXprType$/;"	e	enum:internal::traits::<anonymous>
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    RowsAtCompileTime = MatrixRows == 0 ? 0 : BlockRows,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^  typedef typename traits<XprType>::Scalar Scalar;$/;"	t	struct:internal::traits
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^  typedef typename traits<XprType>::StorageKind StorageKind;$/;"	t	struct:internal::traits
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^  typedef typename traits<XprType>::XprKind XprKind;$/;"	t	struct:internal::traits
XprTypeIsRowMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    XprTypeIsRowMajor = (int(traits<XprType>::Flags)&RowMajorBit) != 0,$/;"	e	enum:internal::traits::<anonymous>
XprTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^  typedef typename nested<XprType>::type XprTypeNested;$/;"	t	struct:internal::traits
_XprTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^  typedef typename remove_reference<XprTypeNested>::type _XprTypeNested;$/;"	t	struct:internal::traits
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const$/;"	f	class:Block
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    inline const CoeffReturnType coeff(Index index) const$/;"	f	class:Block
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    inline Scalar& coeffRef(Index index)$/;"	f	class:Block
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:Block
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    inline const Scalar& coeffRef(Index index) const$/;"	f	class:Block
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    inline const Scalar& coeffRef(Index row, Index col) const$/;"	f	class:Block
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    inline Index cols() const { return m_blockCols.value(); }$/;"	f	class:Block
init	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    void init()$/;"	f	class:Block
innerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    inline Index innerStride() const$/;"	f	class:Block
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^namespace internal {$/;"	n
m_blockCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    const internal::variable_if_dynamic<Index, ColsAtCompileTime> m_blockCols;$/;"	m	class:Block
m_blockRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    const internal::variable_if_dynamic<Index, RowsAtCompileTime> m_blockRows;$/;"	m	class:Block
m_outerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    int m_outerStride;$/;"	m	class:Block
m_startCol	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    const internal::variable_if_dynamic<Index, XprType::ColsAtCompileTime == 1 ? 0 : Dynamic> m_startCol;$/;"	m	class:Block
m_startRow	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    const internal::variable_if_dynamic<Index, XprType::RowsAtCompileTime == 1 ? 0 : Dynamic> m_startRow;$/;"	m	class:Block
m_xpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    const typename XprType::Nested m_xpr;$/;"	m	class:Block
outerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    inline Index outerStride() const$/;"	f	class:Block
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    inline PacketScalar packet(Index index) const$/;"	f	class:Block
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    inline PacketScalar packet(Index row, Index col) const$/;"	f	class:Block
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    inline Index rows() const { return m_blockRows.value(); }$/;"	f	class:Block
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^struct traits<Block<XprType, BlockRows, BlockCols, InnerPanel, HasDirectAccess> > : traits<XprType>$/;"	s	namespace:internal
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    inline void writePacket(Index index, const PacketScalar& x)$/;"	f	class:Block
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Block.h	/^    inline void writePacket(Index row, Index col, const PacketScalar& x)$/;"	f	class:Block
EIGEN_ALLANDANY_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	26;"	d
all	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^inline bool DenseBase<Derived>::all() const$/;"	f	class:DenseBase
all_unroller	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^struct all_unroller$/;"	s	namespace:internal
all_unroller	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^struct all_unroller<Derived, 1>$/;"	s	namespace:internal
all_unroller	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^struct all_unroller<Derived, Dynamic>$/;"	s	namespace:internal
any	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^inline bool DenseBase<Derived>::any() const$/;"	f	class:DenseBase
any_unroller	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^struct any_unroller$/;"	s	namespace:internal
any_unroller	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^struct any_unroller<Derived, 1>$/;"	s	namespace:internal
any_unroller	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^struct any_unroller<Derived, Dynamic>$/;"	s	namespace:internal
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^    col = (UnrollCount-1) \/ Derived::RowsAtCompileTime,$/;"	e	enum:internal::all_unroller::<anonymous>
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^    col = (UnrollCount-1) \/ Derived::RowsAtCompileTime,$/;"	e	enum:internal::any_unroller::<anonymous>
count	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^inline typename DenseBase<Derived>::Index DenseBase<Derived>::count() const$/;"	f	class:DenseBase
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^namespace internal {$/;"	n
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^    row = (UnrollCount-1) % Derived::RowsAtCompileTime$/;"	e	enum:internal::all_unroller::<anonymous>
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^    row = (UnrollCount-1) % Derived::RowsAtCompileTime$/;"	e	enum:internal::any_unroller::<anonymous>
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^  inline static bool run(const Derived &) { return false; }$/;"	f	struct:internal::all_unroller
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^  inline static bool run(const Derived &) { return false; }$/;"	f	struct:internal::any_unroller
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^  inline static bool run(const Derived &mat) { return mat.coeff(0, 0); }$/;"	f	struct:internal::all_unroller
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^  inline static bool run(const Derived &mat) { return mat.coeff(0, 0); }$/;"	f	struct:internal::any_unroller
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^  inline static bool run(const Derived &mat)$/;"	f	struct:internal::all_unroller
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/BooleanRedux.h	/^  inline static bool run(const Derived &mat)$/;"	f	struct:internal::any_unroller
CommaInitializer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CommaInitializer.h	/^  inline CommaInitializer(XprType& xpr, const DenseBase<OtherDerived>& other)$/;"	f	struct:CommaInitializer
CommaInitializer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CommaInitializer.h	/^  inline CommaInitializer(XprType& xpr, const Scalar& s)$/;"	f	struct:CommaInitializer
CommaInitializer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CommaInitializer.h	/^struct CommaInitializer$/;"	s
EIGEN_COMMAINITIALIZER_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CommaInitializer.h	27;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CommaInitializer.h	/^  typedef typename XprType::Index Index;$/;"	t	struct:CommaInitializer
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CommaInitializer.h	/^  typedef typename XprType::Scalar Scalar;$/;"	t	struct:CommaInitializer
finished	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CommaInitializer.h	/^  inline XprType& finished() { return m_xpr; }$/;"	f	struct:CommaInitializer
m_col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CommaInitializer.h	/^  Index m_col;              \/\/ current col id$/;"	m	struct:CommaInitializer
m_currentBlockRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CommaInitializer.h	/^  Index m_currentBlockRows; \/\/ current block height$/;"	m	struct:CommaInitializer
m_row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CommaInitializer.h	/^  Index m_row;              \/\/ current row id$/;"	m	struct:CommaInitializer
m_xpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CommaInitializer.h	/^  XprType& m_xpr;   \/\/ target expression$/;"	m	struct:CommaInitializer
operator ,	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CommaInitializer.h	/^  CommaInitializer& operator,(const DenseBase<OtherDerived>& other)$/;"	f	struct:CommaInitializer
operator ,	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CommaInitializer.h	/^  CommaInitializer& operator,(const Scalar& s)$/;"	f	struct:CommaInitializer
operator <<	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CommaInitializer.h	/^DenseBase<Derived>::operator<<(const DenseBase<OtherDerived>& other)$/;"	f	class:DenseBase
operator <<	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CommaInitializer.h	/^inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)$/;"	f	class:DenseBase
~CommaInitializer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CommaInitializer.h	/^  inline ~CommaInitializer()$/;"	f	struct:CommaInitializer
Ancestor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^  typedef typename remove_all<Lhs>::type Ancestor;$/;"	t	struct:internal::traits
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^                                         typename internal::traits<Rhs>::StorageKind>::ret>::Base Base;$/;"	t	class:CwiseBinaryOp
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    typedef typename internal::dense_xpr_base<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >::type Base;$/;"	t	class:CwiseBinaryOpImpl
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    CoeffReadCost = LhsCoeffReadCost + RhsCoeffReadCost + functor_traits<BinaryOp>::Cost$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    ColsAtCompileTime = traits<Ancestor>::ColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
CwiseBinaryOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE CwiseBinaryOp(const Lhs& lhs, const Rhs& rhs, const BinaryOp& func = BinaryOp())$/;"	f	class:CwiseBinaryOp
CwiseBinaryOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^class CwiseBinaryOp : internal::no_assignment_operator,$/;"	c
CwiseBinaryOpImpl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^class CwiseBinaryOpImpl<BinaryOp, Lhs, Rhs, Dense>$/;"	c
Derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    typedef CwiseBinaryOp<BinaryOp, Lhs, Rhs> Derived;$/;"	t	class:CwiseBinaryOpImpl
EIGEN_CHECK_BINARY_COMPATIBILIY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	109;"	d
EIGEN_CWISE_BINARY_OP_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	27;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    Flags = (Flags0 & ~RowMajorBit) | (LhsFlags & RowMajorBit),$/;"	e	enum:internal::traits::<anonymous>
Flags0	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    Flags0 = (int(LhsFlags) | int(RhsFlags)) & ($/;"	e	enum:internal::traits::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^                                         typename traits<Rhs>::Index>::type Index;$/;"	t	struct:internal::traits
LhsCoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    LhsCoeffReadCost = _LhsNested::CoeffReadCost,$/;"	e	enum:internal::traits::<anonymous>
LhsFlags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    LhsFlags = _LhsNested::Flags,$/;"	e	enum:internal::traits::<anonymous>
LhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    typedef typename internal::nested<Lhs>::type LhsNested;$/;"	t	class:CwiseBinaryOp
LhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^  typedef typename Lhs::Nested LhsNested;$/;"	t	struct:internal::traits
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    MaxColsAtCompileTime = traits<Ancestor>::MaxColsAtCompileTime$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    MaxRowsAtCompileTime = traits<Ancestor>::MaxRowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
RhsCoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    RhsCoeffReadCost = _RhsNested::CoeffReadCost,$/;"	e	enum:internal::traits::<anonymous>
RhsFlags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    RhsFlags = _RhsNested::Flags,$/;"	e	enum:internal::traits::<anonymous>
RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    typedef typename internal::nested<Rhs>::type RhsNested;$/;"	t	class:CwiseBinaryOp
RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^  typedef typename Rhs::Nested RhsNested;$/;"	t	struct:internal::traits
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    RowsAtCompileTime = traits<Ancestor>::RowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
SameType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    SameType = is_same<typename _LhsNested::Scalar,typename _RhsNested::Scalar>::value,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^                   >::type Scalar;$/;"	t	struct:internal::traits
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    SameType = is_same<typename _LhsNested::Scalar,typename _RhsNested::Scalar>::value,$/;"	e	class:internal::traits::<anonymous>::_RhsNested
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^                                           typename traits<Rhs>::StorageKind>::ret StorageKind;$/;"	t	struct:internal::traits
StorageOrdersAgree	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    StorageOrdersAgree = (int(Lhs::Flags)&RowMajorBit)==(int(Rhs::Flags)&RowMajorBit),$/;"	e	enum:internal::traits::<anonymous>
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^  typedef typename traits<Ancestor>::XprKind XprKind;$/;"	t	struct:internal::traits
_LhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    typedef typename internal::remove_reference<LhsNested>::type _LhsNested;$/;"	t	class:CwiseBinaryOp
_LhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^  typedef typename remove_reference<LhsNested>::type _LhsNested;$/;"	t	struct:internal::traits
_RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    SameType = is_same<typename _LhsNested::Scalar,typename _RhsNested::Scalar>::value,$/;"	e	enum:internal::traits::<anonymous>
_RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    typedef typename internal::remove_reference<RhsNested>::type _RhsNested;$/;"	t	class:CwiseBinaryOp
_RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^  typedef typename remove_reference<RhsNested>::type _RhsNested;$/;"	t	struct:internal::traits
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index index) const$/;"	f	class:CwiseBinaryOpImpl
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index row, Index col) const$/;"	f	class:CwiseBinaryOpImpl
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index cols() const {$/;"	f	class:CwiseBinaryOp
functor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    const BinaryOp& functor() const { return m_functor; }$/;"	f	class:CwiseBinaryOp
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^namespace internal {$/;"	n
lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    const _LhsNested& lhs() const { return m_lhs; }$/;"	f	class:CwiseBinaryOp
m_functor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    const BinaryOp m_functor;$/;"	m	class:CwiseBinaryOp
m_lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    const LhsNested m_lhs;$/;"	m	class:CwiseBinaryOp
m_rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    const RhsNested m_rhs;$/;"	m	class:CwiseBinaryOp
operator +=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^MatrixBase<Derived>::operator+=(const MatrixBase<OtherDerived>& other)$/;"	f	class:MatrixBase
operator -=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^MatrixBase<Derived>::operator-=(const MatrixBase<OtherDerived> &other)$/;"	f	class:MatrixBase
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE PacketScalar packet(Index index) const$/;"	f	class:CwiseBinaryOpImpl
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE PacketScalar packet(Index row, Index col) const$/;"	f	class:CwiseBinaryOpImpl
rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    const _RhsNested& rhs() const { return m_rhs; }$/;"	f	class:CwiseBinaryOp
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index rows() const {$/;"	f	class:CwiseBinaryOp
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^struct traits<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >$/;"	s	namespace:internal
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseBinaryOp.h	/^    SameType = is_same<typename _LhsNested::Scalar,typename _RhsNested::Scalar>::value,$/;"	e	class:internal::traits::<anonymous>::_RhsNested::Scalar
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^    typedef typename internal::dense_xpr_base<CwiseNullaryOp>::type Base;$/;"	t	class:CwiseNullaryOp
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^    CoeffReadCost = functor_traits<NullaryOp>::Cost$/;"	e	enum:internal::traits::<anonymous>
Constant	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::Constant(Index rows, Index cols, const Scalar& value)$/;"	f	class:DenseBase
Constant	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::Constant(Index size, const Scalar& value)$/;"	f	class:DenseBase
Constant	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::Constant(const Scalar& value)$/;"	f	class:DenseBase
CwiseNullaryOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^    CwiseNullaryOp(Index rows, Index cols, const NullaryOp& func = NullaryOp())$/;"	f	class:CwiseNullaryOp
CwiseNullaryOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^class CwiseNullaryOp : internal::no_assignment_operator,$/;"	c
EIGEN_CWISE_NULLARY_OP_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	26;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^    Flags = (traits<PlainObjectType>::Flags$/;"	e	enum:internal::traits::<anonymous>
Identity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^MatrixBase<Derived>::Identity()$/;"	f	class:MatrixBase
Identity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^MatrixBase<Derived>::Identity(Index rows, Index cols)$/;"	f	class:MatrixBase
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^  typedef typename Derived::Index Index;$/;"	t	struct:internal::setIdentity_impl
LinSpaced	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::LinSpaced(Index size, const Scalar& low, const Scalar& high)$/;"	f	class:DenseBase
LinSpaced	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::LinSpaced(Sequential_t, Index size, const Scalar& low, const Scalar& high)$/;"	f	class:DenseBase
LinSpaced	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::LinSpaced(Sequential_t, const Scalar& low, const Scalar& high)$/;"	f	class:DenseBase
LinSpaced	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::LinSpaced(const Scalar& low, const Scalar& high)$/;"	f	class:DenseBase
NullaryExpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::NullaryExpr(Index rows, Index cols, const CustomNullaryOp& func)$/;"	f	class:DenseBase
NullaryExpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::NullaryExpr(Index size, const CustomNullaryOp& func)$/;"	f	class:DenseBase
NullaryExpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::NullaryExpr(const CustomNullaryOp& func)$/;"	f	class:DenseBase
Ones	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::Ones()$/;"	f	class:DenseBase
Ones	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::Ones(Index rows, Index cols)$/;"	f	class:DenseBase
Ones	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::Ones(Index size)$/;"	f	class:DenseBase
Unit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE const typename MatrixBase<Derived>::BasisReturnType MatrixBase<Derived>::Unit(Index i)$/;"	f	class:MatrixBase
Unit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE const typename MatrixBase<Derived>::BasisReturnType MatrixBase<Derived>::Unit(Index size, Index i)$/;"	f	class:MatrixBase
UnitW	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE const typename MatrixBase<Derived>::BasisReturnType MatrixBase<Derived>::UnitW()$/;"	f	class:MatrixBase
UnitX	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE const typename MatrixBase<Derived>::BasisReturnType MatrixBase<Derived>::UnitX()$/;"	f	class:MatrixBase
UnitY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE const typename MatrixBase<Derived>::BasisReturnType MatrixBase<Derived>::UnitY()$/;"	f	class:MatrixBase
UnitZ	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE const typename MatrixBase<Derived>::BasisReturnType MatrixBase<Derived>::UnitZ()$/;"	f	class:MatrixBase
Zero	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::Zero()$/;"	f	class:DenseBase
Zero	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::Zero(Index rows, Index cols)$/;"	f	class:DenseBase
Zero	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^DenseBase<Derived>::Zero(Index size)$/;"	f	class:DenseBase
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index index) const$/;"	f	class:CwiseNullaryOp
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index rows, Index cols) const$/;"	f	class:CwiseNullaryOp
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^    EIGEN_STRONG_INLINE Index cols() const { return m_cols.value(); }$/;"	f	class:CwiseNullaryOp
fill	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE void DenseBase<Derived>::fill(const Scalar& value)$/;"	f	class:DenseBase
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^namespace internal {$/;"	n
isApproxToConstant	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^bool DenseBase<Derived>::isApproxToConstant$/;"	f	class:DenseBase
isConstant	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^bool DenseBase<Derived>::isConstant$/;"	f	class:DenseBase
isIdentity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^bool MatrixBase<Derived>::isIdentity$/;"	f	class:MatrixBase
isOnes	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^bool DenseBase<Derived>::isOnes$/;"	f	class:DenseBase
isZero	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^bool DenseBase<Derived>::isZero(RealScalar prec) const$/;"	f	class:DenseBase
m_cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^    const internal::variable_if_dynamic<Index, ColsAtCompileTime> m_cols;$/;"	m	class:CwiseNullaryOp
m_functor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^    const NullaryOp m_functor;$/;"	m	class:CwiseNullaryOp
m_rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^    const internal::variable_if_dynamic<Index, RowsAtCompileTime> m_rows;$/;"	m	class:CwiseNullaryOp
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^    EIGEN_STRONG_INLINE PacketScalar packet(Index index) const$/;"	f	class:CwiseNullaryOp
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^    EIGEN_STRONG_INLINE PacketScalar packet(Index row, Index col) const$/;"	f	class:CwiseNullaryOp
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^    EIGEN_STRONG_INLINE Index rows() const { return m_rows.value(); }$/;"	f	class:CwiseNullaryOp
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^  static EIGEN_STRONG_INLINE Derived& run(Derived& m)$/;"	f	struct:internal::setIdentity_impl
setConstant	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE Derived& DenseBase<Derived>::setConstant(const Scalar& value)$/;"	f	class:DenseBase
setConstant	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^PlainObjectBase<Derived>::setConstant(Index rows, Index cols, const Scalar& value)$/;"	f	class:PlainObjectBase
setConstant	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^PlainObjectBase<Derived>::setConstant(Index size, const Scalar& value)$/;"	f	class:PlainObjectBase
setIdentity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE Derived& MatrixBase<Derived>::setIdentity()$/;"	f	class:MatrixBase
setIdentity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE Derived& MatrixBase<Derived>::setIdentity(Index rows, Index cols)$/;"	f	class:MatrixBase
setIdentity_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^struct setIdentity_impl<Derived, true>$/;"	s	namespace:internal
setLinSpaced	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE Derived& DenseBase<Derived>::setLinSpaced(Index size, const Scalar& low, const Scalar& high)$/;"	f	class:DenseBase
setOnes	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE Derived& DenseBase<Derived>::setOnes()$/;"	f	class:DenseBase
setOnes	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^PlainObjectBase<Derived>::setOnes(Index rows, Index cols)$/;"	f	class:PlainObjectBase
setOnes	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^PlainObjectBase<Derived>::setOnes(Index size)$/;"	f	class:PlainObjectBase
setZero	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^EIGEN_STRONG_INLINE Derived& DenseBase<Derived>::setZero()$/;"	f	class:DenseBase
setZero	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^PlainObjectBase<Derived>::setZero(Index rows, Index cols)$/;"	f	class:PlainObjectBase
setZero	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^PlainObjectBase<Derived>::setZero(Index size)$/;"	f	class:PlainObjectBase
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseNullaryOp.h	/^struct traits<CwiseNullaryOp<NullaryOp, PlainObjectType> > : traits<PlainObjectType>$/;"	s	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^    typedef typename CwiseUnaryOpImpl<UnaryOp, XprType,typename internal::traits<XprType>::StorageKind>::Base Base;$/;"	t	class:CwiseUnaryOp
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^    typedef typename internal::dense_xpr_base<CwiseUnaryOp<UnaryOp, XprType> >::type Base;$/;"	t	class:CwiseUnaryOpImpl
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^    CoeffReadCost = _XprTypeNested::CoeffReadCost + functor_traits<UnaryOp>::Cost$/;"	e	enum:internal::traits::<anonymous>
CwiseUnaryOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^    inline CwiseUnaryOp(const XprType& xpr, const UnaryOp& func = UnaryOp())$/;"	f	class:CwiseUnaryOp
CwiseUnaryOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^class CwiseUnaryOp : internal::no_assignment_operator,$/;"	c
CwiseUnaryOpImpl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^class CwiseUnaryOpImpl<UnaryOp,XprType,Dense>$/;"	c
Derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^    typedef CwiseUnaryOp<UnaryOp, XprType> Derived;$/;"	t	class:CwiseUnaryOpImpl
EIGEN_CWISE_UNARY_OP_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	27;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^    Flags = _XprTypeNested::Flags & ($/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^                   >::type Scalar;$/;"	t	struct:internal::traits
XprTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^  typedef typename XprType::Nested XprTypeNested;$/;"	t	struct:internal::traits
_XprTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^  typedef typename remove_reference<XprTypeNested>::type _XprTypeNested;$/;"	t	struct:internal::traits
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index index) const$/;"	f	class:CwiseUnaryOpImpl
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index row, Index col) const$/;"	f	class:CwiseUnaryOpImpl
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE Index cols() const { return m_xpr.cols(); }$/;"	f	class:CwiseUnaryOp
functor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^    const UnaryOp& functor() const { return m_functor; }$/;"	f	class:CwiseUnaryOp
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^namespace internal {$/;"	n
m_functor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^    const UnaryOp m_functor;$/;"	m	class:CwiseUnaryOp
m_xpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^    const typename XprType::Nested m_xpr;$/;"	m	class:CwiseUnaryOp
nestedExpression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^    nestedExpression() const { return m_xpr; }$/;"	f	class:CwiseUnaryOp
nestedExpression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^    nestedExpression() { return m_xpr.const_cast_derived(); }$/;"	f	class:CwiseUnaryOp
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE PacketScalar packet(Index index) const$/;"	f	class:CwiseUnaryOpImpl
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE PacketScalar packet(Index row, Index col) const$/;"	f	class:CwiseUnaryOpImpl
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE Index rows() const { return m_xpr.rows(); }$/;"	f	class:CwiseUnaryOp
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryOp.h	/^struct traits<CwiseUnaryOp<UnaryOp, XprType> >$/;"	s	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    typedef typename CwiseUnaryViewImpl<ViewOp, MatrixType,typename internal::traits<MatrixType>::StorageKind>::Base Base;$/;"	t	class:CwiseUnaryView
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    typedef typename internal::dense_xpr_base< CwiseUnaryView<ViewOp, MatrixType> >::type Base;$/;"	t	class:CwiseUnaryViewImpl
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    CoeffReadCost = traits<_MatrixTypeNested>::CoeffReadCost + functor_traits<ViewOp>::Cost,$/;"	e	enum:internal::traits::<anonymous>
CwiseUnaryView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    inline CwiseUnaryView(const MatrixType& mat, const ViewOp& func = ViewOp())$/;"	f	class:CwiseUnaryView
CwiseUnaryView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^class CwiseUnaryView : internal::no_assignment_operator,$/;"	c
CwiseUnaryViewImpl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^class CwiseUnaryViewImpl<ViewOp,MatrixType,Dense>$/;"	c
Derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    typedef CwiseUnaryView<ViewOp, MatrixType> Derived;$/;"	t	class:CwiseUnaryViewImpl
EIGEN_CWISE_UNARY_VIEW_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	26;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    Flags = (traits<_MatrixTypeNested>::Flags & (HereditaryBits | LvalueBit | LinearAccessBit | DirectAccessBit)),$/;"	e	enum:internal::traits::<anonymous>
InnerStrideAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    InnerStrideAtCompileTime = MatrixTypeInnerStride == Dynamic$/;"	e	enum:internal::traits::<anonymous>
MatrixTypeInnerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    MatrixTypeInnerStride =  inner_stride_at_compile_time<MatrixType>::ret,$/;"	e	enum:internal::traits::<anonymous>
MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^  typedef typename MatrixType::Nested MatrixTypeNested;$/;"	t	struct:internal::traits
OuterStrideAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    OuterStrideAtCompileTime = outer_stride_at_compile_time<MatrixType>::ret$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^                   >::type Scalar;$/;"	t	struct:internal::traits
_MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^  typedef typename remove_all<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	struct:internal::traits
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    EIGEN_STRONG_INLINE CoeffReturnType coeff(Index index) const$/;"	f	class:CwiseUnaryViewImpl
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    EIGEN_STRONG_INLINE CoeffReturnType coeff(Index row, Index col) const$/;"	f	class:CwiseUnaryViewImpl
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    EIGEN_STRONG_INLINE Scalar& coeffRef(Index index)$/;"	f	class:CwiseUnaryViewImpl
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    EIGEN_STRONG_INLINE Scalar& coeffRef(Index row, Index col)$/;"	f	class:CwiseUnaryViewImpl
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    EIGEN_STRONG_INLINE Index cols() const { return m_matrix.cols(); }$/;"	f	class:CwiseUnaryView
functor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    const ViewOp& functor() const { return m_functor; }$/;"	f	class:CwiseUnaryView
innerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    inline Index innerStride() const$/;"	f	class:CwiseUnaryViewImpl
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^namespace internal {$/;"	n
m_functor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    ViewOp m_functor;$/;"	m	class:CwiseUnaryView
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    const typename internal::nested<MatrixType>::type m_matrix;$/;"	m	class:CwiseUnaryView
nestedExpression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    nestedExpression() const { return m_matrix; }$/;"	f	class:CwiseUnaryView
nestedExpression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    nestedExpression() { return m_matrix.const_cast_derived(); }$/;"	f	class:CwiseUnaryView
outerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    inline Index outerStride() const$/;"	f	class:CwiseUnaryViewImpl
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^    EIGEN_STRONG_INLINE Index rows() const { return m_matrix.rows(); }$/;"	f	class:CwiseUnaryView
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/CwiseUnaryView.h	/^struct traits<CwiseUnaryView<ViewOp, MatrixType> >$/;"	s	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef DenseCoeffsBase<Derived> Base;$/;"	t	class:DenseBase
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^      CoeffReadCost = internal::traits<Derived>::CoeffReadCost,$/;"	e	enum:DenseBase::<anonymous>
CoeffReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef typename Base::CoeffReturnType CoeffReturnType;$/;"	t	class:DenseBase
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^      ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,$/;"	e	enum:DenseBase::<anonymous>
ColwiseReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef VectorwiseOp<Derived, Vertical> ColwiseReturnType;$/;"	t	class:DenseBase
ConstColwiseReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef const VectorwiseOp<const Derived, Vertical> ConstColwiseReturnType;$/;"	t	class:DenseBase
ConstFixedSegmentReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    template<int Size> struct ConstFixedSegmentReturnType { typedef const VectorBlock<const Derived, Size> Type; };$/;"	s	class:DenseBase
ConstReverseReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef const Reverse<const Derived, BothDirections> ConstReverseReturnType;$/;"	t	class:DenseBase
ConstRowwiseReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef const VectorwiseOp<const Derived, Horizontal> ConstRowwiseReturnType;$/;"	t	class:DenseBase
ConstSegmentReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef const VectorBlock<const Derived> ConstSegmentReturnType;$/;"	t	class:DenseBase
ConstTransposeReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef const Transpose<const Derived> ConstTransposeReturnType;$/;"	t	class:DenseBase
ConstantReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef CwiseNullaryOp<internal::scalar_constant_op<Scalar>,Derived> ConstantReturnType;$/;"	t	class:DenseBase
DenseBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    DenseBase()$/;"	f	class:DenseBase
DenseBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^template<typename Derived> class DenseBase$/;"	c
EIGEN_CURRENT_STORAGE_BASE_CLASS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	498;"	d
EIGEN_CURRENT_STORAGE_BASE_CLASS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	503;"	d
EIGEN_DENSEBASE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	27;"	d
EigenvaluesReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef Matrix<typename NumTraits<typename internal::traits<Derived>::Scalar>::Real, internal::traits<Derived>::ColsAtCompileTime, 1> EigenvaluesReturnType;$/;"	t	class:DenseBase
FixedSegmentReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    template<int Size> struct FixedSegmentReturnType { typedef VectorBlock<Derived, Size> Type; };$/;"	s	class:DenseBase
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^      Flags = internal::traits<Derived>::Flags,$/;"	e	enum:DenseBase::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef typename internal::traits<Derived>::Index Index; $/;"	t	class:DenseBase
InnerSizeAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^      InnerSizeAtCompileTime = int(IsVectorAtCompileTime) ? SizeAtCompileTime$/;"	e	enum:DenseBase::<anonymous>
InnerStrideAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^      InnerStrideAtCompileTime = internal::inner_stride_at_compile_time<Derived>::ret,$/;"	e	enum:DenseBase::<anonymous>
IsRowMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^      IsRowMajor = int(Flags) & RowMajorBit, \/**< True if this expression has row-major storage order. *\/$/;"	e	enum:DenseBase::<anonymous>
IsVectorAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^      IsVectorAtCompileTime = internal::traits<Derived>::MaxRowsAtCompileTime == 1$/;"	e	enum:DenseBase::<anonymous>
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^      MaxColsAtCompileTime = internal::traits<Derived>::MaxColsAtCompileTime,$/;"	e	enum:DenseBase::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^      MaxRowsAtCompileTime = internal::traits<Derived>::MaxRowsAtCompileTime,$/;"	e	enum:DenseBase::<anonymous>
MaxSizeAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^      MaxSizeAtCompileTime = (internal::size_at_compile_time<internal::traits<Derived>::MaxRowsAtCompileTime,$/;"	e	enum:DenseBase::<anonymous>
OuterStrideAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^      OuterStrideAtCompileTime = internal::outer_stride_at_compile_time<Derived>::ret$/;"	e	enum:DenseBase::<anonymous>
PacketScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef typename internal::packet_traits<Scalar>::type PacketScalar;$/;"	t	class:DenseBase
RandomAccessLinSpacedReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef CwiseNullaryOp<internal::linspaced_op<Scalar,true>,Derived> RandomAccessLinSpacedReturnType;$/;"	t	class:DenseBase
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:DenseBase
ReverseReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef Reverse<Derived, BothDirections> ReverseReturnType;$/;"	t	class:DenseBase
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^      RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,$/;"	e	enum:DenseBase::<anonymous>
RowwiseReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef VectorwiseOp<Derived, Horizontal> RowwiseReturnType;$/;"	t	class:DenseBase
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:DenseBase
SegmentReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef VectorBlock<Derived> SegmentReturnType;$/;"	t	class:DenseBase
SequentialLinSpacedReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef CwiseNullaryOp<internal::linspaced_op<Scalar,false>,Derived> SequentialLinSpacedReturnType;$/;"	t	class:DenseBase
SizeAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^      SizeAtCompileTime = (internal::size_at_compile_time<internal::traits<Derived>::RowsAtCompileTime,$/;"	e	enum:DenseBase::<anonymous>
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	class:DenseBase
ThisConstantIsPrivateInPlainObjectBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    enum { ThisConstantIsPrivateInPlainObjectBase };$/;"	e	enum:DenseBase::<anonymous>
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    template<int Size> struct ConstFixedSegmentReturnType { typedef const VectorBlock<const Derived, Size> Type; };$/;"	t	struct:DenseBase::ConstFixedSegmentReturnType
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    template<int Size> struct FixedSegmentReturnType { typedef VectorBlock<Derived, Size> Type; };$/;"	t	struct:DenseBase::FixedSegmentReturnType
eval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    EIGEN_STRONG_INLINE const typename internal::eval<Derived>::type eval() const$/;"	f	class:DenseBase
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    template<typename Dest> inline void evalTo(Dest& ) const$/;"	f	class:DenseBase
innerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    Index innerSize() const$/;"	f	class:DenseBase
nonZeros	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    inline Index nonZeros() const { return size(); }$/;"	f	class:DenseBase
outerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    Index outerSize() const$/;"	f	class:DenseBase
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    void resize(Index rows, Index cols)$/;"	f	class:DenseBase
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    void resize(Index size)$/;"	f	class:DenseBase
swap	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    void swap(PlainObjectBase<OtherDerived>& other)$/;"	f	class:DenseBase
swap	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    void swap(const DenseBase<OtherDerived>& other,$/;"	f	class:DenseBase
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseBase.h	/^    CoeffReturnType value() const$/;"	f	class:DenseBase
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    typedef DenseCoeffsBase<Derived, ReadOnlyAccessors> Base;$/;"	t	class:DenseCoeffsBase
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    typedef DenseCoeffsBase<Derived, WriteAccessors> Base;$/;"	t	class:DenseCoeffsBase
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    typedef EigenBase<Derived> Base;$/;"	t	class:DenseCoeffsBase
CoeffReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^                     >::type CoeffReturnType;$/;"	t	class:DenseCoeffsBase
DenseCoeffsBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^class DenseCoeffsBase<Derived, DirectAccessors> : public DenseCoeffsBase<Derived, ReadOnlyAccessors>$/;"	c
DenseCoeffsBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^class DenseCoeffsBase<Derived, DirectWriteAccessors>$/;"	c
DenseCoeffsBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^class DenseCoeffsBase<Derived, WriteAccessors> : public DenseCoeffsBase<Derived, ReadOnlyAccessors>$/;"	c
DenseCoeffsBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^class DenseCoeffsBase<Derived,ReadOnlyAccessors> : public EigenBase<Derived>$/;"	c
EIGEN_DENSECOEFFSBASE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    typedef typename internal::traits<Derived>::Index Index;$/;"	t	class:DenseCoeffsBase
PacketReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^                     >::type PacketReturnType;$/;"	t	class:DenseCoeffsBase
PacketScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    typedef typename internal::packet_traits<Scalar>::type PacketScalar;$/;"	t	class:DenseCoeffsBase
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:DenseCoeffsBase
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:DenseCoeffsBase
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	class:DenseCoeffsBase
add_const_on_value_type_if_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^template<typename T> struct add_const_on_value_type_if_arithmetic$/;"	s	namespace:internal
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE CoeffReturnType coeff(Index row, Index col) const$/;"	f	class:DenseCoeffsBase
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    coeff(Index index) const$/;"	f	class:DenseCoeffsBase
coeffByOuterInner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE CoeffReturnType coeffByOuterInner(Index outer, Index inner) const$/;"	f	class:DenseCoeffsBase
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE Scalar& coeffRef(Index row, Index col)$/;"	f	class:DenseCoeffsBase
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    coeffRef(Index index)$/;"	f	class:DenseCoeffsBase
coeffRefByOuterInner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    coeffRefByOuterInner(Index outer, Index inner)$/;"	f	class:DenseCoeffsBase
colIndexByOuterInner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner) const$/;"	f	class:DenseCoeffsBase
colStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    inline Index colStride() const$/;"	f	class:DenseCoeffsBase
copyCoeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE void copyCoeff(Index index, const DenseBase<OtherDerived>& other)$/;"	f	class:DenseCoeffsBase
copyCoeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE void copyCoeff(Index row, Index col, const DenseBase<OtherDerived>& other)$/;"	f	class:DenseCoeffsBase
copyCoeffByOuterInner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE void copyCoeffByOuterInner(Index outer, Index inner, const DenseBase<OtherDerived>& other)$/;"	f	class:DenseCoeffsBase
copyPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE void copyPacket(Index index, const DenseBase<OtherDerived>& other)$/;"	f	class:DenseCoeffsBase
copyPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE void copyPacket(Index row, Index col, const DenseBase<OtherDerived>& other)$/;"	f	class:DenseCoeffsBase
copyPacketByOuterInner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE void copyPacketByOuterInner(Index outer, Index inner, const DenseBase<OtherDerived>& other)$/;"	f	class:DenseCoeffsBase
first_aligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^inline static typename Derived::Index first_aligned(const Derived& m)$/;"	f	namespace:internal
first_aligned_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^struct first_aligned_impl$/;"	s	namespace:internal
first_aligned_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^struct first_aligned_impl<Derived, false>$/;"	s	namespace:internal
innerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    inline Index innerStride() const$/;"	f	class:DenseCoeffsBase
inner_stride_at_compile_time	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^struct inner_stride_at_compile_time$/;"	s	namespace:internal
inner_stride_at_compile_time	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^struct inner_stride_at_compile_time<Derived, false>$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^namespace internal {$/;"	n
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE CoeffReturnType operator()(Index row, Index col) const$/;"	f	class:DenseCoeffsBase
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    operator()(Index index) const$/;"	f	class:DenseCoeffsBase
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    operator()(Index index)$/;"	f	class:DenseCoeffsBase
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    operator()(Index row, Index col)$/;"	f	class:DenseCoeffsBase
operator []	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    operator[](Index index) const$/;"	f	class:DenseCoeffsBase
operator []	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    operator[](Index index)$/;"	f	class:DenseCoeffsBase
outerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    inline Index outerStride() const$/;"	f	class:DenseCoeffsBase
outer_stride_at_compile_time	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^struct outer_stride_at_compile_time$/;"	s	namespace:internal
outer_stride_at_compile_time	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^struct outer_stride_at_compile_time<Derived, false>$/;"	s	namespace:internal
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE PacketReturnType packet(Index index) const$/;"	f	class:DenseCoeffsBase
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE PacketReturnType packet(Index row, Index col) const$/;"	f	class:DenseCoeffsBase
packetByOuterInner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE PacketReturnType packetByOuterInner(Index outer, Index inner) const$/;"	f	class:DenseCoeffsBase
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^  enum { ret = 0 };$/;"	e	enum:internal::inner_stride_at_compile_time::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^  enum { ret = 0 };$/;"	e	enum:internal::outer_stride_at_compile_time::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^  enum { ret = traits<Derived>::InnerStrideAtCompileTime };$/;"	e	enum:internal::inner_stride_at_compile_time::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^  enum { ret = traits<Derived>::OuterStrideAtCompileTime };$/;"	e	enum:internal::outer_stride_at_compile_time::<anonymous>
rowIndexByOuterInner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner) const$/;"	f	class:DenseCoeffsBase
rowStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    inline Index rowStride() const$/;"	f	class:DenseCoeffsBase
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^  inline static typename Derived::Index run(const Derived& m)$/;"	f	struct:internal::first_aligned_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^  inline static typename Derived::Index run(const Derived&)$/;"	f	struct:internal::first_aligned_impl
stride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    inline Index stride() const$/;"	f	class:DenseCoeffsBase
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^  typedef typename conditional<is_arithmetic<T>::value, T, typename add_const_on_value_type<T>::type>::type type;$/;"	t	struct:internal::add_const_on_value_type_if_arithmetic
w	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    w() const { return (*this)[3]; }$/;"	f	class:DenseCoeffsBase
w	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    w() { return (*this)[3]; }$/;"	f	class:DenseCoeffsBase
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE void writePacket$/;"	f	class:DenseCoeffsBase
writePacketByOuterInner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    EIGEN_STRONG_INLINE void writePacketByOuterInner$/;"	f	class:DenseCoeffsBase
x	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    x() const { return (*this)[0]; }$/;"	f	class:DenseCoeffsBase
x	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    x() { return (*this)[0]; }$/;"	f	class:DenseCoeffsBase
y	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    y() const { return (*this)[1]; }$/;"	f	class:DenseCoeffsBase
y	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    y() { return (*this)[1]; }$/;"	f	class:DenseCoeffsBase
z	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    z() const { return (*this)[2]; }$/;"	f	class:DenseCoeffsBase
z	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseCoeffsBase.h	/^    z() { return (*this)[2]; }$/;"	f	class:DenseCoeffsBase
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(DenseIndex size, DenseIndex rows, DenseIndex cols)$/;"	f	class:DenseStorage
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(DenseIndex size, DenseIndex rows, DenseIndex) : m_data(internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(size)), m_rows(rows)$/;"	f	class:DenseStorage
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(DenseIndex size, DenseIndex, DenseIndex cols) : m_data(internal::conditional_aligned_new_auto<T,(_Options&DontAlign)==0>(size)), m_cols(cols)$/;"	f	class:DenseStorage
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(DenseIndex, DenseIndex rows, DenseIndex cols) : m_rows(rows), m_cols(cols) {}$/;"	f	class:DenseStorage
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(DenseIndex, DenseIndex rows, DenseIndex) : m_rows(rows) {}$/;"	f	class:DenseStorage
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(DenseIndex, DenseIndex, DenseIndex cols) : m_cols(cols) {}$/;"	f	class:DenseStorage
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(DenseIndex,DenseIndex,DenseIndex) {}$/;"	f	class:DenseStorage
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(internal::constructor_without_unaligned_array_assert) : m_data(0), m_cols(0) {}$/;"	f	class:DenseStorage
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(internal::constructor_without_unaligned_array_assert) : m_data(0), m_rows(0) {}$/;"	f	class:DenseStorage
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(internal::constructor_without_unaligned_array_assert) {}$/;"	f	class:DenseStorage
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline DenseStorage(internal::constructor_without_unaligned_array_assert)$/;"	f	class:DenseStorage
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline explicit DenseStorage() : m_cols(0) {}$/;"	f	class:DenseStorage
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline explicit DenseStorage() : m_data(0), m_cols(0) {}$/;"	f	class:DenseStorage
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline explicit DenseStorage() : m_data(0), m_rows(0) {}$/;"	f	class:DenseStorage
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline explicit DenseStorage() : m_data(0), m_rows(0), m_cols(0) {}$/;"	f	class:DenseStorage
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline explicit DenseStorage() : m_rows(0) {}$/;"	f	class:DenseStorage
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline explicit DenseStorage() : m_rows(0), m_cols(0) {}$/;"	f	class:DenseStorage
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline explicit DenseStorage() {}$/;"	f	class:DenseStorage
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^template<typename T, int Size, int _Cols, int _Options> class DenseStorage<T, Size, Dynamic, _Cols, _Options>$/;"	c
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^template<typename T, int Size, int _Options> class DenseStorage<T, Size, Dynamic, Dynamic, _Options>$/;"	c
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^template<typename T, int Size, int _Rows, int _Cols, int _Options> class DenseStorage$/;"	c
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^template<typename T, int Size, int _Rows, int _Options> class DenseStorage<T, Size, _Rows, Dynamic, _Options>$/;"	c
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^template<typename T, int _Cols, int _Options> class DenseStorage<T, Dynamic, Dynamic, _Cols, _Options>$/;"	c
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^template<typename T, int _Options> class DenseStorage<T, Dynamic, Dynamic, Dynamic, _Options>$/;"	c
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^template<typename T, int _Rows, int _Cols, int _Options> class DenseStorage<T, 0, _Rows, _Cols, _Options>$/;"	c
DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^template<typename T, int _Rows, int _Options> class DenseStorage<T, Dynamic, _Rows, Dynamic, _Options>$/;"	c
EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	31;"	d
EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	33;"	d
EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	56;"	d
EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	58;"	d
EIGEN_MATRIXSTORAGE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	28;"	d
array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^  EIGEN_USER_ALIGN16 T array[1];$/;"	m	struct:internal::plain_array
array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^  EIGEN_USER_ALIGN16 T array[Size];$/;"	m	struct:internal::plain_array
array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^  T array[Size];$/;"	m	struct:internal::plain_array
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline DenseIndex cols(void) const {return _Cols;}$/;"	f	class:DenseStorage
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline DenseIndex cols(void) const {return m_cols;}$/;"	f	class:DenseStorage
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline static DenseIndex cols(void) {return _Cols;}$/;"	f	class:DenseStorage
conservativeResize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline void conservativeResize(DenseIndex size, DenseIndex rows, DenseIndex cols)$/;"	f	class:DenseStorage
conservativeResize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline void conservativeResize(DenseIndex size, DenseIndex rows, DenseIndex)$/;"	f	class:DenseStorage
conservativeResize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline void conservativeResize(DenseIndex size, DenseIndex, DenseIndex cols)$/;"	f	class:DenseStorage
conservativeResize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline void conservativeResize(DenseIndex, DenseIndex rows, DenseIndex cols) { m_rows = rows; m_cols = cols; }$/;"	f	class:DenseStorage
conservativeResize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline void conservativeResize(DenseIndex, DenseIndex rows, DenseIndex) { m_rows = rows; }$/;"	f	class:DenseStorage
conservativeResize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline void conservativeResize(DenseIndex, DenseIndex, DenseIndex cols) { m_cols = cols; }$/;"	f	class:DenseStorage
conservativeResize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline void conservativeResize(DenseIndex,DenseIndex,DenseIndex) {}$/;"	f	class:DenseStorage
constructor_without_unaligned_array_assert	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^struct constructor_without_unaligned_array_assert {};$/;"	s	namespace:internal
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline T *data() { return 0; }$/;"	f	class:DenseStorage
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline T *data() { return m_data.array; }$/;"	f	class:DenseStorage
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline T *data() { return m_data; }$/;"	f	class:DenseStorage
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline const T *data() const { return 0; }$/;"	f	class:DenseStorage
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline const T *data() const { return m_data.array; }$/;"	f	class:DenseStorage
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline const T *data() const { return m_data; }$/;"	f	class:DenseStorage
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^namespace internal {$/;"	n
m_cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    DenseIndex m_cols;$/;"	m	class:DenseStorage
m_data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    T *m_data;$/;"	m	class:DenseStorage
m_data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    internal::plain_array<T,Size,_Options> m_data;$/;"	m	class:DenseStorage
m_rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    DenseIndex m_rows;$/;"	m	class:DenseStorage
plain_array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^  plain_array() { EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(0xf) }$/;"	f	struct:internal::plain_array
plain_array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^  plain_array() {}$/;"	f	struct:internal::plain_array
plain_array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^  plain_array(constructor_without_unaligned_array_assert) {}$/;"	f	struct:internal::plain_array
plain_array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^struct plain_array$/;"	s	namespace:internal
plain_array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^struct plain_array<T, 0, MatrixOrArrayOptions, Alignment>$/;"	s	namespace:internal
plain_array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^struct plain_array<T, Size, MatrixOrArrayOptions, 16>$/;"	s	namespace:internal
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    EIGEN_STRONG_INLINE void resize(DenseIndex size, DenseIndex rows, DenseIndex)$/;"	f	class:DenseStorage
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    EIGEN_STRONG_INLINE void resize(DenseIndex size, DenseIndex, DenseIndex cols)$/;"	f	class:DenseStorage
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline void resize(DenseIndex, DenseIndex rows, DenseIndex cols) { m_rows = rows; m_cols = cols; }$/;"	f	class:DenseStorage
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline void resize(DenseIndex, DenseIndex rows, DenseIndex) { m_rows = rows; }$/;"	f	class:DenseStorage
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline void resize(DenseIndex, DenseIndex, DenseIndex cols) { m_cols = cols; }$/;"	f	class:DenseStorage
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline void resize(DenseIndex,DenseIndex,DenseIndex) {}$/;"	f	class:DenseStorage
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    void resize(DenseIndex size, DenseIndex rows, DenseIndex cols)$/;"	f	class:DenseStorage
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline DenseIndex rows(void) const {return _Rows;}$/;"	f	class:DenseStorage
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline DenseIndex rows(void) const {return m_rows;}$/;"	f	class:DenseStorage
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline static DenseIndex rows(void) {return _Rows;}$/;"	f	class:DenseStorage
swap	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline void swap(DenseStorage& ) {}$/;"	f	class:DenseStorage
swap	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline void swap(DenseStorage& other) { std::swap(m_data,other.m_data); std::swap(m_cols,other.m_cols); }$/;"	f	class:DenseStorage
swap	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline void swap(DenseStorage& other) { std::swap(m_data,other.m_data); std::swap(m_rows,other.m_rows); }$/;"	f	class:DenseStorage
swap	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline void swap(DenseStorage& other) { std::swap(m_data,other.m_data); }$/;"	f	class:DenseStorage
swap	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline void swap(DenseStorage& other)$/;"	f	class:DenseStorage
~DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline ~DenseStorage() { internal::conditional_aligned_delete_auto<T,(_Options&DontAlign)==0>(m_data, _Cols*m_rows); }$/;"	f	class:DenseStorage
~DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline ~DenseStorage() { internal::conditional_aligned_delete_auto<T,(_Options&DontAlign)==0>(m_data, _Rows*m_cols); }$/;"	f	class:DenseStorage
~DenseStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DenseStorage.h	/^    inline ~DenseStorage() { internal::conditional_aligned_delete_auto<T,(_Options&DontAlign)==0>(m_data, m_rows*m_cols); }$/;"	f	class:DenseStorage
AbsDiagIndex	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    AbsDiagIndex = DiagIndex<0 ? -DiagIndex : DiagIndex, \/\/ only used if DiagIndex != Dynamic$/;"	e	enum:internal::traits::<anonymous>
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    typedef typename internal::dense_xpr_base<Diagonal>::type Base;$/;"	t	class:Diagonal
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    CoeffReadCost = _MatrixTypeNested::CoeffReadCost,$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    ColsAtCompileTime = 1,$/;"	e	enum:internal::traits::<anonymous>
Diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    inline Diagonal(MatrixType& matrix, Index index = DiagIndex) : m_matrix(matrix), m_index(index) {}$/;"	f	class:Diagonal
Diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^template<typename MatrixType, int DiagIndex> class Diagonal$/;"	c
EIGEN_DIAGONAL_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	26;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    Flags = (unsigned int)_MatrixTypeNested::Flags & (HereditaryBits | LinearAccessBit | MaskLvalueBit | DirectAccessBit) & ~RowMajorBit,$/;"	e	enum:internal::traits::<anonymous>
InnerStrideAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    InnerStrideAtCompileTime = MatrixTypeOuterStride == Dynamic ? Dynamic : MatrixTypeOuterStride+1,$/;"	e	enum:internal::traits::<anonymous>
MaskLvalueBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    MaskLvalueBit = is_lvalue<MatrixType>::value ? LvalueBit : 0,$/;"	e	enum:internal::traits::<anonymous>
MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^  typedef typename nested<MatrixType>::type MatrixTypeNested;$/;"	t	struct:internal::traits
MatrixTypeOuterStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    MatrixTypeOuterStride = outer_stride_at_compile_time<MatrixType>::ret,$/;"	e	enum:internal::traits::<anonymous>
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    MaxColsAtCompileTime = 1,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    MaxRowsAtCompileTime = int(MatrixType::MaxSizeAtCompileTime) == Dynamic ? Dynamic$/;"	e	enum:internal::traits::<anonymous>
OuterStrideAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    OuterStrideAtCompileTime = 0$/;"	e	enum:internal::traits::<anonymous>
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    RowsAtCompileTime = (int(DiagIndex) == Dynamic || int(MatrixType::SizeAtCompileTime) == Dynamic) ? Dynamic$/;"	e	enum:internal::traits::<anonymous>
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^  typedef typename MatrixType::StorageKind StorageKind;$/;"	t	struct:internal::traits
_MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^  typedef typename remove_reference<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	struct:internal::traits
absDiagIndex	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    EIGEN_STRONG_INLINE Index absDiagIndex() const { return m_index.value()>0 ? m_index.value() : -m_index.value(); }$/;"	f	class:Diagonal
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    inline CoeffReturnType coeff(Index index) const$/;"	f	class:Diagonal
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    inline CoeffReturnType coeff(Index row, Index) const$/;"	f	class:Diagonal
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    inline Scalar& coeffRef(Index index)$/;"	f	class:Diagonal
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    inline Scalar& coeffRef(Index row, Index)$/;"	f	class:Diagonal
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    inline const Scalar& coeffRef(Index index) const$/;"	f	class:Diagonal
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    inline const Scalar& coeffRef(Index row, Index) const$/;"	f	class:Diagonal
colOffset	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    EIGEN_STRONG_INLINE Index colOffset() const { return m_index.value()>0 ? m_index.value() : 0; }$/;"	f	class:Diagonal
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    inline Index cols() const { return 1; }$/;"	f	class:Diagonal
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^MatrixBase<Derived>::diagonal() const$/;"	f	class:MatrixBase
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^MatrixBase<Derived>::diagonal()$/;"	f	class:MatrixBase
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^MatrixBase<Derived>::diagonal(Index index) const$/;"	f	class:MatrixBase
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^MatrixBase<Derived>::diagonal(Index index)$/;"	f	class:MatrixBase
innerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    inline Index innerStride() const$/;"	f	class:Diagonal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^namespace internal {$/;"	n
m_index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    const internal::variable_if_dynamic<Index, DiagIndex> m_index;$/;"	m	class:Diagonal
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    const typename MatrixType::Nested m_matrix;$/;"	m	class:Diagonal
outerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    inline Index outerStride() const$/;"	f	class:Diagonal
rowOffset	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    EIGEN_STRONG_INLINE Index rowOffset() const { return m_index.value()>0 ? 0 : -m_index.value(); }$/;"	f	class:Diagonal
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^    inline Index rows() const$/;"	f	class:Diagonal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Diagonal.h	/^struct traits<Diagonal<MatrixType,DiagIndex> >$/;"	s	namespace:internal
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^      ColsAtCompileTime = DiagonalVectorType::SizeAtCompileTime,$/;"	e	enum:DiagonalBase::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    ColsAtCompileTime = DiagonalVectorType::SizeAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
DenseMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    typedef Matrix<Scalar, RowsAtCompileTime, ColsAtCompileTime, 0, MaxRowsAtCompileTime, MaxColsAtCompileTime> DenseMatrixType;$/;"	t	class:DiagonalBase
DenseType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    typedef DenseMatrixType DenseType;$/;"	t	class:DiagonalBase
DiagonalBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^class DiagonalBase : public EigenBase<Derived>$/;"	c
DiagonalMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    explicit inline DiagonalMatrix(const MatrixBase<OtherDerived>& other) : m_diagonal(other)$/;"	f	class:DiagonalMatrix
DiagonalMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline DiagonalMatrix() {}$/;"	f	class:DiagonalMatrix
DiagonalMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline DiagonalMatrix(Index dim) : m_diagonal(dim) {}$/;"	f	class:DiagonalMatrix
DiagonalMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline DiagonalMatrix(const DiagonalBase<OtherDerived>& other) : m_diagonal(other.diagonal()) {}$/;"	f	class:DiagonalMatrix
DiagonalMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline DiagonalMatrix(const DiagonalMatrix& other) : m_diagonal(other.diagonal()) {}$/;"	f	class:DiagonalMatrix
DiagonalMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline DiagonalMatrix(const Scalar& x, const Scalar& y) : m_diagonal(x,y) {}$/;"	f	class:DiagonalMatrix
DiagonalMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline DiagonalMatrix(const Scalar& x, const Scalar& y, const Scalar& z) : m_diagonal(x,y,z) {}$/;"	f	class:DiagonalMatrix
DiagonalMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^class DiagonalMatrix$/;"	c
DiagonalVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    typedef _DiagonalVectorType DiagonalVectorType;$/;"	t	class:DiagonalWrapper
DiagonalVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    typedef typename internal::traits<Derived>::DiagonalVectorType DiagonalVectorType;$/;"	t	class:DiagonalBase
DiagonalVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    typedef typename internal::traits<DiagonalMatrix>::DiagonalVectorType DiagonalVectorType;$/;"	t	class:DiagonalMatrix
DiagonalVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^  typedef Matrix<_Scalar,SizeAtCompileTime,1,0,MaxSizeAtCompileTime,1> DiagonalVectorType;$/;"	t	struct:internal::traits
DiagonalVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^  typedef _DiagonalVectorType DiagonalVectorType;$/;"	t	struct:internal::traits
DiagonalWrapper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline DiagonalWrapper(const DiagonalVectorType& diagonal) : m_diagonal(diagonal) {}$/;"	f	class:DiagonalWrapper
DiagonalWrapper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^class DiagonalWrapper$/;"	c
EIGEN_DIAGONALMATRIX_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	27;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^      Flags = 0$/;"	e	enum:DiagonalBase::<anonymous>
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    Flags =  traits<DiagonalVectorType>::Flags & LvalueBit$/;"	e	enum:internal::traits::<anonymous>
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    Flags = LvalueBit$/;"	e	enum:internal::traits::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    typedef typename internal::traits<Derived>::Index Index;$/;"	t	class:DiagonalBase
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    typedef typename internal::traits<DiagonalMatrix>::Index Index;$/;"	t	class:DiagonalMatrix
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^  typedef DenseIndex Index;$/;"	t	struct:internal::traits
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^  typedef typename DiagonalVectorType::Index Index;$/;"	t	struct:internal::traits
IsVectorAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^      IsVectorAtCompileTime = 0,$/;"	e	enum:DiagonalBase::<anonymous>
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^      MaxColsAtCompileTime = DiagonalVectorType::MaxSizeAtCompileTime,$/;"	e	enum:DiagonalBase::<anonymous>
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    MaxColsAtCompileTime = DiagonalVectorType::SizeAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^      MaxRowsAtCompileTime = DiagonalVectorType::MaxSizeAtCompileTime,$/;"	e	enum:DiagonalBase::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    MaxRowsAtCompileTime = DiagonalVectorType::SizeAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
Nested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    typedef DiagonalWrapper Nested;$/;"	t	class:DiagonalWrapper
Nested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    typedef const DiagonalMatrix& Nested;$/;"	t	class:DiagonalMatrix
PlainObject	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    typedef DiagonalMatrix<Scalar,DiagonalVectorType::SizeAtCompileTime,DiagonalVectorType::MaxSizeAtCompileTime> PlainObject;$/;"	t	class:DiagonalBase
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^      RowsAtCompileTime = DiagonalVectorType::SizeAtCompileTime,$/;"	e	enum:DiagonalBase::<anonymous>
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    RowsAtCompileTime = DiagonalVectorType::SizeAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    typedef _Scalar Scalar;$/;"	t	class:DiagonalMatrix
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    typedef typename DiagonalVectorType::Scalar Scalar;$/;"	t	class:DiagonalBase
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^  typedef typename DiagonalVectorType::Scalar Scalar;$/;"	t	struct:internal::traits
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	class:DiagonalBase
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    typedef typename internal::traits<DiagonalMatrix>::StorageKind StorageKind;$/;"	t	class:DiagonalMatrix
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^  typedef Dense StorageKind;$/;"	t	struct:internal::traits
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^  typedef typename DiagonalVectorType::StorageKind StorageKind;$/;"	t	struct:internal::traits
addTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    void addTo(MatrixBase<DenseDerived> &other) const$/;"	f	class:DiagonalBase
asDiagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^MatrixBase<Derived>::asDiagonal() const$/;"	f	class:MatrixBase
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline Index cols() const { return diagonal().size(); }$/;"	f	class:DiagonalBase
derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline Derived& derived() { return *static_cast<Derived*>(this); }$/;"	f	class:DiagonalBase
derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline const Derived& derived() const { return *static_cast<const Derived*>(this); }$/;"	f	class:DiagonalBase
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    const DiagonalVectorType& diagonal() const { return m_diagonal; }$/;"	f	class:DiagonalWrapper
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline DiagonalVectorType& diagonal() { return derived().diagonal(); }$/;"	f	class:DiagonalBase
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline DiagonalVectorType& diagonal() { return m_diagonal; }$/;"	f	class:DiagonalMatrix
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline const DiagonalVectorType& diagonal() const { return derived().diagonal(); }$/;"	f	class:DiagonalBase
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline const DiagonalVectorType& diagonal() const { return m_diagonal; }$/;"	f	class:DiagonalMatrix
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^void DiagonalBase<Derived>::evalTo(MatrixBase<DenseDerived> &other) const$/;"	f	class:DiagonalBase
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^namespace internal {$/;"	n
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inverse() const$/;"	f	class:DiagonalBase
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    bool isApprox(const DiagonalBase<OtherDerived>& other, typename NumTraits<Scalar>::Real precision = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:DiagonalBase
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    bool isApprox(const MatrixBase<OtherDerived>& other, typename NumTraits<Scalar>::Real precision = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:DiagonalBase
isDiagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^bool MatrixBase<Derived>::isDiagonal(RealScalar prec) const$/;"	f	class:MatrixBase
m_diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    DiagonalVectorType m_diagonal;$/;"	m	class:DiagonalMatrix
m_diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    const typename DiagonalVectorType::Nested m_diagonal;$/;"	m	class:DiagonalWrapper
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    DiagonalMatrix& operator=(const DiagonalBase<OtherDerived>& other)$/;"	f	class:DiagonalMatrix
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    DiagonalMatrix& operator=(const DiagonalMatrix& other)$/;"	f	class:DiagonalMatrix
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline void resize(Index size) { m_diagonal.resize(size); }$/;"	f	class:DiagonalMatrix
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline Index rows() const { return diagonal().size(); }$/;"	f	class:DiagonalBase
setIdentity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline void setIdentity() { m_diagonal.setOnes(); }$/;"	f	class:DiagonalMatrix
setIdentity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline void setIdentity(Index size) { m_diagonal.setOnes(size); }$/;"	f	class:DiagonalMatrix
setZero	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline void setZero() { m_diagonal.setZero(); }$/;"	f	class:DiagonalMatrix
setZero	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    inline void setZero(Index size) { m_diagonal.setZero(size); }$/;"	f	class:DiagonalMatrix
subTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    void subTo(MatrixBase<DenseDerived> &other) const$/;"	f	class:DiagonalBase
toDenseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^    DenseMatrixType toDenseMatrix() const { return derived(); }$/;"	f	class:DiagonalBase
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^struct traits<DiagonalMatrix<_Scalar,SizeAtCompileTime,MaxSizeAtCompileTime> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalMatrix.h	/^struct traits<DiagonalWrapper<_DiagonalVectorType> >$/;"	s	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    typedef MatrixBase<DiagonalProduct> Base;$/;"	t	class:DiagonalProduct
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    CoeffReadCost = NumTraits<Scalar>::MulCost + MatrixType::CoeffReadCost + DiagonalType::DiagonalVectorType::CoeffReadCost$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
DiagonalProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    inline DiagonalProduct(const MatrixType& matrix, const DiagonalType& diagonal)$/;"	f	class:DiagonalProduct
DiagonalProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^class DiagonalProduct : internal::no_assignment_operator,$/;"	c
DiagonalType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    _SameTypes = is_same<typename MatrixType::Scalar, typename DiagonalType::Scalar>::value,$/;"	e	enum:internal::traits::<anonymous>
EIGEN_DIAGONALPRODUCT_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	27;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    Flags = (HereditaryBits & (unsigned int)(MatrixType::Flags)) | (_Vectorizable ? PacketAccessBit : 0),$/;"	e	enum:internal::traits::<anonymous>
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    _SameTypes = is_same<typename MatrixType::Scalar, typename DiagonalType::Scalar>::value,$/;"	e	class:internal::traits::<anonymous>::DiagonalType
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^  typedef typename scalar_product_traits<typename MatrixType::Scalar, typename DiagonalType::Scalar>::ReturnType Scalar;$/;"	t	struct:internal::traits
_PacketOnDiag	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    _PacketOnDiag = !((int(_StorageOrder) == RowMajor && int(ProductOrder) == OnTheLeft)$/;"	e	enum:internal::traits::<anonymous>
_SameTypes	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    _SameTypes = is_same<typename MatrixType::Scalar, typename DiagonalType::Scalar>::value,$/;"	e	enum:internal::traits::<anonymous>
_StorageOrder	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    _StorageOrder = MatrixType::Flags & RowMajorBit ? RowMajor : ColMajor,$/;"	e	enum:internal::traits::<anonymous>
_Vectorizable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    _Vectorizable = bool(int(MatrixType::Flags)&PacketAccessBit) && _SameTypes && ((!_PacketOnDiag) || (bool(int(DiagonalType::Flags)&PacketAccessBit))),$/;"	e	enum:internal::traits::<anonymous>
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    const Scalar coeff(Index row, Index col) const$/;"	f	class:DiagonalProduct
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:DiagonalProduct
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^namespace internal {$/;"	n
m_diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    const typename DiagonalType::Nested m_diagonal;$/;"	m	class:DiagonalProduct
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    const typename MatrixType::Nested m_matrix;$/;"	m	class:DiagonalProduct
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^DiagonalBase<DiagonalDerived>::operator*(const MatrixBase<MatrixDerived> &matrix) const$/;"	f	class:DiagonalBase
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^MatrixBase<Derived>::operator*(const DiagonalBase<DiagonalDerived> &diagonal) const$/;"	f	class:MatrixBase
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    EIGEN_STRONG_INLINE PacketScalar packet(Index row, Index col) const$/;"	f	class:DiagonalProduct
packet_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    EIGEN_STRONG_INLINE PacketScalar packet_impl(Index row, Index col, Index id, internal::false_type) const$/;"	f	class:DiagonalProduct
packet_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    EIGEN_STRONG_INLINE PacketScalar packet_impl(Index row, Index col, Index id, internal::true_type) const$/;"	f	class:DiagonalProduct
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:DiagonalProduct
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^struct traits<DiagonalProduct<MatrixType, DiagonalType, ProductOrder> >$/;"	s	namespace:internal
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/DiagonalProduct.h	/^    _SameTypes = is_same<typename MatrixType::Scalar, typename DiagonalType::Scalar>::value,$/;"	e	class:internal::traits::<anonymous>::DiagonalType::Scalar
EIGEN_DOT_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	26;"	d
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^  typedef typename NumTraits<typename traits<Derived>::Scalar>::Real RealScalar;$/;"	t	struct:internal::lpNorm_selector
ResScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^  typedef typename scalar_product_traits<typename traits<T>::Scalar,typename traits<U>::Scalar>::ReturnType ResScalar;$/;"	t	struct:internal::dot_nocheck
dot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^MatrixBase<Derived>::dot(const MatrixBase<OtherDerived>& other) const$/;"	f	class:MatrixBase
dot_nocheck	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^struct dot_nocheck$/;"	s	namespace:internal
dot_nocheck	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^struct dot_nocheck<T, U, true>$/;"	s	namespace:internal
eigen2_dot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^MatrixBase<Derived>::eigen2_dot(const MatrixBase<OtherDerived>& other) const$/;"	f	class:MatrixBase
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^namespace internal {$/;"	n
isOrthogonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^bool MatrixBase<Derived>::isOrthogonal$/;"	f	class:MatrixBase
isUnitary	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^bool MatrixBase<Derived>::isUnitary(RealScalar prec) const$/;"	f	class:MatrixBase
lpNorm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^MatrixBase<Derived>::lpNorm() const$/;"	f	class:MatrixBase
lpNorm_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^struct lpNorm_selector$/;"	s	namespace:internal
lpNorm_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^struct lpNorm_selector<Derived, 1>$/;"	s	namespace:internal
lpNorm_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^struct lpNorm_selector<Derived, 2>$/;"	s	namespace:internal
lpNorm_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^struct lpNorm_selector<Derived, Infinity>$/;"	s	namespace:internal
norm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^inline typename NumTraits<typename internal::traits<Derived>::Scalar>::Real MatrixBase<Derived>::norm() const$/;"	f	class:MatrixBase
normalize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^inline void MatrixBase<Derived>::normalize()$/;"	f	class:MatrixBase
normalized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^MatrixBase<Derived>::normalized() const$/;"	f	class:MatrixBase
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^  inline static RealScalar run(const MatrixBase<Derived>& m)$/;"	f	struct:internal::lpNorm_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^  inline static typename NumTraits<typename traits<Derived>::Scalar>::Real run(const MatrixBase<Derived>& m)$/;"	f	struct:internal::lpNorm_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^  static inline ResScalar run(const MatrixBase<T>& a, const MatrixBase<U>& b)$/;"	f	struct:internal::dot_nocheck
squaredNorm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Dot.h	/^EIGEN_STRONG_INLINE typename NumTraits<typename internal::traits<Derived>::Scalar>::Real MatrixBase<Derived>::squaredNorm() const$/;"	f	class:MatrixBase
EIGEN_EIGENBASE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	27;"	d
EigenBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^template<typename Derived> struct EigenBase$/;"	s
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^  typedef typename internal::traits<Derived>::Index Index;$/;"	t	struct:EigenBase
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^  typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	struct:EigenBase
addTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^  template<typename Dest> inline void addTo(Dest& dst) const$/;"	f	struct:EigenBase
applyOnTheLeft	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^inline void MatrixBase<Derived>::applyOnTheLeft(const EigenBase<OtherDerived> &other)$/;"	f	class:MatrixBase
applyOnTheRight	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^inline void MatrixBase<Derived>::applyOnTheRight(const EigenBase<OtherDerived> &other)$/;"	f	class:MatrixBase
applyThisOnTheLeft	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^  template<typename Dest> inline void applyThisOnTheLeft(Dest& dst) const$/;"	f	struct:EigenBase
applyThisOnTheRight	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^  template<typename Dest> inline void applyThisOnTheRight(Dest& dst) const$/;"	f	struct:EigenBase
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^  inline Index cols() const { return derived().cols(); }$/;"	f	struct:EigenBase
const_cast_derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^  inline Derived& const_cast_derived() const$/;"	f	struct:EigenBase
const_derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^  inline const Derived& const_derived() const$/;"	f	struct:EigenBase
derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^  Derived& derived() { return *static_cast<Derived*>(this); }$/;"	f	struct:EigenBase
derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^  const Derived& derived() const { return *static_cast<const Derived*>(this); }$/;"	f	struct:EigenBase
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^  template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:EigenBase
operator *=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^MatrixBase<Derived>::operator*=(const EigenBase<OtherDerived> &other)$/;"	f	class:MatrixBase
operator +=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^Derived& DenseBase<Derived>::operator+=(const EigenBase<OtherDerived> &other)$/;"	f	class:DenseBase
operator -=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^Derived& DenseBase<Derived>::operator-=(const EigenBase<OtherDerived> &other)$/;"	f	class:DenseBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^Derived& DenseBase<Derived>::operator=(const EigenBase<OtherDerived> &other)$/;"	f	class:DenseBase
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^  inline Index rows() const { return derived().rows(); }$/;"	f	struct:EigenBase
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^  inline Index size() const { return rows() * cols(); }$/;"	f	struct:EigenBase
subTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/EigenBase.h	/^  template<typename Dest> inline void subTo(Dest& dst) const$/;"	f	struct:EigenBase
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^    typedef MatrixBase<Flagged> Base;$/;"	t	class:Flagged
EIGEN_FLAGGED_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	26;"	d
ExpressionTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^        ExpressionType, const ExpressionType&>::type ExpressionTypeNested;$/;"	t	class:Flagged
Flagged	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^    inline Flagged(const ExpressionType& matrix) : m_matrix(matrix) {}$/;"	f	class:Flagged
Flagged	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^template<typename ExpressionType, unsigned int Added, unsigned int Removed> class Flagged$/;"	c
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^  enum { Flags = (ExpressionType::Flags | Added) & ~Removed };$/;"	e	enum:internal::traits::<anonymous>
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^    typedef typename ExpressionType::InnerIterator InnerIterator;$/;"	t	class:Flagged
_expression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^    const ExpressionType& _expression() const { return m_matrix; }$/;"	f	class:Flagged
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^    inline CoeffReturnType coeff(Index index) const$/;"	f	class:Flagged
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^    inline CoeffReturnType coeff(Index row, Index col) const$/;"	f	class:Flagged
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^    inline Scalar& coeffRef(Index index)$/;"	f	class:Flagged
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:Flagged
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^    inline const Scalar& coeffRef(Index index) const$/;"	f	class:Flagged
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^    inline const Scalar& coeffRef(Index row, Index col) const$/;"	f	class:Flagged
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:Flagged
flagged	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^DenseBase<Derived>::flagged() const$/;"	f	class:DenseBase
innerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^    inline Index innerStride() const { return m_matrix.innerStride(); }$/;"	f	class:Flagged
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^namespace internal {$/;"	n
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^    ExpressionTypeNested m_matrix;$/;"	m	class:Flagged
outerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^    inline Index outerStride() const { return m_matrix.outerStride(); }$/;"	f	class:Flagged
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^    inline const PacketScalar packet(Index index) const$/;"	f	class:Flagged
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^    inline const PacketScalar packet(Index row, Index col) const$/;"	f	class:Flagged
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:Flagged
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^struct traits<Flagged<ExpressionType, Added, Removed> > : traits<ExpressionType>$/;"	s	namespace:internal
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^    inline void writePacket(Index index, const PacketScalar& x)$/;"	f	class:Flagged
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Flagged.h	/^    inline void writePacket(Index row, Index col, const PacketScalar& x)$/;"	f	class:Flagged
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^    typedef typename internal::dense_xpr_base<ForceAlignedAccess>::type Base;$/;"	t	class:ForceAlignedAccess
EIGEN_FORCEALIGNEDACCESS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	26;"	d
ForceAlignedAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^    inline ForceAlignedAccess(const ExpressionType& matrix) : m_expression(matrix) {}$/;"	f	class:ForceAlignedAccess
ForceAlignedAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^template<typename ExpressionType> class ForceAlignedAccess$/;"	c
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^    inline const CoeffReturnType coeff(Index index) const$/;"	f	class:ForceAlignedAccess
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^    inline const CoeffReturnType coeff(Index row, Index col) const$/;"	f	class:ForceAlignedAccess
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^    inline Scalar& coeffRef(Index index)$/;"	f	class:ForceAlignedAccess
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:ForceAlignedAccess
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^    inline Index cols() const { return m_expression.cols(); }$/;"	f	class:ForceAlignedAccess
forceAlignedAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^MatrixBase<Derived>::forceAlignedAccess() const$/;"	f	class:MatrixBase
forceAlignedAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^MatrixBase<Derived>::forceAlignedAccess()$/;"	f	class:MatrixBase
forceAlignedAccessIf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^MatrixBase<Derived>::forceAlignedAccessIf() const$/;"	f	class:MatrixBase
forceAlignedAccessIf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^MatrixBase<Derived>::forceAlignedAccessIf()$/;"	f	class:MatrixBase
innerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^    inline Index innerStride() const { return m_expression.innerStride(); }$/;"	f	class:ForceAlignedAccess
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^namespace internal {$/;"	n
m_expression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^    const ExpressionType& m_expression;$/;"	m	class:ForceAlignedAccess
operator const ExpressionType&	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^    operator const ExpressionType&() const { return m_expression; }$/;"	f	class:ForceAlignedAccess
outerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^    inline Index outerStride() const { return m_expression.outerStride(); }$/;"	f	class:ForceAlignedAccess
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^    inline const PacketScalar packet(Index index) const$/;"	f	class:ForceAlignedAccess
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^    inline const PacketScalar packet(Index row, Index col) const$/;"	f	class:ForceAlignedAccess
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^    inline Index rows() const { return m_expression.rows(); }$/;"	f	class:ForceAlignedAccess
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^struct traits<ForceAlignedAccess<ExpressionType> > : public traits<ExpressionType>$/;"	s	namespace:internal
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^    inline void writePacket(Index index, const PacketScalar& x)$/;"	f	class:ForceAlignedAccess
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ForceAlignedAccess.h	/^    inline void writePacket(Index row, Index col, const PacketScalar& x)$/;"	f	class:ForceAlignedAccess
AddCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = is_same<Scalar, NewType>::value ? 0 : NumTraits<NewType>::AddCost, PacketAccess = false }; };$/;"	e	class:internal::functor_traits::<anonymous>::NumTraits
Conj	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    Conj = NumTraits<LhsScalar>::IsComplex$/;"	e	enum:internal::scalar_conj_product_op::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    Cost = (NumTraits<LhsScalar>::MulCost + NumTraits<RhsScalar>::MulCost)\/2, \/\/ rough estimate!$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    Cost = 2 * NumTraits<Scalar>::MulCost,$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    Cost = 5 * NumTraits<Scalar>::MulCost,$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    Cost = NumTraits<LhsScalar>::MulCost,$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    Cost = NumTraits<Scalar>::AddCost,$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    Cost = NumTraits<Scalar>::IsComplex ? NumTraits<Scalar>::AddCost : 0,$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess=0 };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 0, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1 + functor_traits<T>::Cost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = packet_traits<Scalar>::HasSetLinear, IsRepeatable = true }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = packet_traits<Scalar>::Vectorizable, IsRepeatable = true }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 2 * NumTraits<Scalar>::MulCost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 2*NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasMul }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasExp }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasLog }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar1>::MulCost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::AddCost, PacketAccess = false, IsRepeatable = true }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::AddCost, PacketAccess = packet_traits<Scalar>::HasAdd }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasAbs2 }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasDiv }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasMul }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<T>::AddCost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<T>::MulCost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = functor_traits<T0>::Cost + functor_traits<T1>::Cost + functor_traits<T2>::Cost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = functor_traits<T0>::Cost + functor_traits<T1>::Cost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = functor_traits<T>::Cost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = is_same<Scalar, NewType>::value ? 0 : NumTraits<NewType>::AddCost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
EIGEN_FUNCTORS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	26;"	d
HasMul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = internal::is_same<LhsScalar, RhsScalar>::value && packet_traits<LhsScalar>::HasMul$/;"	e	class:internal::functor_traits::<anonymous>::packet_traits
HasMul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    Vectorizable = is_same<LhsScalar,RhsScalar>::value && packet_traits<LhsScalar>::HasMul && packet_traits<RhsScalar>::HasMul$/;"	e	class:internal::scalar_product_op::<anonymous>::packet_traits
IsRepeatable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = packet_traits<Scalar>::HasSetLinear, IsRepeatable = true }; };$/;"	e	enum:internal::functor_traits::<anonymous>
IsRepeatable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = packet_traits<Scalar>::Vectorizable, IsRepeatable = true }; };$/;"	e	enum:internal::functor_traits::<anonymous>
IsRepeatable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::AddCost, PacketAccess = false, IsRepeatable = true }; };$/;"	e	enum:internal::functor_traits::<anonymous>
NewType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = is_same<Scalar, NewType>::value ? 0 : NumTraits<NewType>::AddCost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
NumTraits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = is_same<Scalar, NewType>::value ? 0 : NumTraits<NewType>::AddCost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:internal::linspaced_op
Packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:internal::linspaced_op_impl
Packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:internal::scalar_acos_op
Packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:internal::scalar_add_op
Packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:internal::scalar_asin_op
Packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:internal::scalar_constant_op
Packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:internal::scalar_cos_op
Packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:internal::scalar_exp_op
Packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:internal::scalar_log_op
Packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:internal::scalar_multiple_op
Packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:internal::scalar_quotient1_impl
Packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:internal::scalar_sin_op
Packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:internal::scalar_sqrt_op
Packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:internal::scalar_tan_op
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = internal::is_same<LhsScalar, RhsScalar>::value && packet_traits<LhsScalar>::HasMul$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasACos$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasASin$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasAbs$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasAdd$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasConj$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasCos$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasDiv$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasMax$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasMin$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasNegate };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasSin$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasSqrt$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasSub$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = packet_traits<Scalar>::HasTan$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = scalar_product_op<LhsScalar,RhsScalar>::Vectorizable$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess=0 };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 0, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1 + functor_traits<T>::Cost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = packet_traits<Scalar>::HasSetLinear, IsRepeatable = true }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 1, PacketAccess = packet_traits<Scalar>::Vectorizable, IsRepeatable = true }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 2 * NumTraits<Scalar>::MulCost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 2*NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasMul }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasExp }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasLog }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar1>::MulCost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::AddCost, PacketAccess = false, IsRepeatable = true }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::AddCost, PacketAccess = packet_traits<Scalar>::HasAdd }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasAbs2 }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasDiv }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<Scalar>::MulCost, PacketAccess = packet_traits<Scalar>::HasMul }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<T>::AddCost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = NumTraits<T>::MulCost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = functor_traits<T0>::Cost + functor_traits<T1>::Cost + functor_traits<T2>::Cost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = functor_traits<T0>::Cost + functor_traits<T1>::Cost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = functor_traits<T>::Cost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = is_same<Scalar, NewType>::value ? 0 : NumTraits<NewType>::AddCost, PacketAccess = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
RhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = internal::is_same<LhsScalar, RhsScalar>::value && packet_traits<LhsScalar>::HasMul$/;"	e	enum:internal::functor_traits::<anonymous>
RhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = scalar_product_op<LhsScalar,RhsScalar>::Vectorizable$/;"	e	enum:internal::functor_traits::<anonymous>
RhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    Vectorizable = is_same<LhsScalar,RhsScalar>::value && packet_traits<LhsScalar>::HasMul && packet_traits<RhsScalar>::HasMul$/;"	e	enum:internal::scalar_product_op::<anonymous>
Vectorizable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = scalar_product_op<LhsScalar,RhsScalar>::Vectorizable$/;"	e	class:internal::functor_traits::<anonymous>::RhsScalar
Vectorizable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    Vectorizable = is_same<LhsScalar,RhsScalar>::value && packet_traits<LhsScalar>::HasMul && packet_traits<RhsScalar>::HasMul$/;"	e	enum:internal::scalar_product_op::<anonymous>
functor_allows_mixing_real_and_complex	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Functor> struct functor_allows_mixing_real_and_complex { enum { ret = 0 }; };$/;"	s	namespace:internal
functor_allows_mixing_real_and_complex	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename LhsScalar,typename RhsScalar> struct functor_allows_mixing_real_and_complex<scalar_conj_product_op<LhsScalar,RhsScalar> > { enum { ret = 1 }; };$/;"	s	namespace:internal
functor_allows_mixing_real_and_complex	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename LhsScalar,typename RhsScalar> struct functor_allows_mixing_real_and_complex<scalar_product_op<LhsScalar,RhsScalar> > { enum { ret = 1 }; };$/;"	s	namespace:internal
functor_has_linear_access	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Functor> struct functor_has_linear_access { enum { ret = 1 }; };$/;"	s	namespace:internal
functor_has_linear_access	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct functor_has_linear_access<scalar_identity_op<Scalar> > { enum { ret = 0 }; };$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_abs2_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_abs_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_acos_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_add_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_asin_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_cast_op<Scalar,NewType> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_conj_product_op<LhsScalar,RhsScalar> > {$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_conjugate_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_constant_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_cos_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_cube_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_difference_op<Scalar> > {$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_exp_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_hypot_op<Scalar> > {$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_identity_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_imag_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_imag_ref_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_inverse_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_log_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_max_op<Scalar> > {$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_min_op<Scalar> > {$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_multiple2_op<Scalar1,Scalar2> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_multiple_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_opposite_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_pow_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_product_op<LhsScalar,RhsScalar> > {$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_quotient1_impl<Scalar,false> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_quotient1_impl<Scalar,true> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_quotient1_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_quotient_op<Scalar> > {$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_real_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_real_ref_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_sin_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_sqrt_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_square_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_sum_op<Scalar> > {$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<scalar_tan_op<Scalar> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::binary_compose<T0,T1,T2> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::binary_negate<T> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::binder1st<T> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::binder2nd<T> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::divides<T> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::equal_to<T> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::greater<T> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::greater_equal<T> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::less<T> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::less_equal<T> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::logical_and<T> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::logical_not<T> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::logical_or<T> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::minus<T> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::multiplies<T> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::negate<T> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::not_equal_to<T> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::plus<T> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::project1st<T0,T1> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::project2nd<T0,T1> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::select1st<std::pair<T0,T1> > >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::select2nd<std::pair<T0,T1> > >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::unary_compose<T0,T1> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct functor_traits<std::unary_negate<T> >$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template <typename Scalar, bool RandomAccess> struct functor_traits< linspaced_op<Scalar,RandomAccess> >$/;"	s	namespace:internal
impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  const linspaced_op_impl<Scalar,RandomAccess> impl;$/;"	m	struct:internal::linspaced_op
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^namespace internal {$/;"	n
linspaced_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  linspaced_op(Scalar low, Scalar high, int num_steps) : impl(low, (high-low)\/(num_steps-1)) {}$/;"	f	struct:internal::linspaced_op
linspaced_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template <typename Scalar, bool RandomAccess> struct linspaced_op$/;"	s	namespace:internal
linspaced_op_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  linspaced_op_impl(Scalar low, Scalar step) :$/;"	f	struct:internal::linspaced_op_impl
linspaced_op_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct linspaced_op_impl<Scalar,false>$/;"	s	namespace:internal
linspaced_op_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct linspaced_op_impl<Scalar,true>$/;"	s	namespace:internal
m_base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  mutable Packet m_base;$/;"	m	struct:internal::linspaced_op_impl
m_exponent	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  const Scalar m_exponent;$/;"	m	struct:internal::scalar_pow_op
m_interPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  const Packet m_interPacket;$/;"	m	struct:internal::linspaced_op_impl
m_low	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  const Scalar m_low;$/;"	m	struct:internal::linspaced_op_impl
m_lowPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  const Packet m_lowPacket;$/;"	m	struct:internal::linspaced_op_impl
m_other	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  const Scalar m_other;$/;"	m	struct:internal::scalar_add_op
m_other	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  const Scalar m_other;$/;"	m	struct:internal::scalar_constant_op
m_other	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  const Scalar m_other;$/;"	m	struct:internal::scalar_quotient1_impl
m_other	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typename add_const_on_value_type<typename NumTraits<Scalar2>::Nested>::type m_other;$/;"	m	struct:internal::scalar_multiple2_op
m_other	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typename add_const_on_value_type<typename NumTraits<Scalar>::Nested>::type m_other;$/;"	m	struct:internal::scalar_multiple_op
m_other	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typename add_const_on_value_type<typename NumTraits<Scalar>::Nested>::type m_other;$/;"	m	struct:internal::scalar_quotient1_impl
m_packetStep	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  const Packet m_packetStep;$/;"	m	struct:internal::linspaced_op_impl
m_step	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  const Scalar m_step;$/;"	m	struct:internal::linspaced_op_impl
m_stepPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  const Packet m_stepPacket;$/;"	m	struct:internal::linspaced_op_impl
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE Scalar operator() (const Scalar& a) const { return a * m_other; }$/;"	f	struct:internal::scalar_multiple_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE Scalar operator() (const Scalar& a) const { return a * m_other; }$/;"	f	struct:internal::scalar_quotient1_impl
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE Scalar operator() (const Scalar& a) const { return a \/ m_other; }$/;"	f	struct:internal::scalar_quotient1_impl
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const NewType operator() (const Scalar& a) const { return cast<Scalar, NewType>(a); }$/;"	f	struct:internal::scalar_cast_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (Index i) const { return impl(i); }$/;"	f	struct:internal::linspaced_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (Index i) const { return m_low+i*m_step; }$/;"	f	struct:internal::linspaced_op_impl
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (Index row, Index col) const $/;"	f	struct:internal::linspaced_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (Index row, Index col) const { return row==col ? Scalar(1) : Scalar(0); }$/;"	f	struct:internal::scalar_identity_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (Index, Index = 0) const { return m_other; }$/;"	f	struct:internal::scalar_constant_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& _x, const Scalar& _y) const$/;"	f	struct:internal::scalar_hypot_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a) const { return -a; }$/;"	f	struct:internal::scalar_opposite_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a) const { return conj(a); }$/;"	f	struct:internal::scalar_conjugate_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a, const Scalar& b) const { return a + b; }$/;"	f	struct:internal::scalar_sum_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a, const Scalar& b) const { return a - b; }$/;"	f	struct:internal::scalar_difference_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a, const Scalar& b) const { return a \/ b; }$/;"	f	struct:internal::scalar_quotient_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a, const Scalar& b) const { using std::max; return max(a, b); }$/;"	f	struct:internal::scalar_max_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar operator() (const Scalar& a, const Scalar& b) const { using std::min; return min(a, b); }$/;"	f	struct:internal::scalar_min_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }$/;"	f	struct:internal::scalar_product_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const$/;"	f	struct:internal::scalar_conj_product_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const result_type operator() (const Scalar& a) const { return abs(a); }$/;"	f	struct:internal::scalar_abs_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const result_type operator() (const Scalar& a) const { return abs2(a); }$/;"	f	struct:internal::scalar_abs2_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE result_type operator() (const Scalar& a) const { return imag(a); }$/;"	f	struct:internal::scalar_imag_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE result_type operator() (const Scalar& a) const { return real(a); }$/;"	f	struct:internal::scalar_real_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE result_type operator() (const Scalar1& a) const { return a * m_other; }$/;"	f	struct:internal::scalar_multiple2_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE result_type& operator() (const Scalar& a) const { return imag_ref(*const_cast<Scalar*>(&a)); }$/;"	f	struct:internal::scalar_imag_ref_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE result_type& operator() (const Scalar& a) const { return real_ref(*const_cast<Scalar*>(&a)); }$/;"	f	struct:internal::scalar_real_ref_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline Scalar operator() (const Scalar& a) const { return Scalar(1)\/a; }$/;"	f	struct:internal::scalar_inverse_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline Scalar operator() (const Scalar& a) const { return a + m_other; }$/;"	f	struct:internal::scalar_add_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline Scalar operator() (const Scalar& a) const { return a*a*a; }$/;"	f	struct:internal::scalar_cube_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline Scalar operator() (const Scalar& a) const { return a*a; }$/;"	f	struct:internal::scalar_square_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline Scalar operator() (const Scalar& a) const { return cos(a); }$/;"	f	struct:internal::scalar_cos_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline Scalar operator() (const Scalar& a) const { return internal::pow(a, m_exponent); }$/;"	f	struct:internal::scalar_pow_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline const Scalar operator() (const Scalar& a) const { return acos(a); }$/;"	f	struct:internal::scalar_acos_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline const Scalar operator() (const Scalar& a) const { return asin(a); }$/;"	f	struct:internal::scalar_asin_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline const Scalar operator() (const Scalar& a) const { return exp(a); }$/;"	f	struct:internal::scalar_exp_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline const Scalar operator() (const Scalar& a) const { return log(a); }$/;"	f	struct:internal::scalar_log_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline const Scalar operator() (const Scalar& a) const { return sin(a); }$/;"	f	struct:internal::scalar_sin_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline const Scalar operator() (const Scalar& a) const { return sqrt(a); }$/;"	f	struct:internal::scalar_sqrt_op
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline const Scalar operator() (const Scalar& a) const { return tan(a); }$/;"	f	struct:internal::scalar_tan_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(Index i) const { return impl.packetOp(i); }$/;"	f	struct:internal::linspaced_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(Index i) const$/;"	f	struct:internal::linspaced_op_impl
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(Index row, Index col) const$/;"	f	struct:internal::linspaced_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(Index) const { return m_base = padd(m_base,m_packetStep); }$/;"	f	struct:internal::linspaced_op_impl
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(Index, Index = 0) const { return internal::pset1<Packet>(m_other); }$/;"	f	struct:internal::scalar_constant_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a) const { return internal::pconj(a); }$/;"	f	struct:internal::scalar_conjugate_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a) const$/;"	f	struct:internal::scalar_abs2_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a) const$/;"	f	struct:internal::scalar_abs_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a) const$/;"	f	struct:internal::scalar_multiple_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a) const$/;"	f	struct:internal::scalar_opposite_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a) const$/;"	f	struct:internal::scalar_quotient1_impl
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const$/;"	f	struct:internal::scalar_conj_product_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const$/;"	f	struct:internal::scalar_difference_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const$/;"	f	struct:internal::scalar_max_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const$/;"	f	struct:internal::scalar_min_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const$/;"	f	struct:internal::scalar_product_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const$/;"	f	struct:internal::scalar_quotient_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Packet packetOp(const Packet& a, const Packet& b) const$/;"	f	struct:internal::scalar_sum_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline Packet packetOp(const Packet& a) const { return internal::pacos(a); }$/;"	f	struct:internal::scalar_acos_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline Packet packetOp(const Packet& a) const { return internal::pasin(a); }$/;"	f	struct:internal::scalar_asin_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline Packet packetOp(const Packet& a) const { return internal::pcos(a); }$/;"	f	struct:internal::scalar_cos_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline Packet packetOp(const Packet& a) const { return internal::pexp(a); }$/;"	f	struct:internal::scalar_exp_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline Packet packetOp(const Packet& a) const { return internal::plog(a); }$/;"	f	struct:internal::scalar_log_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline Packet packetOp(const Packet& a) const { return internal::psin(a); }$/;"	f	struct:internal::scalar_sin_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline Packet packetOp(const Packet& a) const { return internal::psqrt(a); }$/;"	f	struct:internal::scalar_sqrt_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline Packet packetOp(const Packet& a) const { return internal::ptan(a); }$/;"	f	struct:internal::scalar_tan_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline const Packet packetOp(const Packet& a) const$/;"	f	struct:internal::scalar_add_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline const Packet packetOp(const Packet& a) const$/;"	f	struct:internal::scalar_cube_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline const Packet packetOp(const Packet& a) const$/;"	f	struct:internal::scalar_inverse_op
packetOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline const Packet packetOp(const Packet& a) const$/;"	f	struct:internal::scalar_square_op
packet_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = internal::is_same<LhsScalar, RhsScalar>::value && packet_traits<LhsScalar>::HasMul$/;"	e	enum:internal::functor_traits::<anonymous>
packet_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    Vectorizable = is_same<LhsScalar,RhsScalar>::value && packet_traits<LhsScalar>::HasMul && packet_traits<RhsScalar>::HasMul$/;"	e	enum:internal::scalar_product_op::<anonymous>
predux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar predux(const Packet& a) const$/;"	f	struct:internal::scalar_max_op
predux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar predux(const Packet& a) const$/;"	f	struct:internal::scalar_min_op
predux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const Scalar predux(const Packet& a) const$/;"	f	struct:internal::scalar_sum_op
predux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE const result_type predux(const Packet& a) const$/;"	f	struct:internal::scalar_product_op
result_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef NewType result_type;$/;"	t	struct:internal::scalar_cast_op
result_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename NumTraits<Scalar>::Real result_type;$/;"	t	struct:internal::scalar_abs2_op
result_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename NumTraits<Scalar>::Real result_type;$/;"	t	struct:internal::scalar_abs_op
result_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename NumTraits<Scalar>::Real result_type;$/;"	t	struct:internal::scalar_imag_op
result_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename NumTraits<Scalar>::Real result_type;$/;"	t	struct:internal::scalar_imag_ref_op
result_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename NumTraits<Scalar>::Real result_type;$/;"	t	struct:internal::scalar_real_op
result_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename NumTraits<Scalar>::Real result_type;$/;"	t	struct:internal::scalar_real_ref_op
result_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename scalar_product_traits<LhsScalar,RhsScalar>::ReturnType result_type;$/;"	t	struct:internal::scalar_conj_product_op
result_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename scalar_product_traits<LhsScalar,RhsScalar>::ReturnType result_type;$/;"	t	struct:internal::scalar_product_op
result_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  typedef typename scalar_product_traits<Scalar1,Scalar2>::ReturnType result_type;$/;"	t	struct:internal::scalar_multiple2_op
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Functor> struct functor_allows_mixing_real_and_complex { enum { ret = 0 }; };$/;"	e	enum:internal::functor_allows_mixing_real_and_complex::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Functor> struct functor_has_linear_access { enum { ret = 1 }; };$/;"	e	enum:internal::functor_has_linear_access::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename LhsScalar,typename RhsScalar> struct functor_allows_mixing_real_and_complex<scalar_conj_product_op<LhsScalar,RhsScalar> > { enum { ret = 1 }; };$/;"	e	enum:internal::functor_allows_mixing_real_and_complex::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename LhsScalar,typename RhsScalar> struct functor_allows_mixing_real_and_complex<scalar_product_op<LhsScalar,RhsScalar> > { enum { ret = 1 }; };$/;"	e	enum:internal::functor_allows_mixing_real_and_complex::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct functor_has_linear_access<scalar_identity_op<Scalar> > { enum { ret = 0 }; };$/;"	e	enum:internal::functor_has_linear_access::<anonymous>
scalar_abs2_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_abs2_op {$/;"	s	namespace:internal
scalar_abs_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_abs_op {$/;"	s	namespace:internal
scalar_acos_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_acos_op {$/;"	s	namespace:internal
scalar_add_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline scalar_add_op(const Scalar& other) : m_other(other) { }$/;"	f	struct:internal::scalar_add_op
scalar_add_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline scalar_add_op(const scalar_add_op& other) : m_other(other.m_other) { }$/;"	f	struct:internal::scalar_add_op
scalar_add_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct scalar_add_op {$/;"	s	namespace:internal
scalar_asin_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_asin_op {$/;"	s	namespace:internal
scalar_cast_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct scalar_cast_op {$/;"	s	namespace:internal
scalar_conj_product_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename LhsScalar,typename RhsScalar> struct scalar_conj_product_op {$/;"	s	namespace:internal
scalar_conjugate_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_conjugate_op {$/;"	s	namespace:internal
scalar_constant_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE scalar_constant_op(const Scalar& other) : m_other(other) { }$/;"	f	struct:internal::scalar_constant_op
scalar_constant_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }$/;"	f	struct:internal::scalar_constant_op
scalar_constant_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct scalar_constant_op {$/;"	s	namespace:internal
scalar_cos_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_cos_op {$/;"	s	namespace:internal
scalar_cube_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct scalar_cube_op {$/;"	s	namespace:internal
scalar_difference_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_difference_op {$/;"	s	namespace:internal
scalar_exp_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_exp_op {$/;"	s	namespace:internal
scalar_hypot_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_hypot_op {$/;"	s	namespace:internal
scalar_identity_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_identity_op {$/;"	s	namespace:internal
scalar_imag_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct scalar_imag_op {$/;"	s	namespace:internal
scalar_imag_ref_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct scalar_imag_ref_op {$/;"	s	namespace:internal
scalar_inverse_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct scalar_inverse_op {$/;"	s	namespace:internal
scalar_log_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_log_op {$/;"	s	namespace:internal
scalar_max_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_max_op {$/;"	s	namespace:internal
scalar_min_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_min_op {$/;"	s	namespace:internal
scalar_multiple2_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE scalar_multiple2_op(const Scalar2& other) : m_other(other) { }$/;"	f	struct:internal::scalar_multiple2_op
scalar_multiple2_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE scalar_multiple2_op(const scalar_multiple2_op& other) : m_other(other.m_other) { }$/;"	f	struct:internal::scalar_multiple2_op
scalar_multiple2_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct scalar_multiple2_op {$/;"	s	namespace:internal
scalar_multiple_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE scalar_multiple_op(const Scalar& other) : m_other(other) { }$/;"	f	struct:internal::scalar_multiple_op
scalar_multiple_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE scalar_multiple_op(const scalar_multiple_op& other) : m_other(other.m_other) { }$/;"	f	struct:internal::scalar_multiple_op
scalar_multiple_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct scalar_multiple_op {$/;"	s	namespace:internal
scalar_opposite_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_opposite_op {$/;"	s	namespace:internal
scalar_pow_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline scalar_pow_op(const Scalar& exponent) : m_exponent(exponent) {}$/;"	f	struct:internal::scalar_pow_op
scalar_pow_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  inline scalar_pow_op(const scalar_pow_op& other) : m_exponent(other.m_exponent) { }$/;"	f	struct:internal::scalar_pow_op
scalar_pow_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct scalar_pow_op {$/;"	s	namespace:internal
scalar_product_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename LhsScalar,typename RhsScalar> struct scalar_product_op {$/;"	s	namespace:internal
scalar_quotient1_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE scalar_quotient1_impl(const Scalar& other) : m_other(other) {}$/;"	f	struct:internal::scalar_quotient1_impl
scalar_quotient1_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE scalar_quotient1_impl(const Scalar& other) : m_other(static_cast<Scalar>(1) \/ other) {}$/;"	f	struct:internal::scalar_quotient1_impl
scalar_quotient1_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE scalar_quotient1_impl(const scalar_quotient1_impl& other) : m_other(other.m_other) { }$/;"	f	struct:internal::scalar_quotient1_impl
scalar_quotient1_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct scalar_quotient1_impl {$/;"	s	namespace:internal
scalar_quotient1_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct scalar_quotient1_impl<Scalar,true> {$/;"	s	namespace:internal
scalar_quotient1_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^  EIGEN_STRONG_INLINE scalar_quotient1_op(const Scalar& other)$/;"	f	struct:internal::scalar_quotient1_op
scalar_quotient1_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct scalar_quotient1_op : scalar_quotient1_impl<Scalar, NumTraits<Scalar>::IsInteger > {$/;"	s	namespace:internal
scalar_quotient_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_quotient_op {$/;"	s	namespace:internal
scalar_real_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct scalar_real_op {$/;"	s	namespace:internal
scalar_real_ref_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct scalar_real_ref_op {$/;"	s	namespace:internal
scalar_sin_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_sin_op {$/;"	s	namespace:internal
scalar_sqrt_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_sqrt_op {$/;"	s	namespace:internal
scalar_square_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^struct scalar_square_op {$/;"	s	namespace:internal
scalar_sum_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_sum_op {$/;"	s	namespace:internal
scalar_tan_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^template<typename Scalar> struct scalar_tan_op {$/;"	s	namespace:internal
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    PacketAccess = internal::is_same<LhsScalar, RhsScalar>::value && packet_traits<LhsScalar>::HasMul$/;"	e	class:internal::functor_traits::<anonymous>::RhsScalar
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^    Vectorizable = is_same<LhsScalar,RhsScalar>::value && packet_traits<LhsScalar>::HasMul && packet_traits<RhsScalar>::HasMul$/;"	e	class:internal::scalar_product_op::<anonymous>::RhsScalar
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Functors.h	/^{ enum { Cost = is_same<Scalar, NewType>::value ? 0 : NumTraits<NewType>::AddCost, PacketAccess = false }; };$/;"	e	class:internal::functor_traits::<anonymous>::NewType
EIGEN_FUZZY_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Fuzzy.h	27;"	d
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Fuzzy.h	/^namespace internal$/;"	n
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Fuzzy.h	/^bool DenseBase<Derived>::isApprox($/;"	f	class:DenseBase
isApprox_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Fuzzy.h	/^struct isApprox_selector$/;"	s	namespace:internal
isApprox_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Fuzzy.h	/^struct isApprox_selector<Derived, OtherDerived, true>$/;"	s	namespace:internal
isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Fuzzy.h	/^bool DenseBase<Derived>::isMuchSmallerThan($/;"	f	class:DenseBase
isMuchSmallerThan_object_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Fuzzy.h	/^struct isMuchSmallerThan_object_selector$/;"	s	namespace:internal
isMuchSmallerThan_object_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Fuzzy.h	/^struct isMuchSmallerThan_object_selector<Derived, OtherDerived, true>$/;"	s	namespace:internal
isMuchSmallerThan_scalar_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Fuzzy.h	/^struct isMuchSmallerThan_scalar_selector$/;"	s	namespace:internal
isMuchSmallerThan_scalar_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Fuzzy.h	/^struct isMuchSmallerThan_scalar_selector<Derived, true>$/;"	s	namespace:internal
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Fuzzy.h	/^  static bool run(const Derived& x, const OtherDerived& y, typename Derived::RealScalar prec)$/;"	f	struct:internal::isApprox_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Fuzzy.h	/^  static bool run(const Derived& x, const OtherDerived& y, typename Derived::RealScalar prec)$/;"	f	struct:internal::isMuchSmallerThan_object_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Fuzzy.h	/^  static bool run(const Derived& x, const OtherDerived& y, typename Derived::RealScalar)$/;"	f	struct:internal::isApprox_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Fuzzy.h	/^  static bool run(const Derived& x, const OtherDerived&, typename Derived::RealScalar)$/;"	f	struct:internal::isMuchSmallerThan_object_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Fuzzy.h	/^  static bool run(const Derived& x, const typename Derived::RealScalar& y, typename Derived::RealScalar prec)$/;"	f	struct:internal::isMuchSmallerThan_scalar_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Fuzzy.h	/^  static bool run(const Derived& x, const typename Derived::RealScalar&, typename Derived::RealScalar)$/;"	f	struct:internal::isMuchSmallerThan_scalar_selector
AlignedOnScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    AlignedOnScalar = 0$/;"	e	enum:internal::packet_traits::<anonymous>
EIGEN_DEBUG_ALIGNED_LOAD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	40;"	d
EIGEN_DEBUG_ALIGNED_STORE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	48;"	d
EIGEN_DEBUG_UNALIGNED_LOAD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	44;"	d
EIGEN_DEBUG_UNALIGNED_STORE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	52;"	d
EIGEN_GENERIC_PACKET_MATH_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	27;"	d
HasACos	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasACos   = 0,$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasASin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasASin   = 0,$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasATan	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasATan   = 0$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasAbs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasAbs    = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasAbs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasAbs    = 1,$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasAbs2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasAbs2   = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasAbs2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasAbs2   = 1,$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasAdd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasAdd    = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasAdd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasAdd    = 1,$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasConj	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasConj   = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasConj	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasConj   = 1,$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasCos	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasCos    = 0,$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasDiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasDiv    = 0,$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasExp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasExp    = 0,$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasLog	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasLog    = 0,$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasMax	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasMax    = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasMax	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasMax    = 1,$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasMin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasMin    = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasMin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasMin    = 1,$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasMul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasMul    = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasMul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasMul    = 1,$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasNegate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasNegate = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasNegate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasNegate = 1,$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasPow	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasPow    = 0,$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasSetLinear	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasSetLinear = 0$/;"	e	enum:internal::packet_traits::<anonymous>
HasSetLinear	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasSetLinear = 1,$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasSin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasSin    = 0,$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasSqrt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasSqrt   = 0,$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasSub	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasSub    = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasSub	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasSub    = 1,$/;"	e	enum:internal::default_packet_traits::<anonymous>
HasTan	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    HasTan    = 0,$/;"	e	enum:internal::default_packet_traits::<anonymous>
Vectorizable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    Vectorizable = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
default_packet_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^struct default_packet_traits$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^namespace internal {$/;"	n
pabs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^pabs(const Packet& a) { return abs(a); }$/;"	f	namespace:internal
packet_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^template<typename T> struct packet_traits : default_packet_traits$/;"	s	namespace:internal
pacos	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^Packet pacos(const Packet& a) { return acos(a); }$/;"	f	namespace:internal
padd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^padd(const Packet& a,$/;"	f	namespace:internal
palign	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^inline void palign(PacketType& first, const PacketType& second)$/;"	f	namespace:internal
palign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^struct palign_impl$/;"	s	namespace:internal
pand	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^pand(const Packet& a, const Packet& b) { return a & b; }$/;"	f	namespace:internal
pandnot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^pandnot(const Packet& a, const Packet& b) { return a & (!b); }$/;"	f	namespace:internal
pasin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^Packet pasin(const Packet& a) { return asin(a); }$/;"	f	namespace:internal
pconj	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^pconj(const Packet& a) { return conj(a); }$/;"	f	namespace:internal
pcos	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^Packet pcos(const Packet& a) { return cos(a); }$/;"	f	namespace:internal
pcplxflip	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^template<typename Packet> inline Packet pcplxflip(const Packet& a)$/;"	f	namespace:internal
pdiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^pdiv(const Packet& a,$/;"	f	namespace:internal
pexp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^Packet pexp(const Packet& a) { return exp(a); }$/;"	f	namespace:internal
pfirst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^template<typename Packet> inline typename unpacket_traits<Packet>::type pfirst(const Packet& a)$/;"	f	namespace:internal
pload	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^pload(const typename unpacket_traits<Packet>::type* from) { return *from; }$/;"	f	namespace:internal
ploaddup	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^ploaddup(const typename unpacket_traits<Packet>::type* from) { return *from; }$/;"	f	namespace:internal
ploadt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^inline Packet ploadt(const typename unpacket_traits<Packet>::type* from)$/;"	f	namespace:internal
ploadu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^ploadu(const typename unpacket_traits<Packet>::type* from) { return *from; }$/;"	f	namespace:internal
plog	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^Packet plog(const Packet& a) { return log(a); }$/;"	f	namespace:internal
plset	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^plset(const Scalar& a) { return a; }$/;"	f	namespace:internal
pmadd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^pmadd(const Packet&  a,$/;"	f	namespace:internal
pmax	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^pmax(const Packet& a,$/;"	f	namespace:internal
pmin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^pmin(const Packet& a,$/;"	f	namespace:internal
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^pmul(const Packet& a,$/;"	f	namespace:internal
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^template<> inline std::complex<double> pmul(const std::complex<double>& a, const std::complex<double>& b)$/;"	f	namespace:internal
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^template<> inline std::complex<float> pmul(const std::complex<float>& a, const std::complex<float>& b)$/;"	f	namespace:internal
pnegate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^pnegate(const Packet& a) { return -a; }$/;"	f	namespace:internal
por	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^por(const Packet& a, const Packet& b) { return a | b; }$/;"	f	namespace:internal
predux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^template<typename Packet> inline typename unpacket_traits<Packet>::type predux(const Packet& a)$/;"	f	namespace:internal
predux_max	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^template<typename Packet> inline typename unpacket_traits<Packet>::type predux_max(const Packet& a)$/;"	f	namespace:internal
predux_min	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^template<typename Packet> inline typename unpacket_traits<Packet>::type predux_min(const Packet& a)$/;"	f	namespace:internal
predux_mul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^template<typename Packet> inline typename unpacket_traits<Packet>::type predux_mul(const Packet& a)$/;"	f	namespace:internal
preduxp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^preduxp(const Packet* vecs) { return vecs[0]; }$/;"	f	namespace:internal
prefetch	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^template<typename Scalar> inline void prefetch(const Scalar* addr)$/;"	f	namespace:internal
preverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^template<typename Packet> inline Packet preverse(const Packet& a)$/;"	f	namespace:internal
pset1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^pset1(const typename unpacket_traits<Packet>::type& a) { return a; }$/;"	f	namespace:internal
psin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^Packet psin(const Packet& a) { return sin(a); }$/;"	f	namespace:internal
psqrt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^Packet psqrt(const Packet& a) { return sqrt(a); }$/;"	f	namespace:internal
pstore	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^template<typename Scalar, typename Packet> inline void pstore(Scalar* to, const Packet& from)$/;"	f	namespace:internal
pstore1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^inline void pstore1(typename unpacket_traits<Packet>::type* to, const typename unpacket_traits<Packet>::type& a)$/;"	f	namespace:internal
pstoret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^inline void pstoret(Scalar* to, const Packet& from)$/;"	f	namespace:internal
pstoreu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^template<typename Scalar, typename Packet> inline void pstoreu(Scalar* to, const Packet& from)$/;"	f	namespace:internal
psub	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^psub(const Packet& a,$/;"	f	namespace:internal
ptan	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^Packet ptan(const Packet& a) { return tan(a); }$/;"	f	namespace:internal
pxor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^pxor(const Packet& a, const Packet& b) { return a ^ b; }$/;"	f	namespace:internal
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^  inline static void run(PacketType&, const PacketType&) {}$/;"	f	struct:internal::palign_impl
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^    size = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GenericPacketMath.h	/^  typedef T type;$/;"	t	struct:internal::packet_traits
EIGEN_ARRAY_DECLARE_GLOBAL_EIGEN_UNARY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GlobalFunctions.h	36;"	d
EIGEN_ARRAY_DECLARE_GLOBAL_STD_UNARY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GlobalFunctions.h	29;"	d
EIGEN_GLOBAL_FUNCTIONS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GlobalFunctions.h	27;"	d
Eigen	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GlobalFunctions.h	/^namespace Eigen$/;"	n
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GlobalFunctions.h	/^  namespace internal$/;"	n	namespace:Eigen
pow	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GlobalFunctions.h	/^  pow(const Eigen::ArrayBase<Derived>& x, const typename Derived::Scalar& exponent) { \\$/;"	f	namespace:std
std	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/GlobalFunctions.h	/^namespace std$/;"	n
DontAlignCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^enum { DontAlignCols = 1 };$/;"	e
EIGEN_IO_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	27;"	d
FullPrecision	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^       FullPrecision = -2 };$/;"	e
IOFormat	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^  IOFormat(int _precision = StreamPrecision, int _flags = 0,$/;"	f	struct:IOFormat
IOFormat	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^struct IOFormat$/;"	s
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:internal::significant_decimals_default_impl
StreamPrecision	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^enum { StreamPrecision = -1,$/;"	e
WithFormat	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^    WithFormat(const ExpressionType& matrix, const IOFormat& format)$/;"	f	class:WithFormat
WithFormat	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^class WithFormat$/;"	c
coeffSeparator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^  std::string coeffSeparator;$/;"	m	struct:IOFormat
flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^  int flags;$/;"	m	struct:IOFormat
format	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^DenseBase<Derived>::format(const IOFormat& fmt) const$/;"	f	class:DenseBase
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^namespace internal {$/;"	n
m_format	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^    IOFormat m_format;$/;"	m	class:WithFormat
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^    const typename ExpressionType::Nested m_matrix;$/;"	m	class:WithFormat
matPrefix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^  std::string matPrefix, matSuffix;$/;"	m	struct:IOFormat
matSuffix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^  std::string matPrefix, matSuffix;$/;"	m	struct:IOFormat
operator <<	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^    friend std::ostream & operator << (std::ostream & s, const WithFormat& wf)$/;"	f	class:WithFormat
operator <<	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^std::ostream & operator <<$/;"	f
precision	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^  int precision;$/;"	m	struct:IOFormat
print_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^std::ostream & print_matrix(std::ostream & s, const Derived& _m, const IOFormat& fmt)$/;"	f	namespace:internal
rowPrefix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^  std::string rowPrefix, rowSuffix, rowSeparator, rowSpacer;$/;"	m	struct:IOFormat
rowSeparator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^  std::string rowPrefix, rowSuffix, rowSeparator, rowSpacer;$/;"	m	struct:IOFormat
rowSpacer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^  std::string rowPrefix, rowSuffix, rowSeparator, rowSpacer;$/;"	m	struct:IOFormat
rowSuffix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^  std::string rowPrefix, rowSuffix, rowSeparator, rowSpacer;$/;"	m	struct:IOFormat
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^  static inline int run()$/;"	f	struct:internal::significant_decimals_default_impl
significant_decimals_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^struct significant_decimals_default_impl$/;"	s	namespace:internal
significant_decimals_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^struct significant_decimals_default_impl<Scalar, true>$/;"	s	namespace:internal
significant_decimals_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/IO.h	/^struct significant_decimals_impl$/;"	s	namespace:internal
Array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^  ::Array(const Scalar *data)$/;"	f	class:Array
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    typedef MapBase<Map> Base;$/;"	t	class:Map
EIGEN_MAP_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	27;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    Flags = KeepsPacketAccess ? int(Flags3) : (int(Flags3) & ~PacketAccessBit)$/;"	e	enum:internal::traits::<anonymous>
Flags0	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    Flags0 = TraitsBase::Flags,$/;"	e	enum:internal::traits::<anonymous>
Flags1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    Flags1 = IsAligned ? (int(Flags0) | AlignedBit) : (int(Flags0) & ~AlignedBit),$/;"	e	enum:internal::traits::<anonymous>
Flags2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    Flags2 = (bool(HasNoStride) || bool(PlainObjectType::IsVectorAtCompileTime))$/;"	e	enum:internal::traits::<anonymous>
Flags3	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    Flags3 = is_lvalue<PlainObjectType>::value ? int(Flags2) : (int(Flags2) & ~LvalueBit),$/;"	e	enum:internal::traits::<anonymous>
HasNoInnerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    HasNoInnerStride = InnerStrideAtCompileTime == 1,$/;"	e	enum:internal::traits::<anonymous>
HasNoOuterStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    HasNoOuterStride = StrideType::OuterStrideAtCompileTime == 0,$/;"	e	enum:internal::traits::<anonymous>
HasNoStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    HasNoStride = HasNoInnerStride && HasNoOuterStride,$/;"	e	enum:internal::traits::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^  typedef typename PlainObjectType::Index Index;$/;"	t	struct:internal::traits
InnerStrideAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    InnerStrideAtCompileTime = StrideType::InnerStrideAtCompileTime == 0$/;"	e	enum:internal::traits::<anonymous>
IsAligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    IsAligned = bool(EIGEN_ALIGN) && ((int(MapOptions)&Aligned)==Aligned),$/;"	e	enum:internal::traits::<anonymous>
IsDynamicSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    IsDynamicSize = PlainObjectType::SizeAtCompileTime==Dynamic,$/;"	e	enum:internal::traits::<anonymous>
KeepsPacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    KeepsPacketAccess = bool(HasNoInnerStride)$/;"	e	enum:internal::traits::<anonymous>
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    inline Map(PointerArgType data, Index rows, Index cols, const StrideType& stride = StrideType())$/;"	f	class:Map
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    inline Map(PointerArgType data, Index size, const StrideType& stride = StrideType())$/;"	f	class:Map
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    inline Map(PointerArgType data, const StrideType& stride = StrideType())$/;"	f	class:Map
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^template<typename PlainObjectType, int MapOptions, typename StrideType> class Map$/;"	c
Matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^  ::Matrix(const Scalar *data)$/;"	f	class:Matrix
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^  enum { Options }; \/\/ Expressions don't have Options$/;"	e	enum:internal::traits::<anonymous>
OuterStrideAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    OuterStrideAtCompileTime = StrideType::OuterStrideAtCompileTime == 0$/;"	e	enum:internal::traits::<anonymous>
PointerArgType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    typedef PointerType PointerArgType;$/;"	t	class:Map
PointerArgType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    typedef const Scalar* PointerArgType;$/;"	t	class:Map
PointerType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    typedef typename Base::PointerType PointerType;$/;"	t	class:Map
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^  typedef typename PlainObjectType::Scalar Scalar;$/;"	t	struct:internal::traits
TraitsBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^  typedef traits<PlainObjectType> TraitsBase;$/;"	t	struct:internal::traits
cast_to_pointer_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    inline PointerType cast_to_pointer_type(PointerArgType ptr) { return const_cast<PointerType>(ptr); }$/;"	f	class:Map
cast_to_pointer_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    inline PointerType cast_to_pointer_type(PointerArgType ptr) { return ptr; }$/;"	f	class:Map
innerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    inline Index innerStride() const$/;"	f	class:Map
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^namespace internal {$/;"	n
m_stride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    StrideType m_stride;$/;"	m	class:Map
outerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^    inline Index outerStride() const$/;"	f	class:Map
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Map.h	/^struct traits<Map<PlainObjectType, MapOptions, StrideType> >$/;"	s	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    typedef MapBase<Derived, ReadOnlyAccessors> Base;$/;"	t	class:MapBase
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    typedef typename internal::dense_xpr_base<Derived>::type Base;$/;"	t	class:MapBase
CoeffReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    typedef typename Base::CoeffReturnType CoeffReturnType;$/;"	t	class:MapBase
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^      ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,$/;"	e	enum:MapBase::<anonymous>
EIGEN_MAPBASE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	27;"	d
EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	29;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    typedef typename Base::Index Index;$/;"	t	class:MapBase
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    typedef typename internal::traits<Derived>::Index Index;$/;"	t	class:MapBase
MapBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    explicit inline MapBase(PointerType data) : Base(data) {}$/;"	f	class:MapBase
MapBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline MapBase(PointerType data) : m_data(data), m_rows(RowsAtCompileTime), m_cols(ColsAtCompileTime)$/;"	f	class:MapBase
MapBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline MapBase(PointerType data, Index rows, Index cols) : Base(data, rows, cols) {}$/;"	f	class:MapBase
MapBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline MapBase(PointerType data, Index rows, Index cols)$/;"	f	class:MapBase
MapBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline MapBase(PointerType data, Index size) : Base(data, size) {}$/;"	f	class:MapBase
MapBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline MapBase(PointerType data, Index size)$/;"	f	class:MapBase
MapBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^template<typename Derived> class MapBase<Derived, ReadOnlyAccessors>$/;"	c
MapBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^template<typename Derived> class MapBase<Derived, WriteAccessors>$/;"	c
PacketScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    typedef typename Base::PacketScalar PacketScalar;$/;"	t	class:MapBase
PacketScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    typedef typename internal::packet_traits<Scalar>::type PacketScalar;$/;"	t	class:MapBase
PointerType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^                     PointerType;$/;"	t	class:MapBase
PointerType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    typedef typename Base::PointerType PointerType;$/;"	t	class:MapBase
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:MapBase
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^      RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,$/;"	e	enum:MapBase::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    typedef typename Base::Scalar Scalar;$/;"	t	class:MapBase
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:MapBase
ScalarWithConstIfNotLvalue	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^                  >::type ScalarWithConstIfNotLvalue;$/;"	t	class:MapBase
SizeAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^      SizeAtCompileTime = Base::SizeAtCompileTime$/;"	e	enum:MapBase::<anonymous>
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	class:MapBase
checkSanity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    void checkSanity() const$/;"	f	class:MapBase
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline const Scalar& coeff(Index index) const$/;"	f	class:MapBase
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline const Scalar& coeff(Index row, Index col) const$/;"	f	class:MapBase
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline ScalarWithConstIfNotLvalue& coeffRef(Index index)$/;"	f	class:MapBase
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline ScalarWithConstIfNotLvalue& coeffRef(Index row, Index col)$/;"	f	class:MapBase
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline const Scalar& coeffRef(Index index) const$/;"	f	class:MapBase
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline const Scalar& coeffRef(Index row, Index col) const$/;"	f	class:MapBase
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline Index cols() const { return m_cols.value(); }$/;"	f	class:MapBase
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline ScalarWithConstIfNotLvalue* data() { return this->m_data; } \/\/ no const-cast here so non-const-correct code will give a compile error$/;"	f	class:MapBase
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline const Scalar* data() const { return m_data; }$/;"	f	class:MapBase
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline const Scalar* data() const { return this->m_data; }$/;"	f	class:MapBase
m_cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    const internal::variable_if_dynamic<Index, ColsAtCompileTime> m_cols;$/;"	m	class:MapBase
m_data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    PointerType m_data;$/;"	m	class:MapBase
m_rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    const internal::variable_if_dynamic<Index, RowsAtCompileTime> m_rows;$/;"	m	class:MapBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    Derived& operator=(const MapBase& other)$/;"	f	class:MapBase
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline PacketScalar packet(Index index) const$/;"	f	class:MapBase
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline PacketScalar packet(Index row, Index col) const$/;"	f	class:MapBase
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline Index rows() const { return m_rows.value(); }$/;"	f	class:MapBase
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline void writePacket(Index index, const PacketScalar& x)$/;"	f	class:MapBase
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MapBase.h	/^    inline void writePacket(Index row, Index col, const PacketScalar& x)$/;"	f	class:MapBase
EIGEN_MATHFUNCTIONS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	26;"	d
EIGEN_MATHFUNC_IMPL	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	67;"	d
EIGEN_MATHFUNC_RETVAL	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	68;"	d
EIGEN_MATHFUNC_STANDARD_REAL_UNARY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	469;"	d
NonInteger	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::NonInteger NonInteger;$/;"	t	struct:internal::random_default_impl
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef bool RealScalar;$/;"	t	struct:internal::scalar_fuzzy_impl
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:internal::abs2_impl
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:internal::abs_impl
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:internal::hypot_impl
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:internal::imag_impl
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:internal::imag_ref_default_impl
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:internal::norm1_default_impl
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:internal::real_impl
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:internal::real_ref_impl
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:internal::scalar_fuzzy_default_impl
abs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(abs, Scalar) abs(const Scalar& x)$/;"	f	namespace:internal
abs2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(abs2, Scalar) abs2(const Scalar& x)$/;"	f	namespace:internal
abs2_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct abs2_impl$/;"	s	namespace:internal
abs2_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct abs2_impl<std::complex<RealScalar> >$/;"	s	namespace:internal
abs2_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct abs2_retval$/;"	s	namespace:internal
abs_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct abs_impl$/;"	s	namespace:internal
abs_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct abs_retval$/;"	s	namespace:internal
always_void	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^template<typename T> struct always_void { typedef void type; };$/;"	s	namespace:internal
atan2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(atan2, Scalar) atan2(const Scalar& x, const Scalar& y)$/;"	f	namespace:internal
atan2_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct atan2_default_impl$/;"	s	namespace:internal
atan2_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct atan2_default_impl<Scalar, true>$/;"	s	namespace:internal
atan2_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct atan2_impl : atan2_default_impl<Scalar, NumTraits<Scalar>::IsInteger> {};$/;"	s	namespace:internal
atan2_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct atan2_retval$/;"	s	namespace:internal
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline NewType cast(const OldType& x)$/;"	f	namespace:internal
cast_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct cast_impl$/;"	s	namespace:internal
conj	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(conj, Scalar) conj(const Scalar& x)$/;"	f	namespace:internal
conj_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct conj_impl$/;"	s	namespace:internal
conj_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct conj_impl<std::complex<RealScalar> >$/;"	s	namespace:internal
conj_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct conj_retval$/;"	s	namespace:internal
floor_log2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct floor_log2 {};$/;"	s	namespace:internal
floor_log2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct floor_log2<n, lower, upper, floor_log2_bogus>$/;"	s	namespace:internal
floor_log2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct floor_log2<n, lower, upper, floor_log2_move_down>$/;"	s	namespace:internal
floor_log2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct floor_log2<n, lower, upper, floor_log2_move_up>$/;"	s	namespace:internal
floor_log2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct floor_log2<n, lower, upper, floor_log2_terminate>$/;"	s	namespace:internal
floor_log2_bogus	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  floor_log2_bogus$/;"	e	enum:internal::<anonymous>
floor_log2_move_down	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  floor_log2_move_down,$/;"	e	enum:internal::<anonymous>
floor_log2_move_up	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  floor_log2_move_up,$/;"	e	enum:internal::<anonymous>
floor_log2_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  enum { value = floor_log2<n, floor_log2_selector<n, lower, upper>::middle, upper>::value };$/;"	e	enum:internal::floor_log2::<anonymous>
floor_log2_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  enum { value = floor_log2<n, lower, floor_log2_selector<n, lower, upper>::middle>::value };$/;"	e	enum:internal::floor_log2::<anonymous>
floor_log2_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^template<unsigned int n, int lower, int upper> struct floor_log2_selector$/;"	s	namespace:internal
floor_log2_terminate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  floor_log2_terminate,$/;"	e	enum:internal::<anonymous>
global_math_functions_filtering_base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct global_math_functions_filtering_base$/;"	s	namespace:internal
hypot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(hypot, Scalar) hypot(const Scalar& x, const Scalar& y)$/;"	f	namespace:internal
hypot_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct hypot_impl$/;"	s	namespace:internal
hypot_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct hypot_retval$/;"	s	namespace:internal
imag	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(imag, Scalar) imag(const Scalar& x)$/;"	f	namespace:internal
imag_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct imag_impl$/;"	s	namespace:internal
imag_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct imag_impl<std::complex<RealScalar> >$/;"	s	namespace:internal
imag_ref	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(imag_ref, Scalar) imag_ref(Scalar& x)$/;"	f	namespace:internal
imag_ref	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline typename add_const_on_value_type< EIGEN_MATHFUNC_RETVAL(imag_ref, Scalar) >::type imag_ref(const Scalar& x)$/;"	f	namespace:internal
imag_ref_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct imag_ref_default_impl$/;"	s	namespace:internal
imag_ref_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct imag_ref_default_impl<Scalar, false>$/;"	s	namespace:internal
imag_ref_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct imag_ref_impl : imag_ref_default_impl<Scalar, NumTraits<Scalar>::IsComplex> {};$/;"	s	namespace:internal
imag_ref_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct imag_ref_retval$/;"	s	namespace:internal
imag_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct imag_retval$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^namespace internal {$/;"	n
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline bool isApprox(bool x, bool y, bool)$/;"	f	struct:internal::scalar_fuzzy_impl
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline bool isApprox(const Scalar& x, const Scalar& y, const RealScalar& prec)$/;"	f	struct:internal::scalar_fuzzy_default_impl
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline bool isApprox(const Scalar& x, const Scalar& y, const RealScalar&)$/;"	f	struct:internal::scalar_fuzzy_default_impl
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline bool isApprox(const Scalar& x, const Scalar& y,$/;"	f	namespace:internal
isApproxOrLessThan	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline bool isApproxOrLessThan(const Scalar& x, const Scalar& y, const RealScalar& prec)$/;"	f	struct:internal::scalar_fuzzy_default_impl
isApproxOrLessThan	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline bool isApproxOrLessThan(const Scalar& x, const Scalar& y, const RealScalar&)$/;"	f	struct:internal::scalar_fuzzy_default_impl
isApproxOrLessThan	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline bool isApproxOrLessThan(const bool& x, const bool& y, const bool&)$/;"	f	struct:internal::scalar_fuzzy_impl
isApproxOrLessThan	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline bool isApproxOrLessThan(const Scalar& x, const Scalar& y,$/;"	f	namespace:internal
isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline bool isMuchSmallerThan(const Scalar& x, const OtherScalar& y, const RealScalar& prec)$/;"	f	struct:internal::scalar_fuzzy_default_impl
isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline bool isMuchSmallerThan(const Scalar& x, const Scalar&, const RealScalar&)$/;"	f	struct:internal::scalar_fuzzy_default_impl
isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline bool isMuchSmallerThan(const bool& x, const bool&, const bool&)$/;"	f	struct:internal::scalar_fuzzy_impl
isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline bool isMuchSmallerThan(const Scalar& x, const OtherScalar& y,$/;"	f	namespace:internal
lower	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  enum { value = floor_log2<n, lower, floor_log2_selector<n, lower, upper>::middle>::value };$/;"	e	enum:internal::floor_log2::<anonymous>
middle	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  enum { middle = (lower + upper) \/ 2,$/;"	e	enum:internal::floor_log2_selector::<anonymous>
middle	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  enum { value = floor_log2<n, floor_log2_selector<n, lower, upper>::middle, upper>::value };$/;"	e	class:internal::floor_log2::<anonymous>::floor_log2_selector
middle	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  enum { value = floor_log2<n, lower, floor_log2_selector<n, lower, upper>::middle>::value };$/;"	e	class:internal::floor_log2::<anonymous>::floor_log2_selector
norm1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(norm1, Scalar) norm1(const Scalar& x)$/;"	f	namespace:internal
norm1_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct norm1_default_impl$/;"	s	namespace:internal
norm1_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct norm1_default_impl<Scalar, false>$/;"	s	namespace:internal
norm1_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct norm1_impl : norm1_default_impl<Scalar, NumTraits<Scalar>::IsComplex> {};$/;"	s	namespace:internal
norm1_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct norm1_retval$/;"	s	namespace:internal
pow	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(pow, Scalar) pow(const Scalar& x, const Scalar& y)$/;"	f	namespace:internal
pow_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct pow_default_impl$/;"	s	namespace:internal
pow_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct pow_default_impl<Scalar, true>$/;"	s	namespace:internal
pow_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct pow_impl : pow_default_impl<Scalar, NumTraits<Scalar>::IsInteger> {};$/;"	s	namespace:internal
pow_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct pow_retval$/;"	s	namespace:internal
random	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(random, Scalar) random()$/;"	f	namespace:internal
random	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(random, Scalar) random(const Scalar& x, const Scalar& y)$/;"	f	namespace:internal
random_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct random_default_impl {};$/;"	s	namespace:internal
random_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct random_default_impl<Scalar, false, false>$/;"	s	namespace:internal
random_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct random_default_impl<Scalar, false, true>$/;"	s	namespace:internal
random_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct random_default_impl<Scalar, true, false>$/;"	s	namespace:internal
random_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct random_impl : random_default_impl<Scalar, NumTraits<Scalar>::IsComplex, NumTraits<Scalar>::IsInteger> {};$/;"	s	namespace:internal
random_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^template<> struct random_impl<bool>$/;"	s	namespace:internal
random_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct random_retval$/;"	s	namespace:internal
real	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(real, Scalar) real(const Scalar& x)$/;"	f	namespace:internal
real_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct real_impl$/;"	s	namespace:internal
real_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct real_impl<std::complex<RealScalar> >$/;"	s	namespace:internal
real_ref	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(real_ref, Scalar) real_ref(Scalar& x)$/;"	f	namespace:internal
real_ref	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline typename add_const_on_value_type< EIGEN_MATHFUNC_RETVAL(real_ref, Scalar) >::type real_ref(const Scalar& x)$/;"	f	namespace:internal
real_ref_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct real_ref_impl$/;"	s	namespace:internal
real_ref_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct real_ref_retval$/;"	s	namespace:internal
real_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct real_retval$/;"	s	namespace:internal
retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef Scalar retval;$/;"	t	struct:internal::atan2_default_impl
retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef Scalar retval;$/;"	t	struct:internal::pow_default_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline NewType run(const OldType& x)$/;"	f	struct:internal::cast_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar run(const Scalar& x)$/;"	f	struct:internal::abs2_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar run(const Scalar& x)$/;"	f	struct:internal::abs_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar run(const Scalar& x)$/;"	f	struct:internal::norm1_default_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar run(const Scalar& x)$/;"	f	struct:internal::real_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar run(const Scalar& x, const Scalar& y)$/;"	f	struct:internal::hypot_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar run(const Scalar&)$/;"	f	struct:internal::imag_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar run(const std::complex<RealScalar>& x)$/;"	f	struct:internal::abs2_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar run(const std::complex<RealScalar>& x)$/;"	f	struct:internal::imag_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar run(const std::complex<RealScalar>& x)$/;"	f	struct:internal::real_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar& run(Scalar& x)$/;"	f	struct:internal::imag_ref_default_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline RealScalar& run(Scalar& x)$/;"	f	struct:internal::real_ref_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run()$/;"	f	struct:internal::random_default_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run(Scalar x, Scalar y)$/;"	f	struct:internal::pow_default_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run(Scalar&)$/;"	f	struct:internal::imag_ref_default_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run(const Scalar& x)$/;"	f	struct:internal::conj_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run(const Scalar& x)$/;"	f	struct:internal::norm1_default_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run(const Scalar& x)$/;"	f	struct:internal::sqrt_default_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run(const Scalar& x, const Scalar& y)$/;"	f	struct:internal::atan2_default_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run(const Scalar& x, const Scalar& y)$/;"	f	struct:internal::pow_default_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run(const Scalar& x, const Scalar& y)$/;"	f	struct:internal::random_default_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run(const Scalar&)$/;"	f	struct:internal::sqrt_default_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline Scalar run(const Scalar&, const Scalar&)$/;"	f	struct:internal::atan2_default_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline bool run()$/;"	f	struct:internal::random_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline const RealScalar& run(const Scalar& x)$/;"	f	struct:internal::imag_ref_default_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline const RealScalar& run(const Scalar& x)$/;"	f	struct:internal::real_ref_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline const Scalar run(const Scalar&)$/;"	f	struct:internal::imag_ref_default_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  static inline std::complex<RealScalar> run(const std::complex<RealScalar>& x)$/;"	f	struct:internal::conj_impl
scalar_fuzzy_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct scalar_fuzzy_default_impl {};$/;"	s	namespace:internal
scalar_fuzzy_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct scalar_fuzzy_default_impl<Scalar, false, false>$/;"	s	namespace:internal
scalar_fuzzy_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct scalar_fuzzy_default_impl<Scalar, false, true>$/;"	s	namespace:internal
scalar_fuzzy_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct scalar_fuzzy_default_impl<Scalar, true, false>$/;"	s	namespace:internal
scalar_fuzzy_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct scalar_fuzzy_impl : scalar_fuzzy_default_impl<Scalar, NumTraits<Scalar>::IsComplex, NumTraits<Scalar>::IsInteger> {};$/;"	s	namespace:internal
scalar_fuzzy_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^template<> struct scalar_fuzzy_impl<bool>$/;"	s	namespace:internal
sqrt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^inline EIGEN_MATHFUNC_RETVAL(sqrt, Scalar) sqrt(const Scalar& x)$/;"	f	namespace:internal
sqrt_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct sqrt_default_impl$/;"	s	namespace:internal
sqrt_default_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct sqrt_default_impl<Scalar, true>$/;"	s	namespace:internal
sqrt_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct sqrt_impl : sqrt_default_impl<Scalar, NumTraits<Scalar>::IsInteger> {};$/;"	s	namespace:internal
sqrt_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^struct sqrt_retval$/;"	s	namespace:internal
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef Scalar type;$/;"	t	struct:internal::atan2_retval
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef Scalar type;$/;"	t	struct:internal::conj_retval
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef Scalar type;$/;"	t	struct:internal::pow_retval
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef Scalar type;$/;"	t	struct:internal::random_retval
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef Scalar type;$/;"	t	struct:internal::sqrt_retval
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef T type;$/;"	t	struct:internal::global_math_functions_filtering_base
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real & type;$/;"	t	struct:internal::imag_ref_retval
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real & type;$/;"	t	struct:internal::real_ref_retval
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real type;$/;"	t	struct:internal::abs2_retval
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real type;$/;"	t	struct:internal::abs_retval
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real type;$/;"	t	struct:internal::hypot_retval
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real type;$/;"	t	struct:internal::imag_retval
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real type;$/;"	t	struct:internal::norm1_retval
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef typename NumTraits<Scalar>::Real type;$/;"	t	struct:internal::real_retval
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  typedef typename T::Eigen_BaseClassForSpecializationOfGlobalMathFuncImpl type;$/;"	t	struct:internal::global_math_functions_filtering_base
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^template<typename T> struct always_void { typedef void type; };$/;"	t	struct:internal::always_void
upper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  enum { value = floor_log2<n, floor_log2_selector<n, lower, upper>::middle, upper>::value };$/;"	e	enum:internal::floor_log2::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^         value = (upper <= lower + 1) ? int(floor_log2_terminate)$/;"	e	enum:internal::floor_log2_selector::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  enum { value = (n >= ((unsigned int)(1) << (lower+1))) ? lower+1 : lower };$/;"	e	enum:internal::floor_log2::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  enum { value = floor_log2<n, floor_log2_selector<n, lower, upper>::middle, upper>::value };$/;"	e	class:internal::floor_log2::<anonymous>::upper
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  enum { value = floor_log2<n, floor_log2_selector<n, lower, upper>::middle, upper>::value };$/;"	e	enum:internal::floor_log2::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  enum { value = floor_log2<n, lower, floor_log2_selector<n, lower, upper>::middle>::value };$/;"	e	class:internal::floor_log2::<anonymous>::floor_log2_selector::middle
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MathFunctions.h	/^  enum { value = floor_log2<n, lower, floor_log2_selector<n, lower, upper>::middle>::value };$/;"	e	enum:internal::floor_log2::<anonymous>
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    typedef PlainObjectBase<Matrix> Base;$/;"	t	class:Matrix
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    CoeffReadCost = NumTraits<Scalar>::ReadCost,$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    ColsAtCompileTime = _Cols,$/;"	e	enum:internal::traits::<anonymous>
EIGEN_MAKE_FIXED_TYPEDEFS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	395;"	d
EIGEN_MAKE_TYPEDEFS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	387;"	d
EIGEN_MAKE_TYPEDEFS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	417;"	d
EIGEN_MAKE_TYPEDEFS_ALL_SIZES	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	401;"	d
EIGEN_MAKE_TYPEDEFS_ALL_SIZES	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	416;"	d
EIGEN_MAKE_TYPEDEFS_LARGE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	419;"	d
EIGEN_MATRIX_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	27;"	d
EIGEN_USING_MATRIX_TYPEDEFS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	432;"	d
EIGEN_USING_MATRIX_TYPEDEFS_FOR_TYPE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	426;"	d
EIGEN_USING_MATRIX_TYPEDEFS_FOR_TYPE_AND_SIZE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	421;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    Flags = compute_matrix_flags<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::ret,$/;"	e	enum:internal::traits::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^  typedef DenseIndex Index;$/;"	t	struct:internal::traits
InnerStrideAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    InnerStrideAtCompileTime = 1,$/;"	e	enum:internal::traits::<anonymous>
Matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix(const EigenBase<OtherDerived> &other)$/;"	f	class:Matrix
Matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix(const Matrix& other)$/;"	f	class:Matrix
Matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix(const MatrixBase<OtherDerived>& other)$/;"	f	class:Matrix
Matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix(const ReturnByValue<OtherDerived>& other)$/;"	f	class:Matrix
Matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)$/;"	f	class:Matrix
Matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z, const Scalar& w)$/;"	f	class:Matrix
Matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix(const T0& x, const T1& y)$/;"	f	class:Matrix
Matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE explicit Matrix() : Base()$/;"	f	class:Matrix
Matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE explicit Matrix(Index dim)$/;"	f	class:Matrix
Matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    Matrix(internal::constructor_without_unaligned_array_assert)$/;"	f	class:Matrix
Matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^class Matrix$/;"	c
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    MaxColsAtCompileTime = _MaxCols,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    MaxRowsAtCompileTime = _MaxRows,$/;"	e	enum:internal::traits::<anonymous>
NeedsToAlign	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    enum { NeedsToAlign = (!(Options&DontAlign))$/;"	e	enum:Matrix::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    Options = _Options,$/;"	e	enum:internal::traits::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    enum { Options = _Options };$/;"	e	enum:Matrix::<anonymous>
OuterStrideAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    OuterStrideAtCompileTime = (Options&RowMajor) ? ColsAtCompileTime : RowsAtCompileTime$/;"	e	enum:internal::traits::<anonymous>
PlainObject	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    typedef typename Base::PlainObject PlainObject;$/;"	t	class:Matrix
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    RowsAtCompileTime = _Rows,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^  typedef _Scalar Scalar;$/;"	t	struct:internal::traits
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^  typedef Dense StorageKind;$/;"	t	struct:internal::traits
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:internal::traits
_Cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    Flags = compute_matrix_flags<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::ret,$/;"	e	enum:internal::traits::<anonymous>
_MaxCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    Flags = compute_matrix_flags<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::ret,$/;"	e	enum:internal::traits::<anonymous>
_MaxRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    Flags = compute_matrix_flags<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::ret,$/;"	e	enum:internal::traits::<anonymous>
_Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    Flags = compute_matrix_flags<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::ret,$/;"	e	enum:internal::traits::<anonymous>
_Rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    Flags = compute_matrix_flags<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::ret,$/;"	e	enum:internal::traits::<anonymous>
innerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    inline Index innerStride() const { return 1; }$/;"	f	class:Matrix
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^namespace internal {$/;"	n
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix& operator=(const EigenBase<OtherDerived> &other)$/;"	f	class:Matrix
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix& operator=(const Matrix& other)$/;"	f	class:Matrix
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix& operator=(const MatrixBase<OtherDerived>& other)$/;"	f	class:Matrix
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    EIGEN_STRONG_INLINE Matrix& operator=(const ReturnByValue<OtherDerived>& func)$/;"	f	class:Matrix
outerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    inline Index outerStride() const { return this->innerSize(); }$/;"	f	class:Matrix
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    Flags = compute_matrix_flags<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::ret,$/;"	e	class:internal::traits::<anonymous>::_MaxCols
swap	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^    void swap(MatrixBase<OtherDerived> const & other)$/;"	f	class:Matrix
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Matrix.h	/^struct traits<Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> >$/;"	s	namespace:internal
AdjointReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^                     >::type AdjointReturnType;$/;"	t	class:MatrixBase
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    typedef DenseBase<Derived> Base;$/;"	t	class:MatrixBase
BasisReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^                  internal::traits<Derived>::ColsAtCompileTime> BasisReturnType;$/;"	t	class:MatrixBase
CoeffReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    typedef typename Base::CoeffReturnType CoeffReturnType;$/;"	t	class:MatrixBase
ColXpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    typedef typename Base::ColXpr ColXpr;$/;"	t	class:MatrixBase
ConstDiagonalIndexReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    template<int Index> struct ConstDiagonalIndexReturnType { typedef const Diagonal<const Derived,Index> Type; };$/;"	s	class:MatrixBase
ConstDiagonalReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    typedef const Diagonal<const Derived> ConstDiagonalReturnType;$/;"	t	class:MatrixBase
ConstSelfAdjointViewReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    template<unsigned int UpLo> struct ConstSelfAdjointViewReturnType { typedef const SelfAdjointView<const Derived, UpLo> Type; };$/;"	s	class:MatrixBase
ConstStartMinusOne	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^                  internal::traits<Derived>::ColsAtCompileTime==1 ? 1 : SizeMinusOne> ConstStartMinusOne;$/;"	t	class:MatrixBase
ConstTransposeReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    typedef typename Base::ConstTransposeReturnType ConstTransposeReturnType;$/;"	t	class:MatrixBase
ConstTriangularViewReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    template<unsigned int Mode> struct ConstTriangularViewReturnType { typedef const TriangularView<const Derived, Mode> Type; };$/;"	s	class:MatrixBase
ConstantReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    typedef CwiseNullaryOp<internal::scalar_constant_op<Scalar>,Derived> ConstantReturnType;$/;"	t	class:MatrixBase
DiagonalIndexReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    template<int Index> struct DiagonalIndexReturnType { typedef Diagonal<Derived,Index> Type; };$/;"	s	class:MatrixBase
DiagonalReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    typedef Diagonal<Derived> DiagonalReturnType;$/;"	t	class:MatrixBase
EIGEN_CURRENT_STORAGE_BASE_CLASS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	148;"	d
EIGEN_CURRENT_STORAGE_BASE_CLASS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	156;"	d
EIGEN_MATRIXBASE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	27;"	d
EigenvaluesReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    typedef Matrix<std::complex<RealScalar>, internal::traits<Derived>::ColsAtCompileTime, 1, ColMajor> EigenvaluesReturnType;$/;"	t	class:MatrixBase
HNormalizedReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^                const ConstStartMinusOne > HNormalizedReturnType;$/;"	t	class:MatrixBase
HomogeneousReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    typedef Homogeneous<Derived, HomogeneousReturnTypeDirection> HomogeneousReturnType;$/;"	t	class:MatrixBase
HomogeneousReturnTypeDirection	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    enum { HomogeneousReturnTypeDirection = ColsAtCompileTime==1?Vertical:Horizontal };$/;"	e	enum:MatrixBase::<anonymous>
IdentityReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    typedef CwiseNullaryOp<internal::scalar_identity_op<Scalar>,Derived> IdentityReturnType;$/;"	t	class:MatrixBase
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    typedef typename internal::traits<Derived>::Index Index;$/;"	t	class:MatrixBase
MatrixBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    MatrixBase() : Base() {}$/;"	f	class:MatrixBase
MatrixBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^template<typename Derived> class MatrixBase$/;"	c
PacketScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    typedef typename internal::packet_traits<Scalar>::type PacketScalar;$/;"	t	class:MatrixBase
PlainObject	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^          > PlainObject;$/;"	t	class:MatrixBase
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:MatrixBase
RowXpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    typedef typename Base::RowXpr RowXpr;$/;"	t	class:MatrixBase
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^      typedef typename internal::scalar_product_traits<typename internal::traits<Derived>::Scalar,typename internal::traits<OtherDerived>::Scalar>::ReturnType Scalar;$/;"	t	struct:MatrixBase::cross_product_return_type
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:MatrixBase
SelfAdjointViewReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    template<unsigned int UpLo> struct SelfAdjointViewReturnType { typedef SelfAdjointView<Derived, UpLo> Type; };$/;"	s	class:MatrixBase
SizeMinusOne	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^      SizeMinusOne = SizeAtCompileTime==Dynamic ? Dynamic : SizeAtCompileTime-1$/;"	e	enum:MatrixBase::<anonymous>
SquareMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^                          EIGEN_SIZE_MAX(RowsAtCompileTime,ColsAtCompileTime)> SquareMatrixType;$/;"	t	class:MatrixBase
StemFunction	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    typedef typename internal::stem_function<Scalar>::type StemFunction;$/;"	t	class:MatrixBase
StorageBaseType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    typedef MatrixBase StorageBaseType;$/;"	t	class:MatrixBase
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	class:MatrixBase
TriangularViewReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    template<unsigned int Mode> struct TriangularViewReturnType { typedef TriangularView<Derived, Mode> Type; };$/;"	s	class:MatrixBase
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    template<int Index> struct ConstDiagonalIndexReturnType { typedef const Diagonal<const Derived,Index> Type; };$/;"	t	struct:MatrixBase::ConstDiagonalIndexReturnType
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    template<int Index> struct DiagonalIndexReturnType { typedef Diagonal<Derived,Index> Type; };$/;"	t	struct:MatrixBase::DiagonalIndexReturnType
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    template<unsigned int Mode> struct ConstTriangularViewReturnType { typedef const TriangularView<const Derived, Mode> Type; };$/;"	t	struct:MatrixBase::ConstTriangularViewReturnType
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    template<unsigned int Mode> struct TriangularViewReturnType { typedef TriangularView<Derived, Mode> Type; };$/;"	t	struct:MatrixBase::TriangularViewReturnType
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    template<unsigned int UpLo> struct ConstSelfAdjointViewReturnType { typedef const SelfAdjointView<const Derived, UpLo> Type; };$/;"	t	struct:MatrixBase::ConstSelfAdjointViewReturnType
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    template<unsigned int UpLo> struct SelfAdjointViewReturnType { typedef SelfAdjointView<Derived, UpLo> Type; };$/;"	t	struct:MatrixBase::SelfAdjointViewReturnType
array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    ArrayWrapper<Derived> array() { return derived(); }$/;"	f	class:MatrixBase
array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    const ArrayWrapper<Derived> array() const { return derived(); }$/;"	f	class:MatrixBase
computeInverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    void computeInverse(MatrixBase<ResultType> *result) const {$/;"	f	class:MatrixBase
cross_product_return_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    template<typename OtherDerived> struct cross_product_return_type {$/;"	s	class:MatrixBase
diagonalSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    inline Index diagonalSize() const { return std::min(rows(),cols()); }$/;"	f	class:MatrixBase
lazyAssign	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    Derived& lazyAssign(const Flagged<OtherDerived, 0, EvalBeforeAssigningBit>& other)$/;"	f	class:MatrixBase
matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    MatrixBase<Derived>& matrix() { return *this; }$/;"	f	class:MatrixBase
matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    const MatrixBase<Derived>& matrix() const { return *this; }$/;"	f	class:MatrixBase
operator !=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    inline bool operator!=(const MatrixBase<OtherDerived>& other) const$/;"	f	class:MatrixBase
operator +=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    template<typename OtherDerived> Derived& operator+=(const ArrayBase<OtherDerived>& )$/;"	f	class:MatrixBase
operator -=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    template<typename OtherDerived> Derived& operator-=(const ArrayBase<OtherDerived>& )$/;"	f	class:MatrixBase
operator ==	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    inline bool operator==(const MatrixBase<OtherDerived>& other) const$/;"	f	class:MatrixBase
part	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^    const DiagonalWrapper<ConstDiagonalReturnType> part() const$/;"	f	class:MatrixBase
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/MatrixBase.h	/^      typedef Matrix<Scalar,MatrixBase::RowsAtCompileTime,MatrixBase::ColsAtCompileTime> type;$/;"	t	struct:MatrixBase::cross_product_return_type
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^    typedef typename internal::dense_xpr_base<NestByValue>::type Base;$/;"	t	class:NestByValue
EIGEN_NESTBYVALUE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	27;"	d
NestByValue	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^    inline NestByValue(const ExpressionType& matrix) : m_expression(matrix) {}$/;"	f	class:NestByValue
NestByValue	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^template<typename ExpressionType> class NestByValue$/;"	c
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^    inline const CoeffReturnType coeff(Index index) const$/;"	f	class:NestByValue
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^    inline const CoeffReturnType coeff(Index row, Index col) const$/;"	f	class:NestByValue
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^    inline Scalar& coeffRef(Index index)$/;"	f	class:NestByValue
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:NestByValue
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^    inline Index cols() const { return m_expression.cols(); }$/;"	f	class:NestByValue
innerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^    inline Index innerStride() const { return m_expression.innerStride(); }$/;"	f	class:NestByValue
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^namespace internal {$/;"	n
m_expression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^    const ExpressionType m_expression;$/;"	m	class:NestByValue
nestByValue	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^DenseBase<Derived>::nestByValue() const$/;"	f	class:DenseBase
operator const ExpressionType&	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^    operator const ExpressionType&() const { return m_expression; }$/;"	f	class:NestByValue
outerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^    inline Index outerStride() const { return m_expression.outerStride(); }$/;"	f	class:NestByValue
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^    inline const PacketScalar packet(Index index) const$/;"	f	class:NestByValue
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^    inline const PacketScalar packet(Index row, Index col) const$/;"	f	class:NestByValue
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^    inline Index rows() const { return m_expression.rows(); }$/;"	f	class:NestByValue
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^struct traits<NestByValue<ExpressionType> > : public traits<ExpressionType>$/;"	s	namespace:internal
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^    inline void writePacket(Index index, const PacketScalar& x)$/;"	f	class:NestByValue
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NestByValue.h	/^    inline void writePacket(Index row, Index col, const PacketScalar& x)$/;"	f	class:NestByValue
EIGEN_NOALIAS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NoAlias.h	26;"	d
NoAlias	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NoAlias.h	/^    NoAlias(ExpressionType& expression) : m_expression(expression) {}$/;"	f	class:NoAlias
NoAlias	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NoAlias.h	/^class NoAlias$/;"	c
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NoAlias.h	/^    typedef typename ExpressionType::Scalar Scalar;$/;"	t	class:NoAlias
m_expression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NoAlias.h	/^    ExpressionType& m_expression;$/;"	m	class:NoAlias
noalias	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NoAlias.h	/^NoAlias<Derived,MatrixBase> MatrixBase<Derived>::noalias()$/;"	f	class:MatrixBase
operator +=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NoAlias.h	/^    EIGEN_STRONG_INLINE ExpressionType& operator+=(const CoeffBasedProduct<Lhs,Rhs,NestingFlags>& other)$/;"	f	class:NoAlias
operator +=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NoAlias.h	/^    EIGEN_STRONG_INLINE ExpressionType& operator+=(const ProductBase<ProductDerived, Lhs,Rhs>& other)$/;"	f	class:NoAlias
operator +=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NoAlias.h	/^    EIGEN_STRONG_INLINE ExpressionType& operator+=(const StorageBase<OtherDerived>& other)$/;"	f	class:NoAlias
operator -=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NoAlias.h	/^    EIGEN_STRONG_INLINE ExpressionType& operator-=(const CoeffBasedProduct<Lhs,Rhs,NestingFlags>& other)$/;"	f	class:NoAlias
operator -=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NoAlias.h	/^    EIGEN_STRONG_INLINE ExpressionType& operator-=(const ProductBase<ProductDerived, Lhs,Rhs>& other)$/;"	f	class:NoAlias
operator -=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NoAlias.h	/^    EIGEN_STRONG_INLINE ExpressionType& operator-=(const StorageBase<OtherDerived>& other)$/;"	f	class:NoAlias
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NoAlias.h	/^    EIGEN_STRONG_INLINE ExpressionType& operator=(const StorageBase<OtherDerived>& other)$/;"	f	class:NoAlias
AddCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NumTraits.h	/^    AddCost = 1,$/;"	e	enum:GenericNumTraits::<anonymous>
EIGEN_NUMTRAITS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NumTraits.h	26;"	d
GenericNumTraits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NumTraits.h	/^template<typename T> struct GenericNumTraits$/;"	s
IsComplex	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NumTraits.h	/^    IsComplex = 0,$/;"	e	enum:GenericNumTraits::<anonymous>
IsInteger	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NumTraits.h	/^    IsInteger = std::numeric_limits<T>::is_integer,$/;"	e	enum:GenericNumTraits::<anonymous>
IsSigned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NumTraits.h	/^    IsSigned = std::numeric_limits<T>::is_signed,$/;"	e	enum:GenericNumTraits::<anonymous>
MulCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NumTraits.h	/^    MulCost = 1$/;"	e	enum:GenericNumTraits::<anonymous>
ReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NumTraits.h	/^    ReadCost = 1,$/;"	e	enum:GenericNumTraits::<anonymous>
Real	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NumTraits.h	/^  typedef T Real;$/;"	t	struct:GenericNumTraits
RequireInitialization	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/NumTraits.h	/^    RequireInitialization = internal::is_arithmetic<T>::value ? 0 : 1,$/;"	e	enum:GenericNumTraits::<anonymous>
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef EigenBase<Derived> Base;$/;"	t	class:PermutationBase
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef PermutationBase<Map> Base;$/;"	t	class:Map
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef PermutationBase<PermutationMatrix> Base;$/;"	t	class:PermutationMatrix
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef PermutationBase<PermutationWrapper> Base;$/;"	t	class:PermutationWrapper
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^      CoeffReadCost = Traits::CoeffReadCost,$/;"	e	enum:PermutationBase::<anonymous>
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^      CoeffReadCost = Traits::CoeffReadCost,$/;"	e	enum:Transpose::<anonymous>
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    CoeffReadCost = _IndicesType::CoeffReadCost$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^      ColsAtCompileTime = Traits::ColsAtCompileTime,$/;"	e	enum:PermutationBase::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^      ColsAtCompileTime = Traits::ColsAtCompileTime,$/;"	e	enum:Transpose::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    ColsAtCompileTime = _IndicesType::SizeAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
DenseMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^            DenseMatrixType;$/;"	t	class:PermutationBase
DenseMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename Derived::DenseMatrixType DenseMatrixType;$/;"	t	class:Transpose
EIGEN_PERMUTATIONMATRIX_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	27;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^      Flags = Traits::Flags,$/;"	e	enum:PermutationBase::<anonymous>
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^      Flags = Traits::Flags,$/;"	e	enum:Transpose::<anonymous>
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    Flags = 0,$/;"	e	enum:internal::traits::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename IndicesType::Scalar Index;$/;"	t	class:Map
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename Traits::Index Index;$/;"	t	class:PermutationBase
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^  typedef IndexType Index;$/;"	t	struct:internal::traits
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^  typedef typename _IndicesType::Scalar Index;$/;"	t	struct:internal::traits
IndicesType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename PermutationType::IndicesType IndicesType;$/;"	t	class:Transpose
IndicesType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename Traits::IndicesType IndicesType;$/;"	t	class:Map
IndicesType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename Traits::IndicesType IndicesType;$/;"	t	class:PermutationBase
IndicesType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename Traits::IndicesType IndicesType;$/;"	t	class:PermutationMatrix
IndicesType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename Traits::IndicesType IndicesType;$/;"	t	class:PermutationWrapper
IndicesType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^  typedef Map<const Matrix<IndexType, SizeAtCompileTime, 1, 0, MaxSizeAtCompileTime, 1>, _PacketAccess> IndicesType;$/;"	t	struct:internal::traits
IndicesType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^  typedef Matrix<IndexType, SizeAtCompileTime, 1, 0, MaxSizeAtCompileTime, 1> IndicesType;$/;"	t	struct:internal::traits
IndicesType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^  typedef _IndicesType IndicesType;$/;"	t	struct:internal::traits
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline Map(const Index* indices)$/;"	f	class:Map
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline Map(const Index* indices, Index size)$/;"	f	class:Map
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^class Map<PermutationMatrix<SizeAtCompileTime, MaxSizeAtCompileTime, IndexType>,_PacketAccess>$/;"	c
MatrixTypeNestedCleaned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename remove_all<typename MatrixType::Nested>::type MatrixTypeNestedCleaned;$/;"	t	struct:internal::permut_matrix_product_retval
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^      MaxColsAtCompileTime = Traits::MaxColsAtCompileTime$/;"	e	enum:PermutationBase::<anonymous>
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^      MaxColsAtCompileTime = Traits::MaxColsAtCompileTime$/;"	e	enum:Transpose::<anonymous>
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    MaxColsAtCompileTime = IndicesType::MaxColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^      MaxRowsAtCompileTime = Traits::MaxRowsAtCompileTime,$/;"	e	enum:PermutationBase::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^      MaxRowsAtCompileTime = Traits::MaxRowsAtCompileTime,$/;"	e	enum:Transpose::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    MaxRowsAtCompileTime = IndicesType::MaxRowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
PermPermProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^enum PermPermProduct_t {PermPermProduct};$/;"	e	enum:internal::PermPermProduct_t
PermPermProduct_t	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^enum PermPermProduct_t {PermPermProduct};$/;"	g	namespace:internal
PermutationBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^class PermutationBase : public EigenBase<Derived>$/;"	c
PermutationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    PermutationMatrix(const Transpose<PermutationBase<Other> >& other)$/;"	f	class:PermutationMatrix
PermutationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    PermutationMatrix(internal::PermPermProduct_t, const Lhs& lhs, const Rhs& rhs)$/;"	f	class:PermutationMatrix
PermutationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    explicit PermutationMatrix(const TranspositionsBase<Other>& tr)$/;"	f	class:PermutationMatrix
PermutationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    explicit inline PermutationMatrix(const MatrixBase<Other>& indices) : m_indices(indices)$/;"	f	class:PermutationMatrix
PermutationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline PermutationMatrix()$/;"	f	class:PermutationMatrix
PermutationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline PermutationMatrix(const PermutationBase<OtherDerived>& other)$/;"	f	class:PermutationMatrix
PermutationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline PermutationMatrix(const PermutationMatrix& other) : m_indices(other.indices()) {}$/;"	f	class:PermutationMatrix
PermutationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline PermutationMatrix(int size) : m_indices(size)$/;"	f	class:PermutationMatrix
PermutationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^class PermutationMatrix : public PermutationBase<PermutationMatrix<SizeAtCompileTime, MaxSizeAtCompileTime, IndexType> >$/;"	c
PermutationStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^struct PermutationStorage {};$/;"	s
PermutationType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef Derived PermutationType;$/;"	t	class:Transpose
PermutationWrapper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline PermutationWrapper(const IndicesType& indices)$/;"	f	class:PermutationWrapper
PermutationWrapper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^class PermutationWrapper : public PermutationBase<PermutationWrapper<_IndicesType> >$/;"	c
PlainPermutationType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^            PlainPermutationType;$/;"	t	class:PermutationBase
PlainPermutationType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename PermutationType::PlainPermutationType PlainPermutationType;$/;"	t	class:Transpose
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^  typedef typename MatrixType::PlainObject ReturnType;$/;"	t	struct:internal::traits
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^      RowsAtCompileTime = Traits::RowsAtCompileTime,$/;"	e	enum:PermutationBase::<anonymous>
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^      RowsAtCompileTime = Traits::RowsAtCompileTime,$/;"	e	enum:Transpose::<anonymous>
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    RowsAtCompileTime = _IndicesType::SizeAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename Traits::Scalar Scalar;$/;"	t	class:PermutationBase
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef typename Traits::Scalar Scalar;$/;"	t	class:Transpose
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^  typedef typename _IndicesType::Scalar Scalar;$/;"	t	struct:internal::traits
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^  typedef PermutationStorage StorageKind;$/;"	t	struct:internal::traits
Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef internal::traits<Derived> Traits;$/;"	t	class:PermutationBase
Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef internal::traits<Map> Traits;$/;"	t	class:Map
Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef internal::traits<PermutationMatrix> Traits;$/;"	t	class:PermutationMatrix
Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef internal::traits<PermutationType> Traits;$/;"	t	class:Transpose
Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    typedef internal::traits<PermutationWrapper> Traits;$/;"	t	class:PermutationWrapper
Transpose	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    Transpose(const PermutationType& p) : m_permutation(p) {}$/;"	f	class:Transpose
Transpose	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^class Transpose<PermutationBase<Derived> >$/;"	c
applyTranspositionOnTheLeft	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    Derived& applyTranspositionOnTheLeft(Index i, Index j)$/;"	f	class:PermutationBase
applyTranspositionOnTheRight	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    Derived& applyTranspositionOnTheRight(Index i, Index j)$/;"	f	class:PermutationBase
asPermutation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^const PermutationWrapper<const Derived> MatrixBase<Derived>::asPermutation() const$/;"	f	class:MatrixBase
assignProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    void assignProduct(const Lhs& lhs, const Rhs& rhs)$/;"	f	class:PermutationBase
assignTranspose	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    void assignTranspose(const PermutationBase<OtherDerived>& other)$/;"	f	class:PermutationBase
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline Index cols() const { return indices().size(); }$/;"	f	class:PermutationBase
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline int cols() const { return m_matrix.cols(); }$/;"	f	struct:internal::permut_matrix_product_retval
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline int cols() const { return m_permutation.cols(); }$/;"	f	class:Transpose
eval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    PlainPermutationType eval() const { return *this; }$/;"	f	class:Transpose
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:internal::permut_matrix_product_retval
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    void evalTo(MatrixBase<DenseDerived>& other) const$/;"	f	class:PermutationBase
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    void evalTo(MatrixBase<DenseDerived>& other) const$/;"	f	class:Transpose
indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    IndicesType& indices() { return derived().indices(); }$/;"	f	class:PermutationBase
indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    IndicesType& indices() { return m_indices; }$/;"	f	class:Map
indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    IndicesType& indices() { return m_indices; }$/;"	f	class:PermutationMatrix
indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    const IndicesType& indices() const { return derived().indices(); }$/;"	f	class:PermutationBase
indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    const IndicesType& indices() const { return m_indices; }$/;"	f	class:Map
indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    const IndicesType& indices() const { return m_indices; }$/;"	f	class:PermutationMatrix
indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    indices() const { return m_indices; }$/;"	f	class:PermutationWrapper
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^namespace internal {$/;"	n
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline Transpose<PermutationBase> inverse() const$/;"	f	class:PermutationBase
m_indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    IndicesType m_indices;$/;"	m	class:Map
m_indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    IndicesType m_indices;$/;"	m	class:PermutationMatrix
m_indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    const typename IndicesType::Nested m_indices;$/;"	m	class:PermutationWrapper
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    const typename MatrixType::Nested m_matrix;$/;"	m	struct:internal::permut_matrix_product_retval
m_permutation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    const PermutationType& m_permutation;$/;"	m	class:Transpose
m_permutation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    const PermutationType& m_permutation;$/;"	m	struct:internal::permut_matrix_product_retval
nestedPermutation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    const PermutationType& nestedPermutation() const { return m_permutation; }$/;"	f	class:Transpose
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline PlainPermutationType operator*(const PermutationBase<Other>& other) const$/;"	f	class:PermutationBase
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline PlainPermutationType operator*(const Transpose<PermutationBase<Other> >& other) const$/;"	f	class:PermutationBase
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline PlainPermutationType operator*(const Transpose<PermutationBase<Other> >& other, const PermutationBase& perm)$/;"	f	class:PermutationBase
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    operator*(const MatrixBase<OtherDerived>& matrix) const$/;"	f	class:Transpose
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    operator*(const MatrixBase<OtherDerived>& matrix, const Transpose& trPerm)$/;"	f	class:Transpose
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^operator*(const MatrixBase<Derived>& matrix,$/;"	f
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^operator*(const PermutationBase<PermutationDerived> &permutation,$/;"	f
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    Derived& operator=(const PermutationBase& other)$/;"	f	class:PermutationBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    Derived& operator=(const PermutationBase<OtherDerived>& other)$/;"	f	class:PermutationBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    Derived& operator=(const TranspositionsBase<OtherDerived>& tr)$/;"	f	class:PermutationBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    Map& operator=(const Map& other)$/;"	f	class:Map
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    Map& operator=(const PermutationBase<Other>& other)$/;"	f	class:Map
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    Map& operator=(const TranspositionsBase<Other>& tr)$/;"	f	class:Map
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    PermutationMatrix& operator=(const PermutationBase<Other>& other)$/;"	f	class:PermutationMatrix
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    PermutationMatrix& operator=(const PermutationMatrix& other)$/;"	f	class:PermutationMatrix
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    PermutationMatrix& operator=(const TranspositionsBase<Other>& tr)$/;"	f	class:PermutationMatrix
permut_matrix_product_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    permut_matrix_product_retval(const PermutationType& perm, const MatrixType& matrix)$/;"	f	struct:internal::permut_matrix_product_retval
permut_matrix_product_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^struct permut_matrix_product_retval$/;"	s	namespace:internal
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline void resize(Index size)$/;"	f	class:PermutationBase
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline Index rows() const { return indices().size(); }$/;"	f	class:PermutationBase
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline int rows() const { return m_matrix.rows(); }$/;"	f	struct:internal::permut_matrix_product_retval
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline int rows() const { return m_permutation.rows(); }$/;"	f	class:Transpose
setIdentity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    void setIdentity()$/;"	f	class:PermutationBase
setIdentity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    void setIdentity(Index size)$/;"	f	class:PermutationBase
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline Index size() const { return indices().size(); }$/;"	f	class:PermutationBase
toDenseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    DenseMatrixType toDenseMatrix() const { return *this; }$/;"	f	class:Transpose
toDenseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    DenseMatrixType toDenseMatrix() const$/;"	f	class:PermutationBase
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^struct traits<Map<PermutationMatrix<SizeAtCompileTime, MaxSizeAtCompileTime, IndexType>,_PacketAccess> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^struct traits<PermutationMatrix<SizeAtCompileTime, MaxSizeAtCompileTime, IndexType> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^struct traits<PermutationWrapper<_IndicesType> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^struct traits<Transpose<PermutationBase<Derived> > >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^struct traits<permut_matrix_product_retval<PermutationType, MatrixType, Side, Transposed> >$/;"	s	namespace:internal
transpose	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PermutationMatrix.h	/^    inline Transpose<PermutationBase> transpose() const$/;"	f	class:PermutationBase
AlignedMapType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    typedef Eigen::Map<Derived, Aligned> AlignedMapType;$/;"	t	class:PlainObjectBase
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    typedef typename internal::dense_xpr_base<Derived>::type Base;$/;"	t	class:PlainObjectBase
ConstAlignedMapType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    typedef const Eigen::Map<const Derived, Aligned> ConstAlignedMapType;$/;"	t	class:PlainObjectBase
ConstMapType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    typedef const Eigen::Map<const Derived, Unaligned> ConstMapType;$/;"	t	class:PlainObjectBase
DenseType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    typedef Derived DenseType;$/;"	t	class:PlainObjectBase
EIGEN_DENSESTORAGEBASE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	27;"	d
EIGEN_INITIALIZE_BY_ZERO_IF_THAT_OPTION_IS_ENABLED	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	30;"	d
EIGEN_INITIALIZE_BY_ZERO_IF_THAT_OPTION_IS_ENABLED	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	32;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    typedef typename internal::traits<Derived>::Index Index;$/;"	t	class:PlainObjectBase
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^  typedef typename Derived::Index Index;$/;"	t	struct:internal::conservative_resize_like_impl
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static ConstMapType Map(const Scalar* data)$/;"	f	class:PlainObjectBase
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static ConstMapType Map(const Scalar* data, Index rows, Index cols)$/;"	f	class:PlainObjectBase
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static ConstMapType Map(const Scalar* data, Index size)$/;"	f	class:PlainObjectBase
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static MapType Map(Scalar* data)$/;"	f	class:PlainObjectBase
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static MapType Map(Scalar* data, Index rows, Index cols)$/;"	f	class:PlainObjectBase
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static MapType Map(Scalar* data, Index size)$/;"	f	class:PlainObjectBase
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static typename StridedConstMapType<Stride<Outer, Inner> >::type Map(const Scalar* data, Index rows, Index cols, const Stride<Outer, Inner>& stride)$/;"	f	class:PlainObjectBase
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static typename StridedConstMapType<Stride<Outer, Inner> >::type Map(const Scalar* data, Index size, const Stride<Outer, Inner>& stride)$/;"	f	class:PlainObjectBase
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static typename StridedConstMapType<Stride<Outer, Inner> >::type Map(const Scalar* data, const Stride<Outer, Inner>& stride)$/;"	f	class:PlainObjectBase
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static typename StridedMapType<Stride<Outer, Inner> >::type Map(Scalar* data, Index rows, Index cols, const Stride<Outer, Inner>& stride)$/;"	f	class:PlainObjectBase
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static typename StridedMapType<Stride<Outer, Inner> >::type Map(Scalar* data, Index size, const Stride<Outer, Inner>& stride)$/;"	f	class:PlainObjectBase
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static typename StridedMapType<Stride<Outer, Inner> >::type Map(Scalar* data, const Stride<Outer, Inner>& stride)$/;"	f	class:PlainObjectBase
MapAligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static AlignedMapType MapAligned(Scalar* data)$/;"	f	class:PlainObjectBase
MapAligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static AlignedMapType MapAligned(Scalar* data, Index rows, Index cols)$/;"	f	class:PlainObjectBase
MapAligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static AlignedMapType MapAligned(Scalar* data, Index size)$/;"	f	class:PlainObjectBase
MapAligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static ConstAlignedMapType MapAligned(const Scalar* data)$/;"	f	class:PlainObjectBase
MapAligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static ConstAlignedMapType MapAligned(const Scalar* data, Index rows, Index cols)$/;"	f	class:PlainObjectBase
MapAligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static ConstAlignedMapType MapAligned(const Scalar* data, Index size)$/;"	f	class:PlainObjectBase
MapAligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static typename StridedAlignedMapType<Stride<Outer, Inner> >::type MapAligned(Scalar* data, Index rows, Index cols, const Stride<Outer, Inner>& stride)$/;"	f	class:PlainObjectBase
MapAligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static typename StridedAlignedMapType<Stride<Outer, Inner> >::type MapAligned(Scalar* data, Index size, const Stride<Outer, Inner>& stride)$/;"	f	class:PlainObjectBase
MapAligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static typename StridedAlignedMapType<Stride<Outer, Inner> >::type MapAligned(Scalar* data, const Stride<Outer, Inner>& stride)$/;"	f	class:PlainObjectBase
MapAligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static typename StridedConstAlignedMapType<Stride<Outer, Inner> >::type MapAligned(const Scalar* data, Index rows, Index cols, const Stride<Outer, Inner>& stride)$/;"	f	class:PlainObjectBase
MapAligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static typename StridedConstAlignedMapType<Stride<Outer, Inner> >::type MapAligned(const Scalar* data, Index size, const Stride<Outer, Inner>& stride)$/;"	f	class:PlainObjectBase
MapAligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline static typename StridedConstAlignedMapType<Stride<Outer, Inner> >::type MapAligned(const Scalar* data, const Stride<Outer, Inner>& stride)$/;"	f	class:PlainObjectBase
MapType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    typedef Eigen::Map<Derived, Unaligned>  MapType;$/;"	t	class:PlainObjectBase
NeedsToAlign	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    enum { NeedsToAlign = (!(Options&DontAlign))$/;"	e	enum:PlainObjectBase::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    enum { Options = internal::traits<Derived>::Options };$/;"	e	enum:PlainObjectBase::<anonymous>
PacketScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    typedef typename internal::packet_traits<Scalar>::type PacketScalar;$/;"	t	class:PlainObjectBase
PlainObjectBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE PlainObjectBase(Index size, Index rows, Index cols)$/;"	f	class:PlainObjectBase
PlainObjectBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE PlainObjectBase(const EigenBase<OtherDerived> &other)$/;"	f	class:PlainObjectBase
PlainObjectBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE explicit PlainObjectBase() : m_storage()$/;"	f	class:PlainObjectBase
PlainObjectBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    PlainObjectBase(internal::constructor_without_unaligned_array_assert)$/;"	f	class:PlainObjectBase
PlainObjectBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^class PlainObjectBase : public internal::dense_xpr_base<Derived>::type$/;"	c
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:PlainObjectBase
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:PlainObjectBase
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	class:PlainObjectBase
StridedAlignedMapType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    template<typename StrideType> struct StridedAlignedMapType { typedef Eigen::Map<Derived, Aligned, StrideType> type; };$/;"	s	class:PlainObjectBase
StridedConstAlignedMapType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    template<typename StrideType> struct StridedConstAlignedMapType { typedef Eigen::Map<const Derived, Aligned, StrideType> type; };$/;"	s	class:PlainObjectBase
StridedConstMapType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    template<typename StrideType> struct StridedConstMapType { typedef Eigen::Map<const Derived, Unaligned, StrideType> type; };$/;"	s	class:PlainObjectBase
StridedMapType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    template<typename StrideType> struct StridedMapType { typedef Eigen::Map<Derived, Unaligned, StrideType> type; };$/;"	s	class:PlainObjectBase
ThisConstantIsPrivateInPlainObjectBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    enum { ThisConstantIsPrivateInPlainObjectBase };$/;"	e	enum:PlainObjectBase::<anonymous>
_check_template_params	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE static void _check_template_params()$/;"	f	class:PlainObjectBase
_init2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)$/;"	f	class:PlainObjectBase
_init2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void _init2(const Scalar& x, const Scalar& y, typename internal::enable_if<Base::SizeAtCompileTime==2,T0>::type* = 0)$/;"	f	class:PlainObjectBase
_resize_to_match	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void _resize_to_match(const EigenBase<OtherDerived>& other)$/;"	f	class:PlainObjectBase
_set	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)$/;"	f	class:PlainObjectBase
_set_noalias	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)$/;"	f	class:PlainObjectBase
_set_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void _set_selector(const OtherDerived& other, const internal::false_type&) { _set_noalias(other); }$/;"	f	class:PlainObjectBase
_set_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void _set_selector(const OtherDerived& other, const internal::true_type&) { _set_noalias(other.eval()); }$/;"	f	class:PlainObjectBase
_swap	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    void _swap(DenseBase<OtherDerived> const & other)$/;"	f	class:PlainObjectBase
base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    Base& base() { return *static_cast<Base*>(this); }$/;"	f	class:PlainObjectBase
base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    const Base& base() const { return *static_cast<const Base*>(this); }$/;"	f	class:PlainObjectBase
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE const Scalar& coeff(Index index) const$/;"	f	class:PlainObjectBase
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE const Scalar& coeff(Index row, Index col) const$/;"	f	class:PlainObjectBase
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Scalar& coeffRef(Index index)$/;"	f	class:PlainObjectBase
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Scalar& coeffRef(Index row, Index col)$/;"	f	class:PlainObjectBase
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE const Scalar& coeffRef(Index index) const$/;"	f	class:PlainObjectBase
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE const Scalar& coeffRef(Index row, Index col) const$/;"	f	class:PlainObjectBase
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Index cols() const { return m_storage.cols(); }$/;"	f	class:PlainObjectBase
conservativeResize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void conservativeResize(Index rows, Index cols)$/;"	f	class:PlainObjectBase
conservativeResize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void conservativeResize(Index rows, NoChange_t)$/;"	f	class:PlainObjectBase
conservativeResize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void conservativeResize(Index size)$/;"	f	class:PlainObjectBase
conservativeResize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void conservativeResize(NoChange_t, Index cols)$/;"	f	class:PlainObjectBase
conservativeResizeLike	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void conservativeResizeLike(const DenseBase<OtherDerived>& other)$/;"	f	class:PlainObjectBase
conservative_resize_like_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^struct conservative_resize_like_impl<Derived,OtherDerived,true>$/;"	s	namespace:internal
conservative_resize_like_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^struct internal::conservative_resize_like_impl$/;"	s	class:internal
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Scalar *data()$/;"	f	class:PlainObjectBase
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE const Scalar *data() const$/;"	f	class:PlainObjectBase
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^namespace internal {$/;"	n
lazyAssign	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Derived& lazyAssign(const DenseBase<OtherDerived>& other)$/;"	f	class:PlainObjectBase
m_storage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    DenseStorage<Scalar, Base::MaxSizeAtCompileTime, Base::RowsAtCompileTime, Base::ColsAtCompileTime, Options> m_storage;$/;"	m	class:PlainObjectBase
matrix_swap_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^struct matrix_swap_impl$/;"	s	namespace:internal
matrix_swap_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^struct matrix_swap_impl<MatrixTypeA, MatrixTypeB, true>$/;"	s	namespace:internal
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Derived& operator=(const EigenBase<OtherDerived> &other)$/;"	f	class:PlainObjectBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Derived& operator=(const PlainObjectBase& other)$/;"	f	class:PlainObjectBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Derived& operator=(const ReturnByValue<OtherDerived>& func)$/;"	f	class:PlainObjectBase
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE PacketScalar packet(Index index) const$/;"	f	class:PlainObjectBase
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE PacketScalar packet(Index row, Index col) const$/;"	f	class:PlainObjectBase
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)$/;"	f	class:PlainObjectBase
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline void resize(Index rows, NoChange_t)$/;"	f	class:PlainObjectBase
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline void resize(Index size)$/;"	f	class:PlainObjectBase
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    inline void resize(NoChange_t, Index cols)$/;"	f	class:PlainObjectBase
resizeLike	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void resizeLike(const EigenBase<OtherDerived>& _other)$/;"	f	class:PlainObjectBase
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE Index rows() const { return m_storage.rows(); }$/;"	f	class:PlainObjectBase
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^  static inline void run(MatrixTypeA& a, MatrixTypeB& b)$/;"	f	struct:internal::matrix_swap_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^  static void run(DenseBase<Derived>& _this, Index rows, Index cols)$/;"	f	struct:internal::conservative_resize_like_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^  static void run(DenseBase<Derived>& _this, Index size)$/;"	f	struct:internal::conservative_resize_like_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^  static void run(DenseBase<Derived>& _this, const DenseBase<OtherDerived>& other)$/;"	f	struct:internal::conservative_resize_like_impl
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    template<typename StrideType> struct StridedAlignedMapType { typedef Eigen::Map<Derived, Aligned, StrideType> type; };$/;"	t	struct:PlainObjectBase::StridedAlignedMapType
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    template<typename StrideType> struct StridedConstAlignedMapType { typedef Eigen::Map<const Derived, Aligned, StrideType> type; };$/;"	t	struct:PlainObjectBase::StridedConstAlignedMapType
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    template<typename StrideType> struct StridedConstMapType { typedef Eigen::Map<const Derived, Unaligned, StrideType> type; };$/;"	t	struct:PlainObjectBase::StridedConstMapType
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    template<typename StrideType> struct StridedMapType { typedef Eigen::Map<Derived, Unaligned, StrideType> type; };$/;"	t	struct:PlainObjectBase::StridedMapType
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void writePacket(Index index, const PacketScalar& x)$/;"	f	class:PlainObjectBase
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/PlainObjectBase.h	/^    EIGEN_STRONG_INLINE void writePacket(Index row, Index col, const PacketScalar& x)$/;"	f	class:PlainObjectBase
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    typedef Matrix<typename internal::scalar_product_traits<typename Lhs::Scalar, typename Rhs::Scalar>::ReturnType,1,1> Base;$/;"	t	class:GeneralProduct
Cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    Cols  = _Rhs::ColsAtCompileTime,$/;"	e	enum:internal::product_type::<anonymous>
Depth	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    Depth = EIGEN_SIZE_MIN_PREFER_FIXED(_Lhs::ColsAtCompileTime,$/;"	e	enum:internal::product_type::<anonymous>
EIGEN_PRODUCT_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	27;"	d
GeneralProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    GeneralProduct(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs)$/;"	f	class:GeneralProduct
GeneralProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    GeneralProduct(const Lhs& lhs, const Rhs& rhs)$/;"	f	class:GeneralProduct
GeneralProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^class GeneralProduct<Lhs, Rhs, GemvProduct>$/;"	c
GeneralProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^class GeneralProduct<Lhs, Rhs, InnerProduct>$/;"	c
GeneralProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^class GeneralProduct<Lhs, Rhs, OuterProduct>$/;"	c
Large	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^  Large = 2,$/;"	e
LargeThreshold	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    LargeThreshold = EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD$/;"	e	enum:internal::product_type::<anonymous>
LazyProductReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^struct LazyProductReturnType : public ProductReturnType<Lhs,Rhs,LazyCoeffBasedProductMode>$/;"	s
LhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^  typedef typename internal::nested<Lhs, Rhs::ColsAtCompileTime, typename internal::plain_matrix_type<Lhs>::type >::type LhsNested;$/;"	t	struct:ProductReturnType
LhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    typedef typename Lhs::Scalar LhsScalar;$/;"	t	class:GeneralProduct
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    typedef typename internal::conditional<int(Side)==OnTheRight,_LhsNested,_RhsNested>::type MatrixType;$/;"	t	class:GeneralProduct
MaxCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    MaxCols  = _Rhs::MaxColsAtCompileTime,$/;"	e	enum:internal::product_type::<anonymous>
MaxCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    cols_select = product_size_category<Cols,MaxCols>::value,$/;"	e	enum:internal::product_type::<anonymous>
MaxDepth	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    MaxDepth = EIGEN_SIZE_MIN_PREFER_FIXED(_Lhs::MaxColsAtCompileTime,$/;"	e	enum:internal::product_type::<anonymous>
MaxDepth	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    depth_select = product_size_category<Depth,MaxDepth>::value$/;"	e	enum:internal::product_type::<anonymous>
MaxRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    MaxRows  = _Lhs::MaxRowsAtCompileTime,$/;"	e	enum:internal::product_type::<anonymous>
MaxRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    rows_select = product_size_category<Rows,MaxRows>::value,$/;"	e	enum:internal::product_type::<anonymous>
ProductReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^struct ProductReturnType$/;"	s
ProductReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^struct ProductReturnType<Lhs,Rhs,CoeffBasedProductMode>$/;"	s
ProductReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^struct ProductReturnType<Lhs,Rhs,LazyCoeffBasedProductMode>$/;"	s
RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^  typedef typename internal::nested<Rhs, Lhs::RowsAtCompileTime, typename internal::plain_matrix_type<Rhs>::type >::type RhsNested;$/;"	t	struct:ProductReturnType
RhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    typedef typename Rhs::Scalar RhsScalar;$/;"	t	class:GeneralProduct
Rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    Rows  = _Lhs::RowsAtCompileTime,$/;"	e	enum:internal::product_type::<anonymous>
Side	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    enum { Side = Lhs::IsVectorAtCompileTime ? OnTheLeft : OnTheRight };$/;"	e	enum:GeneralProduct::<anonymous>
Small	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^  Small = 3$/;"	e
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^  typedef CoeffBasedProduct<LhsNested, RhsNested, EvalBeforeAssigningBit | EvalBeforeNestingBit> Type;$/;"	t	struct:ProductReturnType
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^  typedef CoeffBasedProduct<LhsNested, RhsNested, NestByRefBit> Type;$/;"	t	struct:ProductReturnType
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^  typedef GeneralProduct<Lhs\/*Nested*\/, Rhs\/*Nested*\/, ProductType> Type;$/;"	t	struct:ProductReturnType
_Lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^  typedef typename remove_all<Lhs>::type _Lhs;$/;"	t	struct:internal::product_type
_Rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^  typedef typename remove_all<Rhs>::type _Rhs;$/;"	t	struct:internal::product_type
cols_select	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    cols_select = product_size_category<Cols,MaxCols>::value,$/;"	e	enum:internal::product_type::<anonymous>
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^  EIGEN_STRONG_INLINE  Scalar* data() { eigen_internal_assert(false && "should never be called"); return 0; }$/;"	f	struct:internal::gemv_static_vector_if
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^  EIGEN_STRONG_INLINE Scalar* data() { return 0; }$/;"	f	struct:internal::gemv_static_vector_if
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^  EIGEN_STRONG_INLINE Scalar* data() { return m_data.array; }$/;"	f	struct:internal::gemv_static_vector_if
debug	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^  static void debug()$/;"	f	struct:internal::product_type
depth_select	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    depth_select = product_size_category<Depth,MaxDepth>::value$/;"	e	enum:internal::product_type::<anonymous>
gemv_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^struct gemv_selector<OnTheLeft,StorageOrder,BlasCompatible>$/;"	s	namespace:internal
gemv_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<> struct gemv_selector<OnTheRight,ColMajor,false>$/;"	s	namespace:internal
gemv_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<> struct gemv_selector<OnTheRight,ColMajor,true>$/;"	s	namespace:internal
gemv_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<> struct gemv_selector<OnTheRight,RowMajor,false>$/;"	s	namespace:internal
gemv_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<> struct gemv_selector<OnTheRight,RowMajor,true>$/;"	s	namespace:internal
gemv_static_vector_if	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^struct gemv_static_vector_if<Scalar,Size,Dynamic,true>$/;"	s	namespace:internal
gemv_static_vector_if	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^struct gemv_static_vector_if<Scalar,Size,MaxSize,false>$/;"	s	namespace:internal
gemv_static_vector_if	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^struct gemv_static_vector_if<Scalar,Size,MaxSize,true>$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^namespace internal {$/;"	n
is_large	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^  enum { is_large = MaxSize == Dynamic ||$/;"	e	enum:internal::product_size_category::<anonymous>
lazyProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const$/;"	f	class:MatrixBase
m_data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^  internal::plain_array<Scalar,EIGEN_SIZE_MIN_PREFER_FIXED(Size,MaxSize),0> m_data;$/;"	m	struct:internal::gemv_static_vector_if
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const$/;"	f	class:MatrixBase
operator const typename Base::Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    operator const typename Base::Scalar() const {$/;"	f	class:GeneralProduct
outer_product_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<> struct outer_product_selector<ColMajor> {$/;"	s	namespace:internal
outer_product_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<> struct outer_product_selector<RowMajor> {$/;"	s	namespace:internal
product_size_category	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<int Size, int MaxSize> struct product_size_category$/;"	s	namespace:internal
product_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<typename Lhs, typename Rhs> struct product_type$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<1,    1,    1>      { enum { ret = InnerProduct }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<1,    Large,Large>  { enum { ret = GemvProduct }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<1,    Large,Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<1,    Small,Large>  { enum { ret = CoeffBasedProductMode }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<1,    Small,Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Large, Small, 1>    { enum { ret = LazyCoeffBasedProductMode }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Large,1,    Large>  { enum { ret = GemvProduct }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Large,1,    Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Large,Large,Large>  { enum { ret = GemmProduct }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Large,Large,Small>  { enum { ret = GemmProduct }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Large,Small,Large>  { enum { ret = GemmProduct }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Large,Small,Small>  { enum { ret = GemmProduct }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Small, Large, 1>    { enum { ret = LazyCoeffBasedProductMode }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Small, Small, 1>    { enum { ret = LazyCoeffBasedProductMode }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Small,1,    Large>  { enum { ret = CoeffBasedProductMode }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Small,1,    Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Small,Large,Large>  { enum { ret = GemmProduct }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Small,Large,Small>  { enum { ret = GemmProduct }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Small,Small,Large>  { enum { ret = GemmProduct }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Small,Small,Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<int Depth>     struct product_type_selector<1,    1,    Depth>  { enum { ret = InnerProduct }; };$/;"	s	namespace:internal
product_type_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<int M, int N>  struct product_type_selector<M,N,1>              { enum { ret = OuterProduct }; };$/;"	s	namespace:internal
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<1,    1,    1>      { enum { ret = InnerProduct }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<1,    Large,Large>  { enum { ret = GemvProduct }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<1,    Large,Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<1,    Small,Large>  { enum { ret = CoeffBasedProductMode }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<1,    Small,Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Large, Small, 1>    { enum { ret = LazyCoeffBasedProductMode }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Large,1,    Large>  { enum { ret = GemvProduct }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Large,1,    Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Large,Large,Large>  { enum { ret = GemmProduct }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Large,Large,Small>  { enum { ret = GemmProduct }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Large,Small,Large>  { enum { ret = GemmProduct }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Large,Small,Small>  { enum { ret = GemmProduct }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Small, Large, 1>    { enum { ret = LazyCoeffBasedProductMode }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Small, Small, 1>    { enum { ret = LazyCoeffBasedProductMode }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Small,1,    Large>  { enum { ret = CoeffBasedProductMode }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Small,1,    Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Small,Large,Large>  { enum { ret = GemmProduct }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Small,Large,Small>  { enum { ret = GemmProduct }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Small,Small,Large>  { enum { ret = GemmProduct }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<>              struct product_type_selector<Small,Small,Small>  { enum { ret = CoeffBasedProductMode }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<int Depth>     struct product_type_selector<1,    1,    Depth>  { enum { ret = InnerProduct }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^template<int M, int N>  struct product_type_selector<M,N,1>              { enum { ret = OuterProduct }; };$/;"	e	enum:internal::product_type_selector::<anonymous>
rows_select	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    rows_select = product_size_category<Rows,MaxRows>::value,$/;"	e	enum:internal::product_type::<anonymous>
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^  static EIGEN_DONT_INLINE void run(const ProductType& prod, Dest& dest, typename ProductType::Scalar alpha) {$/;"	f	struct:internal::outer_product_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^  static inline void run(const ProductType& prod, Dest& dest, typename ProductType::Scalar alpha)$/;"	f	struct:internal::gemv_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^  static void run(const ProductType& prod, Dest& dest, typename ProductType::Scalar alpha)$/;"	f	struct:internal::gemv_selector
scaleAndAddTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    template<typename Dest> void scaleAndAddTo(Dest& dest, Scalar alpha) const$/;"	f	class:GeneralProduct
scaleAndAddTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    template<typename Dest> void scaleAndAddTo(Dest& dst, Scalar alpha) const$/;"	f	class:GeneralProduct
selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^  typedef product_type_selector<rows_select, cols_select, depth_select> selector;$/;"	t	struct:internal::product_type
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^struct traits<GeneralProduct<Lhs,Rhs,GemvProduct> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^struct traits<GeneralProduct<Lhs,Rhs,InnerProduct> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^struct traits<GeneralProduct<Lhs,Rhs,OuterProduct> >$/;"	s	namespace:internal
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^         value = is_large  ? Large$/;"	e	enum:internal::product_size_category::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    cols_select = product_size_category<Cols,MaxCols>::value,$/;"	e	class:internal::product_type::<anonymous>::MaxCols
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    depth_select = product_size_category<Depth,MaxDepth>::value$/;"	e	class:internal::product_type::<anonymous>::MaxDepth
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    rows_select = product_size_category<Rows,MaxRows>::value,$/;"	e	class:internal::product_type::<anonymous>::MaxRows
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Product.h	/^    value = selector::ret$/;"	e	enum:internal::product_type::<anonymous>
ActualLhsType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    typedef typename LhsBlasTraits::DirectLinearAccessType ActualLhsType;$/;"	t	class:ProductBase
ActualRhsType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    typedef typename RhsBlasTraits::DirectLinearAccessType ActualRhsType;$/;"	t	class:ProductBase
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^                       typename NestedProduct::_RhsNested> Base;$/;"	t	class:ScaledProduct
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    typedef MatrixBase<Derived> Base;$/;"	t	class:ProductBase
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    CoeffReadCost = 0 \/\/ FIXME why is it needed ?$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    ColsAtCompileTime = traits<Rhs>::ColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
EIGEN_PRODUCTBASE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	26;"	d
EIGEN_PRODUCT_PUBLIC_INTERFACE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	59;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    Flags = (MaxRowsAtCompileTime==1 ? RowMajorBit : 0)$/;"	e	enum:internal::traits::<anonymous>
FullyLazyCoeffBaseProductType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    typedef CoeffBasedProduct<LhsNested, RhsNested, 0> FullyLazyCoeffBaseProductType;$/;"	t	class:ProductBase
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^                                         typename traits<Rhs>::Index>::type Index;$/;"	t	struct:internal::traits
Lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^  typedef typename remove_all<_Lhs>::type Lhs;$/;"	t	struct:internal::traits
LhsBlasTraits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    typedef internal::blas_traits<_LhsNested> LhsBlasTraits;$/;"	t	class:ProductBase
LhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    typedef typename Lhs::Nested LhsNested;$/;"	t	class:ProductBase
LhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    typedef typename internal::traits<Lhs>::Scalar LhsScalar;$/;"	t	class:ProductBase
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    MaxColsAtCompileTime = traits<Rhs>::MaxColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    MaxRowsAtCompileTime = traits<Lhs>::MaxRowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
PlainObject	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    typedef typename Base::PlainObject PlainObject;$/;"	t	class:ProductBase
PlainObject	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    typedef typename Base::PlainObject PlainObject;$/;"	t	class:ScaledProduct
ProductBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    ProductBase(const Lhs& lhs, const Rhs& rhs)$/;"	f	class:ProductBase
ProductBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^class ProductBase : public MatrixBase<Derived>$/;"	c
Rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^  typedef typename remove_all<_Rhs>::type Rhs;$/;"	t	struct:internal::traits
RhsBlasTraits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    typedef internal::blas_traits<_RhsNested> RhsBlasTraits;$/;"	t	class:ProductBase
RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    typedef typename Rhs::Nested RhsNested;$/;"	t	class:ProductBase
RhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    typedef typename internal::traits<Rhs>::Scalar RhsScalar;$/;"	t	class:ProductBase
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    RowsAtCompileTime = traits<Lhs>::RowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    typedef typename Base::Scalar Scalar;$/;"	t	class:ScaledProduct
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^  typedef typename scalar_product_traits<typename Lhs::Scalar, typename Rhs::Scalar>::ReturnType Scalar;$/;"	t	struct:internal::traits
ScaledProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    ScaledProduct(const NestedProduct& prod, Scalar x)$/;"	f	class:ScaledProduct
ScaledProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^class ScaledProduct$/;"	c
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^                                           typename traits<Rhs>::StorageKind>::ret StorageKind;$/;"	t	struct:internal::traits
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^  typedef typename traits<NestedProduct>::StorageKind StorageKind;$/;"	t	struct:internal::traits
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:internal::traits
_ActualLhsType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    typedef typename internal::remove_all<ActualLhsType>::type _ActualLhsType;$/;"	t	class:ProductBase
_ActualRhsType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    typedef typename internal::remove_all<ActualRhsType>::type _ActualRhsType;$/;"	t	class:ProductBase
_LhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    typedef typename internal::remove_all<LhsNested>::type _LhsNested;$/;"	t	class:ProductBase
_RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    typedef typename internal::remove_all<RhsNested>::type _RhsNested;$/;"	t	class:ProductBase
addTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    inline void addTo(Dest& dst) const { scaleAndAddTo(dst,1); }$/;"	f	class:ProductBase
addTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    inline void addTo(Dest& dst) const { scaleAndAddTo(dst,m_alpha); }$/;"	f	class:ScaledProduct
alpha	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    const Scalar& alpha() const { return m_alpha; }$/;"	f	class:ScaledProduct
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    typename Base::CoeffReturnType coeff(Index i) const$/;"	f	class:ProductBase
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    typename Base::CoeffReturnType coeff(Index row, Index col) const$/;"	f	class:ProductBase
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    const Scalar& coeffRef(Index i) const$/;"	f	class:ProductBase
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    const Scalar& coeffRef(Index row, Index col) const$/;"	f	class:ProductBase
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    inline Index cols() const { return m_rhs.cols(); }$/;"	f	class:ProductBase
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    const Diagonal<FullyLazyCoeffBaseProductType,Dynamic> diagonal(Index index) const$/;"	f	class:ProductBase
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    const Diagonal<FullyLazyCoeffBaseProductType,Index> diagonal() const$/;"	f	class:ProductBase
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    const Diagonal<const FullyLazyCoeffBaseProductType,0> diagonal() const$/;"	f	class:ProductBase
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    inline void evalTo(Dest& dst) const { dst.setZero(); scaleAndAddTo(dst,Scalar(1)); }$/;"	f	class:ProductBase
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    inline void evalTo(Dest& dst) const { dst.setZero(); scaleAndAddTo(dst,m_alpha); }$/;"	f	class:ScaledProduct
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^namespace internal {$/;"	n
lazyAssign	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^Derived& MatrixBase<Derived>::lazyAssign(const ProductBase<ProductDerived, Lhs,Rhs>& other)$/;"	f	class:MatrixBase
lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    const _LhsNested& lhs() const { return m_lhs; }$/;"	f	class:ProductBase
m_alpha	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    Scalar m_alpha;$/;"	m	class:ScaledProduct
m_lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    const LhsNested m_lhs;$/;"	m	class:ProductBase
m_prod	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    const NestedProduct& m_prod;$/;"	m	class:ScaledProduct
m_result	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    mutable PlainObject m_result;$/;"	m	class:ProductBase
m_rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    const RhsNested m_rhs;$/;"	m	class:ProductBase
nested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^struct nested<GeneralProduct<Lhs,Rhs,Mode>, N, PlainObject>$/;"	s	namespace:internal
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^operator*(const ProductBase<Derived,Lhs,Rhs>& prod, typename Derived::RealScalar x)$/;"	f
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^operator*(const ProductBase<Derived,Lhs,Rhs>& prod, typename Derived::Scalar x)$/;"	f
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^operator*(typename Derived::RealScalar x,const ProductBase<Derived,Lhs,Rhs>& prod)$/;"	f
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^operator*(typename Derived::Scalar x,const ProductBase<Derived,Lhs,Rhs>& prod)$/;"	f
operator const PlainObject&	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    operator const PlainObject& () const$/;"	f	class:ProductBase
rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    const _RhsNested& rhs() const { return m_rhs; }$/;"	f	class:ProductBase
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    inline Index rows() const { return m_lhs.rows(); }$/;"	f	class:ProductBase
scaleAndAddTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    inline void scaleAndAddTo(Dest& dst,Scalar alpha) const { derived().scaleAndAddTo(dst,alpha); }$/;"	f	class:ProductBase
scaleAndAddTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    inline void scaleAndAddTo(Dest& dst,Scalar alpha) const { m_prod.derived().scaleAndAddTo(dst,alpha); }$/;"	f	class:ScaledProduct
subTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    inline void subTo(Dest& dst) const { scaleAndAddTo(dst,-1); }$/;"	f	class:ProductBase
subTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^    inline void subTo(Dest& dst) const { scaleAndAddTo(dst,-m_alpha); }$/;"	f	class:ScaledProduct
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^struct traits<ProductBase<Derived,_Lhs,_Rhs> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^struct traits<ScaledProduct<NestedProduct> >$/;"	s	namespace:internal
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ProductBase.h	/^  typedef PlainObject const& type;$/;"	t	struct:internal::nested
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Random.h	/^{ enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = false, IsRepeatable = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
EIGEN_RANDOM_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Random.h	26;"	d
IsRepeatable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Random.h	/^{ enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = false, IsRepeatable = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Random.h	/^{ enum { Cost = 5 * NumTraits<Scalar>::MulCost, PacketAccess = false, IsRepeatable = false }; };$/;"	e	enum:internal::functor_traits::<anonymous>
Random	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Random.h	/^DenseBase<Derived>::Random()$/;"	f	class:DenseBase
Random	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Random.h	/^DenseBase<Derived>::Random(Index rows, Index cols)$/;"	f	class:DenseBase
Random	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Random.h	/^DenseBase<Derived>::Random(Index size)$/;"	f	class:DenseBase
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Random.h	/^struct functor_traits<scalar_random_op<Scalar> >$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Random.h	/^namespace internal {$/;"	n
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Random.h	/^  inline const Scalar operator() (Index, Index = 0) const { return random<Scalar>(); }$/;"	f	struct:internal::scalar_random_op
scalar_random_op	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Random.h	/^template<typename Scalar> struct scalar_random_op {$/;"	s	namespace:internal
setRandom	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Random.h	/^PlainObjectBase<Derived>::setRandom(Index rows, Index cols)$/;"	f	class:PlainObjectBase
setRandom	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Random.h	/^PlainObjectBase<Derived>::setRandom(Index size)$/;"	f	class:PlainObjectBase
setRandom	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Random.h	/^inline Derived& DenseBase<Derived>::setRandom()$/;"	f	class:DenseBase
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    Cost = (  Derived::SizeAtCompileTime == Dynamic$/;"	e	enum:internal::redux_traits::<anonymous>
EIGEN_REDUX_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	27;"	d
HalfLength	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    HalfLength = Length\/2$/;"	e	enum:internal::redux_novec_unroller::<anonymous>
HalfLength	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    HalfLength = Length\/2$/;"	e	enum:internal::redux_vec_unroller::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^  typedef typename Derived::Index Index;$/;"	t	struct:internal::redux_impl
InnerMaxSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    InnerMaxSize = int(Derived::IsRowMajor)$/;"	e	enum:internal::redux_traits::<anonymous>
MayLinearVectorize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    MayLinearVectorize = MightVectorize && (int(Derived::Flags)&LinearAccessBit),$/;"	e	enum:internal::redux_traits::<anonymous>
MaySliceVectorize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    MaySliceVectorize  = MightVectorize && int(InnerMaxSize)>=3*PacketSize$/;"	e	enum:internal::redux_traits::<anonymous>
MightVectorize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    MightVectorize = (int(Derived::Flags)&ActualPacketAccessBit)$/;"	e	enum:internal::redux_traits::<anonymous>
PacketScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^  typedef typename packet_traits<Scalar>::type PacketScalar;$/;"	t	struct:internal::redux_impl
PacketScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^  typedef typename packet_traits<Scalar>::type PacketScalar;$/;"	t	struct:internal::redux_vec_unroller
PacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    PacketSize = packet_traits<Scalar>::size,$/;"	e	enum:internal::redux_impl::<anonymous>
PacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    PacketSize = packet_traits<typename Derived::Scalar>::size,$/;"	e	enum:internal::redux_traits::<anonymous>
PacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    PacketSize = packet_traits<typename Derived::Scalar>::size,$/;"	e	enum:internal::redux_vec_unroller::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^  typedef typename Derived::Scalar Scalar;$/;"	t	struct:internal::redux_impl
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^  typedef typename Derived::Scalar Scalar;$/;"	t	struct:internal::redux_novec_unroller
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^  typedef typename Derived::Scalar Scalar;$/;"	t	struct:internal::redux_vec_unroller
Size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    Size = Derived::SizeAtCompileTime,$/;"	e	enum:internal::redux_impl::<anonymous>
Traversal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    Traversal = int(MayLinearVectorize) ? int(LinearVectorizedTraversal)$/;"	e	enum:internal::redux_traits::<anonymous>
Unrolling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    Unrolling = Cost != Dynamic && Cost <= UnrollingLimit$/;"	e	enum:internal::redux_traits::<anonymous>
UnrollingLimit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    UnrollingLimit = EIGEN_UNROLLING_LIMIT * (int(Traversal) == int(DefaultTraversal) ? 1 : int(PacketSize))$/;"	e	enum:internal::redux_traits::<anonymous>
VectorizedSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    VectorizedSize = (Size \/ PacketSize) * PacketSize$/;"	e	enum:internal::redux_impl::<anonymous>
alignment	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    alignment = (Derived::Flags & AlignedBit) ? Aligned : Unaligned$/;"	e	enum:internal::redux_vec_unroller::<anonymous>
index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    index = Start * packet_traits<typename Derived::Scalar>::size,$/;"	e	enum:internal::redux_vec_unroller::<anonymous>
inner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    inner = Start % Derived::InnerSizeAtCompileTime$/;"	e	enum:internal::redux_novec_unroller::<anonymous>
inner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    inner = index % int(Derived::InnerSizeAtCompileTime),$/;"	e	enum:internal::redux_vec_unroller::<anonymous>
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^namespace internal {$/;"	n
maxCoeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^DenseBase<Derived>::maxCoeff() const$/;"	f	class:DenseBase
mean	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^DenseBase<Derived>::mean() const$/;"	f	class:DenseBase
minCoeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^DenseBase<Derived>::minCoeff() const$/;"	f	class:DenseBase
outer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    outer = Start \/ Derived::InnerSizeAtCompileTime,$/;"	e	enum:internal::redux_novec_unroller::<anonymous>
outer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^    outer = index \/ int(Derived::InnerSizeAtCompileTime),$/;"	e	enum:internal::redux_vec_unroller::<anonymous>
prod	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^DenseBase<Derived>::prod() const$/;"	f	class:DenseBase
redux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^DenseBase<Derived>::redux(const Func& func) const$/;"	f	class:DenseBase
redux_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^struct redux_impl<Func, Derived, DefaultTraversal, NoUnrolling>$/;"	s	namespace:internal
redux_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^struct redux_impl<Func, Derived, LinearVectorizedTraversal, CompleteUnrolling>$/;"	s	namespace:internal
redux_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^struct redux_impl<Func, Derived, LinearVectorizedTraversal, NoUnrolling>$/;"	s	namespace:internal
redux_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^struct redux_impl<Func, Derived, SliceVectorizedTraversal, NoUnrolling>$/;"	s	namespace:internal
redux_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^struct redux_impl<Func,Derived, DefaultTraversal, CompleteUnrolling>$/;"	s	namespace:internal
redux_novec_unroller	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^struct redux_novec_unroller$/;"	s	namespace:internal
redux_novec_unroller	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^struct redux_novec_unroller<Func, Derived, Start, 0>$/;"	s	namespace:internal
redux_novec_unroller	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^struct redux_novec_unroller<Func, Derived, Start, 1>$/;"	s	namespace:internal
redux_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^struct redux_traits$/;"	s	namespace:internal
redux_vec_unroller	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^struct redux_vec_unroller$/;"	s	namespace:internal
redux_vec_unroller	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^struct redux_vec_unroller<Func, Derived, Start, 1>$/;"	s	namespace:internal
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^  EIGEN_STRONG_INLINE static PacketScalar run(const Derived &mat, const Func& func)$/;"	f	struct:internal::redux_vec_unroller
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^  EIGEN_STRONG_INLINE static PacketScalar run(const Derived &mat, const Func&)$/;"	f	struct:internal::redux_vec_unroller
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^  EIGEN_STRONG_INLINE static Scalar run(const Derived &mat, const Func& func)$/;"	f	struct:internal::redux_novec_unroller
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^  EIGEN_STRONG_INLINE static Scalar run(const Derived &mat, const Func&)$/;"	f	struct:internal::redux_novec_unroller
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^  EIGEN_STRONG_INLINE static Scalar run(const Derived& mat, const Func& func)$/;"	f	struct:internal::redux_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^  EIGEN_STRONG_INLINE static Scalar run(const Derived&, const Func&) { return Scalar(); }$/;"	f	struct:internal::redux_novec_unroller
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^  static EIGEN_STRONG_INLINE Scalar run(const Derived& mat, const Func& func)$/;"	f	struct:internal::redux_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^  static Scalar run(const Derived& mat, const Func& func)$/;"	f	struct:internal::redux_impl
sum	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^DenseBase<Derived>::sum() const$/;"	f	class:DenseBase
trace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Redux.h	/^MatrixBase<Derived>::trace() const$/;"	f	class:MatrixBase
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^    typedef typename internal::dense_xpr_base<Replicate>::type Base;$/;"	t	class:Replicate
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^    CoeffReadCost = _MatrixTypeNested::CoeffReadCost$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^    ColsAtCompileTime = ColFactor==Dynamic || int(MatrixType::ColsAtCompileTime)==Dynamic$/;"	e	enum:internal::traits::<anonymous>
EIGEN_REPLICATE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	26;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^    Flags = (_MatrixTypeNested::Flags & HereditaryBits & ~RowMajorBit) | (IsRowMajor ? RowMajorBit : 0),$/;"	e	enum:internal::traits::<anonymous>
IsRowMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^    IsRowMajor = MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1 ? 1$/;"	e	enum:internal::traits::<anonymous>
MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^  typedef typename nested<MatrixType>::type MatrixTypeNested;$/;"	t	struct:internal::traits
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^    MaxColsAtCompileTime = ColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^    MaxRowsAtCompileTime = RowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
Replicate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^    inline Replicate(const OriginalMatrixType& matrix, int rowFactor, int colFactor)$/;"	f	class:Replicate
Replicate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^    inline explicit Replicate(const OriginalMatrixType& matrix)$/;"	f	class:Replicate
Replicate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^template<typename MatrixType,int RowFactor,int ColFactor> class Replicate$/;"	c
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^    RowsAtCompileTime = RowFactor==Dynamic || int(MatrixType::RowsAtCompileTime)==Dynamic$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^  typedef typename MatrixType::Scalar Scalar;$/;"	t	struct:internal::traits
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^  typedef typename traits<MatrixType>::StorageKind StorageKind;$/;"	t	struct:internal::traits
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^  typedef typename traits<MatrixType>::XprKind XprKind;$/;"	t	struct:internal::traits
_MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^  typedef typename remove_reference<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	struct:internal::traits
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^    inline Scalar coeff(Index row, Index col) const$/;"	f	class:Replicate
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^    inline Index cols() const { return m_matrix.cols() * m_colFactor.value(); }$/;"	f	class:Replicate
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^namespace internal {$/;"	n
m_colFactor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^    const internal::variable_if_dynamic<Index, ColFactor> m_colFactor;$/;"	m	class:Replicate
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^    const typename MatrixType::Nested m_matrix;$/;"	m	class:Replicate
m_rowFactor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^    const internal::variable_if_dynamic<Index, RowFactor> m_rowFactor;$/;"	m	class:Replicate
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^    inline PacketScalar packet(Index row, Index col) const$/;"	f	class:Replicate
replicate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^DenseBase<Derived>::replicate() const$/;"	f	class:DenseBase
replicate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^DenseBase<Derived>::replicate(Index rowFactor,Index colFactor) const$/;"	f	class:DenseBase
replicate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^VectorwiseOp<ExpressionType,Direction>::replicate(Index factor) const$/;"	f	class:VectorwiseOp
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^    inline Index rows() const { return m_matrix.rows() * m_rowFactor.value(); }$/;"	f	class:Replicate
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Replicate.h	/^struct traits<Replicate<MatrixType,RowFactor,ColFactor> >$/;"	s	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	/^    typedef typename internal::dense_xpr_base<ReturnByValue>::type Base;$/;"	t	class:ReturnByValue
EIGEN_RETURNBYVALUE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	27;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	/^    Flags = (traits<typename traits<Derived>::ReturnType>::Flags$/;"	e	enum:internal::traits::<anonymous>
ReturnByValue	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	/^template<typename Derived> class ReturnByValue$/;"	c
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	/^    typedef typename internal::traits<Derived>::ReturnType ReturnType;$/;"	t	class:ReturnByValue
Unusable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	/^      Unusable(const Unusable&) {}$/;"	f	class:ReturnByValue::Unusable
Unusable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	/^    class Unusable{$/;"	c	class:ReturnByValue
Unusable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	79;"	d
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	/^    const Unusable& coeff(Index) const { return *reinterpret_cast<const Unusable*>(this); }$/;"	f	class:ReturnByValue
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	/^    const Unusable& coeff(Index,Index) const { return *reinterpret_cast<const Unusable*>(this); }$/;"	f	class:ReturnByValue
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	/^    Unusable& coeffRef(Index) { return *reinterpret_cast<Unusable*>(this); }$/;"	f	class:ReturnByValue
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	/^    Unusable& coeffRef(Index,Index) { return *reinterpret_cast<Unusable*>(this); }$/;"	f	class:ReturnByValue
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	/^    inline Index cols() const { return static_cast<const Derived*>(this)->cols(); }$/;"	f	class:ReturnByValue
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	/^    inline void evalTo(Dest& dst) const$/;"	f	class:ReturnByValue
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	/^namespace internal {$/;"	n
nested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	/^struct nested<ReturnByValue<Derived>, n, PlainObject>$/;"	s	namespace:internal
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	/^      Unusable& operator=(const Unusable&) {return *this;}$/;"	f	class:ReturnByValue::Unusable
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	/^Derived& DenseBase<Derived>::operator=(const ReturnByValue<OtherDerived>& other)$/;"	f	class:DenseBase
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	/^    inline Index rows() const { return static_cast<const Derived*>(this)->rows(); }$/;"	f	class:ReturnByValue
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	/^struct traits<ReturnByValue<Derived> >$/;"	s	namespace:internal
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/ReturnByValue.h	/^  typedef typename traits<Derived>::ReturnType type;$/;"	t	struct:internal::nested
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    typedef typename internal::dense_xpr_base<Reverse>::type Base;$/;"	t	class:Reverse
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    CoeffReadCost = _MatrixTypeNested::CoeffReadCost$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
EIGEN_REVERSE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	28;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    Flags = int(_MatrixTypeNested::Flags) & (HereditaryBits | LvalueBit | PacketAccessBit | LinearAccess),$/;"	e	enum:internal::traits::<anonymous>
IsColMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^      IsColMajor = !IsRowMajor,$/;"	e	enum:Reverse::<anonymous>
LinearAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    LinearAccess = ( (Direction==BothDirections) && (int(_MatrixTypeNested::Flags)&PacketAccessBit) )$/;"	e	enum:internal::traits::<anonymous>
MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^  typedef typename nested<MatrixType>::type MatrixTypeNested;$/;"	t	struct:internal::traits
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
OffsetCol	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^      OffsetCol  = ReverseCol && IsRowMajor ? PacketSize : 1,$/;"	e	enum:Reverse::<anonymous>
OffsetRow	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^      OffsetRow  = ReverseRow && IsColMajor ? PacketSize : 1,$/;"	e	enum:Reverse::<anonymous>
PacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^      PacketSize = internal::packet_traits<Scalar>::size,$/;"	e	enum:Reverse::<anonymous>
Reverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    inline Reverse(const MatrixType& matrix) : m_matrix(matrix) { }$/;"	f	class:Reverse
Reverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^template<typename MatrixType, int Direction> class Reverse$/;"	c
ReverseCol	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^      ReverseCol = (Direction == Horizontal) || (Direction == BothDirections),$/;"	e	enum:Reverse::<anonymous>
ReversePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^      ReversePacket = (Direction == BothDirections)$/;"	e	enum:Reverse::<anonymous>
ReverseRow	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^      ReverseRow = (Direction == Vertical)   || (Direction == BothDirections),$/;"	e	enum:Reverse::<anonymous>
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^  typedef typename MatrixType::Scalar Scalar;$/;"	t	struct:internal::traits
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^  typedef typename traits<MatrixType>::StorageKind StorageKind;$/;"	t	struct:internal::traits
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^  typedef typename traits<MatrixType>::XprKind XprKind;$/;"	t	struct:internal::traits
_MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^  typedef typename remove_reference<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	struct:internal::traits
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    inline CoeffReturnType coeff(Index index) const$/;"	f	class:Reverse
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    inline CoeffReturnType coeff(Index row, Index col) const$/;"	f	class:Reverse
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    inline Scalar& coeffRef(Index index)$/;"	f	class:Reverse
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:Reverse
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:Reverse
innerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    inline Index innerStride() const$/;"	f	class:Reverse
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^namespace internal {$/;"	n
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    const typename MatrixType::Nested m_matrix;$/;"	m	class:Reverse
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    inline Scalar& operator()(Index index)$/;"	f	class:Reverse
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    inline Scalar& operator()(Index row, Index col)$/;"	f	class:Reverse
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    inline const PacketScalar packet(Index index) const$/;"	f	class:Reverse
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    inline const PacketScalar packet(Index row, Index col) const$/;"	f	class:Reverse
reverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^DenseBase<Derived>::reverse() const$/;"	f	class:DenseBase
reverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^DenseBase<Derived>::reverse()$/;"	f	class:DenseBase
reverseInPlace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^inline void DenseBase<Derived>::reverseInPlace()$/;"	f	class:DenseBase
reverse_packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    typedef internal::reverse_packet_cond<PacketScalar,ReversePacket> reverse_packet;$/;"	t	class:Reverse
reverse_packet_cond	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^template<typename PacketScalar, bool ReversePacket> struct reverse_packet_cond$/;"	s	namespace:internal
reverse_packet_cond	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^template<typename PacketScalar> struct reverse_packet_cond<PacketScalar,false>$/;"	s	namespace:internal
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:Reverse
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^  static inline PacketScalar run(const PacketScalar& x) { return preverse(x); }$/;"	f	struct:internal::reverse_packet_cond
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^  static inline PacketScalar run(const PacketScalar& x) { return x; }$/;"	f	struct:internal::reverse_packet_cond
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^struct traits<Reverse<MatrixType, Direction> >$/;"	s	namespace:internal
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    inline void writePacket(Index index, const PacketScalar& x)$/;"	f	class:Reverse
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Reverse.h	/^    inline void writePacket(Index row, Index col, const PacketScalar& x)$/;"	f	class:Reverse
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^    typedef typename internal::dense_xpr_base<Select>::type Base;$/;"	t	class:Select
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^    CoeffReadCost = traits<typename remove_all<ConditionMatrixNested>::type>::CoeffReadCost$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^    ColsAtCompileTime = ConditionMatrixType::ColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
ConditionMatrixNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^  typedef typename ConditionMatrixType::Nested ConditionMatrixNested;$/;"	t	struct:internal::traits
EIGEN_SELECT_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	26;"	d
ElseMatrixNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^  typedef typename ElseMatrixType::Nested ElseMatrixNested;$/;"	t	struct:internal::traits
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^    Flags = (unsigned int)ThenMatrixType::Flags & ElseMatrixType::Flags & HereditaryBits,$/;"	e	enum:internal::traits::<anonymous>
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^    MaxColsAtCompileTime = ConditionMatrixType::MaxColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^    MaxRowsAtCompileTime = ConditionMatrixType::MaxRowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^    RowsAtCompileTime = ConditionMatrixType::RowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^  typedef typename traits<ThenMatrixType>::Scalar Scalar;$/;"	t	struct:internal::traits
Select	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^    Select(const ConditionMatrixType& conditionMatrix,$/;"	f	class:Select
Select	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^class Select : internal::no_assignment_operator,$/;"	c
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^  typedef Dense StorageKind;$/;"	t	struct:internal::traits
ThenMatrixNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^  typedef typename ThenMatrixType::Nested ThenMatrixNested;$/;"	t	struct:internal::traits
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^  typedef typename traits<ThenMatrixType>::XprKind XprKind;$/;"	t	struct:internal::traits
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^    const Scalar coeff(Index i) const$/;"	f	class:Select
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^    const Scalar coeff(Index i, Index j) const$/;"	f	class:Select
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^    Index cols() const { return m_condition.cols(); }$/;"	f	class:Select
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^namespace internal {$/;"	n
m_condition	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^    const typename ConditionMatrixType::Nested m_condition;$/;"	m	class:Select
m_else	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^    const typename ElseMatrixType::Nested m_else;$/;"	m	class:Select
m_then	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^    const typename ThenMatrixType::Nested m_then;$/;"	m	class:Select
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^    Index rows() const { return m_condition.rows(); }$/;"	f	class:Select
select	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^DenseBase<Derived>::select(const DenseBase<ThenDerived>& thenMatrix,$/;"	f	class:DenseBase
select	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^DenseBase<Derived>::select(typename ElseDerived::Scalar thenScalar,$/;"	f	class:DenseBase
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Select.h	/^struct traits<Select<ConditionMatrixType, ThenMatrixType, ElseMatrixType> >$/;"	s	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    typedef TriangularBase<SelfAdjointView> Base;$/;"	t	class:SelfAdjointView
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    CoeffReadCost = MatrixTypeNestedCleaned::CoeffReadCost$/;"	e	enum:internal::traits::<anonymous>
DenseMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^  typedef typename MatrixType::PlainObject DenseMatrixType;$/;"	t	struct:internal::traits
EIGEN_SELFADJOINTMATRIX_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	26;"	d
EigenvaluesReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    typedef Matrix<RealScalar, internal::traits<MatrixType>::ColsAtCompileTime, 1> EigenvaluesReturnType;$/;"	t	class:SelfAdjointView
ExpressionType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^  typedef MatrixType ExpressionType;$/;"	t	struct:internal::traits
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    Flags =  MatrixTypeNestedCleaned::Flags & (HereditaryBits)$/;"	e	enum:internal::traits::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:SelfAdjointView
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^  typedef typename Derived1::Index Index;$/;"	t	struct:internal::triangular_assignment_selector
MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    typedef typename internal::traits<SelfAdjointView>::MatrixTypeNested MatrixTypeNested;$/;"	t	class:SelfAdjointView
MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^  typedef typename nested<MatrixType>::type MatrixTypeNested;$/;"	t	struct:internal::traits
MatrixTypeNestedCleaned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    typedef typename internal::traits<SelfAdjointView>::MatrixTypeNestedCleaned MatrixTypeNestedCleaned;$/;"	t	class:SelfAdjointView
MatrixTypeNestedCleaned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^  typedef typename remove_all<MatrixTypeNested>::type MatrixTypeNestedCleaned;$/;"	t	struct:internal::traits
Mode	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^      Mode = internal::traits<SelfAdjointView>::Mode$/;"	e	enum:SelfAdjointView::<anonymous>
Mode	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    Mode = UpLo | SelfAdjoint,$/;"	e	enum:internal::traits::<anonymous>
PlainObject	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    typedef typename MatrixType::PlainObject PlainObject;$/;"	t	class:SelfAdjointView
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:SelfAdjointView
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    typedef typename internal::traits<SelfAdjointView>::Scalar Scalar; $/;"	t	class:SelfAdjointView
SelfAdjointView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    inline SelfAdjointView(const MatrixType& matrix) : m_matrix(matrix)$/;"	f	class:SelfAdjointView
SelfAdjointView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^template<typename MatrixType, unsigned int UpLo> class SelfAdjointView$/;"	c
_expression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    const MatrixTypeNestedCleaned& _expression() const { return m_matrix; }$/;"	f	class:SelfAdjointView
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    inline Scalar coeff(Index row, Index col) const$/;"	f	class:SelfAdjointView
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:SelfAdjointView
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    col = (UnrollCount-1) \/ Derived1::RowsAtCompileTime,$/;"	e	enum:internal::triangular_assignment_selector::<anonymous>
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:SelfAdjointView
innerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    inline Index innerStride() const { return m_matrix.innerStride(); }$/;"	f	class:SelfAdjointView
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^namespace internal {$/;"	n
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    const MatrixTypeNested m_matrix;$/;"	m	class:SelfAdjointView
nestedExpression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    MatrixTypeNestedCleaned& nestedExpression() { return *const_cast<MatrixTypeNestedCleaned*>(&m_matrix); }$/;"	f	class:SelfAdjointView
nestedExpression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    const MatrixTypeNestedCleaned& nestedExpression() const { return m_matrix; }$/;"	f	class:SelfAdjointView
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    operator*(const MatrixBase<OtherDerived>& lhs, const SelfAdjointView& rhs)$/;"	f	class:SelfAdjointView
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    operator*(const MatrixBase<OtherDerived>& rhs) const$/;"	f	class:SelfAdjointView
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    SelfAdjointView& operator=(const MatrixBase<OtherDerived>& other)$/;"	f	class:SelfAdjointView
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    SelfAdjointView& operator=(const TriangularView<OtherMatrixType, OtherMode>& other)$/;"	f	class:SelfAdjointView
outerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    inline Index outerStride() const { return m_matrix.outerStride(); }$/;"	f	class:SelfAdjointView
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    row = (UnrollCount-1) % Derived1::RowsAtCompileTime$/;"	e	enum:internal::triangular_assignment_selector::<anonymous>
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:SelfAdjointView
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^  inline static void run(Derived1 &, const Derived2 &) {}$/;"	f	struct:internal::triangular_assignment_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^  inline static void run(Derived1 &dst, const Derived2 &src)$/;"	f	struct:internal::triangular_assignment_selector
selfadjointView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^MatrixBase<Derived>::selfadjointView() const$/;"	f	class:MatrixBase
selfadjointView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^MatrixBase<Derived>::selfadjointView()$/;"	f	class:MatrixBase
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^struct traits<SelfAdjointView<MatrixType, UpLo> > : traits<MatrixType>$/;"	s	namespace:internal
triangular_assignment_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^struct triangular_assignment_selector<Derived1, Derived2, (SelfAdjoint|Lower), UnrollCount, ClearOpposite>$/;"	s	namespace:internal
triangular_assignment_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^struct triangular_assignment_selector<Derived1, Derived2, (SelfAdjoint|Upper), UnrollCount, ClearOpposite>$/;"	s	namespace:internal
triangular_assignment_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^struct triangular_assignment_selector<Derived1, Derived2, SelfAdjoint|Lower, 0, ClearOpposite>$/;"	s	namespace:internal
triangular_assignment_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^struct triangular_assignment_selector<Derived1, Derived2, SelfAdjoint|Lower, Dynamic, ClearOpposite>$/;"	s	namespace:internal
triangular_assignment_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^struct triangular_assignment_selector<Derived1, Derived2, SelfAdjoint|Upper, 0, ClearOpposite>$/;"	s	namespace:internal
triangular_assignment_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfAdjointView.h	/^struct triangular_assignment_selector<Derived1, Derived2, SelfAdjoint|Upper, Dynamic, ClearOpposite>$/;"	s	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    typedef typename internal::dense_xpr_base<SelfCwiseBinaryOp>::type Base;$/;"	t	class:SelfCwiseBinaryOp
EIGEN_SELFCWISEBINARYOP_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	26;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    Flags = traits<CwiseBinaryOp<BinaryOp,Lhs,Rhs> >::Flags | (Lhs::Flags&DirectAccessBit) | (Lhs::Flags&LvalueBit),$/;"	e	class:internal::traits::<anonymous>::Rhs
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    Flags = traits<CwiseBinaryOp<BinaryOp,Lhs,Rhs> >::Flags | (Lhs::Flags&DirectAccessBit) | (Lhs::Flags&LvalueBit),$/;"	e	enum:internal::traits::<anonymous>
InnerStrideAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    InnerStrideAtCompileTime = Lhs::InnerStrideAtCompileTime$/;"	e	enum:internal::traits::<anonymous>
Lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    Flags = traits<CwiseBinaryOp<BinaryOp,Lhs,Rhs> >::Flags | (Lhs::Flags&DirectAccessBit) | (Lhs::Flags&LvalueBit),$/;"	e	enum:internal::traits::<anonymous>
OuterStrideAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    OuterStrideAtCompileTime = Lhs::OuterStrideAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
Packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    typedef typename internal::packet_traits<Scalar>::type Packet;$/;"	t	class:SelfCwiseBinaryOp
Rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    Flags = traits<CwiseBinaryOp<BinaryOp,Lhs,Rhs> >::Flags | (Lhs::Flags&DirectAccessBit) | (Lhs::Flags&LvalueBit),$/;"	e	enum:internal::traits::<anonymous>
SelfCwiseBinaryOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline SelfCwiseBinaryOp(Lhs& xpr, const BinaryOp& func = BinaryOp()) : m_matrix(xpr), m_functor(func) {}$/;"	f	class:SelfCwiseBinaryOp
SelfCwiseBinaryOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^template<typename BinaryOp, typename Lhs, typename Rhs> class SelfCwiseBinaryOp$/;"	c
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline Scalar& coeffRef(Index index)$/;"	f	class:SelfCwiseBinaryOp
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:SelfCwiseBinaryOp
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline const Scalar& coeffRef(Index index) const$/;"	f	class:SelfCwiseBinaryOp
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline const Scalar& coeffRef(Index row, Index col) const$/;"	f	class:SelfCwiseBinaryOp
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:SelfCwiseBinaryOp
copyCoeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    void copyCoeff(Index index, const DenseBase<OtherDerived>& other)$/;"	f	class:SelfCwiseBinaryOp
copyCoeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    void copyCoeff(Index row, Index col, const DenseBase<OtherDerived>& other)$/;"	f	class:SelfCwiseBinaryOp
copyPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    void copyPacket(Index index, const DenseBase<OtherDerived>& other)$/;"	f	class:SelfCwiseBinaryOp
copyPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    void copyPacket(Index row, Index col, const DenseBase<OtherDerived>& other)$/;"	f	class:SelfCwiseBinaryOp
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline const Scalar* data() const { return m_matrix.data(); }$/;"	f	class:SelfCwiseBinaryOp
innerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline Index innerStride() const { return m_matrix.innerStride(); }$/;"	f	class:SelfCwiseBinaryOp
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^namespace internal {$/;"	n
lazyAssign	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE SelfCwiseBinaryOp& lazyAssign(const DenseBase<RhsDerived>& rhs)$/;"	f	class:SelfCwiseBinaryOp
m_functor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    const BinaryOp& m_functor;$/;"	m	class:SelfCwiseBinaryOp
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    Lhs& m_matrix;$/;"	m	class:SelfCwiseBinaryOp
operator *=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^inline Derived& DenseBase<Derived>::operator*=(const Scalar& other)$/;"	f	class:DenseBase
operator /=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^inline Derived& DenseBase<Derived>::operator\/=(const Scalar& other)$/;"	f	class:DenseBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    SelfCwiseBinaryOp& operator=(const Rhs& _rhs)$/;"	f	class:SelfCwiseBinaryOp
outerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline Index outerStride() const { return m_matrix.outerStride(); }$/;"	f	class:SelfCwiseBinaryOp
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:SelfCwiseBinaryOp
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SelfCwiseBinaryOp.h	/^struct traits<SelfCwiseBinaryOp<BinaryOp,Lhs,Rhs> >$/;"	s	namespace:internal
ActualLhsType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^  typedef typename LhsProductTraits::DirectLinearAccessType ActualLhsType;$/;"	t	struct:internal::triangular_solver_selector
ActualLhsType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^  typedef typename LhsProductTraits::ExtractType ActualLhsType;$/;"	t	struct:internal::triangular_solver_selector
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^  typedef ReturnByValue<triangular_solve_retval> Base;$/;"	t	struct:internal::triangular_solve_retval
EIGEN_SOLVETRIANGULAR_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	26;"	d
I	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^    I = IsLower ? Index : Size - Index - 1,$/;"	e	enum:internal::triangular_solver_unroller::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^  typedef typename Base::Index Index;$/;"	t	struct:internal::triangular_solve_retval
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^  typedef typename Rhs::Index Index;$/;"	t	struct:internal::triangular_solver_selector
IsLower	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^    IsLower = ((Mode&Lower)==Lower),$/;"	e	enum:internal::triangular_solver_unroller::<anonymous>
LhsProductTraits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^  typedef blas_traits<Lhs> LhsProductTraits;$/;"	t	struct:internal::triangular_solver_selector
LhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^  typedef typename Lhs::Scalar LhsScalar;$/;"	t	struct:internal::triangular_solver_selector
MappedRhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^  typedef Map<Matrix<RhsScalar,Dynamic,1>, Aligned> MappedRhs;$/;"	t	struct:internal::triangular_solver_selector
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^  typedef typename internal::plain_matrix_type_column_major<Rhs>::type ReturnType;$/;"	t	struct:internal::traits
RhsIsVectorAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^      RhsIsVectorAtCompileTime = (Side==OnTheLeft ? Rhs::ColsAtCompileTime : Rhs::RowsAtCompileTime)==1$/;"	e	enum:internal::trsolve_traits::<anonymous>
RhsNestedCleaned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^  typedef typename remove_all<typename Rhs::Nested>::type RhsNestedCleaned;$/;"	t	struct:internal::triangular_solve_retval
RhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^  typedef typename Rhs::Scalar RhsScalar;$/;"	t	struct:internal::triangular_solver_selector
RhsVectors	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^      RhsVectors  = RhsIsVectorAtCompileTime ? 1 : Dynamic$/;"	e	enum:internal::trsolve_traits::<anonymous>
S	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^    S = IsLower ? 0     : I+1$/;"	e	enum:internal::triangular_solver_unroller::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^  typedef typename Rhs::Scalar Scalar;$/;"	t	struct:internal::triangular_solver_selector
Unrolling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^      Unrolling   = (RhsIsVectorAtCompileTime && Rhs::SizeAtCompileTime != Dynamic && Rhs::SizeAtCompileTime <= 8)$/;"	e	enum:internal::trsolve_traits::<anonymous>
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^  inline Index cols() const { return m_rhs.cols(); }$/;"	f	struct:internal::triangular_solve_retval
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^  template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:internal::triangular_solve_retval
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^namespace internal {$/;"	n
m_rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^    const typename Rhs::Nested m_rhs;$/;"	m	struct:internal::triangular_solve_retval
m_triangularMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^    const TriangularType& m_triangularMatrix;$/;"	m	struct:internal::triangular_solve_retval
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^  inline Index rows() const { return m_rhs.rows(); }$/;"	f	struct:internal::triangular_solve_retval
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^  static void run(const Lhs& lhs, Rhs& rhs)$/;"	f	struct:internal::triangular_solver_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^  static void run(const Lhs& lhs, Rhs& rhs)$/;"	f	struct:internal::triangular_solver_unroller
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^  static void run(const Lhs&, Rhs&) {}$/;"	f	struct:internal::triangular_solver_unroller
solve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^TriangularView<Derived,Mode>::solve(const MatrixBase<Other>& other) const$/;"	f	class:TriangularView
solveInPlace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^void TriangularView<MatrixType,Mode>::solveInPlace(const MatrixBase<OtherDerived>& _other) const$/;"	f	class:TriangularView
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^struct traits<triangular_solve_retval<Side, TriangularType, Rhs> >$/;"	s	namespace:internal
triangular_solve_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^  triangular_solve_retval(const TriangularType& tri, const Rhs& rhs)$/;"	f	struct:internal::triangular_solve_retval
triangular_solve_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^template<int Side, typename TriangularType, typename Rhs> struct triangular_solve_retval$/;"	s	namespace:internal
triangular_solver_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^struct triangular_solver_selector<Lhs,Rhs,OnTheLeft,Mode,CompleteUnrolling,1> {$/;"	s	namespace:internal
triangular_solver_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^struct triangular_solver_selector<Lhs,Rhs,OnTheRight,Mode,CompleteUnrolling,1> {$/;"	s	namespace:internal
triangular_solver_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^struct triangular_solver_selector<Lhs,Rhs,Side,Mode,NoUnrolling,1>$/;"	s	namespace:internal
triangular_solver_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^struct triangular_solver_selector<Lhs,Rhs,Side,Mode,NoUnrolling,Dynamic>$/;"	s	namespace:internal
triangular_solver_unroller	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^struct triangular_solver_unroller<Lhs,Rhs,Mode,Index,Size,false> {$/;"	s	namespace:internal
triangular_solver_unroller	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^struct triangular_solver_unroller<Lhs,Rhs,Mode,Index,Size,true> {$/;"	s	namespace:internal
trsolve_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/SolveTriangular.h	/^class trsolve_traits$/;"	c	namespace:internal
EIGEN_STABLENORM_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/StableNorm.h	26;"	d
blueNorm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/StableNorm.h	/^MatrixBase<Derived>::blueNorm() const$/;"	f	class:MatrixBase
hypotNorm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/StableNorm.h	/^MatrixBase<Derived>::hypotNorm() const$/;"	f	class:MatrixBase
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/StableNorm.h	/^namespace internal {$/;"	n
stableNorm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/StableNorm.h	/^MatrixBase<Derived>::stableNorm() const$/;"	f	class:MatrixBase
stable_norm_kernel	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/StableNorm.h	/^inline void stable_norm_kernel(const ExpressionType& bl, Scalar& ssq, Scalar& scale, Scalar& invScale)$/;"	f	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^    typedef Stride<0, Value> Base;$/;"	t	class:InnerStride
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^    typedef Stride<Value, 0> Base;$/;"	t	class:OuterStride
EIGEN_STRIDE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^    typedef DenseIndex Index;$/;"	t	class:InnerStride
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^    typedef DenseIndex Index;$/;"	t	class:OuterStride
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^    typedef DenseIndex Index;$/;"	t	class:Stride
InnerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^    InnerStride() : Base() {}$/;"	f	class:InnerStride
InnerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^    InnerStride(Index v) : Base(0, v) {}$/;"	f	class:InnerStride
InnerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^class InnerStride : public Stride<0, Value>$/;"	c
InnerStrideAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^      InnerStrideAtCompileTime = _InnerStrideAtCompileTime,$/;"	e	enum:Stride::<anonymous>
OuterStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^    OuterStride() : Base() {}$/;"	f	class:OuterStride
OuterStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^    OuterStride(Index v) : Base(v,0) {}$/;"	f	class:OuterStride
OuterStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^class OuterStride : public Stride<Value, 0>$/;"	c
OuterStrideAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^      OuterStrideAtCompileTime = _OuterStrideAtCompileTime$/;"	e	enum:Stride::<anonymous>
Stride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^    Stride()$/;"	f	class:Stride
Stride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^    Stride(Index outerStride, Index innerStride)$/;"	f	class:Stride
Stride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^    Stride(const Stride& other)$/;"	f	class:Stride
Stride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^class Stride$/;"	c
inner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^    inline Index inner() const { return m_inner.value(); }$/;"	f	class:Stride
m_inner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^    internal::variable_if_dynamic<Index, InnerStrideAtCompileTime> m_inner;$/;"	m	class:Stride
m_outer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^    internal::variable_if_dynamic<Index, OuterStrideAtCompileTime> m_outer;$/;"	m	class:Stride
outer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Stride.h	/^    inline Index outer() const { return m_outer.value(); }$/;"	f	class:Stride
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	/^    typedef typename internal::dense_xpr_base<SwapWrapper>::type Base;$/;"	t	class:SwapWrapper
EIGEN_SWAP_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	26;"	d
Packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	/^    typedef typename internal::packet_traits<Scalar>::type Packet;$/;"	t	class:SwapWrapper
SwapWrapper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	/^    inline SwapWrapper(ExpressionType& xpr) : m_expression(xpr) {}$/;"	f	class:SwapWrapper
SwapWrapper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	/^template<typename ExpressionType> class SwapWrapper$/;"	c
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	/^    inline Scalar& coeffRef(Index index) const$/;"	f	class:SwapWrapper
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	/^    inline Scalar& coeffRef(Index index)$/;"	f	class:SwapWrapper
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	/^    inline Scalar& coeffRef(Index row, Index col) const$/;"	f	class:SwapWrapper
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:SwapWrapper
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	/^    inline Index cols() const { return m_expression.cols(); }$/;"	f	class:SwapWrapper
copyCoeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	/^    void copyCoeff(Index index, const DenseBase<OtherDerived>& other)$/;"	f	class:SwapWrapper
copyCoeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	/^    void copyCoeff(Index row, Index col, const DenseBase<OtherDerived>& other)$/;"	f	class:SwapWrapper
copyPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	/^    void copyPacket(Index index, const DenseBase<OtherDerived>& other)$/;"	f	class:SwapWrapper
copyPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	/^    void copyPacket(Index row, Index col, const DenseBase<OtherDerived>& other)$/;"	f	class:SwapWrapper
innerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	/^    inline Index innerStride() const { return m_expression.innerStride(); }$/;"	f	class:SwapWrapper
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	/^namespace internal {$/;"	n
m_expression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	/^    ExpressionType& m_expression;$/;"	m	class:SwapWrapper
outerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	/^    inline Index outerStride() const { return m_expression.outerStride(); }$/;"	f	class:SwapWrapper
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	/^    inline Index rows() const { return m_expression.rows(); }$/;"	f	class:SwapWrapper
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Swap.h	/^struct traits<SwapWrapper<ExpressionType> > : traits<ExpressionType> {};$/;"	s	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    typedef typename TransposeImpl<MatrixType,typename internal::traits<MatrixType>::StorageKind>::Base Base;$/;"	t	class:Transpose
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    typedef typename internal::TransposeImpl_base<MatrixType>::type Base;$/;"	t	class:TransposeImpl
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    CoeffReadCost = MatrixTypeNestedPlain::CoeffReadCost,$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    ColsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
EIGEN_TRANSPOSE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	27;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    Flags = Flags1 ^ RowMajorBit,$/;"	e	enum:internal::traits::<anonymous>
Flags0	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    Flags0 = MatrixTypeNestedPlain::Flags & ~(LvalueBit | NestByRefBit),$/;"	e	enum:internal::traits::<anonymous>
Flags1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    Flags1 = Flags0 | FlagsLvalueBit,$/;"	e	enum:internal::traits::<anonymous>
FlagsLvalueBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    FlagsLvalueBit = is_lvalue<MatrixType>::value ? LvalueBit : 0,$/;"	e	enum:internal::traits::<anonymous>
InnerStrideAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    InnerStrideAtCompileTime = inner_stride_at_compile_time<MatrixType>::ret,$/;"	e	enum:internal::traits::<anonymous>
MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^  typedef typename nested<MatrixType>::type MatrixTypeNested;$/;"	t	struct:internal::traits
MatrixTypeNestedPlain	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^  typedef typename remove_reference<MatrixTypeNested>::type MatrixTypeNestedPlain;$/;"	t	struct:internal::traits
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    MaxColsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    MaxRowsAtCompileTime = MatrixType::MaxColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
OuterStrideAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    OuterStrideAtCompileTime = outer_stride_at_compile_time<MatrixType>::ret$/;"	e	enum:internal::traits::<anonymous>
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    RowsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^  typedef typename MatrixType::Scalar Scalar;$/;"	t	struct:internal::traits
ScalarWithConstIfNotLvalue	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^                     >::type ScalarWithConstIfNotLvalue;$/;"	t	class:TransposeImpl
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^  typedef typename traits<MatrixType>::StorageKind StorageKind;$/;"	t	struct:internal::traits
Transpose	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    inline Transpose(MatrixType& matrix) : m_matrix(matrix) {}$/;"	f	class:Transpose
Transpose	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^template<typename MatrixType> class Transpose$/;"	c
TransposeImpl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^template<typename MatrixType> class TransposeImpl<MatrixType,Dense>$/;"	c
TransposeImpl_base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^struct TransposeImpl_base$/;"	s	namespace:internal
TransposeImpl_base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^struct TransposeImpl_base<MatrixType, false>$/;"	s	namespace:internal
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^  typedef typename traits<MatrixType>::XprKind XprKind;$/;"	t	struct:internal::traits
XprType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^  typedef SelfCwiseBinaryOp<BinOp,NestedXpr,Rhs> XprType;$/;"	t	struct:internal::blas_traits
adjoint	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^MatrixBase<Derived>::adjoint() const$/;"	f	class:MatrixBase
adjointInPlace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^inline void MatrixBase<Derived>::adjointInPlace()$/;"	f	class:MatrixBase
blas_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^struct blas_traits<SelfCwiseBinaryOp<BinOp,NestedXpr,Rhs> >$/;"	s	namespace:internal
checkTransposeAliasing	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^void DenseBase<Derived>::checkTransposeAliasing(const OtherDerived& other) const$/;"	f	class:DenseBase
checkTransposeAliasing_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^struct checkTransposeAliasing_impl$/;"	s	namespace:internal
checkTransposeAliasing_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^struct checkTransposeAliasing_impl<Derived, OtherDerived, false>$/;"	s	namespace:internal
check_transpose_aliasing_compile_time_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^struct check_transpose_aliasing_compile_time_selector$/;"	s	namespace:internal
check_transpose_aliasing_compile_time_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^struct check_transpose_aliasing_compile_time_selector<DestIsTransposed,CwiseBinaryOp<BinOp,DerivedA,DerivedB> >$/;"	s	namespace:internal
check_transpose_aliasing_run_time_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^struct check_transpose_aliasing_run_time_selector$/;"	s	namespace:internal
check_transpose_aliasing_run_time_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^struct check_transpose_aliasing_run_time_selector<Scalar,DestIsTransposed,CwiseBinaryOp<BinOp,DerivedA,DerivedB> >$/;"	s	namespace:internal
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    inline const CoeffReturnType coeff(Index index) const$/;"	f	class:TransposeImpl
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    inline const CoeffReturnType coeff(Index row, Index col) const$/;"	f	class:TransposeImpl
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    inline ScalarWithConstIfNotLvalue& coeffRef(Index index)$/;"	f	class:TransposeImpl
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    inline ScalarWithConstIfNotLvalue& coeffRef(Index row, Index col)$/;"	f	class:TransposeImpl
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    inline const Scalar& coeffRef(Index index) const$/;"	f	class:TransposeImpl
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    inline const Scalar& coeffRef(Index row, Index col) const$/;"	f	class:TransposeImpl
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    inline Index cols() const { return m_matrix.rows(); }$/;"	f	class:Transpose
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    inline ScalarWithConstIfNotLvalue* data() { return derived().nestedExpression().data(); }$/;"	f	class:TransposeImpl
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    inline const Scalar* data() const { return derived().nestedExpression().data(); }$/;"	f	class:TransposeImpl
extract	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^  static inline const XprType extract(const XprType& x) { return x; }$/;"	f	struct:internal::blas_traits
innerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    inline Index innerStride() const { return derived().nestedExpression().innerStride(); }$/;"	f	class:TransposeImpl
inplace_transpose_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^struct inplace_transpose_selector<MatrixType,false> { \/\/ non square matrix$/;"	s	namespace:internal
inplace_transpose_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^struct inplace_transpose_selector<MatrixType,true> { \/\/ square matrix$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^namespace internal {$/;"	n
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    const typename MatrixType::Nested m_matrix;$/;"	m	class:Transpose
nestedExpression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    nestedExpression() const { return m_matrix; }$/;"	f	class:Transpose
nestedExpression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    nestedExpression() { return m_matrix.const_cast_derived(); }$/;"	f	class:Transpose
outerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    inline Index outerStride() const { return derived().nestedExpression().outerStride(); }$/;"	f	class:TransposeImpl
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    inline const PacketScalar packet(Index index) const$/;"	f	class:TransposeImpl
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    inline const PacketScalar packet(Index row, Index col) const$/;"	f	class:TransposeImpl
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^  enum { ret =    blas_traits<DerivedA>::IsTransposed != DestIsTransposed$/;"	e	enum:internal::check_transpose_aliasing_compile_time_selector::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^  enum { ret = blas_traits<OtherDerived>::IsTransposed != DestIsTransposed$/;"	e	enum:internal::check_transpose_aliasing_compile_time_selector::<anonymous>
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    inline Index rows() const { return m_matrix.cols(); }$/;"	f	class:Transpose
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    static void run(const Derived& dst, const OtherDerived& other)$/;"	f	struct:internal::checkTransposeAliasing_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    static void run(const Derived&, const OtherDerived&)$/;"	f	struct:internal::checkTransposeAliasing_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^  static bool run(const Scalar* dest, const CwiseBinaryOp<BinOp,DerivedA,DerivedB>& src)$/;"	f	struct:internal::check_transpose_aliasing_run_time_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^  static bool run(const Scalar* dest, const OtherDerived& src)$/;"	f	struct:internal::check_transpose_aliasing_run_time_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^  static void run(MatrixType& m) {$/;"	f	struct:internal::inplace_transpose_selector
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^struct traits<Transpose<MatrixType> > : traits<MatrixType>$/;"	s	namespace:internal
transpose	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^DenseBase<Derived>::transpose() const$/;"	f	class:DenseBase
transpose	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^DenseBase<Derived>::transpose()$/;"	f	class:DenseBase
transposeInPlace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^inline void DenseBase<Derived>::transposeInPlace()$/;"	f	class:DenseBase
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^  typedef typename dense_xpr_base<Transpose<MatrixType> >::type type;$/;"	t	struct:internal::TransposeImpl_base
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    inline void writePacket(Index index, const PacketScalar& x)$/;"	f	class:TransposeImpl
writePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpose.h	/^    inline void writePacket(Index row, Index col, const PacketScalar& x)$/;"	f	class:TransposeImpl
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    typedef TranspositionsBase<Map> Base;$/;"	t	class:Map
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    typedef TranspositionsBase<Transpositions> Base;$/;"	t	class:Transpositions
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    typedef TranspositionsBase<TranspositionsWrapper> Base;$/;"	t	class:TranspositionsWrapper
EIGEN_TRANSPOSITIONS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    typedef typename IndicesType::Scalar Index;$/;"	t	class:Map
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    typedef typename IndicesType::Scalar Index;$/;"	t	class:Transpositions
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    typedef typename IndicesType::Scalar Index;$/;"	t	class:TranspositionsBase
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    typedef typename IndicesType::Scalar Index;$/;"	t	class:TranspositionsWrapper
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    typedef typename TranspositionType::Index Index;$/;"	t	struct:internal::transposition_matrix_product_retval
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^  typedef IndexType Index;$/;"	t	struct:internal::traits
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^  typedef typename _IndicesType::Scalar Index;$/;"	t	struct:internal::traits
IndicesType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    typedef typename Traits::IndicesType IndicesType;$/;"	t	class:Map
IndicesType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    typedef typename Traits::IndicesType IndicesType;$/;"	t	class:Transpositions
IndicesType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    typedef typename Traits::IndicesType IndicesType;$/;"	t	class:TranspositionsBase
IndicesType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    typedef typename Traits::IndicesType IndicesType;$/;"	t	class:TranspositionsWrapper
IndicesType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    typedef typename TranspositionType::IndicesType IndicesType;$/;"	t	class:Transpose
IndicesType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^  typedef Map<const Matrix<Index,SizeAtCompileTime,1,0,MaxSizeAtCompileTime,1>, _PacketAccess> IndicesType;$/;"	t	struct:internal::traits
IndicesType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^  typedef Matrix<Index, SizeAtCompileTime, 1, 0, MaxSizeAtCompileTime, 1> IndicesType;$/;"	t	struct:internal::traits
IndicesType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^  typedef _IndicesType IndicesType;$/;"	t	struct:internal::traits
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline Map(const Index* indices)$/;"	f	class:Map
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline Map(const Index* indices, Index size)$/;"	f	class:Map
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^class Map<Transpositions<SizeAtCompileTime,MaxSizeAtCompileTime,IndexType>,PacketAccess>$/;"	c
MatrixTypeNestedCleaned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    typedef typename remove_all<typename MatrixType::Nested>::type MatrixTypeNestedCleaned;$/;"	t	struct:internal::transposition_matrix_product_retval
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^  typedef typename MatrixType::PlainObject ReturnType;$/;"	t	struct:internal::traits
Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    typedef internal::traits<Derived> Traits;$/;"	t	class:TranspositionsBase
Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    typedef internal::traits<Map> Traits;$/;"	t	class:Map
Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    typedef internal::traits<Transpositions> Traits;$/;"	t	class:Transpositions
Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    typedef internal::traits<TranspositionsWrapper> Traits;$/;"	t	class:TranspositionsWrapper
Transpose	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    Transpose(const TranspositionType& t) : m_transpositions(t) {}$/;"	f	class:Transpose
Transpose	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^class Transpose<TranspositionsBase<TranspositionsDerived> >$/;"	c
TranspositionType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    typedef TranspositionsDerived TranspositionType;$/;"	t	class:Transpose
Transpositions	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    explicit inline Transpositions(const MatrixBase<Other>& indices) : m_indices(indices)$/;"	f	class:Transpositions
Transpositions	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline Transpositions() {}$/;"	f	class:Transpositions
Transpositions	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline Transpositions(Index size) : m_indices(size)$/;"	f	class:Transpositions
Transpositions	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline Transpositions(const Transpositions& other) : m_indices(other.indices()) {}$/;"	f	class:Transpositions
Transpositions	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline Transpositions(const TranspositionsBase<OtherDerived>& other)$/;"	f	class:Transpositions
Transpositions	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^class Transpositions : public TranspositionsBase<Transpositions<SizeAtCompileTime,MaxSizeAtCompileTime,IndexType> >$/;"	c
TranspositionsBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^class TranspositionsBase$/;"	c
TranspositionsWrapper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline TranspositionsWrapper(IndicesType& indices)$/;"	f	class:TranspositionsWrapper
TranspositionsWrapper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^class TranspositionsWrapper$/;"	c
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline const Index& coeff(Index i) const { return indices().coeff(i); }$/;"	f	class:TranspositionsBase
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline Index& coeffRef(Index i) { return indices().coeffRef(i); }$/;"	f	class:TranspositionsBase
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline int cols() const { return m_matrix.cols(); }$/;"	f	struct:internal::transposition_matrix_product_retval
derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    Derived& derived() { return *static_cast<Derived*>(this); }$/;"	f	class:TranspositionsBase
derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    const Derived& derived() const { return *static_cast<const Derived*>(this); }$/;"	f	class:TranspositionsBase
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:internal::transposition_matrix_product_retval
indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    IndicesType& indices() { return derived().indices(); }$/;"	f	class:TranspositionsBase
indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    IndicesType& indices() { return m_indices; }$/;"	f	class:Map
indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    IndicesType& indices() { return m_indices; }$/;"	f	class:Transpositions
indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    IndicesType& indices() { return m_indices; }$/;"	f	class:TranspositionsWrapper
indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    const IndicesType& indices() const { return derived().indices(); }$/;"	f	class:TranspositionsBase
indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    const IndicesType& indices() const { return m_indices; }$/;"	f	class:Map
indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    const IndicesType& indices() const { return m_indices; }$/;"	f	class:Transpositions
indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    const IndicesType& indices() const { return m_indices; }$/;"	f	class:TranspositionsWrapper
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^namespace internal {$/;"	n
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline Transpose<TranspositionsBase> inverse() const$/;"	f	class:TranspositionsBase
m_indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    IndicesType m_indices;$/;"	m	class:Map
m_indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    IndicesType m_indices;$/;"	m	class:Transpositions
m_indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    const typename IndicesType::Nested m_indices;$/;"	m	class:TranspositionsWrapper
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    const typename MatrixType::Nested m_matrix;$/;"	m	struct:internal::transposition_matrix_product_retval
m_transpositions	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    const TranspositionType& m_transpositions;$/;"	m	class:Transpose
m_transpositions	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    const TranspositionType& m_transpositions;$/;"	m	struct:internal::transposition_matrix_product_retval
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline Index& operator()(Index i) { return indices()(i); }$/;"	f	class:TranspositionsBase
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline const Index& operator()(Index i) const { return indices()(i); }$/;"	f	class:TranspositionsBase
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    operator*(const MatrixBase<Derived>& matrix) const$/;"	f	class:Transpose
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    operator*(const MatrixBase<Derived>& matrix, const Transpose& trt)$/;"	f	class:Transpose
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^operator*(const MatrixBase<Derived>& matrix,$/;"	f
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^operator*(const TranspositionsBase<TranspositionDerived> &transpositions,$/;"	f
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    Derived& operator=(const TranspositionsBase& other)$/;"	f	class:TranspositionsBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    Derived& operator=(const TranspositionsBase<OtherDerived>& other)$/;"	f	class:TranspositionsBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    Map& operator=(const Map& other)$/;"	f	class:Map
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    Map& operator=(const TranspositionsBase<OtherDerived>& other)$/;"	f	class:Map
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    Transpositions& operator=(const Transpositions& other)$/;"	f	class:Transpositions
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    Transpositions& operator=(const TranspositionsBase<OtherDerived>& other)$/;"	f	class:Transpositions
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    TranspositionsWrapper& operator=(const TranspositionsBase<OtherDerived>& other)$/;"	f	class:TranspositionsWrapper
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    TranspositionsWrapper& operator=(const TranspositionsWrapper& other)$/;"	f	class:TranspositionsWrapper
operator []	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline Index& operator[](Index i) { return indices()(i); }$/;"	f	class:TranspositionsBase
operator []	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline const Index& operator[](Index i) const { return indices()(i); }$/;"	f	class:TranspositionsBase
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline void resize(int size)$/;"	f	class:TranspositionsBase
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline int rows() const { return m_matrix.rows(); }$/;"	f	struct:internal::transposition_matrix_product_retval
setIdentity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    void setIdentity()$/;"	f	class:TranspositionsBase
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline Index size() const { return indices().size(); }$/;"	f	class:TranspositionsBase
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline int size() const { return m_transpositions.size(); }$/;"	f	class:Transpose
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^struct traits<Map<Transpositions<SizeAtCompileTime,MaxSizeAtCompileTime,IndexType>,_PacketAccess> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^struct traits<Transpositions<SizeAtCompileTime,MaxSizeAtCompileTime,IndexType> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^struct traits<TranspositionsWrapper<_IndicesType> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^struct traits<transposition_matrix_product_retval<TranspositionType, MatrixType, Side, Transposed> >$/;"	s	namespace:internal
transpose	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    inline Transpose<TranspositionsBase> transpose() const$/;"	f	class:TranspositionsBase
transposition_matrix_product_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^    transposition_matrix_product_retval(const TranspositionType& tr, const MatrixType& matrix)$/;"	f	struct:internal::transposition_matrix_product_retval
transposition_matrix_product_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Transpositions.h	/^struct transposition_matrix_product_retval$/;"	s	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    typedef TriangularBase<TriangularView> Base;$/;"	t	class:TriangularView
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^      CoeffReadCost = internal::traits<Derived>::CoeffReadCost,$/;"	e	enum:TriangularBase::<anonymous>
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    CoeffReadCost = MatrixTypeNestedCleaned::CoeffReadCost$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^      ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,$/;"	e	enum:TriangularBase::<anonymous>
DenseMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^      typedef typename TriangularView<MatrixType,Mode>::DenseMatrixType DenseMatrixType;$/;"	t	struct:TriangularView::eigen2_product_return_type
DenseMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<Derived>::DenseMatrixType DenseMatrixType;$/;"	t	class:TriangularBase
DenseMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<TriangularView>::DenseMatrixType DenseMatrixType;$/;"	t	class:TriangularView
DenseMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^  typedef typename MatrixType::PlainObject DenseMatrixType;$/;"	t	struct:internal::traits
DenseType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    typedef DenseMatrixType DenseType;$/;"	t	class:TriangularBase
EIGEN_TRIANGULARMATRIX_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	27;"	d
ExpressionType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^  typedef MatrixType ExpressionType;$/;"	t	struct:internal::traits
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    Flags = (MatrixTypeNestedCleaned::Flags & (HereditaryBits) & (~(PacketAccessBit | DirectAccessBit | LinearAccessBit))) | Mode,$/;"	e	enum:internal::traits::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<Derived>::Index Index;$/;"	t	class:TriangularBase
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<TriangularView>::Index Index;$/;"	t	class:TriangularView
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^  typedef typename Derived1::Index Index;$/;"	t	struct:internal::triangular_assignment_selector
MatrixConjugateReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::remove_all<typename MatrixType::ConjugateReturnType>::type MatrixConjugateReturnType;$/;"	t	class:TriangularView
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:TriangularView
MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<TriangularView>::MatrixTypeNested MatrixTypeNested;$/;"	t	class:TriangularView
MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^  typedef typename nested<MatrixType>::type MatrixTypeNested;$/;"	t	struct:internal::traits
MatrixTypeNestedCleaned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<TriangularView>::MatrixTypeNestedCleaned MatrixTypeNestedCleaned;$/;"	t	class:TriangularView
MatrixTypeNestedCleaned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^  typedef typename remove_all<MatrixTypeNested>::type MatrixTypeNestedCleaned;$/;"	t	struct:internal::traits
MatrixTypeNestedNonRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<TriangularView>::MatrixTypeNestedNonRef MatrixTypeNestedNonRef;$/;"	t	class:TriangularView
MatrixTypeNestedNonRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^  typedef typename remove_reference<MatrixTypeNested>::type MatrixTypeNestedNonRef;$/;"	t	struct:internal::traits
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^      MaxColsAtCompileTime = internal::traits<Derived>::MaxColsAtCompileTime$/;"	e	enum:TriangularBase::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^      MaxRowsAtCompileTime = internal::traits<Derived>::MaxRowsAtCompileTime,$/;"	e	enum:TriangularBase::<anonymous>
Mode	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^      Mode = _Mode,$/;"	e	enum:TriangularView::<anonymous>
Mode	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^      Mode = internal::traits<Derived>::Mode,$/;"	e	enum:TriangularBase::<anonymous>
Mode	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    Mode = _Mode,$/;"	e	enum:internal::traits::<anonymous>
OtherPlainObject	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^      typedef typename OtherDerived::PlainObject::DenseType OtherPlainObject;$/;"	t	struct:TriangularView::eigen2_product_return_type
PlainObject	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    typedef DenseMatrixType PlainObject;$/;"	t	class:TriangularView
ProdRetType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^      typedef typename ProductReturnType<DenseMatrixType, OtherPlainObject>::Type ProdRetType;$/;"	t	struct:TriangularView::eigen2_product_return_type
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^      RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,$/;"	e	enum:TriangularBase::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:TriangularBase
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<TriangularView>::Scalar Scalar;$/;"	t	class:TriangularView
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^  typedef typename Derived1::Scalar Scalar;$/;"	t	struct:internal::triangular_assignment_selector
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	class:TriangularBase
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    typedef typename internal::traits<TriangularView>::StorageKind StorageKind;$/;"	t	class:TriangularView
TransposeMode	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^      TransposeMode = (Mode & Upper ? Lower : 0)$/;"	e	enum:TriangularView::<anonymous>
TriangularBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline TriangularBase() { eigen_assert(!((Mode&UnitDiag) && (Mode&ZeroDiag))); }$/;"	f	class:TriangularBase
TriangularBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^template<typename Derived> class TriangularBase : public EigenBase<Derived>$/;"	c
TriangularView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline TriangularView(const MatrixType& matrix) : m_matrix(matrix)$/;"	f	class:TriangularView
TriangularView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^template<typename _MatrixType, unsigned int _Mode> class TriangularView$/;"	c
adjoint	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline TriangularView<typename MatrixType::AdjointReturnType,TransposeMode> adjoint()$/;"	f	class:TriangularView
adjoint	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline const TriangularView<typename MatrixType::AdjointReturnType,TransposeMode> adjoint() const$/;"	f	class:TriangularView
check_coordinates	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    void check_coordinates(Index row, Index col) const$/;"	f	class:TriangularBase
check_coordinates_internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    void check_coordinates_internal(Index , Index ) const {}$/;"	f	class:TriangularBase
check_coordinates_internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    void check_coordinates_internal(Index row, Index col) const$/;"	f	class:TriangularBase
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline Scalar coeff(Index row, Index col) const  { return derived().coeff(row,col); }$/;"	f	class:TriangularBase
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline Scalar coeff(Index row, Index col) const$/;"	f	class:TriangularView
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline Scalar& coeffRef(Index row, Index col) { return derived().coeffRef(row,col); }$/;"	f	class:TriangularBase
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:TriangularView
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    col = (UnrollCount-1) \/ Derived1::RowsAtCompileTime,$/;"	e	enum:internal::triangular_assignment_selector::<anonymous>
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline Index cols() const { return derived().cols(); }$/;"	f	class:TriangularBase
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:TriangularView
conjugate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline TriangularView<MatrixConjugateReturnType,Mode> conjugate()$/;"	f	class:TriangularView
conjugate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline const TriangularView<MatrixConjugateReturnType,Mode> conjugate() const$/;"	f	class:TriangularView
copyCoeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    EIGEN_STRONG_INLINE void copyCoeff(Index row, Index col, Other& other)$/;"	f	class:TriangularBase
derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline Derived& derived() { return *static_cast<Derived*>(this); }$/;"	f	class:TriangularBase
derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline const Derived& derived() const { return *static_cast<const Derived*>(this); }$/;"	f	class:TriangularBase
determinant	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    Scalar determinant() const$/;"	f	class:TriangularView
eigen2_part_return_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^struct eigen2_part_return_type$/;"	s	namespace:internal
eigen2_part_return_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^struct eigen2_part_return_type<MatrixType, SelfAdjoint>$/;"	s	namespace:internal
eigen2_product_return_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    struct eigen2_product_return_type$/;"	s	class:TriangularView
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^void TriangularBase<Derived>::evalTo(MatrixBase<DenseDerived> &other) const$/;"	f	class:TriangularBase
evalToLazy	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^void TriangularBase<Derived>::evalToLazy(MatrixBase<DenseDerived> &other) const$/;"	f	class:TriangularBase
fill	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    void fill(const Scalar& value) { setConstant(value); }$/;"	f	class:TriangularView
innerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline Index innerStride() const { return derived().innerStride(); }$/;"	f	class:TriangularBase
innerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline Index innerStride() const { return m_matrix.innerStride(); }$/;"	f	class:TriangularView
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^namespace internal {$/;"	n
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    bool isApprox(const MatrixBase<OtherDerived>& other, typename NumTraits<Scalar>::Real precision = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:TriangularView
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    bool isApprox(const TriangularView<OtherMatrixType, Mode>& other, typename NumTraits<Scalar>::Real precision = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:TriangularView
isLowerTriangular	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^bool MatrixBase<Derived>::isLowerTriangular(RealScalar prec) const$/;"	f	class:MatrixBase
isUpperTriangular	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^bool MatrixBase<Derived>::isUpperTriangular(RealScalar prec) const$/;"	f	class:MatrixBase
lazyAssign	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^void TriangularView<MatrixType, Mode>::lazyAssign(const MatrixBase<OtherDerived>& other)$/;"	f	class:TriangularView
lazyAssign	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^void TriangularView<MatrixType, Mode>::lazyAssign(const TriangularBase<OtherDerived>& other)$/;"	f	class:TriangularView
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    const MatrixTypeNested m_matrix;$/;"	m	class:TriangularView
nestedExpression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    MatrixTypeNestedCleaned& nestedExpression() { return *const_cast<MatrixTypeNestedCleaned*>(&m_matrix); }$/;"	f	class:TriangularView
nestedExpression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    const MatrixTypeNestedCleaned& nestedExpression() const { return m_matrix; }$/;"	f	class:TriangularView
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline Scalar operator()(Index row, Index col) const$/;"	f	class:TriangularBase
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline Scalar& operator()(Index row, Index col)$/;"	f	class:TriangularBase
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    operator*(const EigenBase<OtherDerived>& rhs) const$/;"	f	class:TriangularView
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    operator*(const MatrixBase<OtherDerived>& lhs, const TriangularView& rhs)$/;"	f	class:TriangularView
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    operator*(const MatrixBase<OtherDerived>& rhs) const$/;"	f	class:TriangularView
operator *=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    TriangularView&  operator*=(const typename internal::traits<MatrixType>::Scalar& other) { return *this = m_matrix * other; }$/;"	f	class:TriangularView
operator +=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    EIGEN_STRONG_INLINE TriangularView& operator+=(const ProductBase<ProductDerived, Lhs,Rhs>& other)$/;"	f	class:TriangularView
operator +=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    EIGEN_STRONG_INLINE TriangularView& operator+=(const ScaledProduct<ProductDerived>& other)$/;"	f	class:TriangularView
operator +=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    template<typename Other> TriangularView&  operator+=(const DenseBase<Other>& other) { return *this = m_matrix + other.derived(); }$/;"	f	class:TriangularView
operator -=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    EIGEN_STRONG_INLINE TriangularView& operator-=(const ProductBase<ProductDerived, Lhs,Rhs>& other)$/;"	f	class:TriangularView
operator -=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    EIGEN_STRONG_INLINE TriangularView& operator-=(const ScaledProduct<ProductDerived>& other)$/;"	f	class:TriangularView
operator -=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    template<typename Other> TriangularView&  operator-=(const DenseBase<Other>& other) { return *this = m_matrix - other.derived(); }$/;"	f	class:TriangularView
operator /=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    TriangularView&  operator\/=(const typename internal::traits<MatrixType>::Scalar& other) { return *this = m_matrix \/ other; }$/;"	f	class:TriangularView
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    EIGEN_STRONG_INLINE TriangularView& operator=(const ProductBase<ProductDerived, Lhs,Rhs>& other)$/;"	f	class:TriangularView
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    EIGEN_STRONG_INLINE TriangularView& operator=(const ScaledProduct<ProductDerived>& other)$/;"	f	class:TriangularView
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    TriangularView& operator=(const TriangularView& other)$/;"	f	class:TriangularView
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^TriangularView<MatrixType, Mode>::operator=(const MatrixBase<OtherDerived>& other)$/;"	f	class:TriangularView
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^TriangularView<MatrixType, Mode>::operator=(const TriangularBase<OtherDerived>& other)$/;"	f	class:TriangularView
outerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline Index outerStride() const { return derived().outerStride(); }$/;"	f	class:TriangularBase
outerStride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline Index outerStride() const { return m_matrix.outerStride(); }$/;"	f	class:TriangularView
part	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^const typename internal::eigen2_part_return_type<Derived, Mode>::type MatrixBase<Derived>::part() const$/;"	f	class:MatrixBase
part	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^typename internal::eigen2_part_return_type<Derived, Mode>::type MatrixBase<Derived>::part()$/;"	f	class:MatrixBase
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    row = (UnrollCount-1) % Derived1::RowsAtCompileTime$/;"	e	enum:internal::triangular_assignment_selector::<anonymous>
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline Index rows() const { return derived().rows(); }$/;"	f	class:TriangularBase
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:TriangularView
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^  inline static void run(Derived1 &, const Derived2 &) {}$/;"	f	struct:internal::triangular_assignment_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^  inline static void run(Derived1 &dst, const Derived2 &src)$/;"	f	struct:internal::triangular_assignment_selector
selfadjointView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    SelfAdjointView<MatrixTypeNestedNonRef,Mode> selfadjointView()$/;"	f	class:TriangularView
selfadjointView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    const SelfAdjointView<MatrixTypeNestedNonRef,Mode> selfadjointView() const$/;"	f	class:TriangularView
setConstant	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    TriangularView& setConstant(const Scalar& value)$/;"	f	class:TriangularView
setOnes	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    TriangularView& setOnes() { return setConstant(Scalar(1)); }$/;"	f	class:TriangularView
setZero	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    TriangularView& setZero() { return setConstant(Scalar(0)); }$/;"	f	class:TriangularView
solve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    solve(const MatrixBase<Other>& other) const$/;"	f	class:TriangularView
solveInPlace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    void solveInPlace(const MatrixBase<OtherDerived>& other) const$/;"	f	class:TriangularView
swap	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    void swap(MatrixBase<OtherDerived> const & other)$/;"	f	class:TriangularView
swap	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    void swap(TriangularBase<OtherDerived> const & other)$/;"	f	class:TriangularView
toDenseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    DenseMatrixType toDenseMatrix() const$/;"	f	class:TriangularBase
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^struct traits<TriangularView<MatrixType, _Mode> > : traits<MatrixType>$/;"	s	namespace:internal
transpose	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline TriangularView<Transpose<MatrixType>,TransposeMode> transpose()$/;"	f	class:TriangularView
transpose	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^    inline const TriangularView<Transpose<MatrixType>,TransposeMode> transpose() const$/;"	f	class:TriangularView
triangularView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^MatrixBase<Derived>::triangularView() const$/;"	f	class:MatrixBase
triangularView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^MatrixBase<Derived>::triangularView()$/;"	f	class:MatrixBase
triangular_assignment_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^struct triangular_assignment_selector$/;"	s	namespace:internal
triangular_assignment_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^struct triangular_assignment_selector<Derived1, Derived2, Lower, Dynamic, ClearOpposite>$/;"	s	namespace:internal
triangular_assignment_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^struct triangular_assignment_selector<Derived1, Derived2, Mode, 0, ClearOpposite>$/;"	s	namespace:internal
triangular_assignment_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^struct triangular_assignment_selector<Derived1, Derived2, StrictlyLower, Dynamic, ClearOpposite>$/;"	s	namespace:internal
triangular_assignment_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^struct triangular_assignment_selector<Derived1, Derived2, StrictlyUpper, Dynamic, ClearOpposite>$/;"	s	namespace:internal
triangular_assignment_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^struct triangular_assignment_selector<Derived1, Derived2, UnitLower, Dynamic, ClearOpposite>$/;"	s	namespace:internal
triangular_assignment_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^struct triangular_assignment_selector<Derived1, Derived2, UnitUpper, Dynamic, ClearOpposite>$/;"	s	namespace:internal
triangular_assignment_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^struct triangular_assignment_selector<Derived1, Derived2, Upper, Dynamic, ClearOpposite>$/;"	s	namespace:internal
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^      typedef typename ProdRetType::PlainObject type;$/;"	t	struct:TriangularView::eigen2_product_return_type
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^  typedef SelfAdjointView<MatrixType, Upper> type;$/;"	t	struct:internal::eigen2_part_return_type
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/TriangularMatrix.h	/^  typedef TriangularView<MatrixType, Mode> type;$/;"	t	struct:internal::eigen2_part_return_type
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	/^                     internal::traits<VectorType>::Flags & RowMajorBit ? Size : 1> Base;$/;"	t	class:VectorBlock
EIGEN_VECTORBLOCK_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	27;"	d
IsColVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	/^      IsColVector = !(internal::traits<VectorType>::Flags & RowMajorBit)$/;"	e	enum:VectorBlock::<anonymous>
VectorBlock	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	/^    inline VectorBlock(VectorType& vector, Index start)$/;"	f	class:VectorBlock
VectorBlock	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	/^    inline VectorBlock(VectorType& vector, Index start, Index size)$/;"	f	class:VectorBlock
VectorBlock	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	/^template<typename VectorType, int Size> class VectorBlock$/;"	c
head	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	/^DenseBase<Derived>::head() const$/;"	f	class:DenseBase
head	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	/^DenseBase<Derived>::head()$/;"	f	class:DenseBase
head	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	/^DenseBase<Derived>::head(Index size) const$/;"	f	class:DenseBase
head	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	/^DenseBase<Derived>::head(Index size)$/;"	f	class:DenseBase
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	/^namespace internal {$/;"	n
segment	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	/^DenseBase<Derived>::segment(Index start) const$/;"	f	class:DenseBase
segment	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	/^DenseBase<Derived>::segment(Index start)$/;"	f	class:DenseBase
segment	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	/^DenseBase<Derived>::segment(Index start, Index size) const$/;"	f	class:DenseBase
segment	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	/^DenseBase<Derived>::segment(Index start, Index size)$/;"	f	class:DenseBase
tail	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	/^DenseBase<Derived>::tail() const$/;"	f	class:DenseBase
tail	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	/^DenseBase<Derived>::tail()$/;"	f	class:DenseBase
tail	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	/^DenseBase<Derived>::tail(Index size) const$/;"	f	class:DenseBase
tail	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	/^DenseBase<Derived>::tail(Index size)$/;"	f	class:DenseBase
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorBlock.h	/^struct traits<VectorBlock<VectorType, Size> >$/;"	s	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    typedef typename internal::dense_xpr_base<PartialReduxExpr>::type Base;$/;"	t	class:PartialReduxExpr
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    CoeffReadCost = TraversalSize * traits<_MatrixTypeNested>::CoeffReadCost + int(CostOpType::value)$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    ColsAtCompileTime = Direction==Horizontal ? 1 : MatrixType::ColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^  template<typename _Scalar, int Size> struct Cost$/;"	s	struct:internal::member_redux
CostOpType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^  typedef typename MemberOp::template Cost<InputScalar,TraversalSize> CostOpType;$/;"	t	struct:internal::traits
CostOpType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^  typedef typename MemberOp::template Cost<InputScalar,int(TraversalSize)> CostOpType;$/;"	t	struct:internal::traits
CrossReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    typedef typename ExpressionType::PlainObject CrossReturnType;$/;"	t	class:VectorwiseOp
EIGEN_MEMBER_FUNCTOR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	117;"	d
EIGEN_PARTIAL_REDUX_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	27;"	d
ExpressionTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^        ExpressionType, ExpressionType&>::type ExpressionTypeNested;$/;"	t	class:VectorwiseOp
ExpressionTypeNestedCleaned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    typedef typename internal::remove_all<ExpressionTypeNested>::type ExpressionTypeNestedCleaned;$/;"	t	class:VectorwiseOp
ExtendedType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    template<typename OtherDerived> struct ExtendedType {$/;"	s	class:VectorwiseOp
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    Flags = (Flags0 & ~RowMajorBit) | (RowsAtCompileTime == 1 ? RowMajorBit : 0),$/;"	e	enum:internal::traits::<anonymous>
Flags0	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    Flags0 = (unsigned int)_MatrixTypeNested::Flags & HereditaryBits,$/;"	e	enum:internal::traits::<anonymous>
HNormalizedReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^            HNormalizedReturnType;$/;"	t	class:VectorwiseOp
HNormalized_Block	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^            HNormalized_Block;$/;"	t	class:VectorwiseOp
HNormalized_Factors	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^            HNormalized_Factors;$/;"	t	class:VectorwiseOp
HNormalized_Size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^      HNormalized_Size = Direction==Vertical ? internal::traits<ExpressionType>::RowsAtCompileTime$/;"	e	enum:VectorwiseOp::<anonymous>
HNormalized_SizeMinusOne	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^      HNormalized_SizeMinusOne = HNormalized_Size==Dynamic ? Dynamic : HNormalized_Size-1$/;"	e	enum:VectorwiseOp::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    typedef typename ExpressionType::Index Index;$/;"	t	class:VectorwiseOp
InputScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^  typedef typename MatrixType::Scalar InputScalar;$/;"	t	struct:internal::traits
IsHorizontal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^      IsHorizontal = (Direction==Horizontal) ? 1 : 0$/;"	e	enum:VectorwiseOp::<anonymous>
IsVertical	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^      IsVertical   = (Direction==Vertical) ? 1 : 0,$/;"	e	enum:VectorwiseOp::<anonymous>
MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    typedef typename internal::traits<PartialReduxExpr>::MatrixTypeNested MatrixTypeNested;$/;"	t	class:PartialReduxExpr
MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^  typedef typename nested<MatrixType>::type MatrixTypeNested;$/;"	t	struct:internal::traits
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    MaxColsAtCompileTime = Direction==Horizontal ? 1 : MatrixType::MaxColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    MaxRowsAtCompileTime = Direction==Vertical   ? 1 : MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
PartialReduxExpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    PartialReduxExpr(const MatrixType& mat, const MemberOp& func = MemberOp())$/;"	f	class:PartialReduxExpr
PartialReduxExpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^class PartialReduxExpr : internal::no_assignment_operator,$/;"	c
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    typedef typename ExpressionType::RealScalar RealScalar;$/;"	t	class:VectorwiseOp
ReduxReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    template<typename BinaryOp> struct ReduxReturnType$/;"	s	class:VectorwiseOp
ReplicateReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    typedef Replicate<ExpressionType,Direction==Vertical?Dynamic:1,Direction==Horizontal?Dynamic:1> ReplicateReturnType;$/;"	t	class:VectorwiseOp
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^                      typename Scalar=typename internal::traits<ExpressionType>::Scalar> struct ReturnType$/;"	s	class:VectorwiseOp
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    RowsAtCompileTime = Direction==Vertical   ? 1 : MatrixType::RowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    typedef typename ExpressionType::Scalar Scalar;$/;"	t	class:VectorwiseOp
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^  typedef typename MemberOp::result_type Scalar;$/;"	t	struct:internal::traits
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^  typedef typename traits<MatrixType>::StorageKind StorageKind;$/;"	t	struct:internal::traits
SubVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^                               typename ExpressionType::RowXpr>::type SubVector;$/;"	t	class:VectorwiseOp
TraversalSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    TraversalSize = Direction==Vertical ? RowsAtCompileTime : ColsAtCompileTime$/;"	e	enum:internal::traits::<anonymous>
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^                              > Type;$/;"	t	struct:VectorwiseOp::ReduxReturnType
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^                              > Type;$/;"	t	struct:VectorwiseOp::ReturnType
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^                        Direction==Horizontal ? 1 : ExpressionType::ColsAtCompileTime> Type;$/;"	t	struct:VectorwiseOp::ExtendedType
VectorwiseOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    inline VectorwiseOp(ExpressionType& matrix) : m_matrix(matrix) {}$/;"	f	class:VectorwiseOp
VectorwiseOp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^template<typename ExpressionType, int Direction> class VectorwiseOp$/;"	c
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^  typedef typename traits<MatrixType>::XprKind XprKind;$/;"	t	struct:internal::traits
_MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    typedef typename internal::traits<PartialReduxExpr>::_MatrixTypeNested _MatrixTypeNested;$/;"	t	class:PartialReduxExpr
_MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^  typedef typename remove_all<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	struct:internal::traits
_expression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    inline const ExpressionType& _expression() const { return m_matrix; }$/;"	f	class:VectorwiseOp
all	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_all>::Type all() const$/;"	f	class:VectorwiseOp
any	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_any>::Type any() const$/;"	f	class:VectorwiseOp
blueNorm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_blueNorm,RealScalar>::Type blueNorm() const$/;"	f	class:VectorwiseOp
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index i, Index j) const$/;"	f	class:PartialReduxExpr
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    const Scalar coeff(Index index) const$/;"	f	class:PartialReduxExpr
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    Index cols() const { return (Direction==Horizontal ? 1 : m_matrix.cols()); }$/;"	f	class:PartialReduxExpr
colwise	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^DenseBase<Derived>::colwise() const$/;"	f	class:DenseBase
colwise	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^DenseBase<Derived>::colwise()$/;"	f	class:DenseBase
count	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    const PartialReduxExpr<ExpressionType, internal::member_count<Index>, Direction> count() const$/;"	f	class:VectorwiseOp
extendedTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    extendedTo(const DenseBase<OtherDerived>& other) const$/;"	f	class:VectorwiseOp
hypotNorm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_hypotNorm,RealScalar>::Type hypotNorm() const$/;"	f	class:VectorwiseOp
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^namespace internal {$/;"	n
m_functor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    const MemberOp m_functor;$/;"	m	class:PartialReduxExpr
m_functor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^  const BinaryOp m_functor;$/;"	m	struct:internal::member_redux
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    ExpressionTypeNested m_matrix;$/;"	m	class:VectorwiseOp
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    const MatrixTypeNested m_matrix;$/;"	m	class:PartialReduxExpr
maxCoeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_maxCoeff>::Type maxCoeff() const$/;"	f	class:VectorwiseOp
mean	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_mean>::Type mean() const$/;"	f	class:VectorwiseOp
member_redux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^  member_redux(const BinaryOp func) : m_functor(func) {}$/;"	f	struct:internal::member_redux
member_redux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^struct member_redux {$/;"	s	namespace:internal
minCoeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_minCoeff>::Type minCoeff() const$/;"	f	class:VectorwiseOp
norm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_norm,RealScalar>::Type norm() const$/;"	f	class:VectorwiseOp
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^  inline result_type operator()(const DenseBase<Derived>& mat) const$/;"	f	struct:internal::member_redux
operator +	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    operator+(const DenseBase<OtherDerived>& other) const$/;"	f	class:VectorwiseOp
operator +=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    ExpressionType& operator+=(const DenseBase<OtherDerived>& other)$/;"	f	class:VectorwiseOp
operator -	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    operator-(const DenseBase<OtherDerived>& other) const$/;"	f	class:VectorwiseOp
operator -=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    ExpressionType& operator-=(const DenseBase<OtherDerived>& other)$/;"	f	class:VectorwiseOp
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    ExpressionType& operator=(const DenseBase<OtherDerived>& other)$/;"	f	class:VectorwiseOp
prod	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_prod>::Type prod() const$/;"	f	class:VectorwiseOp
redux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    redux(const BinaryOp& func = BinaryOp()) const$/;"	f	class:VectorwiseOp
replicate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    replicate(Index factor = Factor) const$/;"	f	class:VectorwiseOp
result_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^                   >::type  result_type;$/;"	t	struct:internal::member_redux
reverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    const Reverse<ExpressionType, Direction> reverse() const$/;"	f	class:VectorwiseOp
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    Index rows() const { return (Direction==Vertical   ? 1 : m_matrix.rows()); }$/;"	f	class:PartialReduxExpr
rowwise	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^DenseBase<Derived>::rowwise() const$/;"	f	class:DenseBase
rowwise	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^DenseBase<Derived>::rowwise()$/;"	f	class:DenseBase
squaredNorm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_squaredNorm,RealScalar>::Type squaredNorm() const$/;"	f	class:VectorwiseOp
stableNorm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_stableNorm,RealScalar>::Type stableNorm() const$/;"	f	class:VectorwiseOp
subVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    SubVector subVector(Index i)$/;"	f	class:VectorwiseOp
subVectors	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    Index subVectors() const$/;"	f	class:VectorwiseOp
sum	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^    const typename ReturnType<internal::member_sum>::Type sum() const$/;"	f	class:VectorwiseOp
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^struct traits<PartialReduxExpr<MatrixType, MemberOp, Direction> >$/;"	s	namespace:internal
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/VectorwiseOp.h	/^  { enum { value = (Size-1) * functor_traits<BinaryOp>::Cost }; };$/;"	e	enum:internal::member_redux::Cost::<anonymous>
Cost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^    Cost = NumTraits<Scalar>::AddCost$/;"	e	enum:internal::functor_traits::<anonymous>
EIGEN_VISITOR_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^  typedef typename Derived::Index Index;$/;"	t	struct:internal::coeff_visitor
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^  typedef typename Derived::Index Index;$/;"	t	struct:internal::max_coeff_visitor
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^  typedef typename Derived::Index Index;$/;"	t	struct:internal::min_coeff_visitor
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^  typedef typename Derived::Index Index;$/;"	t	struct:internal::visitor_impl
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^  typedef typename Derived::Scalar Scalar;$/;"	t	struct:internal::coeff_visitor
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^  typedef typename Derived::Scalar Scalar;$/;"	t	struct:internal::max_coeff_visitor
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^  typedef typename Derived::Scalar Scalar;$/;"	t	struct:internal::min_coeff_visitor
coeff_visitor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^struct coeff_visitor$/;"	s	namespace:internal
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^    col = (UnrollCount-1) \/ Derived::RowsAtCompileTime,$/;"	e	enum:internal::visitor_impl::<anonymous>
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^  Index row, col;$/;"	m	struct:internal::coeff_visitor
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^struct functor_traits<max_coeff_visitor<Scalar> > {$/;"	s	namespace:internal
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^struct functor_traits<min_coeff_visitor<Scalar> > {$/;"	s	namespace:internal
init	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^  inline void init(const Scalar& value, Index i, Index j)$/;"	f	struct:internal::coeff_visitor
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^namespace internal {$/;"	n
maxCoeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^DenseBase<Derived>::maxCoeff(IndexType* index) const$/;"	f	class:DenseBase
maxCoeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^DenseBase<Derived>::maxCoeff(IndexType* row, IndexType* col) const$/;"	f	class:DenseBase
max_coeff_visitor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^struct max_coeff_visitor : coeff_visitor<Derived>$/;"	s	namespace:internal
minCoeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^DenseBase<Derived>::minCoeff(IndexType* index) const$/;"	f	class:DenseBase
minCoeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^DenseBase<Derived>::minCoeff(IndexType* row, IndexType* col) const$/;"	f	class:DenseBase
min_coeff_visitor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^struct min_coeff_visitor : coeff_visitor<Derived>$/;"	s	namespace:internal
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^  void operator() (const Scalar& value, Index i, Index j)$/;"	f	struct:internal::max_coeff_visitor
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^  void operator() (const Scalar& value, Index i, Index j)$/;"	f	struct:internal::min_coeff_visitor
res	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^  Scalar res;$/;"	m	struct:internal::coeff_visitor
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^    row = (UnrollCount-1) % Derived::RowsAtCompileTime$/;"	e	enum:internal::visitor_impl::<anonymous>
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^  Index row, col;$/;"	m	struct:internal::coeff_visitor
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^  inline static void run(const Derived &mat, Visitor& visitor)$/;"	f	struct:internal::visitor_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^  inline static void run(const Derived& mat, Visitor& visitor)$/;"	f	struct:internal::visitor_impl
visit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^void DenseBase<Derived>::visit(Visitor& visitor) const$/;"	f	class:DenseBase
visitor_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^struct visitor_impl$/;"	s	namespace:internal
visitor_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^struct visitor_impl<Visitor, Derived, 1>$/;"	s	namespace:internal
visitor_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/Visitor.h	/^struct visitor_impl<Visitor, Derived, Dynamic>$/;"	s	namespace:internal
AlignedOnScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^    AlignedOnScalar = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
EIGEN_COMPLEX_ALTIVEC_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	26;"	d
HasAbs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasAbs    = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasAbs2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasAbs2   = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasAdd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasAdd    = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
HasDiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasDiv    = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
HasMax	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasMax    = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasMin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasMin    = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasMul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasMul    = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
HasNegate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasNegate = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
HasSetLinear	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasSetLinear = 0$/;"	e	enum:internal::packet_traits::<anonymous>
HasSub	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^    HasSub    = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
Packet2cf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf() {}$/;"	f	struct:internal::Packet2cf
Packet2cf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^  EIGEN_STRONG_INLINE explicit Packet2cf(const Packet4f& a) : v(a) {}$/;"	f	struct:internal::Packet2cf
Packet2cf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^struct Packet2cf$/;"	s	namespace:internal
Vectorizable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^    Vectorizable = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet2cf, false,true>$/;"	s	namespace:internal
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet2cf, true,false>$/;"	s	namespace:internal
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet2cf, true,true>$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^namespace internal {$/;"	n
p16uc_COMPLEX_IM	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^static Packet16uc p16uc_COMPLEX_IM   = vec_sld((Packet16uc) vec_splat((Packet4ui)p16uc_FORWARD, 1), (Packet16uc) vec_splat((Packet4ui)p16uc_FORWARD, 3), 8);\/\/{ 4,5,6,7, 4,5,6,7, 12,13,14,15, 12,13,14,15 };$/;"	v
p16uc_COMPLEX_RE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^static Packet16uc p16uc_COMPLEX_RE   = vec_sld((Packet16uc) vec_splat((Packet4ui)p16uc_FORWARD, 0), (Packet16uc) vec_splat((Packet4ui)p16uc_FORWARD, 2), 8);\/\/{ 0,1,2,3, 0,1,2,3, 8,9,10,11, 8,9,10,11 };$/;"	v
p16uc_COMPLEX_REV	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^static Packet16uc p16uc_COMPLEX_REV  = vec_sld(p16uc_REVERSE, p16uc_REVERSE, 8);\/\/{ 4,5,6,7, 0,1,2,3, 12,13,14,15, 8,9,10,11 };$/;"	v
p16uc_COMPLEX_REV2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^static Packet16uc p16uc_COMPLEX_REV2 = vec_sld(p16uc_FORWARD, p16uc_FORWARD, 8);\/\/{ 8,9,10,11, 12,13,14,15, 0,1,2,3, 4,5,6,7 };$/;"	v
p16uc_PSET_HI	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^static Packet16uc p16uc_PSET_HI = (Packet16uc) vec_mergeh((Packet4ui) vec_splat((Packet4ui)p16uc_FORWARD, 0), (Packet4ui) vec_splat((Packet4ui)p16uc_FORWARD, 1));\/\/{ 0,1,2,3, 4,5,6,7, 0,1,2,3, 4,5,6,7 };$/;"	v
p16uc_PSET_LO	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^static Packet16uc p16uc_PSET_LO = (Packet16uc) vec_mergeh((Packet4ui) vec_splat((Packet4ui)p16uc_FORWARD, 2), (Packet4ui) vec_splat((Packet4ui)p16uc_FORWARD, 3));\/\/{ 8,9,10,11, 12,13,14,15, 8,9,10,11, 12,13,14,15 };$/;"	v
p4ui_CONJ_XOR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^static Packet4ui  p4ui_CONJ_XOR = vec_mergeh((Packet4ui)p4i_ZERO, (Packet4ui)p4f_ZERO_);\/\/{ 0x00000000, 0x80000000, 0x00000000, 0x80000000 };$/;"	v
packet_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> struct packet_traits<std::complex<float> >  : default_packet_traits$/;"	s	namespace:internal
padd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf padd<Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(vec_add(a.v,b.v)); }$/;"	f	namespace:internal
palign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^struct palign_impl<Offset,Packet2cf>$/;"	s	namespace:internal
pand	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pand   <Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(vec_and(a.v,b.v)); }$/;"	f	namespace:internal
pandnot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pandnot<Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(vec_and(a.v, vec_nor(b.v,b.v))); }$/;"	f	namespace:internal
pconj	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pconj(const Packet2cf& a) { return Packet2cf((Packet4f)vec_xor((Packet4ui)a.v, p4ui_CONJ_XOR)); }$/;"	f	namespace:internal
pcplxflip	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pcplxflip<Packet2cf>(const Packet2cf& x)$/;"	f	namespace:internal
pdiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pdiv<Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:internal
pfirst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<float>  pfirst<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:internal
pload	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pload <Packet2cf>(const std::complex<float>* from) { EIGEN_DEBUG_ALIGNED_LOAD return Packet2cf(pload<Packet4f>((const float*)from)); }$/;"	f	namespace:internal
ploaddup	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf ploaddup<Packet2cf>(const std::complex<float>*     from)$/;"	f	namespace:internal
ploadu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf ploadu<Packet2cf>(const std::complex<float>* from) { EIGEN_DEBUG_UNALIGNED_LOAD return Packet2cf(ploadu<Packet4f>((const float*)from)); }$/;"	f	namespace:internal
pmadd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmadd(const Packet2cf& x, const Packet2cf& y, const Packet2cf& c) const$/;"	f	struct:internal::conj_helper
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmul(const Packet2cf& a, const Packet2cf& b) const$/;"	f	struct:internal::conj_helper
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pmul<Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:internal
pnegate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pnegate(const Packet2cf& a) { return Packet2cf(pnegate(a.v)); }$/;"	f	namespace:internal
por	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf por    <Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(vec_or(a.v,b.v)); }$/;"	f	namespace:internal
predux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<float> predux<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:internal
predux_mul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<float> predux_mul<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:internal
preduxp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf preduxp<Packet2cf>(const Packet2cf* vecs)$/;"	f	namespace:internal
prefetch	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE void prefetch<std::complex<float> >(const std::complex<float> *   addr) { vec_dstt((float *)addr, DST_CTRL(2,2,32), DST_CHAN); }$/;"	f	namespace:internal
preverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf preverse(const Packet2cf& a)$/;"	f	namespace:internal
pset1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pset1<Packet2cf>(const std::complex<float>&  from)$/;"	f	namespace:internal
pstore	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE void pstore <std::complex<float> >(std::complex<float> *   to, const Packet2cf& from) { EIGEN_DEBUG_ALIGNED_STORE pstore((float*)to, from.v); }$/;"	f	namespace:internal
pstoreu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<std::complex<float> >(std::complex<float> *   to, const Packet2cf& from) { EIGEN_DEBUG_UNALIGNED_STORE pstoreu((float*)to, from.v); }$/;"	f	namespace:internal
psub	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf psub<Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(vec_sub(a.v,b.v)); }$/;"	f	namespace:internal
pxor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pxor   <Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(vec_xor(a.v,b.v)); }$/;"	f	namespace:internal
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^  EIGEN_STRONG_INLINE static void run(Packet2cf& first, const Packet2cf& second)$/;"	f	struct:internal::palign_impl
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^    size = 2,$/;"	e	enum:internal::packet_traits::<anonymous>
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> struct unpacket_traits<Packet2cf> { typedef std::complex<float> type; enum {size=2}; };$/;"	e	enum:internal::unpacket_traits::<anonymous>
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^  typedef Packet2cf type;$/;"	t	struct:internal::packet_traits
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> struct unpacket_traits<Packet2cf> { typedef std::complex<float> type; enum {size=2}; };$/;"	t	struct:internal::unpacket_traits
unpacket_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^template<> struct unpacket_traits<Packet2cf> { typedef std::complex<float> type; enum {size=2}; };$/;"	s	namespace:internal
v	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/Complex.h	/^  Packet4f  v;$/;"	m	struct:internal::Packet2cf
AlignedOnScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    AlignedOnScalar = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
DST_CHAN	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	68;"	d
DST_CTRL	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	69;"	d
EIGEN_ARCH_DEFAULT_NUMBER_OF_REGISTERS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	40;"	d
EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	31;"	d
EIGEN_HAS_FUSE_CJMADD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	35;"	d
EIGEN_PACKET_MATH_ALTIVEC_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	26;"	d
HasCos	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    HasCos  = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasExp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    HasExp  = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasLog	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    HasLog  = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasSin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    HasSin  = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasSqrt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    HasSqrt = 0$/;"	e	enum:internal::packet_traits::<anonymous>
Packet16uc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^typedef __vector unsigned char  Packet16uc;$/;"	t	namespace:internal
Packet4bi	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^typedef __vector __bool int     Packet4bi;$/;"	t	namespace:internal
Packet4f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^typedef __vector float          Packet4f;$/;"	t	namespace:internal
Packet4i	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^typedef __vector int            Packet4i;$/;"	t	namespace:internal
Packet4ui	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^typedef __vector unsigned int   Packet4ui;$/;"	t	namespace:internal
Packet8i	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^typedef __vector short int      Packet8i;$/;"	t	namespace:internal
Vectorizable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    Vectorizable = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
_EIGEN_DECLARE_CONST_FAST_Packet4f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	53;"	d
_EIGEN_DECLARE_CONST_FAST_Packet4i	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	56;"	d
_EIGEN_DECLARE_CONST_Packet4f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	59;"	d
_EIGEN_DECLARE_CONST_Packet4f_FROM_INT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	62;"	d
_EIGEN_DECLARE_CONST_Packet4i	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	65;"	d
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^namespace internal {$/;"	n
p16uc_DUPLICATE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^static Packet16uc p16uc_DUPLICATE = {0,1,2,3, 0,1,2,3, 4,5,6,7, 4,5,6,7};$/;"	v
p16uc_FORWARD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^static Packet16uc p16uc_FORWARD = vec_lvsl(0, (float*)0);$/;"	v
p16uc_REVERSE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^static Packet16uc p16uc_REVERSE = {12,13,14,15, 8,9,10,11, 4,5,6,7, 0,1,2,3};$/;"	v
p4f_COUNTDOWN	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^static Packet4f p4f_COUNTDOWN = { 3.0, 2.0, 1.0, 0.0 };$/;"	v
p4f_ONE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^static Packet4f p4f_ONE = vec_ctf(p4i_ONE, 0);$/;"	v
p4f_ZERO_	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^static Packet4f p4f_ZERO_ = (Packet4f) vec_sl((Packet4ui)p4i_MINUS1, (Packet4ui)p4i_MINUS1);$/;"	v
p4i_COUNTDOWN	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^static Packet4i p4i_COUNTDOWN = { 3, 2, 1, 0 };$/;"	v
pabs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pabs(const Packet4f& a) { return vec_abs(a); }$/;"	f	namespace:internal
pabs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pabs(const Packet4i& a) { return vec_abs(a); }$/;"	f	namespace:internal
packet_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> struct packet_traits<float>  : default_packet_traits$/;"	s	namespace:internal
packet_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> struct packet_traits<int>    : default_packet_traits$/;"	s	namespace:internal
padd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f padd<Packet4f>(const Packet4f& a, const Packet4f& b) { return vec_add(a,b); }$/;"	f	namespace:internal
padd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i padd<Packet4i>(const Packet4i& a, const Packet4i& b) { return vec_add(a,b); }$/;"	f	namespace:internal
palign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^struct palign_impl<Offset,Packet4f>$/;"	s	namespace:internal
palign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^struct palign_impl<Offset,Packet4i>$/;"	s	namespace:internal
pand	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pand<Packet4f>(const Packet4f& a, const Packet4f& b) { return vec_and(a, b); }$/;"	f	namespace:internal
pand	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pand<Packet4i>(const Packet4i& a, const Packet4i& b) { return vec_and(a, b); }$/;"	f	namespace:internal
pandnot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pandnot<Packet4f>(const Packet4f& a, const Packet4f& b) { return vec_and(a, vec_nor(b, b)); }$/;"	f	namespace:internal
pandnot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pandnot<Packet4i>(const Packet4i& a, const Packet4i& b) { return vec_and(a, vec_nor(b, b)); }$/;"	f	namespace:internal
pdiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pdiv<Packet4f>(const Packet4f& a, const Packet4f& b)$/;"	f	namespace:internal
pdiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pdiv<Packet4i>(const Packet4i& \/*a*\/, const Packet4i& \/*b*\/)$/;"	f	namespace:internal
pfirst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float  pfirst<Packet4f>(const Packet4f& a) { float EIGEN_ALIGN16 x[4]; vec_st(a, 0, x); return x[0]; }$/;"	f	namespace:internal
pfirst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int    pfirst<Packet4i>(const Packet4i& a) { int   EIGEN_ALIGN16 x[4]; vec_st(a, 0, x); return x[0]; }$/;"	f	namespace:internal
pload	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pload<Packet4f>(const float* from) { EIGEN_DEBUG_ALIGNED_LOAD return vec_ld(0, from); }$/;"	f	namespace:internal
pload	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pload<Packet4i>(const int*     from) { EIGEN_DEBUG_ALIGNED_LOAD return vec_ld(0, from); }$/;"	f	namespace:internal
ploaddup	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f ploaddup<Packet4f>(const float*   from)$/;"	f	namespace:internal
ploaddup	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i ploaddup<Packet4i>(const int*     from)$/;"	f	namespace:internal
ploadu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f ploadu<Packet4f>(const float* from)$/;"	f	namespace:internal
ploadu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i ploadu<Packet4i>(const int* from)$/;"	f	namespace:internal
plset	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f plset<float>(const float& a) { return vec_add(pset1<Packet4f>(a), p4f_COUNTDOWN); }$/;"	f	namespace:internal
plset	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i plset<int>(const int& a)     { return vec_add(pset1<Packet4i>(a), p4i_COUNTDOWN); }$/;"	f	namespace:internal
pmadd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmadd(const Packet4f& a, const Packet4f& b, const Packet4f& c) { return vec_madd(a, b, c); }$/;"	f	namespace:internal
pmadd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmadd(const Packet4i& a, const Packet4i& b, const Packet4i& c) { return padd(pmul(a,b), c); }$/;"	f	namespace:internal
pmax	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmax<Packet4f>(const Packet4f& a, const Packet4f& b) { return vec_max(a, b); }$/;"	f	namespace:internal
pmax	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmax<Packet4i>(const Packet4i& a, const Packet4i& b) { return vec_max(a, b); }$/;"	f	namespace:internal
pmin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmin<Packet4f>(const Packet4f& a, const Packet4f& b) { return vec_min(a, b); }$/;"	f	namespace:internal
pmin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmin<Packet4i>(const Packet4i& a, const Packet4i& b) { return vec_min(a, b); }$/;"	f	namespace:internal
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmul<Packet4f>(const Packet4f& a, const Packet4f& b) { return vec_madd(a,b,p4f_ZERO); }$/;"	f	namespace:internal
pnegate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pnegate(const Packet4f& a) { return psub<Packet4f>(p4f_ZERO, a); }$/;"	f	namespace:internal
pnegate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pnegate(const Packet4i& a) { return psub<Packet4i>(p4i_ZERO, a); }$/;"	f	namespace:internal
por	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f por<Packet4f>(const Packet4f& a, const Packet4f& b) { return vec_or(a, b); }$/;"	f	namespace:internal
por	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i por<Packet4i>(const Packet4i& a, const Packet4i& b) { return vec_or(a, b); }$/;"	f	namespace:internal
predux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux<Packet4f>(const Packet4f& a)$/;"	f	namespace:internal
predux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux<Packet4i>(const Packet4i& a)$/;"	f	namespace:internal
predux_max	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux_max<Packet4f>(const Packet4f& a)$/;"	f	namespace:internal
predux_max	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux_max<Packet4i>(const Packet4i& a)$/;"	f	namespace:internal
predux_min	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux_min<Packet4f>(const Packet4f& a)$/;"	f	namespace:internal
predux_min	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux_min<Packet4i>(const Packet4i& a)$/;"	f	namespace:internal
predux_mul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux_mul<Packet4f>(const Packet4f& a)$/;"	f	namespace:internal
predux_mul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux_mul<Packet4i>(const Packet4i& a)$/;"	f	namespace:internal
preduxp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f preduxp<Packet4f>(const Packet4f* vecs)$/;"	f	namespace:internal
preduxp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i preduxp<Packet4i>(const Packet4i* vecs)$/;"	f	namespace:internal
prefetch	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void prefetch<float>(const float* addr) { vec_dstt(addr, DST_CTRL(2,2,32), DST_CHAN); }$/;"	f	namespace:internal
prefetch	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void prefetch<int>(const int*     addr) { vec_dstt(addr, DST_CTRL(2,2,32), DST_CHAN); }$/;"	f	namespace:internal
preverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f preverse(const Packet4f& a) { return (Packet4f)vec_perm((Packet16uc)a,(Packet16uc)a, p16uc_REVERSE); }$/;"	f	namespace:internal
preverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i preverse(const Packet4i& a) { return (Packet4i)vec_perm((Packet16uc)a,(Packet16uc)a, p16uc_REVERSE); }$/;"	f	namespace:internal
pset1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pset1<Packet4f>(const float&  from) {$/;"	f	namespace:internal
pset1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pset1<Packet4i>(const int&    from)   {$/;"	f	namespace:internal
pstore	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstore<float>(float*   to, const Packet4f& from) { EIGEN_DEBUG_ALIGNED_STORE vec_st(from, 0, to); }$/;"	f	namespace:internal
pstore	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstore<int>(int*       to, const Packet4i& from) { EIGEN_DEBUG_ALIGNED_STORE vec_st(from, 0, to); }$/;"	f	namespace:internal
pstoreu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<float>(float*  to, const Packet4f& from)$/;"	f	namespace:internal
pstoreu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<int>(int*      to, const Packet4i& from)$/;"	f	namespace:internal
psub	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f psub<Packet4f>(const Packet4f& a, const Packet4f& b) { return vec_sub(a,b); }$/;"	f	namespace:internal
psub	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i psub<Packet4i>(const Packet4i& a, const Packet4i& b) { return vec_sub(a,b); }$/;"	f	namespace:internal
pxor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pxor<Packet4f>(const Packet4f& a, const Packet4f& b) { return vec_xor(a, b); }$/;"	f	namespace:internal
pxor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pxor<Packet4i>(const Packet4i& a, const Packet4i& b) { return vec_xor(a, b); }$/;"	f	namespace:internal
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^  EIGEN_STRONG_INLINE static void run(Packet4f& first, const Packet4f& second)$/;"	f	struct:internal::palign_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^  EIGEN_STRONG_INLINE static void run(Packet4i& first, const Packet4i& second)$/;"	f	struct:internal::palign_impl
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    size=4$/;"	e	enum:internal::packet_traits::<anonymous>
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^    size=4,$/;"	e	enum:internal::packet_traits::<anonymous>
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4}; };$/;"	e	enum:internal::unpacket_traits::<anonymous>
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4}; };$/;"	e	enum:internal::unpacket_traits::<anonymous>
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^  typedef Packet4f type;$/;"	t	struct:internal::packet_traits
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^  typedef Packet4i type;$/;"	t	struct:internal::packet_traits
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4}; };$/;"	t	struct:internal::unpacket_traits
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4}; };$/;"	t	struct:internal::unpacket_traits
unpacket_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4}; };$/;"	s	namespace:internal
unpacket_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/AltiVec/PacketMath.h	/^template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4}; };$/;"	s	namespace:internal
EIGEN_ARCH_DEFAULT_NUMBER_OF_REGISTERS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/Default/Settings.h	61;"	d
EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/Default/Settings.h	46;"	d
EIGEN_DEFAULT_SETTINGS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/Default/Settings.h	32;"	d
EIGEN_TUNE_TRIANGULAR_PANEL_WIDTH	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/Default/Settings.h	53;"	d
EIGEN_UNROLLING_LIMIT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/Default/Settings.h	39;"	d
AlignedOnScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^    AlignedOnScalar = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
EIGEN_COMPLEX_NEON_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	26;"	d
HasAbs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^    HasAbs    = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasAbs2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^    HasAbs2   = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasAdd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^    HasAdd    = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
HasDiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^    HasDiv    = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
HasMax	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^    HasMax    = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasMin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^    HasMin    = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasMul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^    HasMul    = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
HasNegate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^    HasNegate = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
HasSetLinear	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^    HasSetLinear = 0$/;"	e	enum:internal::packet_traits::<anonymous>
HasSub	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^    HasSub    = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
Packet2cf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf() {}$/;"	f	struct:internal::Packet2cf
Packet2cf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^  EIGEN_STRONG_INLINE explicit Packet2cf(const Packet4f& a) : v(a) {}$/;"	f	struct:internal::Packet2cf
Packet2cf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^struct Packet2cf$/;"	s	namespace:internal
Vectorizable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^    Vectorizable = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet2cf, false,true>$/;"	s	namespace:internal
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet2cf, true,false>$/;"	s	namespace:internal
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet2cf, true,true>$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^namespace internal {$/;"	n
p2ui_CONJ_XOR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^static uint32x2_t p2ui_CONJ_XOR = { 0x00000000, 0x80000000 };$/;"	v
p4ui_CONJ_XOR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^static uint32x4_t p4ui_CONJ_XOR = { 0x00000000, 0x80000000, 0x00000000, 0x80000000 };$/;"	v
packet_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> struct packet_traits<std::complex<float> >  : default_packet_traits$/;"	s	namespace:internal
padd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf padd<Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(padd<Packet4f>(a.v,b.v)); }$/;"	f	namespace:internal
palign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^struct palign_impl<Offset,Packet2cf>$/;"	s	namespace:internal
pand	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pand   <Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:internal
pandnot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pandnot<Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:internal
pconj	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pconj(const Packet2cf& a)$/;"	f	namespace:internal
pcplxflip	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pcplxflip<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:internal
pdiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pdiv<Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:internal
pfirst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<float>  pfirst<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:internal
pload	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pload<Packet2cf>(const std::complex<float>* from) { EIGEN_DEBUG_ALIGNED_LOAD return Packet2cf(pload<Packet4f>((const float*)from)); }$/;"	f	namespace:internal
ploaddup	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf ploaddup<Packet2cf>(const std::complex<float>* from) { return pset1<Packet2cf>(*from); }$/;"	f	namespace:internal
ploadu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf ploadu<Packet2cf>(const std::complex<float>* from) { EIGEN_DEBUG_UNALIGNED_LOAD return Packet2cf(ploadu<Packet4f>((const float*)from)); }$/;"	f	namespace:internal
pmadd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmadd(const Packet2cf& x, const Packet2cf& y, const Packet2cf& c) const$/;"	f	struct:internal::conj_helper
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmul(const Packet2cf& a, const Packet2cf& b) const$/;"	f	struct:internal::conj_helper
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pmul<Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:internal
pnegate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pnegate(const Packet2cf& a) { return Packet2cf(pnegate<Packet4f>(a.v)); }$/;"	f	namespace:internal
por	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf por    <Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:internal
predux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<float> predux<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:internal
predux_mul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<float> predux_mul<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:internal
preduxp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf preduxp<Packet2cf>(const Packet2cf* vecs)$/;"	f	namespace:internal
prefetch	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE void prefetch<std::complex<float> >(const std::complex<float> *   addr) { __pld((float *)addr); }$/;"	f	namespace:internal
preverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf preverse(const Packet2cf& a)$/;"	f	namespace:internal
pset1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pset1<Packet2cf>(const std::complex<float>&  from)$/;"	f	namespace:internal
pstore	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE void pstore <std::complex<float> >(std::complex<float> *   to, const Packet2cf& from) { EIGEN_DEBUG_ALIGNED_STORE pstore((float*)to, from.v); }$/;"	f	namespace:internal
pstoreu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<std::complex<float> >(std::complex<float> *   to, const Packet2cf& from) { EIGEN_DEBUG_UNALIGNED_STORE pstoreu((float*)to, from.v); }$/;"	f	namespace:internal
psub	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf psub<Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(psub<Packet4f>(a.v,b.v)); }$/;"	f	namespace:internal
pxor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pxor   <Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:internal
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^  EIGEN_STRONG_INLINE static void run(Packet2cf& first, const Packet2cf& second)$/;"	f	struct:internal::palign_impl
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^    size = 2,$/;"	e	enum:internal::packet_traits::<anonymous>
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> struct unpacket_traits<Packet2cf> { typedef std::complex<float> type; enum {size=2}; };$/;"	e	enum:internal::unpacket_traits::<anonymous>
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^  typedef Packet2cf type;$/;"	t	struct:internal::packet_traits
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> struct unpacket_traits<Packet2cf> { typedef std::complex<float> type; enum {size=2}; };$/;"	t	struct:internal::unpacket_traits
unpacket_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^template<> struct unpacket_traits<Packet2cf> { typedef std::complex<float> type; enum {size=2}; };$/;"	s	namespace:internal
v	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/Complex.h	/^  Packet4f  v;$/;"	m	struct:internal::Packet2cf
AlignedOnScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^    AlignedOnScalar = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
EIGEN_ARCH_DEFAULT_NUMBER_OF_REGISTERS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	39;"	d
EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	33;"	d
EIGEN_PACKET_MATH_NEON_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	28;"	d
HasCos	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^    HasCos  = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasDiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^    HasDiv  = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
HasExp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^    HasExp  = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasLog	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^    HasLog  = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasSin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^    HasSin  = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasSqrt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^    HasSqrt = 0$/;"	e	enum:internal::packet_traits::<anonymous>
Packet4f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^typedef float32x4_t Packet4f;$/;"	t	namespace:internal
Packet4i	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^typedef int32x4_t   Packet4i;$/;"	t	namespace:internal
Packet4ui	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^typedef uint32x4_t  Packet4ui;$/;"	t	namespace:internal
Vectorizable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^    Vectorizable = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
_EIGEN_DECLARE_CONST_Packet4f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	46;"	d
_EIGEN_DECLARE_CONST_Packet4f_FROM_INT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	49;"	d
_EIGEN_DECLARE_CONST_Packet4i	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	52;"	d
__pld	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	56;"	d
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^namespace internal {$/;"	n
pabs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pabs(const Packet4f& a) { return vabsq_f32(a); }$/;"	f	namespace:internal
pabs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pabs(const Packet4i& a) { return vabsq_s32(a); }$/;"	f	namespace:internal
packet_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> struct packet_traits<float>  : default_packet_traits$/;"	s	namespace:internal
packet_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> struct packet_traits<int>    : default_packet_traits$/;"	s	namespace:internal
padd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f padd<Packet4f>(const Packet4f& a, const Packet4f& b) { return vaddq_f32(a,b); }$/;"	f	namespace:internal
padd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i padd<Packet4i>(const Packet4i& a, const Packet4i& b) { return vaddq_s32(a,b); }$/;"	f	namespace:internal
palign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^struct palign_impl<Offset,Packet4f>$/;"	s	namespace:internal
palign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^struct palign_impl<Offset,Packet4i>$/;"	s	namespace:internal
pand	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pand<Packet4f>(const Packet4f& a, const Packet4f& b)$/;"	f	namespace:internal
pand	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pand<Packet4i>(const Packet4i& a, const Packet4i& b) { return vandq_s32(a,b); }$/;"	f	namespace:internal
pandnot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pandnot<Packet4f>(const Packet4f& a, const Packet4f& b)$/;"	f	namespace:internal
pandnot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pandnot<Packet4i>(const Packet4i& a, const Packet4i& b) { return vbicq_s32(a,b); }$/;"	f	namespace:internal
pdiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pdiv<Packet4f>(const Packet4f& a, const Packet4f& b)$/;"	f	namespace:internal
pdiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pdiv<Packet4i>(const Packet4i& \/*a*\/, const Packet4i& \/*b*\/)$/;"	f	namespace:internal
pfirst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float  pfirst<Packet4f>(const Packet4f& a) { float EIGEN_ALIGN16 x[4]; vst1q_f32(x, a); return x[0]; }$/;"	f	namespace:internal
pfirst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int    pfirst<Packet4i>(const Packet4i& a) { int   EIGEN_ALIGN16 x[4]; vst1q_s32(x, a); return x[0]; }$/;"	f	namespace:internal
pload	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pload<Packet4f>(const float* from) { EIGEN_DEBUG_ALIGNED_LOAD return vld1q_f32(from); }$/;"	f	namespace:internal
pload	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pload<Packet4i>(const int*   from) { EIGEN_DEBUG_ALIGNED_LOAD return vld1q_s32(from); }$/;"	f	namespace:internal
ploaddup	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f ploaddup<Packet4f>(const float*   from)$/;"	f	namespace:internal
ploaddup	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i ploaddup<Packet4i>(const int*     from)$/;"	f	namespace:internal
ploadu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f ploadu<Packet4f>(const float* from) { EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_f32(from); }$/;"	f	namespace:internal
ploadu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i ploadu<Packet4i>(const int* from)   { EIGEN_DEBUG_UNALIGNED_LOAD return vld1q_s32(from); }$/;"	f	namespace:internal
plset	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f plset<float>(const float& a)$/;"	f	namespace:internal
plset	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i plset<int>(const int& a)$/;"	f	namespace:internal
pmadd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmadd(const Packet4i& a, const Packet4i& b, const Packet4i& c) { return padd(pmul(a,b), c); }$/;"	f	namespace:internal
pmax	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmax<Packet4f>(const Packet4f& a, const Packet4f& b) { return vmaxq_f32(a,b); }$/;"	f	namespace:internal
pmax	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmax<Packet4i>(const Packet4i& a, const Packet4i& b) { return vmaxq_s32(a,b); }$/;"	f	namespace:internal
pmin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmin<Packet4f>(const Packet4f& a, const Packet4f& b) { return vminq_f32(a,b); }$/;"	f	namespace:internal
pmin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmin<Packet4i>(const Packet4i& a, const Packet4i& b) { return vminq_s32(a,b); }$/;"	f	namespace:internal
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmul<Packet4f>(const Packet4f& a, const Packet4f& b) { return vmulq_f32(a,b); }$/;"	f	namespace:internal
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmul<Packet4i>(const Packet4i& a, const Packet4i& b) { return vmulq_s32(a,b); }$/;"	f	namespace:internal
pnegate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pnegate(const Packet4f& a) { return vnegq_f32(a); }$/;"	f	namespace:internal
pnegate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pnegate(const Packet4i& a) { return vnegq_s32(a); }$/;"	f	namespace:internal
por	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f por<Packet4f>(const Packet4f& a, const Packet4f& b)$/;"	f	namespace:internal
por	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i por<Packet4i>(const Packet4i& a, const Packet4i& b) { return vorrq_s32(a,b); }$/;"	f	namespace:internal
predux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux<Packet4f>(const Packet4f& a)$/;"	f	namespace:internal
predux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux<Packet4i>(const Packet4i& a)$/;"	f	namespace:internal
predux_max	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux_max<Packet4f>(const Packet4f& a)$/;"	f	namespace:internal
predux_max	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux_max<Packet4i>(const Packet4i& a)$/;"	f	namespace:internal
predux_min	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux_min<Packet4f>(const Packet4f& a)$/;"	f	namespace:internal
predux_min	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux_min<Packet4i>(const Packet4i& a)$/;"	f	namespace:internal
predux_mul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux_mul<Packet4f>(const Packet4f& a)$/;"	f	namespace:internal
predux_mul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux_mul<Packet4i>(const Packet4i& a)$/;"	f	namespace:internal
preduxp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f preduxp<Packet4f>(const Packet4f* vecs)$/;"	f	namespace:internal
preduxp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i preduxp<Packet4i>(const Packet4i* vecs)$/;"	f	namespace:internal
prefetch	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void prefetch<float>(const float* addr) { __pld(addr); }$/;"	f	namespace:internal
prefetch	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void prefetch<int>(const int*     addr) { __pld(addr); }$/;"	f	namespace:internal
preverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f preverse(const Packet4f& a) {$/;"	f	namespace:internal
preverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i preverse(const Packet4i& a) {$/;"	f	namespace:internal
pset1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pset1<Packet4f>(const float&  from) { return vdupq_n_f32(from); }$/;"	f	namespace:internal
pset1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pset1<Packet4i>(const int&    from)   { return vdupq_n_s32(from); }$/;"	f	namespace:internal
pstore	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstore<float>(float*   to, const Packet4f& from) { EIGEN_DEBUG_ALIGNED_STORE vst1q_f32(to, from); }$/;"	f	namespace:internal
pstore	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstore<int>(int*       to, const Packet4i& from) { EIGEN_DEBUG_ALIGNED_STORE vst1q_s32(to, from); }$/;"	f	namespace:internal
pstoreu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<float>(float*  to, const Packet4f& from) { EIGEN_DEBUG_UNALIGNED_STORE vst1q_f32(to, from); }$/;"	f	namespace:internal
pstoreu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<int>(int*      to, const Packet4i& from) { EIGEN_DEBUG_UNALIGNED_STORE vst1q_s32(to, from); }$/;"	f	namespace:internal
psub	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f psub<Packet4f>(const Packet4f& a, const Packet4f& b) { return vsubq_f32(a,b); }$/;"	f	namespace:internal
psub	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i psub<Packet4i>(const Packet4i& a, const Packet4i& b) { return vsubq_s32(a,b); }$/;"	f	namespace:internal
pxor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pxor<Packet4f>(const Packet4f& a, const Packet4f& b)$/;"	f	namespace:internal
pxor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pxor<Packet4i>(const Packet4i& a, const Packet4i& b) { return veorq_s32(a,b); }$/;"	f	namespace:internal
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^  EIGEN_STRONG_INLINE static void run(Packet4f& first, const Packet4f& second)$/;"	f	struct:internal::palign_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^  EIGEN_STRONG_INLINE static void run(Packet4i& first, const Packet4i& second)$/;"	f	struct:internal::palign_impl
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^    size = 4,$/;"	e	enum:internal::packet_traits::<anonymous>
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^    size=4$/;"	e	enum:internal::packet_traits::<anonymous>
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4}; };$/;"	e	enum:internal::unpacket_traits::<anonymous>
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4}; };$/;"	e	enum:internal::unpacket_traits::<anonymous>
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^  typedef Packet4f type;$/;"	t	struct:internal::packet_traits
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^  typedef Packet4i type;$/;"	t	struct:internal::packet_traits
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4}; };$/;"	t	struct:internal::unpacket_traits
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4}; };$/;"	t	struct:internal::unpacket_traits
unpacket_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4}; };$/;"	s	namespace:internal
unpacket_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4}; };$/;"	s	namespace:internal
vld1_f32	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^EIGEN_STRONG_INLINE float32x2_t vld1_f32 (const float* x) { return ::vld1_f32 ((const float32_t*)x); }$/;"	f	namespace:internal
vld1q_f32	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^EIGEN_STRONG_INLINE float32x4_t vld1q_f32(const float* x) { return ::vld1q_f32((const float32_t*)x); }$/;"	f	namespace:internal
vst1_f32	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^EIGEN_STRONG_INLINE void        vst1_f32 (float* to, float32x2_t from) { ::vst1_f32 ((float32_t*)to,from); }$/;"	f	namespace:internal
vst1q_f32	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/NEON/PacketMath.h	/^EIGEN_STRONG_INLINE void        vst1q_f32(float* to, float32x4_t from) { ::vst1q_f32((float32_t*)to,from); }$/;"	f	namespace:internal
AlignedOnScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^    AlignedOnScalar = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
AlignedOnScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^    AlignedOnScalar = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
EIGEN_COMPLEX_SSE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	26;"	d
HasAbs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^    HasAbs    = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasAbs2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^    HasAbs2   = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasAdd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^    HasAdd    = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
HasDiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^    HasDiv    = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
HasMax	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^    HasMax    = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasMin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^    HasMin    = 0,$/;"	e	enum:internal::packet_traits::<anonymous>
HasMul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^    HasMul    = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
HasNegate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^    HasNegate = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
HasSetLinear	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^    HasSetLinear = 0$/;"	e	enum:internal::packet_traits::<anonymous>
HasSub	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^    HasSub    = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
Packet1cd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet1cd() {}$/;"	f	struct:internal::Packet1cd
Packet1cd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE explicit Packet1cd(const __m128d& a) : v(a) {}$/;"	f	struct:internal::Packet1cd
Packet1cd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^struct Packet1cd$/;"	s	namespace:internal
Packet2cf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf() {}$/;"	f	struct:internal::Packet2cf
Packet2cf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE explicit Packet2cf(const __m128& a) : v(a) {}$/;"	f	struct:internal::Packet2cf
Packet2cf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^struct Packet2cf$/;"	s	namespace:internal
Vectorizable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^    Vectorizable = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet1cd, Packet1cd, false,true>$/;"	s	namespace:internal
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet1cd, Packet1cd, true,false>$/;"	s	namespace:internal
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet1cd, Packet1cd, true,true>$/;"	s	namespace:internal
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet1cd, Packet2d, false,false>$/;"	s	namespace:internal
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet2cf, false,true>$/;"	s	namespace:internal
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet2cf, true,false>$/;"	s	namespace:internal
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet2cf, true,true>$/;"	s	namespace:internal
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet2cf, Packet4f, false,false>$/;"	s	namespace:internal
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet2d, Packet1cd, false,false>$/;"	s	namespace:internal
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct conj_helper<Packet4f, Packet2cf, false,false>$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^namespace internal {$/;"	n
packet_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct packet_traits<std::complex<double> >  : default_packet_traits$/;"	s	namespace:internal
packet_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct packet_traits<std::complex<float> >  : default_packet_traits$/;"	s	namespace:internal
padd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd padd<Packet1cd>(const Packet1cd& a, const Packet1cd& b) { return Packet1cd(_mm_add_pd(a.v,b.v)); }$/;"	f	namespace:internal
padd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf padd<Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(_mm_add_ps(a.v,b.v)); }$/;"	f	namespace:internal
palign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^struct palign_impl<Offset,Packet1cd>$/;"	s	namespace:internal
palign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^struct palign_impl<Offset,Packet2cf>$/;"	s	namespace:internal
pand	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd pand   <Packet1cd>(const Packet1cd& a, const Packet1cd& b) { return Packet1cd(_mm_and_pd(a.v,b.v)); }$/;"	f	namespace:internal
pand	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pand   <Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(_mm_and_ps(a.v,b.v)); }$/;"	f	namespace:internal
pandnot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd pandnot<Packet1cd>(const Packet1cd& a, const Packet1cd& b) { return Packet1cd(_mm_andnot_pd(a.v,b.v)); }$/;"	f	namespace:internal
pandnot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pandnot<Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(_mm_andnot_ps(a.v,b.v)); }$/;"	f	namespace:internal
pconj	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd pconj(const Packet1cd& a)$/;"	f	namespace:internal
pconj	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pconj(const Packet2cf& a)$/;"	f	namespace:internal
pcplxflip	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^EIGEN_STRONG_INLINE Packet1cd pcplxflip\/*<Packet1cd>*\/(const Packet1cd& x)$/;"	f	namespace:internal
pcplxflip	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^EIGEN_STRONG_INLINE Packet2cf pcplxflip\/*<Packet2cf>*\/(const Packet2cf& x)$/;"	f	namespace:internal
pdiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd pdiv<Packet1cd>(const Packet1cd& a, const Packet1cd& b)$/;"	f	namespace:internal
pdiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pdiv<Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:internal
pfirst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<double>  pfirst<Packet1cd>(const Packet1cd& a)$/;"	f	namespace:internal
pfirst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<float>  pfirst<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:internal
pload	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd pload <Packet1cd>(const std::complex<double>* from)$/;"	f	namespace:internal
pload	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pload <Packet2cf>(const std::complex<float>* from) { EIGEN_DEBUG_ALIGNED_LOAD return Packet2cf(pload<Packet4f>(&real_ref(*from))); }$/;"	f	namespace:internal
ploaddup	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd ploaddup<Packet1cd>(const std::complex<double>* from) { return pset1<Packet1cd>(*from); }$/;"	f	namespace:internal
ploaddup	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf ploaddup<Packet2cf>(const std::complex<float>* from) { return pset1<Packet2cf>(*from); }$/;"	f	namespace:internal
ploadu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd ploadu<Packet1cd>(const std::complex<double>* from)$/;"	f	namespace:internal
ploadu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf ploadu<Packet2cf>(const std::complex<float>* from) { EIGEN_DEBUG_UNALIGNED_LOAD return Packet2cf(ploadu<Packet4f>(&real_ref(*from))); }$/;"	f	namespace:internal
pmadd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet1cd pmadd(const Packet1cd& x, const Packet1cd& y, const Packet1cd& c) const$/;"	f	struct:internal::conj_helper
pmadd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet1cd pmadd(const Packet1cd& x, const Packet2d& y, const Packet1cd& c) const$/;"	f	struct:internal::conj_helper
pmadd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet1cd pmadd(const Packet2d& x, const Packet1cd& y, const Packet1cd& c) const$/;"	f	struct:internal::conj_helper
pmadd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmadd(const Packet2cf& x, const Packet2cf& y, const Packet2cf& c) const$/;"	f	struct:internal::conj_helper
pmadd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmadd(const Packet2cf& x, const Packet4f& y, const Packet2cf& c) const$/;"	f	struct:internal::conj_helper
pmadd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmadd(const Packet4f& x, const Packet2cf& y, const Packet2cf& c) const$/;"	f	struct:internal::conj_helper
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet1cd pmul(const Packet1cd& a, const Packet1cd& b) const$/;"	f	struct:internal::conj_helper
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet1cd pmul(const Packet1cd& x, const Packet2d& y) const$/;"	f	struct:internal::conj_helper
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet1cd pmul(const Packet2d& x, const Packet1cd& y) const$/;"	f	struct:internal::conj_helper
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmul(const Packet2cf& a, const Packet2cf& b) const$/;"	f	struct:internal::conj_helper
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmul(const Packet2cf& x, const Packet4f& y) const$/;"	f	struct:internal::conj_helper
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE Packet2cf pmul(const Packet4f& x, const Packet2cf& y) const$/;"	f	struct:internal::conj_helper
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd pmul<Packet1cd>(const Packet1cd& a, const Packet1cd& b)$/;"	f	namespace:internal
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pmul<Packet2cf>(const Packet2cf& a, const Packet2cf& b)$/;"	f	namespace:internal
pnegate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd pnegate(const Packet1cd& a) { return Packet1cd(pnegate(a.v)); }$/;"	f	namespace:internal
pnegate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pnegate(const Packet2cf& a)$/;"	f	namespace:internal
por	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd por    <Packet1cd>(const Packet1cd& a, const Packet1cd& b) { return Packet1cd(_mm_or_pd(a.v,b.v)); }$/;"	f	namespace:internal
por	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf por    <Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(_mm_or_ps(a.v,b.v)); }$/;"	f	namespace:internal
predux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<double> predux<Packet1cd>(const Packet1cd& a)$/;"	f	namespace:internal
predux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<float> predux<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:internal
predux_mul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<double> predux_mul<Packet1cd>(const Packet1cd& a)$/;"	f	namespace:internal
predux_mul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE std::complex<float> predux_mul<Packet2cf>(const Packet2cf& a)$/;"	f	namespace:internal
preduxp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd preduxp<Packet1cd>(const Packet1cd* vecs)$/;"	f	namespace:internal
preduxp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf preduxp<Packet2cf>(const Packet2cf* vecs)$/;"	f	namespace:internal
prefetch	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE void prefetch<std::complex<double> >(const std::complex<double> *   addr) { _mm_prefetch((const char*)(addr), _MM_HINT_T0); }$/;"	f	namespace:internal
prefetch	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE void prefetch<std::complex<float> >(const std::complex<float> *   addr) { _mm_prefetch((const char*)(addr), _MM_HINT_T0); }$/;"	f	namespace:internal
preverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd preverse(const Packet1cd& a) { return a; }$/;"	f	namespace:internal
preverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf preverse(const Packet2cf& a) { return Packet2cf(_mm_castpd_ps(preverse(_mm_castps_pd(a.v)))); }$/;"	f	namespace:internal
pset1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd pset1<Packet1cd>(const std::complex<double>&  from)$/;"	f	namespace:internal
pset1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pset1<Packet2cf>(const std::complex<float>&  from)$/;"	f	namespace:internal
pstore	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE void pstore <std::complex<double> >(std::complex<double> *   to, const Packet1cd& from) { EIGEN_DEBUG_ALIGNED_STORE pstore((double*)to, from.v); }$/;"	f	namespace:internal
pstore	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE void pstore <std::complex<float> >(std::complex<float> *   to, const Packet2cf& from) { EIGEN_DEBUG_ALIGNED_STORE pstore(&real_ref(*to), from.v); }$/;"	f	namespace:internal
pstoreu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<std::complex<double> >(std::complex<double> *   to, const Packet1cd& from) { EIGEN_DEBUG_UNALIGNED_STORE pstoreu((double*)to, from.v); }$/;"	f	namespace:internal
pstoreu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<std::complex<float> >(std::complex<float> *   to, const Packet2cf& from) { EIGEN_DEBUG_UNALIGNED_STORE pstoreu(&real_ref(*to), from.v); }$/;"	f	namespace:internal
psub	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd psub<Packet1cd>(const Packet1cd& a, const Packet1cd& b) { return Packet1cd(_mm_sub_pd(a.v,b.v)); }$/;"	f	namespace:internal
psub	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf psub<Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(_mm_sub_ps(a.v,b.v)); }$/;"	f	namespace:internal
pxor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet1cd pxor   <Packet1cd>(const Packet1cd& a, const Packet1cd& b) { return Packet1cd(_mm_xor_pd(a.v,b.v)); }$/;"	f	namespace:internal
pxor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> EIGEN_STRONG_INLINE Packet2cf pxor   <Packet2cf>(const Packet2cf& a, const Packet2cf& b) { return Packet2cf(_mm_xor_ps(a.v,b.v)); }$/;"	f	namespace:internal
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE static void run(Packet1cd& \/*first*\/, const Packet1cd& \/*second*\/)$/;"	f	struct:internal::palign_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  EIGEN_STRONG_INLINE static void run(Packet2cf& first, const Packet2cf& second)$/;"	f	struct:internal::palign_impl
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^    size = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^    size = 2,$/;"	e	enum:internal::packet_traits::<anonymous>
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct unpacket_traits<Packet1cd> { typedef std::complex<double> type; enum {size=1}; };$/;"	e	enum:internal::unpacket_traits::<anonymous>
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct unpacket_traits<Packet2cf> { typedef std::complex<float> type; enum {size=2}; };$/;"	e	enum:internal::unpacket_traits::<anonymous>
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  typedef Packet1cd type;$/;"	t	struct:internal::packet_traits
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  typedef Packet2cf type;$/;"	t	struct:internal::packet_traits
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct unpacket_traits<Packet1cd> { typedef std::complex<double> type; enum {size=1}; };$/;"	t	struct:internal::unpacket_traits
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct unpacket_traits<Packet2cf> { typedef std::complex<float> type; enum {size=2}; };$/;"	t	struct:internal::unpacket_traits
unpacket_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct unpacket_traits<Packet1cd> { typedef std::complex<double> type; enum {size=1}; };$/;"	s	namespace:internal
unpacket_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^template<> struct unpacket_traits<Packet2cf> { typedef std::complex<float> type; enum {size=2}; };$/;"	s	namespace:internal
v	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  __m128  v;$/;"	m	struct:internal::Packet2cf
v	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/Complex.h	/^  __m128d  v;$/;"	m	struct:internal::Packet1cd
EIGEN_MATH_FUNCTIONS_SSE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/MathFunctions.h	31;"	d
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/MathFunctions.h	/^namespace internal {$/;"	n
pcos	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/MathFunctions.h	/^Packet4f pcos<Packet4f>(const Packet4f& _x)$/;"	f	namespace:internal
pexp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/MathFunctions.h	/^Packet4f pexp<Packet4f>(const Packet4f& _x)$/;"	f	namespace:internal
plog	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/MathFunctions.h	/^Packet4f plog<Packet4f>(const Packet4f& _x)$/;"	f	namespace:internal
psin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/MathFunctions.h	/^Packet4f psin<Packet4f>(const Packet4f& _x)$/;"	f	namespace:internal
psqrt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/MathFunctions.h	/^Packet4f psqrt<Packet4f>(const Packet4f& _x)$/;"	f	namespace:internal
AlignedOnScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^    AlignedOnScalar = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
EIGEN_ARCH_DEFAULT_NUMBER_OF_REGISTERS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	35;"	d
EIGEN_AVOID_CUSTOM_UNALIGNED_LOADS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	237;"	d
EIGEN_AVOID_CUSTOM_UNALIGNED_LOADS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	240;"	d
EIGEN_AVOID_CUSTOM_UNALIGNED_LOADS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	242;"	d
EIGEN_CACHEFRIENDLY_PRODUCT_THRESHOLD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	31;"	d
EIGEN_PACKET_MATH_SSE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	26;"	d
HasCos	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^    HasCos  = EIGEN_FAST_MATH,$/;"	e	enum:internal::packet_traits::<anonymous>
HasDiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^    HasDiv    = 1$/;"	e	enum:internal::packet_traits::<anonymous>
HasDiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^    HasDiv    = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
HasExp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^    HasExp  = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
HasLog	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^    HasLog  = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
HasSin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^    HasSin  = EIGEN_FAST_MATH,$/;"	e	enum:internal::packet_traits::<anonymous>
HasSqrt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^    HasSqrt = 1$/;"	e	enum:internal::packet_traits::<anonymous>
Packet2d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^typedef __m128d Packet2d;$/;"	t	namespace:internal
Packet4f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^typedef __m128  Packet4f;$/;"	t	namespace:internal
Packet4i	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^typedef __m128i Packet4i;$/;"	t	namespace:internal
Vectorizable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^    Vectorizable = 1,$/;"	e	enum:internal::packet_traits::<anonymous>
_EIGEN_DECLARE_CONST_Packet4f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	61;"	d
_EIGEN_DECLARE_CONST_Packet4f_FROM_INT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	64;"	d
_EIGEN_DECLARE_CONST_Packet4i	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	67;"	d
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^namespace internal {$/;"	n
is_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct is_arithmetic<__m128>  { enum { value = true }; };$/;"	s	namespace:internal
is_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct is_arithmetic<__m128d> { enum { value = true }; };$/;"	s	namespace:internal
is_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct is_arithmetic<__m128i> { enum { value = true }; };$/;"	s	namespace:internal
pabs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pabs(const Packet2d& a)$/;"	f	namespace:internal
pabs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pabs(const Packet4f& a)$/;"	f	namespace:internal
pabs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pabs(const Packet4i& a)$/;"	f	namespace:internal
packet_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct packet_traits<double> : default_packet_traits$/;"	s	namespace:internal
packet_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct packet_traits<float>  : default_packet_traits$/;"	s	namespace:internal
packet_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct packet_traits<int>    : default_packet_traits$/;"	s	namespace:internal
padd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d padd<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_add_pd(a,b); }$/;"	f	namespace:internal
padd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f padd<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_add_ps(a,b); }$/;"	f	namespace:internal
padd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i padd<Packet4i>(const Packet4i& a, const Packet4i& b) { return _mm_add_epi32(a,b); }$/;"	f	namespace:internal
palign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^struct palign_impl<Offset,Packet2d>$/;"	s	namespace:internal
palign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^struct palign_impl<Offset,Packet4f>$/;"	s	namespace:internal
palign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^struct palign_impl<Offset,Packet4i>$/;"	s	namespace:internal
pand	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pand<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_and_pd(a,b); }$/;"	f	namespace:internal
pand	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pand<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_and_ps(a,b); }$/;"	f	namespace:internal
pand	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pand<Packet4i>(const Packet4i& a, const Packet4i& b) { return _mm_and_si128(a,b); }$/;"	f	namespace:internal
pandnot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pandnot<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_andnot_pd(a,b); }$/;"	f	namespace:internal
pandnot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pandnot<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_andnot_ps(a,b); }$/;"	f	namespace:internal
pandnot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pandnot<Packet4i>(const Packet4i& a, const Packet4i& b) { return _mm_andnot_si128(a,b); }$/;"	f	namespace:internal
pdiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pdiv<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_div_pd(a,b); }$/;"	f	namespace:internal
pdiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pdiv<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_div_ps(a,b); }$/;"	f	namespace:internal
pdiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pdiv<Packet4i>(const Packet4i& \/*a*\/, const Packet4i& \/*b*\/)$/;"	f	namespace:internal
pfirst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE double pfirst<Packet2d>(const Packet2d& a) { double x = _mm_cvtsd_f64(a); return x; }$/;"	f	namespace:internal
pfirst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE double pfirst<Packet2d>(const Packet2d& a) { return _mm_cvtsd_f64(a); }$/;"	f	namespace:internal
pfirst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE double pfirst<Packet2d>(const Packet2d& a) { return a.m128d_f64[0]; }$/;"	f	namespace:internal
pfirst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float  pfirst<Packet4f>(const Packet4f& a) { float x = _mm_cvtss_f32(a); return x; }$/;"	f	namespace:internal
pfirst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float  pfirst<Packet4f>(const Packet4f& a) { return _mm_cvtss_f32(a); }$/;"	f	namespace:internal
pfirst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float  pfirst<Packet4f>(const Packet4f& a) { return a.m128_f32[0]; }$/;"	f	namespace:internal
pfirst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int    pfirst<Packet4i>(const Packet4i& a) { int x = _mm_cvtsi128_si32(a); return x; }$/;"	f	namespace:internal
pfirst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int    pfirst<Packet4i>(const Packet4i& a) { return _mm_cvtsi128_si32(a); }$/;"	f	namespace:internal
pload	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pload<Packet2d>(const double*  from) { EIGEN_DEBUG_ALIGNED_LOAD return _mm_load_pd(from); }$/;"	f	namespace:internal
pload	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pload<Packet4f>(const float*   from) { EIGEN_DEBUG_ALIGNED_LOAD return _mm_load_ps(from); }$/;"	f	namespace:internal
pload	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pload<Packet4i>(const int*     from) { EIGEN_DEBUG_ALIGNED_LOAD return _mm_load_si128(reinterpret_cast<const Packet4i*>(from)); }$/;"	f	namespace:internal
ploaddup	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d ploaddup<Packet2d>(const double*  from)$/;"	f	namespace:internal
ploaddup	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f ploaddup<Packet4f>(const float*   from)$/;"	f	namespace:internal
ploaddup	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i ploaddup<Packet4i>(const int*     from)$/;"	f	namespace:internal
ploadu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^  template<> EIGEN_STRONG_INLINE Packet2d ploadu<Packet2d>(const double* from) { EIGEN_DEBUG_UNALIGNED_LOAD return _mm_loadu_pd(from); }$/;"	f	namespace:internal
ploadu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^  template<> EIGEN_STRONG_INLINE Packet4f ploadu<Packet4f>(const float*  from) {$/;"	f	namespace:internal
ploadu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^  template<> EIGEN_STRONG_INLINE Packet4i ploadu<Packet4i>(const int*    from) { EIGEN_DEBUG_UNALIGNED_LOAD return _mm_loadu_si128(reinterpret_cast<const Packet4i*>(from)); }$/;"	f	namespace:internal
ploadu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d ploadu<Packet2d>(const double* from)$/;"	f	namespace:internal
ploadu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f ploadu<Packet4f>(const float* from)$/;"	f	namespace:internal
ploadu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i ploadu<Packet4i>(const int* from)$/;"	f	namespace:internal
plset	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d plset<double>(const double& a) { return _mm_add_pd(pset1<Packet2d>(a),_mm_set_pd(1,0)); }$/;"	f	namespace:internal
plset	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f plset<float>(const float& a) { return _mm_add_ps(pset1<Packet4f>(a), _mm_set_ps(3,2,1,0)); }$/;"	f	namespace:internal
plset	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i plset<int>(const int& a) { return _mm_add_epi32(pset1<Packet4i>(a),_mm_set_epi32(3,2,1,0)); }$/;"	f	namespace:internal
pmadd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmadd(const Packet4i& a, const Packet4i& b, const Packet4i& c) { return padd(pmul(a,b), c); }$/;"	f	namespace:internal
pmax	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pmax<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_max_pd(a,b); }$/;"	f	namespace:internal
pmax	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmax<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_max_ps(a,b); }$/;"	f	namespace:internal
pmax	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmax<Packet4i>(const Packet4i& a, const Packet4i& b)$/;"	f	namespace:internal
pmin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pmin<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_min_pd(a,b); }$/;"	f	namespace:internal
pmin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmin<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_min_ps(a,b); }$/;"	f	namespace:internal
pmin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmin<Packet4i>(const Packet4i& a, const Packet4i& b)$/;"	f	namespace:internal
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pmul<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_mul_pd(a,b); }$/;"	f	namespace:internal
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pmul<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_mul_ps(a,b); }$/;"	f	namespace:internal
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pmul<Packet4i>(const Packet4i& a, const Packet4i& b)$/;"	f	namespace:internal
pnegate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pnegate(const Packet2d& a)$/;"	f	namespace:internal
pnegate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pnegate(const Packet4f& a)$/;"	f	namespace:internal
pnegate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pnegate(const Packet4i& a)$/;"	f	namespace:internal
por	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d por<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_or_pd(a,b); }$/;"	f	namespace:internal
por	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f por<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_or_ps(a,b); }$/;"	f	namespace:internal
por	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i por<Packet4i>(const Packet4i& a, const Packet4i& b) { return _mm_or_si128(a,b); }$/;"	f	namespace:internal
predux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE double predux<Packet2d>(const Packet2d& a) { return pfirst(_mm_hadd_pd(a, a)); }$/;"	f	namespace:internal
predux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE double predux<Packet2d>(const Packet2d& a)$/;"	f	namespace:internal
predux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux<Packet4f>(const Packet4f& a)$/;"	f	namespace:internal
predux	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux<Packet4i>(const Packet4i& a)$/;"	f	namespace:internal
predux_max	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE double predux_max<Packet2d>(const Packet2d& a)$/;"	f	namespace:internal
predux_max	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux_max<Packet4f>(const Packet4f& a)$/;"	f	namespace:internal
predux_max	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux_max<Packet4i>(const Packet4i& a)$/;"	f	namespace:internal
predux_min	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE double predux_min<Packet2d>(const Packet2d& a)$/;"	f	namespace:internal
predux_min	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux_min<Packet4f>(const Packet4f& a)$/;"	f	namespace:internal
predux_min	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux_min<Packet4i>(const Packet4i& a)$/;"	f	namespace:internal
predux_mul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE double predux_mul<Packet2d>(const Packet2d& a)$/;"	f	namespace:internal
predux_mul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE float predux_mul<Packet4f>(const Packet4f& a)$/;"	f	namespace:internal
predux_mul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE int predux_mul<Packet4i>(const Packet4i& a)$/;"	f	namespace:internal
preduxp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d preduxp<Packet2d>(const Packet2d* vecs)$/;"	f	namespace:internal
preduxp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f preduxp<Packet4f>(const Packet4f* vecs)$/;"	f	namespace:internal
preduxp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i preduxp<Packet4i>(const Packet4i* vecs)$/;"	f	namespace:internal
prefetch	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void prefetch<double>(const double* addr) { _mm_prefetch((const char*)(addr), _MM_HINT_T0); }$/;"	f	namespace:internal
prefetch	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void prefetch<float>(const float*   addr) { _mm_prefetch((const char*)(addr), _MM_HINT_T0); }$/;"	f	namespace:internal
prefetch	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void prefetch<int>(const int*       addr) { _mm_prefetch((const char*)(addr), _MM_HINT_T0); }$/;"	f	namespace:internal
preverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d preverse(const Packet2d& a)$/;"	f	namespace:internal
preverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f preverse(const Packet4f& a)$/;"	f	namespace:internal
preverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i preverse(const Packet4i& a)$/;"	f	namespace:internal
pset1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pset1<Packet2d>(const double& from) { return _mm_set1_pd(from); }$/;"	f	namespace:internal
pset1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pset1<Packet4f>(const float&  from) { return _mm_set1_ps(from); }$/;"	f	namespace:internal
pset1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pset1<Packet4i>(const int&    from) { return _mm_set1_epi32(from); }$/;"	f	namespace:internal
pstore	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstore<double>(double* to, const Packet2d& from) { EIGEN_DEBUG_ALIGNED_STORE _mm_store_pd(to, from); }$/;"	f	namespace:internal
pstore	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstore<float>(float*   to, const Packet4f& from) { EIGEN_DEBUG_ALIGNED_STORE _mm_store_ps(to, from); }$/;"	f	namespace:internal
pstore	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstore<int>(int*       to, const Packet4i& from) { EIGEN_DEBUG_ALIGNED_STORE _mm_store_si128(reinterpret_cast<Packet4i*>(to), from); }$/;"	f	namespace:internal
pstore1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstore1<Packet2d>(double* to, const double& a)$/;"	f	namespace:internal
pstore1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstore1<Packet4f>(float* to, const float& a)$/;"	f	namespace:internal
pstoreu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<double>(double* to, const Packet2d& from) {$/;"	f	namespace:internal
pstoreu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<float>(float*  to, const Packet4f& from) { EIGEN_DEBUG_UNALIGNED_STORE pstoreu((double*)to, _mm_castps_pd(from)); }$/;"	f	namespace:internal
pstoreu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE void pstoreu<int>(int*      to, const Packet4i& from) { EIGEN_DEBUG_UNALIGNED_STORE pstoreu((double*)to, _mm_castsi128_pd(from)); }$/;"	f	namespace:internal
psub	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d psub<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_sub_pd(a,b); }$/;"	f	namespace:internal
psub	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f psub<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_sub_ps(a,b); }$/;"	f	namespace:internal
psub	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i psub<Packet4i>(const Packet4i& a, const Packet4i& b) { return _mm_sub_epi32(a,b); }$/;"	f	namespace:internal
punpackp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^EIGEN_STRONG_INLINE void punpackp(Packet4f* vecs)$/;"	f	namespace:internal
pxor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet2d pxor<Packet2d>(const Packet2d& a, const Packet2d& b) { return _mm_xor_pd(a,b); }$/;"	f	namespace:internal
pxor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4f pxor<Packet4f>(const Packet4f& a, const Packet4f& b) { return _mm_xor_ps(a,b); }$/;"	f	namespace:internal
pxor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> EIGEN_STRONG_INLINE Packet4i pxor<Packet4i>(const Packet4i& a, const Packet4i& b) { return _mm_xor_si128(a,b); }$/;"	f	namespace:internal
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^  EIGEN_STRONG_INLINE static void run(Packet2d& first, const Packet2d& second)$/;"	f	struct:internal::palign_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^  EIGEN_STRONG_INLINE static void run(Packet4f& first, const Packet4f& second)$/;"	f	struct:internal::palign_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^  EIGEN_STRONG_INLINE static void run(Packet4i& first, const Packet4i& second)$/;"	f	struct:internal::palign_impl
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^    size=2,$/;"	e	enum:internal::packet_traits::<anonymous>
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^    size=4$/;"	e	enum:internal::packet_traits::<anonymous>
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^    size=4,$/;"	e	enum:internal::packet_traits::<anonymous>
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct unpacket_traits<Packet2d> { typedef double type; enum {size=2}; };$/;"	e	enum:internal::unpacket_traits::<anonymous>
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4}; };$/;"	e	enum:internal::unpacket_traits::<anonymous>
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4}; };$/;"	e	enum:internal::unpacket_traits::<anonymous>
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^  typedef Packet2d type;$/;"	t	struct:internal::packet_traits
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^  typedef Packet4f type;$/;"	t	struct:internal::packet_traits
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^  typedef Packet4i type;$/;"	t	struct:internal::packet_traits
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct unpacket_traits<Packet2d> { typedef double type; enum {size=2}; };$/;"	t	struct:internal::unpacket_traits
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4}; };$/;"	t	struct:internal::unpacket_traits
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4}; };$/;"	t	struct:internal::unpacket_traits
unpacket_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct unpacket_traits<Packet2d> { typedef double type; enum {size=2}; };$/;"	s	namespace:internal
unpacket_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct unpacket_traits<Packet4f> { typedef float  type; enum {size=4}; };$/;"	s	namespace:internal
unpacket_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct unpacket_traits<Packet4i> { typedef int    type; enum {size=4}; };$/;"	s	namespace:internal
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct is_arithmetic<__m128>  { enum { value = true }; };$/;"	e	enum:internal::is_arithmetic::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct is_arithmetic<__m128d> { enum { value = true }; };$/;"	e	enum:internal::is_arithmetic::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	/^template<> struct is_arithmetic<__m128i> { enum { value = true }; };$/;"	e	enum:internal::is_arithmetic::<anonymous>
vec2d_swizzle1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	52;"	d
vec4f_swizzle1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	46;"	d
vec4f_swizzle2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	55;"	d
vec4i_swizzle1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	49;"	d
vec4i_swizzle2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/arch/SSE/PacketMath.h	58;"	d
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    typedef MatrixBase<CoeffBasedProduct> Base;$/;"	t	class:CoeffBasedProduct
CanVectorizeInner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      CanVectorizeInner =    SameType$/;"	e	enum:internal::traits::<anonymous>
CanVectorizeInner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      CanVectorizeInner = internal::traits<CoeffBasedProduct>::CanVectorizeInner$/;"	e	enum:CoeffBasedProduct::<anonymous>
CanVectorizeLhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      CanVectorizeLhs = (!LhsRowMajor) && (LhsFlags & PacketAccessBit)$/;"	e	enum:internal::traits::<anonymous>
CanVectorizeRhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      CanVectorizeRhs = RhsRowMajor && (RhsFlags & PacketAccessBit)$/;"	e	enum:internal::traits::<anonymous>
CoeffBasedProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    inline CoeffBasedProduct(const CoeffBasedProduct& other)$/;"	f	class:CoeffBasedProduct
CoeffBasedProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    inline CoeffBasedProduct(const Lhs& lhs, const Rhs& rhs)$/;"	f	class:CoeffBasedProduct
CoeffBasedProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^class CoeffBasedProduct$/;"	c
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      CoeffReadCost = InnerSize == Dynamic ? Dynamic$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      ColsAtCompileTime = _RhsNested::ColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
EIGEN_COEFFBASED_PRODUCT_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	27;"	d
EvalToRowMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      EvalToRowMajor = (MaxRowsAtCompileTime==1&&MaxColsAtCompileTime!=1) ? 1$/;"	e	enum:internal::traits::<anonymous>
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      Flags = ((unsigned int)(LhsFlags | RhsFlags) & HereditaryBits & ~RowMajorBit)$/;"	e	enum:internal::traits::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^                                         typename traits<_RhsNested>::Index>::type Index;$/;"	t	struct:internal::traits
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef typename Lhs::Index Index;$/;"	t	struct:internal::product_coeff_impl
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef typename Lhs::Index Index;$/;"	t	struct:internal::product_coeff_vectorized_dyn_selector
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef typename Lhs::Index Index;$/;"	t	struct:internal::product_coeff_vectorized_unroller
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef typename Lhs::Index Index;$/;"	t	struct:internal::product_packet_impl
InnerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      InnerSize  = internal::traits<CoeffBasedProduct>::InnerSize,$/;"	e	enum:CoeffBasedProduct::<anonymous>
InnerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      InnerSize = EIGEN_SIZE_MIN_PREFER_FIXED(_LhsNested::ColsAtCompileTime, _RhsNested::RowsAtCompileTime),$/;"	e	enum:internal::traits::<anonymous>
LazyCoeffBasedProductType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    typedef CoeffBasedProduct<LhsNested,RhsNested,NestByRefBit> LazyCoeffBasedProductType;$/;"	t	class:CoeffBasedProduct
LhsCoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      LhsCoeffReadCost = _LhsNested::CoeffReadCost,$/;"	e	enum:internal::traits::<anonymous>
LhsFlags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      LhsFlags = _LhsNested::Flags,$/;"	e	enum:internal::traits::<anonymous>
LhsRowMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      LhsRowMajor = LhsFlags & RowMajorBit,$/;"	e	enum:internal::traits::<anonymous>
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      MaxColsAtCompileTime = _RhsNested::MaxColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      MaxRowsAtCompileTime = _LhsNested::MaxRowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
Packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef typename Lhs::PacketScalar Packet;$/;"	t	struct:internal::product_coeff_impl
PacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      PacketSize = internal::packet_traits<Scalar>::size,$/;"	e	enum:CoeffBasedProduct::<anonymous>
PacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  enum { PacketSize = packet_traits<typename Lhs::Scalar>::size };$/;"	e	enum:internal::product_coeff_impl::<anonymous>
PacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  enum { PacketSize = packet_traits<typename Lhs::Scalar>::size };$/;"	e	enum:internal::product_coeff_vectorized_unroller::<anonymous>
PlainObject	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    typedef typename Base::PlainObject PlainObject;$/;"	t	class:CoeffBasedProduct
RhsCoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      RhsCoeffReadCost = _RhsNested::CoeffReadCost,$/;"	e	enum:internal::traits::<anonymous>
RhsFlags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      RhsFlags = _RhsNested::Flags,$/;"	e	enum:internal::traits::<anonymous>
RhsRowMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      RhsRowMajor = RhsFlags & RowMajorBit,$/;"	e	enum:internal::traits::<anonymous>
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      RowsAtCompileTime = _LhsNested::RowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
SameType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      SameType = is_same<typename _LhsNested::Scalar,typename _RhsNested::Scalar>::value,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      SameType = is_same<typename _LhsNested::Scalar,typename _RhsNested::Scalar>::value,$/;"	e	class:internal::traits::<anonymous>::_RhsNested
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef typename scalar_product_traits<typename _LhsNested::Scalar, typename _RhsNested::Scalar>::ReturnType Scalar;$/;"	t	struct:internal::traits
ScalarCoeffImpl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^                                   _LhsNested, _RhsNested, Scalar> ScalarCoeffImpl;$/;"	t	class:CoeffBasedProduct
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^                                           typename traits<_RhsNested>::StorageKind>::ret StorageKind;$/;"	t	struct:internal::traits
Unroll	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      Unroll = CoeffReadCost != Dynamic && CoeffReadCost <= EIGEN_UNROLLING_LIMIT,$/;"	e	enum:CoeffBasedProduct::<anonymous>
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:internal::traits
_LhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    typedef typename internal::traits<CoeffBasedProduct>::_LhsNested _LhsNested;$/;"	t	class:CoeffBasedProduct
_LhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef typename remove_all<LhsNested>::type _LhsNested;$/;"	t	struct:internal::traits
_RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      SameType = is_same<typename _LhsNested::Scalar,typename _RhsNested::Scalar>::value,$/;"	e	enum:internal::traits::<anonymous>
_RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    typedef typename internal::traits<CoeffBasedProduct>::_RhsNested _RhsNested;$/;"	t	class:CoeffBasedProduct
_RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef typename remove_all<RhsNested>::type _RhsNested;$/;"	t	struct:internal::traits
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index index) const$/;"	f	class:CoeffBasedProduct
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    EIGEN_STRONG_INLINE const Scalar coeff(Index row, Index col) const$/;"	f	class:CoeffBasedProduct
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    EIGEN_STRONG_INLINE Index cols() const { return m_rhs.cols(); }$/;"	f	class:CoeffBasedProduct
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    const Diagonal<const LazyCoeffBasedProductType,0> diagonal() const$/;"	f	class:CoeffBasedProduct
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    const Diagonal<const LazyCoeffBasedProductType,DiagonalIndex> diagonal() const$/;"	f	class:CoeffBasedProduct
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    const Diagonal<const LazyCoeffBasedProductType,Dynamic> diagonal(Index index) const$/;"	f	class:CoeffBasedProduct
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^namespace internal {$/;"	n
lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    const _LhsNested& lhs() const { return m_lhs; }$/;"	f	class:CoeffBasedProduct
m_lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    const LhsNested m_lhs;$/;"	m	class:CoeffBasedProduct
m_result	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    mutable PlainObject m_result;$/;"	m	class:CoeffBasedProduct
m_rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    const RhsNested m_rhs;$/;"	m	class:CoeffBasedProduct
nested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct nested<CoeffBasedProduct<Lhs,Rhs,EvalBeforeNestingBit|EvalBeforeAssigningBit>, N, PlainObject>$/;"	s	namespace:internal
operator const PlainObject&	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    EIGEN_STRONG_INLINE operator const PlainObject& () const$/;"	f	class:CoeffBasedProduct
packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    EIGEN_STRONG_INLINE const PacketScalar packet(Index row, Index col) const$/;"	f	class:CoeffBasedProduct
product_coeff_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_impl<DefaultTraversal, 0, Lhs, Rhs, RetScalar>$/;"	s	namespace:internal
product_coeff_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_impl<DefaultTraversal, Dynamic, Lhs, Rhs, RetScalar>$/;"	s	namespace:internal
product_coeff_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_impl<DefaultTraversal, UnrollingIndex, Lhs, Rhs, RetScalar>$/;"	s	namespace:internal
product_coeff_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_impl<InnerVectorizedTraversal, Dynamic, Lhs, Rhs, RetScalar>$/;"	s	namespace:internal
product_coeff_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_impl<InnerVectorizedTraversal, UnrollingIndex, Lhs, Rhs, RetScalar>$/;"	s	namespace:internal
product_coeff_vectorized_dyn_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_vectorized_dyn_selector$/;"	s	namespace:internal
product_coeff_vectorized_dyn_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_vectorized_dyn_selector<Lhs,Rhs,1,1>$/;"	s	namespace:internal
product_coeff_vectorized_dyn_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_vectorized_dyn_selector<Lhs,Rhs,1,RhsCols>$/;"	s	namespace:internal
product_coeff_vectorized_dyn_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_vectorized_dyn_selector<Lhs,Rhs,LhsRows,1>$/;"	s	namespace:internal
product_coeff_vectorized_unroller	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_vectorized_unroller$/;"	s	namespace:internal
product_coeff_vectorized_unroller	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_coeff_vectorized_unroller<0, Lhs, Rhs, Packet>$/;"	s	namespace:internal
product_packet_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_packet_impl<ColMajor, 0, Lhs, Rhs, Packet, LoadMode>$/;"	s	namespace:internal
product_packet_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_packet_impl<ColMajor, Dynamic, Lhs, Rhs, Packet, LoadMode>$/;"	s	namespace:internal
product_packet_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_packet_impl<ColMajor, UnrollingIndex, Lhs, Rhs, Packet, LoadMode>$/;"	s	namespace:internal
product_packet_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_packet_impl<RowMajor, 0, Lhs, Rhs, Packet, LoadMode>$/;"	s	namespace:internal
product_packet_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_packet_impl<RowMajor, Dynamic, Lhs, Rhs, Packet, LoadMode>$/;"	s	namespace:internal
product_packet_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct product_packet_impl<RowMajor, UnrollingIndex, Lhs, Rhs, Packet, LoadMode>$/;"	s	namespace:internal
rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    const _RhsNested& rhs() const { return m_rhs; }$/;"	f	class:CoeffBasedProduct
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^    EIGEN_STRONG_INLINE Index rows() const { return m_lhs.rows(); }$/;"	f	class:CoeffBasedProduct
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  EIGEN_STRONG_INLINE static void run(Index \/*row*\/, Index \/*col*\/, const Lhs& lhs, const Rhs& rhs, typename Lhs::Scalar &res)$/;"	f	struct:internal::product_coeff_vectorized_dyn_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  EIGEN_STRONG_INLINE static void run(Index \/*row*\/, Index col, const Lhs& lhs, const Rhs& rhs, typename Lhs::Scalar &res)$/;"	f	struct:internal::product_coeff_vectorized_dyn_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  EIGEN_STRONG_INLINE static void run(Index row, Index \/*col*\/, const Lhs& lhs, const Rhs& rhs, typename Lhs::Scalar &res)$/;"	f	struct:internal::product_coeff_vectorized_dyn_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  EIGEN_STRONG_INLINE static void run(Index row, Index col, const Lhs& lhs, const Rhs& rhs, Packet &res)$/;"	f	struct:internal::product_packet_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  EIGEN_STRONG_INLINE static void run(Index row, Index col, const Lhs& lhs, const Rhs& rhs, Packet& res)$/;"	f	struct:internal::product_packet_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  EIGEN_STRONG_INLINE static void run(Index row, Index col, const Lhs& lhs, const Rhs& rhs, RetScalar &res)$/;"	f	struct:internal::product_coeff_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  EIGEN_STRONG_INLINE static void run(Index row, Index col, const Lhs& lhs, const Rhs& rhs, RetScalar& res)$/;"	f	struct:internal::product_coeff_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  EIGEN_STRONG_INLINE static void run(Index row, Index col, const Lhs& lhs, const Rhs& rhs, typename Lhs::PacketScalar &pres)$/;"	f	struct:internal::product_coeff_vectorized_unroller
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  EIGEN_STRONG_INLINE static void run(Index row, Index col, const Lhs& lhs, const Rhs& rhs, typename Lhs::Scalar &res)$/;"	f	struct:internal::product_coeff_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  EIGEN_STRONG_INLINE static void run(Index row, Index col, const Lhs& lhs, const Rhs& rhs, typename Lhs::Scalar &res)$/;"	f	struct:internal::product_coeff_vectorized_dyn_selector
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^struct traits<CoeffBasedProduct<LhsNested,RhsNested,NestingFlags> >$/;"	s	namespace:internal
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^  typedef PlainObject const& type;$/;"	t	struct:internal::nested
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/CoeffBasedProduct.h	/^      SameType = is_same<typename _LhsNested::Scalar,typename _RhsNested::Scalar>::value,$/;"	e	class:internal::traits::<anonymous>::_RhsNested::Scalar
AccPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef ResPacket AccPacket;$/;"	t	class:internal::gebp_traits
AccPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename Traits::AccPacket AccPacket;$/;"	t	struct:internal::gebp_kernel
AccPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename conditional<Vectorizable,DoublePacket,Scalar>::type AccPacket;$/;"	t	class:internal::gebp_traits
CJMADD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	1103;"	d
ConjLhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ConjLhs = _ConjLhs,$/;"	e	enum:internal::gebp_traits::<anonymous>
ConjLhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ConjLhs = false,$/;"	e	enum:internal::gebp_traits::<anonymous>
ConjRhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ConjRhs = _ConjRhs,$/;"	e	enum:internal::gebp_traits::<anonymous>
ConjRhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ConjRhs = false,$/;"	e	enum:internal::gebp_traits::<anonymous>
DoublePacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  struct DoublePacket$/;"	s	class:internal::gebp_traits
EIGEN_GENERAL_BLOCK_PANEL_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	26;"	d
LhsPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename Traits::LhsPacket LhsPacket;$/;"	t	struct:internal::gebp_kernel
LhsPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename conditional<Vectorizable,RealPacket,  Scalar>::type LhsPacket;$/;"	t	class:internal::gebp_traits
LhsPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename conditional<Vectorizable,_LhsPacket,LhsScalar>::type LhsPacket;$/;"	t	class:internal::gebp_traits
LhsPacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    LhsPacketSize = Vectorizable ? packet_traits<LhsScalar>::size : 1,$/;"	e	enum:internal::gebp_traits::<anonymous>
LhsProgress	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    LhsProgress   = Traits::LhsProgress,$/;"	e	enum:internal::gebp_kernel::<anonymous>
LhsProgress	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    LhsProgress = LhsPacketSize,$/;"	e	enum:internal::gebp_traits::<anonymous>
LhsProgress	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    LhsProgress = ResPacketSize,$/;"	e	enum:internal::gebp_traits::<anonymous>
LhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef RealScalar  LhsScalar;$/;"	t	class:internal::gebp_traits
LhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef _LhsScalar LhsScalar;$/;"	t	class:internal::gebp_traits
LhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef std::complex<RealScalar>  LhsScalar;$/;"	t	class:internal::gebp_traits
LhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef std::complex<RealScalar> LhsScalar;$/;"	t	class:internal::gebp_traits
MADD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	115;"	d
MADD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	140;"	d
NumberOfRegisters	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    NumberOfRegisters = EIGEN_ARCH_DEFAULT_NUMBER_OF_REGISTERS,$/;"	e	enum:internal::gebp_traits::<anonymous>
Packet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename packet_traits<Scalar>::type Packet;$/;"	t	struct:internal::gemm_pack_rhs
PacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  enum { PacketSize = packet_traits<Scalar>::size };$/;"	e	enum:internal::gemm_pack_rhs::<anonymous>
RealPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename packet_traits<RealScalar>::type RealPacket;$/;"	t	class:internal::gebp_traits
RealPacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    RealPacketSize  = Vectorizable ? packet_traits<RealScalar>::size : 1,$/;"	e	enum:internal::gebp_traits::<anonymous>
ResPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename Traits::ResPacket ResPacket;$/;"	t	struct:internal::gebp_kernel
ResPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename conditional<Vectorizable,ScalarPacket,Scalar>::type ResPacket;$/;"	t	class:internal::gebp_traits
ResPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename conditional<Vectorizable,_ResPacket,ResScalar>::type ResPacket;$/;"	t	class:internal::gebp_traits
ResPacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ResPacketSize   = Vectorizable ? packet_traits<ResScalar>::size : 1,$/;"	e	enum:internal::gebp_traits::<anonymous>
ResPacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ResPacketSize = Traits::ResPacketSize$/;"	e	enum:internal::gebp_kernel::<anonymous>
ResPacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    ResPacketSize = Vectorizable ? packet_traits<ResScalar>::size : 1,$/;"	e	enum:internal::gebp_traits::<anonymous>
ResScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef Scalar      ResScalar;$/;"	t	class:internal::gebp_traits
ResScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef std::complex<RealScalar>  ResScalar;$/;"	t	class:internal::gebp_traits
ResScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename Traits::ResScalar ResScalar;$/;"	t	struct:internal::gebp_kernel
ResScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename scalar_product_traits<LhsScalar, RhsScalar>::ReturnType ResScalar;$/;"	t	class:internal::gebp_traits
RhsPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename Traits::RhsPacket RhsPacket;$/;"	t	struct:internal::gebp_kernel
RhsPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename conditional<Vectorizable,DoublePacket,Scalar>::type RhsPacket;$/;"	t	class:internal::gebp_traits
RhsPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename conditional<Vectorizable,_RhsPacket,RhsScalar>::type RhsPacket;$/;"	t	class:internal::gebp_traits
RhsPacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    RhsPacketSize = Vectorizable ? packet_traits<RhsScalar>::size : 1,$/;"	e	enum:internal::gebp_traits::<anonymous>
RhsProgress	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    RhsProgress   = Traits::RhsProgress,$/;"	e	enum:internal::gebp_kernel::<anonymous>
RhsProgress	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    RhsProgress = ResPacketSize$/;"	e	enum:internal::gebp_traits::<anonymous>
RhsProgress	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    RhsProgress = RhsPacketSize$/;"	e	enum:internal::gebp_traits::<anonymous>
RhsProgress	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    RhsProgress = Vectorizable ? 2*ResPacketSize : 1$/;"	e	enum:internal::gebp_traits::<anonymous>
RhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef RealScalar RhsScalar;$/;"	t	class:internal::gebp_traits
RhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef Scalar      RhsScalar;$/;"	t	class:internal::gebp_traits
RhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef _RhsScalar RhsScalar;$/;"	t	class:internal::gebp_traits
RhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef std::complex<RealScalar>  RhsScalar;$/;"	t	class:internal::gebp_traits
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef std::complex<RealScalar>  Scalar;$/;"	t	class:internal::gebp_traits
ScalarPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename packet_traits<Scalar>::type     ScalarPacket;$/;"	t	class:internal::gebp_traits
Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef gebp_traits<LhsScalar,RhsScalar,ConjugateLhs,ConjugateRhs> Traits;$/;"	t	struct:internal::gebp_kernel
Vectorizable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    Vectorizable  = Traits::Vectorizable,$/;"	e	enum:internal::gebp_kernel::<anonymous>
Vectorizable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    Vectorizable = packet_traits<LhsScalar>::Vectorizable && packet_traits<RhsScalar>::Vectorizable,$/;"	e	enum:internal::gebp_traits::<anonymous>
Vectorizable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    Vectorizable = packet_traits<RealScalar>::Vectorizable$/;"	e	enum:internal::gebp_traits::<anonymous>
WorkSpaceFactor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    WorkSpaceFactor = Vectorizable ? 2*nr*RealPacketSize : nr,$/;"	e	enum:internal::gebp_traits::<anonymous>
WorkSpaceFactor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    WorkSpaceFactor = nr * RhsPacketSize,$/;"	e	enum:internal::gebp_traits::<anonymous>
WorkSpaceFactor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    WorkSpaceFactor = nr*RhsPacketSize,$/;"	e	enum:internal::gebp_traits::<anonymous>
_LhsPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename packet_traits<LhsScalar>::type  _LhsPacket;$/;"	t	class:internal::gebp_traits
_ResPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename packet_traits<ResScalar>::type  _ResPacket;$/;"	t	class:internal::gebp_traits
_RhsPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  typedef typename packet_traits<RhsScalar>::type  _RhsPacket;$/;"	t	class:internal::gebp_traits
acc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void acc(const AccPacket& c, const ResPacket& alpha, ResPacket& r) const$/;"	f	class:internal::gebp_traits
acc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void acc(const DoublePacket& c, const ResPacket& alpha, ResPacket& r) const$/;"	f	class:internal::gebp_traits
acc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void acc(const Scalar& c, const Scalar& alpha, Scalar& r) const { r += alpha * c; }$/;"	f	class:internal::gebp_traits
cj	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  conj_helper<LhsScalar,RhsScalar,ConjLhs,ConjRhs> cj;$/;"	m	class:internal::gebp_traits
cj	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  conj_helper<ResPacket,ResPacket,ConjLhs,false> cj;$/;"	m	class:internal::gebp_traits
cj	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  conj_helper<ResPacket,ResPacket,false,ConjRhs> cj;$/;"	m	class:internal::gebp_traits
computeProductBlockingSizes	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^inline void computeProductBlockingSizes(std::ptrdiff_t& k, std::ptrdiff_t& m, std::ptrdiff_t& n)$/;"	f	namespace:internal
computeProductBlockingSizes	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^void computeProductBlockingSizes(std::ptrdiff_t& k, std::ptrdiff_t& m, std::ptrdiff_t& n)$/;"	f	namespace:internal
first	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    RealPacket first;$/;"	m	struct:internal::gebp_traits::DoublePacket
gebp_kernel	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^struct gebp_kernel$/;"	s	namespace:internal
gebp_madd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void gebp_madd(const CJ& cj, A& a, B& b, C& c, T& t)$/;"	f	namespace:internal
gebp_madd_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  template<typename CJ, typename A, typename B, typename C, typename T> struct gebp_madd_selector {$/;"	s	namespace:internal
gebp_madd_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  template<typename CJ, typename T> struct gebp_madd_selector<CJ,T,T,T,T> {$/;"	s	namespace:internal
gebp_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^class gebp_traits$/;"	c	namespace:internal
gebp_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^class gebp_traits<RealScalar, std::complex<RealScalar>, false, _ConjRhs >$/;"	c	namespace:internal
gebp_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^class gebp_traits<std::complex<RealScalar>, RealScalar, _ConjLhs, false>$/;"	c	namespace:internal
gebp_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^class gebp_traits<std::complex<RealScalar>, std::complex<RealScalar>, _ConjLhs, _ConjRhs >$/;"	c	namespace:internal
gemm_pack_lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^struct gemm_pack_lhs$/;"	s	namespace:internal
gemm_pack_rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^struct gemm_pack_rhs<Scalar, Index, nr, ColMajor, Conjugate, PanelMode>$/;"	s	namespace:internal
gemm_pack_rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^struct gemm_pack_rhs<Scalar, Index, nr, RowMajor, Conjugate, PanelMode>$/;"	s	namespace:internal
initAcc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void initAcc(AccPacket& p)$/;"	f	class:internal::gebp_traits
initAcc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void initAcc(DoublePacket& p)$/;"	f	class:internal::gebp_traits
initAcc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void initAcc(Scalar& p) { p = Scalar(0); }$/;"	f	class:internal::gebp_traits
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^namespace internal {$/;"	n
l1CacheSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^inline std::ptrdiff_t l1CacheSize()$/;"	f
l2CacheSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^inline std::ptrdiff_t l2CacheSize()$/;"	f
loadLhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void loadLhs(const LhsScalar* a, LhsPacket& dest) const$/;"	f	class:internal::gebp_traits
loadRhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void loadRhs(const RhsScalar* b, DoublePacket& dest) const$/;"	f	class:internal::gebp_traits
loadRhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void loadRhs(const RhsScalar* b, ResPacket& dest) const { dest = *b; }$/;"	f	class:internal::gebp_traits
loadRhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void loadRhs(const RhsScalar* b, RhsPacket& dest) const$/;"	f	class:internal::gebp_traits
madd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void madd(const LhsPacket& a, const RhsPacket& b, AccPacket& c, AccPacket& tmp) const$/;"	f	class:internal::gebp_traits
madd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void madd(const LhsPacket& a, const RhsPacket& b, AccPacket& c, RhsPacket& tmp) const$/;"	f	class:internal::gebp_traits
madd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void madd(const LhsPacket& a, const RhsPacket& b, DoublePacket& c, RhsPacket& \/*tmp*\/) const$/;"	f	class:internal::gebp_traits
madd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void madd(const LhsPacket& a, const RhsPacket& b, ResPacket& c, RhsPacket& \/*tmp*\/) const$/;"	f	class:internal::gebp_traits
madd_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void madd_impl(const LhsPacket& a, const RhsPacket& b, AccPacket& c, RhsPacket& tmp, const true_type&) const$/;"	f	class:internal::gebp_traits
madd_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void madd_impl(const LhsScalar& a, const RhsScalar& b, ResScalar& c, RhsScalar& \/*tmp*\/, const false_type&) const$/;"	f	class:internal::gebp_traits
manage_caching_sizes	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^inline void manage_caching_sizes(Action action, std::ptrdiff_t* l1=0, std::ptrdiff_t* l2=0)$/;"	f	namespace:internal
mr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    mr = 2 * LhsPacketSize,$/;"	e	enum:internal::gebp_traits::<anonymous>
mr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    mr = 2 * ResPacketSize,$/;"	e	enum:internal::gebp_traits::<anonymous>
mr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    mr = 2*ResPacketSize,$/;"	e	enum:internal::gebp_traits::<anonymous>
nr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    nr = 2,$/;"	e	enum:internal::gebp_traits::<anonymous>
nr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    nr = 4,$/;"	e	enum:internal::gebp_traits::<anonymous>
nr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    nr = NumberOfRegisters\/4,$/;"	e	enum:internal::gebp_traits::<anonymous>
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  void operator()(ResScalar* res, Index resStride, const LhsScalar* blockA, const RhsScalar* blockB, Index rows, Index depth, Index cols, ResScalar alpha,$/;"	f	struct:internal::gebp_kernel
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  void operator()(Scalar* blockA, const Scalar* EIGEN_RESTRICT _lhs, Index lhsStride, Index depth, Index rows,$/;"	f	struct:internal::gemm_pack_lhs
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  void operator()(Scalar* blockB, const Scalar* rhs, Index rhsStride, Index depth, Index cols,$/;"	f	struct:internal::gemm_pack_rhs
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    EIGEN_STRONG_INLINE EIGEN_ALWAYS_INLINE_ATTRIB static void run(const CJ& cj, A& a, B& b, C& c, T& \/*t*\/)$/;"	f	struct:internal::gebp_madd_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    EIGEN_STRONG_INLINE EIGEN_ALWAYS_INLINE_ATTRIB static void run(const CJ& cj, T& a, T& b, T& c, T& t)$/;"	f	struct:internal::gebp_madd_selector
second	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^    RealPacket second;$/;"	m	struct:internal::gebp_traits::DoublePacket
setCpuCacheSizes	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^inline void setCpuCacheSizes(std::ptrdiff_t l1, std::ptrdiff_t l2)$/;"	f
unpackRhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void unpackRhs(DenseIndex n, const RhsScalar* rhs, RhsScalar* b)$/;"	f	class:internal::gebp_traits
unpackRhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralBlockPanelKernel.h	/^  EIGEN_STRONG_INLINE void unpackRhs(DenseIndex n, const Scalar* rhs, Scalar* b)$/;"	f	class:internal::gebp_traits
ActualCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^      ActualCols = Transpose ? MaxRows : MaxCols$/;"	e	enum:internal::gemm_blocking_space::<anonymous>
ActualRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^      ActualRows = Transpose ? MaxCols : MaxRows,$/;"	e	enum:internal::gemm_blocking_space::<anonymous>
EIGEN_GENERAL_MATRIX_MATRIX_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	26;"	d
GeneralProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    GeneralProduct(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs)$/;"	f	class:GeneralProduct
GeneralProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^class GeneralProduct<Lhs, Rhs, GemmProduct>$/;"	c
LhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    typedef _LhsScalar LhsScalar;$/;"	t	class:internal::level3_blocking
LhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    typedef typename  Lhs::Scalar LhsScalar;$/;"	t	class:GeneralProduct
LhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    typedef typename conditional<Transpose,_RhsScalar,_LhsScalar>::type LhsScalar;$/;"	t	class:internal::gemm_blocking_space
MaxDepthAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^      MaxDepthAtCompileTime = EIGEN_SIZE_MIN_PREFER_FIXED(Lhs::MaxColsAtCompileTime,Rhs::MaxRowsAtCompileTime)$/;"	e	enum:GeneralProduct::<anonymous>
ResScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    typedef           Scalar      ResScalar;$/;"	t	class:GeneralProduct
ResScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^  typedef typename scalar_product_traits<LhsScalar, RhsScalar>::ReturnType ResScalar;$/;"	t	struct:internal::general_matrix_matrix_product
ResScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^typedef typename scalar_product_traits<LhsScalar, RhsScalar>::ReturnType ResScalar;$/;"	t	struct:internal::general_matrix_matrix_product
RhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    typedef _RhsScalar RhsScalar;$/;"	t	class:internal::level3_blocking
RhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    typedef typename  Rhs::Scalar RhsScalar;$/;"	t	class:GeneralProduct
RhsScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    typedef typename conditional<Transpose,_LhsScalar,_RhsScalar>::type RhsScalar;$/;"	t	class:internal::gemm_blocking_space
SizeA	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^      SizeA = ActualRows * MaxDepth,$/;"	e	enum:internal::gemm_blocking_space::<anonymous>
SizeB	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^      SizeB = ActualCols * MaxDepth,$/;"	e	enum:internal::gemm_blocking_space::<anonymous>
SizeW	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^      SizeW = MaxDepth * Traits::WorkSpaceFactor$/;"	e	enum:internal::gemm_blocking_space::<anonymous>
Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    typedef gebp_traits<LhsScalar,RhsScalar> Traits;$/;"	t	class:internal::gemm_blocking_space
Transpose	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^      Transpose = StorageOrder==RowMajor$/;"	e	enum:internal::gemm_blocking_space::<anonymous>
Transpose	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^      Transpose = StorageOrder==RowMajor,$/;"	e	enum:internal::gemm_blocking_space::<anonymous>
allocateA	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline void allocateA() {}$/;"	f	class:internal::gemm_blocking_space
allocateA	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    void allocateA()$/;"	f	class:internal::gemm_blocking_space
allocateAll	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline void allocateAll() {}$/;"	f	class:internal::gemm_blocking_space
allocateAll	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    void allocateAll()$/;"	f	class:internal::gemm_blocking_space
allocateB	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline void allocateB() {}$/;"	f	class:internal::gemm_blocking_space
allocateB	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    void allocateB()$/;"	f	class:internal::gemm_blocking_space
allocateW	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline void allocateW() {}$/;"	f	class:internal::gemm_blocking_space
allocateW	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    void allocateW()$/;"	f	class:internal::gemm_blocking_space
blockA	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline LhsScalar* blockA() { return m_blockA; }$/;"	f	class:internal::level3_blocking
blockB	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline RhsScalar* blockB() { return m_blockB; }$/;"	f	class:internal::level3_blocking
blockW	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline RhsScalar* blockW() { return m_blockW; }$/;"	f	class:internal::level3_blocking
gemm_blocking_space	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    gemm_blocking_space(DenseIndex \/*rows*\/, DenseIndex \/*cols*\/, DenseIndex \/*depth*\/)$/;"	f	class:internal::gemm_blocking_space
gemm_blocking_space	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    gemm_blocking_space(DenseIndex rows, DenseIndex cols, DenseIndex depth)$/;"	f	class:internal::gemm_blocking_space
gemm_blocking_space	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^class gemm_blocking_space<StorageOrder,_LhsScalar,_RhsScalar,MaxRows, MaxCols, MaxDepth, false>$/;"	c	namespace:internal
gemm_blocking_space	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^class gemm_blocking_space<StorageOrder,_LhsScalar,_RhsScalar,MaxRows, MaxCols, MaxDepth, true>$/;"	c	namespace:internal
gemm_functor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^  gemm_functor(const Lhs& lhs, const Rhs& rhs, Dest& dest, Scalar actualAlpha,$/;"	f	struct:internal::gemm_functor
gemm_functor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^struct gemm_functor$/;"	s	namespace:internal
general_matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^struct general_matrix_matrix_product<Index,LhsScalar,LhsStorageOrder,ConjugateLhs,RhsScalar,RhsStorageOrder,ConjugateRhs,ColMajor>$/;"	s	namespace:internal
general_matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^struct general_matrix_matrix_product<Index,LhsScalar,LhsStorageOrder,ConjugateLhs,RhsScalar,RhsStorageOrder,ConjugateRhs,RowMajor>$/;"	s	namespace:internal
initParallelSession	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^  void initParallelSession() const$/;"	f	struct:internal::gemm_functor
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^namespace internal {$/;"	n
kc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline DenseIndex kc() const { return m_kc; }$/;"	f	class:internal::level3_blocking
level3_blocking	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    level3_blocking()$/;"	f	class:internal::level3_blocking
level3_blocking	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^class level3_blocking$/;"	c	namespace:internal
m_actualAlpha	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    Scalar m_actualAlpha;$/;"	m	struct:internal::gemm_functor
m_blockA	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    LhsScalar* m_blockA;$/;"	m	class:internal::level3_blocking
m_blockB	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    RhsScalar* m_blockB;$/;"	m	class:internal::level3_blocking
m_blockW	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    RhsScalar* m_blockW;$/;"	m	class:internal::level3_blocking
m_blocking	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    BlockingType& m_blocking;$/;"	m	struct:internal::gemm_functor
m_dest	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    Dest& m_dest;$/;"	m	struct:internal::gemm_functor
m_kc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    DenseIndex m_kc;$/;"	m	class:internal::level3_blocking
m_lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    const Lhs& m_lhs;$/;"	m	struct:internal::gemm_functor
m_mc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    DenseIndex m_mc;$/;"	m	class:internal::level3_blocking
m_nc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    DenseIndex m_nc;$/;"	m	class:internal::level3_blocking
m_rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    const Rhs& m_rhs;$/;"	m	struct:internal::gemm_functor
m_sizeA	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    DenseIndex m_sizeA;$/;"	m	class:internal::gemm_blocking_space
m_sizeB	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    DenseIndex m_sizeB;$/;"	m	class:internal::gemm_blocking_space
m_sizeW	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    DenseIndex m_sizeW;$/;"	m	class:internal::gemm_blocking_space
m_staticA	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    EIGEN_ALIGN16 LhsScalar m_staticA[SizeA];$/;"	m	class:internal::gemm_blocking_space
m_staticB	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    EIGEN_ALIGN16 RhsScalar m_staticB[SizeB];$/;"	m	class:internal::gemm_blocking_space
m_staticW	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    EIGEN_ALIGN16 RhsScalar m_staticW[SizeW];$/;"	m	class:internal::gemm_blocking_space
mc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline DenseIndex mc() const { return m_mc; }$/;"	f	class:internal::level3_blocking
nc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    inline DenseIndex nc() const { return m_nc; }$/;"	f	class:internal::level3_blocking
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^  void operator() (Index row, Index rows, Index col=0, Index cols=-1, GemmParallelInfo<Index>* info=0) const$/;"	f	struct:internal::gemm_functor
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^  static EIGEN_STRONG_INLINE void run($/;"	f	struct:internal::general_matrix_matrix_product
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^static void run(Index rows, Index cols, Index depth,$/;"	f	struct:internal::general_matrix_matrix_product
scaleAndAddTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    template<typename Dest> void scaleAndAddTo(Dest& dst, Scalar alpha) const$/;"	f	class:GeneralProduct
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^struct traits<GeneralProduct<Lhs,Rhs,GemmProduct> >$/;"	s	namespace:internal
~gemm_blocking_space	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrix.h	/^    ~gemm_blocking_space()$/;"	f	class:internal::gemm_blocking_space
BlockSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^    BlockSize  = EIGEN_PLAIN_ENUM_MAX(mr,nr)$/;"	e	enum:internal::tribb_kernel::<anonymous>
EIGEN_GENERAL_MATRIX_MATRIX_TRIANGULAR_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	26;"	d
ResScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^  typedef typename Traits::ResScalar ResScalar;$/;"	t	struct:internal::tribb_kernel
ResScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^  typedef typename scalar_product_traits<LhsScalar, RhsScalar>::ReturnType ResScalar;$/;"	t	struct:internal::general_matrix_matrix_triangular_product
Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^  typedef gebp_traits<LhsScalar,RhsScalar,ConjLhs,ConjRhs> Traits;$/;"	t	struct:internal::tribb_kernel
assignProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^TriangularView<MatrixType,UpLo>& TriangularView<MatrixType,UpLo>::assignProduct(const ProductBase<ProductDerived, _Lhs,_Rhs>& prod, const Scalar& alpha)$/;"	f	class:TriangularView
general_matrix_matrix_triangular_product	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^struct general_matrix_matrix_triangular_product<Index,LhsScalar,LhsStorageOrder,ConjugateLhs,RhsScalar,RhsStorageOrder,ConjugateRhs,ColMajor,UpLo>$/;"	s	namespace:internal
general_matrix_matrix_triangular_product	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^struct general_matrix_matrix_triangular_product<Index,LhsScalar,LhsStorageOrder,ConjugateLhs,RhsScalar,RhsStorageOrder,ConjugateRhs,RowMajor,UpLo>$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^namespace internal {$/;"	n
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^  void operator()(ResScalar* res, Index resStride, const LhsScalar* blockA, const RhsScalar* blockB, Index size, Index depth, ResScalar alpha, RhsScalar* workspace)$/;"	f	struct:internal::tribb_kernel
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^  static EIGEN_STRONG_INLINE void run(Index size, Index depth,const LhsScalar* _lhs, Index lhsStride,$/;"	f	struct:internal::general_matrix_matrix_triangular_product
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^  static EIGEN_STRONG_INLINE void run(Index size, Index depth,const LhsScalar* lhs, Index lhsStride,$/;"	f	struct:internal::general_matrix_matrix_triangular_product
tribb_kernel	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h	/^struct tribb_kernel$/;"	s	namespace:internal
EIGEN_GENERAL_MATRIX_VECTOR_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	26;"	d
LhsPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	/^typedef typename conditional<Vectorizable,_LhsPacket,LhsScalar>::type LhsPacket;$/;"	t	struct:internal::general_matrix_vector_product
LhsPacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	/^  LhsPacketSize = Vectorizable ? packet_traits<LhsScalar>::size : 1,$/;"	e	enum:internal::general_matrix_vector_product::<anonymous>
ResPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	/^typedef typename conditional<Vectorizable,_ResPacket,ResScalar>::type ResPacket;$/;"	t	struct:internal::general_matrix_vector_product
ResPacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	/^  ResPacketSize = Vectorizable ? packet_traits<ResScalar>::size : 1$/;"	e	enum:internal::general_matrix_vector_product::<anonymous>
ResScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	/^typedef typename scalar_product_traits<LhsScalar, RhsScalar>::ReturnType ResScalar;$/;"	t	struct:internal::general_matrix_vector_product
RhsPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	/^typedef typename conditional<Vectorizable,_RhsPacket,RhsScalar>::type RhsPacket;$/;"	t	struct:internal::general_matrix_vector_product
RhsPacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	/^  RhsPacketSize = Vectorizable ? packet_traits<RhsScalar>::size : 1,$/;"	e	enum:internal::general_matrix_vector_product::<anonymous>
Vectorizable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	/^  Vectorizable = packet_traits<LhsScalar>::Vectorizable && packet_traits<RhsScalar>::Vectorizable$/;"	e	enum:internal::general_matrix_vector_product::<anonymous>
_EIGEN_ACCUMULATE_PACKETS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	285;"	d
_EIGEN_ACCUMULATE_PACKETS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	333;"	d
_EIGEN_ACCUMULATE_PACKETS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	553;"	d
_EIGEN_ACCUMULATE_PACKETS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	78;"	d
_LhsPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	/^typedef typename packet_traits<LhsScalar>::type  _LhsPacket;$/;"	t	struct:internal::general_matrix_vector_product
_ResPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	/^typedef typename packet_traits<ResScalar>::type  _ResPacket;$/;"	t	struct:internal::general_matrix_vector_product
_RhsPacket	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	/^typedef typename packet_traits<RhsScalar>::type  _RhsPacket;$/;"	t	struct:internal::general_matrix_vector_product
general_matrix_vector_product	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	/^struct general_matrix_vector_product<Index,LhsScalar,ColMajor,ConjugateLhs,RhsScalar,ConjugateRhs>$/;"	s	namespace:internal
general_matrix_vector_product	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	/^struct general_matrix_vector_product<Index,LhsScalar,RowMajor,ConjugateLhs,RhsScalar,ConjugateRhs>$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	/^namespace internal {$/;"	n
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/GeneralMatrixVector.h	/^EIGEN_DONT_INLINE static void run($/;"	f	struct:internal::general_matrix_vector_product
EIGEN_PARALLELIZER_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/Parallelizer.h	26;"	d
GemmParallelInfo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/Parallelizer.h	/^  GemmParallelInfo() : sync(-1), users(0), rhs_start(0), rhs_length(0) {}$/;"	f	struct:internal::GemmParallelInfo
GemmParallelInfo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/Parallelizer.h	/^template<typename Index> struct GemmParallelInfo$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/Parallelizer.h	/^namespace internal {$/;"	n
manage_multi_threading	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/Parallelizer.h	/^inline void manage_multi_threading(Action action, int* v)$/;"	f	namespace:internal
nbThreads	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/Parallelizer.h	/^inline int nbThreads()$/;"	f	namespace:internal
parallelize_gemm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/Parallelizer.h	/^void parallelize_gemm(const Functor& func, Index rows, Index cols, bool transpose)$/;"	f	namespace:internal
rhs_length	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/Parallelizer.h	/^  Index rhs_length;$/;"	m	struct:internal::GemmParallelInfo
rhs_start	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/Parallelizer.h	/^  Index rhs_start;$/;"	m	struct:internal::GemmParallelInfo
setNbThreads	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/Parallelizer.h	/^inline void setNbThreads(int v)$/;"	f	namespace:internal
sync	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/Parallelizer.h	/^  int volatile sync;$/;"	m	struct:internal::GemmParallelInfo
users	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/Parallelizer.h	/^  int volatile users;$/;"	m	struct:internal::GemmParallelInfo
EIGEN_SELFADJOINT_MATRIX_MATRIX_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	26;"	d
LhsIsSelfAdjoint	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^    LhsIsSelfAdjoint = (LhsMode&SelfAdjoint)==SelfAdjoint,$/;"	e	enum:SelfadjointProductMatrix::<anonymous>
LhsIsUpper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^    LhsIsUpper = (LhsMode&(Upper|Lower))==Upper,$/;"	e	enum:SelfadjointProductMatrix::<anonymous>
PacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^  enum { PacketSize = packet_traits<Scalar>::size };$/;"	e	enum:internal::symm_pack_rhs::<anonymous>
RhsIsSelfAdjoint	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^    RhsIsSelfAdjoint = (RhsMode&SelfAdjoint)==SelfAdjoint$/;"	e	enum:SelfadjointProductMatrix::<anonymous>
RhsIsUpper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^    RhsIsUpper = (RhsMode&(Upper|Lower))==Upper,$/;"	e	enum:SelfadjointProductMatrix::<anonymous>
SelfadjointProductMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^  SelfadjointProductMatrix(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs) {}$/;"	f	struct:SelfadjointProductMatrix
SelfadjointProductMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^struct SelfadjointProductMatrix<Lhs,LhsMode,false,Rhs,RhsMode,false>$/;"	s
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^namespace internal {$/;"	n
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^  void operator()(Scalar* blockA, const Scalar* _lhs, Index lhsStride, Index cols, Index rows)$/;"	f	struct:internal::symm_pack_lhs
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^  void operator()(Scalar* blockB, const Scalar* _rhs, Index rhsStride, Index rows, Index cols, Index k2)$/;"	f	struct:internal::symm_pack_rhs
pack	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^  void pack(Scalar* blockA, const const_blas_data_mapper<Scalar,Index,StorageOrder>& lhs, Index cols, Index i, Index& count)$/;"	f	struct:internal::symm_pack_lhs
product_selfadjoint_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^struct product_selfadjoint_matrix<Scalar,Index,LhsStorageOrder,LhsSelfAdjoint,ConjugateLhs, RhsStorageOrder,RhsSelfAdjoint,ConjugateRhs,RowMajor>$/;"	s	namespace:internal
product_selfadjoint_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^struct product_selfadjoint_matrix<Scalar,Index,LhsStorageOrder,false,ConjugateLhs, RhsStorageOrder,true,ConjugateRhs,ColMajor>$/;"	s	namespace:internal
product_selfadjoint_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^struct product_selfadjoint_matrix<Scalar,Index,LhsStorageOrder,true,ConjugateLhs, RhsStorageOrder,false,ConjugateRhs,ColMajor>$/;"	s	namespace:internal
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^  static EIGEN_DONT_INLINE void run($/;"	f	struct:internal::product_selfadjoint_matrix
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^  static EIGEN_STRONG_INLINE void run($/;"	f	struct:internal::product_selfadjoint_matrix
scaleAndAddTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^  template<typename Dest> void scaleAndAddTo(Dest& dst, Scalar alpha) const$/;"	f	struct:SelfadjointProductMatrix
symm_pack_lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^struct symm_pack_lhs$/;"	s	namespace:internal
symm_pack_rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^struct symm_pack_rhs$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixMatrix.h	/^struct traits<SelfadjointProductMatrix<Lhs,LhsMode,false,Rhs,RhsMode,false> >$/;"	s	namespace:internal
EIGEN_SELFADJOINT_MATRIX_VECTOR_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixVector.h	26;"	d
LhsUpLo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^    LhsUpLo = LhsMode&(Upper|Lower)$/;"	e	enum:SelfadjointProductMatrix::<anonymous>
RhsUpLo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^    RhsUpLo = RhsMode&(Upper|Lower)$/;"	e	enum:SelfadjointProductMatrix::<anonymous>
SelfadjointProductMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^  SelfadjointProductMatrix(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs) {}$/;"	f	struct:SelfadjointProductMatrix
SelfadjointProductMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^struct SelfadjointProductMatrix<Lhs,0,true,Rhs,RhsMode,false>$/;"	s
SelfadjointProductMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^struct SelfadjointProductMatrix<Lhs,LhsMode,false,Rhs,0,true>$/;"	s
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^namespace internal {$/;"	n
product_selfadjoint_vector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^static EIGEN_DONT_INLINE void product_selfadjoint_vector($/;"	f	namespace:internal
scaleAndAddTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^  template<typename Dest> void scaleAndAddTo(Dest& dest, Scalar alpha) const$/;"	f	struct:SelfadjointProductMatrix
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^struct traits<SelfadjointProductMatrix<Lhs,0,true,Rhs,RhsMode,false> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointMatrixVector.h	/^struct traits<SelfadjointProductMatrix<Lhs,LhsMode,false,Rhs,0,true> >$/;"	s	namespace:internal
EIGEN_SELFADJOINT_PRODUCT_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointProduct.h	26;"	d
rankUpdate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointProduct.h	/^::rankUpdate(const MatrixBase<DerivedU>& u, Scalar alpha)$/;"	f	class:SelfAdjointView
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointProduct.h	/^  static void run(Index size, Scalar* mat, Index stride, const Scalar* vec, Scalar alpha)$/;"	f	struct:selfadjoint_rank1_update
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointProduct.h	/^  static void run(MatrixType& mat, const OtherType& other, typename MatrixType::Scalar alpha)$/;"	f	struct:selfadjoint_product_selector
selfadjoint_product_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointProduct.h	/^struct selfadjoint_product_selector<MatrixType,OtherType,UpLo,false>$/;"	s
selfadjoint_product_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointProduct.h	/^struct selfadjoint_product_selector<MatrixType,OtherType,UpLo,true>$/;"	s
selfadjoint_rank1_update	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointProduct.h	/^struct selfadjoint_rank1_update<Scalar,Index,ColMajor,UpLo,ConjLhs,ConjRhs>$/;"	s
selfadjoint_rank1_update	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointProduct.h	/^struct selfadjoint_rank1_update<Scalar,Index,RowMajor,UpLo,ConjLhs,ConjRhs>$/;"	s
EIGEN_SELFADJOINTRANK2UPTADE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointRank2Update.h	26;"	d
conj_expr_if	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointRank2Update.h	/^template<bool Cond, typename T> struct conj_expr_if$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointRank2Update.h	/^namespace internal {$/;"	n
rankUpdate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointRank2Update.h	/^::rankUpdate(const MatrixBase<DerivedU>& u, const MatrixBase<DerivedV>& v, Scalar alpha)$/;"	f	class:SelfAdjointView
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointRank2Update.h	/^  static void run(Scalar* mat, Index stride, const UType& u, const VType& v, Scalar alpha)$/;"	f	struct:internal::selfadjoint_rank2_update_selector
selfadjoint_rank2_update_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointRank2Update.h	/^struct selfadjoint_rank2_update_selector<Scalar,Index,UType,VType,Lower>$/;"	s	namespace:internal
selfadjoint_rank2_update_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/SelfadjointRank2Update.h	/^struct selfadjoint_rank2_update_selector<Scalar,Index,UType,VType,Upper>$/;"	s	namespace:internal
EIGEN_TRIANGULAR_MATRIX_MATRIX_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h	26;"	d
IsLower	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^    IsLower = (Mode&Lower) == Lower,$/;"	e	enum:internal::product_triangular_matrix_matrix::<anonymous>
SetDiag	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^    SetDiag = (Mode&(ZeroDiag|UnitDiag)) ? 0 : 1$/;"	e	enum:internal::product_triangular_matrix_matrix::<anonymous>
SmallPanelWidth	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^    SmallPanelWidth   = EIGEN_PLAIN_ENUM_MAX(Traits::mr,Traits::nr),$/;"	e	enum:internal::product_triangular_matrix_matrix::<anonymous>
Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^  typedef gebp_traits<Scalar,Scalar> Traits;$/;"	t	struct:internal::product_triangular_matrix_matrix
TriangularProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^  TriangularProduct(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs) {}$/;"	f	struct:TriangularProduct
TriangularProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^struct TriangularProduct<Mode,LhsIsTriangular,Lhs,false,Rhs,false>$/;"	s
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^namespace internal {$/;"	n
product_triangular_matrix_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^struct product_triangular_matrix_matrix<Scalar,Index,Mode,LhsIsTriangular,$/;"	s	namespace:internal
product_triangular_matrix_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^struct product_triangular_matrix_matrix<Scalar,Index,Mode,false,$/;"	s	namespace:internal
product_triangular_matrix_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^struct product_triangular_matrix_matrix<Scalar,Index,Mode,true,$/;"	s	namespace:internal
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^  static EIGEN_DONT_INLINE void run($/;"	f	struct:internal::product_triangular_matrix_matrix
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^  static EIGEN_STRONG_INLINE void run($/;"	f	struct:internal::product_triangular_matrix_matrix
scaleAndAddTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^  template<typename Dest> void scaleAndAddTo(Dest& dst, Scalar alpha) const$/;"	f	struct:TriangularProduct
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixMatrix.h	/^struct traits<TriangularProduct<Mode,LhsIsTriangular,Lhs,false,Rhs,false> >$/;"	s	namespace:internal
EIGEN_TRIANGULARMATRIXVECTOR_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h	26;"	d
HasUnitDiag	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h	/^    HasUnitDiag = (Mode & UnitDiag)==UnitDiag$/;"	e	enum:internal::product_triangular_matrix_vector::<anonymous>
IsLower	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h	/^    IsLower = ((Mode&Lower)==Lower),$/;"	e	enum:internal::product_triangular_matrix_vector::<anonymous>
ResScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h	/^  typedef typename scalar_product_traits<LhsScalar, RhsScalar>::ReturnType ResScalar;$/;"	t	struct:internal::product_triangular_matrix_vector
TriangularProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h	/^  TriangularProduct(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs) {}$/;"	f	struct:TriangularProduct
TriangularProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h	/^struct TriangularProduct<Mode,false,Lhs,true,Rhs,false>$/;"	s
TriangularProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h	/^struct TriangularProduct<Mode,true,Lhs,false,Rhs,true>$/;"	s
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h	/^namespace internal {$/;"	n
product_triangular_matrix_vector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h	/^struct product_triangular_matrix_vector<Index,Mode,LhsScalar,ConjLhs,RhsScalar,ConjRhs,ColMajor>$/;"	s	namespace:internal
product_triangular_matrix_vector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h	/^struct product_triangular_matrix_vector<Index,Mode,LhsScalar,ConjLhs,RhsScalar,ConjRhs,RowMajor>$/;"	s	namespace:internal
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h	/^  static EIGEN_DONT_INLINE  void run(Index rows, Index cols, const LhsScalar* _lhs, Index lhsStride,$/;"	f	struct:internal::product_triangular_matrix_vector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h	/^  static void run(Index rows, Index cols, const LhsScalar* _lhs, Index lhsStride,$/;"	f	struct:internal::product_triangular_matrix_vector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h	/^  static void run(const TriangularProduct<Mode,true,Lhs,false,Rhs,true>& prod, Dest& dest, typename TriangularProduct<Mode,true,Lhs,false,Rhs,true>::Scalar alpha)$/;"	f	struct:internal::trmv_selector
scaleAndAddTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h	/^  template<typename Dest> void scaleAndAddTo(Dest& dst, Scalar alpha) const$/;"	f	struct:TriangularProduct
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h	/^struct traits<TriangularProduct<Mode,LhsIsTriangular,Lhs,false,Rhs,true> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h	/^struct traits<TriangularProduct<Mode,LhsIsTriangular,Lhs,true,Rhs,false> >$/;"	s	namespace:internal
trmv_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h	/^template<> struct trmv_selector<ColMajor>$/;"	s	namespace:internal
trmv_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularMatrixVector.h	/^template<> struct trmv_selector<RowMajor>$/;"	s	namespace:internal
EIGEN_TRIANGULAR_SOLVER_MATRIX_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularSolverMatrix.h	26;"	d
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularSolverMatrix.h	/^namespace internal {$/;"	n
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularSolverMatrix.h	/^  static EIGEN_DONT_INLINE void run($/;"	f	struct:internal::triangular_solve_matrix
triangular_solve_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularSolverMatrix.h	/^struct triangular_solve_matrix<Scalar,Index,OnTheLeft,Mode,Conjugate,TriStorageOrder,ColMajor>$/;"	s	namespace:internal
triangular_solve_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularSolverMatrix.h	/^struct triangular_solve_matrix<Scalar,Index,OnTheRight,Mode,Conjugate,TriStorageOrder,ColMajor>$/;"	s	namespace:internal
triangular_solve_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularSolverMatrix.h	/^struct triangular_solve_matrix<Scalar,Index,Side,Mode,Conjugate,TriStorageOrder,RowMajor>$/;"	s	namespace:internal
EIGEN_TRIANGULAR_SOLVER_VECTOR_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularSolverVector.h	26;"	d
IsLower	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularSolverVector.h	/^    IsLower = ((Mode&Lower)==Lower)$/;"	e	enum:internal::triangular_solve_vector::<anonymous>
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularSolverVector.h	/^namespace internal {$/;"	n
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularSolverVector.h	/^  static void run(Index size, const LhsScalar* _lhs, Index lhsStride, RhsScalar* rhs)$/;"	f	struct:internal::triangular_solve_vector
triangular_solve_vector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularSolverVector.h	/^struct triangular_solve_vector<LhsScalar, RhsScalar, Index, OnTheLeft, Mode, Conjugate, ColMajor>$/;"	s	namespace:internal
triangular_solve_vector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularSolverVector.h	/^struct triangular_solve_vector<LhsScalar, RhsScalar, Index, OnTheLeft, Mode, Conjugate, RowMajor>$/;"	s	namespace:internal
triangular_solve_vector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/products/TriangularSolverVector.h	/^struct triangular_solve_vector<LhsScalar, RhsScalar, Index, OnTheRight, Mode, Conjugate, StorageOrder>$/;"	s	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  typedef blas_traits<NestedXpr> Base;$/;"	t	struct:internal::blas_traits
DirectLinearAccessType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^    >::type DirectLinearAccessType;$/;"	t	struct:internal::blas_traits
EIGEN_BLASUTIL_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	26;"	d
ExtractType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  typedef Transpose<const typename Base::_ExtractType>  ExtractType; \/\/ const to get rid of a compile error; anyway blas traits are only used on the RHS$/;"	t	struct:internal::blas_traits
ExtractType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  typedef const XprType& ExtractType;$/;"	t	struct:internal::blas_traits
ExtractType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  typedef typename Base::ExtractType ExtractType;$/;"	t	struct:internal::blas_traits
HasUsableDirectAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^    HasUsableDirectAccess = (    (int(XprType::Flags)&DirectAccessBit)$/;"	e	enum:internal::blas_traits::<anonymous>
IsComplex	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^    IsComplex = NumTraits<Scalar>::IsComplex,$/;"	e	enum:internal::blas_traits::<anonymous>
IsTransposed	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^    IsTransposed = Base::IsTransposed ? 0 : 1$/;"	e	enum:internal::blas_traits::<anonymous>
IsTransposed	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^    IsTransposed = false,$/;"	e	enum:internal::blas_traits::<anonymous>
NeedToConjugate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^    NeedToConjugate = Base::NeedToConjugate ? 0 : IsComplex$/;"	e	enum:internal::blas_traits::<anonymous>
NeedToConjugate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^    NeedToConjugate = false,$/;"	e	enum:internal::blas_traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  typedef std::complex<RealScalar> Scalar;$/;"	t	struct:internal::conj_helper
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  typedef typename NestedXpr::Scalar Scalar;$/;"	t	struct:internal::blas_traits
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  typedef typename traits<XprType>::Scalar Scalar;$/;"	t	struct:internal::blas_traits
XprType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  typedef CwiseUnaryOp<scalar_conjugate_op<Scalar>, NestedXpr> XprType;$/;"	t	struct:internal::blas_traits
XprType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  typedef CwiseUnaryOp<scalar_multiple_op<Scalar>, NestedXpr> XprType;$/;"	t	struct:internal::blas_traits
XprType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  typedef CwiseUnaryOp<scalar_opposite_op<Scalar>, NestedXpr> XprType;$/;"	t	struct:internal::blas_traits
XprType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  typedef Transpose<NestedXpr> XprType;$/;"	t	struct:internal::blas_traits
_ExtractType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  typedef Transpose<const typename Base::_ExtractType> _ExtractType;$/;"	t	struct:internal::blas_traits
_ExtractType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  typedef XprType _ExtractType;$/;"	t	struct:internal::blas_traits
blas_data_mapper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^    blas_data_mapper(Scalar* data, Index stride) : m_data(data), m_stride(stride) {}$/;"	f	class:internal::blas_data_mapper
blas_data_mapper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^class blas_data_mapper$/;"	c	namespace:internal
blas_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^struct blas_traits<CwiseUnaryOp<scalar_conjugate_op<Scalar>, NestedXpr> >$/;"	s	namespace:internal
blas_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^struct blas_traits<CwiseUnaryOp<scalar_multiple_op<Scalar>, NestedXpr> >$/;"	s	namespace:internal
blas_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^struct blas_traits<CwiseUnaryOp<scalar_opposite_op<Scalar>, NestedXpr> >$/;"	s	namespace:internal
blas_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^struct blas_traits<Transpose<NestedXpr> >$/;"	s	namespace:internal
blas_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^struct blas_traits<const T>$/;"	s	namespace:internal
blas_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^template<typename XprType> struct blas_traits$/;"	s	namespace:internal
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^template<typename RealScalar,bool Conj> struct conj_helper<RealScalar, std::complex<RealScalar>, false,Conj>$/;"	s	namespace:internal
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^template<typename RealScalar,bool Conj> struct conj_helper<std::complex<RealScalar>, RealScalar, Conj,false>$/;"	s	namespace:internal
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^template<typename RealScalar> struct conj_helper<std::complex<RealScalar>, std::complex<RealScalar>, false,true>$/;"	s	namespace:internal
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^template<typename RealScalar> struct conj_helper<std::complex<RealScalar>, std::complex<RealScalar>, true,false>$/;"	s	namespace:internal
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^template<typename RealScalar> struct conj_helper<std::complex<RealScalar>, std::complex<RealScalar>, true,true>$/;"	s	namespace:internal
conj_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^template<typename Scalar> struct conj_helper<Scalar,Scalar,false,false>$/;"	s	namespace:internal
conj_if	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^template<> struct conj_if<false> {$/;"	s	namespace:internal
conj_if	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^template<> struct conj_if<true> {$/;"	s	namespace:internal
const_blas_data_mapper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^    const_blas_data_mapper(const Scalar* data, Index stride) : m_data(data), m_stride(stride) {}$/;"	f	class:internal::const_blas_data_mapper
const_blas_data_mapper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^class const_blas_data_mapper$/;"	c	namespace:internal
extract	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  static inline const ExtractType extract(const XprType& x) { return Base::extract(x.nestedExpression()); }$/;"	f	struct:internal::blas_traits
extract	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  static inline const ExtractType extract(const XprType& x) { return x; }$/;"	f	struct:internal::blas_traits
extractScalarFactor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  static inline Scalar extractScalarFactor(const XprType& x) { return Base::extractScalarFactor(x.nestedExpression()); }$/;"	f	struct:internal::blas_traits
extractScalarFactor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  static inline Scalar extractScalarFactor(const XprType& x) { return conj(Base::extractScalarFactor(x.nestedExpression())); }$/;"	f	struct:internal::blas_traits
extractScalarFactor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  static inline Scalar extractScalarFactor(const XprType& x)$/;"	f	struct:internal::blas_traits
extractScalarFactor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  static inline const Scalar extractScalarFactor(const XprType&) { return Scalar(1); }$/;"	f	struct:internal::blas_traits
extract_data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^template<typename T> const typename T::Scalar* extract_data(const T& m)$/;"	f	namespace:internal
extract_data_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^struct extract_data_selector {$/;"	s	namespace:internal
extract_data_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^struct extract_data_selector<T,false> {$/;"	s	namespace:internal
get_factor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^template<typename From,typename To> struct get_factor {$/;"	s	namespace:internal
get_factor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^template<typename Scalar> struct get_factor<Scalar,typename NumTraits<Scalar>::Real> {$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^namespace internal {$/;"	n
m_data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^    Scalar* EIGEN_RESTRICT m_data;$/;"	m	class:internal::blas_data_mapper
m_data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^    const Scalar* EIGEN_RESTRICT m_data;$/;"	m	class:internal::const_blas_data_mapper
m_stride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^    Index m_stride;$/;"	m	class:internal::blas_data_mapper
m_stride	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^    Index m_stride;$/;"	m	class:internal::const_blas_data_mapper
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^    EIGEN_STRONG_INLINE Scalar& operator()(Index i, Index j)$/;"	f	class:internal::blas_data_mapper
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^    EIGEN_STRONG_INLINE const Scalar& operator()(Index i, Index j) const$/;"	f	class:internal::const_blas_data_mapper
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  inline T operator()(const T& x) { return conj(x); }$/;"	f	struct:internal::conj_if
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  inline const T& operator()(const T& x) { return x; }$/;"	f	struct:internal::conj_if
pmadd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  EIGEN_STRONG_INLINE Scalar pmadd(const RealScalar& x, const Scalar& y, const Scalar& c) const$/;"	f	struct:internal::conj_helper
pmadd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  EIGEN_STRONG_INLINE Scalar pmadd(const Scalar& x, const RealScalar& y, const Scalar& c) const$/;"	f	struct:internal::conj_helper
pmadd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  EIGEN_STRONG_INLINE Scalar pmadd(const Scalar& x, const Scalar& y, const Scalar& c) const { return internal::pmadd(x,y,c); }$/;"	f	struct:internal::conj_helper
pmadd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  EIGEN_STRONG_INLINE Scalar pmadd(const Scalar& x, const Scalar& y, const Scalar& c) const$/;"	f	struct:internal::conj_helper
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  EIGEN_STRONG_INLINE Scalar pmul(const RealScalar& x, const Scalar& y) const$/;"	f	struct:internal::conj_helper
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  EIGEN_STRONG_INLINE Scalar pmul(const Scalar& x, const RealScalar& y) const$/;"	f	struct:internal::conj_helper
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  EIGEN_STRONG_INLINE Scalar pmul(const Scalar& x, const Scalar& y) const { return internal::pmul(x,y); }$/;"	f	struct:internal::conj_helper
pmul	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  EIGEN_STRONG_INLINE Scalar pmul(const Scalar& x, const Scalar& y) const$/;"	f	struct:internal::conj_helper
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  EIGEN_STRONG_INLINE static To run(const From& x) { return x; }$/;"	f	struct:internal::get_factor
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  EIGEN_STRONG_INLINE static typename NumTraits<Scalar>::Real run(const Scalar& x) { return real(x); }$/;"	f	struct:internal::get_factor
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  static const typename T::Scalar* run(const T& m)$/;"	f	struct:internal::extract_data_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/BlasUtil.h	/^  static typename T::Scalar* run(const T&) { return 0; }$/;"	f	struct:internal::extract_data_selector
ABx_lx	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  ABx_lx              = 0x200,$/;"	e	enum:DecompositionOptions
AccessorLevels	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum AccessorLevels {$/;"	g
Action	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum Action {GetAction, SetAction};$/;"	g
ActualPacketAccessBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^const unsigned int ActualPacketAccessBit = 0x0;$/;"	v
ActualPacketAccessBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^const unsigned int ActualPacketAccessBit = PacketAccessBit;$/;"	v
Affine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  Affine        = 0x2,$/;"	e	enum:TransformTraits
AffineCompact	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  AffineCompact = 0x10 | Affine,$/;"	e	enum:TransformTraits
Aligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  Aligned=1 $/;"	e
AlignedBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^const unsigned int AlignedBit = 0x80;$/;"	v
AltiVec	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^    AltiVec = 0x2,$/;"	e	enum:Architecture::Type
Architecture	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^namespace Architecture$/;"	n
ArrayXpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^struct ArrayXpr {};$/;"	s
AutoAlign	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  AutoAlign = 0,$/;"	e
Ax_lBx	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  Ax_lBx              = 0x100,$/;"	e	enum:DecompositionOptions
BAx_lx	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  BAx_lx              = 0x400,$/;"	e	enum:DecompositionOptions
BothDirections	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  BothDirections $/;"	e	enum:DirectionType
BottomLeft	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum CornerType { TopLeft, TopRight, BottomLeft, BottomRight };$/;"	e	enum:CornerType
BottomRight	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum CornerType { TopLeft, TopRight, BottomLeft, BottomRight };$/;"	e	enum:CornerType
CacheFriendlyProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum ProductEvaluationMode { NormalProduct, CacheFriendlyProduct };$/;"	e	enum:ProductEvaluationMode
CoeffBasedProductMode	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum { CoeffBasedProductMode, LazyCoeffBasedProductMode, OuterProduct, InnerProduct, GemvProduct, GemmProduct };$/;"	e
ColMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  ColMajor = 0,$/;"	e
ColPivHouseholderQRPreconditioner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  ColPivHouseholderQRPreconditioner,$/;"	e	enum:QRPreconditioners
CompleteUnrolling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  CompleteUnrolling$/;"	e
ComputationInfo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum ComputationInfo {$/;"	g
ComputeEigenvectors	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  ComputeEigenvectors = 0x80,$/;"	e	enum:DecompositionOptions
ComputeFullU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  ComputeFullU        = 0x04,$/;"	e	enum:DecompositionOptions
ComputeFullV	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  ComputeFullV        = 0x10,$/;"	e	enum:DecompositionOptions
ComputeThinU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  ComputeThinU        = 0x08,$/;"	e	enum:DecompositionOptions
ComputeThinV	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  ComputeThinV        = 0x20,$/;"	e	enum:DecompositionOptions
ConditionalJumpCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum { ConditionalJumpCost = 5 };$/;"	e
CornerType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum CornerType { TopLeft, TopRight, BottomLeft, BottomRight };$/;"	g
DecompositionOptions	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum DecompositionOptions {$/;"	g
Default	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  EIGEN_UNUSED Default_t Default;$/;"	v
DefaultTraversal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  DefaultTraversal,$/;"	e
Default_t	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^struct Default_t {};$/;"	s
Dense	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^struct Dense {};$/;"	s
DirectAccessBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^const unsigned int DirectAccessBit = 0x40;$/;"	v
DirectAccessors	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  DirectAccessors, $/;"	e	enum:AccessorLevels
DirectWriteAccessors	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  DirectWriteAccessors$/;"	e	enum:AccessorLevels
DirectionType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum DirectionType { $/;"	g
DontAlign	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  DontAlign = 0x2$/;"	e
Dynamic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^const int Dynamic = -1;$/;"	v
EIGEN_CONSTANTS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	27;"	d
EigVecMask	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  EigVecMask = EigenvaluesOnly | ComputeEigenvectors,$/;"	e	enum:DecompositionOptions
EigenvaluesOnly	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  EigenvaluesOnly     = 0x40,$/;"	e	enum:DecompositionOptions
EvalBeforeAssigningBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^const unsigned int EvalBeforeAssigningBit = 0x4;$/;"	v
EvalBeforeNestingBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^const unsigned int EvalBeforeNestingBit = 0x2;$/;"	v
FullPivHouseholderQRPreconditioner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  FullPivHouseholderQRPreconditioner$/;"	e	enum:QRPreconditioners
GemmProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum { CoeffBasedProductMode, LazyCoeffBasedProductMode, OuterProduct, InnerProduct, GemvProduct, GemmProduct };$/;"	e
GemvProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum { CoeffBasedProductMode, LazyCoeffBasedProductMode, OuterProduct, InnerProduct, GemvProduct, GemmProduct };$/;"	e
GenEigMask	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  GenEigMask = Ax_lBx | ABx_lx | BAx_lx$/;"	e	enum:DecompositionOptions
Generic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^    Generic = 0x0,$/;"	e	enum:Architecture::Type
GetAction	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum Action {GetAction, SetAction};$/;"	e	enum:Action
HereditaryBits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^const unsigned int HereditaryBits = RowMajorBit$/;"	v
Horizontal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  Horizontal, $/;"	e	enum:DirectionType
HouseholderQRPreconditioner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  HouseholderQRPreconditioner,$/;"	e	enum:QRPreconditioners
Infinity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^const int Infinity = -1;$/;"	v
InnerProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum { CoeffBasedProductMode, LazyCoeffBasedProductMode, OuterProduct, InnerProduct, GemvProduct, GemmProduct };$/;"	e
InnerUnrolling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  InnerUnrolling,$/;"	e
InnerVectorizedTraversal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  InnerVectorizedTraversal,$/;"	e
InvalidTraversal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  InvalidTraversal$/;"	e
IsDense	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  IsDense         = 0,$/;"	e
IsSparse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  IsSparse$/;"	e
Isometry	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  Isometry      = 0x1,$/;"	e	enum:TransformTraits
LazyCoeffBasedProductMode	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum { CoeffBasedProductMode, LazyCoeffBasedProductMode, OuterProduct, InnerProduct, GemvProduct, GemmProduct };$/;"	e
LinearAccessBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^const unsigned int LinearAccessBit = 0x10;$/;"	v
LinearTraversal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  LinearTraversal,$/;"	e
LinearVectorizedTraversal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  LinearVectorizedTraversal,$/;"	e
Lower	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  Lower=0x1,                      $/;"	e
LvalueBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^const unsigned int LvalueBit = 0x20;$/;"	v
MatrixXpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^struct MatrixXpr {};$/;"	s
NestByRefBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^const unsigned int NestByRefBit = 0x100;$/;"	v
NoChange	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  EIGEN_UNUSED NoChange_t NoChange;$/;"	v
NoChange_t	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^struct NoChange_t {};$/;"	s
NoConvergence	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  NoConvergence = 2$/;"	e	enum:ComputationInfo
NoPivoting	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  NoPivoting          = 0x02, $/;"	e	enum:DecompositionOptions
NoQRPreconditioner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  NoQRPreconditioner,$/;"	e	enum:QRPreconditioners
NoUnrolling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  NoUnrolling,$/;"	e
NormalProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum ProductEvaluationMode { NormalProduct, CacheFriendlyProduct };$/;"	e	enum:ProductEvaluationMode
NumericalIssue	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  NumericalIssue = 1, $/;"	e	enum:ComputationInfo
OnTheLeft	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  OnTheLeft = 1,  $/;"	e
OnTheRight	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  OnTheRight = 2  $/;"	e
OuterProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum { CoeffBasedProductMode, LazyCoeffBasedProductMode, OuterProduct, InnerProduct, GemvProduct, GemmProduct };$/;"	e
PacketAccessBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^const unsigned int PacketAccessBit = 0x8;$/;"	v
Pivoting	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  Pivoting            = 0x01, $/;"	e	enum:DecompositionOptions
ProductEvaluationMode	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum ProductEvaluationMode { NormalProduct, CacheFriendlyProduct };$/;"	g
Projective	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  Projective    = 0x20$/;"	e	enum:TransformTraits
QRPreconditioners	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum QRPreconditioners {$/;"	g
ReadOnlyAccessors	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  ReadOnlyAccessors, $/;"	e	enum:AccessorLevels
RowMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  RowMajor = 0x1,  \/\/ it is only a coincidence that this is equal to RowMajorBit -- don't rely on that$/;"	e
RowMajorBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^const unsigned int RowMajorBit = 0x1;$/;"	v
SSE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^    SSE = 0x1,$/;"	e	enum:Architecture::Type
SelfAdjoint	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  SelfAdjoint=0x10$/;"	e
Sequential	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  EIGEN_UNUSED Sequential_t Sequential;$/;"	v
Sequential_t	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^struct Sequential_t {};$/;"	s
SetAction	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum Action {GetAction, SetAction};$/;"	e	enum:Action
SliceVectorizedTraversal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  SliceVectorizedTraversal,$/;"	e
StrictlyLower	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  StrictlyLower=ZeroDiag|Lower, $/;"	e
StrictlyUpper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  StrictlyUpper=ZeroDiag|Upper,$/;"	e
Success	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  Success = 0,        $/;"	e	enum:ComputationInfo
Target	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^    Target = SSE$/;"	e	enum:Architecture::Type
TopLeft	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum CornerType { TopLeft, TopRight, BottomLeft, BottomRight };$/;"	e	enum:CornerType
TopRight	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum CornerType { TopLeft, TopRight, BottomLeft, BottomRight };$/;"	e	enum:CornerType
TransformTraits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^enum TransformTraits {$/;"	g
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  enum Type {$/;"	g	namespace:Architecture
Unaligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  Unaligned=0, $/;"	e
UnitDiag	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  UnitDiag=0x4, $/;"	e
UnitLower	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  UnitLower=UnitDiag|Lower, $/;"	e
UnitUpper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  UnitUpper=UnitDiag|Upper,$/;"	e
Upper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  Upper=0x2,                      $/;"	e
Vertical	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  Vertical, $/;"	e	enum:DirectionType
WriteAccessors	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  WriteAccessors, $/;"	e	enum:AccessorLevels
ZeroDiag	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Constants.h	/^  ZeroDiag=0x8,$/;"	e
EIGEN_WARNINGS_DISABLED	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/DisableStupidWarnings.h	2;"	d
ComplexScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/ForwardDeclarations.h	/^  typedef std::complex<typename NumTraits<Scalar>::Real> ComplexScalar;$/;"	t	struct:internal::stem_function
EIGEN_FORWARDDECLARATIONS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/ForwardDeclarations.h	27;"	d
accessors_level	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/ForwardDeclarations.h	/^template<typename Derived> struct accessors_level$/;"	s	namespace:internal
has_direct_access	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/ForwardDeclarations.h	/^  enum { has_direct_access = (traits<Derived>::Flags & DirectAccessBit) ? 1 : 0,$/;"	e	enum:internal::accessors_level::<anonymous>
has_direct_access	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/ForwardDeclarations.h	/^template<typename Derived> struct has_direct_access$/;"	s	namespace:internal
has_write_access	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/ForwardDeclarations.h	/^         has_write_access = (traits<Derived>::Flags & LvalueBit) ? 1 : 0,$/;"	e	enum:internal::accessors_level::<anonymous>
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/ForwardDeclarations.h	/^namespace internal {$/;"	n
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/ForwardDeclarations.h	/^  enum { ret = (traits<Derived>::Flags & DirectAccessBit) ? 1 : 0 };$/;"	e	enum:internal::has_direct_access::<anonymous>
stem_function	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/ForwardDeclarations.h	/^struct stem_function$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/ForwardDeclarations.h	/^template<typename T> struct traits<const T> : traits<T> {};$/;"	s	namespace:internal
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/ForwardDeclarations.h	/^  typedef ComplexScalar type(ComplexScalar, int);$/;"	t	struct:internal::stem_function
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/ForwardDeclarations.h	/^         value = has_direct_access ? (has_write_access ? DirectWriteAccessors : DirectAccessors)$/;"	e	enum:internal::accessors_level::<anonymous>
EIGEN_ALIGN	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	88;"	d
EIGEN_ALIGN	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	90;"	d
EIGEN_ALIGN16	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	275;"	d
EIGEN_ALIGN_STATICALLY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	96;"	d
EIGEN_ALIGN_STATICALLY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	98;"	d
EIGEN_ALIGN_TO_BOUNDARY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	265;"	d
EIGEN_ALIGN_TO_BOUNDARY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	267;"	d
EIGEN_ALIGN_TO_BOUNDARY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	270;"	d
EIGEN_ALWAYS_INLINE_ATTRIB	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	140;"	d
EIGEN_ALWAYS_INLINE_ATTRIB	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	142;"	d
EIGEN_ARCH_WANTS_STACK_ALIGNMENT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	79;"	d
EIGEN_ARCH_WANTS_STACK_ALIGNMENT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	81;"	d
EIGEN_ASM_COMMENT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	252;"	d
EIGEN_ASM_COMMENT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	254;"	d
EIGEN_CAT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	127;"	d
EIGEN_CAT2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	126;"	d
EIGEN_CWISE_PRODUCT_RETURN_TYPE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	408;"	d
EIGEN_DEBUG_VAR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	123;"	d
EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	170;"	d
EIGEN_DEFAULT_DENSE_INDEX_TYPE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	111;"	d
EIGEN_DEFAULT_IO_FORMAT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	300;"	d
EIGEN_DEFAULT_IO_FORMAT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	302;"	d
EIGEN_DEFAULT_MATRIX_STORAGE_ORDER_OPTION	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	105;"	d
EIGEN_DEFAULT_MATRIX_STORAGE_ORDER_OPTION	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	107;"	d
EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	171;"	d
EIGEN_DENSE_PUBLIC_INTERFACE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	349;"	d
EIGEN_DEPRECATED	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	235;"	d
EIGEN_DEPRECATED	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	237;"	d
EIGEN_DEPRECATED	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	239;"	d
EIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	100;"	d
EIGEN_DONT_ALIGN_STATICALLY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	86;"	d
EIGEN_DONT_INLINE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	159;"	d
EIGEN_DONT_INLINE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	161;"	d
EIGEN_DONT_INLINE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	163;"	d
EIGEN_EMPTY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	307;"	d
EIGEN_FAST_MATH	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	120;"	d
EIGEN_FLATTEN_ATTRIB	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	146;"	d
EIGEN_FLATTEN_ATTRIB	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	148;"	d
EIGEN_GCC3_OR_OLDER	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	56;"	d
EIGEN_GCC3_OR_OLDER	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	58;"	d
EIGEN_GCC_AND_ARCH_DOESNT_WANT_STACK_ALIGNMENT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	69;"	d
EIGEN_GCC_AND_ARCH_DOESNT_WANT_STACK_ALIGNMENT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	71;"	d
EIGEN_GENERIC_PUBLIC_INTERFACE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	333;"	d
EIGEN_GNUC_AT_LEAST	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	37;"	d
EIGEN_GNUC_AT_LEAST	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	39;"	d
EIGEN_GNUC_AT_MOST	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	43;"	d
EIGEN_GNUC_AT_MOST	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	45;"	d
EIGEN_IMPLIES	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	397;"	d
EIGEN_INHERIT_ASSIGNMENT_EQUAL_OPERATOR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	310;"	d
EIGEN_INHERIT_ASSIGNMENT_EQUAL_OPERATOR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	313;"	d
EIGEN_INHERIT_ASSIGNMENT_OPERATORS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	322;"	d
EIGEN_LOGICAL_XOR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	395;"	d
EIGEN_MACROS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	27;"	d
EIGEN_MAJOR_VERSION	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	30;"	d
EIGEN_MAKESTRING	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	131;"	d
EIGEN_MAKESTRING2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	130;"	d
EIGEN_MAKE_CWISE_BINARY_OP	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	399;"	d
EIGEN_MINOR_VERSION	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	31;"	d
EIGEN_NO_DEBUG	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	175;"	d
EIGEN_ONLY_USED_FOR_DEBUG	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	229;"	d
EIGEN_ONLY_USED_FOR_DEBUG	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	231;"	d
EIGEN_PLAIN_ENUM_MAX	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	371;"	d
EIGEN_PLAIN_ENUM_MIN	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	370;"	d
EIGEN_RESTRICT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	286;"	d
EIGEN_RESTRICT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	289;"	d
EIGEN_SAFE_TO_USE_STANDARD_ASSERT_MACRO	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	50;"	d
EIGEN_SAFE_TO_USE_STANDARD_ASSERT_MACRO	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	52;"	d
EIGEN_SIZE_MAX	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	392;"	d
EIGEN_SIZE_MIN_PREFER_DYNAMIC	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	376;"	d
EIGEN_SIZE_MIN_PREFER_FIXED	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	384;"	d
EIGEN_STACK_ALLOCATION_LIMIT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	293;"	d
EIGEN_STRONG_INLINE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	153;"	d
EIGEN_STRONG_INLINE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	155;"	d
EIGEN_UNUSED	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	243;"	d
EIGEN_UNUSED	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	245;"	d
EIGEN_UNUSED_VARIABLE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	249;"	d
EIGEN_USER_ALIGN16	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	279;"	d
EIGEN_USER_ALIGN16	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	282;"	d
EIGEN_USER_ALIGN_TO_BOUNDARY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	278;"	d
EIGEN_USER_ALIGN_TO_BOUNDARY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	281;"	d
EIGEN_VERSION_AT_LEAST	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	33;"	d
EIGEN_WORLD_VERSION	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	29;"	d
Eigen	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	/^    namespace Eigen {$/;"	n
assert_fail	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	/^    inline void assert_fail(const char *condition, const char *function, const char *file, int line)$/;"	f	namespace:Eigen::internal
copy_bool	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	/^    EIGEN_DONT_INLINE bool copy_bool(bool b) { return b; }$/;"	f	namespace:Eigen::internal::<anonymous>
copy_bool	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	/^    inline bool copy_bool(bool b) { return b; }$/;"	f	namespace:Eigen::internal
eigen_assert	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	219;"	d
eigen_internal_assert	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	223;"	d
eigen_internal_assert	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	225;"	d
eigen_plain_assert	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	181;"	d
eigen_plain_assert	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	189;"	d
eigen_plain_assert	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	209;"	d
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Macros.h	/^    namespace internal {$/;"	n	namespace:Eigen
EIGEN_ALIGNED_ALLOCA	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	533;"	d
EIGEN_ALIGNED_ALLOCA	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	535;"	d
EIGEN_ALLOCA	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	475;"	d
EIGEN_ALLOCA	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	477;"	d
EIGEN_CPUID	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	702;"	d
EIGEN_CPUID	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	706;"	d
EIGEN_CPUID	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	711;"	d
EIGEN_FREEBSD_MALLOC_ALREADY_ALIGNED	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	56;"	d
EIGEN_FREEBSD_MALLOC_ALREADY_ALIGNED	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	58;"	d
EIGEN_GLIBC_MALLOC_ALREADY_ALIGNED	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	46;"	d
EIGEN_GLIBC_MALLOC_ALREADY_ALIGNED	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	48;"	d
EIGEN_HAS_MM_MALLOC	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	78;"	d
EIGEN_HAS_MM_MALLOC	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	80;"	d
EIGEN_HAS_POSIX_MEMALIGN	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	72;"	d
EIGEN_HAS_POSIX_MEMALIGN	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	74;"	d
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	597;"	d
EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	573;"	d
EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	594;"	d
EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF_VECTORIZABLE_FIXED_SIZE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	598;"	d
EIGEN_MAKE_ALIGNED_OPERATOR_NEW_NOTHROW	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	560;"	d
EIGEN_MAKE_ALIGNED_OPERATOR_NEW_NOTHROW	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	567;"	d
EIGEN_MALLOC_ALREADY_ALIGNED	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	65;"	d
EIGEN_MALLOC_ALREADY_ALIGNED	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	67;"	d
EIGEN_MEMORY_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	35;"	d
address	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    const_pointer address( const_reference value ) const$/;"	f	class:aligned_allocator
address	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    pointer address( reference value ) const$/;"	f	class:aligned_allocator
aligned_allocator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    aligned_allocator( const aligned_allocator& ) throw()$/;"	f	class:aligned_allocator
aligned_allocator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    aligned_allocator( const aligned_allocator<U>& ) throw()$/;"	f	class:aligned_allocator
aligned_allocator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    aligned_allocator() throw()$/;"	f	class:aligned_allocator
aligned_allocator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^class aligned_allocator$/;"	c
aligned_delete	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^template<typename T> inline void aligned_delete(T *ptr, size_t size)$/;"	f	namespace:internal
aligned_free	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline void aligned_free(void *ptr)$/;"	f	namespace:internal
aligned_malloc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline void* aligned_malloc(size_t size)$/;"	f	namespace:internal
aligned_new	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^template<typename T> inline T* aligned_new(size_t size)$/;"	f	namespace:internal
aligned_realloc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline void* aligned_realloc(void *ptr, size_t new_size, size_t old_size)$/;"	f	namespace:internal
aligned_stack_memory_handler	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    aligned_stack_memory_handler(T* ptr, size_t size, bool dealloc)$/;"	f	class:internal::aligned_stack_memory_handler
aligned_stack_memory_handler	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^template<typename T> class aligned_stack_memory_handler$/;"	c	namespace:internal
allocate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    pointer allocate( size_type num, const_pointer* hint = 0 )$/;"	f	class:aligned_allocator
check_that_malloc_is_allowed	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline void check_that_malloc_is_allowed()$/;"	f	namespace:internal
conditional_aligned_delete	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^template<typename T, bool Align> inline void conditional_aligned_delete(T *ptr, size_t size)$/;"	f	namespace:internal
conditional_aligned_delete_auto	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^template<typename T, bool Align> inline void conditional_aligned_delete_auto(T *ptr, size_t size)$/;"	f	namespace:internal
conditional_aligned_free	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^template<> inline void conditional_aligned_free<false>(void *ptr)$/;"	f	namespace:internal
conditional_aligned_free	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^template<bool Align> inline void conditional_aligned_free(void *ptr)$/;"	f	namespace:internal
conditional_aligned_malloc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^template<> inline void* conditional_aligned_malloc<false>(size_t size)$/;"	f	namespace:internal
conditional_aligned_malloc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^template<bool Align> inline void* conditional_aligned_malloc(size_t size)$/;"	f	namespace:internal
conditional_aligned_new	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^template<typename T, bool Align> inline T* conditional_aligned_new(size_t size)$/;"	f	namespace:internal
conditional_aligned_new_auto	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^template<typename T, bool Align> inline T* conditional_aligned_new_auto(size_t size)$/;"	f	namespace:internal
conditional_aligned_realloc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^template<> inline void* conditional_aligned_realloc<false>(void* ptr, size_t new_size, size_t)$/;"	f	namespace:internal
conditional_aligned_realloc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^template<bool Align> inline void* conditional_aligned_realloc(void* ptr, size_t new_size, size_t old_size)$/;"	f	namespace:internal
conditional_aligned_realloc_new	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^template<typename T, bool Align> inline T* conditional_aligned_realloc_new(T* pts, size_t new_size, size_t old_size)$/;"	f	namespace:internal
conditional_aligned_realloc_new_auto	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^template<typename T, bool Align> inline T* conditional_aligned_realloc_new_auto(T* pts, size_t new_size, size_t old_size)$/;"	f	namespace:internal
const_pointer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    typedef const T*  const_pointer;$/;"	t	class:aligned_allocator
const_reference	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    typedef const T&  const_reference;$/;"	t	class:aligned_allocator
construct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    void construct( pointer p, const T& value )$/;"	f	class:aligned_allocator
construct_elements_of_array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^template<typename T> inline T* construct_elements_of_array(T *ptr, size_t size)$/;"	f	namespace:internal
cpuid_is_vendor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline bool cpuid_is_vendor(int abcd[4], const char* vendor)$/;"	f	namespace:internal
deallocate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    void deallocate( pointer p, size_type \/*num*\/ )$/;"	f	class:aligned_allocator
destroy	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    void destroy( pointer p )$/;"	f	class:aligned_allocator
destruct_elements_of_array	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^template<typename T> inline void destruct_elements_of_array(T *ptr, size_t size)$/;"	f	namespace:internal
difference_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    typedef std::ptrdiff_t difference_type;$/;"	t	class:aligned_allocator
ei_declare_aligned_stack_constructed_variable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	538;"	d
ei_declare_aligned_stack_constructed_variable	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	547;"	d
first_aligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline static Index first_aligned(const Scalar* array, Index size)$/;"	f	namespace:internal
generic_aligned_realloc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline void* generic_aligned_realloc(void* ptr, size_t size, size_t old_size)$/;"	f	namespace:internal
handmade_aligned_free	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline void handmade_aligned_free(void *ptr)$/;"	f	namespace:internal
handmade_aligned_malloc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline void* handmade_aligned_malloc(size_t size)$/;"	f	namespace:internal
handmade_aligned_realloc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline void* handmade_aligned_realloc(void* ptr, size_t size, size_t = 0)$/;"	f	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^namespace internal {$/;"	n
is_malloc_allowed	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline bool is_malloc_allowed() { return is_malloc_allowed_impl(false); }$/;"	f	namespace:internal
is_malloc_allowed_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline bool is_malloc_allowed_impl(bool update, bool new_value = false)$/;"	f	namespace:internal
m_deallocate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    bool m_deallocate;$/;"	m	class:internal::aligned_stack_memory_handler
m_ptr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    T* m_ptr;$/;"	m	class:internal::aligned_stack_memory_handler
m_size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    size_t m_size;$/;"	m	class:internal::aligned_stack_memory_handler
max_size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    size_type max_size() const throw()$/;"	f	class:aligned_allocator
operator !=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    bool operator!=(const aligned_allocator<T>& ) const$/;"	f	class:aligned_allocator
operator ==	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    bool operator==(const aligned_allocator<T>& ) const$/;"	f	class:aligned_allocator
other	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^        typedef aligned_allocator<U> other;$/;"	t	struct:aligned_allocator::rebind
pointer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    typedef T*        pointer;$/;"	t	class:aligned_allocator
queryCacheSizes	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline void queryCacheSizes(int& l1, int& l2, int& l3)$/;"	f	namespace:internal
queryCacheSizes_amd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline void queryCacheSizes_amd(int& l1, int& l2, int& l3)$/;"	f	namespace:internal
queryCacheSizes_intel	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline void queryCacheSizes_intel(int& l1, int& l2, int& l3, int max_std_funcs)$/;"	f	namespace:internal
queryCacheSizes_intel_codes	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline void queryCacheSizes_intel_codes(int& l1, int& l2, int& l3)$/;"	f	namespace:internal
queryCacheSizes_intel_direct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline void queryCacheSizes_intel_direct(int& l1, int& l2, int& l3)$/;"	f	namespace:internal
queryL1CacheSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline int queryL1CacheSize()$/;"	f	namespace:internal
queryTopLevelCacheSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline int queryTopLevelCacheSize()$/;"	f	namespace:internal
rebind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    struct rebind$/;"	s	class:aligned_allocator
reference	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    typedef T&        reference;$/;"	t	class:aligned_allocator
set_is_malloc_allowed	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^inline bool set_is_malloc_allowed(bool new_value) { return is_malloc_allowed_impl(true, new_value); }$/;"	f	namespace:internal
size_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    typedef size_t    size_type;$/;"	t	class:aligned_allocator
value_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    typedef T         value_type;$/;"	t	class:aligned_allocator
~aligned_allocator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    ~aligned_allocator() throw()$/;"	f	class:aligned_allocator
~aligned_stack_memory_handler	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Memory.h	/^    ~aligned_stack_memory_handler()$/;"	f	class:internal::aligned_stack_memory_handler
EIGEN_META_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	27;"	d
FunctorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^    enum {FunctorType = sizeof(testFunctor(static_cast<Func*>(0)))};$/;"	e	enum:internal::result_of::<anonymous>
NewInf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^    enum { ret = meta_sqrt<Y,NewInf,NewSup>::ret };$/;"	e	enum:internal::<anonymous>
NewSup	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^    enum { ret = meta_sqrt<Y,NewInf,NewSup>::ret };$/;"	e	enum:internal::<anonymous>
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^  typedef T ReturnType;$/;"	t	struct:scalar_product_traits
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^  typedef std::complex<T> ReturnType;$/;"	t	struct:scalar_product_traits
a	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct has_none {int a[1];};$/;"	m	struct:internal::has_none
a	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct has_std_result_type {int a[2];};$/;"	m	struct:internal::has_std_result_type
a	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct has_tr1_result {int a[3];};$/;"	m	struct:internal::has_tr1_result
add_const	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template <typename T> struct add_const { typedef const T type; };$/;"	s	namespace:internal
add_const	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template <typename T> struct add_const<T&> { typedef T& type; };$/;"	s	namespace:internal
add_const_on_value_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type            { typedef const T type;  };$/;"	s	namespace:internal
add_const_on_value_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type<T const* const>  { typedef T const* const type; };$/;"	s	namespace:internal
add_const_on_value_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type<T&>        { typedef T const& type; };$/;"	s	namespace:internal
add_const_on_value_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type<T* const>  { typedef T const* const type; };$/;"	s	namespace:internal
add_const_on_value_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type<T*>        { typedef T const* type; };$/;"	s	namespace:internal
binary_result_of_select	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct binary_result_of_select {typedef ArgType0 type;};$/;"	s	namespace:internal
binary_result_of_select	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct binary_result_of_select<Func, ArgType0, ArgType1, sizeof(has_std_result_type)>$/;"	s	namespace:internal
binary_result_of_select	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct binary_result_of_select<Func, ArgType0, ArgType1, sizeof(has_tr1_result)>$/;"	s	namespace:internal
conditional	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct conditional <false, Then, Else> { typedef Else type; };$/;"	s	namespace:internal
conditional	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct conditional { typedef Then type; };$/;"	s	namespace:internal
enable_if	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct enable_if<true,T>$/;"	s	namespace:internal
false_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct false_type { enum { value = 0 }; };$/;"	s	namespace:internal
has_none	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct has_none {int a[1];};$/;"	s	namespace:internal
has_std_result_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct has_std_result_type {int a[2];};$/;"	s	namespace:internal
has_tr1_result	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct has_tr1_result {int a[3];};$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^namespace internal {$/;"	n
is_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<bool>          { enum { value = true }; };$/;"	s	namespace:internal
is_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<char>          { enum { value = true }; };$/;"	s	namespace:internal
is_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<double>        { enum { value = true }; };$/;"	s	namespace:internal
is_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<float>         { enum { value = true }; };$/;"	s	namespace:internal
is_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<long double>   { enum { value = true }; };$/;"	s	namespace:internal
is_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<signed char>   { enum { value = true }; };$/;"	s	namespace:internal
is_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<signed int>    { enum { value = true }; };$/;"	s	namespace:internal
is_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<signed long long>   { enum { value = true }; };$/;"	s	namespace:internal
is_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<signed long>   { enum { value = true }; };$/;"	s	namespace:internal
is_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<signed short>  { enum { value = true }; };$/;"	s	namespace:internal
is_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<unsigned char> { enum { value = true }; };$/;"	s	namespace:internal
is_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<unsigned int>  { enum { value = true }; };$/;"	s	namespace:internal
is_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<unsigned long long> { enum { value = true }; };$/;"	s	namespace:internal
is_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<unsigned long> { enum { value = true }; };$/;"	s	namespace:internal
is_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<unsigned short>{ enum { value = true }; };$/;"	s	namespace:internal
is_arithmetic	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct is_arithmetic      { enum { value = false }; };$/;"	s	namespace:internal
is_const	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template <typename T> struct is_const { enum { value = 0 }; };$/;"	s	namespace:internal
is_const	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template <typename T> struct is_const<T const> { enum { value = 1 }; };$/;"	s	namespace:internal
is_diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T, int S> struct is_diagonal<DiagonalMatrix<T,S> >$/;"	s
is_diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct is_diagonal$/;"	s
is_diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct is_diagonal<DiagonalBase<T> >$/;"	s
is_diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct is_diagonal<DiagonalWrapper<T> >$/;"	s
is_same	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T, typename U> struct is_same { enum { value = 0 }; };$/;"	s	namespace:internal
is_same	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct is_same<T,T> { enum { value = 1 }; };$/;"	s	namespace:internal
meta_sqrt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^class meta_sqrt<Y, InfX, SupX, true> { public:  enum { ret = (SupX*SupX <= Y) ? SupX : InfX }; };$/;"	c
remove_all	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all { typedef T type; };$/;"	s	namespace:internal
remove_all	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<T const&>  { typedef typename remove_all<T>::type type; };$/;"	s	namespace:internal
remove_all	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<T const*>  { typedef typename remove_all<T>::type type; };$/;"	s	namespace:internal
remove_all	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<T&>        { typedef typename remove_all<T>::type type; };$/;"	s	namespace:internal
remove_all	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<T*>        { typedef typename remove_all<T>::type type; };$/;"	s	namespace:internal
remove_all	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<const T>   { typedef typename remove_all<T>::type type; };$/;"	s	namespace:internal
remove_const	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template <class T, unsigned int Size> struct remove_const<const T[Size]> { typedef T type[Size]; };$/;"	s	namespace:internal
remove_const	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template <class T> struct remove_const { typedef T type; };$/;"	s	namespace:internal
remove_const	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template <class T> struct remove_const<const T> { typedef T type; };$/;"	s	namespace:internal
remove_const	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template <class T> struct remove_const<const T[]> { typedef T type[]; };$/;"	s	namespace:internal
remove_pointer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_pointer { typedef T type; };$/;"	s	namespace:internal
remove_pointer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_pointer<T*> { typedef T type; };$/;"	s	namespace:internal
remove_pointer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_pointer<T*const> { typedef T type; };$/;"	s	namespace:internal
remove_reference	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_reference { typedef T type; };$/;"	s	namespace:internal
remove_reference	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_reference<T&> { typedef T type; };$/;"	s	namespace:internal
result_of	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct result_of<Func(ArgType)> {$/;"	s	namespace:internal
result_of	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct result_of<Func(ArgType0,ArgType1)> {$/;"	s	namespace:internal
result_of	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct result_of {};$/;"	s	namespace:internal
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^    enum { ret = meta_sqrt<Y,NewInf,NewSup>::ret };$/;"	e	class:internal::<anonymous>::NewSup
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^    enum { ret = meta_sqrt<Y,NewInf,NewSup>::ret };$/;"	e	enum:internal::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^class meta_sqrt<Y, InfX, SupX, true> { public:  enum { ret = (SupX*SupX <= Y) ? SupX : InfX }; };$/;"	e	enum:meta_sqrt::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^{ enum { ret = false }; };$/;"	e	enum:is_diagonal::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^{ enum { ret = true }; };$/;"	e	enum:is_diagonal::<anonymous>
scalar_product_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct scalar_product_traits<T,T>$/;"	s
scalar_product_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct scalar_product_traits<T,std::complex<T> >$/;"	s
scalar_product_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct scalar_product_traits<std::complex<T>, T>$/;"	s
true_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct true_type {  enum { value = 1 }; };$/;"	s	namespace:internal
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^    typedef typename binary_result_of_select<Func, ArgType0, ArgType1, FunctorType>::type type;$/;"	t	struct:internal::result_of
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^    typedef typename unary_result_of_select<Func, ArgType, FunctorType>::type type;$/;"	t	struct:internal::result_of
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct binary_result_of_select {typedef ArgType0 type;};$/;"	t	struct:internal::binary_result_of_select
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct conditional <false, Then, Else> { typedef Else type; };$/;"	t	struct:internal::conditional
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct conditional { typedef Then type; };$/;"	t	struct:internal::conditional
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct unary_result_of_select {typedef ArgType type;};$/;"	t	struct:internal::unary_result_of_select
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct unary_result_of_select<Func, ArgType, sizeof(has_std_result_type)> {typedef typename Func::result_type type;};$/;"	t	struct:internal::unary_result_of_select
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct unary_result_of_select<Func, ArgType, sizeof(has_tr1_result)> {typedef typename Func::template result<Func(ArgType)>::type type;};$/;"	t	struct:internal::unary_result_of_select
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template <class T, unsigned int Size> struct remove_const<const T[Size]> { typedef T type[Size]; };$/;"	t	struct:internal::remove_const
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template <class T> struct remove_const { typedef T type; };$/;"	t	struct:internal::remove_const
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template <class T> struct remove_const<const T> { typedef T type; };$/;"	t	struct:internal::remove_const
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template <class T> struct remove_const<const T[]> { typedef T type[]; };$/;"	t	struct:internal::remove_const
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template <typename T> struct add_const { typedef const T type; };$/;"	t	struct:internal::add_const
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template <typename T> struct add_const<T&> { typedef T& type; };$/;"	t	struct:internal::add_const
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type            { typedef const T type;  };$/;"	t	struct:internal::add_const_on_value_type
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type<T const* const>  { typedef T const* const type; };$/;"	t	struct:internal::add_const_on_value_type
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type<T&>        { typedef T const& type; };$/;"	t	struct:internal::add_const_on_value_type
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type<T* const>  { typedef T const* const type; };$/;"	t	struct:internal::add_const_on_value_type
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct add_const_on_value_type<T*>        { typedef T const* type; };$/;"	t	struct:internal::add_const_on_value_type
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all { typedef T type; };$/;"	t	struct:internal::remove_all
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<T const&>  { typedef typename remove_all<T>::type type; };$/;"	t	struct:internal::remove_all
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<T const*>  { typedef typename remove_all<T>::type type; };$/;"	t	struct:internal::remove_all
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<T&>        { typedef typename remove_all<T>::type type; };$/;"	t	struct:internal::remove_all
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<T*>        { typedef typename remove_all<T>::type type; };$/;"	t	struct:internal::remove_all
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_all<const T>   { typedef typename remove_all<T>::type type; };$/;"	t	struct:internal::remove_all
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_pointer { typedef T type; };$/;"	t	struct:internal::remove_pointer
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_pointer<T*> { typedef T type; };$/;"	t	struct:internal::remove_pointer
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_pointer<T*const> { typedef T type; };$/;"	t	struct:internal::remove_pointer
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_reference { typedef T type; };$/;"	t	struct:internal::remove_reference
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct remove_reference<T&> { typedef T type; };$/;"	t	struct:internal::remove_reference
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^{ typedef T type; };$/;"	t	struct:internal::enable_if
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^{typedef typename Func::result_type type;};$/;"	t	struct:internal::binary_result_of_select
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^{typedef typename Func::template result<Func(ArgType0,ArgType1)>::type type;};$/;"	t	struct:internal::binary_result_of_select
unary_result_of_select	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct unary_result_of_select {typedef ArgType type;};$/;"	s	namespace:internal
unary_result_of_select	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct unary_result_of_select<Func, ArgType, sizeof(has_std_result_type)> {typedef typename Func::result_type type;};$/;"	s	namespace:internal
unary_result_of_select	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct unary_result_of_select<Func, ArgType, sizeof(has_tr1_result)> {typedef typename Func::template result<Func(ArgType)>::type type;};$/;"	s	namespace:internal
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct false_type { enum { value = 0 }; };$/;"	e	enum:internal::false_type::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^struct true_type {  enum { value = 1 }; };$/;"	e	enum:internal::true_type::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template <typename T> struct is_const { enum { value = 0 }; };$/;"	e	enum:internal::is_const::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template <typename T> struct is_const<T const> { enum { value = 1 }; };$/;"	e	enum:internal::is_const::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<bool>          { enum { value = true }; };$/;"	e	enum:internal::is_arithmetic::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<char>          { enum { value = true }; };$/;"	e	enum:internal::is_arithmetic::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<double>        { enum { value = true }; };$/;"	e	enum:internal::is_arithmetic::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<float>         { enum { value = true }; };$/;"	e	enum:internal::is_arithmetic::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<long double>   { enum { value = true }; };$/;"	e	enum:internal::is_arithmetic::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<signed char>   { enum { value = true }; };$/;"	e	enum:internal::is_arithmetic::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<signed int>    { enum { value = true }; };$/;"	e	enum:internal::is_arithmetic::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<signed long long>   { enum { value = true }; };$/;"	e	enum:internal::is_arithmetic::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<signed long>   { enum { value = true }; };$/;"	e	enum:internal::is_arithmetic::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<signed short>  { enum { value = true }; };$/;"	e	enum:internal::is_arithmetic::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<unsigned char> { enum { value = true }; };$/;"	e	enum:internal::is_arithmetic::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<unsigned int>  { enum { value = true }; };$/;"	e	enum:internal::is_arithmetic::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<unsigned long long> { enum { value = true }; };$/;"	e	enum:internal::is_arithmetic::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<unsigned long> { enum { value = true }; };$/;"	e	enum:internal::is_arithmetic::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<> struct is_arithmetic<unsigned short>{ enum { value = true }; };$/;"	e	enum:internal::is_arithmetic::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T, typename U> struct is_same { enum { value = 0 }; };$/;"	e	enum:internal::is_same::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct is_arithmetic      { enum { value = false }; };$/;"	e	enum:internal::is_arithmetic::<anonymous>
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/Meta.h	/^template<typename T> struct is_same<T,T> { enum { value = 1 }; };$/;"	e	enum:internal::is_same::<anonymous>
EIGEN_WARNINGS_DISABLED	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/ReenableStupidWarnings.h	2;"	d
BOTH_MATRICES_MUST_HAVE_THE_SAME_STORAGE_ORDER	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        BOTH_MATRICES_MUST_HAVE_THE_SAME_STORAGE_ORDER,$/;"	e	enum:internal::static_assertion::<anonymous>
COEFFICIENT_WRITE_ACCESS_TO_SELFADJOINT_NOT_SUPPORTED	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        COEFFICIENT_WRITE_ACCESS_TO_SELFADJOINT_NOT_SUPPORTED,$/;"	e	enum:internal::static_assertion::<anonymous>
EIGEN_INTERNAL_COMPILATION_ERROR_OR_YOU_MADE_A_PROGRAMMING_MISTAKE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        EIGEN_INTERNAL_COMPILATION_ERROR_OR_YOU_MADE_A_PROGRAMMING_MISTAKE,$/;"	e	enum:internal::static_assertion::<anonymous>
EIGEN_INTERNAL_ERROR_PLEASE_FILE_A_BUG_REPORT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        EIGEN_INTERNAL_ERROR_PLEASE_FILE_A_BUG_REPORT,$/;"	e	enum:internal::static_assertion::<anonymous>
EIGEN_PREDICATE_SAME_MATRIX_SIZE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	161;"	d
EIGEN_STATIC_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	109;"	d
EIGEN_STATIC_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	114;"	d
EIGEN_STATIC_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	123;"	d
EIGEN_STATIC_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	47;"	d
EIGEN_STATIC_ASSERT_DYNAMIC_SIZE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	139;"	d
EIGEN_STATIC_ASSERT_FIXED_SIZE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	134;"	d
EIGEN_STATIC_ASSERT_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	27;"	d
EIGEN_STATIC_ASSERT_LVALUE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	194;"	d
EIGEN_STATIC_ASSERT_MATRIX_SPECIFIC_SIZE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	149;"	d
EIGEN_STATIC_ASSERT_NON_INTEGER	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	175;"	d
EIGEN_STATIC_ASSERT_NON_INTEGER	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	178;"	d
EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	184;"	d
EIGEN_STATIC_ASSERT_SAME_VECTOR_SIZE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	154;"	d
EIGEN_STATIC_ASSERT_SIZE_1x1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	189;"	d
EIGEN_STATIC_ASSERT_VECTOR_ONLY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	129;"	d
EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	144;"	d
INVALID_MATRIXBASE_TEMPLATE_PARAMETERS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        INVALID_MATRIXBASE_TEMPLATE_PARAMETERS,$/;"	e	enum:internal::static_assertion::<anonymous>
INVALID_MATRIX_PRODUCT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        INVALID_MATRIX_PRODUCT,$/;"	e	enum:internal::static_assertion::<anonymous>
INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION,$/;"	e	enum:internal::static_assertion::<anonymous>
INVALID_MATRIX_TEMPLATE_PARAMETERS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        INVALID_MATRIX_TEMPLATE_PARAMETERS,$/;"	e	enum:internal::static_assertion::<anonymous>
INVALID_STORAGE_ORDER_FOR_THIS_VECTOR_EXPRESSION	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        INVALID_STORAGE_ORDER_FOR_THIS_VECTOR_EXPRESSION,$/;"	e	enum:internal::static_assertion::<anonymous>
INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS,$/;"	e	enum:internal::static_assertion::<anonymous>
NUMERIC_TYPE_MUST_BE_REAL	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        NUMERIC_TYPE_MUST_BE_REAL,$/;"	e	enum:internal::static_assertion::<anonymous>
PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1,$/;"	e	enum:internal::static_assertion::<anonymous>
THE_BRACKET_OPERATOR_IS_ONLY_FOR_VECTORS__USE_THE_PARENTHESIS_OPERATOR_INSTEAD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        THE_BRACKET_OPERATOR_IS_ONLY_FOR_VECTORS__USE_THE_PARENTHESIS_OPERATOR_INSTEAD,$/;"	e	enum:internal::static_assertion::<anonymous>
THE_MATRIX_OR_EXPRESSION_THAT_YOU_PASSED_DOES_NOT_HAVE_THE_EXPECTED_TYPE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        THE_MATRIX_OR_EXPRESSION_THAT_YOU_PASSED_DOES_NOT_HAVE_THE_EXPECTED_TYPE,$/;"	e	enum:internal::static_assertion::<anonymous>
THIS_EXPRESSION_IS_NOT_A_LVALUE__IT_IS_READ_ONLY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        THIS_EXPRESSION_IS_NOT_A_LVALUE__IT_IS_READ_ONLY,$/;"	e	enum:internal::static_assertion::<anonymous>
THIS_FUNCTION_IS_NOT_FOR_INTEGER_NUMERIC_TYPES	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        THIS_FUNCTION_IS_NOT_FOR_INTEGER_NUMERIC_TYPES,$/;"	e	enum:internal::static_assertion::<anonymous>
THIS_METHOD_IS_ONLY_FOR_1x1_EXPRESSIONS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_1x1_EXPRESSIONS$/;"	e	enum:internal::static_assertion::<anonymous>
THIS_METHOD_IS_ONLY_FOR_COLUMN_MAJOR_MATRICES	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_COLUMN_MAJOR_MATRICES,$/;"	e	enum:internal::static_assertion::<anonymous>
THIS_METHOD_IS_ONLY_FOR_DIAGONAL_MATRIX	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_DIAGONAL_MATRIX,$/;"	e	enum:internal::static_assertion::<anonymous>
THIS_METHOD_IS_ONLY_FOR_EXPRESSIONS_WITH_DIRECT_MEMORY_ACCESS_SUCH_AS_MAP_OR_PLAIN_MATRICES	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_EXPRESSIONS_WITH_DIRECT_MEMORY_ACCESS_SUCH_AS_MAP_OR_PLAIN_MATRICES,$/;"	e	enum:internal::static_assertion::<anonymous>
THIS_METHOD_IS_ONLY_FOR_FIXED_SIZE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_FIXED_SIZE,$/;"	e	enum:internal::static_assertion::<anonymous>
THIS_METHOD_IS_ONLY_FOR_MATRICES_OF_A_SPECIFIC_SIZE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_MATRICES_OF_A_SPECIFIC_SIZE,$/;"	e	enum:internal::static_assertion::<anonymous>
THIS_METHOD_IS_ONLY_FOR_OBJECTS_OF_A_SPECIFIC_SIZE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_OBJECTS_OF_A_SPECIFIC_SIZE,$/;"	e	enum:internal::static_assertion::<anonymous>
THIS_METHOD_IS_ONLY_FOR_ROW_MAJOR_MATRICES	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_ROW_MAJOR_MATRICES,$/;"	e	enum:internal::static_assertion::<anonymous>
THIS_METHOD_IS_ONLY_FOR_SPECIFIC_TRANSFORMATIONS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_SPECIFIC_TRANSFORMATIONS,$/;"	e	enum:internal::static_assertion::<anonymous>
THIS_METHOD_IS_ONLY_FOR_VECTORS_OF_A_SPECIFIC_SIZE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        THIS_METHOD_IS_ONLY_FOR_VECTORS_OF_A_SPECIFIC_SIZE,$/;"	e	enum:internal::static_assertion::<anonymous>
UNALIGNED_LOAD_AND_STORE_OPERATIONS_UNIMPLEMENTED_ON_ALTIVEC	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        UNALIGNED_LOAD_AND_STORE_OPERATIONS_UNIMPLEMENTED_ON_ALTIVEC,$/;"	e	enum:internal::static_assertion::<anonymous>
WRITING_TO_TRIANGULAR_PART_WITH_UNIT_DIAGONAL_IS_NOT_SUPPORTED	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        WRITING_TO_TRIANGULAR_PART_WITH_UNIT_DIAGONAL_IS_NOT_SUPPORTED,$/;"	e	enum:internal::static_assertion::<anonymous>
YOU_ALREADY_SPECIFIED_THIS_STRIDE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        YOU_ALREADY_SPECIFIED_THIS_STRIDE,$/;"	e	enum:internal::static_assertion::<anonymous>
YOU_ARE_TRYING_TO_USE_AN_INDEX_BASED_ACCESSOR_ON_AN_EXPRESSION_THAT_DOES_NOT_SUPPORT_THAT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        YOU_ARE_TRYING_TO_USE_AN_INDEX_BASED_ACCESSOR_ON_AN_EXPRESSION_THAT_DOES_NOT_SUPPORT_THAT,$/;"	e	enum:internal::static_assertion::<anonymous>
YOU_CALLED_A_DYNAMIC_SIZE_METHOD_ON_A_FIXED_SIZE_MATRIX_OR_VECTOR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        YOU_CALLED_A_DYNAMIC_SIZE_METHOD_ON_A_FIXED_SIZE_MATRIX_OR_VECTOR,$/;"	e	enum:internal::static_assertion::<anonymous>
YOU_CALLED_A_FIXED_SIZE_METHOD_ON_A_DYNAMIC_SIZE_MATRIX_OR_VECTOR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        YOU_CALLED_A_FIXED_SIZE_METHOD_ON_A_DYNAMIC_SIZE_MATRIX_OR_VECTOR,$/;"	e	enum:internal::static_assertion::<anonymous>
YOU_CANNOT_MIX_ARRAYS_AND_MATRICES	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        YOU_CANNOT_MIX_ARRAYS_AND_MATRICES,$/;"	e	enum:internal::static_assertion::<anonymous>
YOU_MADE_A_PROGRAMMING_MISTAKE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        YOU_MADE_A_PROGRAMMING_MISTAKE,$/;"	e	enum:internal::static_assertion::<anonymous>
YOU_MIXED_DIFFERENT_NUMERIC_TYPES__YOU_NEED_TO_USE_THE_CAST_METHOD_OF_MATRIXBASE_TO_CAST_NUMERIC_TYPES_EXPLICITLY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        YOU_MIXED_DIFFERENT_NUMERIC_TYPES__YOU_NEED_TO_USE_THE_CAST_METHOD_OF_MATRIXBASE_TO_CAST_NUMERIC_TYPES_EXPLICITLY,$/;"	e	enum:internal::static_assertion::<anonymous>
YOU_MIXED_MATRICES_OF_DIFFERENT_SIZES	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        YOU_MIXED_MATRICES_OF_DIFFERENT_SIZES,$/;"	e	enum:internal::static_assertion::<anonymous>
YOU_MIXED_VECTORS_OF_DIFFERENT_SIZES	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        YOU_MIXED_VECTORS_OF_DIFFERENT_SIZES,$/;"	e	enum:internal::static_assertion::<anonymous>
YOU_PERFORMED_AN_INVALID_TRANSFORMATION_CONVERSION	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        YOU_PERFORMED_AN_INVALID_TRANSFORMATION_CONVERSION,$/;"	e	enum:internal::static_assertion::<anonymous>
YOU_TRIED_CALLING_A_VECTOR_METHOD_ON_A_MATRIX	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^        YOU_TRIED_CALLING_A_VECTOR_METHOD_ON_A_MATRIX,$/;"	e	enum:internal::static_assertion::<anonymous>
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^    namespace internal {$/;"	n
static_assertion	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^    struct static_assertion {};$/;"	s	namespace:internal
static_assertion	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/StaticAssert.h	/^    struct static_assertion<true>$/;"	s	namespace:internal
DenseIndex	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/XprHelper.h	/^typedef EIGEN_DEFAULT_DENSE_INDEX_TYPE DenseIndex;$/;"	t
EIGEN_EMPTY_STRUCT_CTOR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/XprHelper.h	33;"	d
EIGEN_EMPTY_STRUCT_CTOR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/XprHelper.h	37;"	d
EIGEN_XPRHELPER_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/XprHelper.h	27;"	d
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/XprHelper.h	/^namespace internal {$/;"	n
no_assignment_operator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/XprHelper.h	/^class no_assignment_operator$/;"	c	namespace:internal
promote_index_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Core/util/XprHelper.h	/^struct promote_index_type$/;"	s	namespace:internal
EIGEN_BLOCK2_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Block.h	27;"	d
corner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Block.h	/^  ::corner(CornerType type, Index cRows, Index cCols)$/;"	f	class:DenseBase
corner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Block.h	/^DenseBase<Derived>::corner(CornerType type) const$/;"	f	class:DenseBase
corner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Block.h	/^DenseBase<Derived>::corner(CornerType type)$/;"	f	class:DenseBase
corner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Block.h	/^DenseBase<Derived>::corner(CornerType type, Index cRows, Index cCols) const$/;"	f	class:DenseBase
Cwise	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Cwise.h	/^    inline Cwise(const ExpressionType& matrix) : m_matrix(matrix) {}$/;"	f	class:Cwise
Cwise	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Cwise.h	/^template<typename ExpressionType> class Cwise$/;"	c
EIGEN_CWISE_BINOP_RETURN_TYPE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Cwise.h	31;"	d
EIGEN_CWISE_COMP_TO_SCALAR_RETURN_TYPE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Cwise.h	41;"	d
EIGEN_CWISE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Cwise.h	27;"	d
EIGEN_CWISE_UNOP_RETURN_TYPE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Cwise.h	36;"	d
ExpressionTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Cwise.h	/^        ExpressionType, const ExpressionType&>::type ExpressionTypeNested;$/;"	t	class:Cwise
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Cwise.h	/^    typedef typename internal::traits<ExpressionType>::Scalar Scalar;$/;"	t	class:Cwise
ScalarAddReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Cwise.h	/^    typedef CwiseUnaryOp<internal::scalar_add_op<Scalar>, ExpressionType> ScalarAddReturnType;$/;"	t	class:Cwise
_expression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Cwise.h	/^    inline const ExpressionType& _expression() const { return m_matrix; }$/;"	f	class:Cwise
cwise	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Cwise.h	/^inline Cwise<Derived> MatrixBase<Derived>::cwise()$/;"	f	class:MatrixBase
cwise	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Cwise.h	/^inline const Cwise<Derived> MatrixBase<Derived>::cwise() const$/;"	f	class:MatrixBase
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Cwise.h	/^    ExpressionTypeNested m_matrix;$/;"	m	class:Cwise
operator +	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Cwise.h	/^    operator+(const Scalar& scalar, const Cwise& mat)$/;"	f	class:Cwise
EIGEN_ARRAY_CWISE_OPERATORS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	26;"	d
abs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::abs() const$/;"	f	class:Cwise
abs2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::abs2() const$/;"	f	class:Cwise
cos	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::cos() const$/;"	f	class:Cwise
cube	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::cube() const$/;"	f	class:Cwise
exp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::exp() const$/;"	f	class:Cwise
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::inverse() const$/;"	f	class:Cwise
log	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::log() const$/;"	f	class:Cwise
max	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::max(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Cwise
min	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::min(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Cwise
operator !=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator!=(Scalar s) const$/;"	f	class:Cwise
operator !=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator!=(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Cwise
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator*(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Cwise
operator *=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^inline ExpressionType& Cwise<ExpressionType>::operator*=(const MatrixBase<OtherDerived> &other)$/;"	f	class:Cwise
operator +	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator+(const Scalar& scalar) const$/;"	f	class:Cwise
operator +=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^inline ExpressionType& Cwise<ExpressionType>::operator+=(const Scalar& scalar)$/;"	f	class:Cwise
operator -	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator-(const Scalar& scalar) const$/;"	f	class:Cwise
operator -=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^inline ExpressionType& Cwise<ExpressionType>::operator-=(const Scalar& scalar)$/;"	f	class:Cwise
operator /	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator\/(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Cwise
operator /=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^inline ExpressionType& Cwise<ExpressionType>::operator\/=(const MatrixBase<OtherDerived> &other)$/;"	f	class:Cwise
operator <	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator<(Scalar s) const$/;"	f	class:Cwise
operator <	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator<(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Cwise
operator <=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator<=(Scalar s) const$/;"	f	class:Cwise
operator <=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator<=(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Cwise
operator ==	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator==(Scalar s) const$/;"	f	class:Cwise
operator ==	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator==(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Cwise
operator >	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator>(Scalar s) const$/;"	f	class:Cwise
operator >	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator>(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Cwise
operator >=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator>=(Scalar s) const$/;"	f	class:Cwise
operator >=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::operator>=(const MatrixBase<OtherDerived> &other) const$/;"	f	class:Cwise
pow	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::pow(const Scalar& exponent) const$/;"	f	class:Cwise
sin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::sin() const$/;"	f	class:Cwise
sqrt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::sqrt() const$/;"	f	class:Cwise
square	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/CwiseOperators.h	/^Cwise<ExpressionType>::square() const$/;"	f	class:Cwise
AlignedBox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline AlignedBox(const VectorType& _min, const VectorType& _max) : m_min(_min), m_max(_max) {}$/;"	f	class:AlignedBox
AlignedBox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline explicit AlignedBox()$/;"	f	class:AlignedBox
AlignedBox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline explicit AlignedBox(const AlignedBox<OtherScalarType,AmbientDimAtCompileTime>& other)$/;"	f	class:AlignedBox
AlignedBox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline explicit AlignedBox(const VectorType& p) : m_min(p), m_max(p) {}$/;"	f	class:AlignedBox
AlignedBox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline explicit AlignedBox(int _dim) : m_min(_dim), m_max(_dim)$/;"	f	class:AlignedBox
AlignedBox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^class AlignedBox$/;"	c
AmbientDimAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  enum { AmbientDimAtCompileTime = _AmbientDim };$/;"	e	enum:AlignedBox::<anonymous>
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:AlignedBox
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  typedef _Scalar Scalar;$/;"	t	class:AlignedBox
VectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  typedef Matrix<Scalar,AmbientDimAtCompileTime,1> VectorType;$/;"	t	class:AlignedBox
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^           AlignedBox<NewScalarType,AmbientDimAtCompileTime> >::type cast() const$/;"	f	class:AlignedBox
clamp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline AlignedBox& clamp(const AlignedBox& b)$/;"	f	class:AlignedBox
contains	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline bool contains(const AlignedBox& b) const$/;"	f	class:AlignedBox
contains	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline bool contains(const VectorType& p) const$/;"	f	class:AlignedBox
dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline int dim() const { return AmbientDimAtCompileTime==Dynamic ? m_min.size()-1 : AmbientDimAtCompileTime; }$/;"	f	class:AlignedBox
extend	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline AlignedBox& extend(const AlignedBox& b)$/;"	f	class:AlignedBox
extend	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline AlignedBox& extend(const VectorType& p)$/;"	f	class:AlignedBox
exteriorDistance	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline Scalar exteriorDistance(const VectorType& p) const$/;"	f	class:AlignedBox
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  bool isApprox(const AlignedBox& other, typename NumTraits<Scalar>::Real prec = precision<Scalar>()) const$/;"	f	class:AlignedBox
isNull	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline bool isNull() const { return (m_min.cwise() > m_max).any(); }$/;"	f	class:AlignedBox
m_max	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  VectorType m_min, m_max;$/;"	m	class:AlignedBox
m_min	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  VectorType m_min, m_max;$/;"	m	class:AlignedBox
max	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline VectorType& max() { return m_max; }$/;"	f	class:AlignedBox
max	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline const VectorType& max() const { return m_max; }$/;"	f	class:AlignedBox
min	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline VectorType& min() { return m_min; }$/;"	f	class:AlignedBox
min	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline const VectorType& min() const { return m_min; }$/;"	f	class:AlignedBox
setNull	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline void setNull()$/;"	f	class:AlignedBox
squaredExteriorDistance	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^inline Scalar AlignedBox<Scalar,AmbiantDim>::squaredExteriorDistance(const VectorType& p) const$/;"	f	class:AlignedBox
translate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  inline AlignedBox& translate(const VectorType& t)$/;"	f	class:AlignedBox
~AlignedBox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AlignedBox.h	/^  ~AlignedBox() {}$/;"	f	class:AlignedBox
AlignedBox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	110;"	d
AlignedBox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	55;"	d
AngleAxis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	33;"	d
AngleAxis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	88;"	d
AngleAxisd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	35;"	d
AngleAxisd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	90;"	d
AngleAxisf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	34;"	d
AngleAxisf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	89;"	d
EIGEN2_GEOMETRY_MODULE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	2;"	d
Hyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	112;"	d
Hyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	57;"	d
M_PI	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	7;"	d
ParametrizedLine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	113;"	d
ParametrizedLine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	58;"	d
Quaternion	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	29;"	d
Quaternion	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	84;"	d
Quaterniond	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	31;"	d
Quaterniond	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	86;"	d
Quaternionf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	30;"	d
Quaternionf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	85;"	d
Rotation2D	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	25;"	d
Rotation2D	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	80;"	d
Rotation2Dd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	27;"	d
Rotation2Dd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	82;"	d
Rotation2Df	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	26;"	d
Rotation2Df	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	81;"	d
RotationBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	24;"	d
RotationBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	79;"	d
Scaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	104;"	d
Scaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	49;"	d
Scaling2d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	106;"	d
Scaling2d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	51;"	d
Scaling2f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	105;"	d
Scaling2f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	50;"	d
Scaling3d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	108;"	d
Scaling3d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	53;"	d
Scaling3f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	107;"	d
Scaling3f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	52;"	d
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	37;"	d
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	92;"	d
Transform2d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	39;"	d
Transform2d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	94;"	d
Transform2f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	38;"	d
Transform2f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	93;"	d
Transform3d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	41;"	d
Transform3d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	96;"	d
Transform3f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	40;"	d
Transform3f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	95;"	d
Translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	43;"	d
Translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	98;"	d
Translation2d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	100;"	d
Translation2d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	45;"	d
Translation2f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	44;"	d
Translation2f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	99;"	d
Translation3d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	102;"	d
Translation3d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	47;"	d
Translation3f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	101;"	d
Translation3f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	46;"	d
ei_quaternion_assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	61;"	d
ei_quaternion_assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	76;"	d
ei_toRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	60;"	d
ei_toRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	75;"	d
ei_transform_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	62;"	d
ei_transform_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/All.h	77;"	d
AngleAxis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  AngleAxis() {}$/;"	f	class:AngleAxis
AngleAxis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline AngleAxis(Scalar angle, const MatrixBase<Derived>& axis) : m_axis(axis), m_angle(angle) {}$/;"	f	class:AngleAxis
AngleAxis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline AngleAxis(const QuaternionType& q) { *this = q; }$/;"	f	class:AngleAxis
AngleAxis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline explicit AngleAxis(const AngleAxis<OtherScalarType>& other)$/;"	f	class:AngleAxis
AngleAxis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline explicit AngleAxis(const MatrixBase<Derived>& m) { *this = m; }$/;"	f	class:AngleAxis
AngleAxis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^class AngleAxis : public RotationBase<AngleAxis<_Scalar>,3>$/;"	c
AngleAxisd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^typedef AngleAxis<double> AngleAxisd;$/;"	t
AngleAxisf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^typedef AngleAxis<float> AngleAxisf;$/;"	t
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  typedef RotationBase<AngleAxis<_Scalar>,3> Base;$/;"	t	class:AngleAxis
Dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  enum { Dim = 3 };$/;"	e	enum:AngleAxis::<anonymous>
Matrix3	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  typedef Matrix<Scalar,3,3> Matrix3;$/;"	t	class:AngleAxis
QuaternionType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  typedef Quaternion<Scalar> QuaternionType;$/;"	t	class:AngleAxis
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  typedef _Scalar Scalar;$/;"	t	class:AngleAxis
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  typedef _Scalar Scalar;$/;"	t	struct:ei_traits
Vector3	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  typedef Matrix<Scalar,3,1> Vector3;$/;"	t	class:AngleAxis
angle	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  Scalar angle() const { return m_angle; }$/;"	f	class:AngleAxis
angle	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  Scalar& angle() { return m_angle; }$/;"	f	class:AngleAxis
axis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  Vector3& axis() { return m_axis; }$/;"	f	class:AngleAxis
axis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  const Vector3& axis() const { return m_axis; }$/;"	f	class:AngleAxis
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline typename internal::cast_return_type<AngleAxis,AngleAxis<NewScalarType> >::type cast() const$/;"	f	class:AngleAxis
ei_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^template<typename _Scalar> struct ei_traits<AngleAxis<_Scalar> >$/;"	s
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  AngleAxis inverse() const$/;"	f	class:AngleAxis
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  bool isApprox(const AngleAxis& other, typename NumTraits<Scalar>::Real prec = precision<Scalar>()) const$/;"	f	class:AngleAxis
m_angle	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  Scalar m_angle;$/;"	m	class:AngleAxis
m_axis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  Vector3 m_axis;$/;"	m	class:AngleAxis
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  friend inline QuaternionType operator* (const QuaternionType& a, const AngleAxis& b)$/;"	f	class:AngleAxis
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline Matrix3 operator* (const Matrix3& other) const$/;"	f	class:AngleAxis
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline QuaternionType operator* (const AngleAxis& other) const$/;"	f	class:AngleAxis
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline QuaternionType operator* (const QuaternionType& other) const$/;"	f	class:AngleAxis
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline Vector3 operator* (const Vector3& other) const$/;"	f	class:AngleAxis
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^  inline friend Matrix3 operator* (const Matrix3& a, const AngleAxis& b)$/;"	f	class:AngleAxis
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^AngleAxis<Scalar>& AngleAxis<Scalar>::operator=(const MatrixBase<Derived>& mat)$/;"	f	class:AngleAxis
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^AngleAxis<Scalar>& AngleAxis<Scalar>::operator=(const QuaternionType& q)$/;"	f	class:AngleAxis
toRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/AngleAxis.h	/^AngleAxis<Scalar>::toRotationMatrix(void) const$/;"	f	class:AngleAxis
AmbientDimAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  enum { AmbientDimAtCompileTime = _AmbientDim };$/;"	e	enum:Hyperplane::<anonymous>
Coefficients	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^                        : int(AmbientDimAtCompileTime)+1,1> Coefficients;$/;"	t	class:Hyperplane
Hyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  explicit Hyperplane(const ParametrizedLine<Scalar, AmbientDimAtCompileTime>& parametrized)$/;"	f	class:Hyperplane
Hyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline Hyperplane(const VectorType& n, Scalar d)$/;"	f	class:Hyperplane
Hyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline Hyperplane(const VectorType& n, const VectorType& e)$/;"	f	class:Hyperplane
Hyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline explicit Hyperplane() {}$/;"	f	class:Hyperplane
Hyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline explicit Hyperplane(const Hyperplane<OtherScalarType,AmbientDimAtCompileTime>& other)$/;"	f	class:Hyperplane
Hyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline explicit Hyperplane(int _dim) : m_coeffs(_dim+1) {}$/;"	f	class:Hyperplane
Hyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^class Hyperplane$/;"	c
NormalReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  typedef Block<Coefficients,AmbientDimAtCompileTime,1> NormalReturnType;$/;"	t	class:Hyperplane
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Hyperplane
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  typedef _Scalar Scalar;$/;"	t	class:Hyperplane
Through	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  static inline Hyperplane Through(const VectorType& p0, const VectorType& p1)$/;"	f	class:Hyperplane
Through	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  static inline Hyperplane Through(const VectorType& p0, const VectorType& p1, const VectorType& p2)$/;"	f	class:Hyperplane
VectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  typedef Matrix<Scalar,AmbientDimAtCompileTime,1> VectorType;$/;"	t	class:Hyperplane
absDistance	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline Scalar absDistance(const VectorType& p) const { return ei_abs(signedDistance(p)); }$/;"	f	class:Hyperplane
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^           Hyperplane<NewScalarType,AmbientDimAtCompileTime> >::type cast() const$/;"	f	class:Hyperplane
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline Coefficients& coeffs() { return m_coeffs; }$/;"	f	class:Hyperplane
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline const Coefficients& coeffs() const { return m_coeffs; }$/;"	f	class:Hyperplane
dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline int dim() const { return int(AmbientDimAtCompileTime)==Dynamic ? m_coeffs.size()-1 : int(AmbientDimAtCompileTime); }$/;"	f	class:Hyperplane
intersection	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  VectorType intersection(const Hyperplane& other)$/;"	f	class:Hyperplane
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  bool isApprox(const Hyperplane& other, typename NumTraits<Scalar>::Real prec = precision<Scalar>()) const$/;"	f	class:Hyperplane
m_coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  Coefficients m_coeffs;$/;"	m	class:Hyperplane
normal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline NormalReturnType normal() { return NormalReturnType(m_coeffs,0,0,dim(),1); }$/;"	f	class:Hyperplane
normal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline const NormalReturnType normal() const { return NormalReturnType(*const_cast<Coefficients*>(&m_coeffs),0,0,dim(),1); }$/;"	f	class:Hyperplane
normalize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  void normalize(void)$/;"	f	class:Hyperplane
offset	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline Scalar& offset() { return m_coeffs(dim()); }$/;"	f	class:Hyperplane
offset	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline const Scalar& offset() const { return m_coeffs.coeff(dim()); }$/;"	f	class:Hyperplane
projection	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline VectorType projection(const VectorType& p) const { return p - signedDistance(p) * normal(); }$/;"	f	class:Hyperplane
signedDistance	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline Scalar signedDistance(const VectorType& p) const { return p.eigen2_dot(normal()) + offset(); }$/;"	f	class:Hyperplane
transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline Hyperplane& transform(const MatrixBase<XprType>& mat, TransformTraits traits = Affine)$/;"	f	class:Hyperplane
transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  inline Hyperplane& transform(const Transform<Scalar,AmbientDimAtCompileTime>& t,$/;"	f	class:Hyperplane
~Hyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Hyperplane.h	/^  ~Hyperplane() {}$/;"	f	class:Hyperplane
AmbientDimAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  enum { AmbientDimAtCompileTime = _AmbientDim };$/;"	e	enum:ParametrizedLine::<anonymous>
ParametrizedLine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  ParametrizedLine(const VectorType& origin, const VectorType& direction)$/;"	f	class:ParametrizedLine
ParametrizedLine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  inline explicit ParametrizedLine() {}$/;"	f	class:ParametrizedLine
ParametrizedLine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  inline explicit ParametrizedLine(const ParametrizedLine<OtherScalarType,AmbientDimAtCompileTime>& other)$/;"	f	class:ParametrizedLine
ParametrizedLine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  inline explicit ParametrizedLine(int _dim) : m_origin(_dim), m_direction(_dim) {}$/;"	f	class:ParametrizedLine
ParametrizedLine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^class ParametrizedLine$/;"	c
ParametrizedLine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^inline ParametrizedLine<_Scalar, _AmbientDim>::ParametrizedLine(const Hyperplane<_Scalar, _AmbientDim>& hyperplane)$/;"	f	class:ParametrizedLine
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:ParametrizedLine
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  typedef _Scalar Scalar;$/;"	t	class:ParametrizedLine
Through	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  static inline ParametrizedLine Through(const VectorType& p0, const VectorType& p1)$/;"	f	class:ParametrizedLine
VectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  typedef Matrix<Scalar,AmbientDimAtCompileTime,1> VectorType;$/;"	t	class:ParametrizedLine
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^           ParametrizedLine<NewScalarType,AmbientDimAtCompileTime> >::type cast() const$/;"	f	class:ParametrizedLine
dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  inline int dim() const { return m_direction.size(); }$/;"	f	class:ParametrizedLine
direction	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  VectorType& direction() { return m_direction; }$/;"	f	class:ParametrizedLine
direction	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  const VectorType& direction() const { return m_direction; }$/;"	f	class:ParametrizedLine
distance	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  RealScalar distance(const VectorType& p) const { return ei_sqrt(squaredDistance(p)); }$/;"	f	class:ParametrizedLine
intersection	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^inline _Scalar ParametrizedLine<_Scalar, _AmbientDim>::intersection(const Hyperplane<_Scalar, _AmbientDim>& hyperplane)$/;"	f	class:ParametrizedLine
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  bool isApprox(const ParametrizedLine& other, typename NumTraits<Scalar>::Real prec = precision<Scalar>()) const$/;"	f	class:ParametrizedLine
m_direction	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  VectorType m_origin, m_direction;$/;"	m	class:ParametrizedLine
m_origin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  VectorType m_origin, m_direction;$/;"	m	class:ParametrizedLine
origin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  VectorType& origin() { return m_origin; }$/;"	f	class:ParametrizedLine
origin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  const VectorType& origin() const { return m_origin; }$/;"	f	class:ParametrizedLine
projection	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  VectorType projection(const VectorType& p) const$/;"	f	class:ParametrizedLine
squaredDistance	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  RealScalar squaredDistance(const VectorType& p) const$/;"	f	class:ParametrizedLine
~ParametrizedLine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/ParametrizedLine.h	/^  ~ParametrizedLine() {}$/;"	f	class:ParametrizedLine
AngleAxisType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  typedef AngleAxis<Scalar> AngleAxisType;$/;"	t	class:Quaternion
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  typedef RotationBase<Quaternion<_Scalar>,3> Base;$/;"	t	class:Quaternion
Coefficients	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  typedef Matrix<Scalar, 4, 1> Coefficients;$/;"	t	class:Quaternion
Identity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline static Quaternion Identity() { return Quaternion(1, 0, 0, 0); }$/;"	f	class:Quaternion
Matrix3	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  typedef Matrix<Scalar,3,3> Matrix3;$/;"	t	class:Quaternion
Quaternion	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  explicit inline Quaternion(const AngleAxisType& aa) { *this = aa; }$/;"	f	class:Quaternion
Quaternion	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  explicit inline Quaternion(const MatrixBase<Derived>& other) { *this = other; }$/;"	f	class:Quaternion
Quaternion	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Quaternion() {}$/;"	f	class:Quaternion
Quaternion	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Quaternion(Scalar w, Scalar x, Scalar y, Scalar z)$/;"	f	class:Quaternion
Quaternion	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Quaternion(const Quaternion& other) { m_coeffs = other.m_coeffs; }$/;"	f	class:Quaternion
Quaternion	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline explicit Quaternion(const Quaternion<OtherScalarType>& other)$/;"	f	class:Quaternion
Quaternion	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^class Quaternion : public RotationBase<Quaternion<_Scalar>,3>$/;"	c
Quaterniond	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^typedef Quaternion<double> Quaterniond;$/;"	t
Quaternionf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^typedef Quaternion<float> Quaternionf;$/;"	t
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  typedef _Scalar Scalar;$/;"	t	class:Quaternion
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  typedef _Scalar Scalar;$/;"	t	struct:ei_traits
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  typedef typename Other::Scalar Scalar;$/;"	t	struct:ei_quaternion_assign_impl
Vector3	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  typedef Matrix<Scalar,3,1> Vector3;$/;"	t	class:Quaternion
angularDistance	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^inline Scalar Quaternion<Scalar>::angularDistance(const Quaternion& other) const$/;"	f	class:Quaternion
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline typename internal::cast_return_type<Quaternion,Quaternion<NewScalarType> >::type cast() const$/;"	f	class:Quaternion
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Coefficients& coeffs() { return m_coeffs; }$/;"	f	class:Quaternion
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline const Coefficients& coeffs() const { return m_coeffs; }$/;"	f	class:Quaternion
conjugate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^inline Quaternion<Scalar> Quaternion<Scalar>::conjugate() const$/;"	f	class:Quaternion
ei_quaternion_assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^struct ei_quaternion_assign_impl<Other,3,3>$/;"	s
ei_quaternion_assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^struct ei_quaternion_assign_impl<Other,4,1>$/;"	s
ei_quaternion_product	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^ei_quaternion_product(const Quaternion<Scalar>& a, const Quaternion<Scalar>& b)$/;"	f
ei_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^template<typename _Scalar> struct ei_traits<Quaternion<_Scalar> >$/;"	s
eigen2_dot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar eigen2_dot(const Quaternion& other) const { return m_coeffs.eigen2_dot(other.m_coeffs); }$/;"	f	class:Quaternion
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^inline Quaternion<Scalar> Quaternion<Scalar>::inverse() const$/;"	f	class:Quaternion
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  bool isApprox(const Quaternion& other, typename NumTraits<Scalar>::Real prec = precision<Scalar>()) const$/;"	f	class:Quaternion
m_coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  Coefficients m_coeffs;$/;"	m	class:Quaternion
norm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar norm() const { return m_coeffs.norm(); }$/;"	f	class:Quaternion
normalize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline void normalize() { m_coeffs.normalize(); }$/;"	f	class:Quaternion
normalized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Quaternion normalized() const { return Quaternion(m_coeffs.normalized()); }$/;"	f	class:Quaternion
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^Quaternion<Scalar>::operator* (const MatrixBase<Derived>& v) const$/;"	f	class:Quaternion
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^inline Quaternion<Scalar> Quaternion<Scalar>::operator* (const Quaternion& other) const$/;"	f	class:Quaternion
operator *=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^inline Quaternion<Scalar>& Quaternion<Scalar>::operator*= (const Quaternion& other)$/;"	f	class:Quaternion
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^inline Quaternion<Scalar>& Quaternion<Scalar>::operator=(const AngleAxisType& aa)$/;"	f	class:Quaternion
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^inline Quaternion<Scalar>& Quaternion<Scalar>::operator=(const MatrixBase<Derived>& xpr)$/;"	f	class:Quaternion
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^inline Quaternion<Scalar>& Quaternion<Scalar>::operator=(const Quaternion& other)$/;"	f	class:Quaternion
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline static void run(Quaternion<Scalar>& q, const Other& mat)$/;"	f	struct:ei_quaternion_assign_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline static void run(Quaternion<Scalar>& q, const Other& vec)$/;"	f	struct:ei_quaternion_assign_impl
setFromTwoVectors	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^inline Quaternion<Scalar>& Quaternion<Scalar>::setFromTwoVectors(const MatrixBase<Derived1>& a, const MatrixBase<Derived2>& b)$/;"	f	class:Quaternion
setIdentity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Quaternion& setIdentity() { m_coeffs << 0, 0, 0, 1; return *this; }$/;"	f	class:Quaternion
slerp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^Quaternion<Scalar> Quaternion<Scalar>::slerp(Scalar t, const Quaternion& other) const$/;"	f	class:Quaternion
squaredNorm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar squaredNorm() const { return m_coeffs.squaredNorm(); }$/;"	f	class:Quaternion
toRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^Quaternion<Scalar>::toRotationMatrix(void) const$/;"	f	class:Quaternion
vec	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Block<Coefficients,3,1> vec() { return m_coeffs.template start<3>(); }$/;"	f	class:Quaternion
vec	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline const Block<const Coefficients,3,1> vec() const { return m_coeffs.template start<3>(); }$/;"	f	class:Quaternion
w	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar w() const { return m_coeffs.coeff(3); }$/;"	f	class:Quaternion
w	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar& w() { return m_coeffs.coeffRef(3); }$/;"	f	class:Quaternion
x	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar x() const { return m_coeffs.coeff(0); }$/;"	f	class:Quaternion
x	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar& x() { return m_coeffs.coeffRef(0); }$/;"	f	class:Quaternion
y	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar y() const { return m_coeffs.coeff(1); }$/;"	f	class:Quaternion
y	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar& y() { return m_coeffs.coeffRef(1); }$/;"	f	class:Quaternion
z	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar z() const { return m_coeffs.coeff(2); }$/;"	f	class:Quaternion
z	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Quaternion.h	/^  inline Scalar& z() { return m_coeffs.coeffRef(2); }$/;"	f	class:Quaternion
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  typedef RotationBase<Rotation2D<_Scalar>,2> Base;$/;"	t	class:Rotation2D
Dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  enum { Dim = 2 };$/;"	e	enum:Rotation2D::<anonymous>
Matrix2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  typedef Matrix<Scalar,2,2> Matrix2;$/;"	t	class:Rotation2D
Rotation2D	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  inline Rotation2D(Scalar a) : m_angle(a) {}$/;"	f	class:Rotation2D
Rotation2D	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  inline explicit Rotation2D(const Rotation2D<OtherScalarType>& other)$/;"	f	class:Rotation2D
Rotation2D	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^class Rotation2D : public RotationBase<Rotation2D<_Scalar>,2>$/;"	c
Rotation2Dd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^typedef Rotation2D<double> Rotation2Dd;$/;"	t
Rotation2Df	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^typedef Rotation2D<float> Rotation2Df;$/;"	t
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  typedef _Scalar Scalar;$/;"	t	class:Rotation2D
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  typedef _Scalar Scalar;$/;"	t	struct:ei_traits
Vector2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  typedef Matrix<Scalar,2,1> Vector2;$/;"	t	class:Rotation2D
angle	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  inline Scalar angle() const { return m_angle; }$/;"	f	class:Rotation2D
angle	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  inline Scalar& angle() { return m_angle; }$/;"	f	class:Rotation2D
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  inline typename internal::cast_return_type<Rotation2D,Rotation2D<NewScalarType> >::type cast() const$/;"	f	class:Rotation2D
ei_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^template<typename _Scalar> struct ei_traits<Rotation2D<_Scalar> >$/;"	s
fromRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^Rotation2D<Scalar>& Rotation2D<Scalar>::fromRotationMatrix(const MatrixBase<Derived>& mat)$/;"	f	class:Rotation2D
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  inline Rotation2D inverse() const { return -m_angle; }$/;"	f	class:Rotation2D
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  bool isApprox(const Rotation2D& other, typename NumTraits<Scalar>::Real prec = precision<Scalar>()) const$/;"	f	class:Rotation2D
m_angle	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  Scalar m_angle;$/;"	m	class:Rotation2D
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  Vector2 operator* (const Vector2& vec) const$/;"	f	class:Rotation2D
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  inline Rotation2D operator*(const Rotation2D& other) const$/;"	f	class:Rotation2D
operator *=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  inline Rotation2D& operator*=(const Rotation2D& other)$/;"	f	class:Rotation2D
slerp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^  inline Rotation2D slerp(Scalar t, const Rotation2D& other) const$/;"	f	class:Rotation2D
toRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Rotation2D.h	/^Rotation2D<Scalar>::toRotationMatrix(void) const$/;"	f	class:Rotation2D
Dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    enum { Dim = _Dim };$/;"	e	enum:RotationBase::<anonymous>
Matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^::Matrix(const RotationBase<OtherDerived,ColsAtCompileTime>& r)$/;"	f	class:Matrix
RotationBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^class RotationBase$/;"	c
RotationMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    typedef Matrix<Scalar,Dim,Dim> RotationMatrixType;$/;"	t	class:RotationBase
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    typedef typename ei_traits<Derived>::Scalar Scalar;$/;"	t	class:RotationBase
derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    inline Derived& derived() { return *static_cast<Derived*>(this); }$/;"	f	class:RotationBase
derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    inline const Derived& derived() const { return *static_cast<const Derived*>(this); }$/;"	f	class:RotationBase
ei_toRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^inline static Matrix<Scalar,2,2> ei_toRotationMatrix(const Scalar& s)$/;"	f
ei_toRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^inline static Matrix<Scalar,Dim,Dim> ei_toRotationMatrix(const RotationBase<OtherDerived,Dim>& r)$/;"	f
ei_toRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^inline static const MatrixBase<OtherDerived>& ei_toRotationMatrix(const MatrixBase<OtherDerived>& mat)$/;"	f
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    inline Derived inverse() const { return derived().inverse(); }$/;"	f	class:RotationBase
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    inline RotationMatrixType operator*(const Scaling<Scalar,Dim>& s) const$/;"	f	class:RotationBase
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    inline Transform<Scalar,Dim> operator*(const Transform<Scalar,Dim>& t) const$/;"	f	class:RotationBase
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    inline Transform<Scalar,Dim> operator*(const Translation<Scalar,Dim>& t) const$/;"	f	class:RotationBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^::operator=(const RotationBase<OtherDerived,ColsAtCompileTime>& r)$/;"	f	class:Matrix
toRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/RotationBase.h	/^    inline RotationMatrixType toRotationMatrix() const { return derived().toRotationMatrix(); }$/;"	f	class:RotationBase
Dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  enum { Dim = _Dim };$/;"	e	enum:Scaling::<anonymous>
LinearMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  typedef Matrix<Scalar,Dim,Dim> LinearMatrixType;$/;"	t	class:Scaling
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  typedef _Scalar Scalar;$/;"	t	class:Scaling
Scaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  Scaling() {}$/;"	f	class:Scaling
Scaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  explicit inline Scaling(const Scalar& s) { m_coeffs.setConstant(s); }$/;"	f	class:Scaling
Scaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  explicit inline Scaling(const VectorType& coeffs) : m_coeffs(coeffs) {}$/;"	f	class:Scaling
Scaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline Scaling(const Scalar& sx, const Scalar& sy)$/;"	f	class:Scaling
Scaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline Scaling(const Scalar& sx, const Scalar& sy, const Scalar& sz)$/;"	f	class:Scaling
Scaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline explicit Scaling(const Scaling<OtherScalarType,Dim>& other)$/;"	f	class:Scaling
Scaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^class Scaling$/;"	c
Scaling2d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^typedef Scaling<double,2> Scaling2d;$/;"	t
Scaling2f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^typedef Scaling<float, 2> Scaling2f;$/;"	t
Scaling3d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^typedef Scaling<double,3> Scaling3d;$/;"	t
Scaling3f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^typedef Scaling<float, 3> Scaling3f;$/;"	t
TransformType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  typedef Transform<Scalar,Dim> TransformType;$/;"	t	class:Scaling
TranslationType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  typedef Translation<Scalar,Dim> TranslationType;$/;"	t	class:Scaling
VectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  typedef Matrix<Scalar,Dim,1> VectorType;$/;"	t	class:Scaling
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline typename internal::cast_return_type<Scaling,Scaling<NewScalarType,Dim> >::type cast() const$/;"	f	class:Scaling
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  VectorType& coeffs() { return m_coeffs; }$/;"	f	class:Scaling
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  const VectorType& coeffs() const { return m_coeffs; }$/;"	f	class:Scaling
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline Scaling inverse() const$/;"	f	class:Scaling
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  bool isApprox(const Scaling& other, typename NumTraits<Scalar>::Real prec = precision<Scalar>()) const$/;"	f	class:Scaling
m_coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  VectorType m_coeffs;$/;"	m	class:Scaling
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  friend inline LinearMatrixType operator* (const LinearMatrixType& other, const Scaling& s)$/;"	f	class:Scaling
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline LinearMatrixType operator* (const LinearMatrixType& other) const$/;"	f	class:Scaling
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline LinearMatrixType operator*(const RotationBase<Derived,Dim>& r) const$/;"	f	class:Scaling
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline Scaling operator* (const Scaling& other) const$/;"	f	class:Scaling
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline VectorType operator* (const VectorType& other) const$/;"	f	class:Scaling
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^Scaling<Scalar,Dim>::operator* (const TransformType& t) const$/;"	f	class:Scaling
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^Scaling<Scalar,Dim>::operator* (const TranslationType& t) const$/;"	f	class:Scaling
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Scaling.h	/^  inline Scaling& operator=(const Scaling& other)$/;"	f	class:Scaling
ConstLinearPart	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef const Block<const MatrixType,Dim,Dim> ConstLinearPart;$/;"	t	class:Transform
ConstTranslationPart	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef const Block<const MatrixType,Dim,1> ConstTranslationPart;$/;"	t	class:Transform
Dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^    Dim = _Dim,     \/\/\/< space dimension in which the transformation holds$/;"	e	enum:Transform::<anonymous>
HDim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^    HDim = _Dim+1   \/\/\/< size of a respective homogeneous vector$/;"	e	enum:Transform::<anonymous>
Identity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  static const typename MatrixType::IdentityReturnType Identity()$/;"	f	class:Transform
LinearMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Matrix<Scalar,Dim,Dim> LinearMatrixType;$/;"	t	class:Transform
LinearPart	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Block<MatrixType,Dim,Dim> LinearPart;$/;"	t	class:Transform
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Matrix<Scalar,HDim,HDim> MatrixType;$/;"	t	class:Transform
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef typename TransformType::MatrixType MatrixType;$/;"	t	struct:ei_transform_product_impl
ResultType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Matrix<Scalar,Dim,1> ResultType;$/;"	t	struct:ei_transform_product_impl
ResultType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef TransformType ResultType;$/;"	t	struct:ei_transform_product_impl
ResultType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef typename ProductReturnType<MatrixType,Other>::Type ResultType;$/;"	t	struct:ei_transform_product_impl
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef _Scalar Scalar;$/;"	t	class:Transform
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef typename Other::Scalar Scalar;$/;"	t	struct:ei_transform_product_impl
ScalingType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Scaling<Scalar,Dim> ScalingType;$/;"	t	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline Transform() { }$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline Transform(const Transform& other)$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline explicit Transform(const MatrixBase<OtherDerived>& other)$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline explicit Transform(const RotationBase<Derived, Dim>& r) { *this = r; }$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline explicit Transform(const ScalingType& s) { *this = s; }$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline explicit Transform(const Transform<OtherScalarType,Dim>& other)$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline explicit Transform(const TranslationType& t) { *this = t; }$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::Transform(const QMatrix& other)$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::Transform(const QTransform& other)$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^class Transform$/;"	c
Transform2d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^typedef Transform<double,2> Transform2d;$/;"	t
Transform2f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^typedef Transform<float,2> Transform2f;$/;"	t
Transform3d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^typedef Transform<double,3> Transform3d;$/;"	t
Transform3f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^typedef Transform<float,3> Transform3f;$/;"	t
TransformType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Transform<Scalar,Dim> TransformType;$/;"	t	struct:ei_transform_product_impl
TransformType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Transform<typename Other::Scalar,Dim> TransformType;$/;"	t	struct:ei_transform_product_impl
TranslationPart	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Block<MatrixType,Dim,1> TranslationPart;$/;"	t	class:Transform
TranslationType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Translation<Scalar,Dim> TranslationType;$/;"	t	class:Transform
VectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  typedef Matrix<Scalar,Dim,1> VectorType;$/;"	t	class:Transform
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline typename internal::cast_return_type<Transform,Transform<NewScalarType,Dim> >::type cast() const$/;"	f	class:Transform
computeRotationScaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^void Transform<Scalar,Dim>::computeRotationScaling(RotationMatrixType *rotation, ScalingMatrixType *scaling) const$/;"	f	class:Transform
computeScalingRotation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^void Transform<Scalar,Dim>::computeScalingRotation(ScalingMatrixType *scaling, RotationMatrixType *rotation) const$/;"	f	class:Transform
construct_from_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  struct construct_from_matrix$/;"	s	class:Transform
construct_from_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  template<typename OtherDerived> struct construct_from_matrix<OtherDerived, true>$/;"	s	class:Transform
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  Scalar* data() { return m_matrix.data(); }$/;"	f	class:Transform
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  const Scalar* data() const { return m_matrix.data(); }$/;"	f	class:Transform
ei_transform_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^struct ei_transform_product_impl<Other,Dim,HDim, Dim,1>$/;"	s
ei_transform_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^struct ei_transform_product_impl<Other,Dim,HDim, Dim,Dim>$/;"	s
ei_transform_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^struct ei_transform_product_impl<Other,Dim,HDim, HDim,1>$/;"	s
ei_transform_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^struct ei_transform_product_impl<Other,Dim,HDim, HDim,HDim>$/;"	s
fromPositionOrientationScale	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::fromPositionOrientationScale(const MatrixBase<PositionDerived> &position,$/;"	f	class:Transform
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::inverse(TransformTraits traits) const$/;"	f	class:Transform
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  bool isApprox(const Transform& other, typename NumTraits<Scalar>::Real prec = precision<Scalar>()) const$/;"	f	class:Transform
linear	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline ConstLinearPart linear() const { return m_matrix.template block<Dim,Dim>(0,0); }$/;"	f	class:Transform
linear	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline LinearPart linear() { return m_matrix.template block<Dim,Dim>(0,0); }$/;"	f	class:Transform
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  MatrixType m_matrix;$/;"	m	class:Transform
matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline MatrixType& matrix() { return m_matrix; }$/;"	f	class:Transform
matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline const MatrixType& matrix() const { return m_matrix; }$/;"	f	class:Transform
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline Scalar operator() (int row, int col) const { return m_matrix(row,col); }$/;"	f	class:Transform
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline Scalar& operator() (int row, int col) { return m_matrix(row,col); }$/;"	f	class:Transform
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  friend inline Transform operator*(const LinearMatrixType& mat, const Transform& t)$/;"	f	class:Transform
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  operator * (const MatrixBase<OtherDerived> &a, const Transform &b)$/;"	f	class:Transform
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  operator * (const MatrixBase<OtherDerived> &other) const$/;"	f	class:Transform
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  operator * (const Transform& other) const$/;"	f	class:Transform
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^inline Transform<Scalar,Dim> Transform<Scalar,Dim>::operator*(const RotationBase<Derived,Dim>& r) const$/;"	f	class:Transform
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^inline Transform<Scalar,Dim> Transform<Scalar,Dim>::operator*(const ScalingType& s) const$/;"	f	class:Transform
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^inline Transform<Scalar,Dim> Transform<Scalar,Dim>::operator*(const TranslationType& t) const$/;"	f	class:Transform
operator *=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline Transform& operator*=(const RotationBase<Derived,Dim>& r) { return rotate(r.toRotationMatrix()); }$/;"	f	class:Transform
operator *=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline Transform& operator*=(const ScalingType& s) { return scale(s.coeffs()); }$/;"	f	class:Transform
operator *=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline Transform& operator*=(const TranslationType& t) { return translate(t.vector()); }$/;"	f	class:Transform
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline Transform& operator=(const MatrixBase<OtherDerived>& other)$/;"	f	class:Transform
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline Transform& operator=(const Transform& other)$/;"	f	class:Transform
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>& Transform<Scalar,Dim>::operator=(const QMatrix& other)$/;"	f	class:Transform
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>& Transform<Scalar,Dim>::operator=(const QTransform& other)$/;"	f	class:Transform
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^inline Transform<Scalar,Dim>& Transform<Scalar,Dim>::operator=(const RotationBase<Derived,Dim>& r)$/;"	f	class:Transform
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^inline Transform<Scalar,Dim>& Transform<Scalar,Dim>::operator=(const ScalingType& s)$/;"	f	class:Transform
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^inline Transform<Scalar,Dim>& Transform<Scalar,Dim>::operator=(const TranslationType& t)$/;"	f	class:Transform
prerotate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::prerotate(const RotationType& rotation)$/;"	f	class:Transform
prescale	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::prescale(const MatrixBase<OtherDerived> &other)$/;"	f	class:Transform
prescale	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^inline Transform<Scalar,Dim>& Transform<Scalar,Dim>::prescale(Scalar s)$/;"	f	class:Transform
preshear	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::preshear(Scalar sx, Scalar sy)$/;"	f	class:Transform
pretranslate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::pretranslate(const MatrixBase<OtherDerived> &other)$/;"	f	class:Transform
rotate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::rotate(const RotationType& rotation)$/;"	f	class:Transform
rotation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::rotation() const$/;"	f	class:Transform
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^    static inline void run(Transform *transform, const MatrixBase<OtherDerived>& other)$/;"	f	struct:Transform::construct_from_matrix
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  static ResultType run(const TransformType& tr, const Other& other)$/;"	f	struct:ei_transform_product_impl
scale	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::scale(const MatrixBase<OtherDerived> &other)$/;"	f	class:Transform
scale	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^inline Transform<Scalar,Dim>& Transform<Scalar,Dim>::scale(Scalar s)$/;"	f	class:Transform
setIdentity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  void setIdentity() { m_matrix.setIdentity(); }$/;"	f	class:Transform
shear	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::shear(Scalar sx, Scalar sy)$/;"	f	class:Transform
toQMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^QMatrix Transform<Scalar,Dim>::toQMatrix(void) const$/;"	f	class:Transform
toQTransform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^QTransform Transform<Scalar,Dim>::toQTransform(void) const$/;"	f	class:Transform
translate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^Transform<Scalar,Dim>::translate(const MatrixBase<OtherDerived> &other)$/;"	f	class:Transform
translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline ConstTranslationPart translation() const { return m_matrix.template block<Dim,1>(0,Dim); }$/;"	f	class:Transform
translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Transform.h	/^  inline TranslationPart translation() { return m_matrix.template block<Dim,1>(0,Dim); }$/;"	f	class:Transform
Dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  enum { Dim = _Dim };$/;"	e	enum:Translation::<anonymous>
LinearMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  typedef Matrix<Scalar,Dim,Dim> LinearMatrixType;$/;"	t	class:Translation
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  typedef _Scalar Scalar;$/;"	t	class:Translation
ScalingType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  typedef Scaling<Scalar,Dim> ScalingType;$/;"	t	class:Translation
TransformType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  typedef Transform<Scalar,Dim> TransformType;$/;"	t	class:Translation
Translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  Translation() {}$/;"	f	class:Translation
Translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  explicit inline Translation(const VectorType& vector) : m_coeffs(vector) {}$/;"	f	class:Translation
Translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  inline Translation(const Scalar& sx, const Scalar& sy)$/;"	f	class:Translation
Translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  inline Translation(const Scalar& sx, const Scalar& sy, const Scalar& sz)$/;"	f	class:Translation
Translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  inline explicit Translation(const Translation<OtherScalarType,Dim>& other)$/;"	f	class:Translation
Translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^class Translation$/;"	c
Translation2d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^typedef Translation<double,2> Translation2d;$/;"	t
Translation2f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^typedef Translation<float, 2> Translation2f;$/;"	t
Translation3d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^typedef Translation<double,3> Translation3d;$/;"	t
Translation3f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^typedef Translation<float, 3> Translation3f;$/;"	t
VectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  typedef Matrix<Scalar,Dim,1> VectorType;$/;"	t	class:Translation
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  inline typename internal::cast_return_type<Translation,Translation<NewScalarType,Dim> >::type cast() const$/;"	f	class:Translation
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  Translation inverse() const { return Translation(-m_coeffs); }$/;"	f	class:Translation
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  bool isApprox(const Translation& other, typename NumTraits<Scalar>::Real prec = precision<Scalar>()) const$/;"	f	class:Translation
m_coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  VectorType m_coeffs;$/;"	m	class:Translation
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  friend inline TransformType operator* (const LinearMatrixType& linear, const Translation& t)$/;"	f	class:Translation
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  inline TransformType operator*(const RotationBase<Derived,Dim>& r) const$/;"	f	class:Translation
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  inline Translation operator* (const Translation& other) const$/;"	f	class:Translation
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  inline VectorType operator* (const VectorType& other) const$/;"	f	class:Translation
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^Translation<Scalar,Dim>::operator* (const LinearMatrixType& linear) const$/;"	f	class:Translation
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^Translation<Scalar,Dim>::operator* (const ScalingType& other) const$/;"	f	class:Translation
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^Translation<Scalar,Dim>::operator* (const TransformType& t) const$/;"	f	class:Translation
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  Translation& operator=(const Translation& other)$/;"	f	class:Translation
vector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  VectorType& vector() { return m_coeffs; }$/;"	f	class:Translation
vector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Geometry/Translation.h	/^  const VectorType& vector() const { return m_coeffs; }$/;"	f	class:Translation
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^    typedef FullPivLU<MatrixType> Base;$/;"	t	class:LU
ColVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^    typedef Matrix<Scalar, MatrixType::RowsAtCompileTime, 1, MatrixType::Options, MatrixType::MaxRowsAtCompileTime, 1> ColVectorType;$/;"	t	class:LU
EIGEN2_LU_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	26;"	d
ImageResultType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^    > ImageResultType;$/;"	t	class:LU
IntColVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^    typedef Matrix<int, MatrixType::RowsAtCompileTime, 1, MatrixType::Options, MatrixType::MaxRowsAtCompileTime, 1> IntColVectorType;$/;"	t	class:LU
IntRowVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^    typedef Matrix<int, 1, MatrixType::ColsAtCompileTime, MatrixType::Options, 1, MatrixType::MaxColsAtCompileTime> IntRowVectorType;$/;"	t	class:LU
KernelResultType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^    > KernelResultType;$/;"	t	class:LU
LU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^    LU() : Base() {}$/;"	f	class:LU
LU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^    explicit LU(const T& t) : Base(t), m_originalMatrix(t) {}$/;"	f	class:LU
LU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^class LU : public FullPivLU<MatrixType>$/;"	c
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^    typedef typename NumTraits<typename MatrixType::Scalar>::Real RealScalar;$/;"	t	class:LU
RowVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^    typedef Matrix<Scalar, 1, MatrixType::ColsAtCompileTime, MatrixType::Options, 1, MatrixType::MaxColsAtCompileTime> RowVectorType;$/;"	t	class:LU
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:LU
computeImage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^    void computeImage(ImageMatrixType *result) const$/;"	f	class:LU
computeInverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^    inline void computeInverse(ResultType *result) const$/;"	f	class:LU
computeKernel	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^    void computeKernel(KernelMatrixType *result) const$/;"	f	class:LU
eigen2_lu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^MatrixBase<Derived>::eigen2_lu() const$/;"	f	class:MatrixBase
image	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^    const ImageResultType image() const$/;"	f	class:LU
lu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^MatrixBase<Derived>::lu() const$/;"	f	class:MatrixBase
m_originalMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^    const MatrixType& m_originalMatrix;$/;"	m	class:LU
solve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LU.h	/^    bool solve(const MatrixBase<OtherDerived>& b, ResultType *result) const$/;"	f	class:LU
EIGEN_LAZY_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Lazy.h	26;"	d
lazy	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Lazy.h	/^MatrixBase<Derived>::lazy() const$/;"	f	class:MatrixBase
marked	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Lazy.h	/^MatrixBase<Derived>::marked() const$/;"	f	class:MatrixBase
operator +=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Lazy.h	/^Derived& MatrixBase<Derived>::operator+=(const Flagged<ProductBase<ProductDerived, Lhs,Rhs>, 0,$/;"	f	class:MatrixBase
operator -=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Lazy.h	/^Derived& MatrixBase<Derived>::operator-=(const Flagged<ProductBase<ProductDerived, Lhs,Rhs>, 0,$/;"	f	class:MatrixBase
EIGEN2_LEASTSQUARES_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LeastSquares.h	26;"	d
fitHyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LeastSquares.h	/^void fitHyperplane(int numPoints,$/;"	f
linearRegression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/LeastSquares.h	/^void linearRegression(int numPoints,$/;"	f
EIGEN2_MACROS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Macros.h	26;"	d
EIGEN_ALIGN_128	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Macros.h	31;"	d
EIGEN_ARCH_WANTS_ALIGNMENT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Macros.h	33;"	d
ei_assert	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Macros.h	28;"	d
ei_internal_assert	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Macros.h	29;"	d
EIGEN2_MATH_FUNCTIONS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	26;"	d
ei_abs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline typename NumTraits<T>::Real ei_abs (const T& x) { return internal::abs(x); }$/;"	f
ei_abs2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline typename NumTraits<T>::Real ei_abs2(const T& x) { return internal::abs2(x); }$/;"	f
ei_atan2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_atan2(const T& x,const T& y) { return internal::atan2(x,y); }$/;"	f
ei_conj	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_conj(const T& x) { return internal::conj(x); }$/;"	f
ei_cos	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_cos (const T& x) { return internal::cos(x); }$/;"	f
ei_exp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_exp (const T& x) { return internal::exp(x); }$/;"	f
ei_imag	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline typename NumTraits<T>::Real ei_imag(const T& x) { return internal::imag(x); }$/;"	f
ei_isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	/^inline bool ei_isApprox(const Scalar& x, const Scalar& y,$/;"	f
ei_isApproxOrLessThan	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	/^inline bool ei_isApproxOrLessThan(const Scalar& x, const Scalar& y,$/;"	f
ei_isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	/^inline bool ei_isMuchSmallerThan(const Scalar& x, const OtherScalar& y,$/;"	f
ei_log	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_log (const T& x) { return internal::log(x); }$/;"	f
ei_pow	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_pow (const T& x,const T& y) { return internal::pow(x,y); }$/;"	f
ei_random	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_random () { return internal::random<T>(); }$/;"	f
ei_random	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_random (const T& x, const T& y) { return internal::random(x, y); }$/;"	f
ei_real	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline typename NumTraits<T>::Real ei_real(const T& x) { return internal::real(x); }$/;"	f
ei_sin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_sin (const T& x) { return internal::sin(x); }$/;"	f
ei_sqrt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T ei_sqrt(const T& x) { return internal::sqrt(x); }$/;"	f
machine_epsilon	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T machine_epsilon () { return NumTraits<T>::epsilon(); }$/;"	f
precision	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/MathFunctions.h	/^template<typename T> inline T precision () { return NumTraits<T>::dummy_precision(); }$/;"	f
EIGEN2_MEMORY_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Memory.h	26;"	d
ei_aligned_delete	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Memory.h	/^template<typename T> inline void ei_aligned_delete(T *ptr, size_t size)$/;"	f
ei_aligned_free	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Memory.h	/^inline void  ei_aligned_free(void *ptr) { internal::aligned_free(ptr); }$/;"	f
ei_aligned_malloc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Memory.h	/^inline void* ei_aligned_malloc(size_t size) { return internal::aligned_malloc(size); }$/;"	f
ei_aligned_new	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Memory.h	/^template<typename T> inline T* ei_aligned_new(size_t size)$/;"	f
ei_aligned_realloc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Memory.h	/^inline void* ei_aligned_realloc(void *ptr, size_t new_size, size_t old_size) { return internal::aligned_realloc(ptr, new_size, old_size); }$/;"	f
ei_conditional_aligned_free	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Memory.h	/^template<bool Align> inline void ei_conditional_aligned_free(void *ptr)$/;"	f
ei_conditional_aligned_malloc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Memory.h	/^template<bool Align> inline void* ei_conditional_aligned_malloc(size_t size)$/;"	f
ei_conditional_aligned_realloc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Memory.h	/^template<bool Align> inline void* ei_conditional_aligned_realloc(void* ptr, size_t new_size, size_t old_size)$/;"	f
ei_handmade_aligned_free	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Memory.h	/^inline void  ei_handmade_aligned_free(void *ptr) { internal::handmade_aligned_free(ptr); }$/;"	f
ei_handmade_aligned_malloc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Memory.h	/^inline void* ei_handmade_aligned_malloc(size_t size) { return internal::handmade_aligned_malloc(size); }$/;"	f
EIGEN2_META_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	26;"	d
NewInf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^    enum { ret = ei_meta_sqrt<Y,NewInf,NewSup>::ret };$/;"	e
NewSup	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^    enum { ret = ei_meta_sqrt<Y,NewInf,NewSup>::ret };$/;"	e
ei_cleantype	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype { typedef T type; };$/;"	s
ei_cleantype	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<T&>        { typedef typename ei_cleantype<T>::type type; };$/;"	s
ei_cleantype	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<T*>        { typedef typename ei_cleantype<T>::type type; };$/;"	s
ei_cleantype	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<const T&>  { typedef typename ei_cleantype<T>::type type; };$/;"	s
ei_cleantype	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<const T*>  { typedef typename ei_cleantype<T>::type type; };$/;"	s
ei_cleantype	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<const T>   { typedef typename ei_cleantype<T>::type type; };$/;"	s
ei_is_same_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T, typename U> struct ei_is_same_type { enum { ret = 0 }; };$/;"	s
ei_is_same_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_is_same_type<T,T> { enum { ret = 1 }; };$/;"	s
ei_meta_false	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^struct ei_meta_false { enum { ret = 0 }; };$/;"	s
ei_meta_if	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^struct ei_meta_if <false, Then, Else> { typedef Else ret; };$/;"	s
ei_meta_if	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^struct ei_meta_if { typedef Then ret; };$/;"	s
ei_meta_true	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^struct ei_meta_true {  enum { ret = 1 }; };$/;"	s
ei_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^struct ei_traits : internal::traits<T>$/;"	s
ei_unconst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unconst { typedef T type; };$/;"	s
ei_unconst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unconst<T const &> { typedef T & type; };$/;"	s
ei_unconst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unconst<T const *> { typedef T * type; };$/;"	s
ei_unconst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unconst<const T> { typedef T type; };$/;"	s
ei_unpointer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unpointer { typedef T type; };$/;"	s
ei_unpointer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unpointer<T*> { typedef T type; };$/;"	s
ei_unpointer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unpointer<T*const> { typedef T type; };$/;"	s
ei_unref	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unref { typedef T type; };$/;"	s
ei_unref	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unref<T&> { typedef T type; };$/;"	s
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^    enum { ret = ei_meta_sqrt<Y,NewInf,NewSup>::ret };$/;"	e
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^    enum { ret = ei_meta_sqrt<Y,NewInf,NewSup>::ret };$/;"	e	class:<anonymous>::NewSup
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^struct ei_meta_false { enum { ret = 0 }; };$/;"	e	enum:ei_meta_false::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^struct ei_meta_if <false, Then, Else> { typedef Else ret; };$/;"	t	struct:ei_meta_if
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^struct ei_meta_if { typedef Then ret; };$/;"	t	struct:ei_meta_if
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^struct ei_meta_true {  enum { ret = 1 }; };$/;"	e	enum:ei_meta_true::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T, typename U> struct ei_is_same_type { enum { ret = 0 }; };$/;"	e	enum:ei_is_same_type::<anonymous>
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_is_same_type<T,T> { enum { ret = 1 }; };$/;"	e	enum:ei_is_same_type::<anonymous>
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype { typedef T type; };$/;"	t	struct:ei_cleantype
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<T&>        { typedef typename ei_cleantype<T>::type type; };$/;"	t	struct:ei_cleantype
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<T*>        { typedef typename ei_cleantype<T>::type type; };$/;"	t	struct:ei_cleantype
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<const T&>  { typedef typename ei_cleantype<T>::type type; };$/;"	t	struct:ei_cleantype
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<const T*>  { typedef typename ei_cleantype<T>::type type; };$/;"	t	struct:ei_cleantype
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_cleantype<const T>   { typedef typename ei_cleantype<T>::type type; };$/;"	t	struct:ei_cleantype
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unconst { typedef T type; };$/;"	t	struct:ei_unconst
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unconst<T const &> { typedef T & type; };$/;"	t	struct:ei_unconst
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unconst<T const *> { typedef T * type; };$/;"	t	struct:ei_unconst
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unconst<const T> { typedef T type; };$/;"	t	struct:ei_unconst
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unpointer { typedef T type; };$/;"	t	struct:ei_unpointer
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unpointer<T*> { typedef T type; };$/;"	t	struct:ei_unpointer
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unpointer<T*const> { typedef T type; };$/;"	t	struct:ei_unpointer
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unref { typedef T type; };$/;"	t	struct:ei_unref
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Meta.h	/^template<typename T> struct ei_unref<T&> { typedef T type; };$/;"	t	struct:ei_unref
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^    typedef MatrixBase<Minor> Base;$/;"	t	class:Minor
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^    CoeffReadCost = _MatrixTypeNested::CoeffReadCost \/\/ minor is used typically on tiny matrices,$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^    ColsAtCompileTime = (MatrixType::ColsAtCompileTime != Dynamic) ?$/;"	e	enum:internal::traits::<anonymous>
EIGEN_MINOR_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	26;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^    Flags = _MatrixTypeNested::Flags & (HereditaryBits | LvalueBit),$/;"	e	enum:internal::traits::<anonymous>
MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^  typedef typename nested<MatrixType>::type MatrixTypeNested;$/;"	t	struct:internal::traits
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^    MaxColsAtCompileTime = (MatrixType::MaxColsAtCompileTime != Dynamic) ?$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^    MaxRowsAtCompileTime = (MatrixType::MaxRowsAtCompileTime != Dynamic) ?$/;"	e	enum:internal::traits::<anonymous>
Minor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^    inline Minor(const MatrixType& matrix,$/;"	f	class:Minor
Minor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^template<typename MatrixType> class Minor$/;"	c
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^    RowsAtCompileTime = (MatrixType::RowsAtCompileTime != Dynamic) ?$/;"	e	enum:internal::traits::<anonymous>
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^  typedef typename MatrixType::StorageKind StorageKind;$/;"	t	struct:internal::traits
_MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^  typedef typename remove_reference<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	struct:internal::traits
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^    inline const Scalar coeff(Index row, Index col) const$/;"	f	class:Minor
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:Minor
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^    inline Index cols() const { return m_matrix.cols() - 1; }$/;"	f	class:Minor
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^namespace internal {$/;"	n
m_col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^    const Index m_row, m_col;$/;"	m	class:Minor
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^    const typename MatrixType::Nested m_matrix;$/;"	m	class:Minor
m_row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^    const Index m_row, m_col;$/;"	m	class:Minor
minor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^MatrixBase<Derived>::minor(Index row, Index col) const$/;"	f	class:MatrixBase
minor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^MatrixBase<Derived>::minor(Index row, Index col)$/;"	f	class:MatrixBase
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^    inline Index rows() const { return m_matrix.rows() - 1; }$/;"	f	class:Minor
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/Minor.h	/^struct traits<Minor<MatrixType> >$/;"	s	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/QR.h	/^    typedef HouseholderQR<MatrixType> Base;$/;"	t	class:QR
EIGEN2_QR_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/QR.h	27;"	d
MatrixRBlockType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/QR.h	/^    typedef Block<const MatrixType, MatrixType::ColsAtCompileTime, MatrixType::ColsAtCompileTime> MatrixRBlockType;$/;"	t	class:QR
QR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/QR.h	/^    QR() : Base() {}$/;"	f	class:QR
QR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/QR.h	/^    explicit QR(const T& t) : Base(t) {}$/;"	f	class:QR
QR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/QR.h	/^class QR : public HouseholderQR<MatrixType>$/;"	c
isFullRank	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/QR.h	/^    bool isFullRank() const {$/;"	f	class:QR
matrixQ	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/QR.h	/^    MatrixType matrixQ(void) const {$/;"	f	class:QR
matrixR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/QR.h	/^    matrixR(void) const$/;"	f	class:QR
qr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/QR.h	/^MatrixBase<Derived>::qr() const$/;"	f	class:MatrixBase
solve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/QR.h	/^    bool solve(const MatrixBase<OtherDerived>& b, ResultType *result) const$/;"	f	class:QR
AlignmentMask	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^      AlignmentMask = int(PacketSize)-1,$/;"	e	enum:SVD::<anonymous>
ColVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^    typedef Matrix<Scalar, MatrixType::RowsAtCompileTime, 1> ColVector;$/;"	t	class:SVD
EIGEN2_SVD_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	26;"	d
MatrixUType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^    typedef Matrix<Scalar, MatrixType::RowsAtCompileTime, MinSize> MatrixUType;$/;"	t	class:SVD
MatrixVType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^    typedef Matrix<Scalar, MatrixType::ColsAtCompileTime, MatrixType::ColsAtCompileTime> MatrixVType;$/;"	t	class:SVD
MinSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^      MinSize = EIGEN_SIZE_MIN_PREFER_DYNAMIC(MatrixType::RowsAtCompileTime, MatrixType::ColsAtCompileTime)$/;"	e	enum:SVD::<anonymous>
PacketSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^      PacketSize = internal::packet_traits<Scalar>::size,$/;"	e	enum:SVD::<anonymous>
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^    typedef typename NumTraits<typename MatrixType::Scalar>::Real RealScalar;$/;"	t	class:SVD
RowVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^    typedef Matrix<Scalar, MatrixType::ColsAtCompileTime, 1> RowVector;$/;"	t	class:SVD
SVD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^    SVD() {} \/\/ a user who relied on compiler-generated default compiler reported problems with MSVC in 2.0.7$/;"	f	class:SVD
SVD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^    SVD(const MatrixType& matrix)$/;"	f	class:SVD
SVD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^template<typename MatrixType> class SVD$/;"	c
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:SVD
SingularValuesType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^    typedef Matrix<Scalar, MinSize, 1> SingularValuesType;$/;"	t	class:SVD
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^void SVD<MatrixType>::compute(const MatrixType& matrix)$/;"	f	class:SVD
computePositiveUnitary	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^void SVD<MatrixType>::computePositiveUnitary(UnitaryType *positive,$/;"	f	class:SVD
computeRotationScaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^void SVD<MatrixType>::computeRotationScaling(RotationType *rotation, ScalingType *scaling) const$/;"	f	class:SVD
computeScalingRotation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^void SVD<MatrixType>::computeScalingRotation(ScalingType *scaling, RotationType *rotation) const$/;"	f	class:SVD
computeUnitaryPositive	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^void SVD<MatrixType>::computeUnitaryPositive(UnitaryType *unitary,$/;"	f	class:SVD
m_matU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^    MatrixUType m_matU;$/;"	m	class:SVD
m_matV	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^    MatrixVType m_matV;$/;"	m	class:SVD
m_sigma	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^    SingularValuesType m_sigma;$/;"	m	class:SVD
matrixU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^    const MatrixUType& matrixU() const { return m_matU; }$/;"	f	class:SVD
matrixV	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^    const MatrixVType& matrixV() const { return m_matV; }$/;"	f	class:SVD
singularValues	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^    const SingularValuesType& singularValues() const { return m_sigma; }$/;"	f	class:SVD
solve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^bool SVD<MatrixType>::solve(const MatrixBase<OtherDerived> &b, ResultType* result) const$/;"	f	class:SVD
sort	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^SVD<MatrixType>& SVD<MatrixType>::sort()$/;"	f	class:SVD
svd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/SVD.h	/^MatrixBase<Derived>::svd() const$/;"	f	class:MatrixBase
EIGEN_TRIANGULAR_SOLVER2_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/TriangularSolver.h	26;"	d
LowerTriangular	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/TriangularSolver.h	/^const unsigned int LowerTriangular = Lower;$/;"	v
LowerTriangularBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/TriangularSolver.h	/^const unsigned int LowerTriangularBit = Lower;$/;"	v
SelfAdjointBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/TriangularSolver.h	/^const unsigned int SelfAdjointBit = SelfAdjoint;$/;"	v
UnitDiagBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/TriangularSolver.h	/^const unsigned int UnitDiagBit = UnitDiag;$/;"	v
UnitLowerTriangular	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/TriangularSolver.h	/^const unsigned int UnitLowerTriangular = UnitLower;$/;"	v
UnitUpperTriangular	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/TriangularSolver.h	/^const unsigned int UnitUpperTriangular = UnitUpper;$/;"	v
UpperTriangular	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/TriangularSolver.h	/^const unsigned int UpperTriangular = Upper;$/;"	v
UpperTriangularBit	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/TriangularSolver.h	/^const unsigned int UpperTriangularBit = Upper;$/;"	v
solveTriangular	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/TriangularSolver.h	/^Flagged<ExpressionType,Added,Removed>::solveTriangular(const MatrixBase<OtherDerived>& other) const$/;"	f	class:Flagged
solveTriangularInPlace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/TriangularSolver.h	/^void Flagged<ExpressionType,Added,Removed>::solveTriangularInPlace(const MatrixBase<OtherDerived>& other) const$/;"	f	class:Flagged
EIGEN2_VECTORBLOCK_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/VectorBlock.h	27;"	d
end	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/VectorBlock.h	/^MatrixBase<Derived>::end() const$/;"	f	class:MatrixBase
end	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/VectorBlock.h	/^MatrixBase<Derived>::end()$/;"	f	class:MatrixBase
end	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/VectorBlock.h	/^MatrixBase<Derived>::end(Index size) const$/;"	f	class:MatrixBase
end	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/VectorBlock.h	/^MatrixBase<Derived>::end(Index size)$/;"	f	class:MatrixBase
start	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/VectorBlock.h	/^MatrixBase<Derived>::start() const$/;"	f	class:MatrixBase
start	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/VectorBlock.h	/^MatrixBase<Derived>::start()$/;"	f	class:MatrixBase
start	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/VectorBlock.h	/^MatrixBase<Derived>::start(Index size) const$/;"	f	class:MatrixBase
start	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigen2Support/VectorBlock.h	/^MatrixBase<Derived>::start(Index size)$/;"	f	class:MatrixBase
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:ComplexEigenSolver::<anonymous>
ComplexEigenSolver	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^      ComplexEigenSolver(const MatrixType& matrix, bool computeEigenvectors = true)$/;"	f	class:ComplexEigenSolver
ComplexEigenSolver	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    ComplexEigenSolver()$/;"	f	class:ComplexEigenSolver
ComplexEigenSolver	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    ComplexEigenSolver(Index size)$/;"	f	class:ComplexEigenSolver
ComplexEigenSolver	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^template<typename _MatrixType> class ComplexEigenSolver$/;"	c
ComplexScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    typedef std::complex<RealScalar> ComplexScalar;$/;"	t	class:ComplexEigenSolver
EIGEN_COMPLEX_EIGEN_SOLVER_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	28;"	d
EigenvalueType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    typedef Matrix<ComplexScalar, ColsAtCompileTime, 1, Options&(~RowMajor), MaxColsAtCompileTime, 1> EigenvalueType;$/;"	t	class:ComplexEigenSolver
EigenvectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    typedef Matrix<ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime> EigenvectorType;$/;"	t	class:ComplexEigenSolver
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:ComplexEigenSolver
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:ComplexEigenSolver
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:ComplexEigenSolver::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:ComplexEigenSolver::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^      Options = MatrixType::Options,$/;"	e	enum:ComplexEigenSolver::<anonymous>
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:ComplexEigenSolver
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:ComplexEigenSolver::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:ComplexEigenSolver
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^ComplexEigenSolver<MatrixType>& ComplexEigenSolver<MatrixType>::compute(const MatrixType& matrix, bool computeEigenvectors)$/;"	f	class:ComplexEigenSolver
doComputeEigenvectors	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^void ComplexEigenSolver<MatrixType>::doComputeEigenvectors(RealScalar matrixnorm)$/;"	f	class:ComplexEigenSolver
eigenvalues	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    const EigenvalueType& eigenvalues() const$/;"	f	class:ComplexEigenSolver
eigenvectors	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    const EigenvectorType& eigenvectors() const$/;"	f	class:ComplexEigenSolver
info	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    ComputationInfo info() const$/;"	f	class:ComplexEigenSolver
m_eigenvectorsOk	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    bool m_eigenvectorsOk;$/;"	m	class:ComplexEigenSolver
m_eivalues	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    EigenvalueType m_eivalues;$/;"	m	class:ComplexEigenSolver
m_eivec	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    EigenvectorType m_eivec;$/;"	m	class:ComplexEigenSolver
m_isInitialized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    bool m_isInitialized;$/;"	m	class:ComplexEigenSolver
m_matX	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    EigenvectorType m_matX;$/;"	m	class:ComplexEigenSolver
m_schur	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^    ComplexSchur<MatrixType> m_schur;$/;"	m	class:ComplexEigenSolver
sortEigenvalues	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexEigenSolver.h	/^void ComplexEigenSolver<MatrixType>::sortEigenvalues(bool computeEigenvectors)$/;"	f	class:ComplexEigenSolver
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:ComplexSchur::<anonymous>
ComplexMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^    typedef Matrix<ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime> ComplexMatrixType;$/;"	t	class:ComplexSchur
ComplexScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^    typedef std::complex<RealScalar> ComplexScalar;$/;"	t	class:ComplexSchur
ComplexSchur	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^    ComplexSchur(Index size = RowsAtCompileTime==Dynamic ? 1 : RowsAtCompileTime)$/;"	f	class:ComplexSchur
ComplexSchur	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^    ComplexSchur(const MatrixType& matrix, bool computeU = true)$/;"	f	class:ComplexSchur
ComplexSchur	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^template<typename _MatrixType> class ComplexSchur$/;"	c
EIGEN_COMPLEX_SCHUR_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	28;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:ComplexSchur
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:ComplexSchur
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:ComplexSchur::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:ComplexSchur::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^      Options = MatrixType::Options,$/;"	e	enum:ComplexSchur::<anonymous>
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:ComplexSchur
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:ComplexSchur::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:ComplexSchur
complex_schur_reduce_to_hessenberg	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^struct complex_schur_reduce_to_hessenberg$/;"	s	namespace:internal
complex_schur_reduce_to_hessenberg	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^struct complex_schur_reduce_to_hessenberg<MatrixType, false>$/;"	s	namespace:internal
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^ComplexSchur<MatrixType>& ComplexSchur<MatrixType>::compute(const MatrixType& matrix, bool computeU)$/;"	f	class:ComplexSchur
computeShift	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^typename ComplexSchur<MatrixType>::ComplexScalar ComplexSchur<MatrixType>::computeShift(Index iu, Index iter)$/;"	f	class:ComplexSchur
info	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^    ComputationInfo info() const$/;"	f	class:ComplexSchur
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^namespace internal {$/;"	n
m_hess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^    HessenbergDecomposition<MatrixType> m_hess;$/;"	m	class:ComplexSchur
m_info	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^    ComputationInfo m_info;$/;"	m	class:ComplexSchur
m_isInitialized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^    bool m_isInitialized;$/;"	m	class:ComplexSchur
m_matT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^    ComplexMatrixType m_matT, m_matU;$/;"	m	class:ComplexSchur
m_matU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^    ComplexMatrixType m_matT, m_matU;$/;"	m	class:ComplexSchur
m_matUisUptodate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^    bool m_matUisUptodate;$/;"	m	class:ComplexSchur
m_maxIterations	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^    static const int m_maxIterations = 30;$/;"	m	class:ComplexSchur
matrixT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^    const ComplexMatrixType& matrixT() const$/;"	f	class:ComplexSchur
matrixU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^    const ComplexMatrixType& matrixU() const$/;"	f	class:ComplexSchur
reduceToTriangularForm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^void ComplexSchur<MatrixType>::reduceToTriangularForm(bool computeU)$/;"	f	class:ComplexSchur
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^  static void run(ComplexSchur<MatrixType>& _this, const MatrixType& matrix, bool computeU)$/;"	f	struct:internal::complex_schur_reduce_to_hessenberg
sqrt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^std::complex<RealScalar> sqrt(const std::complex<RealScalar> &z)$/;"	f	namespace:internal
subdiagonalEntryIsNeglegible	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/ComplexSchur.h	/^inline bool ComplexSchur<MatrixType>::subdiagonalEntryIsNeglegible(Index i)$/;"	f	class:ComplexSchur
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:EigenSolver::<anonymous>
ColumnVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    typedef Matrix<Scalar, ColsAtCompileTime, 1, Options & ~RowMajor, MaxColsAtCompileTime, 1> ColumnVectorType;$/;"	t	class:EigenSolver
ComplexScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    typedef std::complex<RealScalar> ComplexScalar;$/;"	t	class:EigenSolver
EIGEN_EIGENSOLVER_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	27;"	d
EigenSolver	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    EigenSolver(Index size)$/;"	f	class:EigenSolver
EigenSolver	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    EigenSolver(const MatrixType& matrix, bool computeEigenvectors = true)$/;"	f	class:EigenSolver
EigenSolver	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^ EigenSolver() : m_eivec(), m_eivalues(), m_isInitialized(false), m_realSchur(), m_matT(), m_tmp() {}$/;"	f	class:EigenSolver
EigenSolver	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^template<typename _MatrixType> class EigenSolver$/;"	c
EigenvalueType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    typedef Matrix<ComplexScalar, ColsAtCompileTime, 1, Options & ~RowMajor, MaxColsAtCompileTime, 1> EigenvalueType;$/;"	t	class:EigenSolver
EigenvectorsType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    typedef Matrix<ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime> EigenvectorsType;$/;"	t	class:EigenSolver
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:EigenSolver
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:EigenSolver
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:EigenSolver::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:EigenSolver::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^      Options = MatrixType::Options,$/;"	e	enum:EigenSolver::<anonymous>
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:EigenSolver
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:EigenSolver::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:EigenSolver
cdiv	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^std::complex<Scalar> cdiv(Scalar xr, Scalar xi, Scalar yr, Scalar yi)$/;"	f
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^EigenSolver<MatrixType>& EigenSolver<MatrixType>::compute(const MatrixType& matrix, bool computeEigenvectors)$/;"	f	class:EigenSolver
doComputeEigenvectors	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^void EigenSolver<MatrixType>::doComputeEigenvectors()$/;"	f	class:EigenSolver
eigenvalues	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    const EigenvalueType& eigenvalues() const$/;"	f	class:EigenSolver
eigenvectors	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^typename EigenSolver<MatrixType>::EigenvectorsType EigenSolver<MatrixType>::eigenvectors() const$/;"	f	class:EigenSolver
info	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    ComputationInfo info() const$/;"	f	class:EigenSolver
m_eigenvectorsOk	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    bool m_eigenvectorsOk;$/;"	m	class:EigenSolver
m_eivalues	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    EigenvalueType m_eivalues;$/;"	m	class:EigenSolver
m_eivec	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    MatrixType m_eivec;$/;"	m	class:EigenSolver
m_isInitialized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    bool m_isInitialized;$/;"	m	class:EigenSolver
m_matT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    MatrixType m_matT;$/;"	m	class:EigenSolver
m_realSchur	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    RealSchur<MatrixType> m_realSchur;$/;"	m	class:EigenSolver
m_tmp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    ColumnVectorType m_tmp;$/;"	m	class:EigenSolver
pseudoEigenvalueMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^MatrixType EigenSolver<MatrixType>::pseudoEigenvalueMatrix() const$/;"	f	class:EigenSolver
pseudoEigenvectors	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenSolver.h	/^    const MatrixType& pseudoEigenvectors() const$/;"	f	class:EigenSolver
EIGEN_EIGENVALUES_COMMON_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/EigenvaluesCommon.h	26;"	d
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h	/^    typedef SelfAdjointEigenSolver<_MatrixType> Base;$/;"	t	class:GeneralizedSelfAdjointEigenSolver
EIGEN_GENERALIZEDSELFADJOINTEIGENSOLVER_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h	27;"	d
GeneralizedSelfAdjointEigenSolver	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h	/^    GeneralizedSelfAdjointEigenSolver() : Base() {}$/;"	f	class:GeneralizedSelfAdjointEigenSolver
GeneralizedSelfAdjointEigenSolver	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h	/^    GeneralizedSelfAdjointEigenSolver(Index size)$/;"	f	class:GeneralizedSelfAdjointEigenSolver
GeneralizedSelfAdjointEigenSolver	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h	/^    GeneralizedSelfAdjointEigenSolver(const MatrixType& matA, const MatrixType& matB,$/;"	f	class:GeneralizedSelfAdjointEigenSolver
GeneralizedSelfAdjointEigenSolver	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h	/^class GeneralizedSelfAdjointEigenSolver : public SelfAdjointEigenSolver<_MatrixType>$/;"	c
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h	/^    typedef typename Base::Index Index;$/;"	t	class:GeneralizedSelfAdjointEigenSolver
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:GeneralizedSelfAdjointEigenSolver
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/GeneralizedSelfAdjointEigenSolver.h	/^compute(const MatrixType& matA, const MatrixType& matB, int options)$/;"	f	class:GeneralizedSelfAdjointEigenSolver
CoeffVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    typedef Matrix<Scalar, SizeMinusOne, 1, Options & ~RowMajor, MaxSizeMinusOne, 1> CoeffVectorType;$/;"	t	class:HessenbergDecomposition
EIGEN_HESSENBERGDECOMPOSITION_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	27;"	d
HessenbergDecomposition	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    HessenbergDecomposition(Index size = Size==Dynamic ? 2 : Size)$/;"	f	class:HessenbergDecomposition
HessenbergDecomposition	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    HessenbergDecomposition(const MatrixType& matrix)$/;"	f	class:HessenbergDecomposition
HessenbergDecomposition	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^template<typename _MatrixType> class HessenbergDecomposition$/;"	c
HessenbergDecompositionMatrixHReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    HessenbergDecompositionMatrixHReturnType(const HessenbergDecomposition<MatrixType>& hess) : m_hess(hess) { }$/;"	f	struct:internal::HessenbergDecompositionMatrixHReturnType
HessenbergDecompositionMatrixHReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^template<typename MatrixType> struct HessenbergDecompositionMatrixHReturnType$/;"	s	namespace:internal
HouseholderSequenceType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    typedef typename HouseholderSequence<MatrixType,CoeffVectorType>::ConjugateReturnType HouseholderSequenceType;$/;"	t	class:HessenbergDecomposition
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:HessenbergDecomposition
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    typedef typename MatrixType::Index Index;$/;"	t	struct:internal::HessenbergDecompositionMatrixHReturnType
MatrixHReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    typedef internal::HessenbergDecompositionMatrixHReturnType<MatrixType> MatrixHReturnType;$/;"	t	class:HessenbergDecomposition
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:HessenbergDecomposition
MaxSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^      MaxSize = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:HessenbergDecomposition::<anonymous>
MaxSizeMinusOne	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^      MaxSizeMinusOne = MaxSize == Dynamic ? Dynamic : MaxSize - 1$/;"	e	enum:HessenbergDecomposition::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^      Options = MatrixType::Options,$/;"	e	enum:HessenbergDecomposition::<anonymous>
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:HessenbergDecomposition
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^  typedef MatrixType ReturnType;$/;"	t	struct:internal::traits
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:HessenbergDecomposition
Size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^      Size = MatrixType::RowsAtCompileTime,$/;"	e	enum:HessenbergDecomposition::<anonymous>
SizeMinusOne	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^      SizeMinusOne = Size == Dynamic ? Dynamic : Size - 1,$/;"	e	enum:HessenbergDecomposition::<anonymous>
VectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    typedef Matrix<Scalar, 1, Size, Options | RowMajor, 1, MaxSize> VectorType;$/;"	t	class:HessenbergDecomposition
_compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^void HessenbergDecomposition<MatrixType>::_compute(MatrixType& matA, CoeffVectorType& hCoeffs, VectorType& temp)$/;"	f	class:HessenbergDecomposition
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    Index cols() const { return m_hess.packedMatrix().cols(); }$/;"	f	struct:internal::HessenbergDecompositionMatrixHReturnType
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    HessenbergDecomposition& compute(const MatrixType& matrix)$/;"	f	class:HessenbergDecomposition
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    inline void evalTo(ResultType& result) const$/;"	f	struct:internal::HessenbergDecompositionMatrixHReturnType
householderCoefficients	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    const CoeffVectorType& householderCoefficients() const$/;"	f	class:HessenbergDecomposition
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^namespace internal {$/;"	n
m_hCoeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    CoeffVectorType m_hCoeffs;$/;"	m	class:HessenbergDecomposition
m_hess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    const HessenbergDecomposition<MatrixType>& m_hess;$/;"	m	struct:internal::HessenbergDecompositionMatrixHReturnType
m_isInitialized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    bool m_isInitialized;$/;"	m	class:HessenbergDecomposition
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    MatrixType m_matrix;$/;"	m	class:HessenbergDecomposition
m_temp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    VectorType m_temp;$/;"	m	class:HessenbergDecomposition
matrixH	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    MatrixHReturnType matrixH() const$/;"	f	class:HessenbergDecomposition
matrixQ	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    HouseholderSequenceType matrixQ() const$/;"	f	class:HessenbergDecomposition
packedMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    const MatrixType& packedMatrix() const$/;"	f	class:HessenbergDecomposition
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^    Index rows() const { return m_hess.packedMatrix().rows(); }$/;"	f	struct:internal::HessenbergDecompositionMatrixHReturnType
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/HessenbergDecomposition.h	/^struct traits<HessenbergDecompositionMatrixHReturnType<MatrixType> >$/;"	s	namespace:internal
EIGEN_MATRIXBASEEIGENVALUES_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h	27;"	d
eigenvalues	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h	/^MatrixBase<Derived>::eigenvalues() const$/;"	f	class:MatrixBase
eigenvalues	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h	/^SelfAdjointView<MatrixType, UpLo>::eigenvalues() const$/;"	f	class:SelfAdjointView
eigenvalues_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h	/^struct eigenvalues_selector$/;"	s	namespace:internal
eigenvalues_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h	/^struct eigenvalues_selector<Derived, false>$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h	/^namespace internal {$/;"	n
operatorNorm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h	/^MatrixBase<Derived>::operatorNorm() const$/;"	f	class:MatrixBase
operatorNorm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h	/^SelfAdjointView<MatrixType, UpLo>::operatorNorm() const$/;"	f	class:SelfAdjointView
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h	/^  run(const MatrixBase<Derived>& m)$/;"	f	class:internal::eigenvalues_selector::MatrixBase
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:RealSchur::<anonymous>
ColumnVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    typedef Matrix<Scalar, ColsAtCompileTime, 1, Options & ~RowMajor, MaxColsAtCompileTime, 1> ColumnVectorType;$/;"	t	class:RealSchur
ComplexScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    typedef std::complex<typename NumTraits<Scalar>::Real> ComplexScalar;$/;"	t	class:RealSchur
EIGEN_REAL_SCHUR_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	27;"	d
EigenvalueType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    typedef Matrix<ComplexScalar, ColsAtCompileTime, 1, Options & ~RowMajor, MaxColsAtCompileTime, 1> EigenvalueType;$/;"	t	class:RealSchur
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:RealSchur
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:RealSchur
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:RealSchur::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:RealSchur::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^      Options = MatrixType::Options,$/;"	e	enum:RealSchur::<anonymous>
RealSchur	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    RealSchur(Index size = RowsAtCompileTime==Dynamic ? 1 : RowsAtCompileTime)$/;"	f	class:RealSchur
RealSchur	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    RealSchur(const MatrixType& matrix, bool computeU = true)$/;"	f	class:RealSchur
RealSchur	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^template<typename _MatrixType> class RealSchur$/;"	c
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:RealSchur::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:RealSchur
Vector3s	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    typedef Matrix<Scalar,3,1> Vector3s;$/;"	t	class:RealSchur
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^RealSchur<MatrixType>& RealSchur<MatrixType>::compute(const MatrixType& matrix, bool computeU)$/;"	f	class:RealSchur
computeNormOfT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^inline typename MatrixType::Scalar RealSchur<MatrixType>::computeNormOfT()$/;"	f	class:RealSchur
computeShift	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^inline void RealSchur<MatrixType>::computeShift(Index iu, Index iter, Scalar& exshift, Vector3s& shiftInfo)$/;"	f	class:RealSchur
findSmallSubdiagEntry	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^inline typename MatrixType::Index RealSchur<MatrixType>::findSmallSubdiagEntry(Index iu, Scalar norm)$/;"	f	class:RealSchur
info	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    ComputationInfo info() const$/;"	f	class:RealSchur
initFrancisQRStep	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^inline void RealSchur<MatrixType>::initFrancisQRStep(Index il, Index iu, const Vector3s& shiftInfo, Index& im, Vector3s& firstHouseholderVector)$/;"	f	class:RealSchur
m_hess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    HessenbergDecomposition<MatrixType> m_hess;$/;"	m	class:RealSchur
m_info	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    ComputationInfo m_info;$/;"	m	class:RealSchur
m_isInitialized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    bool m_isInitialized;$/;"	m	class:RealSchur
m_matT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    MatrixType m_matT;$/;"	m	class:RealSchur
m_matU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    MatrixType m_matU;$/;"	m	class:RealSchur
m_matUisUptodate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    bool m_matUisUptodate;$/;"	m	class:RealSchur
m_maxIterations	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    static const int m_maxIterations = 40;$/;"	m	class:RealSchur
m_workspaceVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    ColumnVectorType m_workspaceVector;$/;"	m	class:RealSchur
matrixT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    const MatrixType& matrixT() const$/;"	f	class:RealSchur
matrixU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^    const MatrixType& matrixU() const$/;"	f	class:RealSchur
performFrancisQRStep	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^inline void RealSchur<MatrixType>::performFrancisQRStep(Index il, Index im, Index iu, bool computeU, const Vector3s& firstHouseholderVector, Scalar* workspace)$/;"	f	class:RealSchur
splitOffTwoRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/RealSchur.h	/^inline void RealSchur<MatrixType>::splitOffTwoRows(Index iu, bool computeU, Scalar exshift)$/;"	f	class:RealSchur
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:SelfAdjointEigenSolver::<anonymous>
EIGEN_SELFADJOINTEIGENSOLVER_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	27;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:SelfAdjointEigenSolver
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:SelfAdjointEigenSolver
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:SelfAdjointEigenSolver::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^      Options = MatrixType::Options,$/;"	e	enum:SelfAdjointEigenSolver::<anonymous>
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:SelfAdjointEigenSolver
RealVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    typedef typename internal::plain_col_type<MatrixType, RealScalar>::type RealVectorType;$/;"	t	class:SelfAdjointEigenSolver
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:SelfAdjointEigenSolver
SelfAdjointEigenSolver	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    SelfAdjointEigenSolver()$/;"	f	class:SelfAdjointEigenSolver
SelfAdjointEigenSolver	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    SelfAdjointEigenSolver(Index size)$/;"	f	class:SelfAdjointEigenSolver
SelfAdjointEigenSolver	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    SelfAdjointEigenSolver(const MatrixType& matA, const MatrixType& matB, bool computeEigenvectors = true)$/;"	f	class:SelfAdjointEigenSolver
SelfAdjointEigenSolver	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    SelfAdjointEigenSolver(const MatrixType& matrix, bool computeEigenvectors)$/;"	f	class:SelfAdjointEigenSolver
SelfAdjointEigenSolver	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    SelfAdjointEigenSolver(const MatrixType& matrix, int options = ComputeEigenvectors)$/;"	f	class:SelfAdjointEigenSolver
SelfAdjointEigenSolver	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^template<typename _MatrixType> class SelfAdjointEigenSolver$/;"	c
Size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^      Size = MatrixType::RowsAtCompileTime,$/;"	e	enum:SelfAdjointEigenSolver::<anonymous>
TridiagonalizationType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    typedef Tridiagonalization<MatrixType> TridiagonalizationType;$/;"	t	class:SelfAdjointEigenSolver
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    void compute(const MatrixType& matA, const MatrixType& matB, bool computeEigenvectors = true)$/;"	f	class:SelfAdjointEigenSolver
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    void compute(const MatrixType& matrix, bool computeEigenvectors)$/;"	f	class:SelfAdjointEigenSolver
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^::compute(const MatrixType& matrix, int options)$/;"	f	class:SelfAdjointEigenSolver
eigenvalues	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    const RealVectorType& eigenvalues() const$/;"	f	class:SelfAdjointEigenSolver
eigenvectors	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    const MatrixType& eigenvectors() const$/;"	f	class:SelfAdjointEigenSolver
info	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    ComputationInfo info() const$/;"	f	class:SelfAdjointEigenSolver
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^namespace internal {$/;"	n
m_eigenvectorsOk	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    bool m_eigenvectorsOk;$/;"	m	class:SelfAdjointEigenSolver
m_eivalues	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    RealVectorType m_eivalues;$/;"	m	class:SelfAdjointEigenSolver
m_eivec	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    MatrixType m_eivec;$/;"	m	class:SelfAdjointEigenSolver
m_info	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    ComputationInfo m_info;$/;"	m	class:SelfAdjointEigenSolver
m_isInitialized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    bool m_isInitialized;$/;"	m	class:SelfAdjointEigenSolver
m_maxIterations	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    static const int m_maxIterations = 30;$/;"	m	class:SelfAdjointEigenSolver
m_subdiag	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    typename TridiagonalizationType::SubDiagonalType m_subdiag;$/;"	m	class:SelfAdjointEigenSolver
operatorInverseSqrt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    MatrixType operatorInverseSqrt() const$/;"	f	class:SelfAdjointEigenSolver
operatorSqrt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^    MatrixType operatorSqrt() const$/;"	f	class:SelfAdjointEigenSolver
tridiagonal_qr_step	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/SelfAdjointEigenSolver.h	/^static void tridiagonal_qr_step(RealScalar* diag, RealScalar* subdiag, Index start, Index end, Scalar* matrixQ, Index n)$/;"	f	namespace:internal
CoeffVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef Matrix<Scalar, SizeMinusOne, 1, Options & ~RowMajor, MaxSizeMinusOne, 1> CoeffVectorType;$/;"	t	class:Tridiagonalization
CoeffVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^  typedef typename Tridiagonalization<MatrixType>::CoeffVectorType CoeffVectorType;$/;"	t	struct:internal::tridiagonalization_inplace_selector
DiagonalReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^            >::type DiagonalReturnType;$/;"	t	class:Tridiagonalization
DiagonalType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef typename internal::plain_col_type<MatrixType, RealScalar>::type DiagonalType;$/;"	t	class:Tridiagonalization
EIGEN_TRIDIAGONALIZATION_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	27;"	d
HouseholderSequenceType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef typename HouseholderSequence<MatrixType,CoeffVectorType>::ConjugateReturnType HouseholderSequenceType;$/;"	t	class:Tridiagonalization
HouseholderSequenceType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^  typedef typename Tridiagonalization<MatrixType>::HouseholderSequenceType HouseholderSequenceType;$/;"	t	struct:internal::tridiagonalization_inplace_selector
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:Tridiagonalization
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef typename MatrixType::Index Index;$/;"	t	struct:internal::TridiagonalizationMatrixTReturnType
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^  typedef typename MatrixType::Index Index;$/;"	t	struct:internal::tridiagonalization_inplace_selector
MatrixTReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef internal::TridiagonalizationMatrixTReturnType<MatrixTypeRealView> MatrixTReturnType;$/;"	t	class:Tridiagonalization
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:Tridiagonalization
MatrixTypeRealView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef typename internal::remove_all<typename MatrixType::RealReturnType>::type MatrixTypeRealView;$/;"	t	class:Tridiagonalization
MaxSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^      MaxSize = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:Tridiagonalization::<anonymous>
MaxSizeMinusOne	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^      MaxSizeMinusOne = MaxSize == Dynamic ? Dynamic : (MaxSize > 1 ? MaxSize - 1 : 1)$/;"	e	enum:Tridiagonalization::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^      Options = MatrixType::Options,$/;"	e	enum:Tridiagonalization::<anonymous>
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Tridiagonalization
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^  typedef typename MatrixType::RealScalar RealScalar;$/;"	t	struct:internal::tridiagonalization_inplace_selector
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^  typedef typename MatrixType::PlainObject ReturnType;$/;"	t	struct:internal::traits
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:Tridiagonalization
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^  typedef typename MatrixType::Scalar Scalar;$/;"	t	struct:internal::tridiagonalization_inplace_selector
Size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^      Size = MatrixType::RowsAtCompileTime,$/;"	e	enum:Tridiagonalization::<anonymous>
SizeMinusOne	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^      SizeMinusOne = Size == Dynamic ? Dynamic : (Size > 1 ? Size - 1 : 1),$/;"	e	enum:Tridiagonalization::<anonymous>
SubDiagonalReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^            >::type SubDiagonalReturnType;$/;"	t	class:Tridiagonalization
SubDiagonalType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    typedef Matrix<RealScalar, SizeMinusOne, 1, Options & ~RowMajor, MaxSizeMinusOne, 1> SubDiagonalType;$/;"	t	class:Tridiagonalization
Tridiagonalization	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    Tridiagonalization(Index size = Size==Dynamic ? 2 : Size)$/;"	f	class:Tridiagonalization
Tridiagonalization	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    Tridiagonalization(const MatrixType& matrix)$/;"	f	class:Tridiagonalization
Tridiagonalization	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^template<typename _MatrixType> class Tridiagonalization$/;"	c
TridiagonalizationMatrixTReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    TridiagonalizationMatrixTReturnType(const MatrixType& mat) : m_matrix(mat) { }$/;"	f	struct:internal::TridiagonalizationMatrixTReturnType
TridiagonalizationMatrixTReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^template<typename MatrixType> struct TridiagonalizationMatrixTReturnType$/;"	s	namespace:internal
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    Index cols() const { return m_matrix.cols(); }$/;"	f	struct:internal::TridiagonalizationMatrixTReturnType
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    Tridiagonalization& compute(const MatrixType& matrix)$/;"	f	class:Tridiagonalization
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^Tridiagonalization<MatrixType>::diagonal() const$/;"	f	class:Tridiagonalization
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    inline void evalTo(ResultType& result) const$/;"	f	struct:internal::TridiagonalizationMatrixTReturnType
householderCoefficients	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    inline CoeffVectorType householderCoefficients() const$/;"	f	class:Tridiagonalization
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^namespace internal {$/;"	n
m_hCoeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    CoeffVectorType m_hCoeffs;$/;"	m	class:Tridiagonalization
m_isInitialized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    bool m_isInitialized;$/;"	m	class:Tridiagonalization
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    MatrixType m_matrix;$/;"	m	class:Tridiagonalization
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    const typename MatrixType::Nested m_matrix;$/;"	m	struct:internal::TridiagonalizationMatrixTReturnType
matrixQ	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    HouseholderSequenceType matrixQ() const$/;"	f	class:Tridiagonalization
matrixT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    MatrixTReturnType matrixT() const$/;"	f	class:Tridiagonalization
packedMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    inline const MatrixType& packedMatrix() const$/;"	f	class:Tridiagonalization
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^    Index rows() const { return m_matrix.rows(); }$/;"	f	struct:internal::TridiagonalizationMatrixTReturnType
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^  static void run(MatrixType& mat, DiagonalType& diag, SubDiagonalType& subdiag, bool extractQ)$/;"	f	struct:internal::tridiagonalization_inplace_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^  static void run(MatrixType& mat, DiagonalType& diag, SubDiagonalType&, bool extractQ)$/;"	f	struct:internal::tridiagonalization_inplace_selector
subDiagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^Tridiagonalization<MatrixType>::subDiagonal() const$/;"	f	class:Tridiagonalization
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^struct traits<TridiagonalizationMatrixTReturnType<MatrixType> >$/;"	s	namespace:internal
tridiagonalization_inplace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^void tridiagonalization_inplace(MatrixType& mat, DiagonalType& diag, SubDiagonalType& subdiag, bool extractQ)$/;"	f	namespace:internal
tridiagonalization_inplace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^void tridiagonalization_inplace(MatrixType& matA, CoeffVectorType& hCoeffs)$/;"	f	namespace:internal
tridiagonalization_inplace_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^struct tridiagonalization_inplace_selector$/;"	s	namespace:internal
tridiagonalization_inplace_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^struct tridiagonalization_inplace_selector<MatrixType,1,IsComplex>$/;"	s	namespace:internal
tridiagonalization_inplace_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Eigenvalues/Tridiagonalization.h	/^struct tridiagonalization_inplace_selector<MatrixType,3,false>$/;"	s	namespace:internal
AlignedBox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline AlignedBox(const OtherVectorType1& _min, const OtherVectorType2& _max) : m_min(_min), m_max(_max) {}$/;"	f	class:AlignedBox
AlignedBox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline explicit AlignedBox()$/;"	f	class:AlignedBox
AlignedBox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline explicit AlignedBox(Index _dim) : m_min(_dim), m_max(_dim)$/;"	f	class:AlignedBox
AlignedBox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline explicit AlignedBox(const AlignedBox<OtherScalarType,AmbientDimAtCompileTime>& other)$/;"	f	class:AlignedBox
AlignedBox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline explicit AlignedBox(const MatrixBase<Derived>& a_p)$/;"	f	class:AlignedBox
AlignedBox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^class AlignedBox$/;"	c
AmbientDimAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  enum { AmbientDimAtCompileTime = _AmbientDim };$/;"	e	enum:AlignedBox::<anonymous>
BottomLeft	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^    BottomLeft=0, BottomRight=1,$/;"	e	enum:AlignedBox::CornerType
BottomLeftCeil	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^    BottomLeftCeil=4, BottomRightCeil=5,$/;"	e	enum:AlignedBox::CornerType
BottomLeftFloor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^    BottomLeftFloor=0, BottomRightFloor=1,$/;"	e	enum:AlignedBox::CornerType
BottomRight	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^    BottomLeft=0, BottomRight=1,$/;"	e	enum:AlignedBox::CornerType
BottomRightCeil	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^    BottomLeftCeil=4, BottomRightCeil=5,$/;"	e	enum:AlignedBox::CornerType
BottomRightFloor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^    BottomLeftFloor=0, BottomRightFloor=1,$/;"	e	enum:AlignedBox::CornerType
CornerType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  enum CornerType$/;"	g	class:AlignedBox
EIGEN_ALIGNEDBOX_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  typedef DenseIndex                                Index;$/;"	t	class:AlignedBox
Max	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^    Min=0, Max=1,$/;"	e	enum:AlignedBox::CornerType
Min	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^    Min=0, Max=1,$/;"	e	enum:AlignedBox::CornerType
NonInteger	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  typedef typename ScalarTraits::NonInteger      NonInteger;$/;"	t	class:AlignedBox
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  typedef typename ScalarTraits::Real               RealScalar;$/;"	t	class:AlignedBox
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  typedef _Scalar                                   Scalar;$/;"	t	class:AlignedBox
ScalarTraits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  typedef NumTraits<Scalar>                         ScalarTraits;$/;"	t	class:AlignedBox
TopLeft	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^    TopLeft=2, TopRight=3,$/;"	e	enum:AlignedBox::CornerType
TopLeftCeil	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^    TopLeftCeil=6, TopRightCeil=7$/;"	e	enum:AlignedBox::CornerType
TopLeftFloor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^    TopLeftFloor=2, TopRightFloor=3,$/;"	e	enum:AlignedBox::CornerType
TopRight	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^    TopLeft=2, TopRight=3,$/;"	e	enum:AlignedBox::CornerType
TopRightCeil	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^    TopLeftCeil=6, TopRightCeil=7$/;"	e	enum:AlignedBox::CornerType
TopRightFloor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^    TopLeftFloor=2, TopRightFloor=3,$/;"	e	enum:AlignedBox::CornerType
VectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  typedef Matrix<Scalar,AmbientDimAtCompileTime,1>  VectorType;$/;"	t	class:AlignedBox
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^           AlignedBox<NewScalarType,AmbientDimAtCompileTime> >::type cast() const$/;"	f	class:AlignedBox
center	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  center() const$/;"	f	class:AlignedBox
clamp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline AlignedBox& clamp(const AlignedBox& b)$/;"	f	class:AlignedBox
contains	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline bool contains(const AlignedBox& b) const$/;"	f	class:AlignedBox
contains	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline bool contains(const MatrixBase<Derived>& a_p) const$/;"	f	class:AlignedBox
corner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline VectorType corner(CornerType corner) const$/;"	f	class:AlignedBox
diagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline CwiseBinaryOp< internal::scalar_difference_op<Scalar>, const VectorType, const VectorType> diagonal() const$/;"	f	class:AlignedBox
dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline Index dim() const { return AmbientDimAtCompileTime==Dynamic ? m_min.size()-1 : Index(AmbientDimAtCompileTime); }$/;"	f	class:AlignedBox
extend	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline AlignedBox& extend(const AlignedBox& b)$/;"	f	class:AlignedBox
extend	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline AlignedBox& extend(const MatrixBase<Derived>& a_p)$/;"	f	class:AlignedBox
exteriorDistance	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline NonInteger exteriorDistance(const AlignedBox& b) const$/;"	f	class:AlignedBox
exteriorDistance	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline NonInteger exteriorDistance(const MatrixBase<Derived>& p) const$/;"	f	class:AlignedBox
intersection	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline AlignedBox intersection(const AlignedBox& b) const$/;"	f	class:AlignedBox
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  bool isApprox(const AlignedBox& other, RealScalar prec = ScalarTraits::dummy_precision()) const$/;"	f	class:AlignedBox
isEmpty	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline bool isEmpty() const { return (m_min.array() > m_max.array()).any(); }$/;"	f	class:AlignedBox
isNull	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline bool isNull() const { return isEmpty(); }$/;"	f	class:AlignedBox
m_max	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  VectorType m_min, m_max;$/;"	m	class:AlignedBox
m_min	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  VectorType m_min, m_max;$/;"	m	class:AlignedBox
max	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline VectorType& max() { return m_max; }$/;"	f	class:AlignedBox
max	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline const VectorType& max() const { return m_max; }$/;"	f	class:AlignedBox
merged	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline AlignedBox merged(const AlignedBox& b) const$/;"	f	class:AlignedBox
min	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline VectorType& min() { return m_min; }$/;"	f	class:AlignedBox
min	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline const VectorType& min() const { return m_min; }$/;"	f	class:AlignedBox
sample	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline VectorType sample() const$/;"	f	class:AlignedBox
setEmpty	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline void setEmpty()$/;"	f	class:AlignedBox
setNull	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline void setNull() { setEmpty(); }$/;"	f	class:AlignedBox
sizes	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline const CwiseBinaryOp< internal::scalar_difference_op<Scalar>, const VectorType, const VectorType> sizes() const$/;"	f	class:AlignedBox
squaredExteriorDistance	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^inline Scalar AlignedBox<Scalar,AmbientDim>::squaredExteriorDistance(const AlignedBox& b) const$/;"	f	class:AlignedBox
squaredExteriorDistance	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^inline Scalar AlignedBox<Scalar,AmbientDim>::squaredExteriorDistance(const MatrixBase<Derived>& a_p) const$/;"	f	class:AlignedBox
translate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline AlignedBox& translate(const MatrixBase<Derived>& a_t)$/;"	f	class:AlignedBox
volume	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  inline Scalar volume() const$/;"	f	class:AlignedBox
~AlignedBox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AlignedBox.h	/^  ~AlignedBox() {}$/;"	f	class:AlignedBox
AngleAxis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  AngleAxis() {}$/;"	f	class:AngleAxis
AngleAxis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  inline AngleAxis(Scalar angle, const MatrixBase<Derived>& axis) : m_axis(axis), m_angle(angle) {}$/;"	f	class:AngleAxis
AngleAxis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  inline explicit AngleAxis(const AngleAxis<OtherScalarType>& other)$/;"	f	class:AngleAxis
AngleAxis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  inline explicit AngleAxis(const MatrixBase<Derived>& m) { *this = m; }$/;"	f	class:AngleAxis
AngleAxis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  template<typename QuatDerived> inline explicit AngleAxis(const QuaternionBase<QuatDerived>& q) { *this = q; }$/;"	f	class:AngleAxis
AngleAxis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^class AngleAxis : public RotationBase<AngleAxis<_Scalar>,3>$/;"	c
AngleAxisd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^typedef AngleAxis<double> AngleAxisd;$/;"	t
AngleAxisf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^typedef AngleAxis<float> AngleAxisf;$/;"	t
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  typedef RotationBase<AngleAxis<_Scalar>,3> Base;$/;"	t	class:AngleAxis
Dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  enum { Dim = 3 };$/;"	e	enum:AngleAxis::<anonymous>
EIGEN_ANGLEAXIS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	26;"	d
Identity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  inline static const AngleAxis Identity() { return AngleAxis(0, Vector3::UnitX()); }$/;"	f	class:AngleAxis
Matrix3	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  typedef Matrix<Scalar,3,3> Matrix3;$/;"	t	class:AngleAxis
QuaternionType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  typedef Quaternion<Scalar> QuaternionType;$/;"	t	class:AngleAxis
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  typedef _Scalar Scalar;$/;"	t	class:AngleAxis
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  typedef _Scalar Scalar;$/;"	t	struct:internal::traits
Vector3	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  typedef Matrix<Scalar,3,1> Vector3;$/;"	t	class:AngleAxis
angle	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  Scalar angle() const { return m_angle; }$/;"	f	class:AngleAxis
angle	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  Scalar& angle() { return m_angle; }$/;"	f	class:AngleAxis
axis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  Vector3& axis() { return m_axis; }$/;"	f	class:AngleAxis
axis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  const Vector3& axis() const { return m_axis; }$/;"	f	class:AngleAxis
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  inline typename internal::cast_return_type<AngleAxis,AngleAxis<NewScalarType> >::type cast() const$/;"	f	class:AngleAxis
fromRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^AngleAxis<Scalar>& AngleAxis<Scalar>::fromRotationMatrix(const MatrixBase<Derived>& mat)$/;"	f	class:AngleAxis
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^namespace internal {$/;"	n
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  AngleAxis inverse() const$/;"	f	class:AngleAxis
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  bool isApprox(const AngleAxis& other, typename NumTraits<Scalar>::Real prec = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:AngleAxis
m_angle	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  Scalar m_angle;$/;"	m	class:AngleAxis
m_axis	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  Vector3 m_axis;$/;"	m	class:AngleAxis
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  friend inline QuaternionType operator* (const QuaternionType& a, const AngleAxis& b)$/;"	f	class:AngleAxis
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  inline QuaternionType operator* (const AngleAxis& other) const$/;"	f	class:AngleAxis
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^  inline QuaternionType operator* (const QuaternionType& other) const$/;"	f	class:AngleAxis
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^AngleAxis<Scalar>& AngleAxis<Scalar>::operator=(const MatrixBase<Derived>& mat)$/;"	f	class:AngleAxis
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^AngleAxis<Scalar>& AngleAxis<Scalar>::operator=(const QuaternionBase<QuatDerived>& q)$/;"	f	class:AngleAxis
toRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^AngleAxis<Scalar>::toRotationMatrix(void) const$/;"	f	class:AngleAxis
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/AngleAxis.h	/^template<typename _Scalar> struct traits<AngleAxis<_Scalar> >$/;"	s	namespace:internal
EIGEN_EULERANGLES_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/EulerAngles.h	26;"	d
eulerAngles	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/EulerAngles.h	/^MatrixBase<Derived>::eulerAngles(Index a0, Index a1, Index a2) const$/;"	f	class:MatrixBase
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^    typedef MatrixBase<Homogeneous> Base;$/;"	t	class:Homogeneous
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^    CoeffReadCost = _MatrixTypeNested::CoeffReadCost$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^    ColsAtCompileTime = Direction==Horizontal ? ColsPlusOne : MatrixType::ColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
ColsPlusOne	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^    ColsPlusOne = (MatrixType::ColsAtCompileTime != Dynamic) ?$/;"	e	enum:internal::traits::<anonymous>
Direction	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^    enum { Direction = _Direction };$/;"	e	enum:Homogeneous::<anonymous>
EIGEN_HOMOGENEOUS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	26;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^    Flags = ColsAtCompileTime==1 ? (TmpFlags & ~RowMajorBit)$/;"	e	enum:internal::traits::<anonymous>
Homogeneous	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^    inline Homogeneous(const MatrixType& matrix)$/;"	f	class:Homogeneous
Homogeneous	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^template<typename MatrixType,int _Direction> class Homogeneous$/;"	c
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename MatrixType::Index Index;$/;"	t	struct:internal::homogeneous_left_product_impl
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename MatrixType::Index Index;$/;"	t	struct:internal::homogeneous_right_product_impl
LhsMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename take_matrix_for_product<Lhs>::type LhsMatrixType;$/;"	t	struct:internal::traits
LhsMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename traits<homogeneous_left_product_impl>::LhsMatrixType LhsMatrixType;$/;"	t	struct:internal::homogeneous_left_product_impl
LhsMatrixTypeCleaned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename remove_all<LhsMatrixType>::type LhsMatrixTypeCleaned;$/;"	t	struct:internal::homogeneous_left_product_impl
LhsMatrixTypeCleaned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename remove_all<LhsMatrixType>::type LhsMatrixTypeCleaned;$/;"	t	struct:internal::traits
LhsMatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename remove_all<typename LhsMatrixTypeCleaned::Nested>::type LhsMatrixTypeNested;$/;"	t	struct:internal::homogeneous_left_product_impl
MatrixTypeCleaned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename remove_all<MatrixType>::type MatrixTypeCleaned;$/;"	t	struct:internal::traits
MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename nested<MatrixType>::type MatrixTypeNested;$/;"	t	struct:internal::traits
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^    MaxColsAtCompileTime = ColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^    MaxRowsAtCompileTime = RowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^                 MatrixTypeCleaned::MaxColsAtCompileTime>::type ReturnType;$/;"	t	struct:internal::traits
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^                 Rhs::MaxColsAtCompileTime>::type ReturnType;$/;"	t	struct:internal::traits
RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename remove_all<typename Rhs::Nested>::type RhsNested;$/;"	t	struct:internal::homogeneous_right_product_impl
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^    RowsAtCompileTime = Direction==Vertical  ?  RowsPlusOne : MatrixType::RowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
RowsPlusOne	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^    RowsPlusOne = (MatrixType::RowsAtCompileTime != Dynamic) ?$/;"	e	enum:internal::traits::<anonymous>
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename traits<MatrixType>::StorageKind StorageKind;$/;"	t	struct:internal::traits
TmpFlags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^    TmpFlags = _MatrixTypeNested::Flags & HereditaryBits,$/;"	e	enum:internal::traits::<anonymous>
TransformType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  typedef Transform<Scalar, Dim, Mode, Options> TransformType;$/;"	t	struct:internal::take_matrix_for_product
TransformType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  typedef Transform<Scalar, Dim, Projective, Options> TransformType;$/;"	t	struct:internal::take_matrix_for_product
_MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename remove_reference<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	struct:internal::traits
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^    inline Scalar coeff(Index row, Index col) const$/;"	f	class:Homogeneous
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^    inline Index cols() const { return m_matrix.cols() + (int(Direction)==Horizontal ? 1 : 0); }$/;"	f	class:Homogeneous
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  inline Index cols() const { return m_rhs.cols(); }$/;"	f	struct:internal::homogeneous_left_product_impl
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  inline Index cols() const { return m_rhs.cols(); }$/;"	f	struct:internal::homogeneous_right_product_impl
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::homogeneous_left_product_impl
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::homogeneous_right_product_impl
hnormalized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^MatrixBase<Derived>::hnormalized() const$/;"	f	class:MatrixBase
hnormalized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^VectorwiseOp<ExpressionType,Direction>::hnormalized() const$/;"	f	class:VectorwiseOp
homogeneous	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^MatrixBase<Derived>::homogeneous() const$/;"	f	class:MatrixBase
homogeneous	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^VectorwiseOp<ExpressionType,Direction>::homogeneous() const$/;"	f	class:VectorwiseOp
homogeneous_left_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  homogeneous_left_product_impl(const Lhs& lhs, const MatrixType& rhs)$/;"	f	struct:internal::homogeneous_left_product_impl
homogeneous_left_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^struct homogeneous_left_product_impl<Homogeneous<MatrixType,Vertical>,Lhs>$/;"	s	namespace:internal
homogeneous_right_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  homogeneous_right_product_impl(const MatrixType& lhs, const Rhs& rhs)$/;"	f	struct:internal::homogeneous_right_product_impl
homogeneous_right_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^struct homogeneous_right_product_impl<Homogeneous<MatrixType,Horizontal>,Rhs>$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^namespace internal {$/;"	n
m_lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  const typename LhsMatrixTypeCleaned::Nested m_lhs;$/;"	m	struct:internal::homogeneous_left_product_impl
m_lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  const typename MatrixType::Nested m_lhs;$/;"	m	struct:internal::homogeneous_right_product_impl
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^    const typename MatrixType::Nested m_matrix;$/;"	m	class:Homogeneous
m_rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  const typename MatrixType::Nested m_rhs;$/;"	m	struct:internal::homogeneous_left_product_impl
m_rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  const typename Rhs::Nested m_rhs;$/;"	m	struct:internal::homogeneous_right_product_impl
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^    operator* (const MatrixBase<Lhs>& lhs, const Homogeneous& rhs)$/;"	f	class:Homogeneous
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^    operator* (const MatrixBase<Rhs>& rhs) const$/;"	f	class:Homogeneous
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^    operator* (const Transform<Scalar,Dim,Mode,Options>& lhs, const Homogeneous& rhs)$/;"	f	class:Homogeneous
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^    inline Index rows() const { return m_matrix.rows() + (int(Direction)==Vertical   ? 1 : 0); }$/;"	f	class:Homogeneous
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  inline Index rows() const { return m_lhs.rows(); }$/;"	f	struct:internal::homogeneous_left_product_impl
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  inline Index rows() const { return m_lhs.rows(); }$/;"	f	struct:internal::homogeneous_right_product_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  static const type run (const TransformType& x) { return x.affine(); }$/;"	f	struct:internal::take_matrix_for_product
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  static const type& run (const TransformType& x) { return x.matrix(); }$/;"	f	struct:internal::take_matrix_for_product
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  static const type& run(const type &x) { return x; }$/;"	f	struct:internal::take_matrix_for_product
take_matrix_for_product	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^struct take_matrix_for_product$/;"	s	namespace:internal
take_matrix_for_product	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^struct take_matrix_for_product<Transform<Scalar, Dim, Mode, Options> >$/;"	s	namespace:internal
take_matrix_for_product	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^struct take_matrix_for_product<Transform<Scalar, Dim, Projective, Options> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^struct traits<Homogeneous<MatrixType,Direction> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^struct traits<homogeneous_left_product_impl<Homogeneous<MatrixType,Vertical>,Lhs> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^struct traits<homogeneous_right_product_impl<Homogeneous<MatrixType,Horizontal>,Rhs> >$/;"	s	namespace:internal
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  typedef MatrixOrTransformType type;$/;"	t	struct:internal::take_matrix_for_product
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename TransformType::ConstAffinePart type;$/;"	t	struct:internal::take_matrix_for_product
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Homogeneous.h	/^  typedef typename TransformType::MatrixType type;$/;"	t	struct:internal::take_matrix_for_product
AmbientDimAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^    AmbientDimAtCompileTime = _AmbientDim,$/;"	e	enum:Hyperplane::<anonymous>
Coefficients	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^                        : Index(AmbientDimAtCompileTime)+1,1,Options> Coefficients;$/;"	t	class:Hyperplane
ConstNormalReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  typedef const Block<const Coefficients,AmbientDimAtCompileTime,1> ConstNormalReturnType;$/;"	t	class:Hyperplane
EIGEN_HYPERPLANE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	27;"	d
Hyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  Hyperplane(const Hyperplane<Scalar,AmbientDimAtCompileTime,OtherOptions>& other)$/;"	f	class:Hyperplane
Hyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  explicit Hyperplane(const ParametrizedLine<Scalar, AmbientDimAtCompileTime>& parametrized)$/;"	f	class:Hyperplane
Hyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  inline Hyperplane(const VectorType& n, Scalar d)$/;"	f	class:Hyperplane
Hyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  inline Hyperplane(const VectorType& n, const VectorType& e)$/;"	f	class:Hyperplane
Hyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  inline explicit Hyperplane() {}$/;"	f	class:Hyperplane
Hyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  inline explicit Hyperplane(Index _dim) : m_coeffs(_dim+1) {}$/;"	f	class:Hyperplane
Hyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  inline explicit Hyperplane(const Hyperplane<OtherScalarType,AmbientDimAtCompileTime,OtherOptions>& other)$/;"	f	class:Hyperplane
Hyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^class Hyperplane$/;"	c
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  typedef DenseIndex Index;$/;"	t	class:Hyperplane
NormalReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  typedef Block<Coefficients,AmbientDimAtCompileTime,1> NormalReturnType;$/;"	t	class:Hyperplane
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^    Options = _Options$/;"	e	enum:Hyperplane::<anonymous>
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:Hyperplane
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  typedef _Scalar Scalar;$/;"	t	class:Hyperplane
Through	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  static inline Hyperplane Through(const VectorType& p0, const VectorType& p1)$/;"	f	class:Hyperplane
Through	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  static inline Hyperplane Through(const VectorType& p0, const VectorType& p1, const VectorType& p2)$/;"	f	class:Hyperplane
VectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  typedef Matrix<Scalar,AmbientDimAtCompileTime,1> VectorType;$/;"	t	class:Hyperplane
absDistance	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  inline Scalar absDistance(const VectorType& p) const { return internal::abs(signedDistance(p)); }$/;"	f	class:Hyperplane
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^           Hyperplane<NewScalarType,AmbientDimAtCompileTime,Options> >::type cast() const$/;"	f	class:Hyperplane
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  inline Coefficients& coeffs() { return m_coeffs; }$/;"	f	class:Hyperplane
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  inline const Coefficients& coeffs() const { return m_coeffs; }$/;"	f	class:Hyperplane
dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  inline Index dim() const { return AmbientDimAtCompileTime==Dynamic ? m_coeffs.size()-1 : Index(AmbientDimAtCompileTime); }$/;"	f	class:Hyperplane
intersection	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  VectorType intersection(const Hyperplane& other)$/;"	f	class:Hyperplane
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  bool isApprox(const Hyperplane<Scalar,AmbientDimAtCompileTime,OtherOptions>& other, typename NumTraits<Scalar>::Real prec = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:Hyperplane
m_coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  Coefficients m_coeffs;$/;"	m	class:Hyperplane
normal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  inline ConstNormalReturnType normal() const { return ConstNormalReturnType(m_coeffs,0,0,dim(),1); }$/;"	f	class:Hyperplane
normal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  inline NormalReturnType normal() { return NormalReturnType(m_coeffs,0,0,dim(),1); }$/;"	f	class:Hyperplane
normalize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  void normalize(void)$/;"	f	class:Hyperplane
offset	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  inline Scalar& offset() { return m_coeffs(dim()); }$/;"	f	class:Hyperplane
offset	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  inline const Scalar& offset() const { return m_coeffs.coeff(dim()); }$/;"	f	class:Hyperplane
projection	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  inline VectorType projection(const VectorType& p) const { return p - signedDistance(p) * normal(); }$/;"	f	class:Hyperplane
signedDistance	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  inline Scalar signedDistance(const VectorType& p) const { return normal().dot(p) + offset(); }$/;"	f	class:Hyperplane
transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  inline Hyperplane& transform(const MatrixBase<XprType>& mat, TransformTraits traits = Affine)$/;"	f	class:Hyperplane
transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  inline Hyperplane& transform(const Transform<Scalar,AmbientDimAtCompileTime,Affine,TrOptions>& t,$/;"	f	class:Hyperplane
~Hyperplane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Hyperplane.h	/^  ~Hyperplane() {}$/;"	f	class:Hyperplane
EIGEN_ORTHOMETHODS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/OrthoMethods.h	27;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/OrthoMethods.h	/^  typedef typename Derived::Index Index;$/;"	t	struct:internal::unitOrthogonal_selector
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/OrthoMethods.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	struct:internal::unitOrthogonal_selector
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/OrthoMethods.h	/^  typedef typename traits<Derived>::Scalar Scalar;$/;"	t	struct:internal::unitOrthogonal_selector
Vector2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/OrthoMethods.h	/^  typedef Matrix<Scalar,2,1> Vector2;$/;"	t	struct:internal::unitOrthogonal_selector
VectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/OrthoMethods.h	/^  typedef typename plain_matrix_type<Derived>::type VectorType;$/;"	t	struct:internal::unitOrthogonal_selector
cross	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/OrthoMethods.h	/^MatrixBase<Derived>::cross(const MatrixBase<OtherDerived>& other) const$/;"	f	class:MatrixBase
cross	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/OrthoMethods.h	/^VectorwiseOp<ExpressionType,Direction>::cross(const MatrixBase<OtherDerived>& other) const$/;"	f	class:VectorwiseOp
cross3	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/OrthoMethods.h	/^MatrixBase<Derived>::cross3(const MatrixBase<OtherDerived>& other) const$/;"	f	class:MatrixBase
cross3_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/OrthoMethods.h	/^struct cross3_impl {$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/OrthoMethods.h	/^namespace internal {$/;"	n
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/OrthoMethods.h	/^  inline static VectorType run(const Derived& src)$/;"	f	struct:internal::unitOrthogonal_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/OrthoMethods.h	/^  run(const VectorLhs& lhs, const VectorRhs& rhs)$/;"	f	struct:internal::cross3_impl
unitOrthogonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/OrthoMethods.h	/^MatrixBase<Derived>::unitOrthogonal() const$/;"	f	class:MatrixBase
unitOrthogonal_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/OrthoMethods.h	/^struct unitOrthogonal_selector$/;"	s	namespace:internal
unitOrthogonal_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/OrthoMethods.h	/^struct unitOrthogonal_selector<Derived,2>$/;"	s	namespace:internal
unitOrthogonal_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/OrthoMethods.h	/^struct unitOrthogonal_selector<Derived,3>$/;"	s	namespace:internal
AmbientDimAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^    AmbientDimAtCompileTime = _AmbientDim,$/;"	e	enum:ParametrizedLine::<anonymous>
EIGEN_PARAMETRIZEDLINE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	27;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  typedef DenseIndex Index;$/;"	t	class:ParametrizedLine
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^    Options = _Options$/;"	e	enum:ParametrizedLine::<anonymous>
ParametrizedLine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  ParametrizedLine(const ParametrizedLine<Scalar,AmbientDimAtCompileTime,OtherOptions>& other)$/;"	f	class:ParametrizedLine
ParametrizedLine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  ParametrizedLine(const VectorType& origin, const VectorType& direction)$/;"	f	class:ParametrizedLine
ParametrizedLine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  inline explicit ParametrizedLine() {}$/;"	f	class:ParametrizedLine
ParametrizedLine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  inline explicit ParametrizedLine(Index _dim) : m_origin(_dim), m_direction(_dim) {}$/;"	f	class:ParametrizedLine
ParametrizedLine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  inline explicit ParametrizedLine(const ParametrizedLine<OtherScalarType,AmbientDimAtCompileTime,OtherOptions>& other)$/;"	f	class:ParametrizedLine
ParametrizedLine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^class ParametrizedLine$/;"	c
ParametrizedLine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^inline ParametrizedLine<_Scalar, _AmbientDim,_Options>::ParametrizedLine(const Hyperplane<_Scalar, _AmbientDim,OtherOptions>& hyperplane)$/;"	f	class:ParametrizedLine
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:ParametrizedLine
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  typedef _Scalar Scalar;$/;"	t	class:ParametrizedLine
Through	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  static inline ParametrizedLine Through(const VectorType& p0, const VectorType& p1)$/;"	f	class:ParametrizedLine
VectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  typedef Matrix<Scalar,AmbientDimAtCompileTime,1,Options> VectorType;$/;"	t	class:ParametrizedLine
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^           ParametrizedLine<NewScalarType,AmbientDimAtCompileTime,Options> >::type cast() const$/;"	f	class:ParametrizedLine
dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  inline Index dim() const { return m_direction.size(); }$/;"	f	class:ParametrizedLine
direction	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  VectorType& direction() { return m_direction; }$/;"	f	class:ParametrizedLine
direction	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  const VectorType& direction() const { return m_direction; }$/;"	f	class:ParametrizedLine
distance	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  RealScalar distance(const VectorType& p) const { return internal::sqrt(squaredDistance(p)); }$/;"	f	class:ParametrizedLine
intersection	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^inline _Scalar ParametrizedLine<_Scalar, _AmbientDim,_Options>::intersection(const Hyperplane<_Scalar, _AmbientDim, OtherOptions>& hyperplane)$/;"	f	class:ParametrizedLine
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  bool isApprox(const ParametrizedLine& other, typename NumTraits<Scalar>::Real prec = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:ParametrizedLine
m_direction	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  VectorType m_origin, m_direction;$/;"	m	class:ParametrizedLine
m_origin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  VectorType m_origin, m_direction;$/;"	m	class:ParametrizedLine
origin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  VectorType& origin() { return m_origin; }$/;"	f	class:ParametrizedLine
origin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  const VectorType& origin() const { return m_origin; }$/;"	f	class:ParametrizedLine
projection	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  VectorType projection(const VectorType& p) const$/;"	f	class:ParametrizedLine
squaredDistance	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  RealScalar squaredDistance(const VectorType& p) const$/;"	f	class:ParametrizedLine
~ParametrizedLine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/ParametrizedLine.h	/^  ~ParametrizedLine() {}$/;"	f	class:ParametrizedLine
AngleAxisType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  typedef AngleAxis<Scalar> AngleAxisType;$/;"	t	class:QuaternionBase
AngleAxisType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  typedef typename Base::AngleAxisType AngleAxisType;$/;"	t	class:Quaternion
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^    typedef QuaternionBase<Map<Quaternion<_Scalar>, _Options> > Base;$/;"	t	class:Map
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^    typedef QuaternionBase<Map<const Quaternion<_Scalar>, _Options> > Base;$/;"	t	class:Map
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  typedef QuaternionBase<Quaternion<_Scalar,_Options> > Base;$/;"	t	class:Quaternion
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  typedef RotationBase<Derived, 3> Base;$/;"	t	class:QuaternionBase
Coefficients	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^    typedef Map<Matrix<_Scalar,4,1>, _Options> Coefficients;$/;"	t	struct:internal::traits
Coefficients	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^    typedef Map<const Matrix<_Scalar,4,1>, _Options> Coefficients;$/;"	t	struct:internal::traits
Coefficients	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^    typedef typename internal::traits<Map>::Coefficients Coefficients;$/;"	t	class:Map
Coefficients	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  typedef Matrix<_Scalar,4,1,_Options> Coefficients;$/;"	t	struct:internal::traits
Coefficients	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  typedef typename internal::traits<Derived>::Coefficients Coefficients;$/;"	t	class:QuaternionBase
Coefficients	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  typedef typename internal::traits<Quaternion<Scalar,_Options> >::Coefficients Coefficients;$/;"	t	class:Quaternion
EIGEN_QUATERNION_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	27;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^      Flags = TraitsBase::Flags & ~LvalueBit$/;"	e	enum:internal::traits::<anonymous>
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^      Flags = TraitsBase::Flags$/;"	e	enum:internal::traits::<anonymous>
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^    Flags = Eigen::internal::traits<Derived>::Flags$/;"	e	enum:QuaternionBase::<anonymous>
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^    Flags = IsAligned ? (AlignedBit | LvalueBit) : LvalueBit$/;"	e	enum:internal::traits::<anonymous>
Identity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline static Quaternion<Scalar> Identity() { return Quaternion<Scalar>(1, 0, 0, 0); }$/;"	f	class:QuaternionBase
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  typedef DenseIndex Index;$/;"	t	struct:internal::quaternionbase_assign_impl
IsAligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^      IsAligned = TraitsBase::IsAligned,$/;"	e	enum:internal::traits::<anonymous>
IsAligned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^    IsAligned = bool(EIGEN_ALIGN) && ((int(_Options)&Aligned)==Aligned),$/;"	e	enum:internal::traits::<anonymous>
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^    EIGEN_STRONG_INLINE Map(Scalar* coeffs) : m_coeffs(coeffs) {}$/;"	f	class:Map
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^    EIGEN_STRONG_INLINE Map(const Scalar* coeffs) : m_coeffs(coeffs) {}$/;"	f	class:Map
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^class Map<Quaternion<_Scalar>, _Options >$/;"	c
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^class Map<const Quaternion<_Scalar>, _Options >$/;"	c
Matrix3	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  typedef Matrix<Scalar,3,3> Matrix3;$/;"	t	class:QuaternionBase
PlainObject	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  typedef Quaternion<_Scalar,_Options> PlainObject;$/;"	t	struct:internal::traits
Quaternion	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  explicit inline Quaternion(const AngleAxisType& aa) { *this = aa; }$/;"	f	class:Quaternion
Quaternion	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  explicit inline Quaternion(const MatrixBase<Derived>& other) { *this = other; }$/;"	f	class:Quaternion
Quaternion	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline Quaternion() {}$/;"	f	class:Quaternion
Quaternion	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline Quaternion(Scalar w, Scalar x, Scalar y, Scalar z) : m_coeffs(x, y, z, w){}$/;"	f	class:Quaternion
Quaternion	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline Quaternion(const Scalar* data) : m_coeffs(data) {}$/;"	f	class:Quaternion
Quaternion	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  template<class Derived> EIGEN_STRONG_INLINE Quaternion(const QuaternionBase<Derived>& other) { this->Base::operator=(other); }$/;"	f	class:Quaternion
Quaternion	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^class Quaternion : public QuaternionBase<Quaternion<_Scalar,_Options> >{$/;"	c
QuaternionBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^class QuaternionBase : public RotationBase<Derived, 3>$/;"	c
QuaternionMapAlignedd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^typedef Map<Quaternion<double>, Aligned>  QuaternionMapAlignedd;$/;"	t
QuaternionMapAlignedf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^typedef Map<Quaternion<float>, Aligned>   QuaternionMapAlignedf;$/;"	t
QuaternionMapd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^typedef Map<Quaternion<double>, 0>        QuaternionMapd;$/;"	t
QuaternionMapf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^typedef Map<Quaternion<float>, 0>         QuaternionMapf;$/;"	t
Quaterniond	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^typedef Quaternion<double> Quaterniond;$/;"	t
Quaternionf	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^typedef Quaternion<float> Quaternionf;$/;"	t
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:QuaternionBase
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^    typedef _Scalar Scalar;$/;"	t	class:Map
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^    typedef _Scalar Scalar;$/;"	t	struct:internal::traits
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  typedef _Scalar Scalar;$/;"	t	class:Quaternion
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  typedef _Scalar Scalar;$/;"	t	struct:internal::traits
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  typedef typename Other::Scalar Scalar;$/;"	t	struct:internal::quaternionbase_assign_impl
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:QuaternionBase
TraitsBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^    typedef traits<Quaternion<_Scalar, _Options> > TraitsBase;$/;"	t	struct:internal::traits
Vector3	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  typedef Matrix<Scalar,3,1> Vector3;$/;"	t	class:QuaternionBase
_check_template_params	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^    EIGEN_STRONG_INLINE static void _check_template_params()$/;"	f	class:Quaternion
_transformVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^QuaternionBase<Derived>::_transformVector(Vector3 v) const$/;"	f	class:QuaternionBase
angularDistance	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^QuaternionBase<Derived>::angularDistance(const QuaternionBase<OtherDerived>& other) const$/;"	f	class:QuaternionBase
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline typename internal::cast_return_type<Derived,Quaternion<NewScalarType> >::type cast() const$/;"	f	class:QuaternionBase
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^    inline Coefficients& coeffs() { return m_coeffs; }$/;"	f	class:Map
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^    inline const Coefficients& coeffs() const { return m_coeffs; }$/;"	f	class:Map
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^    inline const Coefficients& coeffs() const { return m_coeffs;}$/;"	f	class:Map
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline Coefficients& coeffs() { return m_coeffs;}$/;"	f	class:Quaternion
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline const Coefficients& coeffs() const { return m_coeffs;}$/;"	f	class:Quaternion
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline const typename internal::traits<Derived>::Coefficients& coeffs() const { return derived().coeffs(); }$/;"	f	class:QuaternionBase
coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline typename internal::traits<Derived>::Coefficients& coeffs() { return derived().coeffs(); }$/;"	f	class:QuaternionBase
conjugate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^QuaternionBase<Derived>::conjugate() const$/;"	f	class:QuaternionBase
dot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  template<class OtherDerived> inline Scalar dot(const QuaternionBase<OtherDerived>& other) const { return coeffs().dot(other.coeffs()); }$/;"	f	class:QuaternionBase
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^namespace internal {$/;"	n
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^inline Quaternion<typename internal::traits<Derived>::Scalar> QuaternionBase<Derived>::inverse() const$/;"	f	class:QuaternionBase
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  bool isApprox(const QuaternionBase<OtherDerived>& other, RealScalar prec = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:QuaternionBase
m_coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^    Coefficients m_coeffs;$/;"	m	class:Map
m_coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^    const Coefficients m_coeffs;$/;"	m	class:Map
m_coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  Coefficients m_coeffs;$/;"	m	class:Quaternion
norm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar norm() const { return coeffs().norm(); }$/;"	f	class:QuaternionBase
normalize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline void normalize() { coeffs().normalize(); }$/;"	f	class:QuaternionBase
normalized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline Quaternion<Scalar> normalized() const { return Quaternion<Scalar>(coeffs().normalized()); }$/;"	f	class:QuaternionBase
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^QuaternionBase<Derived>::operator* (const QuaternionBase<OtherDerived>& other) const$/;"	f	class:QuaternionBase
operator *=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^EIGEN_STRONG_INLINE Derived& QuaternionBase<Derived>::operator*= (const QuaternionBase<OtherDerived>& other)$/;"	f	class:QuaternionBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^EIGEN_STRONG_INLINE Derived& QuaternionBase<Derived>::operator=(const AngleAxisType& aa)$/;"	f	class:QuaternionBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^EIGEN_STRONG_INLINE Derived& QuaternionBase<Derived>::operator=(const QuaternionBase<OtherDerived>& other)$/;"	f	class:QuaternionBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^EIGEN_STRONG_INLINE QuaternionBase<Derived>& QuaternionBase<Derived>::operator=(const QuaternionBase<Derived>& other)$/;"	f	class:QuaternionBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^inline Derived& QuaternionBase<Derived>::operator=(const MatrixBase<MatrixDerived>& xpr)$/;"	f	class:QuaternionBase
quat_product	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^template<int Arch, class Derived1, class Derived2, typename Scalar, int _Options> struct quat_product$/;"	s	namespace:internal
quaternionbase_assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^struct quaternionbase_assign_impl<Other,3,3>$/;"	s	namespace:internal
quaternionbase_assign_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^struct quaternionbase_assign_impl<Other,4,1>$/;"	s	namespace:internal
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  EIGEN_STRONG_INLINE static Quaternion<Scalar> run(const QuaternionBase<Derived1>& a, const QuaternionBase<Derived2>& b){$/;"	f	struct:internal::quat_product
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  template<class Derived> inline static void run(QuaternionBase<Derived>& q, const Other& mat)$/;"	f	struct:internal::quaternionbase_assign_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  template<class Derived> inline static void run(QuaternionBase<Derived>& q, const Other& vec)$/;"	f	struct:internal::quaternionbase_assign_impl
setFromTwoVectors	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^inline Derived& QuaternionBase<Derived>::setFromTwoVectors(const MatrixBase<Derived1>& a, const MatrixBase<Derived2>& b)$/;"	f	class:QuaternionBase
setIdentity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline QuaternionBase& setIdentity() { coeffs() << 0, 0, 0, 1; return *this; }$/;"	f	class:QuaternionBase
slerp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^QuaternionBase<Derived>::slerp(Scalar t, const QuaternionBase<OtherDerived>& other) const$/;"	f	class:QuaternionBase
squaredNorm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar squaredNorm() const { return coeffs().squaredNorm(); }$/;"	f	class:QuaternionBase
toRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^QuaternionBase<Derived>::toRotationMatrix(void) const$/;"	f	class:QuaternionBase
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  struct traits<Map<Quaternion<_Scalar>, _Options> >:$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  struct traits<Map<const Quaternion<_Scalar>, _Options> >:$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^struct traits<Quaternion<_Scalar,_Options> >$/;"	s	namespace:internal
vec	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline VectorBlock<Coefficients,3> vec() { return coeffs().template head<3>(); }$/;"	f	class:QuaternionBase
vec	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline const VectorBlock<const Coefficients,3> vec() const { return coeffs().template head<3>(); }$/;"	f	class:QuaternionBase
w	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar w() const { return this->derived().coeffs().coeff(3); }$/;"	f	class:QuaternionBase
w	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar& w() { return this->derived().coeffs().coeffRef(3); }$/;"	f	class:QuaternionBase
x	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar x() const { return this->derived().coeffs().coeff(0); }$/;"	f	class:QuaternionBase
x	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar& x() { return this->derived().coeffs().coeffRef(0); }$/;"	f	class:QuaternionBase
y	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar y() const { return this->derived().coeffs().coeff(1); }$/;"	f	class:QuaternionBase
y	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar& y() { return this->derived().coeffs().coeffRef(1); }$/;"	f	class:QuaternionBase
z	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar z() const { return this->derived().coeffs().coeff(2); }$/;"	f	class:QuaternionBase
z	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Quaternion.h	/^  inline Scalar& z() { return this->derived().coeffs().coeffRef(2); }$/;"	f	class:QuaternionBase
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^  typedef RotationBase<Rotation2D<_Scalar>,2> Base;$/;"	t	class:Rotation2D
Dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^  enum { Dim = 2 };$/;"	e	enum:Rotation2D::<anonymous>
EIGEN_ROTATION2D_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	26;"	d
Identity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^  inline static Rotation2D Identity() { return Rotation2D(0); }$/;"	f	class:Rotation2D
Matrix2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^  typedef Matrix<Scalar,2,2> Matrix2;$/;"	t	class:Rotation2D
Rotation2D	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^  inline Rotation2D(Scalar a) : m_angle(a) {}$/;"	f	class:Rotation2D
Rotation2D	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^  inline explicit Rotation2D(const Rotation2D<OtherScalarType>& other)$/;"	f	class:Rotation2D
Rotation2D	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^class Rotation2D : public RotationBase<Rotation2D<_Scalar>,2>$/;"	c
Rotation2Dd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^typedef Rotation2D<double> Rotation2Dd;$/;"	t
Rotation2Df	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^typedef Rotation2D<float> Rotation2Df;$/;"	t
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^  typedef _Scalar Scalar;$/;"	t	class:Rotation2D
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^  typedef _Scalar Scalar;$/;"	t	struct:internal::traits
Vector2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^  typedef Matrix<Scalar,2,1> Vector2;$/;"	t	class:Rotation2D
angle	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^  inline Scalar angle() const { return m_angle; }$/;"	f	class:Rotation2D
angle	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^  inline Scalar& angle() { return m_angle; }$/;"	f	class:Rotation2D
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^  inline typename internal::cast_return_type<Rotation2D,Rotation2D<NewScalarType> >::type cast() const$/;"	f	class:Rotation2D
fromRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^Rotation2D<Scalar>& Rotation2D<Scalar>::fromRotationMatrix(const MatrixBase<Derived>& mat)$/;"	f	class:Rotation2D
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^namespace internal {$/;"	n
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^  inline Rotation2D inverse() const { return -m_angle; }$/;"	f	class:Rotation2D
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^  bool isApprox(const Rotation2D& other, typename NumTraits<Scalar>::Real prec = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:Rotation2D
m_angle	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^  Scalar m_angle;$/;"	m	class:Rotation2D
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^  Vector2 operator* (const Vector2& vec) const$/;"	f	class:Rotation2D
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^  inline Rotation2D operator*(const Rotation2D& other) const$/;"	f	class:Rotation2D
operator *=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^  inline Rotation2D& operator*=(const Rotation2D& other)$/;"	f	class:Rotation2D
slerp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^  inline Rotation2D slerp(Scalar t, const Rotation2D& other) const$/;"	f	class:Rotation2D
toRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^Rotation2D<Scalar>::toRotationMatrix(void) const$/;"	f	class:Rotation2D
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Rotation2D.h	/^template<typename _Scalar> struct traits<Rotation2D<_Scalar> >$/;"	s	namespace:internal
Dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^    enum { Dim = _Dim };$/;"	e	enum:RotationBase::<anonymous>
Dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^  enum { Dim = RotationDerived::Dim };$/;"	e	enum:internal::rotation_base_generic_product_selector::<anonymous>
EIGEN_ROTATIONBASE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	26;"	d
Matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^::Matrix(const RotationBase<OtherDerived,ColsAtCompileTime>& r)$/;"	f	class:Matrix
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^  typedef Matrix<typename RotationDerived::Scalar,Dim,1> ReturnType;$/;"	t	struct:internal::rotation_base_generic_product_selector
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^  typedef Matrix<typename RotationDerived::Scalar,Dim,Dim> ReturnType;$/;"	t	struct:internal::rotation_base_generic_product_selector
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^  typedef Transform<Scalar,Dim,Affine> ReturnType;$/;"	t	struct:internal::rotation_base_generic_product_selector
RotationBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^class RotationBase$/;"	c
RotationMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^    typedef Matrix<Scalar,Dim,Dim> RotationMatrixType;$/;"	t	class:RotationBase
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:RotationBase
VectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^    typedef Matrix<Scalar,Dim,1> VectorType;$/;"	t	class:RotationBase
_transformVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^    inline VectorType _transformVector(const OtherVectorType& v) const$/;"	f	class:RotationBase
derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^    inline Derived& derived() { return *static_cast<Derived*>(this); }$/;"	f	class:RotationBase
derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^    inline const Derived& derived() const { return *static_cast<const Derived*>(this); }$/;"	f	class:RotationBase
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^namespace internal {$/;"	n
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^    inline Derived inverse() const { return derived().inverse(); }$/;"	f	class:RotationBase
matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^    inline RotationMatrixType matrix() const { return derived().toRotationMatrix(); }$/;"	f	class:RotationBase
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^    friend inline Transform<Scalar,Dim,Affine> operator*(const DiagonalMatrix<Scalar,Dim>& l, const Derived& r)$/;"	f	class:RotationBase
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^    inline RotationMatrixType operator*(const EigenBase<OtherDerived>& l, const Derived& r)$/;"	f	class:RotationBase
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^    inline RotationMatrixType operator*(const UniformScaling<Scalar>& s) const$/;"	f	class:RotationBase
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^    inline Transform<Scalar,Dim,Isometry> operator*(const Translation<Scalar,Dim>& t) const$/;"	f	class:RotationBase
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^    inline Transform<Scalar,Dim,Mode> operator*(const Transform<Scalar,Dim,Mode,Options>& t) const$/;"	f	class:RotationBase
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^    operator*(const EigenBase<OtherDerived>& e) const$/;"	f	class:RotationBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^::operator=(const RotationBase<OtherDerived,ColsAtCompileTime>& r)$/;"	f	class:Matrix
rotation_base_generic_product_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^struct rotation_base_generic_product_selector< RotationDerived, DiagonalMatrix<Scalar,Dim,MaxDim>, false >$/;"	s	namespace:internal
rotation_base_generic_product_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^struct rotation_base_generic_product_selector<RotationDerived,MatrixType,false>$/;"	s	namespace:internal
rotation_base_generic_product_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^struct rotation_base_generic_product_selector<RotationDerived,OtherVectorType,true>$/;"	s	namespace:internal
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^  EIGEN_STRONG_INLINE static ReturnType run(const RotationDerived& r, const OtherVectorType& v)$/;"	f	struct:internal::rotation_base_generic_product_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^  inline static ReturnType run(const RotationDerived& r, const DiagonalMatrix<Scalar,Dim,MaxDim>& m)$/;"	f	struct:internal::rotation_base_generic_product_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^  inline static ReturnType run(const RotationDerived& r, const MatrixType& m)$/;"	f	struct:internal::rotation_base_generic_product_selector
toRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^    inline RotationMatrixType toRotationMatrix() const { return derived().toRotationMatrix(); }$/;"	f	class:RotationBase
toRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^inline static Matrix<Scalar,2,2> toRotationMatrix(const Scalar& s)$/;"	f	namespace:internal
toRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^inline static Matrix<Scalar,Dim,Dim> toRotationMatrix(const RotationBase<OtherDerived,Dim>& r)$/;"	f	namespace:internal
toRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/RotationBase.h	/^inline static const MatrixBase<OtherDerived>& toRotationMatrix(const MatrixBase<OtherDerived>& mat)$/;"	f	namespace:internal
AlignedScaling2d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^typedef DiagonalMatrix<double,2> AlignedScaling2d;$/;"	t
AlignedScaling2f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^typedef DiagonalMatrix<float, 2> AlignedScaling2f;$/;"	t
AlignedScaling3d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^typedef DiagonalMatrix<double,3> AlignedScaling3d;$/;"	t
AlignedScaling3f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^typedef DiagonalMatrix<float, 3> AlignedScaling3f;$/;"	t
EIGEN_SCALING_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	26;"	d
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^  typedef _Scalar Scalar;$/;"	t	class:UniformScaling
Scaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^static inline DiagonalMatrix<Scalar,2> Scaling(Scalar sx, Scalar sy)$/;"	f
Scaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^static inline DiagonalMatrix<Scalar,3> Scaling(Scalar sx, Scalar sy, Scalar sz)$/;"	f
Scaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^static inline UniformScaling<double> Scaling(double s) { return UniformScaling<double>(s); }$/;"	f
Scaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^static inline UniformScaling<float> Scaling(float s) { return UniformScaling<float>(s); }$/;"	f
Scaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^static inline UniformScaling<std::complex<RealScalar> > Scaling(const std::complex<RealScalar>& s)$/;"	f
Scaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^static inline const DiagonalWrapper<const Derived> Scaling(const MatrixBase<Derived>& coeffs)$/;"	f
UniformScaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^  UniformScaling() {}$/;"	f	class:UniformScaling
UniformScaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^  explicit inline UniformScaling(const Scalar& s) : m_factor(s) {}$/;"	f	class:UniformScaling
UniformScaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^  inline explicit UniformScaling(const UniformScaling<OtherScalarType>& other)$/;"	f	class:UniformScaling
UniformScaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^class UniformScaling$/;"	c
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^  inline UniformScaling<NewScalarType> cast() const$/;"	f	class:UniformScaling
factor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^  inline Scalar& factor() { return m_factor; }$/;"	f	class:UniformScaling
factor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^  inline const Scalar& factor() const { return m_factor; }$/;"	f	class:UniformScaling
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^  inline UniformScaling inverse() const$/;"	f	class:UniformScaling
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^  bool isApprox(const UniformScaling& other, typename NumTraits<Scalar>::Real prec = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:UniformScaling
m_factor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^  Scalar m_factor;$/;"	m	class:UniformScaling
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^  inline Matrix<Scalar,Dim,Dim> operator*(const RotationBase<Derived,Dim>& r) const$/;"	f	class:UniformScaling
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^  inline UniformScaling operator* (const UniformScaling& other) const$/;"	f	class:UniformScaling
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^  inline typename internal::plain_matrix_type<Derived>::type operator* (const MatrixBase<Derived>& other) const$/;"	f	class:UniformScaling
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^MatrixBase<Derived>::operator*(const UniformScaling<Scalar>& s) const$/;"	f	class:MatrixBase
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^UniformScaling<Scalar>::operator* (const Transform<Scalar,Dim, Mode, Options>& t) const$/;"	f	class:UniformScaling
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Scaling.h	/^UniformScaling<Scalar>::operator* (const Translation<Scalar,Dim>& t) const$/;"	f	class:UniformScaling
Affine2d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^typedef Transform<double,2,Affine> Affine2d;$/;"	t
Affine2f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^typedef Transform<float,2,Affine> Affine2f;$/;"	t
Affine3d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^typedef Transform<double,3,Affine> Affine3d;$/;"	t
Affine3f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^typedef Transform<float,3,Affine> Affine3f;$/;"	t
AffineCompact2d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^typedef Transform<double,2,AffineCompact> AffineCompact2d;$/;"	t
AffineCompact2f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^typedef Transform<float,2,AffineCompact> AffineCompact2f;$/;"	t
AffineCompact3d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^typedef Transform<double,3,AffineCompact> AffineCompact3d;$/;"	t
AffineCompact3f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^typedef Transform<float,3,AffineCompact> AffineCompact3f;$/;"	t
AffinePart	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^                              Block<MatrixType,Dim,HDim> >::type AffinePart;$/;"	t	class:Transform
AffinePart	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef typename TransformType::AffinePart AffinePart;$/;"	t	struct:internal::transform_take_affine_part
ConstAffinePart	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^                              const Block<const MatrixType,Dim,HDim> >::type ConstAffinePart;$/;"	t	class:Transform
ConstAffinePart	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef typename TransformType::ConstAffinePart ConstAffinePart;$/;"	t	struct:internal::transform_take_affine_part
ConstLinearPart	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef const Block<ConstMatrixType,Dim,Dim> ConstLinearPart;$/;"	t	class:Transform
ConstMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef const MatrixType ConstMatrixType;$/;"	t	class:Transform
ConstTranslationPart	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef const Block<ConstMatrixType,Dim,1> ConstTranslationPart;$/;"	t	class:Transform
Dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^    Dim = Transform::Dim,$/;"	e	enum:internal::transform_traits::<anonymous>
Dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^    Dim = TransformType::Dim, $/;"	e	enum:internal::transform_right_product_impl::<anonymous>
Dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^    Dim = _Dim,     \/\/\/< space dimension in which the transformation holds$/;"	e	enum:Transform::<anonymous>
EIGEN_TRANSFORM_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	28;"	d
HDim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^    HDim = Transform::HDim,$/;"	e	enum:internal::transform_traits::<anonymous>
HDim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^    HDim = TransformType::HDim,$/;"	e	enum:internal::transform_right_product_impl::<anonymous>
HDim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^    HDim = _Dim+1,  \/\/\/< size of a respective homogeneous vector$/;"	e	enum:Transform::<anonymous>
Identity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  static const Transform Identity()$/;"	f	class:Transform
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef DenseIndex Index;$/;"	t	class:Transform
IsProjective	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^    IsProjective = (Mode==Projective)$/;"	e	enum:internal::transform_traits::<anonymous>
Isometry2d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^typedef Transform<double,2,Isometry> Isometry2d;$/;"	t
Isometry2f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^typedef Transform<float,2,Isometry> Isometry2f;$/;"	t
Isometry3d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^typedef Transform<double,3,Isometry> Isometry3d;$/;"	t
Isometry3f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^typedef Transform<float,3,Isometry> Isometry3f;$/;"	t
Lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef Transform<Scalar,Dim,LhsMode,LhsOptions> Lhs;$/;"	t	struct:internal::transform_transform_product_impl
LinearMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef Matrix<Scalar,Dim,Dim,Options> LinearMatrixType;$/;"	t	class:Transform
LinearPart	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef Block<MatrixType,Dim,Dim> LinearPart;$/;"	t	class:Transform
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef typename Transform<Scalar,Dim,AffineCompact,Options>::MatrixType MatrixType;$/;"	t	struct:internal::transform_take_affine_part
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef typename TransformType::MatrixType MatrixType;$/;"	t	struct:internal::transform_left_product_impl
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef typename TransformType::MatrixType MatrixType;$/;"	t	struct:internal::transform_take_affine_part
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef typename internal::make_proper_matrix_type<Scalar,Rows,HDim,Options>::type MatrixType;$/;"	t	class:Transform
Mode	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^    Mode = Transform::Mode,$/;"	e	enum:internal::transform_traits::<anonymous>
Mode	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^    Mode = _Mode,$/;"	e	enum:Transform::<anonymous>
Mode	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^    Mode =$/;"	e	enum:internal::transform_product_result::<anonymous>
Mode	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  enum { ResultMode = transform_product_result<LhsMode,RhsMode>::Mode };$/;"	e	class:internal::transform_transform_product_impl::<anonymous>::RhsMode
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^    Options = _Options,$/;"	e	enum:Transform::<anonymous>
OtherCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^    OtherCols = MatrixType::ColsAtCompileTime$/;"	e	enum:internal::transform_right_product_impl::<anonymous>
OtherRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^    OtherRows = MatrixType::RowsAtCompileTime,$/;"	e	enum:internal::transform_right_product_impl::<anonymous>
Projective2d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^typedef Transform<double,2,Projective> Projective2d;$/;"	t
Projective2f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^typedef Transform<float,2,Projective> Projective2f;$/;"	t
Projective3d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^typedef Transform<double,3,Projective> Projective3d;$/;"	t
Projective3f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^typedef Transform<float,3,Projective> Projective3f;$/;"	t
ResultMode	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  enum { ResultMode = transform_product_result<LhsMode,RhsMode>::Mode };$/;"	e	enum:internal::transform_transform_product_impl::<anonymous>
ResultType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef Transform<Scalar,Dim,Projective> ResultType;$/;"	t	struct:internal::transform_transform_product_impl
ResultType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef Transform<Scalar,Dim,ResultMode,LhsOptions> ResultType;$/;"	t	struct:internal::transform_transform_product_impl
ResultType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef Transform<typename Other::Scalar,Dim,Projective,Options> ResultType;$/;"	t	struct:internal::transform_left_product_impl
ResultType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef TransformType ResultType;$/;"	t	struct:internal::transform_left_product_impl
ResultType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef typename MatrixType::PlainObject ResultType;$/;"	t	struct:internal::transform_right_product_impl
Rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef Transform<Scalar,Dim,RhsMode,RhsOptions> Rhs;$/;"	t	struct:internal::transform_transform_product_impl
RhsMode	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  enum { ResultMode = transform_product_result<LhsMode,RhsMode>::Mode };$/;"	e	enum:internal::transform_transform_product_impl::<anonymous>
Rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^    Rows = int(Mode)==(AffineCompact) ? Dim : HDim$/;"	e	enum:Transform::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef _Scalar Scalar;$/;"	t	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  Transform(const ReturnByValue<OtherDerived>& other)$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline Transform()$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline Transform(const Transform& other)$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline Transform(const Transform<Scalar,Dim,Mode,OtherOptions>& other)$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline Transform(const Transform<Scalar,Dim,OtherMode,OtherOptions>& other)$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline explicit Transform(const EigenBase<OtherDerived>& other)$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline explicit Transform(const RotationBase<Derived, Dim>& r)$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline explicit Transform(const Transform<OtherScalarType,Dim,Mode,Options>& other)$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline explicit Transform(const TranslationType& t)$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline explicit Transform(const UniformScaling<Scalar>& s)$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::Transform(const QMatrix& other)$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::Transform(const QTransform& other)$/;"	f	class:Transform
Transform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^class Transform$/;"	c
TransformTimeDiagonalMode	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  enum { TransformTimeDiagonalMode = ((Mode==int(Isometry))?Affine:int(Mode)) };$/;"	e	enum:Transform::<anonymous>
TransformTimeDiagonalReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef Transform<Scalar,Dim,TransformTimeDiagonalMode> TransformTimeDiagonalReturnType;$/;"	t	class:Transform
TransformType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef Transform<typename Other::Scalar,Dim,AffineCompact,Options> TransformType;$/;"	t	struct:internal::transform_left_product_impl
TransformType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef Transform<typename Other::Scalar,Dim,Mode,Options> TransformType;$/;"	t	struct:internal::transform_left_product_impl
TranslationPart	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef Block<MatrixType,Dim,1> TranslationPart;$/;"	t	class:Transform
TranslationType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef Translation<Scalar,Dim> TranslationType;$/;"	t	class:Transform
VectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef Matrix<Scalar,Dim,1> VectorType;$/;"	t	class:Transform
affine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline AffinePart affine() { return take_affine_part::run(m_matrix); }$/;"	f	class:Transform
affine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline ConstAffinePart affine() const { return take_affine_part::run(m_matrix); }$/;"	f	class:Transform
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline typename internal::cast_return_type<Transform,Transform<NewScalarType,Dim,Mode,Options> >::type cast() const$/;"	f	class:Transform
check_template_params	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^    EIGEN_STRONG_INLINE static void check_template_params()$/;"	f	class:Transform
computeRotationScaling	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^void Transform<Scalar,Dim,Mode,Options>::computeRotationScaling(RotationMatrixType *rotation, ScalingMatrixType *scaling) const$/;"	f	class:Transform
computeScalingRotation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^void Transform<Scalar,Dim,Mode,Options>::computeScalingRotation(ScalingMatrixType *scaling, RotationMatrixType *rotation) const$/;"	f	class:Transform
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  Scalar* data() { return m_matrix.data(); }$/;"	f	class:Transform
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  const Scalar* data() const { return m_matrix.data(); }$/;"	f	class:Transform
fromPositionOrientationScale	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::fromPositionOrientationScale(const MatrixBase<PositionDerived> &position,$/;"	f	class:Transform
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^namespace internal {$/;"	n
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::inverse(TransformTraits hint) const$/;"	f	class:Transform
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  bool isApprox(const Transform& other, typename NumTraits<Scalar>::Real prec = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:Transform
linear	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline ConstLinearPart linear() const { return m_matrix.template block<Dim,Dim>(0,0); }$/;"	f	class:Transform
linear	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline LinearPart linear() { return m_matrix.template block<Dim,Dim>(0,0); }$/;"	f	class:Transform
linearExt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline Block<MatrixType,int(Mode)==int(Projective)?HDim:Dim,Dim> linearExt()$/;"	f	class:Transform
linearExt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline const Block<MatrixType,int(Mode)==int(Projective)?HDim:Dim,Dim> linearExt() const$/;"	f	class:Transform
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  MatrixType m_matrix;$/;"	m	class:Transform
makeAffine	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  void makeAffine()$/;"	f	class:Transform
matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline MatrixType& matrix() { return m_matrix; }$/;"	f	class:Transform
matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline const MatrixType& matrix() const { return m_matrix; }$/;"	f	class:Transform
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline Scalar operator() (Index row, Index col) const { return m_matrix(row,col); }$/;"	f	class:Transform
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline Scalar& operator() (Index row, Index col) { return m_matrix(row,col); }$/;"	f	class:Transform
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^    operator * (const DiagonalBase<DiagonalDerived> &a, const Transform &b)$/;"	f	class:Transform
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^    operator * (const DiagonalBase<DiagonalDerived> &b) const$/;"	f	class:Transform
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^    operator * (const EigenBase<OtherDerived> &a, const Transform &b)$/;"	f	class:Transform
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^    operator * (const Transform<Scalar,Dim,OtherMode,OtherOptions>& other) const$/;"	f	class:Transform
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline const Transform operator * (const Transform& other) const$/;"	f	class:Transform
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  operator * (const EigenBase<OtherDerived> &other) const$/;"	f	class:Transform
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^inline Transform<Scalar,Dim,Mode,Options> Transform<Scalar,Dim,Mode,Options>::operator*(const RotationBase<Derived,Dim>& r) const$/;"	f	class:Transform
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^inline Transform<Scalar,Dim,Mode,Options> Transform<Scalar,Dim,Mode,Options>::operator*(const TranslationType& t) const$/;"	f	class:Transform
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^inline Transform<Scalar,Dim,Mode,Options> Transform<Scalar,Dim,Mode,Options>::operator*(const UniformScaling<Scalar>& s) const$/;"	f	class:Transform
operator *=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline Transform& operator*=(const DiagonalMatrix<Scalar,Dim>& s) { linear() *= s; return *this; }$/;"	f	class:Transform
operator *=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline Transform& operator*=(const EigenBase<OtherDerived>& other) { return *this = *this * other; }$/;"	f	class:Transform
operator *=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline Transform& operator*=(const RotationBase<Derived,Dim>& r) { return rotate(r.toRotationMatrix()); }$/;"	f	class:Transform
operator *=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline Transform& operator*=(const TranslationType& t) { return translate(t.vector()); }$/;"	f	class:Transform
operator *=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline Transform& operator*=(const UniformScaling<Scalar>& s) { return scale(s.factor()); }$/;"	f	class:Transform
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  Transform& operator=(const ReturnByValue<OtherDerived>& other)$/;"	f	class:Transform
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline Transform& operator=(const EigenBase<OtherDerived>& other)$/;"	f	class:Transform
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline Transform& operator=(const Transform& other)$/;"	f	class:Transform
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>& Transform<Scalar,Dim,Mode,Options>::operator=(const QMatrix& other)$/;"	f	class:Transform
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>& Transform<Scalar,Dim,Mode,Options>::operator=(const QTransform& other)$/;"	f	class:Transform
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^inline Transform<Scalar,Dim,Mode,Options>& Transform<Scalar,Dim,Mode,Options>::operator=(const RotationBase<Derived,Dim>& r)$/;"	f	class:Transform
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^inline Transform<Scalar,Dim,Mode,Options>& Transform<Scalar,Dim,Mode,Options>::operator=(const TranslationType& t)$/;"	f	class:Transform
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^inline Transform<Scalar,Dim,Mode,Options>& Transform<Scalar,Dim,Mode,Options>::operator=(const UniformScaling<Scalar>& s)$/;"	f	class:Transform
prerotate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::prerotate(const RotationType& rotation)$/;"	f	class:Transform
prescale	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::prescale(const MatrixBase<OtherDerived> &other)$/;"	f	class:Transform
prescale	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^inline Transform<Scalar,Dim,Mode,Options>& Transform<Scalar,Dim,Mode,Options>::prescale(Scalar s)$/;"	f	class:Transform
preshear	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::preshear(Scalar sx, Scalar sy)$/;"	f	class:Transform
pretranslate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::pretranslate(const MatrixBase<OtherDerived> &other)$/;"	f	class:Transform
projective_transform_inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^struct projective_transform_inverse$/;"	s	namespace:internal
projective_transform_inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^struct projective_transform_inverse<TransformType, Projective>$/;"	s	namespace:internal
rotate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::rotate(const RotationType& rotation)$/;"	f	class:Transform
rotation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::rotation() const$/;"	f	class:Transform
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  EIGEN_STRONG_INLINE static ResultType run(const TransformType& T, const MatrixType& other)$/;"	f	struct:internal::transform_right_product_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  static ResultType run(const Lhs& lhs, const Rhs& rhs)$/;"	f	struct:internal::transform_transform_product_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  static ResultType run(const Other& other, const TransformType& tr)$/;"	f	struct:internal::transform_left_product_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  static ResultType run(const Other& other,const TransformType& tr)$/;"	f	struct:internal::transform_left_product_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  static inline AffinePart run(MatrixType& m)$/;"	f	struct:internal::transform_take_affine_part
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  static inline ConstAffinePart run(const MatrixType& m)$/;"	f	struct:internal::transform_take_affine_part
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  static inline MatrixType& run(MatrixType& m) { return m; }$/;"	f	struct:internal::transform_take_affine_part
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  static inline const MatrixType& run(const MatrixType& m) { return m; }$/;"	f	struct:internal::transform_take_affine_part
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  static inline void run(Transform<typename Other::Scalar,Dim,AffineCompact,Options> *transform, const Other& other)$/;"	f	struct:internal::transform_construct_from_matrix
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  static inline void run(Transform<typename Other::Scalar,Dim,Mode,Options> *transform, const Other& other)$/;"	f	struct:internal::transform_construct_from_matrix
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  static inline void run(const TransformType& m, TransformType& res)$/;"	f	struct:internal::projective_transform_inverse
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  static inline void run(const TransformType&, TransformType&)$/;"	f	struct:internal::projective_transform_inverse
scale	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::scale(const MatrixBase<OtherDerived> &other)$/;"	f	class:Transform
scale	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^inline Transform<Scalar,Dim,Mode,Options>& Transform<Scalar,Dim,Mode,Options>::scale(Scalar s)$/;"	f	class:Transform
setIdentity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  void setIdentity() { m_matrix.setIdentity(); }$/;"	f	class:Transform
shear	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::shear(Scalar sx, Scalar sy)$/;"	f	class:Transform
take_affine_part	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  typedef internal::transform_take_affine_part<Transform> take_affine_part;$/;"	t	class:Transform
toQMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^QMatrix Transform<Scalar,Dim,Mode,Options>::toQMatrix(void) const$/;"	f	class:Transform
toQTransform	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^QTransform Transform<Scalar,Dim,Mode,Options>::toQTransform(void) const$/;"	f	class:Transform
transform_construct_from_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^struct transform_construct_from_matrix<Other, AffineCompact,Options,Dim,HDim, HDim,HDim>$/;"	s	namespace:internal
transform_construct_from_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^struct transform_construct_from_matrix<Other, Mode,Options,Dim,HDim, Dim,Dim>$/;"	s	namespace:internal
transform_construct_from_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^struct transform_construct_from_matrix<Other, Mode,Options,Dim,HDim, Dim,HDim>$/;"	s	namespace:internal
transform_construct_from_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^struct transform_construct_from_matrix<Other, Mode,Options,Dim,HDim, HDim,HDim>$/;"	s	namespace:internal
transform_left_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^struct transform_left_product_impl<Other,AffineCompact,Options,Dim,HDim, Dim,HDim>$/;"	s	namespace:internal
transform_left_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^struct transform_left_product_impl<Other,AffineCompact,Options,Dim,HDim, HDim,HDim>$/;"	s	namespace:internal
transform_left_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^struct transform_left_product_impl<Other,Mode,Options,Dim,HDim, Dim,Dim>$/;"	s	namespace:internal
transform_left_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^struct transform_left_product_impl<Other,Mode,Options,Dim,HDim, Dim,HDim>$/;"	s	namespace:internal
transform_left_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^struct transform_left_product_impl<Other,Mode,Options,Dim,HDim, HDim,HDim>$/;"	s	namespace:internal
transform_product_result	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^struct transform_product_result$/;"	s	namespace:internal
transform_right_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^struct transform_right_product_impl< TransformType, MatrixType, 0 >$/;"	s	namespace:internal
transform_right_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^struct transform_right_product_impl< TransformType, MatrixType, 1 >$/;"	s	namespace:internal
transform_right_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^struct transform_right_product_impl< TransformType, MatrixType, 2 >$/;"	s	namespace:internal
transform_take_affine_part	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^struct transform_take_affine_part<Transform<Scalar,Dim,AffineCompact, Options> > {$/;"	s	namespace:internal
transform_take_affine_part	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^template<typename TransformType> struct transform_take_affine_part {$/;"	s	namespace:internal
transform_traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^struct transform_traits$/;"	s	namespace:internal
transform_transform_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^struct transform_transform_product_impl<Transform<Scalar,Dim,LhsMode,LhsOptions>,Transform<Scalar,Dim,RhsMode,RhsOptions>,false >$/;"	s	namespace:internal
transform_transform_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^struct transform_transform_product_impl<Transform<Scalar,Dim,LhsMode,LhsOptions>,Transform<Scalar,Dim,RhsMode,RhsOptions>,true >$/;"	s	namespace:internal
translate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^Transform<Scalar,Dim,Mode,Options>::translate(const MatrixBase<OtherDerived> &other)$/;"	f	class:Transform
translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline ConstTranslationPart translation() const { return m_matrix.template block<Dim,1>(0,Dim); }$/;"	f	class:Transform
translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline TranslationPart translation() { return m_matrix.template block<Dim,1>(0,Dim); }$/;"	f	class:Transform
translationExt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline Block<MatrixType,int(Mode)==int(Projective)?HDim:Dim,1> translationExt()$/;"	f	class:Transform
translationExt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Transform.h	/^  inline const Block<MatrixType,int(Mode)==int(Projective)?HDim:Dim,1> translationExt() const$/;"	f	class:Transform
AffineTransformType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  typedef Transform<Scalar,Dim,Affine> AffineTransformType;$/;"	t	class:Translation
Dim	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  enum { Dim = _Dim };$/;"	e	enum:Translation::<anonymous>
EIGEN_TRANSLATION_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	26;"	d
Identity	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  static const Translation Identity() { return Translation(VectorType::Zero()); }$/;"	f	class:Translation
LinearMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  typedef Matrix<Scalar,Dim,Dim> LinearMatrixType;$/;"	t	class:Translation
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  typedef _Scalar Scalar;$/;"	t	class:Translation
Translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  Translation() {}$/;"	f	class:Translation
Translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  explicit inline Translation(const VectorType& vector) : m_coeffs(vector) {}$/;"	f	class:Translation
Translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  inline Translation(const Scalar& sx, const Scalar& sy)$/;"	f	class:Translation
Translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  inline Translation(const Scalar& sx, const Scalar& sy, const Scalar& sz)$/;"	f	class:Translation
Translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  inline explicit Translation(const Translation<OtherScalarType,Dim>& other)$/;"	f	class:Translation
Translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^class Translation$/;"	c
Translation2d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^typedef Translation<double,2> Translation2d;$/;"	t
Translation2f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^typedef Translation<float, 2> Translation2f;$/;"	t
Translation3d	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^typedef Translation<double,3> Translation3d;$/;"	t
Translation3f	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^typedef Translation<float, 3> Translation3f;$/;"	t
VectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  typedef Matrix<Scalar,Dim,1> VectorType;$/;"	t	class:Translation
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  inline typename internal::cast_return_type<Translation,Translation<NewScalarType,Dim> >::type cast() const$/;"	f	class:Translation
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  Translation inverse() const { return Translation(-m_coeffs); }$/;"	f	class:Translation
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  bool isApprox(const Translation& other, typename NumTraits<Scalar>::Real prec = NumTraits<Scalar>::dummy_precision()) const$/;"	f	class:Translation
m_coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  VectorType m_coeffs;$/;"	m	class:Translation
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  inline AffineTransformType operator*(const EigenBase<OtherDerived>& linear, const Translation& t)$/;"	f	class:Translation
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  inline AffineTransformType operator*(const RotationBase<Derived,Dim>& r) const$/;"	f	class:Translation
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  inline Transform<Scalar,Dim,Mode> operator* (const Transform<Scalar,Dim,Mode,Options>& t) const$/;"	f	class:Translation
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  inline Translation operator* (const Translation& other) const$/;"	f	class:Translation
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  inline VectorType operator* (const VectorType& other) const$/;"	f	class:Translation
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^Translation<Scalar,Dim>::operator* (const EigenBase<OtherDerived>& linear) const$/;"	f	class:Translation
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^Translation<Scalar,Dim>::operator* (const UniformScaling<Scalar>& other) const$/;"	f	class:Translation
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  Translation& operator=(const Translation& other)$/;"	f	class:Translation
translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  VectorType& translation() { return m_coeffs; }$/;"	f	class:Translation
translation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  const VectorType& translation() const { return m_coeffs; }$/;"	f	class:Translation
vector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  VectorType& vector() { return m_coeffs; }$/;"	f	class:Translation
vector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  const VectorType& vector() const { return m_coeffs; }$/;"	f	class:Translation
x	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  inline Scalar x() const { return m_coeffs.x(); }$/;"	f	class:Translation
x	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  inline Scalar& x() { return m_coeffs.x(); }$/;"	f	class:Translation
y	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  inline Scalar y() const { return m_coeffs.y(); }$/;"	f	class:Translation
y	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  inline Scalar& y() { return m_coeffs.y(); }$/;"	f	class:Translation
z	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  inline Scalar z() const { return m_coeffs.z(); }$/;"	f	class:Translation
z	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Translation.h	/^  inline Scalar& z() { return m_coeffs.z(); }$/;"	f	class:Translation
EIGEN_UMEYAMA_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Umeyama.h	26;"	d
HomogeneousDimension	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Umeyama.h	/^    HomogeneousDimension = int(MinRowsAtCompileTime) == Dynamic ? Dynamic : int(MinRowsAtCompileTime)+1$/;"	e	enum:internal::umeyama_transform_matrix_type::<anonymous>
MinRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Umeyama.h	/^    MinRowsAtCompileTime = EIGEN_SIZE_MIN_PREFER_DYNAMIC(MatrixType::RowsAtCompileTime, OtherMatrixType::RowsAtCompileTime),$/;"	e	enum:internal::umeyama_transform_matrix_type::<anonymous>
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Umeyama.h	/^namespace internal {$/;"	n
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Umeyama.h	/^  > type;$/;"	t	struct:internal::umeyama_transform_matrix_type
umeyama	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Umeyama.h	/^umeyama(const MatrixBase<Derived>& src, const MatrixBase<OtherDerived>& dst, bool with_scaling = true)$/;"	f
umeyama_transform_matrix_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/Umeyama.h	/^struct umeyama_transform_matrix_type$/;"	s	namespace:internal
EIGEN_GEOMETRY_SSE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/arch/Geometry_SSE.h	27;"	d
cross3_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/arch/Geometry_SSE.h	/^struct cross3_impl<Architecture::SSE,VectorLhs,VectorRhs,float,true>$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/arch/Geometry_SSE.h	/^namespace internal {$/;"	n
quat_product	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/arch/Geometry_SSE.h	/^struct quat_product<Architecture::SSE, Derived, OtherDerived, double, Aligned>$/;"	s	namespace:internal
quat_product	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/arch/Geometry_SSE.h	/^struct quat_product<Architecture::SSE, Derived, OtherDerived, float, Aligned>$/;"	s	namespace:internal
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/arch/Geometry_SSE.h	/^  inline static Quaternion<double> run(const QuaternionBase<Derived>& _a, const QuaternionBase<OtherDerived>& _b)$/;"	f	struct:internal::quat_product
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/arch/Geometry_SSE.h	/^  inline static Quaternion<float> run(const QuaternionBase<Derived>& _a, const QuaternionBase<OtherDerived>& _b)$/;"	f	struct:internal::quat_product
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Geometry/arch/Geometry_SSE.h	/^  run(const VectorLhs& lhs, const VectorRhs& rhs)$/;"	f	struct:internal::cross3_impl
EIGEN_BLOCK_HOUSEHOLDER_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/BlockHouseholder.h	27;"	d
apply_block_householder_on_the_left	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/BlockHouseholder.h	/^void apply_block_householder_on_the_left(MatrixType& mat, const VectorsType& vectors, const CoeffsType& hCoeffs)$/;"	f	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/BlockHouseholder.h	/^namespace internal {$/;"	n
make_block_householder_triangular_factor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/BlockHouseholder.h	/^void make_block_householder_triangular_factor(TriangularFactorType& triFactor, const VectorsType& vectors, const CoeffsType& hCoeffs)$/;"	f	namespace:internal
EIGEN_HOUSEHOLDER_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/Householder.h	27;"	d
applyHouseholderOnTheLeft	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/Householder.h	/^void MatrixBase<Derived>::applyHouseholderOnTheLeft($/;"	f	class:MatrixBase
applyHouseholderOnTheRight	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/Householder.h	/^void MatrixBase<Derived>::applyHouseholderOnTheRight($/;"	f	class:MatrixBase
decrement_size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/Householder.h	/^template<int n> struct decrement_size$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/Householder.h	/^namespace internal {$/;"	n
makeHouseholder	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/Householder.h	/^void MatrixBase<Derived>::makeHouseholder($/;"	f	class:MatrixBase
makeHouseholderInPlace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/Householder.h	/^void MatrixBase<Derived>::makeHouseholderInPlace(Scalar& tau, RealScalar& beta)$/;"	f	class:MatrixBase
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/Householder.h	/^    ret = n==Dynamic ? n : n-1$/;"	e	enum:internal::decrement_size::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^      ColsAtCompileTime = internal::traits<HouseholderSequence>::ColsAtCompileTime,$/;"	e	enum:HouseholderSequence::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    ColsAtCompileTime = RowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
ConjugateReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    > ConjugateReturnType;$/;"	t	class:HouseholderSequence
EIGEN_HOUSEHOLDER_SEQUENCE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	27;"	d
EssentialVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^            EssentialVectorType;$/;"	t	class:HouseholderSequence
EssentialVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^  typedef Block<const VectorsType, Dynamic, 1> EssentialVectorType;$/;"	t	struct:internal::hseq_side_dependent_impl
EssentialVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^  typedef Transpose<Block<const VectorsType, 1, Dynamic> > EssentialVectorType;$/;"	t	struct:internal::hseq_side_dependent_impl
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    Flags = 0$/;"	e	enum:internal::traits::<anonymous>
HouseholderSequence	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    HouseholderSequence(const HouseholderSequence& other)$/;"	f	class:HouseholderSequence
HouseholderSequence	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    HouseholderSequence(const VectorsType& v, const CoeffsType& h)$/;"	f	class:HouseholderSequence
HouseholderSequence	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^template<typename VectorsType, typename CoeffsType, int Side> class HouseholderSequence$/;"	c
HouseholderSequenceType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^  typedef HouseholderSequence<VectorsType, CoeffsType, OnTheLeft> HouseholderSequenceType;$/;"	t	struct:internal::hseq_side_dependent_impl
HouseholderSequenceType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^  typedef HouseholderSequence<VectorsType, CoeffsType, OnTheRight> HouseholderSequenceType;$/;"	t	struct:internal::hseq_side_dependent_impl
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    typedef typename VectorsType::Index Index;$/;"	t	class:HouseholderSequence
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^  typedef typename VectorsType::Index Index;$/;"	t	struct:internal::hseq_side_dependent_impl
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^  typedef typename VectorsType::Index Index;$/;"	t	struct:internal::traits
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^      MaxColsAtCompileTime = internal::traits<HouseholderSequence>::MaxColsAtCompileTime$/;"	e	enum:HouseholderSequence::<anonymous>
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    MaxColsAtCompileTime = MaxRowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^      MaxRowsAtCompileTime = internal::traits<HouseholderSequence>::MaxRowsAtCompileTime,$/;"	e	enum:HouseholderSequence::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    MaxRowsAtCompileTime = Side==OnTheLeft ? traits<VectorsType>::MaxRowsAtCompileTime$/;"	e	enum:internal::traits::<anonymous>
ResultScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    ResultScalar;$/;"	t	struct:internal::matrix_type_times_scalar_type
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^      RowsAtCompileTime = internal::traits<HouseholderSequence>::RowsAtCompileTime,$/;"	e	enum:HouseholderSequence::<anonymous>
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    RowsAtCompileTime = Side==OnTheLeft ? traits<VectorsType>::RowsAtCompileTime$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    typedef typename internal::traits<HouseholderSequence>::Scalar Scalar;$/;"	t	class:HouseholderSequence
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^  typedef typename VectorsType::Scalar Scalar;$/;"	t	struct:internal::traits
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^  typedef typename VectorsType::StorageKind StorageKind;$/;"	t	struct:internal::traits
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^                 0, MatrixType::MaxRowsAtCompileTime, MatrixType::MaxColsAtCompileTime> Type;$/;"	t	struct:internal::matrix_type_times_scalar_type
adjoint	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    ConjugateReturnType adjoint() const$/;"	f	class:HouseholderSequence
applyThisOnTheLeft	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    template<typename Dest> inline void applyThisOnTheLeft(Dest& dst) const$/;"	f	class:HouseholderSequence
applyThisOnTheRight	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    template<typename Dest> inline void applyThisOnTheRight(Dest& dst) const$/;"	f	class:HouseholderSequence
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    Index cols() const { return rows(); }$/;"	f	class:HouseholderSequence
conjugate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    ConjugateReturnType conjugate() const$/;"	f	class:HouseholderSequence
essentialVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    const EssentialVectorType essentialVector(Index k) const$/;"	f	class:HouseholderSequence
essentialVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^  static inline const EssentialVectorType essentialVector(const HouseholderSequenceType& h, Index k)$/;"	f	struct:internal::hseq_side_dependent_impl
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    template<typename DestType> void evalTo(DestType& dst) const$/;"	f	class:HouseholderSequence
householderSequence	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^HouseholderSequence<VectorsType,CoeffsType> householderSequence(const VectorsType& v, const CoeffsType& h)$/;"	f
hseq_side_dependent_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^struct hseq_side_dependent_impl$/;"	s	namespace:internal
hseq_side_dependent_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^struct hseq_side_dependent_impl<VectorsType, CoeffsType, OnTheRight>$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^namespace internal {$/;"	n
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    ConjugateReturnType inverse() const { return adjoint(); }$/;"	f	class:HouseholderSequence
length	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    Index length() const { return m_length; }  \/**< \\brief Returns the length of the Householder sequence. *\/$/;"	f	class:HouseholderSequence
m_coeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    typename CoeffsType::Nested m_coeffs;$/;"	m	class:HouseholderSequence
m_length	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    Index m_length;$/;"	m	class:HouseholderSequence
m_shift	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    Index m_shift;$/;"	m	class:HouseholderSequence
m_trans	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    bool m_trans;$/;"	m	class:HouseholderSequence
m_vectors	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    typename VectorsType::Nested m_vectors;$/;"	m	class:HouseholderSequence
matrix_type_times_scalar_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^template<typename OtherScalarType, typename MatrixType> struct matrix_type_times_scalar_type$/;"	s	namespace:internal
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    typename internal::matrix_type_times_scalar_type<Scalar, OtherDerived>::Type operator*(const MatrixBase<OtherDerived>& other) const$/;"	f	class:HouseholderSequence
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^typename internal::matrix_type_times_scalar_type<typename VectorsType::Scalar,OtherDerived>::Type operator*(const MatrixBase<OtherDerived>& other, const HouseholderSequence<VectorsType,CoeffsType,Side>& h)$/;"	f
rightHouseholderSequence	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^HouseholderSequence<VectorsType,CoeffsType,OnTheRight> rightHouseholderSequence(const VectorsType& v, const CoeffsType& h)$/;"	f
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    Index rows() const { return Side==OnTheLeft ? m_vectors.rows() : m_vectors.cols(); }$/;"	f	class:HouseholderSequence
setLength	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    HouseholderSequence& setLength(Index length)$/;"	f	class:HouseholderSequence
setShift	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    HouseholderSequence& setShift(Index shift)$/;"	f	class:HouseholderSequence
setTrans	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    HouseholderSequence& setTrans(bool trans)$/;"	f	class:HouseholderSequence
shift	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    Index shift() const { return m_shift; }    \/**< \\brief Returns the shift of the Householder sequence. *\/$/;"	f	class:HouseholderSequence
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^struct traits<HouseholderSequence<VectorsType,CoeffsType,Side> >$/;"	s	namespace:internal
trans	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    bool trans() const { return m_trans; }     \/**< \\brief Returns the transpose flag. *\/$/;"	f	class:HouseholderSequence
transpose	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Householder/HouseholderSequence.h	/^    HouseholderSequence transpose() const$/;"	f	class:HouseholderSequence
EIGEN_JACOBI_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	27;"	d
JacobiRotation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^    JacobiRotation() {}$/;"	f	class:JacobiRotation
JacobiRotation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^    JacobiRotation(const Scalar& c, const Scalar& s) : m_c(c), m_s(s) {}$/;"	f	class:JacobiRotation
JacobiRotation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^template<typename Scalar> class JacobiRotation$/;"	c
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:JacobiRotation
adjoint	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^    JacobiRotation adjoint() const { return JacobiRotation(internal::conj(m_c), -m_s); }$/;"	f	class:JacobiRotation
applyOnTheLeft	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^inline void MatrixBase<Derived>::applyOnTheLeft(Index p, Index q, const JacobiRotation<OtherScalar>& j)$/;"	f	class:MatrixBase
applyOnTheRight	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^inline void MatrixBase<Derived>::applyOnTheRight(Index p, Index q, const JacobiRotation<OtherScalar>& j)$/;"	f	class:MatrixBase
apply_rotation_in_the_plane	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^void \/*EIGEN_DONT_INLINE*\/ apply_rotation_in_the_plane(VectorX& _x, VectorY& _y, const JacobiRotation<OtherScalar>& j)$/;"	f	namespace:internal
c	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^    Scalar c() const { return m_c; }$/;"	f	class:JacobiRotation
c	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^    Scalar& c() { return m_c; }$/;"	f	class:JacobiRotation
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^namespace internal {$/;"	n
m_c	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^    Scalar m_c, m_s;$/;"	m	class:JacobiRotation
m_s	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^    Scalar m_c, m_s;$/;"	m	class:JacobiRotation
makeGivens	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^void JacobiRotation<Scalar>::makeGivens(const Scalar& p, const Scalar& q, Scalar* r, internal::false_type)$/;"	f	class:JacobiRotation
makeGivens	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^void JacobiRotation<Scalar>::makeGivens(const Scalar& p, const Scalar& q, Scalar* r, internal::true_type)$/;"	f	class:JacobiRotation
makeGivens	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^void JacobiRotation<Scalar>::makeGivens(const Scalar& p, const Scalar& q, Scalar* z)$/;"	f	class:JacobiRotation
makeJacobi	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^bool JacobiRotation<Scalar>::makeJacobi(RealScalar x, Scalar y, RealScalar z)$/;"	f	class:JacobiRotation
makeJacobi	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^inline bool JacobiRotation<Scalar>::makeJacobi(const MatrixBase<Derived>& m, typename Derived::Index p, typename Derived::Index q)$/;"	f	class:JacobiRotation
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^    JacobiRotation operator*(const JacobiRotation& other)$/;"	f	class:JacobiRotation
s	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^    Scalar s() const { return m_s; }$/;"	f	class:JacobiRotation
s	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^    Scalar& s() { return m_s; }$/;"	f	class:JacobiRotation
transpose	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Jacobi/Jacobi.h	/^    JacobiRotation transpose() const { return JacobiRotation(m_c, -internal::conj(m_s)); }$/;"	f	class:JacobiRotation
EIGEN_DETERMINANT_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Determinant.h	26;"	d
bruteforce_det3_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Determinant.h	/^inline const typename Derived::Scalar bruteforce_det3_helper$/;"	f	namespace:internal
bruteforce_det4_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Determinant.h	/^const typename Derived::Scalar bruteforce_det4_helper$/;"	f	namespace:internal
determinant	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Determinant.h	/^inline typename internal::traits<Derived>::Scalar MatrixBase<Derived>::determinant() const$/;"	f	class:MatrixBase
determinant_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Determinant.h	/^> struct determinant_impl$/;"	s	namespace:internal
determinant_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Determinant.h	/^template<typename Derived> struct determinant_impl<Derived, 1>$/;"	s	namespace:internal
determinant_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Determinant.h	/^template<typename Derived> struct determinant_impl<Derived, 2>$/;"	s	namespace:internal
determinant_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Determinant.h	/^template<typename Derived> struct determinant_impl<Derived, 3>$/;"	s	namespace:internal
determinant_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Determinant.h	/^template<typename Derived> struct determinant_impl<Derived, 4>$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Determinant.h	/^namespace internal {$/;"	n
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Determinant.h	/^  static inline typename traits<Derived>::Scalar run(const Derived& m)$/;"	f	struct:internal::determinant_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Determinant.h	/^  static typename traits<Derived>::Scalar run(const Derived& m)$/;"	f	struct:internal::determinant_impl
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:FullPivLU::<anonymous>
EIGEN_LU_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	26;"	d
FullPivLU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^FullPivLU<MatrixType>::FullPivLU()$/;"	f	class:FullPivLU
FullPivLU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^FullPivLU<MatrixType>::FullPivLU(Index rows, Index cols)$/;"	f	class:FullPivLU
FullPivLU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^FullPivLU<MatrixType>::FullPivLU(const MatrixType& matrix)$/;"	f	class:FullPivLU
FullPivLU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^template<typename _MatrixType> class FullPivLU$/;"	c
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:FullPivLU
IntColVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    typedef typename internal::plain_col_type<MatrixType, Index>::type IntColVectorType;$/;"	t	class:FullPivLU
IntRowVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    typedef typename internal::plain_row_type<MatrixType, Index>::type IntRowVectorType;$/;"	t	class:FullPivLU
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:FullPivLU
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:FullPivLU::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:FullPivLU::<anonymous>
MaxSmallDimAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^  enum { MaxSmallDimAtCompileTime = EIGEN_SIZE_MIN_PREFER_FIXED($/;"	e	enum:internal::image_retval::<anonymous>
MaxSmallDimAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^  enum { MaxSmallDimAtCompileTime = EIGEN_SIZE_MIN_PREFER_FIXED($/;"	e	enum:internal::kernel_retval::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^      Options = MatrixType::Options,$/;"	e	enum:FullPivLU::<anonymous>
PermutationPType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    typedef PermutationMatrix<RowsAtCompileTime, MaxRowsAtCompileTime> PermutationPType;$/;"	t	class:FullPivLU
PermutationQType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    typedef PermutationMatrix<ColsAtCompileTime, MaxColsAtCompileTime> PermutationQType;$/;"	t	class:FullPivLU
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    typedef typename NumTraits<typename MatrixType::Scalar>::Real RealScalar;$/;"	t	class:FullPivLU
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:FullPivLU::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:FullPivLU
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    typedef typename internal::traits<MatrixType>::StorageKind StorageKind;$/;"	t	class:FullPivLU
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    inline Index cols() const { return m_lu.cols(); }$/;"	f	class:FullPivLU
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^FullPivLU<MatrixType>& FullPivLU<MatrixType>::compute(const MatrixType& matrix)$/;"	f	class:FullPivLU
determinant	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^typename internal::traits<MatrixType>::Scalar FullPivLU<MatrixType>::determinant() const$/;"	f	class:FullPivLU
dimensionOfKernel	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    inline Index dimensionOfKernel() const$/;"	f	class:FullPivLU
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::image_retval
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::kernel_retval
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::solve_retval
fullPivLu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^MatrixBase<Derived>::fullPivLu() const$/;"	f	class:MatrixBase
image	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^      image(const MatrixType& originalMatrix) const$/;"	f	class:FullPivLU
image_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^struct image_retval<FullPivLU<_MatrixType> >$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^namespace internal {$/;"	n
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    inline const internal::solve_retval<FullPivLU,typename MatrixType::IdentityReturnType> inverse() const$/;"	f	class:FullPivLU
isInjective	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    inline bool isInjective() const$/;"	f	class:FullPivLU
isInvertible	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    inline bool isInvertible() const$/;"	f	class:FullPivLU
isSurjective	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    inline bool isSurjective() const$/;"	f	class:FullPivLU
kernel	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    inline const internal::kernel_retval<FullPivLU> kernel() const$/;"	f	class:FullPivLU
kernel_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^struct kernel_retval<FullPivLU<_MatrixType> >$/;"	s	namespace:internal
m_colsTranspositions	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    IntRowVectorType m_colsTranspositions;$/;"	m	class:FullPivLU
m_det_pq	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    Index m_det_pq, m_nonzero_pivots;$/;"	m	class:FullPivLU
m_isInitialized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    bool m_isInitialized, m_usePrescribedThreshold;$/;"	m	class:FullPivLU
m_lu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    MatrixType m_lu;$/;"	m	class:FullPivLU
m_maxpivot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    RealScalar m_maxpivot, m_prescribedThreshold;$/;"	m	class:FullPivLU
m_nonzero_pivots	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    Index m_det_pq, m_nonzero_pivots;$/;"	m	class:FullPivLU
m_p	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    PermutationPType m_p;$/;"	m	class:FullPivLU
m_prescribedThreshold	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    RealScalar m_maxpivot, m_prescribedThreshold;$/;"	m	class:FullPivLU
m_q	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    PermutationQType m_q;$/;"	m	class:FullPivLU
m_rowsTranspositions	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    IntColVectorType m_rowsTranspositions;$/;"	m	class:FullPivLU
m_usePrescribedThreshold	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    bool m_isInitialized, m_usePrescribedThreshold;$/;"	m	class:FullPivLU
matrixLU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    inline const MatrixType& matrixLU() const$/;"	f	class:FullPivLU
maxPivot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    RealScalar maxPivot() const { return m_maxpivot; }$/;"	f	class:FullPivLU
nonzeroPivots	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    inline Index nonzeroPivots() const$/;"	f	class:FullPivLU
permutationP	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    inline const PermutationPType& permutationP() const$/;"	f	class:FullPivLU
permutationQ	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    inline const PermutationQType& permutationQ() const$/;"	f	class:FullPivLU
rank	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    inline Index rank() const$/;"	f	class:FullPivLU
reconstructedMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^MatrixType FullPivLU<MatrixType>::reconstructedMatrix() const$/;"	f	class:FullPivLU
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    inline Index rows() const { return m_lu.rows(); }$/;"	f	class:FullPivLU
setThreshold	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    FullPivLU& setThreshold(Default_t)$/;"	f	class:FullPivLU
setThreshold	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    FullPivLU& setThreshold(const RealScalar& threshold)$/;"	f	class:FullPivLU
solve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:FullPivLU
solve_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^struct solve_retval<FullPivLU<_MatrixType>, Rhs>$/;"	s	namespace:internal
threshold	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/FullPivLU.h	/^    RealScalar threshold() const$/;"	f	class:FullPivLU
EIGEN_INVERSE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^  typedef typename MatrixType::Index Index;$/;"	t	struct:internal::inverse_impl
MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^  typedef typename internal::eval<MatrixType>::type MatrixTypeNested;$/;"	t	struct:internal::inverse_impl
MatrixTypeNestedCleaned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^  typedef typename remove_all<MatrixTypeNested>::type MatrixTypeNestedCleaned;$/;"	t	struct:internal::inverse_impl
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^  typedef typename MatrixType::PlainObject ReturnType;$/;"	t	struct:internal::traits
cofactor_3x3	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^inline typename MatrixType::Scalar cofactor_3x3(const MatrixType& m)$/;"	f	namespace:internal
cofactor_4x4	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^inline typename MatrixType::Scalar cofactor_4x4(const MatrixType& matrix)$/;"	f	namespace:internal
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^  inline Index cols() const { return m_matrix.cols(); }$/;"	f	struct:internal::inverse_impl
computeInverseAndDetWithCheck	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^inline void MatrixBase<Derived>::computeInverseAndDetWithCheck($/;"	f	class:MatrixBase
computeInverseWithCheck	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^inline void MatrixBase<Derived>::computeInverseWithCheck($/;"	f	class:MatrixBase
compute_inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^struct compute_inverse$/;"	s	namespace:internal
compute_inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^struct compute_inverse<MatrixType, ResultType, 1>$/;"	s	namespace:internal
compute_inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^struct compute_inverse<MatrixType, ResultType, 2>$/;"	s	namespace:internal
compute_inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^struct compute_inverse<MatrixType, ResultType, 3>$/;"	s	namespace:internal
compute_inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^struct compute_inverse<MatrixType, ResultType, 4>$/;"	s	namespace:internal
compute_inverse_and_det_with_check	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^struct compute_inverse_and_det_with_check { \/* nothing! general case not supported. *\/ };$/;"	s	namespace:internal
compute_inverse_and_det_with_check	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^struct compute_inverse_and_det_with_check<MatrixType, ResultType, 1>$/;"	s	namespace:internal
compute_inverse_and_det_with_check	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^struct compute_inverse_and_det_with_check<MatrixType, ResultType, 2>$/;"	s	namespace:internal
compute_inverse_and_det_with_check	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^struct compute_inverse_and_det_with_check<MatrixType, ResultType, 3>$/;"	s	namespace:internal
compute_inverse_and_det_with_check	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^struct compute_inverse_and_det_with_check<MatrixType, ResultType, 4>$/;"	s	namespace:internal
compute_inverse_size2_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^inline void compute_inverse_size2_helper($/;"	f	namespace:internal
compute_inverse_size3_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^inline void compute_inverse_size3_helper($/;"	f	namespace:internal
compute_inverse_size4	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^struct compute_inverse_size4$/;"	s	namespace:internal
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^  template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:internal::inverse_impl
general_det3_helper	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^inline const typename Derived::Scalar general_det3_helper$/;"	f	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^namespace internal {$/;"	n
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^inline const internal::inverse_impl<Derived> MatrixBase<Derived>::inverse() const$/;"	f	class:MatrixBase
inverse_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^  inverse_impl(const MatrixType& matrix)$/;"	f	struct:internal::inverse_impl
inverse_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^struct inverse_impl : public ReturnByValue<inverse_impl<MatrixType> >$/;"	s	namespace:internal
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^  const MatrixTypeNested m_matrix;$/;"	m	struct:internal::inverse_impl
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^  inline Index rows() const { return m_matrix.rows(); }$/;"	f	struct:internal::inverse_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^  static inline void run($/;"	f	struct:internal::compute_inverse_and_det_with_check
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^  static inline void run(const MatrixType& matrix, ResultType& result)$/;"	f	struct:internal::compute_inverse
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^  static void run(const MatrixType& matrix, ResultType& result)$/;"	f	struct:internal::compute_inverse_size4
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/Inverse.h	/^struct traits<inverse_impl<MatrixType> >$/;"	s	namespace:internal
BlockType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^  typedef Block<MatrixType,Dynamic,Dynamic> BlockType;$/;"	t	struct:internal::partial_lu_impl
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:PartialPivLU::<anonymous>
EIGEN_PARTIALLU_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	27;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:PartialPivLU
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^  typedef typename MatrixType::Index Index;$/;"	t	struct:internal::partial_lu_impl
MapLU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^  typedef Map<Matrix<Scalar, Dynamic, Dynamic, StorageOrder> > MapLU;$/;"	t	struct:internal::partial_lu_impl
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:PartialPivLU
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^  typedef Block<MapLU, Dynamic, Dynamic> MatrixType;$/;"	t	struct:internal::partial_lu_impl
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:PartialPivLU::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:PartialPivLU::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^      Options = MatrixType::Options,$/;"	e	enum:PartialPivLU::<anonymous>
PartialPivLU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^PartialPivLU<MatrixType>::PartialPivLU()$/;"	f	class:PartialPivLU
PartialPivLU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^PartialPivLU<MatrixType>::PartialPivLU(Index size)$/;"	f	class:PartialPivLU
PartialPivLU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^PartialPivLU<MatrixType>::PartialPivLU(const MatrixType& matrix)$/;"	f	class:PartialPivLU
PartialPivLU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^template<typename _MatrixType> class PartialPivLU$/;"	c
PermutationType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^    typedef PermutationMatrix<RowsAtCompileTime, MaxRowsAtCompileTime> PermutationType;$/;"	t	class:PartialPivLU
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^    typedef typename NumTraits<typename MatrixType::Scalar>::Real RealScalar;$/;"	t	class:PartialPivLU
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^  typedef typename MatrixType::RealScalar RealScalar;$/;"	t	struct:internal::partial_lu_impl
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:PartialPivLU::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:PartialPivLU
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^    typedef typename internal::traits<MatrixType>::StorageKind StorageKind;$/;"	t	class:PartialPivLU
TranspositionType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^    typedef Transpositions<RowsAtCompileTime, MaxRowsAtCompileTime> TranspositionType;$/;"	t	class:PartialPivLU
blocked_lu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^  static Index blocked_lu(Index rows, Index cols, Scalar* lu_data, Index luStride, PivIndex* row_transpositions, PivIndex& nb_transpositions, Index maxBlockSize=256)$/;"	f	struct:internal::partial_lu_impl
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^    inline Index cols() const { return m_lu.cols(); }$/;"	f	class:PartialPivLU
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^PartialPivLU<MatrixType>& PartialPivLU<MatrixType>::compute(const MatrixType& matrix)$/;"	f	class:PartialPivLU
determinant	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^typename internal::traits<MatrixType>::Scalar PartialPivLU<MatrixType>::determinant() const$/;"	f	class:PartialPivLU
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::solve_retval
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^namespace internal {$/;"	n
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^    inline const internal::solve_retval<PartialPivLU,typename MatrixType::IdentityReturnType> inverse() const$/;"	f	class:PartialPivLU
lu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^MatrixBase<Derived>::lu() const$/;"	f	class:MatrixBase
m_det_p	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^    Index m_det_p;$/;"	m	class:PartialPivLU
m_isInitialized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^    bool m_isInitialized;$/;"	m	class:PartialPivLU
m_lu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^    MatrixType m_lu;$/;"	m	class:PartialPivLU
m_p	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^    PermutationType m_p;$/;"	m	class:PartialPivLU
m_rowsTranspositions	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^    TranspositionType m_rowsTranspositions;$/;"	m	class:PartialPivLU
matrixLU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^    inline const MatrixType& matrixLU() const$/;"	f	class:PartialPivLU
partialPivLu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^MatrixBase<Derived>::partialPivLu() const$/;"	f	class:MatrixBase
partial_lu_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^struct partial_lu_impl$/;"	s	namespace:internal
partial_lu_inplace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^void partial_lu_inplace(MatrixType& lu, TranspositionType& row_transpositions, typename TranspositionType::Index& nb_transpositions)$/;"	f	namespace:internal
permutationP	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^    inline const PermutationType& permutationP() const$/;"	f	class:PartialPivLU
reconstructedMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^MatrixType PartialPivLU<MatrixType>::reconstructedMatrix() const$/;"	f	class:PartialPivLU
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^    inline Index rows() const { return m_lu.rows(); }$/;"	f	class:PartialPivLU
solve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:PartialPivLU
solve_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^struct solve_retval<PartialPivLU<_MatrixType>, Rhs>$/;"	s	namespace:internal
unblocked_lu	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/PartialPivLU.h	/^  static Index unblocked_lu(MatrixType& lu, PivIndex* row_transpositions, PivIndex& nb_transpositions)$/;"	f	struct:internal::partial_lu_impl
EIGEN_INVERSE_SSE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/arch/Inverse_SSE.h	43;"	d
MatrixAlignment	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/arch/Inverse_SSE.h	/^    MatrixAlignment     = bool(MatrixType::Flags&AlignedBit),$/;"	e	enum:internal::compute_inverse_size4::<anonymous>
MatrixAlignment	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/arch/Inverse_SSE.h	/^    MatrixAlignment = bool(MatrixType::Flags&AlignedBit),$/;"	e	enum:internal::compute_inverse_size4::<anonymous>
ResultAlignment	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/arch/Inverse_SSE.h	/^    ResultAlignment     = bool(ResultType::Flags&AlignedBit),$/;"	e	enum:internal::compute_inverse_size4::<anonymous>
ResultAlignment	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/arch/Inverse_SSE.h	/^    ResultAlignment = bool(ResultType::Flags&AlignedBit),$/;"	e	enum:internal::compute_inverse_size4::<anonymous>
StorageOrdersMatch	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/arch/Inverse_SSE.h	/^    StorageOrdersMatch  = (MatrixType::Flags&RowMajorBit) == (ResultType::Flags&RowMajorBit)$/;"	e	enum:internal::compute_inverse_size4::<anonymous>
compute_inverse_size4	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/arch/Inverse_SSE.h	/^struct compute_inverse_size4<Architecture::SSE, double, MatrixType, ResultType>$/;"	s	namespace:internal
compute_inverse_size4	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/arch/Inverse_SSE.h	/^struct compute_inverse_size4<Architecture::SSE, float, MatrixType, ResultType>$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/arch/Inverse_SSE.h	/^namespace internal {$/;"	n
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/LU/arch/Inverse_SSE.h	/^  static void run(const MatrixType& matrix, ResultType& result)$/;"	f	struct:internal::compute_inverse_size4
ColPivHouseholderQR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    ColPivHouseholderQR()$/;"	f	class:ColPivHouseholderQR
ColPivHouseholderQR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    ColPivHouseholderQR(Index rows, Index cols)$/;"	f	class:ColPivHouseholderQR
ColPivHouseholderQR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    ColPivHouseholderQR(const MatrixType& matrix)$/;"	f	class:ColPivHouseholderQR
ColPivHouseholderQR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^template<typename _MatrixType> class ColPivHouseholderQR$/;"	c
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:ColPivHouseholderQR::<anonymous>
EIGEN_COLPIVOTINGHOUSEHOLDERQR_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	27;"	d
HCoeffsType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef typename internal::plain_diag_type<MatrixType>::type HCoeffsType;$/;"	t	class:ColPivHouseholderQR
HouseholderSequenceType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef typename HouseholderSequence<MatrixType,HCoeffsType>::ConjugateReturnType HouseholderSequenceType;$/;"	t	class:ColPivHouseholderQR
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:ColPivHouseholderQR
IntRowVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef typename internal::plain_row_type<MatrixType, Index>::type IntRowVectorType;$/;"	t	class:ColPivHouseholderQR
MatrixQType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef Matrix<Scalar, RowsAtCompileTime, RowsAtCompileTime, Options, MaxRowsAtCompileTime, MaxRowsAtCompileTime> MatrixQType;$/;"	t	class:ColPivHouseholderQR
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:ColPivHouseholderQR
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:ColPivHouseholderQR::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:ColPivHouseholderQR::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^      Options = MatrixType::Options,$/;"	e	enum:ColPivHouseholderQR::<anonymous>
PermutationType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef PermutationMatrix<ColsAtCompileTime, MaxColsAtCompileTime> PermutationType;$/;"	t	class:ColPivHouseholderQR
RealRowVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef typename internal::plain_row_type<MatrixType, RealScalar>::type RealRowVectorType;$/;"	t	class:ColPivHouseholderQR
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:ColPivHouseholderQR
RowVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef typename internal::plain_row_type<MatrixType>::type RowVectorType;$/;"	t	class:ColPivHouseholderQR
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:ColPivHouseholderQR::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:ColPivHouseholderQR
absDeterminant	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^typename MatrixType::RealScalar ColPivHouseholderQR<MatrixType>::absDeterminant() const$/;"	f	class:ColPivHouseholderQR
colPivHouseholderQr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^MatrixBase<Derived>::colPivHouseholderQr() const$/;"	f	class:MatrixBase
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    inline Index cols() const { return m_qr.cols(); }$/;"	f	class:ColPivHouseholderQR
colsPermutation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    const PermutationType& colsPermutation() const$/;"	f	class:ColPivHouseholderQR
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^ColPivHouseholderQR<MatrixType>& ColPivHouseholderQR<MatrixType>::compute(const MatrixType& matrix)$/;"	f	class:ColPivHouseholderQR
dimensionOfKernel	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    inline Index dimensionOfKernel() const$/;"	f	class:ColPivHouseholderQR
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::solve_retval
hCoeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    const HCoeffsType& hCoeffs() const { return m_hCoeffs; }$/;"	f	class:ColPivHouseholderQR
householderQ	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^  ::householderQ() const$/;"	f	class:ColPivHouseholderQR
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^namespace internal {$/;"	n
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    inverse() const$/;"	f	class:ColPivHouseholderQR
isInjective	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    inline bool isInjective() const$/;"	f	class:ColPivHouseholderQR
isInvertible	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    inline bool isInvertible() const$/;"	f	class:ColPivHouseholderQR
isSurjective	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    inline bool isSurjective() const$/;"	f	class:ColPivHouseholderQR
logAbsDeterminant	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^typename MatrixType::RealScalar ColPivHouseholderQR<MatrixType>::logAbsDeterminant() const$/;"	f	class:ColPivHouseholderQR
m_colSqNorms	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    RealRowVectorType m_colSqNorms;$/;"	m	class:ColPivHouseholderQR
m_colsPermutation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    PermutationType m_colsPermutation;$/;"	m	class:ColPivHouseholderQR
m_colsTranspositions	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    IntRowVectorType m_colsTranspositions;$/;"	m	class:ColPivHouseholderQR
m_det_pq	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    Index m_det_pq;$/;"	m	class:ColPivHouseholderQR
m_hCoeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    HCoeffsType m_hCoeffs;$/;"	m	class:ColPivHouseholderQR
m_isInitialized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    bool m_isInitialized, m_usePrescribedThreshold;$/;"	m	class:ColPivHouseholderQR
m_maxpivot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    RealScalar m_prescribedThreshold, m_maxpivot;$/;"	m	class:ColPivHouseholderQR
m_nonzero_pivots	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    Index m_nonzero_pivots;$/;"	m	class:ColPivHouseholderQR
m_prescribedThreshold	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    RealScalar m_prescribedThreshold, m_maxpivot;$/;"	m	class:ColPivHouseholderQR
m_qr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    MatrixType m_qr;$/;"	m	class:ColPivHouseholderQR
m_temp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    RowVectorType m_temp;$/;"	m	class:ColPivHouseholderQR
m_usePrescribedThreshold	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    bool m_isInitialized, m_usePrescribedThreshold;$/;"	m	class:ColPivHouseholderQR
matrixQR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    const MatrixType& matrixQR() const$/;"	f	class:ColPivHouseholderQR
maxPivot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    RealScalar maxPivot() const { return m_maxpivot; }$/;"	f	class:ColPivHouseholderQR
nonzeroPivots	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    inline Index nonzeroPivots() const$/;"	f	class:ColPivHouseholderQR
rank	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    inline Index rank() const$/;"	f	class:ColPivHouseholderQR
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    inline Index rows() const { return m_qr.rows(); }$/;"	f	class:ColPivHouseholderQR
setThreshold	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    ColPivHouseholderQR& setThreshold(Default_t)$/;"	f	class:ColPivHouseholderQR
setThreshold	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    ColPivHouseholderQR& setThreshold(const RealScalar& threshold)$/;"	f	class:ColPivHouseholderQR
solve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:ColPivHouseholderQR
solve_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^struct solve_retval<ColPivHouseholderQR<_MatrixType>, Rhs>$/;"	s	namespace:internal
threshold	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/ColPivHouseholderQR.h	/^    RealScalar threshold() const$/;"	f	class:ColPivHouseholderQR
ColVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef typename internal::plain_col_type<MatrixType>::type ColVectorType;$/;"	t	class:FullPivHouseholderQR
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:FullPivHouseholderQR::<anonymous>
EIGEN_FULLPIVOTINGHOUSEHOLDERQR_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	27;"	d
FullPivHouseholderQR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    FullPivHouseholderQR()$/;"	f	class:FullPivHouseholderQR
FullPivHouseholderQR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    FullPivHouseholderQR(Index rows, Index cols)$/;"	f	class:FullPivHouseholderQR
FullPivHouseholderQR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    FullPivHouseholderQR(const MatrixType& matrix)$/;"	f	class:FullPivHouseholderQR
FullPivHouseholderQR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^template<typename _MatrixType> class FullPivHouseholderQR$/;"	c
HCoeffsType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef typename internal::plain_diag_type<MatrixType>::type HCoeffsType;$/;"	t	class:FullPivHouseholderQR
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:FullPivHouseholderQR
IntColVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef typename internal::plain_col_type<MatrixType, Index>::type IntColVectorType;$/;"	t	class:FullPivHouseholderQR
IntRowVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef Matrix<Index, 1, ColsAtCompileTime, RowMajor, 1, MaxColsAtCompileTime> IntRowVectorType;$/;"	t	class:FullPivHouseholderQR
MatrixQType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef Matrix<Scalar, RowsAtCompileTime, RowsAtCompileTime, Options, MaxRowsAtCompileTime, MaxRowsAtCompileTime> MatrixQType;$/;"	t	class:FullPivHouseholderQR
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:FullPivHouseholderQR
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:FullPivHouseholderQR::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:FullPivHouseholderQR::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^      Options = MatrixType::Options,$/;"	e	enum:FullPivHouseholderQR::<anonymous>
PermutationType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef PermutationMatrix<ColsAtCompileTime, MaxColsAtCompileTime> PermutationType;$/;"	t	class:FullPivHouseholderQR
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:FullPivHouseholderQR
RowVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef typename internal::plain_row_type<MatrixType>::type RowVectorType;$/;"	t	class:FullPivHouseholderQR
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:FullPivHouseholderQR::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:FullPivHouseholderQR
absDeterminant	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^typename MatrixType::RealScalar FullPivHouseholderQR<MatrixType>::absDeterminant() const$/;"	f	class:FullPivHouseholderQR
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    inline Index cols() const { return m_qr.cols(); }$/;"	f	class:FullPivHouseholderQR
colsPermutation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    const PermutationType& colsPermutation() const$/;"	f	class:FullPivHouseholderQR
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^FullPivHouseholderQR<MatrixType>& FullPivHouseholderQR<MatrixType>::compute(const MatrixType& matrix)$/;"	f	class:FullPivHouseholderQR
dimensionOfKernel	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    inline Index dimensionOfKernel() const$/;"	f	class:FullPivHouseholderQR
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::solve_retval
fullPivHouseholderQr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^MatrixBase<Derived>::fullPivHouseholderQr() const$/;"	f	class:MatrixBase
hCoeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    const HCoeffsType& hCoeffs() const { return m_hCoeffs; }$/;"	f	class:FullPivHouseholderQR
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^namespace internal {$/;"	n
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    inverse() const$/;"	f	class:FullPivHouseholderQR
isInjective	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    inline bool isInjective() const$/;"	f	class:FullPivHouseholderQR
isInvertible	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    inline bool isInvertible() const$/;"	f	class:FullPivHouseholderQR
isSurjective	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    inline bool isSurjective() const$/;"	f	class:FullPivHouseholderQR
logAbsDeterminant	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^typename MatrixType::RealScalar FullPivHouseholderQR<MatrixType>::logAbsDeterminant() const$/;"	f	class:FullPivHouseholderQR
m_cols_permutation	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    PermutationType m_cols_permutation;$/;"	m	class:FullPivHouseholderQR
m_cols_transpositions	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    IntRowVectorType m_cols_transpositions;$/;"	m	class:FullPivHouseholderQR
m_det_pq	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    Index m_det_pq;$/;"	m	class:FullPivHouseholderQR
m_hCoeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    HCoeffsType m_hCoeffs;$/;"	m	class:FullPivHouseholderQR
m_isInitialized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    bool m_isInitialized, m_usePrescribedThreshold;$/;"	m	class:FullPivHouseholderQR
m_maxpivot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    RealScalar m_prescribedThreshold, m_maxpivot;$/;"	m	class:FullPivHouseholderQR
m_nonzero_pivots	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    Index m_nonzero_pivots;$/;"	m	class:FullPivHouseholderQR
m_precision	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    RealScalar m_precision;$/;"	m	class:FullPivHouseholderQR
m_prescribedThreshold	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    RealScalar m_prescribedThreshold, m_maxpivot;$/;"	m	class:FullPivHouseholderQR
m_qr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    MatrixType m_qr;$/;"	m	class:FullPivHouseholderQR
m_rows_transpositions	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    IntColVectorType m_rows_transpositions;$/;"	m	class:FullPivHouseholderQR
m_temp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    RowVectorType m_temp;$/;"	m	class:FullPivHouseholderQR
m_usePrescribedThreshold	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    bool m_isInitialized, m_usePrescribedThreshold;$/;"	m	class:FullPivHouseholderQR
matrixQ	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^typename FullPivHouseholderQR<MatrixType>::MatrixQType FullPivHouseholderQR<MatrixType>::matrixQ() const$/;"	f	class:FullPivHouseholderQR
matrixQR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    const MatrixType& matrixQR() const$/;"	f	class:FullPivHouseholderQR
maxPivot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    RealScalar maxPivot() const { return m_maxpivot; }$/;"	f	class:FullPivHouseholderQR
nonzeroPivots	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    inline Index nonzeroPivots() const$/;"	f	class:FullPivHouseholderQR
rank	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    inline Index rank() const$/;"	f	class:FullPivHouseholderQR
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    inline Index rows() const { return m_qr.rows(); }$/;"	f	class:FullPivHouseholderQR
rowsTranspositions	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    const IntColVectorType& rowsTranspositions() const$/;"	f	class:FullPivHouseholderQR
setThreshold	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    FullPivHouseholderQR& setThreshold(Default_t)$/;"	f	class:FullPivHouseholderQR
setThreshold	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    FullPivHouseholderQR& setThreshold(const RealScalar& threshold)$/;"	f	class:FullPivHouseholderQR
solve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:FullPivHouseholderQR
solve_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^struct solve_retval<FullPivHouseholderQR<_MatrixType>, Rhs>$/;"	s	namespace:internal
threshold	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/FullPivHouseholderQR.h	/^    RealScalar threshold() const$/;"	f	class:FullPivHouseholderQR
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:HouseholderQR::<anonymous>
EIGEN_QR_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	28;"	d
HCoeffsType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    typedef typename internal::plain_diag_type<MatrixType>::type HCoeffsType;$/;"	t	class:HouseholderQR
HouseholderQR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    HouseholderQR() : m_qr(), m_hCoeffs(), m_temp(), m_isInitialized(false) {}$/;"	f	class:HouseholderQR
HouseholderQR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    HouseholderQR(Index rows, Index cols)$/;"	f	class:HouseholderQR
HouseholderQR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    HouseholderQR(const MatrixType& matrix)$/;"	f	class:HouseholderQR
HouseholderQR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^template<typename _MatrixType> class HouseholderQR$/;"	c
HouseholderSequenceType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    typedef typename HouseholderSequence<MatrixType,HCoeffsType>::ConjugateReturnType HouseholderSequenceType;$/;"	t	class:HouseholderQR
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:HouseholderQR
MatrixQType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    typedef Matrix<Scalar, RowsAtCompileTime, RowsAtCompileTime, (MatrixType::Flags&RowMajorBit) ? RowMajor : ColMajor, MaxRowsAtCompileTime, MaxRowsAtCompileTime> MatrixQType;$/;"	t	class:HouseholderQR
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:HouseholderQR
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime$/;"	e	enum:HouseholderQR::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:HouseholderQR::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^      Options = MatrixType::Options,$/;"	e	enum:HouseholderQR::<anonymous>
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:HouseholderQR
RowVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    typedef typename internal::plain_row_type<MatrixType>::type RowVectorType;$/;"	t	class:HouseholderQR
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:HouseholderQR::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:HouseholderQR
absDeterminant	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^typename MatrixType::RealScalar HouseholderQR<MatrixType>::absDeterminant() const$/;"	f	class:HouseholderQR
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    inline Index cols() const { return m_qr.cols(); }$/;"	f	class:HouseholderQR
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^HouseholderQR<MatrixType>& HouseholderQR<MatrixType>::compute(const MatrixType& matrix)$/;"	f	class:HouseholderQR
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::solve_retval
hCoeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    const HCoeffsType& hCoeffs() const { return m_hCoeffs; }$/;"	f	class:HouseholderQR
householderQ	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    HouseholderSequenceType householderQ() const$/;"	f	class:HouseholderQR
householderQr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^MatrixBase<Derived>::householderQr() const$/;"	f	class:MatrixBase
householder_qr_inplace_blocked	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^void householder_qr_inplace_blocked(MatrixQR& mat, HCoeffs& hCoeffs,$/;"	f	namespace:internal
householder_qr_inplace_unblocked	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^void householder_qr_inplace_unblocked(MatrixQR& mat, HCoeffs& hCoeffs, typename MatrixQR::Scalar* tempData = 0)$/;"	f	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^namespace internal {$/;"	n
logAbsDeterminant	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^typename MatrixType::RealScalar HouseholderQR<MatrixType>::logAbsDeterminant() const$/;"	f	class:HouseholderQR
m_hCoeffs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    HCoeffsType m_hCoeffs;$/;"	m	class:HouseholderQR
m_isInitialized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    bool m_isInitialized;$/;"	m	class:HouseholderQR
m_qr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    MatrixType m_qr;$/;"	m	class:HouseholderQR
m_temp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    RowVectorType m_temp;$/;"	m	class:HouseholderQR
matrixQR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    const MatrixType& matrixQR() const$/;"	f	class:HouseholderQR
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    inline Index rows() const { return m_qr.rows(); }$/;"	f	class:HouseholderQR
solve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:HouseholderQR
solve_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/QR/HouseholderQR.h	/^struct solve_retval<HouseholderQR<_MatrixType>, Rhs>$/;"	s	namespace:internal
ColType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    typedef typename internal::plain_col_type<MatrixType>::type ColType;$/;"	t	class:JacobiSVD
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:JacobiSVD::<anonymous>
DiagSizeAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^      DiagSizeAtCompileTime = EIGEN_SIZE_MIN_PREFER_DYNAMIC(RowsAtCompileTime,ColsAtCompileTime),$/;"	e	enum:JacobiSVD::<anonymous>
EIGEN_JACOBISVD_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:JacobiSVD
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^  typedef typename SVD::Index Index;$/;"	t	struct:internal::svd_precondition_2x2_block_to_be_real
JacobiSVD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    JacobiSVD()$/;"	f	class:JacobiSVD
JacobiSVD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    JacobiSVD(Index rows, Index cols, unsigned int computationOptions = 0)$/;"	f	class:JacobiSVD
JacobiSVD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    JacobiSVD(const MatrixType& matrix, unsigned int computationOptions = 0)$/;"	f	class:JacobiSVD
JacobiSVD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^template<typename _MatrixType, int QRPreconditioner> class JacobiSVD$/;"	c
JacobiSVDType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^  typedef JacobiSVD<_MatrixType, QRPreconditioner> JacobiSVDType;$/;"	t	struct:internal::solve_retval
MatrixOptions	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^      MatrixOptions = MatrixType::Options$/;"	e	enum:JacobiSVD::<anonymous>
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:JacobiSVD
MatrixUType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^            MatrixUType;$/;"	t	class:JacobiSVD
MatrixVType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^            MatrixVType;$/;"	t	class:JacobiSVD
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^      MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime,$/;"	e	enum:JacobiSVD::<anonymous>
MaxDiagSizeAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^      MaxDiagSizeAtCompileTime = EIGEN_SIZE_MIN_PREFER_FIXED(MaxRowsAtCompileTime,MaxColsAtCompileTime),$/;"	e	enum:JacobiSVD::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^      MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,$/;"	e	enum:JacobiSVD::<anonymous>
PreconditionIfMoreColsThanRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^enum { PreconditionIfMoreColsThanRows, PreconditionIfMoreRowsThanCols };$/;"	e	enum:internal::<anonymous>
PreconditionIfMoreRowsThanCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^enum { PreconditionIfMoreColsThanRows, PreconditionIfMoreRowsThanCols };$/;"	e	enum:internal::<anonymous>
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    typedef typename NumTraits<typename MatrixType::Scalar>::Real RealScalar;$/;"	t	class:JacobiSVD
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^  typedef typename MatrixType::RealScalar RealScalar;$/;"	t	struct:internal::svd_precondition_2x2_block_to_be_real
RowType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    typedef typename internal::plain_row_type<MatrixType>::type RowType;$/;"	t	class:JacobiSVD
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:JacobiSVD::<anonymous>
SVD	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^  typedef JacobiSVD<MatrixType, QRPreconditioner> SVD;$/;"	t	struct:internal::svd_precondition_2x2_block_to_be_real
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:JacobiSVD
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^  typedef typename MatrixType::Scalar Scalar;$/;"	t	struct:internal::svd_precondition_2x2_block_to_be_real
SingularValuesType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    typedef typename internal::plain_diag_type<MatrixType, RealScalar>::type SingularValuesType;$/;"	t	class:JacobiSVD
WorkMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^            WorkMatrixType;$/;"	t	class:JacobiSVD
a	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^  enum { a = MatrixType::RowsAtCompileTime != Dynamic &&$/;"	e	enum:internal::qr_preconditioner_should_do_anything::<anonymous>
allocate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^void JacobiSVD<MatrixType, QRPreconditioner>::allocate(Index rows, Index cols, unsigned int computationOptions)$/;"	f	class:JacobiSVD
b	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^         b = MatrixType::RowsAtCompileTime != Dynamic &&$/;"	e	enum:internal::qr_preconditioner_should_do_anything::<anonymous>
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    inline Index cols() const { return m_cols; }$/;"	f	class:JacobiSVD
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    JacobiSVD& compute(const MatrixType& matrix)$/;"	f	class:JacobiSVD
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^JacobiSVD<MatrixType, QRPreconditioner>::compute(const MatrixType& matrix, unsigned int computationOptions)$/;"	f	class:JacobiSVD
computeU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    inline bool computeU() const { return m_computeFullU || m_computeThinU; }$/;"	f	class:JacobiSVD
computeV	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    inline bool computeV() const { return m_computeFullV || m_computeThinV; }$/;"	f	class:JacobiSVD
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::solve_retval
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^namespace internal {$/;"	n
jacobiSvd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^MatrixBase<Derived>::jacobiSvd(unsigned int computationOptions) const$/;"	f	class:MatrixBase
m_cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    Index m_nonzeroSingularValues, m_rows, m_cols, m_diagSize;$/;"	m	class:JacobiSVD
m_computationOptions	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    unsigned int m_computationOptions;$/;"	m	class:JacobiSVD
m_computeFullU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    bool m_computeFullU, m_computeThinU;$/;"	m	class:JacobiSVD
m_computeFullV	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    bool m_computeFullV, m_computeThinV;$/;"	m	class:JacobiSVD
m_computeThinU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    bool m_computeFullU, m_computeThinU;$/;"	m	class:JacobiSVD
m_computeThinV	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    bool m_computeFullV, m_computeThinV;$/;"	m	class:JacobiSVD
m_diagSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    Index m_nonzeroSingularValues, m_rows, m_cols, m_diagSize;$/;"	m	class:JacobiSVD
m_isAllocated	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    bool m_isInitialized, m_isAllocated;$/;"	m	class:JacobiSVD
m_isInitialized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    bool m_isInitialized, m_isAllocated;$/;"	m	class:JacobiSVD
m_matrixU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    MatrixUType m_matrixU;$/;"	m	class:JacobiSVD
m_matrixV	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    MatrixVType m_matrixV;$/;"	m	class:JacobiSVD
m_nonzeroSingularValues	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    Index m_nonzeroSingularValues, m_rows, m_cols, m_diagSize;$/;"	m	class:JacobiSVD
m_rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    Index m_nonzeroSingularValues, m_rows, m_cols, m_diagSize;$/;"	m	class:JacobiSVD
m_singularValues	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    SingularValuesType m_singularValues;$/;"	m	class:JacobiSVD
m_workMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    WorkMatrixType m_workMatrix;$/;"	m	class:JacobiSVD
matrixU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    const MatrixUType& matrixU() const$/;"	f	class:JacobiSVD
matrixV	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    const MatrixVType& matrixV() const$/;"	f	class:JacobiSVD
nonzeroSingularValues	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    Index nonzeroSingularValues() const$/;"	f	class:JacobiSVD
qr_preconditioner_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^> struct qr_preconditioner_impl {};$/;"	s	namespace:internal
qr_preconditioner_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^struct qr_preconditioner_impl<MatrixType, ColPivHouseholderQRPreconditioner, PreconditionIfMoreColsThanRows, true>$/;"	s	namespace:internal
qr_preconditioner_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^struct qr_preconditioner_impl<MatrixType, ColPivHouseholderQRPreconditioner, PreconditionIfMoreRowsThanCols, true>$/;"	s	namespace:internal
qr_preconditioner_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^struct qr_preconditioner_impl<MatrixType, FullPivHouseholderQRPreconditioner, PreconditionIfMoreColsThanRows, true>$/;"	s	namespace:internal
qr_preconditioner_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^struct qr_preconditioner_impl<MatrixType, FullPivHouseholderQRPreconditioner, PreconditionIfMoreRowsThanCols, true>$/;"	s	namespace:internal
qr_preconditioner_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^struct qr_preconditioner_impl<MatrixType, HouseholderQRPreconditioner, PreconditionIfMoreColsThanRows, true>$/;"	s	namespace:internal
qr_preconditioner_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^struct qr_preconditioner_impl<MatrixType, HouseholderQRPreconditioner, PreconditionIfMoreRowsThanCols, true>$/;"	s	namespace:internal
qr_preconditioner_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^struct qr_preconditioner_impl<MatrixType, QRPreconditioner, Case, false>$/;"	s	namespace:internal
qr_preconditioner_should_do_anything	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^struct qr_preconditioner_should_do_anything$/;"	s	namespace:internal
real_2x2_jacobi_svd	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^void real_2x2_jacobi_svd(const MatrixType& matrix, Index p, Index q,$/;"	f	namespace:internal
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^         ret = !( (QRPreconditioner == NoQRPreconditioner) ||$/;"	e	enum:internal::qr_preconditioner_should_do_anything::<anonymous>
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    inline Index rows() const { return m_rows; }$/;"	f	class:JacobiSVD
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^  static bool run(JacobiSVD<MatrixType, ColPivHouseholderQRPreconditioner>& svd, const MatrixType& matrix)$/;"	f	struct:internal::qr_preconditioner_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^  static bool run(JacobiSVD<MatrixType, FullPivHouseholderQRPreconditioner>& svd, const MatrixType& matrix)$/;"	f	struct:internal::qr_preconditioner_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^  static bool run(JacobiSVD<MatrixType, HouseholderQRPreconditioner>& svd, const MatrixType& matrix)$/;"	f	struct:internal::qr_preconditioner_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^  static bool run(JacobiSVD<MatrixType, QRPreconditioner>&, const MatrixType&)$/;"	f	struct:internal::qr_preconditioner_impl
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^  static void run(typename SVD::WorkMatrixType& work_matrix, SVD& svd, Index p, Index q)$/;"	f	struct:internal::svd_precondition_2x2_block_to_be_real
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^  static void run(typename SVD::WorkMatrixType&, SVD&, Index, Index) {}$/;"	f	struct:internal::svd_precondition_2x2_block_to_be_real
singularValues	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    const SingularValuesType& singularValues() const$/;"	f	class:JacobiSVD
solve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:JacobiSVD
solve_retval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^struct solve_retval<JacobiSVD<_MatrixType, QRPreconditioner>, Rhs>$/;"	s	namespace:internal
svd_precondition_2x2_block_to_be_real	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^struct svd_precondition_2x2_block_to_be_real {};$/;"	s	namespace:internal
svd_precondition_2x2_block_to_be_real	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^struct svd_precondition_2x2_block_to_be_real<MatrixType, QRPreconditioner, false>$/;"	s	namespace:internal
svd_precondition_2x2_block_to_be_real	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/JacobiSVD.h	/^struct svd_precondition_2x2_block_to_be_real<MatrixType, QRPreconditioner, true>$/;"	s	namespace:internal
BidiagonalType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^    typedef BandMatrix<RealScalar, ColsAtCompileTime, ColsAtCompileTime, 1, 0> BidiagonalType;$/;"	t	class:internal::UpperBidiagonalization
ColVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^    typedef Matrix<Scalar, RowsAtCompileTime, 1> ColVectorType;$/;"	t	class:internal::UpperBidiagonalization
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^      ColsAtCompileTime = MatrixType::ColsAtCompileTime,$/;"	e	enum:internal::UpperBidiagonalization::<anonymous>
ColsAtCompileTimeMinusOne	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^      ColsAtCompileTimeMinusOne = internal::decrement_size<ColsAtCompileTime>::ret$/;"	e	enum:internal::UpperBidiagonalization::<anonymous>
DiagVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^    typedef Matrix<Scalar, ColsAtCompileTime, 1> DiagVectorType;$/;"	t	class:internal::UpperBidiagonalization
EIGEN_BIDIAGONALIZATION_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	26;"	d
HouseholderUSequenceType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^            > HouseholderUSequenceType;$/;"	t	class:internal::UpperBidiagonalization
HouseholderVSequenceType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^            > HouseholderVSequenceType;$/;"	t	class:internal::UpperBidiagonalization
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:internal::UpperBidiagonalization
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:internal::UpperBidiagonalization
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^    typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:internal::UpperBidiagonalization
RowVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^    typedef Matrix<Scalar, 1, ColsAtCompileTime> RowVectorType;$/;"	t	class:internal::UpperBidiagonalization
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^      RowsAtCompileTime = MatrixType::RowsAtCompileTime,$/;"	e	enum:internal::UpperBidiagonalization::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:internal::UpperBidiagonalization
SuperDiagVectorType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^    typedef Matrix<Scalar, ColsAtCompileTimeMinusOne, 1> SuperDiagVectorType;$/;"	t	class:internal::UpperBidiagonalization
UpperBidiagonalization	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^    UpperBidiagonalization() : m_householder(), m_bidiagonal(), m_isInitialized(false) {}$/;"	f	class:internal::UpperBidiagonalization
UpperBidiagonalization	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^    UpperBidiagonalization(const MatrixType& matrix)$/;"	f	class:internal::UpperBidiagonalization
UpperBidiagonalization	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^template<typename _MatrixType> class UpperBidiagonalization$/;"	c	namespace:internal
bidiagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^    const BidiagonalType& bidiagonal() const { return m_bidiagonal; }$/;"	f	class:internal::UpperBidiagonalization
compute	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^UpperBidiagonalization<_MatrixType>& UpperBidiagonalization<_MatrixType>::compute(const _MatrixType& matrix)$/;"	f	class:internal::UpperBidiagonalization
householder	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^    const MatrixType& householder() const { return m_householder; }$/;"	f	class:internal::UpperBidiagonalization
householderU	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^    const HouseholderUSequenceType householderU() const$/;"	f	class:internal::UpperBidiagonalization
householderV	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^    const HouseholderVSequenceType householderV() \/\/ const here gives nasty errors and i'm lazy$/;"	f	class:internal::UpperBidiagonalization
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^namespace internal {$/;"	n
m_bidiagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^    BidiagonalType m_bidiagonal;$/;"	m	class:internal::UpperBidiagonalization
m_householder	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^    MatrixType m_householder;$/;"	m	class:internal::UpperBidiagonalization
m_isInitialized	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/SVD/UpperBidiagonalization.h	/^    bool m_isInitialized;$/;"	m	class:internal::UpperBidiagonalization
AmbiVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    AmbiVector(Index size)$/;"	f	class:AmbiVector
AmbiVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^class AmbiVector$/;"	c
EIGEN_AMBIVECTOR_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    typedef _Index Index;$/;"	t	class:AmbiVector
Iterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    Iterator(const AmbiVector& vec, RealScalar epsilon = RealScalar(0.1)*NumTraits<RealScalar>::dummy_precision())$/;"	f	class:AmbiVector::Iterator
Iterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^class AmbiVector<_Scalar,_Index>::Iterator$/;"	c	class:AmbiVector
ListEl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    struct ListEl$/;"	s	class:AmbiVector
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:AmbiVector
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:AmbiVector::Iterator
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    typedef _Scalar Scalar;$/;"	t	class:AmbiVector
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    typedef _Scalar Scalar;$/;"	t	class:AmbiVector::Iterator
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^_Scalar& AmbiVector<_Scalar,_Index>::coeff(_Index i)$/;"	f	class:AmbiVector
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^_Scalar& AmbiVector<_Scalar,_Index>::coeffRef(_Index i)$/;"	f	class:AmbiVector
index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^      Index index;$/;"	m	struct:AmbiVector::ListEl
index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    Index index() const { return m_cachedIndex; }$/;"	f	class:AmbiVector::Iterator
init	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^void AmbiVector<_Scalar,_Index>::init(double estimatedDensity)$/;"	f	class:AmbiVector
init	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^void AmbiVector<_Scalar,_Index>::init(int mode)$/;"	f	class:AmbiVector
m_allocatedElements	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    Index m_allocatedElements;$/;"	m	class:AmbiVector
m_allocatedSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    Index m_allocatedSize;$/;"	m	class:AmbiVector
m_buffer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    Scalar* m_buffer;$/;"	m	class:AmbiVector
m_cachedIndex	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    Index m_cachedIndex;          \/\/ current coordinate$/;"	m	class:AmbiVector::Iterator
m_cachedValue	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    Scalar m_cachedValue;       \/\/ current value$/;"	m	class:AmbiVector::Iterator
m_currentEl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    Index m_currentEl;            \/\/ the current element in sparse\/linked-list mode$/;"	m	class:AmbiVector::Iterator
m_end	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    Index m_end;$/;"	m	class:AmbiVector
m_epsilon	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    RealScalar m_epsilon;       \/\/ epsilon used to prune zero coefficients$/;"	m	class:AmbiVector::Iterator
m_isDense	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    bool m_isDense;             \/\/ mode of the vector$/;"	m	class:AmbiVector::Iterator
m_llCurrent	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    Index m_llCurrent;$/;"	m	class:AmbiVector
m_llSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    Index m_llSize;$/;"	m	class:AmbiVector
m_llStart	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    Index m_llStart;$/;"	m	class:AmbiVector
m_mode	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    Index m_mode;$/;"	m	class:AmbiVector
m_size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    Index m_size;$/;"	m	class:AmbiVector
m_start	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    Index m_start;$/;"	m	class:AmbiVector
m_vector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    const AmbiVector& m_vector; \/\/ the target vector$/;"	m	class:AmbiVector::Iterator
m_zero	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    Scalar m_zero;$/;"	m	class:AmbiVector
next	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^      Index next;$/;"	m	struct:AmbiVector::ListEl
nonZeros	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^_Index AmbiVector<_Scalar,_Index>::nonZeros() const$/;"	f	class:AmbiVector
operator ++	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    Iterator& operator++()$/;"	f	class:AmbiVector::Iterator
operator bool	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    operator bool() const { return m_cachedIndex>=0; }$/;"	f	class:AmbiVector::Iterator
reallocate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    void reallocate(Index size)$/;"	f	class:AmbiVector
reallocateSparse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    void reallocateSparse()$/;"	f	class:AmbiVector
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    void resize(Index size)$/;"	f	class:AmbiVector
restart	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^void AmbiVector<_Scalar,_Index>::restart()$/;"	f	class:AmbiVector
setBounds	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    void setBounds(Index start, Index end) { m_start = start; m_end = end; }$/;"	f	class:AmbiVector
setZero	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^void AmbiVector<_Scalar,_Index>::setZero()$/;"	f	class:AmbiVector
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    Index size() const { return m_size; }$/;"	f	class:AmbiVector
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^      Scalar value;$/;"	m	struct:AmbiVector::ListEl
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    Scalar value() const { return m_cachedValue; }$/;"	f	class:AmbiVector::Iterator
~AmbiVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/AmbiVector.h	/^    ~AmbiVector() { delete[] m_buffer; }$/;"	f	class:AmbiVector
CompressedStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    CompressedStorage()$/;"	f	class:CompressedStorage
CompressedStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    CompressedStorage(const CompressedStorage& other)$/;"	f	class:CompressedStorage
CompressedStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    CompressedStorage(size_t size)$/;"	f	class:CompressedStorage
CompressedStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^class CompressedStorage$/;"	c
EIGEN_COMPRESSED_STORAGE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    typedef _Index Index;$/;"	t	class:CompressedStorage
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    static CompressedStorage Map(Index* indices, Scalar* values, size_t size)$/;"	f	class:CompressedStorage
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:CompressedStorage
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    typedef _Scalar Scalar;$/;"	t	class:CompressedStorage
allocatedSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    inline size_t allocatedSize() const { return m_allocatedSize; }$/;"	f	class:CompressedStorage
append	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    void append(const Scalar& v, Index i)$/;"	f	class:CompressedStorage
at	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    inline Scalar at(Index key, Scalar defaultValue = Scalar(0)) const$/;"	f	class:CompressedStorage
atInRange	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    inline Scalar atInRange(size_t start, size_t end, Index key, Scalar defaultValue = Scalar(0)) const$/;"	f	class:CompressedStorage
atWithInsertion	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    inline Scalar& atWithInsertion(Index key, Scalar defaultValue = Scalar(0))$/;"	f	class:CompressedStorage
clear	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    inline void clear() { m_size = 0; }$/;"	f	class:CompressedStorage
index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    inline Index& index(size_t i) { return m_indices[i]; }$/;"	f	class:CompressedStorage
index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    inline const Index& index(size_t i) const { return m_indices[i]; }$/;"	f	class:CompressedStorage
m_allocatedSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    size_t m_allocatedSize;$/;"	m	class:CompressedStorage
m_indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    Index* m_indices;$/;"	m	class:CompressedStorage
m_size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    size_t m_size;$/;"	m	class:CompressedStorage
m_values	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    Scalar* m_values;$/;"	m	class:CompressedStorage
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    CompressedStorage& operator=(const CompressedStorage& other)$/;"	f	class:CompressedStorage
prune	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    void prune(Scalar reference, RealScalar epsilon = NumTraits<RealScalar>::dummy_precision())$/;"	f	class:CompressedStorage
reallocate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    inline void reallocate(size_t size)$/;"	f	class:CompressedStorage
reserve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    void reserve(size_t size)$/;"	f	class:CompressedStorage
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    void resize(size_t size, float reserveSizeFactor = 0)$/;"	f	class:CompressedStorage
searchLowerIndex	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    inline Index searchLowerIndex(Index key) const$/;"	f	class:CompressedStorage
searchLowerIndex	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    inline Index searchLowerIndex(size_t start, size_t end, Index key) const$/;"	f	class:CompressedStorage
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    inline size_t size() const { return m_size; }$/;"	f	class:CompressedStorage
squeeze	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    void squeeze()$/;"	f	class:CompressedStorage
swap	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    void swap(CompressedStorage& other)$/;"	f	class:CompressedStorage
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    inline Scalar& value(size_t i) { return m_values[i]; }$/;"	f	class:CompressedStorage
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    inline const Scalar& value(size_t i) const { return m_values[i]; }$/;"	f	class:CompressedStorage
~CompressedStorage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CompressedStorage.h	/^    ~CompressedStorage()$/;"	f	class:CompressedStorage
EIGEN_COREITERATORS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CoreIterators.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CoreIterators.h	/^    typedef typename Derived::Index Index;$/;"	t	class:DenseBase::InnerIterator
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CoreIterators.h	/^    EIGEN_STRONG_INLINE InnerIterator(const Derived& expr, Index outer)$/;"	f	class:DenseBase::InnerIterator
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CoreIterators.h	/^template<typename Derived> class DenseBase<Derived>::InnerIterator$/;"	c	class:DenseBase
IsRowMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CoreIterators.h	/^    enum { IsRowMajor = (Derived::Flags&RowMajorBit)==RowMajorBit };$/;"	e	enum:DenseBase::InnerIterator::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CoreIterators.h	/^    typedef typename Derived::Scalar Scalar;$/;"	t	class:DenseBase::InnerIterator
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CoreIterators.h	/^    inline Index col() const { return IsRowMajor ? index() : m_outer; }$/;"	f	class:DenseBase::InnerIterator
index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CoreIterators.h	/^    EIGEN_STRONG_INLINE Index index() const { return m_inner; }$/;"	f	class:DenseBase::InnerIterator
m_end	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CoreIterators.h	/^    const Index m_end;$/;"	m	class:DenseBase::InnerIterator
m_expression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CoreIterators.h	/^    const Derived& m_expression;$/;"	m	class:DenseBase::InnerIterator
m_inner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CoreIterators.h	/^    Index m_inner;$/;"	m	class:DenseBase::InnerIterator
m_outer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CoreIterators.h	/^    const Index m_outer;$/;"	m	class:DenseBase::InnerIterator
operator ++	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CoreIterators.h	/^    EIGEN_STRONG_INLINE InnerIterator& operator++() { m_inner++; return *this; }$/;"	f	class:DenseBase::InnerIterator
operator bool	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CoreIterators.h	/^    EIGEN_STRONG_INLINE operator bool() const { return m_inner < m_end && m_inner>=0; }$/;"	f	class:DenseBase::InnerIterator
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CoreIterators.h	/^    inline Index row() const { return IsRowMajor ? m_outer : index(); }$/;"	f	class:DenseBase::InnerIterator
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/CoreIterators.h	/^    EIGEN_STRONG_INLINE Scalar value() const$/;"	f	class:DenseBase::InnerIterator
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    typedef typename SparseVector<Scalar,_Options>::InnerIterator Base;$/;"	t	class:DynamicSparseMatrix::InnerIterator
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    CoeffReadCost = NumTraits<Scalar>::ReadCost,$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    ColsAtCompileTime = Dynamic,$/;"	e	enum:internal::traits::<anonymous>
DynamicSparseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    explicit inline DynamicSparseMatrix(const SparseMatrixBase<OtherDerived>& other)$/;"	f	class:DynamicSparseMatrix
DynamicSparseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline DynamicSparseMatrix()$/;"	f	class:DynamicSparseMatrix
DynamicSparseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline DynamicSparseMatrix(Index rows, Index cols)$/;"	f	class:DynamicSparseMatrix
DynamicSparseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline DynamicSparseMatrix(const DynamicSparseMatrix& other)$/;"	f	class:DynamicSparseMatrix
DynamicSparseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^class DynamicSparseMatrix$/;"	c
EIGEN_DYNAMIC_SPARSEMATRIX_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	26;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    Flags = _Options | NestByRefBit | LvalueBit,$/;"	e	enum:internal::traits::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^  typedef _Index Index;$/;"	t	struct:internal::traits
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    InnerIterator(const DynamicSparseMatrix& mat, Index outer)$/;"	f	class:DynamicSparseMatrix::InnerIterator
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^class DynamicSparseMatrix<Scalar,_Options,_Index>::InnerIterator : public SparseVector<Scalar,_Options>::InnerIterator$/;"	c	class:DynamicSparseMatrix
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    typedef MappedSparseMatrix<Scalar,Flags> Map;$/;"	t	class:DynamicSparseMatrix
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    MaxColsAtCompileTime = Dynamic,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    MaxRowsAtCompileTime = Dynamic,$/;"	e	enum:internal::traits::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^      Options = _Options$/;"	e	enum:DynamicSparseMatrix::<anonymous>
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    RowsAtCompileTime = Dynamic,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^  typedef _Scalar Scalar;$/;"	t	struct:internal::traits
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^  typedef Sparse StorageKind;$/;"	t	struct:internal::traits
SupportedAccessPatterns	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    SupportedAccessPatterns = OuterRandomAccessPattern$/;"	e	enum:internal::traits::<anonymous>
TransposedSparseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    typedef DynamicSparseMatrix<Scalar,(Flags&~RowMajorBit)|(IsRowMajor?RowMajorBit:0)> TransposedSparseMatrix;$/;"	t	class:DynamicSparseMatrix
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:internal::traits
_data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    const std::vector<CompressedStorage<Scalar,Index> >& _data() const { return m_data; }$/;"	f	class:DynamicSparseMatrix
_data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    std::vector<CompressedStorage<Scalar,Index> >& _data() { return m_data; }$/;"	f	class:DynamicSparseMatrix
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline Scalar coeff(Index row, Index col) const$/;"	f	class:DynamicSparseMatrix
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:DynamicSparseMatrix
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline Index col() const { return IsRowMajor ? Base::index() : m_outer; }$/;"	f	class:DynamicSparseMatrix::InnerIterator
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline Index cols() const { return IsRowMajor ? m_innerSize : outerSize(); }$/;"	f	class:DynamicSparseMatrix
endFill	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    EIGEN_DEPRECATED void endFill() {}$/;"	f	class:DynamicSparseMatrix
fill	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    EIGEN_DEPRECATED Scalar& fill(Index row, Index col)$/;"	f	class:DynamicSparseMatrix
fillrand	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    EIGEN_DEPRECATED Scalar& fillrand(Index row, Index col)$/;"	f	class:DynamicSparseMatrix
finalize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline void finalize() {}$/;"	f	class:DynamicSparseMatrix
innerNonZeros	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline Index innerNonZeros(Index j) const { return m_data[j].size(); }$/;"	f	class:DynamicSparseMatrix
innerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline Index innerSize() const { return m_innerSize; }$/;"	f	class:DynamicSparseMatrix
insert	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline Scalar& insert(Index row, Index col)$/;"	f	class:DynamicSparseMatrix
insertBack	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline Scalar& insertBack(Index row, Index col)$/;"	f	class:DynamicSparseMatrix
insertBackByOuterInner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline Scalar& insertBackByOuterInner(Index outer, Index inner)$/;"	f	class:DynamicSparseMatrix
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^namespace internal {$/;"	n
m_data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    std::vector<CompressedStorage<Scalar,Index> > m_data;$/;"	m	class:DynamicSparseMatrix
m_innerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    Index m_innerSize;$/;"	m	class:DynamicSparseMatrix
m_outer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    const Index m_outer;$/;"	m	class:DynamicSparseMatrix::InnerIterator
nonZeros	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    Index nonZeros() const$/;"	f	class:DynamicSparseMatrix
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline DynamicSparseMatrix& operator=(const DynamicSparseMatrix& other)$/;"	f	class:DynamicSparseMatrix
outerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline Index outerSize() const { return static_cast<Index>(m_data.size()); }$/;"	f	class:DynamicSparseMatrix
prune	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    void prune(Scalar reference, RealScalar epsilon = NumTraits<RealScalar>::dummy_precision())$/;"	f	class:DynamicSparseMatrix
reserve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    void reserve(Index reserveSize = 1000)$/;"	f	class:DynamicSparseMatrix
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    void resize(Index rows, Index cols)$/;"	f	class:DynamicSparseMatrix
resizeAndKeepData	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    void resizeAndKeepData(Index rows, Index cols)$/;"	f	class:DynamicSparseMatrix
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline Index row() const { return IsRowMajor ? m_outer : Base::index(); }$/;"	f	class:DynamicSparseMatrix::InnerIterator
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline Index rows() const { return IsRowMajor ? outerSize() : m_innerSize; }$/;"	f	class:DynamicSparseMatrix
setZero	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    void setZero()$/;"	f	class:DynamicSparseMatrix
startFill	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    EIGEN_DEPRECATED void startFill(Index reserveSize = 1000)$/;"	f	class:DynamicSparseMatrix
startVec	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline void startVec(Index \/*outer*\/) {}$/;"	f	class:DynamicSparseMatrix
swap	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline void swap(DynamicSparseMatrix& other)$/;"	f	class:DynamicSparseMatrix
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^struct traits<DynamicSparseMatrix<_Scalar, _Options, _Index> >$/;"	s	namespace:internal
~DynamicSparseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/DynamicSparseMatrix.h	/^    inline ~DynamicSparseMatrix() {}$/;"	f	class:DynamicSparseMatrix
EIGEN_MAPPED_SPARSEMATRIX_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	26;"	d
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    InnerIterator(const Flagged<MappedSparseMatrix,Added,Removed>& mat, Index outer)$/;"	f	class:MappedSparseMatrix::InnerIterator
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    InnerIterator(const MappedSparseMatrix& mat, Index outer)$/;"	f	class:MappedSparseMatrix::InnerIterator
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^class MappedSparseMatrix<Scalar,_Flags,_Index>::InnerIterator$/;"	c	class:MappedSparseMatrix
IsRowMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    enum { IsRowMajor = Base::IsRowMajor };$/;"	e	enum:MappedSparseMatrix::<anonymous>
MappedSparseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline MappedSparseMatrix(Index rows, Index cols, Index nnz, Index* outerIndexPtr, Index* innerIndexPtr, Scalar* valuePtr)$/;"	f	class:MappedSparseMatrix
MappedSparseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^class MappedSparseMatrix$/;"	c
_innerIndexPtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline Index* _innerIndexPtr() { return m_innerIndices; }$/;"	f	class:MappedSparseMatrix
_innerIndexPtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline const Index* _innerIndexPtr() const { return m_innerIndices; }$/;"	f	class:MappedSparseMatrix
_outerIndexPtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline Index* _outerIndexPtr() { return m_outerIndex; }$/;"	f	class:MappedSparseMatrix
_outerIndexPtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline const Index* _outerIndexPtr() const { return m_outerIndex; }$/;"	f	class:MappedSparseMatrix
_valuePtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline Scalar* _valuePtr() { return m_values; }$/;"	f	class:MappedSparseMatrix
_valuePtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline const Scalar* _valuePtr() const { return m_values; }$/;"	f	class:MappedSparseMatrix
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline Scalar coeff(Index row, Index col) const$/;"	f	class:MappedSparseMatrix
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:MappedSparseMatrix
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline Index col() const { return IsRowMajor ? index() : m_outer; }$/;"	f	class:MappedSparseMatrix::InnerIterator
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline Index cols() const { return IsRowMajor ? m_innerSize : m_outerSize; }$/;"	f	class:MappedSparseMatrix
index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline Index index() const { return m_matrix._innerIndexPtr()[m_id]; }$/;"	f	class:MappedSparseMatrix::InnerIterator
innerNonZeros	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline Index innerNonZeros(Index j) const { return m_outerIndex[j+1]-m_outerIndex[j]; }$/;"	f	class:MappedSparseMatrix
innerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline Index innerSize() const { return m_innerSize; }$/;"	f	class:MappedSparseMatrix
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^namespace internal {$/;"	n
m_end	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    const Index m_end;$/;"	m	class:MappedSparseMatrix::InnerIterator
m_id	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    Index m_id;$/;"	m	class:MappedSparseMatrix::InnerIterator
m_innerIndices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    Index*  m_innerIndices;$/;"	m	class:MappedSparseMatrix
m_innerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    Index   m_innerSize;$/;"	m	class:MappedSparseMatrix
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    const MappedSparseMatrix& m_matrix;$/;"	m	class:MappedSparseMatrix::InnerIterator
m_nnz	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    Index   m_nnz;$/;"	m	class:MappedSparseMatrix
m_outer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    const Index m_outer;$/;"	m	class:MappedSparseMatrix::InnerIterator
m_outerIndex	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    Index*  m_outerIndex;$/;"	m	class:MappedSparseMatrix
m_outerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    Index   m_outerSize;$/;"	m	class:MappedSparseMatrix
m_start	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    const Index m_start;$/;"	m	class:MappedSparseMatrix::InnerIterator
m_values	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    Scalar* m_values;$/;"	m	class:MappedSparseMatrix
nonZeros	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline Index nonZeros() const  { return m_nnz; }$/;"	f	class:MappedSparseMatrix
operator ++	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline InnerIterator& operator++() { m_id++; return *this; }$/;"	f	class:MappedSparseMatrix::InnerIterator
operator bool	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline operator bool() const { return (m_id < m_end) && (m_id>=m_start); }$/;"	f	class:MappedSparseMatrix::InnerIterator
outerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline Index outerSize() const { return m_outerSize; }$/;"	f	class:MappedSparseMatrix
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline Index row() const { return IsRowMajor ? m_outer : index(); }$/;"	f	class:MappedSparseMatrix::InnerIterator
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline Index rows() const { return IsRowMajor ? m_outerSize : m_innerSize; }$/;"	f	class:MappedSparseMatrix
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^struct traits<MappedSparseMatrix<_Scalar, _Flags, _Index> > : traits<SparseMatrix<_Scalar, _Flags, _Index> >$/;"	s	namespace:internal
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline Scalar value() const { return m_matrix._valuePtr()[m_id]; }$/;"	f	class:MappedSparseMatrix::InnerIterator
valueRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline Scalar& valueRef() { return const_cast<Scalar&>(m_matrix._valuePtr()[m_id]); }$/;"	f	class:MappedSparseMatrix::InnerIterator
~MappedSparseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/MappedSparseMatrix.h	/^    inline ~MappedSparseMatrix() {}$/;"	f	class:MappedSparseMatrix
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    CoeffReadCost = MatrixType::CoeffReadCost$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    ColsAtCompileTime = IsRowMajor ? MatrixType::ColsAtCompileTime : Size,$/;"	e	enum:internal::traits::<anonymous>
EIGEN_SPARSE_BLOCK_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	26;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    Flags = MatrixType::Flags,$/;"	e	enum:internal::traits::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^  typedef typename traits<MatrixType>::Index Index;$/;"	t	struct:internal::traits
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^        inline InnerIterator(const SparseInnerVectorSet& xpr, Index outer)$/;"	f	class:SparseInnerVectorSet::InnerIterator
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    class InnerIterator: public MatrixType::InnerIterator$/;"	c	class:SparseInnerVectorSet
IsRowMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    IsRowMajor = (int(MatrixType::Flags)&RowMajorBit)==RowMajorBit,$/;"	e	enum:internal::traits::<anonymous>
IsRowMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    enum { IsRowMajor = internal::traits<SparseInnerVectorSet>::IsRowMajor };$/;"	e	enum:SparseInnerVectorSet::<anonymous>
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    typedef DynamicSparseMatrix<_Scalar, _Options> MatrixType;$/;"	t	class:SparseInnerVectorSet
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    typedef SparseMatrix<_Scalar, _Options> MatrixType;$/;"	t	class:SparseInnerVectorSet
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    MaxColsAtCompileTime = ColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    MaxRowsAtCompileTime = RowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    RowsAtCompileTime = IsRowMajor ? Size : MatrixType::RowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^  typedef typename traits<MatrixType>::Scalar Scalar;$/;"	t	struct:internal::traits
SparseInnerVectorSet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    inline SparseInnerVectorSet(const MatrixType& matrix, Index outer)$/;"	f	class:SparseInnerVectorSet
SparseInnerVectorSet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    inline SparseInnerVectorSet(const MatrixType& matrix, Index outerStart, Index outerSize)$/;"	f	class:SparseInnerVectorSet
SparseInnerVectorSet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^class SparseInnerVectorSet : internal::no_assignment_operator,$/;"	c
SparseInnerVectorSet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^class SparseInnerVectorSet<DynamicSparseMatrix<_Scalar, _Options>, Size>$/;"	c
SparseInnerVectorSet	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^class SparseInnerVectorSet<SparseMatrix<_Scalar, _Options, _Index>, Size>$/;"	c
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^  typedef typename traits<MatrixType>::StorageKind StorageKind;$/;"	t	struct:internal::traits
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:internal::traits
_innerIndexPtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    inline Index* _innerIndexPtr()$/;"	f	class:SparseInnerVectorSet
_innerIndexPtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    inline const Index* _innerIndexPtr() const$/;"	f	class:SparseInnerVectorSet
_outerIndexPtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    inline Index* _outerIndexPtr()$/;"	f	class:SparseInnerVectorSet
_outerIndexPtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    inline const Index* _outerIndexPtr() const$/;"	f	class:SparseInnerVectorSet
_valuePtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    inline Scalar* _valuePtr()$/;"	f	class:SparseInnerVectorSet
_valuePtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    inline const Scalar* _valuePtr() const$/;"	f	class:SparseInnerVectorSet
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^        inline Index col() const { return IsRowMajor ? this->index() : m_outer; }$/;"	f	class:SparseInnerVectorSet::InnerIterator
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^SparseInnerVectorSet<Derived,1> SparseMatrixBase<Derived>::col(Index i)$/;"	f	class:SparseMatrixBase
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^const SparseInnerVectorSet<Derived,1> SparseMatrixBase<Derived>::col(Index i) const$/;"	f	class:SparseMatrixBase
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    EIGEN_STRONG_INLINE Index cols() const { return IsRowMajor ? m_matrix.cols() : m_outerSize.value(); }$/;"	f	class:SparseInnerVectorSet
innerVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^SparseInnerVectorSet<Derived,1> SparseMatrixBase<Derived>::innerVector(Index outer)$/;"	f	class:SparseMatrixBase
innerVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^const SparseInnerVectorSet<Derived,1> SparseMatrixBase<Derived>::innerVector(Index outer) const$/;"	f	class:SparseMatrixBase
innerVectors	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^SparseInnerVectorSet<Derived,Dynamic> SparseMatrixBase<Derived>::innerVectors(Index outerStart, Index outerSize)$/;"	f	class:SparseMatrixBase
innerVectors	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^const SparseInnerVectorSet<Derived,Dynamic> SparseMatrixBase<Derived>::innerVectors(Index outerStart, Index outerSize) const$/;"	f	class:SparseMatrixBase
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^namespace internal {$/;"	n
lastCoeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    const Scalar& lastCoeff() const$/;"	f	class:SparseInnerVectorSet
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    const typename MatrixType::Nested m_matrix;$/;"	m	class:SparseInnerVectorSet
m_outer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^        Index m_outer;$/;"	m	class:SparseInnerVectorSet::InnerIterator
m_outerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    const internal::variable_if_dynamic<Index, Size> m_outerSize;$/;"	m	class:SparseInnerVectorSet
m_outerStart	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    Index m_outerStart;$/;"	m	class:SparseInnerVectorSet
nonZeros	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    Index nonZeros() const$/;"	f	class:SparseInnerVectorSet
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    inline SparseInnerVectorSet& operator=(const SparseInnerVectorSet& other)$/;"	f	class:SparseInnerVectorSet
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    inline SparseInnerVectorSet& operator=(const SparseMatrixBase<OtherDerived>& other)$/;"	f	class:SparseInnerVectorSet
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^        inline Index row() const { return IsRowMajor ? m_outer : this->index(); }$/;"	f	class:SparseInnerVectorSet::InnerIterator
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^SparseInnerVectorSet<Derived,1> SparseMatrixBase<Derived>::row(Index i)$/;"	f	class:SparseMatrixBase
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^const SparseInnerVectorSet<Derived,1> SparseMatrixBase<Derived>::row(Index i) const$/;"	f	class:SparseMatrixBase
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^    EIGEN_STRONG_INLINE Index rows() const { return IsRowMajor ? m_outerSize.value() : m_matrix.rows(); }$/;"	f	class:SparseInnerVectorSet
subcols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^SparseInnerVectorSet<Derived,Dynamic> SparseMatrixBase<Derived>::subcols(Index start, Index size)$/;"	f	class:SparseMatrixBase
subcols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^const SparseInnerVectorSet<Derived,Dynamic> SparseMatrixBase<Derived>::subcols(Index start, Index size) const$/;"	f	class:SparseMatrixBase
subrows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^SparseInnerVectorSet<Derived,Dynamic> SparseMatrixBase<Derived>::subrows(Index start, Index size)$/;"	f	class:SparseMatrixBase
subrows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^const SparseInnerVectorSet<Derived,Dynamic> SparseMatrixBase<Derived>::subrows(Index start, Index size) const$/;"	f	class:SparseMatrixBase
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseBlock.h	/^struct traits<SparseInnerVectorSet<MatrixType, Size> >$/;"	s	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^      BinaryOp,Lhs,Rhs, InnerIterator> Base;$/;"	t	class:CwiseBinaryOpImpl::InnerIterator
BinaryFunc	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    typedef scalar_product_op<T> BinaryFunc;$/;"	t	class:internal::sparse_cwise_binary_op_inner_iterator_selector
CwiseBinaryOpImpl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^class CwiseBinaryOpImpl<BinaryOp, Lhs, Rhs, Sparse>$/;"	c
CwiseBinaryXpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    typedef CwiseBinaryOp<BinaryFunc, Lhs, Rhs> CwiseBinaryXpr;$/;"	t	class:internal::sparse_cwise_binary_op_inner_iterator_selector
CwiseBinaryXpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    typedef CwiseBinaryOp<BinaryOp, Lhs, Rhs> CwiseBinaryXpr;$/;"	t	class:internal::sparse_cwise_binary_op_inner_iterator_selector
Derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    typedef CwiseBinaryOp<BinaryOp, Lhs, Rhs> Derived;$/;"	t	class:CwiseBinaryOpImpl
EIGEN_SPARSE_CWISE_BINARY_OP_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    typedef typename Lhs::Index Index;$/;"	t	class:CwiseBinaryOpImpl::InnerIterator
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    typedef typename Lhs::Index Index;$/;"	t	class:internal::sparse_cwise_binary_op_inner_iterator_selector
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE InnerIterator(const CwiseBinaryOpImpl& binOp, Index outer)$/;"	f	class:CwiseBinaryOpImpl::InnerIterator
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^class CwiseBinaryOpImpl<BinaryOp,Lhs,Rhs,Sparse>::InnerIterator$/;"	c	class:CwiseBinaryOpImpl
IsRowMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    enum { IsRowMajor = (int(Lhs::Flags)&RowMajorBit)==RowMajorBit };$/;"	e	enum:internal::sparse_cwise_binary_op_inner_iterator_selector::<anonymous>
IsRowMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    enum { IsRowMajor = (int(Rhs::Flags)&RowMajorBit)==RowMajorBit };$/;"	e	enum:internal::sparse_cwise_binary_op_inner_iterator_selector::<anonymous>
LhsIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    typedef typename _LhsNested::InnerIterator LhsIterator;$/;"	t	class:internal::sparse_cwise_binary_op_inner_iterator_selector
RhsIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    typedef typename _RhsNested::InnerIterator RhsIterator;$/;"	t	class:internal::sparse_cwise_binary_op_inner_iterator_selector
RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    typedef typename traits<CwiseBinaryXpr>::RhsNested RhsNested;$/;"	t	class:internal::sparse_cwise_binary_op_inner_iterator_selector
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    typedef typename CwiseBinaryXpr::Scalar Scalar;$/;"	t	class:internal::sparse_cwise_binary_op_inner_iterator_selector
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    typedef typename traits<CwiseBinaryXpr>::Scalar Scalar;$/;"	t	class:internal::sparse_cwise_binary_op_inner_iterator_selector
_LhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    typedef typename traits<CwiseBinaryXpr>::_LhsNested _LhsNested;$/;"	t	class:internal::sparse_cwise_binary_op_inner_iterator_selector
_RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    typedef typename traits<CwiseBinaryXpr>::_RhsNested _RhsNested;$/;"	t	class:internal::sparse_cwise_binary_op_inner_iterator_selector
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index col() const { return Lhs::IsRowMajor ? index() : m_lhsIter.col(); }$/;"	f	class:internal::sparse_cwise_binary_op_inner_iterator_selector
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index col() const { return m_lhsIter.col(); }$/;"	f	class:internal::sparse_cwise_binary_op_inner_iterator_selector
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index col() const { return m_rhsIter.col(); }$/;"	f	class:internal::sparse_cwise_binary_op_inner_iterator_selector
cwiseProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^SparseMatrixBase<Derived>::cwiseProduct(const MatrixBase<OtherDerived> &other) const$/;"	f	class:SparseMatrixBase
index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index index() const { return m_id; }$/;"	f	class:internal::sparse_cwise_binary_op_inner_iterator_selector
index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index index() const { return m_lhsIter.index(); }$/;"	f	class:internal::sparse_cwise_binary_op_inner_iterator_selector
index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index index() const { return m_rhsIter.index(); }$/;"	f	class:internal::sparse_cwise_binary_op_inner_iterator_selector
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^namespace internal {$/;"	n
m_functor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    const BinaryFunc m_functor;$/;"	m	class:internal::sparse_cwise_binary_op_inner_iterator_selector
m_functor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    const BinaryFunc& m_functor;$/;"	m	class:internal::sparse_cwise_binary_op_inner_iterator_selector
m_functor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    const BinaryOp& m_functor;$/;"	m	class:internal::sparse_cwise_binary_op_inner_iterator_selector
m_id	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    Index m_id;$/;"	m	class:internal::sparse_cwise_binary_op_inner_iterator_selector
m_lhsIter	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    LhsIterator m_lhsIter;$/;"	m	class:internal::sparse_cwise_binary_op_inner_iterator_selector
m_outer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    const Index m_outer;$/;"	m	class:internal::sparse_cwise_binary_op_inner_iterator_selector
m_rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    const RhsNested m_rhs;$/;"	m	class:internal::sparse_cwise_binary_op_inner_iterator_selector
m_rhsIter	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    RhsIterator m_rhsIter;$/;"	m	class:internal::sparse_cwise_binary_op_inner_iterator_selector
m_value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    Scalar m_value;$/;"	m	class:internal::sparse_cwise_binary_op_inner_iterator_selector
m_xpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    const CwiseBinaryXpr& m_xpr;$/;"	m	class:internal::sparse_cwise_binary_op_inner_iterator_selector
operator ++	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Derived& operator++()$/;"	f	class:internal::sparse_cwise_binary_op_inner_iterator_selector
operator +=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^SparseMatrixBase<Derived>::operator+=(const SparseMatrixBase<OtherDerived>& other)$/;"	f	class:SparseMatrixBase
operator -=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^SparseMatrixBase<Derived>::operator-=(const SparseMatrixBase<OtherDerived> &other)$/;"	f	class:SparseMatrixBase
operator bool	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE operator bool() const { return (m_lhsIter && m_rhsIter); }$/;"	f	class:internal::sparse_cwise_binary_op_inner_iterator_selector
operator bool	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE operator bool() const { return m_id>=0; }$/;"	f	class:internal::sparse_cwise_binary_op_inner_iterator_selector
operator bool	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE operator bool() const { return m_lhsIter; }$/;"	f	class:internal::sparse_cwise_binary_op_inner_iterator_selector
operator bool	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE operator bool() const { return m_rhsIter; }$/;"	f	class:internal::sparse_cwise_binary_op_inner_iterator_selector
promote_storage_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^template<> struct promote_storage_type<Dense,Sparse>$/;"	s	namespace:internal
promote_storage_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^template<> struct promote_storage_type<Sparse,Dense>$/;"	s	namespace:internal
ret	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^{ typedef Sparse ret; };$/;"	t	struct:internal::promote_storage_type
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index row() const { return Lhs::IsRowMajor ? m_lhsIter.row() : index(); }$/;"	f	class:internal::sparse_cwise_binary_op_inner_iterator_selector
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index row() const { return m_lhsIter.row(); }$/;"	f	class:internal::sparse_cwise_binary_op_inner_iterator_selector
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Index row() const { return m_rhsIter.row(); }$/;"	f	class:internal::sparse_cwise_binary_op_inner_iterator_selector
sparse_cwise_binary_op_inner_iterator_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE sparse_cwise_binary_op_inner_iterator_selector(const CwiseBinaryXpr& xpr, Index outer)$/;"	f	class:internal::sparse_cwise_binary_op_inner_iterator_selector
sparse_cwise_binary_op_inner_iterator_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^class sparse_cwise_binary_op_inner_iterator_selector<BinaryOp, Lhs, Rhs, Derived, Sparse, Sparse>$/;"	c	namespace:internal
sparse_cwise_binary_op_inner_iterator_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^class sparse_cwise_binary_op_inner_iterator_selector<scalar_product_op<T>, Lhs, Rhs, Derived, Dense, Sparse>$/;"	c	namespace:internal
sparse_cwise_binary_op_inner_iterator_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^class sparse_cwise_binary_op_inner_iterator_selector<scalar_product_op<T>, Lhs, Rhs, Derived, Sparse, Dense>$/;"	c	namespace:internal
sparse_cwise_binary_op_inner_iterator_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^class sparse_cwise_binary_op_inner_iterator_selector<scalar_product_op<T>, Lhs, Rhs, Derived, Sparse, Sparse>$/;"	c	namespace:internal
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Scalar value() const { return m_functor(m_lhsIter.value(), m_rhsIter.value()); }$/;"	f	class:internal::sparse_cwise_binary_op_inner_iterator_selector
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Scalar value() const { return m_value; }$/;"	f	class:internal::sparse_cwise_binary_op_inner_iterator_selector
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseBinaryOp.h	/^    EIGEN_STRONG_INLINE Scalar value() const$/;"	f	class:internal::sparse_cwise_binary_op_inner_iterator_selector
CwiseUnaryOpImpl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^class CwiseUnaryOpImpl<UnaryOp,MatrixType,Sparse>$/;"	c
CwiseUnaryViewImpl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^class CwiseUnaryViewImpl<ViewOp,MatrixType,Sparse>$/;"	c
Derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    typedef CwiseUnaryOp<UnaryOp, MatrixType> Derived;$/;"	t	class:CwiseUnaryOpImpl
Derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    typedef CwiseUnaryView<ViewOp, MatrixType> Derived;$/;"	t	class:CwiseUnaryViewImpl
EIGEN_SPARSE_CWISE_UNARY_OP_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:CwiseUnaryOpImpl::InnerIterator
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:CwiseUnaryViewImpl::InnerIterator
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE InnerIterator(const CwiseUnaryOpImpl& unaryOp, Index outer)$/;"	f	class:CwiseUnaryOpImpl::InnerIterator
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE InnerIterator(const CwiseUnaryViewImpl& unaryView, Index outer)$/;"	f	class:CwiseUnaryViewImpl::InnerIterator
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^class CwiseUnaryOpImpl<UnaryOp,MatrixType,Sparse>::InnerIterator$/;"	c	class:CwiseUnaryOpImpl
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^class CwiseUnaryViewImpl<ViewOp,MatrixType,Sparse>::InnerIterator$/;"	c	class:CwiseUnaryViewImpl
MatrixTypeIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    typedef typename _MatrixTypeNested::InnerIterator MatrixTypeIterator;$/;"	t	class:CwiseUnaryOpImpl::InnerIterator
MatrixTypeIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    typedef typename _MatrixTypeNested::InnerIterator MatrixTypeIterator;$/;"	t	class:CwiseUnaryViewImpl::InnerIterator
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    typedef typename CwiseUnaryOpImpl::Scalar Scalar;$/;"	t	class:CwiseUnaryOpImpl::InnerIterator
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    typedef typename CwiseUnaryViewImpl::Scalar Scalar;$/;"	t	class:CwiseUnaryViewImpl::InnerIterator
_MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    typedef typename internal::traits<Derived>::_MatrixTypeNested _MatrixTypeNested;$/;"	t	class:CwiseUnaryViewImpl::InnerIterator
_MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    typedef typename internal::traits<Derived>::_XprTypeNested _MatrixTypeNested;$/;"	t	class:CwiseUnaryOpImpl::InnerIterator
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE Index col() const { return m_iter.col(); }$/;"	f	class:CwiseUnaryOpImpl::InnerIterator
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE Index col() const { return m_iter.col(); }$/;"	f	class:CwiseUnaryViewImpl::InnerIterator
index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE Index index() const { return m_iter.index(); }$/;"	f	class:CwiseUnaryOpImpl::InnerIterator
index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE Index index() const { return m_iter.index(); }$/;"	f	class:CwiseUnaryViewImpl::InnerIterator
m_functor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    const UnaryOp m_functor;$/;"	m	class:CwiseUnaryOpImpl::InnerIterator
m_functor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    const ViewOp m_functor;$/;"	m	class:CwiseUnaryViewImpl::InnerIterator
m_iter	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    MatrixTypeIterator m_iter;$/;"	m	class:CwiseUnaryOpImpl::InnerIterator
m_iter	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    MatrixTypeIterator m_iter;$/;"	m	class:CwiseUnaryViewImpl::InnerIterator
operator *=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^SparseMatrixBase<Derived>::operator*=(const Scalar& other)$/;"	f	class:SparseMatrixBase
operator ++	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE InnerIterator& operator++()$/;"	f	class:CwiseUnaryOpImpl::InnerIterator
operator ++	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE InnerIterator& operator++()$/;"	f	class:CwiseUnaryViewImpl::InnerIterator
operator /=	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^SparseMatrixBase<Derived>::operator\/=(const Scalar& other)$/;"	f	class:SparseMatrixBase
operator bool	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE operator bool() const { return m_iter; }$/;"	f	class:CwiseUnaryOpImpl::InnerIterator
operator bool	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE operator bool() const { return m_iter; }$/;"	f	class:CwiseUnaryViewImpl::InnerIterator
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE Index row() const { return m_iter.row(); }$/;"	f	class:CwiseUnaryOpImpl::InnerIterator
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE Index row() const { return m_iter.row(); }$/;"	f	class:CwiseUnaryViewImpl::InnerIterator
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE Scalar value() const { return m_functor(m_iter.value()); }$/;"	f	class:CwiseUnaryOpImpl::InnerIterator
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE Scalar value() const { return m_functor(m_iter.value()); }$/;"	f	class:CwiseUnaryViewImpl::InnerIterator
valueRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseCwiseUnaryOp.h	/^    EIGEN_STRONG_INLINE Scalar& valueRef() { return m_functor(m_iter.valueRef()); }$/;"	f	class:CwiseUnaryViewImpl::InnerIterator
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    typedef SparseMatrixBase<SparseDenseOuterProduct> Base;$/;"	t	class:SparseDenseOuterProduct
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    typedef typename _LhsNested::InnerIterator Base;$/;"	t	class:SparseDenseOuterProduct::InnerIterator
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    CoeffReadCost = LhsCoeffReadCost + RhsCoeffReadCost + NumTraits<Scalar>::MulCost$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    ColsAtCompileTime    = Tr ? int(traits<Lhs>::ColsAtCompileTime)     : int(traits<Rhs>::ColsAtCompileTime),$/;"	e	enum:internal::traits::<anonymous>
DenseSparseProductReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^template<typename Lhs, typename Rhs, int InnerSize> struct DenseSparseProductReturnType$/;"	s
DenseSparseProductReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^template<typename Lhs, typename Rhs> struct DenseSparseProductReturnType<Lhs,Rhs,1>$/;"	s
DenseTimeSparseProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    DenseTimeSparseProduct(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs)$/;"	f	class:DenseTimeSparseProduct
DenseTimeSparseProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^class DenseTimeSparseProduct$/;"	c
EIGEN_SPARSEDENSEPRODUCT_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	26;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    Flags = Tr ? RowMajorBit : 0,$/;"	e	enum:internal::traits::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^  typedef typename Lhs::Index Index;$/;"	t	struct:internal::traits
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    EIGEN_STRONG_INLINE InnerIterator(const SparseDenseOuterProduct& prod, Index outer)$/;"	f	class:SparseDenseOuterProduct::InnerIterator
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^class SparseDenseOuterProduct<Lhs,Rhs,Transpose>::InnerIterator : public _LhsNested::InnerIterator$/;"	c	class:SparseDenseOuterProduct
LhsCoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    LhsCoeffReadCost = traits<_LhsNested>::CoeffReadCost,$/;"	e	enum:internal::traits::<anonymous>
LhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    typedef typename Traits::LhsNested LhsNested;$/;"	t	class:SparseDenseOuterProduct
LhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^  typedef typename Lhs::Nested LhsNested;$/;"	t	struct:internal::traits
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    MaxColsAtCompileTime = Tr ? int(traits<Lhs>::MaxColsAtCompileTime)  : int(traits<Rhs>::MaxColsAtCompileTime),$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    MaxRowsAtCompileTime = Tr ? int(traits<Rhs>::MaxRowsAtCompileTime)  : int(traits<Lhs>::MaxRowsAtCompileTime),$/;"	e	enum:internal::traits::<anonymous>
RhsCoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    RhsCoeffReadCost = traits<_RhsNested>::CoeffReadCost,$/;"	e	enum:internal::traits::<anonymous>
RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    typedef typename Traits::RhsNested RhsNested;$/;"	t	class:SparseDenseOuterProduct
RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^  typedef typename Rhs::Nested RhsNested;$/;"	t	struct:internal::traits
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    RowsAtCompileTime    = Tr ? int(traits<Rhs>::RowsAtCompileTime)     : int(traits<Lhs>::RowsAtCompileTime),$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^                                            typename traits<Rhs>::Scalar>::ReturnType Scalar;$/;"	t	struct:internal::traits
SparseDenseOuterProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    EIGEN_STRONG_INLINE SparseDenseOuterProduct(const Lhs& lhs, const Rhs& rhs)$/;"	f	class:SparseDenseOuterProduct
SparseDenseOuterProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    EIGEN_STRONG_INLINE SparseDenseOuterProduct(const Rhs& rhs, const Lhs& lhs)$/;"	f	class:SparseDenseOuterProduct
SparseDenseOuterProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^class SparseDenseOuterProduct$/;"	c
SparseDenseProductReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^template<typename Lhs, typename Rhs, int InnerSize> struct SparseDenseProductReturnType$/;"	s
SparseDenseProductReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^template<typename Lhs, typename Rhs> struct SparseDenseProductReturnType<Lhs,Rhs,1>$/;"	s
SparseTimeDenseProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    SparseTimeDenseProduct(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs)$/;"	f	class:SparseTimeDenseProduct
SparseTimeDenseProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^class SparseTimeDenseProduct$/;"	c
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^  typedef Dense StorageKind;$/;"	t	struct:internal::traits
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^  typedef Sparse StorageKind;$/;"	t	struct:internal::traits
Traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    typedef internal::traits<SparseDenseOuterProduct> Traits;$/;"	t	class:SparseDenseOuterProduct
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^  typedef DenseTimeSparseProduct<Lhs,Rhs> Type;$/;"	t	struct:DenseSparseProductReturnType
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^  typedef SparseDenseOuterProduct<Lhs,Rhs,false> Type;$/;"	t	struct:SparseDenseProductReturnType
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^  typedef SparseDenseOuterProduct<Rhs,Lhs,true> Type;$/;"	t	struct:DenseSparseProductReturnType
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^  typedef SparseTimeDenseProduct<Lhs,Rhs> Type;$/;"	t	struct:SparseDenseProductReturnType
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:internal::traits
_LhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    typedef typename Traits::_LhsNested _LhsNested;$/;"	t	class:SparseDenseOuterProduct
_LhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^  typedef typename remove_all<LhsNested>::type _LhsNested;$/;"	t	struct:internal::traits
_RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    typedef typename Traits::_RhsNested _RhsNested;$/;"	t	class:SparseDenseOuterProduct
_RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^  typedef typename remove_all<RhsNested>::type _RhsNested;$/;"	t	struct:internal::traits
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    inline Index col() const { return Transpose ? m_outer : Base::row(); }$/;"	f	class:SparseDenseOuterProduct::InnerIterator
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    EIGEN_STRONG_INLINE Index cols() const { return Tr ? m_lhs.cols() : m_rhs.cols(); }$/;"	f	class:SparseDenseOuterProduct
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^namespace internal {$/;"	n
lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    EIGEN_STRONG_INLINE const _LhsNested& lhs() const { return m_lhs; }$/;"	f	class:SparseDenseOuterProduct
m_factor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    Scalar m_factor;$/;"	m	class:SparseDenseOuterProduct::InnerIterator
m_lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    LhsNested m_lhs;$/;"	m	class:SparseDenseOuterProduct
m_outer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    int m_outer;$/;"	m	class:SparseDenseOuterProduct::InnerIterator
m_rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    RhsNested m_rhs;$/;"	m	class:SparseDenseOuterProduct
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^SparseMatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const$/;"	f	class:SparseMatrixBase
outer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    inline Index outer() const { return m_outer; }$/;"	f	class:SparseDenseOuterProduct::InnerIterator
rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    EIGEN_STRONG_INLINE const _RhsNested& rhs() const { return m_rhs; }$/;"	f	class:SparseDenseOuterProduct
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    inline Index row() const { return Transpose ? Base::row() : m_outer; }$/;"	f	class:SparseDenseOuterProduct::InnerIterator
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    EIGEN_STRONG_INLINE Index rows() const { return Tr ? m_rhs.rows() : m_lhs.rows(); }$/;"	f	class:SparseDenseOuterProduct
scaleAndAddTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    template<typename Dest> void scaleAndAddTo(Dest& dest, Scalar alpha) const$/;"	f	class:DenseTimeSparseProduct
scaleAndAddTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    template<typename Dest> void scaleAndAddTo(Dest& dest, Scalar alpha) const$/;"	f	class:SparseTimeDenseProduct
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^struct traits<DenseTimeSparseProduct<Lhs,Rhs> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^struct traits<SparseDenseOuterProduct<Lhs,Rhs,Tr> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^struct traits<SparseTimeDenseProduct<Lhs,Rhs> >$/;"	s	namespace:internal
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDenseProduct.h	/^    inline Scalar value() const { return Base::value() * m_factor; }$/;"	f	class:SparseDenseOuterProduct::InnerIterator
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^      Transpose<const typename Rhs::DiagonalVectorType> >::InnerIterator Base;$/;"	t	class:internal::sparse_diagonal_product_inner_iterator_selector
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^      typename Lhs::DiagonalVectorType>::InnerIterator Base;$/;"	t	class:internal::sparse_diagonal_product_inner_iterator_selector
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    typedef typename CwiseUnaryOp<scalar_multiple_op<typename Lhs::Scalar>,const Rhs>::InnerIterator Base;$/;"	t	class:internal::sparse_diagonal_product_inner_iterator_selector
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    typedef typename CwiseUnaryOp<scalar_multiple_op<typename Rhs::Scalar>,const Lhs>::InnerIterator Base;$/;"	t	class:internal::sparse_diagonal_product_inner_iterator_selector
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    CoeffReadCost = Dynamic$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    ColsAtCompileTime = _Rhs::ColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
EIGEN_SPARSE_DIAGONAL_PRODUCT_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	26;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    Flags = (SparseFlags&RowMajorBit),$/;"	e	enum:internal::traits::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^                                         typename traits<Rhs>::Index>::type Index;$/;"	t	struct:internal::traits
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    typedef typename Lhs::Index Index;$/;"	t	class:internal::sparse_diagonal_product_inner_iterator_selector
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^                <_LhsNested,_RhsNested,SparseDiagonalProduct,LhsMode,RhsMode> InnerIterator;$/;"	t	class:SparseDiagonalProduct
LhsMode	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^      LhsMode = internal::is_diagonal<_LhsNested>::ret ? internal::SDP_IsDiagonal$/;"	e	enum:SparseDiagonalProduct::<anonymous>
LhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    typedef typename Lhs::Nested LhsNested;$/;"	t	class:SparseDiagonalProduct
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    MaxColsAtCompileTime = _Rhs::MaxColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    MaxRowsAtCompileTime = _Lhs::MaxRowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
RhsMode	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^      RhsMode = internal::is_diagonal<_RhsNested>::ret ? internal::SDP_IsDiagonal$/;"	e	enum:SparseDiagonalProduct::<anonymous>
RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    typedef typename Rhs::Nested RhsNested;$/;"	t	class:SparseDiagonalProduct
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    RowsAtCompileTime = _Lhs::RowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
SDP_IsDiagonal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^enum {SDP_IsDiagonal, SDP_IsSparseRowMajor, SDP_IsSparseColMajor};$/;"	e	enum:internal::<anonymous>
SDP_IsSparseColMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^enum {SDP_IsDiagonal, SDP_IsSparseRowMajor, SDP_IsSparseColMajor};$/;"	e	enum:internal::<anonymous>
SDP_IsSparseRowMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^enum {SDP_IsDiagonal, SDP_IsSparseRowMajor, SDP_IsSparseColMajor};$/;"	e	enum:internal::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^  typedef typename _Lhs::Scalar Scalar;$/;"	t	struct:internal::traits
SparseDiagonalProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    EIGEN_STRONG_INLINE SparseDiagonalProduct(const Lhs& lhs, const Rhs& rhs)$/;"	f	class:SparseDiagonalProduct
SparseDiagonalProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^class SparseDiagonalProduct$/;"	c
SparseFlags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    SparseFlags = is_diagonal<_Lhs>::ret ? int(_Rhs::Flags) : int(_Lhs::Flags),$/;"	e	enum:internal::traits::<anonymous>
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^  typedef Sparse StorageKind;$/;"	t	struct:internal::traits
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:internal::traits
_Lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^  typedef typename remove_all<Lhs>::type _Lhs;$/;"	t	struct:internal::traits
_LhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    typedef typename internal::remove_all<LhsNested>::type _LhsNested;$/;"	t	class:SparseDiagonalProduct
_Rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^  typedef typename remove_all<Rhs>::type _Rhs;$/;"	t	struct:internal::traits
_RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    typedef typename internal::remove_all<RhsNested>::type _RhsNested;$/;"	t	class:SparseDiagonalProduct
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    EIGEN_STRONG_INLINE Index cols() const { return m_rhs.cols(); }$/;"	f	class:SparseDiagonalProduct
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^namespace internal {$/;"	n
lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    EIGEN_STRONG_INLINE const _LhsNested& lhs() const { return m_lhs; }$/;"	f	class:SparseDiagonalProduct
m_lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    LhsNested m_lhs;$/;"	m	class:SparseDiagonalProduct
m_rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    RhsNested m_rhs;$/;"	m	class:SparseDiagonalProduct
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^SparseMatrixBase<Derived>::operator*(const DiagonalBase<OtherDerived> &other) const$/;"	f	class:SparseMatrixBase
rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    EIGEN_STRONG_INLINE const _RhsNested& rhs() const { return m_rhs; }$/;"	f	class:SparseDiagonalProduct
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    EIGEN_STRONG_INLINE Index rows() const { return m_lhs.rows(); }$/;"	f	class:SparseDiagonalProduct
sparse_diagonal_product_inner_iterator_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^    inline sparse_diagonal_product_inner_iterator_selector($/;"	f	class:internal::sparse_diagonal_product_inner_iterator_selector
sparse_diagonal_product_inner_iterator_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^class sparse_diagonal_product_inner_iterator_selector$/;"	c	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDiagonalProduct.h	/^struct traits<SparseDiagonalProduct<Lhs, Rhs> >$/;"	s	namespace:internal
EIGEN_SPARSE_DOT_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDot.h	26;"	d
dot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDot.h	/^SparseMatrixBase<Derived>::dot(const MatrixBase<OtherDerived>& other) const$/;"	f	class:SparseMatrixBase
dot	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDot.h	/^SparseMatrixBase<Derived>::dot(const SparseMatrixBase<OtherDerived>& other) const$/;"	f	class:SparseMatrixBase
norm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDot.h	/^SparseMatrixBase<Derived>::norm() const$/;"	f	class:SparseMatrixBase
squaredNorm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseDot.h	/^SparseMatrixBase<Derived>::squaredNorm() const$/;"	f	class:SparseMatrixBase
EIGEN_SPARSE_FUZZY_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseFuzzy.h	26;"	d
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    CoeffReadCost = NumTraits<Scalar>::ReadCost,$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    ColsAtCompileTime = Dynamic,$/;"	e	enum:internal::traits::<anonymous>
EIGEN_SPARSEMATRIX_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	26;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    Flags = _Options | NestByRefBit | LvalueBit,$/;"	e	enum:internal::traits::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^  typedef _Index Index;$/;"	t	struct:internal::traits
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    InnerIterator(const SparseMatrix& mat, Index outer)$/;"	f	class:SparseMatrix::InnerIterator
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^class SparseMatrix<Scalar,_Options,_Index>::InnerIterator$/;"	c	class:SparseMatrix
Map	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    typedef MappedSparseMatrix<Scalar,Flags> Map;$/;"	t	class:SparseMatrix
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    MaxColsAtCompileTime = Dynamic,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    MaxRowsAtCompileTime = Dynamic,$/;"	e	enum:internal::traits::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^      Options = _Options$/;"	e	enum:SparseMatrix::<anonymous>
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    RowsAtCompileTime = Dynamic,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^  typedef _Scalar Scalar;$/;"	t	struct:internal::traits
SparseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline SparseMatrix()$/;"	f	class:SparseMatrix
SparseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline SparseMatrix(Index rows, Index cols)$/;"	f	class:SparseMatrix
SparseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline SparseMatrix(const SparseMatrix& other)$/;"	f	class:SparseMatrix
SparseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline SparseMatrix(const SparseMatrixBase<OtherDerived>& other)$/;"	f	class:SparseMatrix
SparseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^class SparseMatrix$/;"	c
Storage	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    typedef CompressedStorage<Scalar,Index> Storage;$/;"	t	class:SparseMatrix
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^  typedef Sparse StorageKind;$/;"	t	struct:internal::traits
SupportedAccessPatterns	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    SupportedAccessPatterns = InnerRandomAccessPattern$/;"	e	enum:internal::traits::<anonymous>
TransposedSparseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    typedef SparseMatrix<Scalar,(Flags&~RowMajorBit)|(IsRowMajor?RowMajorBit:0)> TransposedSparseMatrix;$/;"	t	class:SparseMatrix
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:internal::traits
_innerIndexPtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Index* _innerIndexPtr() { return &m_data.index(0); }$/;"	f	class:SparseMatrix
_innerIndexPtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline const Index* _innerIndexPtr() const { return &m_data.index(0); }$/;"	f	class:SparseMatrix
_outerIndexPtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Index* _outerIndexPtr() { return m_outerIndex; }$/;"	f	class:SparseMatrix
_outerIndexPtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline const Index* _outerIndexPtr() const { return m_outerIndex; }$/;"	f	class:SparseMatrix
_valuePtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Scalar* _valuePtr() { return &m_data.value(0); }$/;"	f	class:SparseMatrix
_valuePtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline const Scalar* _valuePtr() const { return &m_data.value(0); }$/;"	f	class:SparseMatrix
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Scalar coeff(Index row, Index col) const$/;"	f	class:SparseMatrix
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:SparseMatrix
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Index col() const { return IsRowMajor ? index() : m_outer; }$/;"	f	class:SparseMatrix::InnerIterator
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Index cols() const { return IsRowMajor ? m_innerSize : m_outerSize; }$/;"	f	class:SparseMatrix
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Storage& data() { return m_data; }$/;"	f	class:SparseMatrix
data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline const Storage& data() const { return m_data; }$/;"	f	class:SparseMatrix
default_prunning_func	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    default_prunning_func(Scalar ref, RealScalar eps) : reference(ref), epsilon(eps) {}$/;"	f	struct:SparseMatrix::default_prunning_func
default_prunning_func	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^  struct default_prunning_func {$/;"	s	class:SparseMatrix
endFill	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    EIGEN_DEPRECATED void endFill() { finalize(); }$/;"	f	class:SparseMatrix
epsilon	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    RealScalar epsilon;$/;"	m	struct:SparseMatrix::default_prunning_func
fill	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    EIGEN_DEPRECATED Scalar& fill(Index row, Index col)$/;"	f	class:SparseMatrix
fillrand	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    EIGEN_DEPRECATED Scalar& fillrand(Index row, Index col)$/;"	f	class:SparseMatrix
finalize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline void finalize()$/;"	f	class:SparseMatrix
index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Index index() const { return m_indices[m_id]; }$/;"	f	class:SparseMatrix::InnerIterator
innerNonZeros	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Index innerNonZeros(Index j) const { return m_outerIndex[j+1]-m_outerIndex[j]; }$/;"	f	class:SparseMatrix
innerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Index innerSize() const { return m_innerSize; }$/;"	f	class:SparseMatrix
insert	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    EIGEN_DONT_INLINE Scalar& insert(Index row, Index col)$/;"	f	class:SparseMatrix
insertBack	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Scalar& insertBack(Index row, Index col)$/;"	f	class:SparseMatrix
insertBackByOuterInner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Scalar& insertBackByOuterInner(Index outer, Index inner)$/;"	f	class:SparseMatrix
insertBackByOuterInnerUnordered	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Scalar& insertBackByOuterInnerUnordered(Index outer, Index inner)$/;"	f	class:SparseMatrix
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^namespace internal {$/;"	n
m_data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    CompressedStorage<Scalar,Index> m_data;$/;"	m	class:SparseMatrix
m_end	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    const Index m_end;$/;"	m	class:SparseMatrix::InnerIterator
m_id	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    Index m_id;$/;"	m	class:SparseMatrix::InnerIterator
m_indices	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    const Index* m_indices;$/;"	m	class:SparseMatrix::InnerIterator
m_innerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    Index m_innerSize;$/;"	m	class:SparseMatrix
m_outer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    const Index m_outer;$/;"	m	class:SparseMatrix::InnerIterator
m_outerIndex	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    Index* m_outerIndex;$/;"	m	class:SparseMatrix
m_outerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    Index m_outerSize;$/;"	m	class:SparseMatrix
m_values	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    const Scalar* m_values;$/;"	m	class:SparseMatrix::InnerIterator
nonZeros	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Index nonZeros() const  { return static_cast<Index>(m_data.size()); }$/;"	f	class:SparseMatrix
operator ()	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline bool operator() (const Index&, const Index&, const Scalar& value) const$/;"	f	struct:SparseMatrix::default_prunning_func
operator ++	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline InnerIterator& operator++() { m_id++; return *this; }$/;"	f	class:SparseMatrix::InnerIterator
operator <<	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    friend std::ostream & operator << (std::ostream & s, const SparseMatrix& m)$/;"	f	class:SparseMatrix
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    EIGEN_DONT_INLINE SparseMatrix& operator=(const SparseMatrixBase<OtherDerived>& other)$/;"	f	class:SparseMatrix
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline SparseMatrix& operator=(const EigenBase<OtherDerived>& other)$/;"	f	class:SparseMatrix
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline SparseMatrix& operator=(const ReturnByValue<OtherDerived>& other)$/;"	f	class:SparseMatrix
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline SparseMatrix& operator=(const SparseMatrix& other)$/;"	f	class:SparseMatrix
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline SparseMatrix& operator=(const SparseSparseProduct<Lhs,Rhs>& product)$/;"	f	class:SparseMatrix
operator bool	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline operator bool() const { return (m_id < m_end); }$/;"	f	class:SparseMatrix::InnerIterator
outer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Index outer() const { return m_outer; }$/;"	f	class:SparseMatrix::InnerIterator
outerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Index outerSize() const { return m_outerSize; }$/;"	f	class:SparseMatrix
prune	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    void prune(Scalar reference, RealScalar epsilon = NumTraits<RealScalar>::dummy_precision())$/;"	f	class:SparseMatrix
prune	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    void prune(const KeepFunc& keep = KeepFunc())$/;"	f	class:SparseMatrix
reference	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    Scalar reference;$/;"	m	struct:SparseMatrix::default_prunning_func
reserve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline void reserve(Index reserveSize)$/;"	f	class:SparseMatrix
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    void resize(Index rows, Index cols)$/;"	f	class:SparseMatrix
resizeNonZeros	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    void resizeNonZeros(Index size)$/;"	f	class:SparseMatrix
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Index row() const { return IsRowMajor ? m_outer : index(); }$/;"	f	class:SparseMatrix::InnerIterator
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Index rows() const { return IsRowMajor ? m_outerSize : m_innerSize; }$/;"	f	class:SparseMatrix
setZero	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline void setZero()$/;"	f	class:SparseMatrix
startFill	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    EIGEN_DEPRECATED void startFill(Index reserveSize = 1000)$/;"	f	class:SparseMatrix
startVec	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline void startVec(Index outer)$/;"	f	class:SparseMatrix
swap	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline void swap(SparseMatrix& other)$/;"	f	class:SparseMatrix
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^struct traits<SparseMatrix<_Scalar, _Options, _Index> >$/;"	s	namespace:internal
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline const Scalar& value() const { return m_values[m_id]; }$/;"	f	class:SparseMatrix::InnerIterator
valueRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline Scalar& valueRef() { return const_cast<Scalar&>(m_values[m_id]); }$/;"	f	class:SparseMatrix::InnerIterator
~SparseMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrix.h	/^    inline ~SparseMatrix()$/;"	f	class:SparseMatrix
AdjointReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^                     >::type AdjointReturnType;$/;"	t	class:SparseMatrixBase
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    typedef EigenBase<Derived> Base;$/;"	t	class:SparseMatrixBase
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^      CoeffReadCost = internal::traits<Derived>::CoeffReadCost,$/;"	e	enum:SparseMatrixBase::<anonymous>
CoeffReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    typedef typename internal::conditional<_HasDirectAccess, const Scalar&, Scalar>::type CoeffReturnType;$/;"	t	class:SparseMatrixBase
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^      ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,$/;"	e	enum:SparseMatrixBase::<anonymous>
ConstantReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    typedef CwiseNullaryOp<internal::scalar_constant_op<Scalar>,Matrix<Scalar,Dynamic,Dynamic> > ConstantReturnType;$/;"	t	class:SparseMatrixBase
EIGEN_CURRENT_STORAGE_BASE_CLASS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	128;"	d
EIGEN_CURRENT_STORAGE_BASE_CLASS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	136;"	d
EIGEN_CURRENT_STORAGE_BASE_CLASS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	137;"	d
EIGEN_SPARSEMATRIXBASE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	26;"	d
EIGEN_SPARSE_CWISE_PRODUCT_RETURN_TYPE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	345;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^      Flags = internal::traits<Derived>::Flags,$/;"	e	enum:SparseMatrixBase::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    typedef typename internal::traits<Derived>::Index Index;$/;"	t	class:SparseMatrixBase
IsRowMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^      IsRowMajor = Flags&RowMajorBit ? 1 : 0,$/;"	e	enum:SparseMatrixBase::<anonymous>
IsVectorAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^      IsVectorAtCompileTime = RowsAtCompileTime == 1 || ColsAtCompileTime == 1,$/;"	e	enum:SparseMatrixBase::<anonymous>
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^      MaxColsAtCompileTime = ColsAtCompileTime,$/;"	e	enum:SparseMatrixBase::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^      MaxRowsAtCompileTime = RowsAtCompileTime,$/;"	e	enum:SparseMatrixBase::<anonymous>
MaxSizeAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^      MaxSizeAtCompileTime = (internal::size_at_compile_time<MaxRowsAtCompileTime,$/;"	e	enum:SparseMatrixBase::<anonymous>
PacketScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    typedef typename internal::packet_traits<Scalar>::type PacketScalar;$/;"	t	class:SparseMatrixBase
PlainObject	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    typedef SparseMatrix<Scalar, Flags&RowMajorBit ? RowMajor : ColMajor> PlainObject;$/;"	t	class:SparseMatrixBase
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:SparseMatrixBase
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^      RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,$/;"	e	enum:SparseMatrixBase::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:SparseMatrixBase
SizeAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^      SizeAtCompileTime = (internal::size_at_compile_time<internal::traits<Derived>::RowsAtCompileTime,$/;"	e	enum:SparseMatrixBase::<anonymous>
SparseMatrixBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    SparseMatrixBase() : m_isRValue(false) { \/* TODO check flags *\/ }$/;"	f	class:SparseMatrixBase
SparseMatrixBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^template<typename Derived> class SparseMatrixBase : public EigenBase<Derived>$/;"	c
SquareMatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^                          EIGEN_SIZE_MAX(RowsAtCompileTime,ColsAtCompileTime)> SquareMatrixType;$/;"	t	class:SparseMatrixBase
StorageBaseType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    typedef SparseMatrixBase StorageBaseType;$/;"	t	class:SparseMatrixBase
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	class:SparseMatrixBase
_HasDirectAccess	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^      _HasDirectAccess = (int(Flags)&DirectAccessBit) ? 1 : 0 \/\/ workaround sunCC$/;"	e	enum:SparseMatrixBase::<anonymous>
adjoint	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    const AdjointReturnType adjoint() const { return transpose(); }$/;"	f	class:SparseMatrixBase
assignGeneric	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    inline void assignGeneric(const OtherDerived& other)$/;"	f	class:SparseMatrixBase
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    inline Index cols() const { return derived().cols(); }$/;"	f	class:SparseMatrixBase
const_cast_derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    inline Derived& const_cast_derived() const$/;"	f	class:SparseMatrixBase
derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    inline Derived& derived() { return *static_cast<Derived*>(this); }$/;"	f	class:SparseMatrixBase
derived	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    inline const Derived& derived() const { return *static_cast<const Derived*>(this); }$/;"	f	class:SparseMatrixBase
eval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    inline const typename internal::eval<Derived>::type eval() const$/;"	f	class:SparseMatrixBase
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^      void evalTo(MatrixBase<DenseDerived>& dst) const$/;"	f	class:SparseMatrixBase
innerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    Index innerSize() const { return (int(Flags)&RowMajorBit) ? this->cols() : this->rows(); }$/;"	f	class:SparseMatrixBase
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    bool isApprox(const MatrixBase<OtherDerived>& other,$/;"	f	class:SparseMatrixBase
isApprox	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    bool isApprox(const SparseMatrixBase<OtherDerived>& other,$/;"	f	class:SparseMatrixBase
isRValue	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    bool isRValue() const { return m_isRValue; }$/;"	f	class:SparseMatrixBase
isVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    inline bool isVector() const { return rows()==1 || cols()==1; }$/;"	f	class:SparseMatrixBase
m_isRValue	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    bool m_isRValue;$/;"	m	class:SparseMatrixBase
markAsRValue	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    Derived& markAsRValue() { m_isRValue = true; return derived(); }$/;"	f	class:SparseMatrixBase
nonZeros	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    inline Index nonZeros() const { return derived().nonZeros(); }$/;"	f	class:SparseMatrixBase
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    operator*(const DiagonalBase<OtherDerived> &lhs, const SparseMatrixBase& rhs)$/;"	f	class:SparseMatrixBase
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    operator*(const MatrixBase<OtherDerived>& lhs, const Derived& rhs)$/;"	f	class:SparseMatrixBase
operator <<	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    friend std::ostream & operator << (std::ostream & s, const SparseMatrixBase& m)$/;"	f	class:SparseMatrixBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    Derived& operator=(const EigenBase<OtherDerived> &other)$/;"	f	class:SparseMatrixBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    Derived& operator=(const ReturnByValue<OtherDerived>& other)$/;"	f	class:SparseMatrixBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    inline Derived& operator=(const Derived& other)$/;"	f	class:SparseMatrixBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    inline Derived& operator=(const SparseMatrixBase<OtherDerived>& other)$/;"	f	class:SparseMatrixBase
outerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    Index outerSize() const { return (int(Flags)&RowMajorBit) ? this->rows() : this->cols(); }$/;"	f	class:SparseMatrixBase
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    inline Index rows() const { return derived().rows(); }$/;"	f	class:SparseMatrixBase
size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    inline Index size() const { return rows() * cols(); }$/;"	f	class:SparseMatrixBase
toDense	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^      Matrix<Scalar,RowsAtCompileTime,ColsAtCompileTime> toDense() const$/;"	f	class:SparseMatrixBase
transpose	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    Transpose<Derived> transpose() { return derived(); }$/;"	f	class:SparseMatrixBase
transpose	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseMatrixBase.h	/^    const Transpose<const Derived> transpose() const { return derived(); }$/;"	f	class:SparseMatrixBase
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    typedef SparseMatrixBase<SparseSparseProduct> Base;$/;"	t	class:SparseSparseProduct
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    CoeffReadCost = Dynamic$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    ColsAtCompileTime    = _RhsNested::ColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
EIGEN_SPARSEPRODUCT_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	26;"	d
EvalToRowMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    EvalToRowMajor = (RhsFlags & LhsFlags & RowMajorBit),$/;"	e	enum:internal::traits::<anonymous>
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    Flags = (int(LhsFlags | RhsFlags) & HereditaryBits & RemovedBits)$/;"	e	enum:internal::traits::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^                                         typename traits<_RhsNested>::Index>::type Index;$/;"	t	struct:internal::traits
InnerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    InnerSize = EIGEN_SIZE_MIN_PREFER_FIXED(_LhsNested::ColsAtCompileTime, _RhsNested::RowsAtCompileTime),$/;"	e	enum:internal::traits::<anonymous>
LhsCoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    LhsCoeffReadCost = _LhsNested::CoeffReadCost,$/;"	e	enum:internal::traits::<anonymous>
LhsFlags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    LhsFlags = _LhsNested::Flags,$/;"	e	enum:internal::traits::<anonymous>
LhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    const typename internal::nested<Lhs,Rhs::RowsAtCompileTime>::type>::type LhsNested;$/;"	t	struct:SparseSparseProductReturnType
LhsRowMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    LhsRowMajor = internal::traits<Lhs>::Flags & RowMajorBit,$/;"	e	enum:SparseSparseProductReturnType::<anonymous>
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    MaxColsAtCompileTime = _RhsNested::MaxColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    MaxRowsAtCompileTime = _LhsNested::MaxRowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
RemovedBits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    RemovedBits = ~(EvalToRowMajor ? 0 : RowMajorBit),$/;"	e	enum:internal::traits::<anonymous>
RhsCoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    RhsCoeffReadCost = _RhsNested::CoeffReadCost,$/;"	e	enum:internal::traits::<anonymous>
RhsFlags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    RhsFlags = _RhsNested::Flags,$/;"	e	enum:internal::traits::<anonymous>
RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    const typename internal::nested<Rhs,Lhs::RowsAtCompileTime>::type>::type RhsNested;$/;"	t	struct:SparseSparseProductReturnType
RhsRowMajor	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    RhsRowMajor = internal::traits<Rhs>::Flags & RowMajorBit,$/;"	e	enum:SparseSparseProductReturnType::<anonymous>
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    RowsAtCompileTime    = _LhsNested::RowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^  typedef typename _LhsNested::Scalar Scalar;$/;"	t	struct:internal::traits
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^  typedef typename internal::traits<Lhs>::Scalar Scalar;$/;"	t	struct:SparseSparseProductReturnType
SparseSparseProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    EIGEN_STRONG_INLINE SparseSparseProduct(const Lhs& lhs, const Rhs& rhs)$/;"	f	class:SparseSparseProduct
SparseSparseProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^class SparseSparseProduct : internal::no_assignment_operator,$/;"	c
SparseSparseProductReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^struct SparseSparseProductReturnType$/;"	s
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^  typedef Sparse StorageKind;$/;"	t	struct:internal::traits
TransposeLhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    TransposeLhs = LhsRowMajor && (!RhsRowMajor)$/;"	e	enum:SparseSparseProductReturnType::<anonymous>
TransposeRhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    TransposeRhs = (!LhsRowMajor) && RhsRowMajor,$/;"	e	enum:SparseSparseProductReturnType::<anonymous>
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^  typedef SparseSparseProduct<LhsNested, RhsNested> Type;$/;"	t	struct:SparseSparseProductReturnType
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:internal::traits
_LhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    typedef typename internal::traits<SparseSparseProduct>::_LhsNested _LhsNested;$/;"	t	class:SparseSparseProduct
_LhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^  typedef typename remove_all<LhsNested>::type _LhsNested;$/;"	t	struct:internal::traits
_RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    typedef typename internal::traits<SparseSparseProduct>::_RhsNested _RhsNested;$/;"	t	class:SparseSparseProduct
_RhsNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^  typedef typename remove_all<RhsNested>::type _RhsNested;$/;"	t	struct:internal::traits
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    EIGEN_STRONG_INLINE Index cols() const { return m_rhs.cols(); }$/;"	f	class:SparseSparseProduct
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^namespace internal {$/;"	n
lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    EIGEN_STRONG_INLINE const _LhsNested& lhs() const { return m_lhs; }$/;"	f	class:SparseSparseProduct
m_lhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    LhsNested m_lhs;$/;"	m	class:SparseSparseProduct
m_rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    RhsNested m_rhs;$/;"	m	class:SparseSparseProduct
rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    EIGEN_STRONG_INLINE const _RhsNested& rhs() const { return m_rhs; }$/;"	f	class:SparseSparseProduct
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^    EIGEN_STRONG_INLINE Index rows() const { return m_lhs.rows(); }$/;"	f	class:SparseSparseProduct
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseProduct.h	/^struct traits<SparseSparseProduct<LhsNested, RhsNested> >$/;"	s	namespace:internal
EIGEN_SPARSEREDUX_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseRedux.h	26;"	d
sum	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseRedux.h	/^SparseMatrix<_Scalar,_Options,_Index>::sum() const$/;"	f	class:SparseMatrix
sum	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseRedux.h	/^SparseMatrixBase<Derived>::sum() const$/;"	f	class:SparseMatrixBase
sum	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseRedux.h	/^SparseVector<_Scalar,_Options,_Index>::sum() const$/;"	f	class:SparseVector
DenseTimeSparseSelfAdjointProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    DenseTimeSparseSelfAdjointProduct(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs)$/;"	f	class:DenseTimeSparseSelfAdjointProduct
DenseTimeSparseSelfAdjointProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^class DenseTimeSparseSelfAdjointProduct$/;"	c
EIGEN_SPARSE_SELFADJOINTVIEW_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:SparseSelfAdjointView
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:SparseSymmetricPermutationProduct
MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    typedef typename MatrixType::Nested MatrixTypeNested;$/;"	t	class:SparseSelfAdjointView
MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    typedef typename MatrixType::Nested MatrixTypeNested;$/;"	t	class:SparseSymmetricPermutationProduct
Perm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    typedef PermutationMatrix<Dynamic> Perm;$/;"	t	class:SparseSymmetricPermutationProduct
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:SparseSelfAdjointView
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:SparseSymmetricPermutationProduct
SparseSelfAdjointTimeDenseProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    SparseSelfAdjointTimeDenseProduct(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs)$/;"	f	class:SparseSelfAdjointTimeDenseProduct
SparseSelfAdjointTimeDenseProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^class SparseSelfAdjointTimeDenseProduct$/;"	c
SparseSelfAdjointView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    inline SparseSelfAdjointView(const MatrixType& matrix) : m_matrix(matrix)$/;"	f	class:SparseSelfAdjointView
SparseSelfAdjointView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^template<typename MatrixType, unsigned int UpLo> class SparseSelfAdjointView$/;"	c
SparseSymmetricPermutationProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    SparseSymmetricPermutationProduct(const MatrixType& mat, const Perm& perm)$/;"	f	class:SparseSymmetricPermutationProduct
SparseSymmetricPermutationProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^class SparseSymmetricPermutationProduct$/;"	c
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^  typedef Dense StorageKind;$/;"	t	struct:internal::traits
VectorI	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    typedef Matrix<Index,Dynamic,1> VectorI;$/;"	t	class:SparseSelfAdjointView
VectorI	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    typedef Matrix<Index,Dynamic,1> VectorI;$/;"	t	class:SparseSymmetricPermutationProduct
_MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    typedef typename internal::remove_all<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	class:SparseSelfAdjointView
_MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    typedef typename internal::remove_all<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	class:SparseSymmetricPermutationProduct
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:SparseSelfAdjointView
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:SparseSymmetricPermutationProduct
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    template<typename DestScalar> void evalTo(DynamicSparseMatrix<DestScalar>& _dest) const$/;"	f	class:SparseSelfAdjointView
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    template<typename DestScalar> void evalTo(SparseMatrix<DestScalar>& _dest) const$/;"	f	class:SparseSelfAdjointView
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    template<typename DestScalar> void evalTo(SparseMatrix<DestScalar>& _dest) const$/;"	f	class:SparseSymmetricPermutationProduct
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    template<typename DestType,unsigned int DestUpLo> void evalTo(SparseSelfAdjointView<DestType,DestUpLo>& dest) const$/;"	f	class:SparseSymmetricPermutationProduct
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^namespace internal {$/;"	n
m_countPerCol	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    mutable VectorI m_countPerCol;$/;"	m	class:SparseSelfAdjointView
m_countPerRow	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    mutable VectorI m_countPerRow;$/;"	m	class:SparseSelfAdjointView
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    const MatrixTypeNested m_matrix;$/;"	m	class:SparseSymmetricPermutationProduct
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    const typename MatrixType::Nested m_matrix;$/;"	m	class:SparseSelfAdjointView
m_perm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    const Perm& m_perm;$/;"	m	class:SparseSymmetricPermutationProduct
matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    _MatrixTypeNested& matrix() { return m_matrix.const_cast_derived(); }$/;"	f	class:SparseSelfAdjointView
matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    const _MatrixTypeNested& matrix() const { return m_matrix; }$/;"	f	class:SparseSelfAdjointView
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    operator*(const MatrixBase<OtherDerived>& lhs, const SparseSelfAdjointView& rhs)$/;"	f	class:SparseSelfAdjointView
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    operator*(const MatrixBase<OtherDerived>& rhs) const$/;"	f	class:SparseSelfAdjointView
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    SparseSelfAdjointView& operator=(const SparseSymmetricPermutationProduct<SrcMatrixType,SrcUpLo>& permutedMatrix)$/;"	f	class:SparseSelfAdjointView
permute_symm_to_fullsymm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^void permute_symm_to_fullsymm(const MatrixType& mat, SparseMatrix<typename MatrixType::Scalar,DestOrder,typename MatrixType::Index>& _dest, const typename MatrixType::Index* perm)$/;"	f	namespace:internal
permute_symm_to_symm	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^void permute_symm_to_symm(const MatrixType& mat, SparseMatrix<typename MatrixType::Scalar,DestOrder,typename MatrixType::Index>& _dest, const typename MatrixType::Index* perm)$/;"	f	namespace:internal
rankUpdate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^SparseSelfAdjointView<MatrixType,UpLo>::rankUpdate(const SparseMatrixBase<DerivedU>& u, Scalar alpha)$/;"	f	class:SparseSelfAdjointView
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:SparseSelfAdjointView
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:SparseSymmetricPermutationProduct
scaleAndAddTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    template<typename Dest> void scaleAndAddTo(Dest& \/*dest*\/, Scalar \/*alpha*\/) const$/;"	f	class:DenseTimeSparseSelfAdjointProduct
scaleAndAddTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    template<typename Dest> void scaleAndAddTo(Dest& dest, Scalar alpha) const$/;"	f	class:SparseSelfAdjointTimeDenseProduct
selfadjointView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^SparseSelfAdjointView<Derived, UpLo> SparseMatrixBase<Derived>::selfadjointView()$/;"	f	class:SparseMatrixBase
selfadjointView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^const SparseSelfAdjointView<Derived, UpLo> SparseMatrixBase<Derived>::selfadjointView() const$/;"	f	class:SparseMatrixBase
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^struct traits<DenseTimeSparseSelfAdjointProduct<Lhs,Rhs,UpLo> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^struct traits<SparseSelfAdjointTimeDenseProduct<Lhs,Rhs,UpLo> >$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^struct traits<SparseSelfAdjointView<MatrixType,UpLo> > : traits<MatrixType> {$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^struct traits<SparseSymmetricPermutationProduct<MatrixType,UpLo> > : traits<MatrixType> {$/;"	s	namespace:internal
twistedBy	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSelfAdjointView.h	/^    SparseSymmetricPermutationProduct<_MatrixTypeNested,UpLo> twistedBy(const PermutationMatrix<Dynamic>& perm) const$/;"	f	class:SparseSelfAdjointView
EIGEN_SPARSESPARSEPRODUCT_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	26;"	d
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^  typedef typename traits<typename remove_all<Lhs>::type>::Scalar Scalar;$/;"	t	struct:internal::sparse_product_selector
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^  typedef typename traits<typename remove_all<Lhs>::type>::Scalar Scalar;$/;"	t	struct:internal::sparse_product_selector2
_experimentalNewProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^inline void SparseMatrixBase<Derived>::_experimentalNewProduct(const Lhs& lhs, const Rhs& rhs)$/;"	f	class:SparseMatrixBase
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^namespace internal {$/;"	n
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^SparseMatrixBase<Derived>::operator*(const SparseMatrixBase<OtherDerived> &other) const$/;"	f	class:SparseMatrixBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^inline Derived& SparseMatrixBase<Derived>::operator=(const SparseSparseProduct<Lhs,Rhs>& product)$/;"	f	class:SparseMatrixBase
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^  static void run(const Lhs& lhs, const Rhs& rhs, ResultType& res)$/;"	f	struct:internal::sparse_product_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^  static void run(const Lhs& lhs, const Rhs& rhs, ResultType& res)$/;"	f	struct:internal::sparse_product_selector2
sparse_product_impl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^static void sparse_product_impl(const Lhs& lhs, const Rhs& rhs, ResultType& res)$/;"	f	namespace:internal
sparse_product_impl2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^static void sparse_product_impl2(const Lhs& lhs, const Rhs& rhs, ResultType& res)$/;"	f	namespace:internal
sparse_product_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^struct sparse_product_selector<Lhs,Rhs,ResultType,ColMajor,ColMajor,ColMajor>$/;"	s	namespace:internal
sparse_product_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^struct sparse_product_selector<Lhs,Rhs,ResultType,ColMajor,ColMajor,RowMajor>$/;"	s	namespace:internal
sparse_product_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^struct sparse_product_selector<Lhs,Rhs,ResultType,RowMajor,RowMajor,ColMajor>$/;"	s	namespace:internal
sparse_product_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^struct sparse_product_selector<Lhs,Rhs,ResultType,RowMajor,RowMajor,RowMajor>$/;"	s	namespace:internal
sparse_product_selector2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^struct sparse_product_selector2<Lhs,Rhs,ResultType,ColMajor,ColMajor,ColMajor>$/;"	s	namespace:internal
sparse_product_selector2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^struct sparse_product_selector2<Lhs,Rhs,ResultType,ColMajor,ColMajor,RowMajor>$/;"	s	namespace:internal
sparse_product_selector2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^struct sparse_product_selector2<Lhs,Rhs,ResultType,ColMajor,RowMajor,ColMajor>$/;"	s	namespace:internal
sparse_product_selector2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^struct sparse_product_selector2<Lhs,Rhs,ResultType,ColMajor,RowMajor,RowMajor>$/;"	s	namespace:internal
sparse_product_selector2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^struct sparse_product_selector2<Lhs,Rhs,ResultType,RowMajor,ColMajor,ColMajor>$/;"	s	namespace:internal
sparse_product_selector2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^struct sparse_product_selector2<Lhs,Rhs,ResultType,RowMajor,ColMajor,RowMajor>$/;"	s	namespace:internal
sparse_product_selector2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^struct sparse_product_selector2<Lhs,Rhs,ResultType,RowMajor,RowMajor,ColMajor>$/;"	s	namespace:internal
sparse_product_selector2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseSparseProduct.h	/^struct sparse_product_selector2<Lhs,Rhs,ResultType,RowMajor,RowMajor,RowMajor>$/;"	s	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTranspose.h	/^    typedef typename _MatrixTypeNested::InnerIterator Base;$/;"	t	class:TransposeImpl::InnerIterator
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTranspose.h	/^    typedef typename _MatrixTypeNested::ReverseInnerIterator Base;$/;"	t	class:TransposeImpl::ReverseInnerIterator
EIGEN_SPARSETRANSPOSE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTranspose.h	26;"	d
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTranspose.h	/^    EIGEN_STRONG_INLINE InnerIterator(const TransposeImpl& trans, Index outer)$/;"	f	class:TransposeImpl::InnerIterator
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTranspose.h	/^template<typename MatrixType> class TransposeImpl<MatrixType,Sparse>::InnerIterator$/;"	c	class:TransposeImpl
ReverseInnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTranspose.h	/^    EIGEN_STRONG_INLINE ReverseInnerIterator(const TransposeImpl& xpr, Index outer)$/;"	f	class:TransposeImpl::ReverseInnerIterator
ReverseInnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTranspose.h	/^template<typename MatrixType> class TransposeImpl<MatrixType,Sparse>::ReverseInnerIterator$/;"	c	class:TransposeImpl
TransposeImpl	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTranspose.h	/^template<typename MatrixType> class TransposeImpl<MatrixType,Sparse>$/;"	c
_MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTranspose.h	/^    typedef typename internal::remove_all<typename MatrixType::Nested>::type _MatrixTypeNested;$/;"	t	class:TransposeImpl
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTranspose.h	/^    inline Index col() const { return Base::row(); }$/;"	f	class:TransposeImpl::InnerIterator
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTranspose.h	/^    inline Index col() const { return Base::row(); }$/;"	f	class:TransposeImpl::ReverseInnerIterator
nonZeros	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTranspose.h	/^    inline Index nonZeros() const { return derived().nestedExpression().nonZeros(); }$/;"	f	class:TransposeImpl
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTranspose.h	/^    inline Index row() const { return Base::col(); }$/;"	f	class:TransposeImpl::InnerIterator
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTranspose.h	/^    inline Index row() const { return Base::col(); }$/;"	f	class:TransposeImpl::ReverseInnerIterator
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTriangularView.h	/^    typedef typename MatrixType::InnerIterator Base;$/;"	t	class:SparseTriangularView::InnerIterator
EIGEN_SPARSE_TRIANGULARVIEW_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTriangularView.h	26;"	d
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTriangularView.h	/^    EIGEN_STRONG_INLINE InnerIterator(const SparseTriangularView& view, Index outer)$/;"	f	class:SparseTriangularView::InnerIterator
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTriangularView.h	/^class SparseTriangularView<MatrixType,Mode>::InnerIterator : public MatrixType::InnerIterator$/;"	c	class:SparseTriangularView
MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTriangularView.h	/^        MatrixType, const MatrixType&>::type MatrixTypeNested;$/;"	t	class:SparseTriangularView
SkipFirst	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTriangularView.h	/^    enum { SkipFirst = (Mode==Lower && !(MatrixType::Flags&RowMajorBit))$/;"	e	enum:SparseTriangularView::<anonymous>
SparseTriangularView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTriangularView.h	/^    inline SparseTriangularView(const MatrixType& matrix) : m_matrix(matrix) {}$/;"	f	class:SparseTriangularView
SparseTriangularView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTriangularView.h	/^template<typename MatrixType, int Mode> class SparseTriangularView$/;"	c
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTriangularView.h	/^    inline Index col() const { return Base::col(); }$/;"	f	class:SparseTriangularView::InnerIterator
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTriangularView.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:SparseTriangularView
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTriangularView.h	/^namespace internal {$/;"	n
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTriangularView.h	/^    MatrixTypeNested m_matrix;$/;"	m	class:SparseTriangularView
nestedExpression	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTriangularView.h	/^    inline const MatrixType& nestedExpression() const { return m_matrix; }$/;"	f	class:SparseTriangularView
operator bool	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTriangularView.h	/^    EIGEN_STRONG_INLINE operator bool() const$/;"	f	class:SparseTriangularView::InnerIterator
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTriangularView.h	/^    inline Index row() const { return Base::row(); }$/;"	f	class:SparseTriangularView::InnerIterator
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTriangularView.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:SparseTriangularView
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTriangularView.h	/^struct traits<SparseTriangularView<MatrixType,Mode> >$/;"	s	namespace:internal
triangularView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseTriangularView.h	/^SparseMatrixBase<Derived>::triangularView() const$/;"	f	class:SparseMatrixBase
CoherentAccessPattern	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	/^const int CoherentAccessPattern     = 0x1;$/;"	v
EIGEN_DBG_SPARSE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	29;"	d
EIGEN_DBG_SPARSE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	31;"	d
EIGEN_SPARSEUTIL_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	26;"	d
EIGEN_SPARSE_INHERIT_ASSIGNMENT_OPERATOR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	34;"	d
EIGEN_SPARSE_INHERIT_ASSIGNMENT_OPERATORS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	52;"	d
EIGEN_SPARSE_INHERIT_SCALAR_ASSIGNMENT_OPERATOR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	45;"	d
EIGEN_SPARSE_PUBLIC_INTERFACE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	75;"	d
InnerRandomAccessPattern	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	/^const int InnerRandomAccessPattern  = 0x2 | CoherentAccessPattern;$/;"	v
OuterRandomAccessPattern	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	/^const int OuterRandomAccessPattern  = 0x4 | CoherentAccessPattern;$/;"	v
RandomAccessPattern	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	/^const int RandomAccessPattern       = 0x8 | OuterRandomAccessPattern | InnerRandomAccessPattern;$/;"	v
_EIGEN_SPARSE_PUBLIC_INTERFACE	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	59;"	d
_Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	/^          _Flags = traits<T>::Flags$/;"	e	enum:internal::eval::<anonymous>
_Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	/^          _Flags = traits<T>::Flags$/;"	e	enum:internal::plain_matrix_type::<anonymous>
_Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	/^    typedef typename traits<T>::Scalar _Scalar;$/;"	t	struct:internal::eval
_Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	/^  typedef typename traits<T>::Scalar _Scalar;$/;"	t	struct:internal::plain_matrix_type
eval	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	/^template<typename T> struct eval<T,Sparse>$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	/^namespace internal {$/;"	n
plain_matrix_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	/^template<typename T> struct plain_matrix_type<T,Sparse>$/;"	s	namespace:internal
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	/^    typedef SparseMatrix<_Scalar, _Flags> type;$/;"	t	struct:internal::eval
type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseUtil.h	/^    typedef SparseMatrix<_Scalar, _Flags> type;$/;"	t	struct:internal::plain_matrix_type
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    CoeffReadCost = NumTraits<Scalar>::ReadCost,$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    ColsAtCompileTime = IsColVector ? 1 : Dynamic,$/;"	e	enum:internal::traits::<anonymous>
EIGEN_SPARSEVECTOR_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	26;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    Flags = _Options | NestByRefBit | LvalueBit,$/;"	e	enum:internal::traits::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^  typedef _Index Index;$/;"	t	struct:internal::traits
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    InnerIterator(const CompressedStorage<Scalar,Index>& data)$/;"	f	class:SparseVector::InnerIterator
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    InnerIterator(const Flagged<SparseVector,Added,Removed>& vec, Index )$/;"	f	class:SparseVector::InnerIterator
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    InnerIterator(const SparseVector& vec, Index outer=0)$/;"	f	class:SparseVector::InnerIterator
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^class SparseVector<Scalar,_Options,_Index>::InnerIterator$/;"	c	class:SparseVector
IsColVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    IsColVector = _Options & RowMajorBit ? 0 : 1,$/;"	e	enum:internal::traits::<anonymous>
IsColVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    enum { IsColVector = internal::traits<SparseVector>::IsColVector };$/;"	e	enum:SparseVector::<anonymous>
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    MaxColsAtCompileTime = ColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    MaxRowsAtCompileTime = RowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
Options	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^      Options = _Options$/;"	e	enum:SparseVector::<anonymous>
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    RowsAtCompileTime = IsColVector ? Dynamic : 1,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^  typedef _Scalar Scalar;$/;"	t	struct:internal::traits
SparseBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    typedef SparseMatrixBase<SparseVector> SparseBase;$/;"	t	class:SparseVector
SparseVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline SparseVector() : m_size(0) { resize(0); }$/;"	f	class:SparseVector
SparseVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline SparseVector(Index rows, Index cols) : m_size(0) { resize(rows,cols); }$/;"	f	class:SparseVector
SparseVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline SparseVector(Index size) : m_size(0) { resize(size); }$/;"	f	class:SparseVector
SparseVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline SparseVector(const MatrixBase<OtherDerived>& other)$/;"	f	class:SparseVector
SparseVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline SparseVector(const SparseMatrixBase<OtherDerived>& other)$/;"	f	class:SparseVector
SparseVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline SparseVector(const SparseVector& other)$/;"	f	class:SparseVector
SparseVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^class SparseVector$/;"	c
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^  typedef Sparse StorageKind;$/;"	t	struct:internal::traits
SupportedAccessPatterns	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    SupportedAccessPatterns = InnerRandomAccessPattern$/;"	e	enum:internal::traits::<anonymous>
XprKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^  typedef MatrixXpr XprKind;$/;"	t	struct:internal::traits
_data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    CompressedStorage<Scalar,Index>& _data() const { return m_data; }$/;"	f	class:SparseVector
_data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    CompressedStorage<Scalar,Index>& _data() { return m_data; }$/;"	f	class:SparseVector
_innerIndexPtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    EIGEN_STRONG_INLINE Index* _innerIndexPtr() { return &m_data.index(0); }$/;"	f	class:SparseVector
_innerIndexPtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    EIGEN_STRONG_INLINE const Index* _innerIndexPtr() const { return &m_data.index(0); }$/;"	f	class:SparseVector
_valuePtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    EIGEN_STRONG_INLINE Scalar* _valuePtr() { return &m_data.value(0); }$/;"	f	class:SparseVector
_valuePtr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    EIGEN_STRONG_INLINE const Scalar* _valuePtr() const { return &m_data.value(0); }$/;"	f	class:SparseVector
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline Scalar coeff(Index i) const { return m_data.at(i); }$/;"	f	class:SparseVector
coeff	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline Scalar coeff(Index row, Index col) const$/;"	f	class:SparseVector
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline Scalar& coeffRef(Index i)$/;"	f	class:SparseVector
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline Scalar& coeffRef(Index row, Index col)$/;"	f	class:SparseVector
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline Index col() const { return IsColVector ? 0 : index(); }$/;"	f	class:SparseVector::InnerIterator
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    EIGEN_STRONG_INLINE Index cols() const { return IsColVector ? 1 : m_size; }$/;"	f	class:SparseVector
endFill	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    EIGEN_DEPRECATED void endFill() {}$/;"	f	class:SparseVector
fill	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    EIGEN_DEPRECATED Scalar& fill(Index i)$/;"	f	class:SparseVector
fill	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    EIGEN_DEPRECATED Scalar& fill(Index r, Index c)$/;"	f	class:SparseVector
fillrand	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    EIGEN_DEPRECATED Scalar& fillrand(Index i)$/;"	f	class:SparseVector
fillrand	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    EIGEN_DEPRECATED Scalar& fillrand(Index r, Index c)$/;"	f	class:SparseVector
finalize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline void finalize() {}$/;"	f	class:SparseVector
index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline Index index() const { return m_data.index(m_id); }$/;"	f	class:SparseVector::InnerIterator
innerNonZeros	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    EIGEN_STRONG_INLINE Index innerNonZeros(Index j) const { eigen_assert(j==0); return m_size; }$/;"	f	class:SparseVector
innerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    EIGEN_STRONG_INLINE Index innerSize() const { return m_size; }$/;"	f	class:SparseVector
insert	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    Scalar& insert(Index i)$/;"	f	class:SparseVector
insert	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline Scalar& insert(Index row, Index col)$/;"	f	class:SparseVector
insertBack	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline Scalar& insertBack(Index i)$/;"	f	class:SparseVector
insertBackByOuterInner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline Scalar& insertBackByOuterInner(Index outer, Index inner)$/;"	f	class:SparseVector
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^namespace internal {$/;"	n
m_data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    CompressedStorage<Scalar,Index> m_data;$/;"	m	class:SparseVector
m_data	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    const CompressedStorage<Scalar,Index>& m_data;$/;"	m	class:SparseVector::InnerIterator
m_end	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    const Index m_end;$/;"	m	class:SparseVector::InnerIterator
m_id	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    Index m_id;$/;"	m	class:SparseVector::InnerIterator
m_size	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    Index m_size;$/;"	m	class:SparseVector
nonZeros	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline Index nonZeros() const  { return static_cast<Index>(m_data.size()); }$/;"	f	class:SparseVector
operator ++	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline InnerIterator& operator++() { m_id++; return *this; }$/;"	f	class:SparseVector::InnerIterator
operator <<	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    friend std::ostream & operator << (std::ostream & s, const SparseVector& m)$/;"	f	class:SparseVector
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline SparseVector& operator=(const SparseMatrixBase<OtherDerived>& other)$/;"	f	class:SparseVector
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline SparseVector& operator=(const SparseSparseProduct<Lhs,Rhs>& product)$/;"	f	class:SparseVector
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline SparseVector& operator=(const SparseVector& other)$/;"	f	class:SparseVector
operator bool	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline operator bool() const { return (m_id < m_end); }$/;"	f	class:SparseVector::InnerIterator
outerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    EIGEN_STRONG_INLINE Index outerSize() const { return 1; }$/;"	f	class:SparseVector
prune	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    void prune(Scalar reference, RealScalar epsilon = NumTraits<RealScalar>::dummy_precision())$/;"	f	class:SparseVector
reserve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline void reserve(Index reserveSize) { m_data.reserve(reserveSize); }$/;"	f	class:SparseVector
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    void resize(Index newSize)$/;"	f	class:SparseVector
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    void resize(Index rows, Index cols)$/;"	f	class:SparseVector
resizeNonZeros	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    void resizeNonZeros(Index size) { m_data.resize(size); }$/;"	f	class:SparseVector
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline Index row() const { return IsColVector ? index() : 0; }$/;"	f	class:SparseVector::InnerIterator
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    EIGEN_STRONG_INLINE Index rows() const { return IsColVector ? m_size : 1; }$/;"	f	class:SparseVector
setZero	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline void setZero() { m_data.clear(); }$/;"	f	class:SparseVector
startFill	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    EIGEN_DEPRECATED void startFill(Index reserve)$/;"	f	class:SparseVector
startVec	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline void startVec(Index outer)$/;"	f	class:SparseVector
swap	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline void swap(SparseVector& other)$/;"	f	class:SparseVector
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^struct traits<SparseVector<_Scalar, _Options, _Index> >$/;"	s	namespace:internal
value	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline Scalar value() const { return m_data.value(m_id); }$/;"	f	class:SparseVector::InnerIterator
valueRef	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline Scalar& valueRef() { return const_cast<Scalar&>(m_data.value(m_id)); }$/;"	f	class:SparseVector::InnerIterator
~SparseVector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseVector.h	/^    inline ~SparseVector() {}$/;"	f	class:SparseVector
EIGEN_SPARSEVIEW_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	27;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^    Flags = int(traits<MatrixType>::Flags) & (RowMajorBit)$/;"	e	enum:internal::traits::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^  typedef int Index;$/;"	t	struct:internal::traits
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^  InnerIterator(const SparseView& view, Index outer) :$/;"	f	class:SparseView::InnerIterator
InnerIterator	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^class SparseView<MatrixType>::InnerIterator : public _MatrixTypeNested::InnerIterator$/;"	c	class:SparseView
IterBase	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^  typedef typename _MatrixTypeNested::InnerIterator IterBase;$/;"	t	class:SparseView::InnerIterator
MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^  typedef typename MatrixType::Nested MatrixTypeNested;$/;"	t	class:SparseView
SparseView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^  SparseView(const MatrixType& mat, const Scalar& m_reference = Scalar(0),$/;"	f	class:SparseView
SparseView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^class SparseView : public SparseMatrixBase<SparseView<MatrixType> >$/;"	c
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^  typedef Sparse StorageKind;$/;"	t	struct:internal::traits
_MatrixTypeNested	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^  typedef typename internal::remove_all<MatrixTypeNested>::type _MatrixTypeNested;$/;"	t	class:SparseView
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^  inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:SparseView
incrementToNonZero	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^  void incrementToNonZero()$/;"	f	class:SparseView::InnerIterator
innerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^  inline Index innerSize() const { return m_matrix.innerSize(); }$/;"	f	class:SparseView
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^namespace internal {$/;"	n
m_epsilon	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^  typename NumTraits<Scalar>::Real m_epsilon;$/;"	m	class:SparseView
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^  const MatrixTypeNested m_matrix;$/;"	m	class:SparseView
m_reference	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^  Scalar m_reference;$/;"	m	class:SparseView
m_view	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^  const SparseView& m_view;$/;"	m	class:SparseView::InnerIterator
operator ++	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^  EIGEN_STRONG_INLINE InnerIterator& operator++()$/;"	f	class:SparseView::InnerIterator
outerSize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^  inline Index outerSize() const { return m_matrix.outerSize(); }$/;"	f	class:SparseView
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^  inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:SparseView
sparseView	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^const SparseView<Derived> MatrixBase<Derived>::sparseView(const Scalar& m_reference,$/;"	f	class:MatrixBase
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/SparseView.h	/^struct traits<SparseView<MatrixType> > : traits<MatrixType>$/;"	s	namespace:internal
EIGEN_SPARSETRIANGULARSOLVER_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/TriangularSolver.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/TriangularSolver.h	/^                                         typename traits<Rhs>::Index>::type Index;$/;"	t	struct:internal::sparse_solve_triangular_sparse_selector
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/TriangularSolver.h	/^  typedef typename Rhs::Scalar Scalar;$/;"	t	struct:internal::sparse_solve_triangular_selector
Scalar	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/TriangularSolver.h	/^  typedef typename Rhs::Scalar Scalar;$/;"	t	struct:internal::sparse_solve_triangular_sparse_selector
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/TriangularSolver.h	/^namespace internal {$/;"	n
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/TriangularSolver.h	/^  static void run(const Lhs& lhs, Rhs& other)$/;"	f	struct:internal::sparse_solve_triangular_selector
run	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/TriangularSolver.h	/^  static void run(const Lhs& lhs, Rhs& other)$/;"	f	struct:internal::sparse_solve_triangular_sparse_selector
solve	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/TriangularSolver.h	/^SparseTriangularView<ExpressionType,Mode>::solve(const MatrixBase<OtherDerived>& other) const$/;"	f	class:SparseTriangularView
solveInPlace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/TriangularSolver.h	/^void SparseTriangularView<ExpressionType,Mode>::solveInPlace(MatrixBase<OtherDerived>& other) const$/;"	f	class:SparseTriangularView
solveInPlace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/TriangularSolver.h	/^void SparseTriangularView<ExpressionType,Mode>::solveInPlace(SparseMatrixBase<OtherDerived>& other) const$/;"	f	class:SparseTriangularView
solveTriangular	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/TriangularSolver.h	/^SparseMatrixBase<Derived>::solveTriangular(const MatrixBase<OtherDerived>& other) const$/;"	f	class:SparseMatrixBase
solveTriangularInPlace	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/TriangularSolver.h	/^void SparseMatrixBase<Derived>::solveTriangularInPlace(MatrixBase<OtherDerived>& other) const$/;"	f	class:SparseMatrixBase
sparse_solve_triangular_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/TriangularSolver.h	/^struct sparse_solve_triangular_selector<Lhs,Rhs,Mode,Lower,ColMajor>$/;"	s	namespace:internal
sparse_solve_triangular_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/TriangularSolver.h	/^struct sparse_solve_triangular_selector<Lhs,Rhs,Mode,Lower,RowMajor>$/;"	s	namespace:internal
sparse_solve_triangular_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/TriangularSolver.h	/^struct sparse_solve_triangular_selector<Lhs,Rhs,Mode,Upper,ColMajor>$/;"	s	namespace:internal
sparse_solve_triangular_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/TriangularSolver.h	/^struct sparse_solve_triangular_selector<Lhs,Rhs,Mode,Upper,RowMajor>$/;"	s	namespace:internal
sparse_solve_triangular_sparse_selector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/Sparse/TriangularSolver.h	/^struct sparse_solve_triangular_sparse_selector<Lhs,Rhs,Mode,UpLo,ColMajor>$/;"	s	namespace:internal
EIGEN_DEFINE_STL_DEQUE_SPECIALIZATION	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdDeque.h	43;"	d
EIGEN_EXPLICIT_STL_DEQUE_INSTANTIATION	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdDeque.h	33;"	d
EIGEN_EXPLICIT_STL_DEQUE_INSTANTIATION	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdDeque.h	35;"	d
EIGEN_STDDEQUE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdDeque.h	27;"	d
EIGEN_STD_DEQUE_SPECIALIZATION_BODY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdDeque.h	75;"	d
deque	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdDeque.h	/^  class deque<T,EIGEN_ALIGNED_ALLOCATOR<T> >$/;"	c	namespace:std
deque_base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdDeque.h	/^                Eigen::aligned_allocator_indirection<EIGEN_WORKAROUND_MSVC_STL_SUPPORT(T)> > deque_base;$/;"	t	class:std::deque
insert	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdDeque.h	/^  iterator insert(const_iterator position, const value_type& x)$/;"	f	class:std::deque
insert	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdDeque.h	/^  void insert(const_iterator position, size_type new_size, const value_type& x)$/;"	f	class:std::deque
push_back	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdDeque.h	/^  void push_back(const value_type& x)$/;"	f	class:std::deque
push_front	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdDeque.h	/^  void push_front(const value_type& x)$/;"	f	class:std::deque
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdDeque.h	/^  void resize(size_type new_size)$/;"	f	class:std::deque
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdDeque.h	/^  void resize(size_type new_size, const value_type& x)$/;"	f	class:std::deque
std	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdDeque.h	/^namespace std {$/;"	n
EIGEN_DEFINE_STL_LIST_SPECIALIZATION	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdList.h	42;"	d
EIGEN_EXPLICIT_STL_LIST_INSTANTIATION	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdList.h	32;"	d
EIGEN_EXPLICIT_STL_LIST_INSTANTIATION	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdList.h	34;"	d
EIGEN_STDLIST_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdList.h	26;"	d
EIGEN_STD_LIST_SPECIALIZATION_BODY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdList.h	75;"	d
insert	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdList.h	/^    iterator insert(const_iterator position, const value_type& x)$/;"	f	class:std::list
insert	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdList.h	/^    void insert(const_iterator position, size_type new_size, const value_type& x)$/;"	f	class:std::list
list	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdList.h	/^  class list<T,EIGEN_ALIGNED_ALLOCATOR<T> >$/;"	c	namespace:std
list_base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdList.h	/^                 Eigen::aligned_allocator_indirection<EIGEN_WORKAROUND_MSVC_STL_SUPPORT(T)> > list_base;$/;"	t	class:std::list
push_back	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdList.h	/^    void push_back(const value_type& x)$/;"	f	class:std::list
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdList.h	/^    void resize(size_type new_size)$/;"	f	class:std::list
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdList.h	/^    void resize(size_type new_size, const value_type& x)$/;"	f	class:std::list
std	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdList.h	/^namespace std$/;"	n
EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdVector.h	43;"	d
EIGEN_EXPLICIT_STL_VECTOR_INSTANTIATION	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdVector.h	33;"	d
EIGEN_EXPLICIT_STL_VECTOR_INSTANTIATION	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdVector.h	35;"	d
EIGEN_STDVECTOR_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdVector.h	27;"	d
EIGEN_STD_VECTOR_SPECIALIZATION_BODY	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdVector.h	72;"	d
insert	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdVector.h	/^  iterator insert(const_iterator position, const value_type& x)$/;"	f	class:std::vector
insert	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdVector.h	/^  void insert(const_iterator position, size_type new_size, const value_type& x)$/;"	f	class:std::vector
push_back	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdVector.h	/^  void push_back(const value_type& x)$/;"	f	class:std::vector
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdVector.h	/^  void resize(size_type new_size)$/;"	f	class:std::vector
resize	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdVector.h	/^  void resize(size_type new_size, const value_type& x)$/;"	f	class:std::vector
std	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdVector.h	/^namespace std {$/;"	n
vector	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdVector.h	/^  class vector<T,EIGEN_ALIGNED_ALLOCATOR<T> >$/;"	c	namespace:std
vector_base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/StdVector.h	/^                 Eigen::aligned_allocator_indirection<EIGEN_WORKAROUND_MSVC_STL_SUPPORT(T)> > vector_base;$/;"	t	class:std::vector
EIGEN_ALIGNED_ALLOCATOR	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	30;"	d
EIGEN_STL_DETAILS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	27;"	d
EIGEN_WORKAROUND_MSVC_STL_SUPPORT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	69;"	d
EIGEN_WORKAROUND_MSVC_STL_SUPPORT	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	93;"	d
Eigen	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^namespace Eigen {$/;"	n
aligned_allocator_indirection	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    aligned_allocator_indirection() {}$/;"	f	class:Eigen::aligned_allocator_indirection
aligned_allocator_indirection	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    aligned_allocator_indirection(const EIGEN_ALIGNED_ALLOCATOR<T>& ) {}$/;"	f	class:Eigen::aligned_allocator_indirection
aligned_allocator_indirection	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    aligned_allocator_indirection(const EIGEN_ALIGNED_ALLOCATOR<U>& ) {}$/;"	f	class:Eigen::aligned_allocator_indirection
aligned_allocator_indirection	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    aligned_allocator_indirection(const aligned_allocator_indirection& ) : EIGEN_ALIGNED_ALLOCATOR<T>() {}$/;"	f	class:Eigen::aligned_allocator_indirection
aligned_allocator_indirection	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    aligned_allocator_indirection(const aligned_allocator_indirection<U>& ) {}$/;"	f	class:Eigen::aligned_allocator_indirection
aligned_allocator_indirection	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^  class aligned_allocator_indirection : public EIGEN_ALIGNED_ALLOCATOR<T>$/;"	c	namespace:Eigen
const_pointer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    typedef const T*  const_pointer;$/;"	t	class:Eigen::aligned_allocator_indirection
const_reference	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    typedef const T&  const_reference;$/;"	t	class:Eigen::aligned_allocator_indirection
difference_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    typedef ptrdiff_t difference_type;$/;"	t	class:Eigen::aligned_allocator_indirection
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^  namespace internal {$/;"	n	namespace:Eigen
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    inline T& operator=(const OtherT& other)$/;"	f	struct:Eigen::internal::workaround_msvc_stl_support
operator =	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    inline workaround_msvc_stl_support& operator=(const workaround_msvc_stl_support& other)$/;"	f	struct:Eigen::internal::workaround_msvc_stl_support
operator T&	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    inline operator T& () { return *static_cast<T*>(this); }$/;"	f	struct:Eigen::internal::workaround_msvc_stl_support
operator const T&	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    inline operator const T& () const { return *static_cast<const T*>(this); }$/;"	f	struct:Eigen::internal::workaround_msvc_stl_support
other	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^      typedef aligned_allocator_indirection<U> other;$/;"	t	struct:Eigen::aligned_allocator_indirection::rebind
pointer	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    typedef T*        pointer;$/;"	t	class:Eigen::aligned_allocator_indirection
rebind	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    struct rebind$/;"	s	class:Eigen::aligned_allocator_indirection
reference	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    typedef T&        reference;$/;"	t	class:Eigen::aligned_allocator_indirection
size_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    typedef size_t    size_type;$/;"	t	class:Eigen::aligned_allocator_indirection
value_type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    typedef T         value_type;$/;"	t	class:Eigen::aligned_allocator_indirection
workaround_msvc_stl_support	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    inline workaround_msvc_stl_support() : T() {}$/;"	f	struct:Eigen::internal::workaround_msvc_stl_support
workaround_msvc_stl_support	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    inline workaround_msvc_stl_support(const T& other) : T(other) {}$/;"	f	struct:Eigen::internal::workaround_msvc_stl_support
workaround_msvc_stl_support	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^  template<typename T> struct workaround_msvc_stl_support : public T$/;"	s	namespace:Eigen::internal
~aligned_allocator_indirection	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/StlSupport/details.h	/^    ~aligned_allocator_indirection() {}$/;"	f	class:Eigen::aligned_allocator_indirection
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^  typedef ReturnByValue<image_retval_base> Base;$/;"	t	struct:internal::image_retval_base
DecompositionType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^  typedef _DecompositionType DecompositionType;$/;"	t	struct:internal::image_retval_base
EIGEN_MAKE_IMAGE_HELPERS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	81;"	d
EIGEN_MISC_IMAGE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^  typedef typename Base::Index Index;$/;"	t	struct:internal::image_retval_base
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^  typedef typename DecompositionType::MatrixType MatrixType;$/;"	t	struct:internal::image_retval_base
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^  typedef typename DecompositionType::MatrixType MatrixType;$/;"	t	struct:internal::traits
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^  > ReturnType;$/;"	t	struct:internal::traits
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^  inline Index cols() const { return m_cols; }$/;"	f	struct:internal::image_retval_base
dec	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^  inline const DecompositionType& dec() const { return m_dec; }$/;"	f	struct:internal::image_retval_base
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^  template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:internal::image_retval_base
image_retval_base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^  image_retval_base(const DecompositionType& dec, const MatrixType& originalMatrix)$/;"	f	struct:internal::image_retval_base
image_retval_base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^template<typename _DecompositionType> struct image_retval_base$/;"	s	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^namespace internal {$/;"	n
m_cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^    Index m_rank, m_cols;$/;"	m	struct:internal::image_retval_base
m_dec	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^    const DecompositionType& m_dec;$/;"	m	struct:internal::image_retval_base
m_originalMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^    const MatrixType& m_originalMatrix;$/;"	m	struct:internal::image_retval_base
m_rank	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^    Index m_rank, m_cols;$/;"	m	struct:internal::image_retval_base
originalMatrix	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^  inline const MatrixType& originalMatrix() const { return m_originalMatrix; }$/;"	f	struct:internal::image_retval_base
rank	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^  inline Index rank() const { return m_rank; }$/;"	f	struct:internal::image_retval_base
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^  inline Index rows() const { return m_dec.rows(); }$/;"	f	struct:internal::image_retval_base
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Image.h	/^struct traits<image_retval_base<DecompositionType> >$/;"	s	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Kernel.h	/^  typedef ReturnByValue<kernel_retval_base> Base;$/;"	t	struct:internal::kernel_retval_base
DecompositionType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Kernel.h	/^  typedef _DecompositionType DecompositionType;$/;"	t	struct:internal::kernel_retval_base
EIGEN_MAKE_KERNEL_HELPERS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Kernel.h	80;"	d
EIGEN_MISC_KERNEL_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Kernel.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Kernel.h	/^  typedef typename Base::Index Index;$/;"	t	struct:internal::kernel_retval_base
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Kernel.h	/^  typedef typename DecompositionType::MatrixType MatrixType;$/;"	t	struct:internal::traits
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Kernel.h	/^  > ReturnType;$/;"	t	struct:internal::traits
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Kernel.h	/^  inline Index cols() const { return m_cols; }$/;"	f	struct:internal::kernel_retval_base
dec	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Kernel.h	/^  inline const DecompositionType& dec() const { return m_dec; }$/;"	f	struct:internal::kernel_retval_base
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Kernel.h	/^  template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:internal::kernel_retval_base
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Kernel.h	/^namespace internal {$/;"	n
kernel_retval_base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Kernel.h	/^  kernel_retval_base(const DecompositionType& dec)$/;"	f	struct:internal::kernel_retval_base
kernel_retval_base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Kernel.h	/^template<typename _DecompositionType> struct kernel_retval_base$/;"	s	namespace:internal
m_cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Kernel.h	/^    Index m_rank, m_cols;$/;"	m	struct:internal::kernel_retval_base
m_dec	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Kernel.h	/^    const DecompositionType& m_dec;$/;"	m	struct:internal::kernel_retval_base
m_rank	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Kernel.h	/^    Index m_rank, m_cols;$/;"	m	struct:internal::kernel_retval_base
rank	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Kernel.h	/^  inline Index rank() const { return m_rank; }$/;"	f	struct:internal::kernel_retval_base
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Kernel.h	/^  inline Index rows() const { return m_dec.cols(); }$/;"	f	struct:internal::kernel_retval_base
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Kernel.h	/^struct traits<kernel_retval_base<DecompositionType> >$/;"	s	namespace:internal
Base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Solve.h	/^  typedef ReturnByValue<solve_retval_base> Base;$/;"	t	struct:internal::solve_retval_base
DecompositionType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Solve.h	/^  typedef _DecompositionType DecompositionType;$/;"	t	struct:internal::solve_retval_base
EIGEN_MAKE_SOLVE_HELPERS	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Solve.h	74;"	d
EIGEN_MISC_SOLVE_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Solve.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Solve.h	/^  typedef typename Base::Index Index;$/;"	t	struct:internal::solve_retval_base
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Solve.h	/^  typedef typename DecompositionType::MatrixType MatrixType;$/;"	t	struct:internal::traits
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Solve.h	/^                 Rhs::MaxColsAtCompileTime> ReturnType;$/;"	t	struct:internal::traits
RhsNestedCleaned	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Solve.h	/^  typedef typename remove_all<typename Rhs::Nested>::type RhsNestedCleaned;$/;"	t	struct:internal::solve_retval_base
cols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Solve.h	/^  inline Index cols() const { return m_rhs.cols(); }$/;"	f	struct:internal::solve_retval_base
dec	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Solve.h	/^  inline const DecompositionType& dec() const { return m_dec; }$/;"	f	struct:internal::solve_retval_base
evalTo	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Solve.h	/^  template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:internal::solve_retval_base
internal	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Solve.h	/^namespace internal {$/;"	n
m_dec	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Solve.h	/^    const DecompositionType& m_dec;$/;"	m	struct:internal::solve_retval_base
m_rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Solve.h	/^    const typename Rhs::Nested m_rhs;$/;"	m	struct:internal::solve_retval_base
rhs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Solve.h	/^  inline const RhsNestedCleaned& rhs() const { return m_rhs; }$/;"	f	struct:internal::solve_retval_base
rows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Solve.h	/^  inline Index rows() const { return m_dec.cols(); }$/;"	f	struct:internal::solve_retval_base
solve_retval_base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Solve.h	/^  solve_retval_base(const DecompositionType& dec, const Rhs& rhs)$/;"	f	struct:internal::solve_retval_base
solve_retval_base	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Solve.h	/^template<typename _DecompositionType, typename Rhs> struct solve_retval_base$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/misc/Solve.h	/^struct traits<solve_retval_base<DecompositionType, Rhs> >$/;"	s	namespace:internal
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseBinaryOps.h	/^operator*(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const$/;"	f
operator +	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseBinaryOps.h	/^operator+(const Scalar& scalar) const$/;"	f
operator +	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseBinaryOps.h	/^operator+(const Scalar& scalar,const EIGEN_CURRENT_STORAGE_BASE_CLASS<Derived>& other)$/;"	f
operator -	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseBinaryOps.h	/^operator-(const Scalar& scalar) const$/;"	f
operator -	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseBinaryOps.h	/^operator-(const Scalar& scalar,const EIGEN_CURRENT_STORAGE_BASE_CLASS<Derived>& other)$/;"	f
operator /	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseBinaryOps.h	/^operator\/(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const$/;"	f
EIGEN_MAKE_SCALAR_CWISE_UNARY_OP	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h	189;"	d
abs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^abs() const$/;"	f
abs2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^abs2() const$/;"	f
acos	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^acos() const$/;"	f
asin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^asin() const$/;"	f
cos	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^cos() const$/;"	f
cube	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^cube() const$/;"	f
exp	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^exp() const$/;"	f
inverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^inverse() const$/;"	f
log	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^log() const$/;"	f
pow	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^pow(const Scalar& exponent) const$/;"	f
sin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^sin() const$/;"	f
sqrt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^sqrt() const$/;"	f
square	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^square() const$/;"	f
tan	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/ArrayCwiseUnaryOps.h	/^tan() const$/;"	f
ColXpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^typedef Block<Derived, internal::traits<Derived>::RowsAtCompileTime, 1, !IsRowMajor> ColXpr;$/;"	t
ColsBlockXpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^typedef Block<Derived, internal::traits<Derived>::RowsAtCompileTime, Dynamic, !IsRowMajor> ColsBlockXpr;$/;"	t
ConstColXpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^typedef const Block<const Derived, internal::traits<Derived>::RowsAtCompileTime, 1, !IsRowMajor> ConstColXpr;$/;"	t
ConstColsBlockXpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^typedef const Block<const Derived, internal::traits<Derived>::RowsAtCompileTime, Dynamic, !IsRowMajor> ConstColsBlockXpr;$/;"	t
ConstNColsBlockXpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^template<int N> struct ConstNColsBlockXpr { typedef const Block<const Derived, internal::traits<Derived>::RowsAtCompileTime, N, !IsRowMajor> Type; };$/;"	s
ConstNRowsBlockXpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^template<int N> struct ConstNRowsBlockXpr { typedef const Block<const Derived, N, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> Type; };$/;"	s
ConstRowXpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^typedef const Block<const Derived, 1, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> ConstRowXpr;$/;"	t
ConstRowsBlockXpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^typedef const Block<const Derived, Dynamic, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> ConstRowsBlockXpr;$/;"	t
EIGEN_BLOCKMETHODS_H	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	27;"	d
NColsBlockXpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^template<int N> struct NColsBlockXpr { typedef Block<Derived, internal::traits<Derived>::RowsAtCompileTime, N, !IsRowMajor> Type; };$/;"	s
NRowsBlockXpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^template<int N> struct NRowsBlockXpr { typedef Block<Derived, N, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> Type; };$/;"	s
RowXpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^typedef Block<Derived, 1, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> RowXpr;$/;"	t
RowsBlockXpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^typedef Block<Derived, Dynamic, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> RowsBlockXpr;$/;"	t
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^template<int N> struct ConstNColsBlockXpr { typedef const Block<const Derived, internal::traits<Derived>::RowsAtCompileTime, N, !IsRowMajor> Type; };$/;"	t	struct:ConstNColsBlockXpr
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^template<int N> struct ConstNRowsBlockXpr { typedef const Block<const Derived, N, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> Type; };$/;"	t	struct:ConstNRowsBlockXpr
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^template<int N> struct NColsBlockXpr { typedef Block<Derived, internal::traits<Derived>::RowsAtCompileTime, N, !IsRowMajor> Type; };$/;"	t	struct:NColsBlockXpr
Type	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^template<int N> struct NRowsBlockXpr { typedef Block<Derived, N, internal::traits<Derived>::ColsAtCompileTime, IsRowMajor> Type; };$/;"	t	struct:NRowsBlockXpr
block	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived, BlockRows, BlockCols> block(Index startRow, Index startCol)$/;"	f
block	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived> block(Index startRow, Index startCol, Index blockRows, Index blockCols)$/;"	f
block	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived, BlockRows, BlockCols> block(Index startRow, Index startCol) const$/;"	f
block	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived> block(Index startRow, Index startCol, Index blockRows, Index blockCols) const$/;"	f
bottomLeftCorner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived, CRows, CCols> bottomLeftCorner()$/;"	f
bottomLeftCorner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived> bottomLeftCorner(Index cRows, Index cCols)$/;"	f
bottomLeftCorner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived, CRows, CCols> bottomLeftCorner() const$/;"	f
bottomLeftCorner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived> bottomLeftCorner(Index cRows, Index cCols) const$/;"	f
bottomRightCorner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived, CRows, CCols> bottomRightCorner()$/;"	f
bottomRightCorner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived> bottomRightCorner(Index cRows, Index cCols)$/;"	f
bottomRightCorner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived, CRows, CCols> bottomRightCorner() const$/;"	f
bottomRightCorner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived> bottomRightCorner(Index cRows, Index cCols) const$/;"	f
bottomRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline ConstRowsBlockXpr bottomRows(Index n) const$/;"	f
bottomRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline RowsBlockXpr bottomRows(Index n)$/;"	f
bottomRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline typename ConstNRowsBlockXpr<N>::Type bottomRows() const$/;"	f
bottomRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline typename NRowsBlockXpr<N>::Type bottomRows()$/;"	f
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline ColXpr col(Index i)$/;"	f
col	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline ConstColXpr col(Index i) const$/;"	f
leftCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline ColsBlockXpr leftCols(Index n)$/;"	f
leftCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline ConstColsBlockXpr leftCols(Index n) const$/;"	f
leftCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline typename ConstNColsBlockXpr<N>::Type leftCols() const$/;"	f
leftCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline typename NColsBlockXpr<N>::Type leftCols()$/;"	f
middleCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline ColsBlockXpr middleCols(Index startCol, Index numCols)$/;"	f
middleCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline ConstColsBlockXpr middleCols(Index startCol, Index numCols) const$/;"	f
middleCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline typename ConstNColsBlockXpr<N>::Type middleCols(Index startCol) const$/;"	f
middleCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline typename NColsBlockXpr<N>::Type middleCols(Index startCol)$/;"	f
middleRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline ConstRowsBlockXpr middleRows(Index startRow, Index numRows) const$/;"	f
middleRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline RowsBlockXpr middleRows(Index startRow, Index numRows)$/;"	f
middleRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline typename ConstNRowsBlockXpr<N>::Type middleRows(Index startRow) const$/;"	f
middleRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline typename NRowsBlockXpr<N>::Type middleRows(Index startRow)$/;"	f
rightCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline ColsBlockXpr rightCols(Index n)$/;"	f
rightCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline ConstColsBlockXpr rightCols(Index n) const$/;"	f
rightCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline typename ConstNColsBlockXpr<N>::Type rightCols() const$/;"	f
rightCols	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline typename NColsBlockXpr<N>::Type rightCols()$/;"	f
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline ConstRowXpr row(Index i) const$/;"	f
row	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline RowXpr row(Index i)$/;"	f
topLeftCorner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived, CRows, CCols> topLeftCorner()$/;"	f
topLeftCorner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived> topLeftCorner(Index cRows, Index cCols)$/;"	f
topLeftCorner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived, CRows, CCols> topLeftCorner() const$/;"	f
topLeftCorner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived> topLeftCorner(Index cRows, Index cCols) const$/;"	f
topRightCorner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived, CRows, CCols> topRightCorner()$/;"	f
topRightCorner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline Block<Derived> topRightCorner(Index cRows, Index cCols)$/;"	f
topRightCorner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived, CRows, CCols> topRightCorner() const$/;"	f
topRightCorner	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline const Block<const Derived> topRightCorner(Index cRows, Index cCols) const$/;"	f
topRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline ConstRowsBlockXpr topRows(Index n) const$/;"	f
topRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline RowsBlockXpr topRows(Index n)$/;"	f
topRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline typename ConstNRowsBlockXpr<N>::Type topRows() const$/;"	f
topRows	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/BlockMethods.h	/^inline typename NRowsBlockXpr<N>::Type topRows()$/;"	f
binaryExpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseBinaryOps.h	/^binaryExpr(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other, const CustomBinaryOp& func = CustomBinaryOp()) const$/;"	f
ConjugateReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^                  >::type ConjugateReturnType;$/;"	t
ImagReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^typedef CwiseUnaryOp<internal::scalar_imag_op<Scalar>, const Derived> ImagReturnType;$/;"	t
NonConstImagReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^typedef CwiseUnaryView<internal::scalar_imag_ref_op<Scalar>, Derived> NonConstImagReturnType;$/;"	t
NonConstRealReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^                  >::type NonConstRealReturnType;$/;"	t
RealReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^                  >::type RealReturnType;$/;"	t
ScalarMultipleReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^typedef CwiseUnaryOp<internal::scalar_multiple_op<Scalar>, const Derived> ScalarMultipleReturnType;$/;"	t
ScalarQuotient1ReturnType	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^typedef CwiseUnaryOp<internal::scalar_quotient1_op<Scalar>, const Derived> ScalarQuotient1ReturnType;$/;"	t
cast	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^cast() const$/;"	f
conjugate	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^conjugate() const$/;"	f
imag	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^imag() const { return derived(); }$/;"	f
imag	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^imag() { return derived(); }$/;"	f
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^operator*(const Scalar& scalar) const$/;"	f
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^operator*(const Scalar& scalar, const StorageBaseType& matrix)$/;"	f
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^operator*(const std::complex<Scalar>& scalar) const$/;"	f
operator *	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^operator*(const std::complex<Scalar>& scalar, const StorageBaseType& matrix)$/;"	f
operator -	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^operator-() const { return derived(); }$/;"	f
operator /	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^operator\/(const Scalar& scalar) const$/;"	f
real	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^real() const { return derived(); }$/;"	f
real	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^real() { return derived(); }$/;"	f
unaryExpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^unaryExpr(const CustomUnaryOp& func = CustomUnaryOp()) const$/;"	f
unaryViewExpr	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/CommonCwiseUnaryOps.h	/^unaryViewExpr(const CustomViewOp& func = CustomViewOp()) const$/;"	f
cwiseEqual	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/MatrixCwiseBinaryOps.h	/^cwiseEqual(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const$/;"	f
cwiseMax	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/MatrixCwiseBinaryOps.h	/^cwiseMax(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const$/;"	f
cwiseMin	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/MatrixCwiseBinaryOps.h	/^cwiseMin(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const$/;"	f
cwiseNotEqual	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/MatrixCwiseBinaryOps.h	/^cwiseNotEqual(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const$/;"	f
cwiseProduct	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/MatrixCwiseBinaryOps.h	/^cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const$/;"	f
cwiseQuotient	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/MatrixCwiseBinaryOps.h	/^cwiseQuotient(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const$/;"	f
cwiseAbs	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/MatrixCwiseUnaryOps.h	/^cwiseAbs() const { return derived(); }$/;"	f
cwiseAbs2	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/MatrixCwiseUnaryOps.h	/^cwiseAbs2() const { return derived(); }$/;"	f
cwiseEqual	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/MatrixCwiseUnaryOps.h	/^cwiseEqual(const Scalar& s) const$/;"	f
cwiseInverse	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/MatrixCwiseUnaryOps.h	/^cwiseInverse() const { return derived(); }$/;"	f
cwiseSqrt	tags/before-github-sync/EXTERNAL/eigen3/Eigen/src/plugins/MatrixCwiseUnaryOps.h	/^cwiseSqrt() const { return derived(); }$/;"	f
DENSITY	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchSparseUtil.h	15;"	d
DenseMatrix	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchSparseUtil.h	/^typedef Matrix<Scalar,Dynamic,Dynamic> DenseMatrix;$/;"	t
DenseVector	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchSparseUtil.h	/^typedef Matrix<Scalar,Dynamic,1> DenseVector;$/;"	t
EigenSparseMatrix	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchSparseUtil.h	/^typedef SparseMatrix<Scalar> EigenSparseMatrix;$/;"	t
GmmDynSparse	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchSparseUtil.h	/^typedef gmm::col_matrix< gmm::wsvector<Scalar> > GmmDynSparse;$/;"	t
GmmSparse	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchSparseUtil.h	/^typedef gmm::csc_matrix<Scalar> GmmSparse;$/;"	t
MtlSparse	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchSparseUtil.h	/^typedef mtl::compressed2D<Scalar, mtl::matrix::parameters<mtl::tag::col_major> > MtlSparse;$/;"	t
MtlSparseRowMajor	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchSparseUtil.h	/^typedef mtl::compressed2D<Scalar, mtl::matrix::parameters<mtl::tag::row_major> > MtlSparseRowMajor;$/;"	t
SCALAR	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchSparseUtil.h	19;"	d
SIZE	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchSparseUtil.h	11;"	d
Scalar	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchSparseUtil.h	/^typedef SCALAR Scalar;$/;"	t
UblasMatrix	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchSparseUtil.h	/^typedef boost::numeric::ublas::compressed_matrix<Scalar,boost::numeric::ublas::column_major> UblasMatrix;$/;"	t
eiToCSparse	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchSparseUtil.h	/^void eiToCSparse(const EigenSparseMatrix& src, cs* &dst)$/;"	f
eiToDense	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchSparseUtil.h	/^void eiToDense(const EigenSparseMatrix& src, DenseMatrix& dst)$/;"	f
eiToGmm	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchSparseUtil.h	/^void eiToGmm(const EigenSparseMatrix& src, GmmSparse& dst)$/;"	f
eiToMtl	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchSparseUtil.h	/^void eiToMtl(const EigenSparseMatrix& src, MtlSparse& dst)$/;"	f
eiToUblas	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchSparseUtil.h	/^void eiToUblas(const EigenSparseMatrix& src, UblasMatrix& dst)$/;"	f
fillMatrix	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchSparseUtil.h	/^void fillMatrix(float density, int rows, int cols,  EigenSparseMatrix& dst)$/;"	f
fillMatrix2	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchSparseUtil.h	/^void fillMatrix2(int nnzPerCol, int rows, int cols,  EigenSparseMatrix& dst)$/;"	f
BENCH	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	157;"	d
BenchTimer	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	/^  BenchTimer()$/;"	f	class:Eigen::BenchTimer
BenchTimer	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	/^class BenchTimer$/;"	c	namespace:Eigen
CPU_TIMER	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	/^  CPU_TIMER = 0,$/;"	e	enum:Eigen::<anonymous>
EIGEN_BENCH_TIMERR_H	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	27;"	d
EIGEN_BT_UNDEF_NOMINMAX	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	172;"	d
EIGEN_BT_UNDEF_NOMINMAX	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	32;"	d
EIGEN_BT_UNDEF_WIN32_LEAN_AND_MEAN	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	177;"	d
EIGEN_BT_UNDEF_WIN32_LEAN_AND_MEAN	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	36;"	d
Eigen	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	/^namespace Eigen$/;"	n
NOMINMAX	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	173;"	d
NOMINMAX	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	31;"	d
REAL_TIMER	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	/^  REAL_TIMER = 1$/;"	e	enum:Eigen::<anonymous>
WIN32_LEAN_AND_MEAN	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	178;"	d
WIN32_LEAN_AND_MEAN	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	35;"	d
best	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	/^  inline double best(int TIMER = CPU_TIMER)$/;"	f	class:Eigen::BenchTimer
getCpuTime	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	/^  inline double getCpuTime()$/;"	f	class:Eigen::BenchTimer
getRealTime	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	/^  inline double getRealTime()$/;"	f	class:Eigen::BenchTimer
m_bests	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	/^  Vector2d m_bests;$/;"	m	class:Eigen::BenchTimer
m_frequency	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	/^  double m_frequency;$/;"	m	class:Eigen::BenchTimer
m_starts	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	/^  Vector2d m_starts;$/;"	m	class:Eigen::BenchTimer
m_times	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	/^  Vector2d m_times;$/;"	m	class:Eigen::BenchTimer
m_totals	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	/^  Vector2d m_totals;$/;"	m	class:Eigen::BenchTimer
reset	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	/^  inline void reset()$/;"	f	class:Eigen::BenchTimer
start	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	/^  inline void start()$/;"	f	class:Eigen::BenchTimer
stop	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	/^  inline void stop()$/;"	f	class:Eigen::BenchTimer
total	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	/^  inline double total(int TIMER = CPU_TIMER)$/;"	f	class:Eigen::BenchTimer
value	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	/^  inline double value(int TIMER = CPU_TIMER)$/;"	f	class:Eigen::BenchTimer
~BenchTimer	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchTimer.h	/^  ~BenchTimer() {}$/;"	f	class:Eigen::BenchTimer
DISABLE_SSE_EXCEPTIONS	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchUtil.h	34;"	d
DISABLE_SSE_EXCEPTIONS	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchUtil.h	43;"	d
EIGEN_BENCH_UTIL_H	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchUtil.h	3;"	d
eiToGmm	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchUtil.h	/^void eiToGmm(const EigenMatrixType& src, GmmMatrixType& dst)$/;"	f
eiToGsl	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchUtil.h	/^void eiToGsl(const EigenMatrixType& src, gsl_matrix** dst)$/;"	f
initMatrix_identity	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchUtil.h	/^template<typename MatrixType> void initMatrix_identity(MatrixType& mat)$/;"	f
initMatrix_random	tags/before-github-sync/EXTERNAL/eigen3/bench/BenchUtil.h	/^template<typename MatrixType> void initMatrix_random(MatrixType& mat)$/;"	f
MODES	tags/before-github-sync/EXTERNAL/eigen3/bench/basicbenchmark.cpp	12;"	d	file:
_GENERATE_HEADER	tags/before-github-sync/EXTERNAL/eigen3/bench/basicbenchmark.cpp	15;"	d	file:
_RUN_BENCH	tags/before-github-sync/EXTERNAL/eigen3/bench/basicbenchmark.cpp	23;"	d	file:
main	tags/before-github-sync/EXTERNAL/eigen3/bench/basicbenchmark.cpp	/^int main(int argc, char *argv[])$/;"	f
EIGEN_BENCH_BASICBENCH_H	tags/before-github-sync/EXTERNAL/eigen3/bench/basicbenchmark.h	3;"	d
EarlyEval	tags/before-github-sync/EXTERNAL/eigen3/bench/basicbenchmark.h	/^enum {LazyEval, EarlyEval, OmpEval};$/;"	e
LazyEval	tags/before-github-sync/EXTERNAL/eigen3/bench/basicbenchmark.h	/^enum {LazyEval, EarlyEval, OmpEval};$/;"	e
OmpEval	tags/before-github-sync/EXTERNAL/eigen3/bench/basicbenchmark.h	/^enum {LazyEval, EarlyEval, OmpEval};$/;"	e
benchBasic	tags/before-github-sync/EXTERNAL/eigen3/bench/basicbenchmark.h	/^double benchBasic(const MatrixType& mat, int iterations, int tries)$/;"	f
benchBasic_loop	tags/before-github-sync/EXTERNAL/eigen3/bench/basicbenchmark.h	/^void benchBasic_loop(const MatrixType& I, MatrixType& m, int iterations)$/;"	f
CBLAS_GEMM	tags/before-github-sync/EXTERNAL/eigen3/bench/benchBlasGemm.cpp	22;"	d	file:
CBLAS_GEMM	tags/before-github-sync/EXTERNAL/eigen3/bench/benchBlasGemm.cpp	25;"	d	file:
MYVERIFY	tags/before-github-sync/EXTERNAL/eigen3/bench/benchBlasGemm.cpp	171;"	d	file:
MyMatrix	tags/before-github-sync/EXTERNAL/eigen3/bench/benchBlasGemm.cpp	/^typedef Eigen::Matrix<Scalar,Eigen::Dynamic,Eigen::Dynamic> MyMatrix;$/;"	t	file:
Scalar	tags/before-github-sync/EXTERNAL/eigen3/bench/benchBlasGemm.cpp	/^typedef double Scalar;$/;"	t	file:
Scalar	tags/before-github-sync/EXTERNAL/eigen3/bench/benchBlasGemm.cpp	/^typedef float Scalar;$/;"	t	file:
_FLOAT	tags/before-github-sync/EXTERNAL/eigen3/bench/benchBlasGemm.cpp	7;"	d	file:
bench_eigengemm	tags/before-github-sync/EXTERNAL/eigen3/bench/benchBlasGemm.cpp	/^void bench_eigengemm(MyMatrix& mc, const MyMatrix& ma, const MyMatrix& mb, int nbloops)$/;"	f
check_product	tags/before-github-sync/EXTERNAL/eigen3/bench/benchBlasGemm.cpp	/^void check_product(int M, int N, int K)$/;"	f
check_product	tags/before-github-sync/EXTERNAL/eigen3/bench/benchBlasGemm.cpp	/^void check_product(void)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/benchBlasGemm.cpp	/^int main(int argc, char *argv[])$/;"	f
REPEAT	tags/before-github-sync/EXTERNAL/eigen3/bench/benchCholesky.cpp	19;"	d	file:
Scalar	tags/before-github-sync/EXTERNAL/eigen3/bench/benchCholesky.cpp	/^typedef float Scalar;$/;"	t	file:
TRIES	tags/before-github-sync/EXTERNAL/eigen3/bench/benchCholesky.cpp	23;"	d	file:
benchLLT	tags/before-github-sync/EXTERNAL/eigen3/bench/benchCholesky.cpp	/^__attribute__ ((noinline)) void benchLLT(const MatrixType& m)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/benchCholesky.cpp	/^int main(int argc, char* argv[])$/;"	f
REPEAT	tags/before-github-sync/EXTERNAL/eigen3/bench/benchEigenSolver.cpp	20;"	d	file:
SCALAR	tags/before-github-sync/EXTERNAL/eigen3/bench/benchEigenSolver.cpp	28;"	d	file:
Scalar	tags/before-github-sync/EXTERNAL/eigen3/bench/benchEigenSolver.cpp	/^typedef SCALAR Scalar;$/;"	t	file:
TRIES	tags/before-github-sync/EXTERNAL/eigen3/bench/benchEigenSolver.cpp	24;"	d	file:
benchEigenSolver	tags/before-github-sync/EXTERNAL/eigen3/bench/benchEigenSolver.cpp	/^__attribute__ ((noinline)) void benchEigenSolver(const MatrixType& m)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/benchEigenSolver.cpp	/^int main(int argc, char* argv[])$/;"	f
NDATA	tags/before-github-sync/EXTERNAL/eigen3/bench/benchFFT.cpp	53;"	d	file:
NFFT	tags/before-github-sync/EXTERNAL/eigen3/bench/benchFFT.cpp	50;"	d	file:
TYPE	tags/before-github-sync/EXTERNAL/eigen3/bench/benchFFT.cpp	46;"	d	file:
bench	tags/before-github-sync/EXTERNAL/eigen3/bench/benchFFT.cpp	/^void bench(int nfft,bool fwd,bool unscaled=false, bool halfspec=false)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/benchFFT.cpp	/^int main(int argc,char ** argv)$/;"	f
nameof	tags/before-github-sync/EXTERNAL/eigen3/bench/benchFFT.cpp	/^template <> string nameof<double>() {return "double";}$/;"	f
nameof	tags/before-github-sync/EXTERNAL/eigen3/bench/benchFFT.cpp	/^template <> string nameof<float>() {return "float";}$/;"	f
nameof	tags/before-github-sync/EXTERNAL/eigen3/bench/benchFFT.cpp	/^template <> string nameof<long double>() {return "long double";}$/;"	f
REPEAT	tags/before-github-sync/EXTERNAL/eigen3/bench/benchVecAdd.cpp	12;"	d	file:
SIZE	tags/before-github-sync/EXTERNAL/eigen3/bench/benchVecAdd.cpp	8;"	d	file:
Scalar	tags/before-github-sync/EXTERNAL/eigen3/bench/benchVecAdd.cpp	/^typedef float Scalar;$/;"	t	file:
benchVec	tags/before-github-sync/EXTERNAL/eigen3/bench/benchVecAdd.cpp	/^void benchVec(MatrixXf& a, MatrixXf& b, MatrixXf& c)$/;"	f
benchVec	tags/before-github-sync/EXTERNAL/eigen3/bench/benchVecAdd.cpp	/^void benchVec(Scalar* a, Scalar* b, Scalar* c, int size)$/;"	f
benchVec	tags/before-github-sync/EXTERNAL/eigen3/bench/benchVecAdd.cpp	/^void benchVec(VectorXf& a, VectorXf& b, VectorXf& c)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/benchVecAdd.cpp	/^int main(int argc, char* argv[])$/;"	f
A	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^typedef Matrix<RealScalar,Dynamic,Dynamic> A;$/;"	t	file:
B	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^typedef Matrix<\/*Real*\/Scalar,Dynamic,Dynamic> B;$/;"	t	file:
C	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^typedef Matrix<Scalar,Dynamic,Dynamic> C;$/;"	t	file:
M	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^typedef Matrix<RealScalar,Dynamic,Dynamic> M;$/;"	t	file:
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^typedef NumTraits<Scalar>::Real RealScalar;$/;"	t	file:
SCALAR	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	14;"	d	file:
Scalar	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^typedef SCALAR Scalar;$/;"	t	file:
blas_gemm	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^EIGEN_DONT_INLINE void blas_gemm(const MatrixXd& a, const MatrixXd& b, MatrixXd& c)$/;"	f
blas_gemm	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^void blas_gemm(const MatrixXcd& a, const MatrixXcd& b, MatrixXcd& c)$/;"	f
blas_gemm	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^void blas_gemm(const MatrixXcf& a, const MatrixXcf& b, MatrixXcf& c)$/;"	f
blas_gemm	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^void blas_gemm(const MatrixXf& a, const MatrixXf& b, MatrixXf& c)$/;"	f
cdone	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^static std::complex<double> cdone = 1;$/;"	v	file:
cdzero	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^static std::complex<double> cdzero = 0;$/;"	v	file:
cfone	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^static std::complex<float> cfone = 1;$/;"	v	file:
cfzero	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^static std::complex<float> cfzero = 0;$/;"	v	file:
done	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^static double done = 1;$/;"	v	file:
fone	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^static float fone = 1;$/;"	v	file:
fzero	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^static float fzero = 0;$/;"	v	file:
gemm	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^EIGEN_DONT_INLINE void gemm(const A& a, const B& b, C& c)$/;"	f
intone	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^static int intone = 1;$/;"	v	file:
lower	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^static char lower = 'L';$/;"	v	file:
main	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^int main(int argc, char ** argv)$/;"	f
matlab_cplx_cplx	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^void matlab_cplx_cplx(const M& ar, const M& ai, const M& br, const M& bi, M& cr, M& ci)$/;"	f
matlab_cplx_real	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^void matlab_cplx_real(const M& ar, const M& ai, const M& b, M& cr, M& ci)$/;"	f
matlab_real_cplx	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^void matlab_real_cplx(const M& a, const M& br, const M& bi, M& cr, M& ci)$/;"	f
nonunit	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^static char nonunit = 'N';$/;"	v	file:
notrans	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^static char notrans = 'N';$/;"	v	file:
right	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^static char right = 'R';$/;"	v	file:
szero	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^static double szero = 0;$/;"	v	file:
trans	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_gemm.cpp	/^static char trans = 'T';  $/;"	v	file:
BENCH_PERF	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_norm.cpp	215;"	d	file:
bl2passNorm	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_norm.cpp	/^EIGEN_DONT_INLINE typename T::Scalar bl2passNorm(T& v)$/;"	f
blueNorm	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_norm.cpp	/^EIGEN_DONT_INLINE typename T::Scalar blueNorm(const T& v)$/;"	f
check_accuracy	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_norm.cpp	/^void check_accuracy(double basef, double based, int s)$/;"	f
check_accuracy_var	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_norm.cpp	/^void check_accuracy_var(int ef0, int ef1, int ed0, int ed1, int s)$/;"	f
divacNorm	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_norm.cpp	/^EIGEN_DONT_INLINE typename T::Scalar divacNorm(T& v)$/;"	f
hypotNorm	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_norm.cpp	/^EIGEN_DONT_INLINE typename T::Scalar hypotNorm(const T& v)$/;"	f
lapackNorm	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_norm.cpp	/^EIGEN_DONT_INLINE typename T::Scalar lapackNorm(T& v)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_norm.cpp	/^int main(int argc, char** argv)$/;"	f
pandnot	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_norm.cpp	/^Packet2d internal::pandnot(const Packet2d& a, Packet2d& b) { return _mm_andnot_pd(a,b); }$/;"	f	class:internal
pandnot	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_norm.cpp	/^Packet4f internal::pandnot(const Packet4f& a, Packet4f& b) { return _mm_andnot_ps(a,b); }$/;"	f	class:internal
pblueNorm	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_norm.cpp	/^EIGEN_DONT_INLINE typename T::Scalar pblueNorm(const T& v)$/;"	f
plt	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_norm.cpp	/^Packet2d internal::plt(const Packet2d& a, Packet2d& b) { return _mm_cmplt_pd(a,b); }$/;"	f	class:internal
plt	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_norm.cpp	/^Packet4f internal::plt(const Packet4f& a, Packet4f& b) { return _mm_cmplt_ps(a,b); }$/;"	f	class:internal
sqsumNorm	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_norm.cpp	/^EIGEN_DONT_INLINE typename T::Scalar sqsumNorm(const T& v)$/;"	f
twopassNorm	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_norm.cpp	/^EIGEN_DONT_INLINE typename T::Scalar twopassNorm(T& v)$/;"	f
REPEAT	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_reverse.cpp	8;"	d	file:
Scalar	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_reverse.cpp	/^typedef double Scalar;$/;"	t	file:
TRIES	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_reverse.cpp	12;"	d	file:
bench_reverse	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_reverse.cpp	/^__attribute__ ((noinline)) void bench_reverse(const MatrixType& m)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_reverse.cpp	/^int main(int argc, char* argv[])$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/bench_sum.cpp	/^int main() $/;"	f
MATSIZE	tags/before-github-sync/EXTERNAL/eigen3/bench/benchmark.cpp	8;"	d	file:
REPEAT	tags/before-github-sync/EXTERNAL/eigen3/bench/benchmark.cpp	15;"	d	file:
SCALAR	tags/before-github-sync/EXTERNAL/eigen3/bench/benchmark.cpp	19;"	d	file:
main	tags/before-github-sync/EXTERNAL/eigen3/bench/benchmark.cpp	/^int main(int argc, char *argv[])$/;"	f
REPEAT	tags/before-github-sync/EXTERNAL/eigen3/bench/benchmarkSlice.cpp	11;"	d	file:
SCALAR	tags/before-github-sync/EXTERNAL/eigen3/bench/benchmarkSlice.cpp	15;"	d	file:
main	tags/before-github-sync/EXTERNAL/eigen3/bench/benchmarkSlice.cpp	/^int main(int argc, char *argv[])$/;"	f
MATSIZE	tags/before-github-sync/EXTERNAL/eigen3/bench/benchmarkX.cpp	15;"	d	file:
MATTYPE	tags/before-github-sync/EXTERNAL/eigen3/bench/benchmarkX.cpp	11;"	d	file:
REPEAT	tags/before-github-sync/EXTERNAL/eigen3/bench/benchmarkX.cpp	19;"	d	file:
main	tags/before-github-sync/EXTERNAL/eigen3/bench/benchmarkX.cpp	/^int main(int argc, char *argv[])$/;"	f
REPEAT	tags/before-github-sync/EXTERNAL/eigen3/bench/benchmarkXcwise.cpp	18;"	d	file:
VECSIZE	tags/before-github-sync/EXTERNAL/eigen3/bench/benchmarkXcwise.cpp	14;"	d	file:
VECTYPE	tags/before-github-sync/EXTERNAL/eigen3/bench/benchmarkXcwise.cpp	10;"	d	file:
main	tags/before-github-sync/EXTERNAL/eigen3/bench/benchmarkXcwise.cpp	/^int main(int argc, char *argv[])$/;"	f
A	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_aat_product.hh	/^  typename Interface::gene_matrix A;$/;"	m	class:Action_aat_product
ACTION_AAT_PRODUCT	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_aat_product.hh	21;"	d
A_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_aat_product.hh	/^  typename Interface::gene_matrix A_ref;$/;"	m	class:Action_aat_product
A_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_aat_product.hh	/^  typename Interface::stl_matrix A_stl;$/;"	m	class:Action_aat_product
Action_aat_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_aat_product.hh	/^  Action_aat_product( const  Action_aat_product & )$/;"	f	class:Action_aat_product
Action_aat_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_aat_product.hh	/^  Action_aat_product( int size ):_size(size)$/;"	f	class:Action_aat_product
Action_aat_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_aat_product.hh	/^class Action_aat_product {$/;"	c
X	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_aat_product.hh	/^  typename Interface::gene_matrix X;$/;"	m	class:Action_aat_product
X_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_aat_product.hh	/^  typename Interface::gene_matrix X_ref;$/;"	m	class:Action_aat_product
X_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_aat_product.hh	/^  typename Interface::stl_matrix X_stl;$/;"	m	class:Action_aat_product
_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_aat_product.hh	/^  int _size;$/;"	m	class:Action_aat_product
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_aat_product.hh	/^  inline void calculate( void ) {$/;"	f	class:Action_aat_product
check_result	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_aat_product.hh	/^  void check_result( void ){$/;"	f	class:Action_aat_product
initialize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_aat_product.hh	/^  inline void initialize( void ){$/;"	f	class:Action_aat_product
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_aat_product.hh	/^  static inline std::string name( void )$/;"	f	class:Action_aat_product
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_aat_product.hh	/^  double nb_op_base( void ){$/;"	f	class:Action_aat_product
resu_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_aat_product.hh	/^  typename Interface::stl_matrix resu_stl;$/;"	m	class:Action_aat_product
~Action_aat_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_aat_product.hh	/^  ~Action_aat_product( void ){$/;"	f	class:Action_aat_product
A	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ata_product.hh	/^  typename Interface::gene_matrix A;$/;"	m	class:Action_ata_product
ACTION_ATA_PRODUCT	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ata_product.hh	21;"	d
A_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ata_product.hh	/^  typename Interface::gene_matrix A_ref;$/;"	m	class:Action_ata_product
A_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ata_product.hh	/^  typename Interface::stl_matrix A_stl;$/;"	m	class:Action_ata_product
Action_ata_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ata_product.hh	/^  Action_ata_product( const  Action_ata_product & )$/;"	f	class:Action_ata_product
Action_ata_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ata_product.hh	/^  Action_ata_product( int size ):_size(size)$/;"	f	class:Action_ata_product
Action_ata_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ata_product.hh	/^class Action_ata_product {$/;"	c
X	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ata_product.hh	/^  typename Interface::gene_matrix X;$/;"	m	class:Action_ata_product
X_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ata_product.hh	/^  typename Interface::gene_matrix X_ref;$/;"	m	class:Action_ata_product
X_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ata_product.hh	/^  typename Interface::stl_matrix X_stl;$/;"	m	class:Action_ata_product
_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ata_product.hh	/^  int _size;$/;"	m	class:Action_ata_product
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ata_product.hh	/^  inline void calculate( void ) {$/;"	f	class:Action_ata_product
check_result	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ata_product.hh	/^  void check_result( void ){$/;"	f	class:Action_ata_product
initialize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ata_product.hh	/^  inline void initialize( void ){$/;"	f	class:Action_ata_product
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ata_product.hh	/^  static inline std::string name( void )$/;"	f	class:Action_ata_product
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ata_product.hh	/^  double nb_op_base( void ){$/;"	f	class:Action_ata_product
resu_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ata_product.hh	/^  typename Interface::stl_matrix resu_stl;$/;"	m	class:Action_ata_product
~Action_ata_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ata_product.hh	/^  ~Action_ata_product( void ){$/;"	f	class:Action_ata_product
A	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^  typename Interface::gene_matrix A;$/;"	m	class:Action_atv_product
ACTION_ATV_PRODUCT	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	21;"	d
A_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^  typename Interface::gene_matrix A_ref;$/;"	m	class:Action_atv_product
A_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^  typename Interface::stl_matrix A_stl;$/;"	m	class:Action_atv_product
Action_atv_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^  Action_atv_product( const  Action_atv_product & )$/;"	f	class:Action_atv_product
Action_atv_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^  Action_atv_product( int size ) : _size(size)$/;"	f	class:Action_atv_product
Action_atv_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^class Action_atv_product {$/;"	c
B	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^  typename Interface::gene_vector B;$/;"	m	class:Action_atv_product
B_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^  typename Interface::gene_vector B_ref;$/;"	m	class:Action_atv_product
B_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^  typename Interface::stl_vector B_stl;$/;"	m	class:Action_atv_product
X	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^  typename Interface::gene_vector X;$/;"	m	class:Action_atv_product
X_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^  typename Interface::gene_vector X_ref;$/;"	m	class:Action_atv_product
X_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^  typename Interface::stl_vector X_stl;$/;"	m	class:Action_atv_product
_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^  int _size;$/;"	m	class:Action_atv_product
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^  BTL_DONT_INLINE void calculate( void ) {$/;"	f	class:Action_atv_product
check_result	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^  void check_result( void )$/;"	f	class:Action_atv_product
initialize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^  inline void initialize( void ){$/;"	f	class:Action_atv_product
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^  static inline std::string name() { return "atv_" + Interface::name(); }$/;"	f	class:Action_atv_product
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^  double nb_op_base( void ) { return 2.0*_size*_size; }$/;"	f	class:Action_atv_product
resu_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^  typename Interface::stl_vector resu_stl;$/;"	m	class:Action_atv_product
~Action_atv_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_atv_product.hh	/^  ~Action_atv_product( void )$/;"	f	class:Action_atv_product
ACTION_AXPBY	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	20;"	d
Action_axpby	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	/^  Action_axpby( const  Action_axpby & )$/;"	f	class:Action_axpby
Action_axpby	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	/^  Action_axpby( int size ):_size(size),_alpha(0.5),_beta(0.95)$/;"	f	class:Action_axpby
Action_axpby	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	/^class Action_axpby {$/;"	c
X	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	/^  typename Interface::gene_vector X;$/;"	m	class:Action_axpby
X_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	/^  typename Interface::gene_vector X_ref;$/;"	m	class:Action_axpby
X_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	/^  typename Interface::stl_vector X_stl;$/;"	m	class:Action_axpby
Y	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	/^  typename Interface::gene_vector Y;$/;"	m	class:Action_axpby
Y_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	/^  typename Interface::gene_vector Y_ref;$/;"	m	class:Action_axpby
Y_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	/^  typename Interface::stl_vector Y_stl;$/;"	m	class:Action_axpby
_alpha	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	/^  typename Interface::real_type _alpha;$/;"	m	class:Action_axpby
_beta	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	/^  typename Interface::real_type _beta;$/;"	m	class:Action_axpby
_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	/^  int _size;$/;"	m	class:Action_axpby
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	/^  inline void calculate( void ) {$/;"	f	class:Action_axpby
check_result	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	/^  void check_result( void ){$/;"	f	class:Action_axpby
initialize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	/^  inline void initialize( void ){$/;"	f	class:Action_axpby
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	/^  static inline std::string name( void )$/;"	f	class:Action_axpby
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	/^  double nb_op_base( void ){$/;"	f	class:Action_axpby
resu_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	/^  typename Interface::stl_vector resu_stl;$/;"	m	class:Action_axpby
~Action_axpby	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpby.hh	/^  ~Action_axpby( void ){$/;"	f	class:Action_axpby
ACTION_AXPY	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpy.hh	21;"	d
Action_axpy	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpy.hh	/^  Action_axpy( const  Action_axpy & )$/;"	f	class:Action_axpy
Action_axpy	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpy.hh	/^  Action_axpy( int size ):_size(size),_coef(1.0)$/;"	f	class:Action_axpy
Action_axpy	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpy.hh	/^class Action_axpy {$/;"	c
X	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpy.hh	/^  typename Interface::gene_vector X;$/;"	m	class:Action_axpy
X_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpy.hh	/^  typename Interface::gene_vector X_ref;$/;"	m	class:Action_axpy
X_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpy.hh	/^  typename Interface::stl_vector X_stl;$/;"	m	class:Action_axpy
Y	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpy.hh	/^  typename Interface::gene_vector Y;$/;"	m	class:Action_axpy
Y_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpy.hh	/^  typename Interface::gene_vector Y_ref;$/;"	m	class:Action_axpy
Y_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpy.hh	/^  typename Interface::stl_vector Y_stl;$/;"	m	class:Action_axpy
_coef	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpy.hh	/^  typename Interface::real_type _coef;$/;"	m	class:Action_axpy
_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpy.hh	/^  int _size;$/;"	m	class:Action_axpy
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpy.hh	/^  inline void calculate( void ) {$/;"	f	class:Action_axpy
check_result	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpy.hh	/^  void check_result( void ){$/;"	f	class:Action_axpy
initialize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpy.hh	/^  inline void initialize( void ){$/;"	f	class:Action_axpy
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpy.hh	/^  static inline std::string name( void )$/;"	f	class:Action_axpy
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpy.hh	/^  double nb_op_base( void ){$/;"	f	class:Action_axpy
resu_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpy.hh	/^  typename Interface::stl_vector resu_stl;$/;"	m	class:Action_axpy
~Action_axpy	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_axpy.hh	/^  ~Action_axpy( void ){$/;"	f	class:Action_axpy
ACTION_CHOLESKY	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_cholesky.hh	20;"	d
Action_cholesky	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_cholesky.hh	/^  Action_cholesky( const  Action_cholesky & )$/;"	f	class:Action_cholesky
Action_cholesky	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_cholesky.hh	/^  Action_cholesky( int size ):_size(size)$/;"	f	class:Action_cholesky
Action_cholesky	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_cholesky.hh	/^class Action_cholesky {$/;"	c
C	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_cholesky.hh	/^  typename Interface::gene_matrix C;$/;"	m	class:Action_cholesky
C_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_cholesky.hh	/^  typename Interface::stl_matrix C_stl;$/;"	m	class:Action_cholesky
X	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_cholesky.hh	/^  typename Interface::gene_matrix X;$/;"	m	class:Action_cholesky
X_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_cholesky.hh	/^  typename Interface::gene_matrix X_ref;$/;"	m	class:Action_cholesky
X_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_cholesky.hh	/^  typename Interface::stl_matrix X_stl;$/;"	m	class:Action_cholesky
_cost	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_cholesky.hh	/^  double _cost;$/;"	m	class:Action_cholesky
_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_cholesky.hh	/^  int _size;$/;"	m	class:Action_cholesky
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_cholesky.hh	/^  inline void calculate( void ) {$/;"	f	class:Action_cholesky
check_result	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_cholesky.hh	/^  void check_result( void ){$/;"	f	class:Action_cholesky
initialize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_cholesky.hh	/^  inline void initialize( void ){$/;"	f	class:Action_cholesky
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_cholesky.hh	/^  static inline std::string name( void )$/;"	f	class:Action_cholesky
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_cholesky.hh	/^  double nb_op_base( void ){$/;"	f	class:Action_cholesky
~Action_cholesky	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_cholesky.hh	/^  ~Action_cholesky( void ){$/;"	f	class:Action_cholesky
A	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^  typename Interface::gene_matrix A;$/;"	m	class:Action_ger
ACTION_GER	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	16;"	d
A_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^  typename Interface::gene_matrix A_ref;$/;"	m	class:Action_ger
A_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^  typename Interface::stl_matrix A_stl;$/;"	m	class:Action_ger
Action_ger	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^  Action_ger( const  Action_ger & )$/;"	f	class:Action_ger
Action_ger	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^  BTL_DONT_INLINE Action_ger( int size ):_size(size)$/;"	f	class:Action_ger
Action_ger	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^class Action_ger {$/;"	c
B	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^  typename Interface::gene_vector B;$/;"	m	class:Action_ger
B_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^  typename Interface::gene_vector B_ref;$/;"	m	class:Action_ger
B_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^  typename Interface::stl_vector B_stl;$/;"	m	class:Action_ger
X	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^  typename Interface::gene_vector X;$/;"	m	class:Action_ger
X_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^  typename Interface::gene_vector X_ref;$/;"	m	class:Action_ger
X_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^  typename Interface::stl_vector X_stl;$/;"	m	class:Action_ger
_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^  int _size;$/;"	m	class:Action_ger
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^  BTL_DONT_INLINE void calculate( void ) {$/;"	f	class:Action_ger
check_result	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^  BTL_DONT_INLINE void check_result( void ){$/;"	f	class:Action_ger
initialize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^  BTL_DONT_INLINE  void initialize( void ){$/;"	f	class:Action_ger
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^  static inline std::string name( void )$/;"	f	class:Action_ger
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^  double nb_op_base( void ){$/;"	f	class:Action_ger
resu_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^  typename Interface::stl_vector resu_stl;$/;"	m	class:Action_ger
~Action_ger	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_ger.hh	/^  BTL_DONT_INLINE ~Action_ger( void ){$/;"	f	class:Action_ger
ACTION_HESSENBERG	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	20;"	d
Action_hessenberg	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  Action_hessenberg( const  Action_hessenberg & )$/;"	f	class:Action_hessenberg
Action_hessenberg	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  Action_hessenberg( int size ):_size(size)$/;"	f	class:Action_hessenberg
Action_hessenberg	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^class Action_hessenberg {$/;"	c
Action_tridiagonalization	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  Action_tridiagonalization( const  Action_tridiagonalization & )$/;"	f	class:Action_tridiagonalization
Action_tridiagonalization	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  Action_tridiagonalization( int size ):_size(size)$/;"	f	class:Action_tridiagonalization
Action_tridiagonalization	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^class Action_tridiagonalization {$/;"	c
C	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  typename Interface::gene_matrix C;$/;"	m	class:Action_hessenberg
C	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  typename Interface::gene_matrix C;$/;"	m	class:Action_tridiagonalization
C_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  typename Interface::stl_matrix C_stl;$/;"	m	class:Action_hessenberg
C_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  typename Interface::stl_matrix C_stl;$/;"	m	class:Action_tridiagonalization
X	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  typename Interface::gene_matrix X;$/;"	m	class:Action_hessenberg
X	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  typename Interface::gene_matrix X;$/;"	m	class:Action_tridiagonalization
X_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  typename Interface::gene_matrix X_ref;$/;"	m	class:Action_hessenberg
X_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  typename Interface::gene_matrix X_ref;$/;"	m	class:Action_tridiagonalization
X_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  typename Interface::stl_matrix X_stl;$/;"	m	class:Action_hessenberg
X_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  typename Interface::stl_matrix X_stl;$/;"	m	class:Action_tridiagonalization
_cost	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  double _cost;$/;"	m	class:Action_hessenberg
_cost	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  double _cost;$/;"	m	class:Action_tridiagonalization
_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  int _size;$/;"	m	class:Action_hessenberg
_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  int _size;$/;"	m	class:Action_tridiagonalization
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  inline void calculate( void ) {$/;"	f	class:Action_hessenberg
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  inline void calculate( void ) {$/;"	f	class:Action_tridiagonalization
check_result	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  void check_result( void ){$/;"	f	class:Action_hessenberg
check_result	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  void check_result( void ){$/;"	f	class:Action_tridiagonalization
initialize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  inline void initialize( void ){$/;"	f	class:Action_hessenberg
initialize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  inline void initialize( void ){$/;"	f	class:Action_tridiagonalization
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  static inline std::string name( void ) { return "tridiagonalization_"+Interface::name(); }$/;"	f	class:Action_tridiagonalization
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  static inline std::string name( void )$/;"	f	class:Action_hessenberg
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  double nb_op_base( void ){$/;"	f	class:Action_hessenberg
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  double nb_op_base( void ){$/;"	f	class:Action_tridiagonalization
resu_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  typename Interface::stl_matrix resu_stl;$/;"	m	class:Action_hessenberg
resu_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  typename Interface::stl_matrix resu_stl;$/;"	m	class:Action_tridiagonalization
~Action_hessenberg	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  ~Action_hessenberg( void ){$/;"	f	class:Action_hessenberg
~Action_tridiagonalization	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_hessenberg.hh	/^  ~Action_tridiagonalization( void ){$/;"	f	class:Action_tridiagonalization
ACTION_LU_DECOMP	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_decomp.hh	20;"	d
Action_lu_decomp	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_decomp.hh	/^  Action_lu_decomp( const  Action_lu_decomp & )$/;"	f	class:Action_lu_decomp
Action_lu_decomp	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_decomp.hh	/^  Action_lu_decomp( int size ):_size(size)$/;"	f	class:Action_lu_decomp
Action_lu_decomp	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_decomp.hh	/^class Action_lu_decomp {$/;"	c
C	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_decomp.hh	/^  typename Interface::gene_matrix C;$/;"	m	class:Action_lu_decomp
C_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_decomp.hh	/^  typename Interface::stl_matrix C_stl;$/;"	m	class:Action_lu_decomp
X	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_decomp.hh	/^  typename Interface::gene_matrix X;$/;"	m	class:Action_lu_decomp
X_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_decomp.hh	/^  typename Interface::gene_matrix X_ref;$/;"	m	class:Action_lu_decomp
X_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_decomp.hh	/^  typename Interface::stl_matrix X_stl;$/;"	m	class:Action_lu_decomp
_cost	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_decomp.hh	/^  double _cost;$/;"	m	class:Action_lu_decomp
_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_decomp.hh	/^  int _size;$/;"	m	class:Action_lu_decomp
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_decomp.hh	/^  inline void calculate( void ) {$/;"	f	class:Action_lu_decomp
check_result	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_decomp.hh	/^  void check_result( void ){$/;"	f	class:Action_lu_decomp
initialize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_decomp.hh	/^  inline void initialize( void ){$/;"	f	class:Action_lu_decomp
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_decomp.hh	/^  static inline std::string name( void )$/;"	f	class:Action_lu_decomp
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_decomp.hh	/^  double nb_op_base( void ){$/;"	f	class:Action_lu_decomp
resu_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_decomp.hh	/^  typename Interface::stl_matrix resu_stl;$/;"	m	class:Action_lu_decomp
~Action_lu_decomp	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_decomp.hh	/^  ~Action_lu_decomp( void ){$/;"	f	class:Action_lu_decomp
ACTION_LU_SOLVE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_solve.hh	21;"	d
Action_lu_solve	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_solve.hh	/^class Action_lu_solve $/;"	c
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_solve.hh	/^  static double calculate( int nb_calc, int size ) {$/;"	f	class:Action_lu_solve
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_solve.hh	/^  static inline std::string name( void )$/;"	f	class:Action_lu_solve
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_lu_solve.hh	/^  static double nb_op_base(int size){$/;"	f	class:Action_lu_solve
A	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^  typename Interface::gene_matrix A;$/;"	m	class:Action_matrix_matrix_product
ACTION_MATRIX_MATRIX_PRODUCT	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	21;"	d
A_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^  typename Interface::gene_matrix A_ref;$/;"	m	class:Action_matrix_matrix_product
A_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^  typename Interface::stl_matrix A_stl;$/;"	m	class:Action_matrix_matrix_product
Action_matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^  Action_matrix_matrix_product( const  Action_matrix_matrix_product & )$/;"	f	class:Action_matrix_matrix_product
Action_matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^  Action_matrix_matrix_product( int size ):_size(size)$/;"	f	class:Action_matrix_matrix_product
Action_matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^class Action_matrix_matrix_product {$/;"	c
B	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^  typename Interface::gene_matrix B;$/;"	m	class:Action_matrix_matrix_product
B_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^  typename Interface::gene_matrix B_ref;$/;"	m	class:Action_matrix_matrix_product
B_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^  typename Interface::stl_matrix B_stl;$/;"	m	class:Action_matrix_matrix_product
X	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^  typename Interface::gene_matrix X;$/;"	m	class:Action_matrix_matrix_product
X_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^  typename Interface::gene_matrix X_ref;$/;"	m	class:Action_matrix_matrix_product
X_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^  typename Interface::stl_matrix X_stl;$/;"	m	class:Action_matrix_matrix_product
_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^  int _size;$/;"	m	class:Action_matrix_matrix_product
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^  inline void calculate( void ) {$/;"	f	class:Action_matrix_matrix_product
check_result	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^  void check_result( void ){$/;"	f	class:Action_matrix_matrix_product
initialize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^  inline void initialize( void ){$/;"	f	class:Action_matrix_matrix_product
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^  static inline std::string name( void )$/;"	f	class:Action_matrix_matrix_product
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^  double nb_op_base( void ){$/;"	f	class:Action_matrix_matrix_product
resu_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^  typename Interface::stl_matrix resu_stl;$/;"	m	class:Action_matrix_matrix_product
~Action_matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product.hh	/^  ~Action_matrix_matrix_product( void ){$/;"	f	class:Action_matrix_matrix_product
ACTION_MATRIX_MATRIX_PRODUCT_BIS	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product_bis.hh	21;"	d
Action_matrix_matrix_product_bis	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product_bis.hh	/^class Action_matrix_matrix_product_bis {$/;"	c
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product_bis.hh	/^  static double calculate( int nb_calc, int size ) {$/;"	f	class:Action_matrix_matrix_product_bis
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product_bis.hh	/^  static inline std::string name( void )$/;"	f	class:Action_matrix_matrix_product_bis
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_matrix_product_bis.hh	/^  static double nb_op_base(int size){$/;"	f	class:Action_matrix_matrix_product_bis
A	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^  typename Interface::gene_matrix A;$/;"	m	class:Action_matrix_vector_product
ACTION_MATRIX_VECTOR_PRODUCT	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	21;"	d
A_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^  typename Interface::gene_matrix A_ref;$/;"	m	class:Action_matrix_vector_product
A_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^  typename Interface::stl_matrix A_stl;$/;"	m	class:Action_matrix_vector_product
Action_matrix_vector_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^  Action_matrix_vector_product( const  Action_matrix_vector_product & )$/;"	f	class:Action_matrix_vector_product
Action_matrix_vector_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^  BTL_DONT_INLINE Action_matrix_vector_product( int size ):_size(size)$/;"	f	class:Action_matrix_vector_product
Action_matrix_vector_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^class Action_matrix_vector_product {$/;"	c
B	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^  typename Interface::gene_vector B;$/;"	m	class:Action_matrix_vector_product
B_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^  typename Interface::gene_vector B_ref;$/;"	m	class:Action_matrix_vector_product
B_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^  typename Interface::stl_vector B_stl;$/;"	m	class:Action_matrix_vector_product
X	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^  typename Interface::gene_vector X;$/;"	m	class:Action_matrix_vector_product
X_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^  typename Interface::gene_vector X_ref;$/;"	m	class:Action_matrix_vector_product
X_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^  typename Interface::stl_vector X_stl;$/;"	m	class:Action_matrix_vector_product
_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^  int _size;$/;"	m	class:Action_matrix_vector_product
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^  BTL_DONT_INLINE void calculate( void ) {$/;"	f	class:Action_matrix_vector_product
check_result	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^  BTL_DONT_INLINE void check_result( void ){$/;"	f	class:Action_matrix_vector_product
initialize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^  BTL_DONT_INLINE  void initialize( void ){$/;"	f	class:Action_matrix_vector_product
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^  static inline std::string name( void )$/;"	f	class:Action_matrix_vector_product
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^  double nb_op_base( void ){$/;"	f	class:Action_matrix_vector_product
resu_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^  typename Interface::stl_vector resu_stl;$/;"	m	class:Action_matrix_vector_product
~Action_matrix_vector_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_matrix_vector_product.hh	/^  BTL_DONT_INLINE ~Action_matrix_vector_product( void ){$/;"	f	class:Action_matrix_vector_product
ACTION_PARTIAL_LU	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_partial_lu.hh	20;"	d
Action_partial_lu	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_partial_lu.hh	/^  Action_partial_lu( const  Action_partial_lu & )$/;"	f	class:Action_partial_lu
Action_partial_lu	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_partial_lu.hh	/^  Action_partial_lu( int size ):_size(size)$/;"	f	class:Action_partial_lu
Action_partial_lu	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_partial_lu.hh	/^class Action_partial_lu {$/;"	c
C	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_partial_lu.hh	/^  typename Interface::gene_matrix C;$/;"	m	class:Action_partial_lu
C_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_partial_lu.hh	/^  typename Interface::stl_matrix C_stl;$/;"	m	class:Action_partial_lu
X	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_partial_lu.hh	/^  typename Interface::gene_matrix X;$/;"	m	class:Action_partial_lu
X_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_partial_lu.hh	/^  typename Interface::gene_matrix X_ref;$/;"	m	class:Action_partial_lu
X_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_partial_lu.hh	/^  typename Interface::stl_matrix X_stl;$/;"	m	class:Action_partial_lu
_cost	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_partial_lu.hh	/^  double _cost;$/;"	m	class:Action_partial_lu
_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_partial_lu.hh	/^  int _size;$/;"	m	class:Action_partial_lu
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_partial_lu.hh	/^  inline void calculate( void ) {$/;"	f	class:Action_partial_lu
check_result	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_partial_lu.hh	/^  void check_result( void ){$/;"	f	class:Action_partial_lu
initialize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_partial_lu.hh	/^  inline void initialize( void ){$/;"	f	class:Action_partial_lu
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_partial_lu.hh	/^  static inline std::string name( void )$/;"	f	class:Action_partial_lu
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_partial_lu.hh	/^  double nb_op_base( void ){$/;"	f	class:Action_partial_lu
~Action_partial_lu	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_partial_lu.hh	/^  ~Action_partial_lu( void ){$/;"	f	class:Action_partial_lu
A	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_rot.hh	/^  typename Interface::gene_vector A;$/;"	m	class:Action_rot
ACTION_ROT	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_rot.hh	16;"	d
A_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_rot.hh	/^  typename Interface::gene_vector A_ref;$/;"	m	class:Action_rot
A_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_rot.hh	/^  typename Interface::stl_vector A_stl;$/;"	m	class:Action_rot
Action_rot	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_rot.hh	/^  Action_rot( const  Action_rot & )$/;"	f	class:Action_rot
Action_rot	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_rot.hh	/^  BTL_DONT_INLINE Action_rot( int size ):_size(size)$/;"	f	class:Action_rot
Action_rot	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_rot.hh	/^class Action_rot {$/;"	c
B	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_rot.hh	/^  typename Interface::gene_vector B;$/;"	m	class:Action_rot
B_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_rot.hh	/^  typename Interface::gene_vector B_ref;$/;"	m	class:Action_rot
B_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_rot.hh	/^  typename Interface::stl_vector B_stl;$/;"	m	class:Action_rot
_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_rot.hh	/^  int _size;$/;"	m	class:Action_rot
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_rot.hh	/^  BTL_DONT_INLINE void calculate( void ) {$/;"	f	class:Action_rot
check_result	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_rot.hh	/^  BTL_DONT_INLINE void check_result( void ){$/;"	f	class:Action_rot
initialize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_rot.hh	/^  BTL_DONT_INLINE  void initialize( void ){$/;"	f	class:Action_rot
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_rot.hh	/^  static inline std::string name( void )$/;"	f	class:Action_rot
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_rot.hh	/^  double nb_op_base( void ){$/;"	f	class:Action_rot
~Action_rot	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_rot.hh	/^  BTL_DONT_INLINE ~Action_rot( void ){$/;"	f	class:Action_rot
A	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^  typename Interface::gene_matrix A;$/;"	m	class:Action_symv
ACTION_SYMV	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	21;"	d
A_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^  typename Interface::gene_matrix A_ref;$/;"	m	class:Action_symv
A_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^  typename Interface::stl_matrix A_stl;$/;"	m	class:Action_symv
Action_symv	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^  Action_symv( const  Action_symv & )$/;"	f	class:Action_symv
Action_symv	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^  BTL_DONT_INLINE Action_symv( int size ):_size(size)$/;"	f	class:Action_symv
Action_symv	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^class Action_symv {$/;"	c
B	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^  typename Interface::gene_vector B;$/;"	m	class:Action_symv
B_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^  typename Interface::gene_vector B_ref;$/;"	m	class:Action_symv
B_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^  typename Interface::stl_vector B_stl;$/;"	m	class:Action_symv
X	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^  typename Interface::gene_vector X;$/;"	m	class:Action_symv
X_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^  typename Interface::gene_vector X_ref;$/;"	m	class:Action_symv
X_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^  typename Interface::stl_vector X_stl;$/;"	m	class:Action_symv
_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^  int _size;$/;"	m	class:Action_symv
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^  BTL_DONT_INLINE void calculate( void ) {$/;"	f	class:Action_symv
check_result	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^  BTL_DONT_INLINE void check_result( void ){$/;"	f	class:Action_symv
initialize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^  BTL_DONT_INLINE  void initialize( void ){$/;"	f	class:Action_symv
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^  static inline std::string name( void )$/;"	f	class:Action_symv
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^  double nb_op_base( void ){$/;"	f	class:Action_symv
resu_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^  typename Interface::stl_vector resu_stl;$/;"	m	class:Action_symv
~Action_symv	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_symv.hh	/^  BTL_DONT_INLINE ~Action_symv( void ){$/;"	f	class:Action_symv
A	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^  typename Interface::gene_matrix A;$/;"	m	class:Action_syr2
ACTION_SYR2	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	21;"	d
A_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^  typename Interface::gene_matrix A_ref;$/;"	m	class:Action_syr2
A_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^  typename Interface::stl_matrix A_stl;$/;"	m	class:Action_syr2
Action_syr2	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^  Action_syr2( const  Action_syr2 & )$/;"	f	class:Action_syr2
Action_syr2	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^  BTL_DONT_INLINE Action_syr2( int size ):_size(size)$/;"	f	class:Action_syr2
Action_syr2	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^class Action_syr2 {$/;"	c
B	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^  typename Interface::gene_vector B;$/;"	m	class:Action_syr2
B_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^  typename Interface::gene_vector B_ref;$/;"	m	class:Action_syr2
B_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^  typename Interface::stl_vector B_stl;$/;"	m	class:Action_syr2
X	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^  typename Interface::gene_vector X;$/;"	m	class:Action_syr2
X_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^  typename Interface::gene_vector X_ref;$/;"	m	class:Action_syr2
X_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^  typename Interface::stl_vector X_stl;$/;"	m	class:Action_syr2
_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^  int _size;$/;"	m	class:Action_syr2
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^  BTL_DONT_INLINE void calculate( void ) {$/;"	f	class:Action_syr2
check_result	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^  BTL_DONT_INLINE void check_result( void ){$/;"	f	class:Action_syr2
initialize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^  BTL_DONT_INLINE  void initialize( void ){$/;"	f	class:Action_syr2
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^  static inline std::string name( void )$/;"	f	class:Action_syr2
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^  double nb_op_base( void ){$/;"	f	class:Action_syr2
resu_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^  typename Interface::stl_vector resu_stl;$/;"	m	class:Action_syr2
~Action_syr2	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_syr2.hh	/^  BTL_DONT_INLINE ~Action_syr2( void ){$/;"	f	class:Action_syr2
ACTION_TRISOLVE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve.hh	20;"	d
Action_trisolve	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve.hh	/^  Action_trisolve( const  Action_trisolve & )$/;"	f	class:Action_trisolve
Action_trisolve	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve.hh	/^  Action_trisolve( int size ):_size(size)$/;"	f	class:Action_trisolve
Action_trisolve	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve.hh	/^class Action_trisolve {$/;"	c
B	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve.hh	/^  typename Interface::gene_vector B;$/;"	m	class:Action_trisolve
B_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve.hh	/^  typename Interface::stl_vector B_stl;$/;"	m	class:Action_trisolve
L	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve.hh	/^  typename Interface::gene_matrix L;$/;"	m	class:Action_trisolve
L_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve.hh	/^  typename Interface::stl_matrix L_stl;$/;"	m	class:Action_trisolve
X	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve.hh	/^  typename Interface::gene_vector X;$/;"	m	class:Action_trisolve
X_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve.hh	/^  typename Interface::stl_vector X_stl;$/;"	m	class:Action_trisolve
_cost	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve.hh	/^  double _cost;$/;"	m	class:Action_trisolve
_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve.hh	/^  int _size;$/;"	m	class:Action_trisolve
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve.hh	/^  inline void calculate( void ) {$/;"	f	class:Action_trisolve
check_result	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve.hh	/^  void check_result(){$/;"	f	class:Action_trisolve
initialize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve.hh	/^  inline void initialize( void ){$/;"	f	class:Action_trisolve
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve.hh	/^  static inline std::string name( void )$/;"	f	class:Action_trisolve
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve.hh	/^  double nb_op_base( void ){$/;"	f	class:Action_trisolve
resu_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve.hh	/^  typename Interface::stl_vector resu_stl;$/;"	m	class:Action_trisolve
~Action_trisolve	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve.hh	/^  ~Action_trisolve( void ){$/;"	f	class:Action_trisolve
A	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  typename Interface::gene_matrix A;$/;"	m	class:Action_trisolve_matrix
ACTION_TRISOLVE_MATRIX_PRODUCT	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	21;"	d
A_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  typename Interface::gene_matrix A_ref;$/;"	m	class:Action_trisolve_matrix
A_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  typename Interface::stl_matrix A_stl;$/;"	m	class:Action_trisolve_matrix
Action_trisolve_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  Action_trisolve_matrix( const  Action_trisolve_matrix & )$/;"	f	class:Action_trisolve_matrix
Action_trisolve_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  Action_trisolve_matrix( int size ):_size(size)$/;"	f	class:Action_trisolve_matrix
Action_trisolve_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^class Action_trisolve_matrix {$/;"	c
B	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  typename Interface::gene_matrix B;$/;"	m	class:Action_trisolve_matrix
B_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  typename Interface::gene_matrix B_ref;$/;"	m	class:Action_trisolve_matrix
B_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  typename Interface::stl_matrix B_stl;$/;"	m	class:Action_trisolve_matrix
X	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  typename Interface::gene_matrix X;$/;"	m	class:Action_trisolve_matrix
X_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  typename Interface::gene_matrix X_ref;$/;"	m	class:Action_trisolve_matrix
X_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  typename Interface::stl_matrix X_stl;$/;"	m	class:Action_trisolve_matrix
_cost	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  double _cost;$/;"	m	class:Action_trisolve_matrix
_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  int _size;$/;"	m	class:Action_trisolve_matrix
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  inline void calculate( void ) {$/;"	f	class:Action_trisolve_matrix
check_result	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  void check_result( void ){$/;"	f	class:Action_trisolve_matrix
initialize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  inline void initialize( void ){$/;"	f	class:Action_trisolve_matrix
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  static inline std::string name( void )$/;"	f	class:Action_trisolve_matrix
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  double nb_op_base( void ){$/;"	f	class:Action_trisolve_matrix
resu_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  typename Interface::stl_matrix resu_stl;$/;"	m	class:Action_trisolve_matrix
~Action_trisolve_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trisolve_matrix.hh	/^  ~Action_trisolve_matrix( void ){$/;"	f	class:Action_trisolve_matrix
A	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  typename Interface::gene_matrix A;$/;"	m	class:Action_trmm
ACTION_TRMM	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	21;"	d
A_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  typename Interface::gene_matrix A_ref;$/;"	m	class:Action_trmm
A_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  typename Interface::stl_matrix A_stl;$/;"	m	class:Action_trmm
Action_trmm	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  Action_trmm( const  Action_trmm & )$/;"	f	class:Action_trmm
Action_trmm	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  Action_trmm( int size ):_size(size)$/;"	f	class:Action_trmm
Action_trmm	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^class Action_trmm {$/;"	c
B	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  typename Interface::gene_matrix B;$/;"	m	class:Action_trmm
B_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  typename Interface::gene_matrix B_ref;$/;"	m	class:Action_trmm
B_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  typename Interface::stl_matrix B_stl;$/;"	m	class:Action_trmm
X	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  typename Interface::gene_matrix X;$/;"	m	class:Action_trmm
X_ref	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  typename Interface::gene_matrix X_ref;$/;"	m	class:Action_trmm
X_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  typename Interface::stl_matrix X_stl;$/;"	m	class:Action_trmm
_cost	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  double _cost;$/;"	m	class:Action_trmm
_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  int _size;$/;"	m	class:Action_trmm
calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  inline void calculate( void ) {$/;"	f	class:Action_trmm
check_result	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  void check_result( void ){$/;"	f	class:Action_trmm
initialize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  inline void initialize( void ){$/;"	f	class:Action_trmm
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  static inline std::string name( void )$/;"	f	class:Action_trmm
nb_op_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  double nb_op_base( void ){$/;"	f	class:Action_trmm
resu_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  typename Interface::stl_matrix resu_stl;$/;"	m	class:Action_trmm
~Action_trmm	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/actions/action_trmm.hh	/^  ~Action_trmm( void ){$/;"	f	class:Action_trmm
isosamples	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/gnuplot_common_settings.hh	/^set isosamples 10, 10$/;"	v
offset	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/gnuplot_common_settings.hh	/^set timestamp "" bottom norotate offset 0,0$/;"	v
offset	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/gnuplot_common_settings.hh	/^set x2label "" offset 0,0$/;"	v
offset	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/gnuplot_common_settings.hh	/^set xlabel "matrix size" offset 0,0$/;"	v
offset	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/gnuplot_common_settings.hh	/^set y2label "" offset 0,0$/;"	v
offset	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/gnuplot_common_settings.hh	/^set ylabel "MFLOPS" offset 0,0$/;"	v
offset	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/gnuplot_common_settings.hh	/^set zlabel "" offset 0,0$/;"	v
offsets	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/gnuplot_common_settings.hh	/^set offsets 0, 0, 0, 0$/;"	v
origin	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/gnuplot_common_settings.hh	/^set origin 0,0$/;"	v
ratio	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/gnuplot_common_settings.hh	/^set size ratio 0 1,1$/;"	v
samples	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/gnuplot_common_settings.hh	/^set samples 100, 100$/;"	v
scale	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/gnuplot_common_settings.hh	/^set tics scale 1, 0.5$/;"	v
view	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/gnuplot_common_settings.hh	/^set view 60, 30, 1, 1$/;"	v
x	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/gnuplot_common_settings.hh	/^set dummy x,y$/;"	v
Lib_Mean	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/mean.cxx	/^  Lib_Mean( void ):_lib_name(),_mean_in_cache(),_mean_out_of_cache(){$/;"	f	class:Lib_Mean
Lib_Mean	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/mean.cxx	/^  Lib_Mean(const Lib_Mean & lm):_lib_name(lm._lib_name),_mean_in_cache(lm._mean_in_cache),_mean_out_of_cache(lm._mean_out_of_cache){$/;"	f	class:Lib_Mean
Lib_Mean	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/mean.cxx	/^  Lib_Mean(const string & name, const double & mic, const double & moc):_lib_name(name),_mean_in_cache(mic),_mean_out_of_cache(moc){$/;"	f	class:Lib_Mean
Lib_Mean	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/mean.cxx	/^class Lib_Mean{$/;"	c	file:
_lib_name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/mean.cxx	/^  string _lib_name;$/;"	m	class:Lib_Mean	file:
_mean_in_cache	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/mean.cxx	/^  double _mean_in_cache;$/;"	m	class:Lib_Mean	file:
_mean_out_of_cache	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/mean.cxx	/^  double _mean_out_of_cache;$/;"	m	class:Lib_Mean	file:
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/mean.cxx	/^int main( int argc , char *argv[] )$/;"	f
mean_calc	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/mean.cxx	/^double mean_calc(const vector<int> & tab_sizes, const vector<double> & tab_mflops, const int size_min, const int size_max){$/;"	f
operator <	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/mean.cxx	/^  bool operator < ( const Lib_Mean &right) const $/;"	f	class:Lib_Mean
~Lib_Mean	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/mean.cxx	/^  ~Lib_Mean( void ){$/;"	f	class:Lib_Mean
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/regularize.cxx	/^int main( int argc , char *argv[] )$/;"	f
read_xy_file	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/regularize.cxx	/^void read_xy_file(const string & filename, vector<int> & tab_sizes, vector<double> & tab_mflops){$/;"	f
regularize_curve	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/regularize.cxx	/^void regularize_curve(const string & filename,$/;"	f
centered_smooth_curve	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/smooth.cxx	/^void centered_smooth_curve(const vector<double> & tab_mflops, vector<double> & smooth_tab_mflops,int window_half_width){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/smooth.cxx	/^int main( int argc , char *argv[] )$/;"	f
read_xy_file	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/smooth.cxx	/^void read_xy_file(const string & filename, vector<int> & tab_sizes, vector<double> & tab_mflops){$/;"	f
smooth_curve	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/smooth.cxx	/^void smooth_curve(const vector<double> & tab_mflops, vector<double> & smooth_tab_mflops,int window_half_width){$/;"	f
weighted_mean	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/smooth.cxx	/^double weighted_mean(const VECTOR & data)$/;"	f
write_xy_file	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/data/smooth.cxx	/^void write_xy_file(const string & filename, vector<int> & tab_sizes, vector<double> & tab_mflops){$/;"	f
BENCH_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/bench.hh	21;"	d
bench	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/bench.hh	/^BTL_DONT_INLINE void bench( int size_min, int size_max, int nb_point )$/;"	f
bench	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/bench.hh	/^BTL_DONT_INLINE void bench( int size_min, int size_max, int nb_point ){$/;"	f
BENCH_PARAMETER_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/bench_parameter.hh	21;"	d
DEFAULT_NB_SAMPLE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/bench_parameter.hh	48;"	d
DEFAULT_NB_TRIES	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/bench_parameter.hh	51;"	d
MAX_AXPY	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/bench_parameter.hh	32;"	d
MAX_LU	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/bench_parameter.hh	44;"	d
MAX_MM	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/bench_parameter.hh	40;"	d
MAX_MV	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/bench_parameter.hh	36;"	d
MIN_AXPY	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/bench_parameter.hh	30;"	d
MIN_LU	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/bench_parameter.hh	42;"	d
MIN_MM	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/bench_parameter.hh	38;"	d
MIN_MV	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/bench_parameter.hh	34;"	d
MIN_TIME	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/bench_parameter.hh	26;"	d
NB_POINT	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/bench_parameter.hh	28;"	d
REAL_TYPE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/bench_parameter.hh	24;"	d
TINY_MV_MAX_SIZE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/bench_parameter.hh	46;"	d
BTL_ALWAYS_INLINE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	30;"	d
BTL_ALWAYS_INLINE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	32;"	d
BTL_ASM_COMMENT	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	42;"	d
BTL_ASM_COMMENT	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	44;"	d
BTL_DISABLE_SSE_EXCEPTIONS	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	48;"	d
BTL_DISABLE_SSE_EXCEPTIONS	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	57;"	d
BTL_DONT_INLINE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	36;"	d
BTL_DONT_INLINE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	38;"	d
BTL_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	20;"	d
BTL_MAIN	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	244;"	d
BtlConfig	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^  BtlConfig()$/;"	f	class:BtlConfig
BtlConfig	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^class BtlConfig$/;"	c
BtlString	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^    BtlString() : std::string() {}$/;"	f	class:BtlString
BtlString	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^    BtlString(const BtlString& str) : std::string(static_cast<const std::string&>(str)) {}$/;"	f	class:BtlString
BtlString	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^    BtlString(const char* str) : std::string(str) {}$/;"	f	class:BtlString
BtlString	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^    BtlString(const std::string& str) : std::string(str) {}$/;"	f	class:BtlString
BtlString	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^class BtlString : public std::string$/;"	c
Instance	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^  static BtlConfig Instance;$/;"	m	class:BtlConfig
beginsWith	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^    bool beginsWith(const BtlString& str) const$/;"	f	class:BtlString
checkResults	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^  bool checkResults;$/;"	m	class:BtlConfig
contains	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^    bool contains(const BtlString& str) const$/;"	f	class:BtlString
decomposePathAndFile	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^    void decomposePathAndFile(BtlString& path, BtlString& filename) const$/;"	f	class:BtlString
endsWith	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^    bool endsWith(const BtlString& str) const$/;"	f	class:BtlString
isEquiv	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^    bool isEquiv(const BtlString& str) const$/;"	f	class:BtlString
m_selectedActionNames	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^  std::vector<BtlString> m_selectedActionNames;$/;"	m	class:BtlConfig
operator const char*	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^    operator const char* () const { return c_str(); }$/;"	f	class:BtlString
overwriteResults	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^  bool overwriteResults;$/;"	m	class:BtlConfig
realclock	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^  bool realclock;$/;"	m	class:BtlConfig
skipAction	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^  BTL_DONT_INLINE static bool skipAction(const std::string& _name)$/;"	f	class:BtlConfig
split	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^    std::vector<BtlString> split( const BtlString& delims = "\\t\\n ") const$/;"	f	class:BtlString
toLowerCase	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^    BtlString toLowerCase( void )$/;"	f	class:BtlString
toUpperCase	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^    BtlString toUpperCase( void )$/;"	f	class:BtlString
tries	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^  int tries;$/;"	m	class:BtlConfig
trim	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/btl.hh	/^    void trim( bool left = true, bool right = true )$/;"	f	class:BtlString
INIT_FUNCTION_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/init/init_function.hh	21;"	d
null_function	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/init/init_function.hh	/^double null_function(int index)$/;"	f
null_function	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/init/init_function.hh	/^double null_function(int index_i, int index_j)$/;"	f
pseudo_random	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/init/init_function.hh	/^double pseudo_random(int index)$/;"	f
pseudo_random	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/init/init_function.hh	/^double pseudo_random(int index_i, int index_j)$/;"	f
simple_function	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/init/init_function.hh	/^double simple_function(int index)$/;"	f
simple_function	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/init/init_function.hh	/^double simple_function(int index_i, int index_j)$/;"	f
INIT_MATRIX_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/init/init_matrix.hh	21;"	d
init_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/init/init_matrix.hh	/^BTL_DONT_INLINE void init_matrix(Vector &  A, int size){$/;"	f
init_matrix_symm	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/init/init_matrix.hh	/^BTL_DONT_INLINE void init_matrix_symm(Matrix&  A, int size){$/;"	f
init_row	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/init/init_matrix.hh	/^BTL_DONT_INLINE void init_row(Vector & X, int size, int row){$/;"	f
INIT_VECTOR_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/init/init_vector.hh	21;"	d
init_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/init/init_vector.hh	/^void init_vector(Vector & X, int size){$/;"	f
BENCH_STATIC_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/static/bench_static.hh	21;"	d
bench_static	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/static/bench_static.hh	/^BTL_DONT_INLINE  void bench_static(void)$/;"	f
_BENCH_FIXED_SIZE_HH_	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/static/intel_bench_fixed_size.hh	21;"	d
bench_fixed_size	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/static/intel_bench_fixed_size.hh	/^double bench_fixed_size(int size, unsigned long long  & nb_calc,unsigned long long & nb_init)$/;"	f
_STATIC_SIZE_GENERATOR_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/static/static_size_generator.hh	21;"	d
go	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/static/static_size_generator.hh	/^  static  void go(vector<double> & tab_sizes, vector<double> & tab_mflops)$/;"	f	struct:static_size_generator
go	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/static/static_size_generator.hh	/^  static void go(vector<double> & tab_sizes, vector<double> & tab_mflops)$/;"	f	struct:static_size_generator
static_size_generator	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/static/static_size_generator.hh	/^struct static_size_generator<1,Perf_Analyzer,Action,Interface>{  $/;"	s
static_size_generator	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/static/static_size_generator.hh	/^struct static_size_generator{$/;"	s
STL_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_perf_analyzer.hh	/^  STL_Perf_Analyzer( const STL_Perf_Analyzer & ){$/;"	f	class:STL_Perf_Analyzer
STL_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_perf_analyzer.hh	/^  STL_Perf_Analyzer(unsigned long long nb_sample=DEFAULT_NB_SAMPLE):_nb_sample(nb_sample),_chronos()$/;"	f	class:STL_Perf_Analyzer
STL_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_perf_analyzer.hh	/^class STL_Perf_Analyzer{$/;"	c
_STL_PERF_ANALYSER_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_perf_analyzer.hh	21;"	d
_chronos	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_perf_analyzer.hh	/^  STL_Timer _chronos;$/;"	m	class:STL_Perf_Analyzer
_nb_sample	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_perf_analyzer.hh	/^  unsigned long long _nb_sample;$/;"	m	class:STL_Perf_Analyzer
eval_mflops	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_perf_analyzer.hh	/^  inline double eval_mflops(int size)$/;"	f	class:STL_Perf_Analyzer
~STL_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_perf_analyzer.hh	/^  ~STL_Perf_Analyzer( void ){$/;"	f	class:STL_Perf_Analyzer
STL_Timer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_timer.hh	/^  STL_Timer(){ baseline = false; };  \/\/ Default constructor$/;"	f	class:STL_Timer
STL_Timer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_timer.hh	/^class STL_Timer {$/;"	c
baseline	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_timer.hh	/^  bool baseline;$/;"	m	class:STL_Timer
baseline_time	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_timer.hh	/^  double baseline_time;$/;"	m	class:STL_Timer
check	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_timer.hh	/^  bool check()$/;"	f	class:STL_Timer
count	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_timer.hh	/^  unsigned long count;$/;"	m	class:STL_Timer
final	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_timer.hh	/^  time_t initial, final;$/;"	m	class:STL_Timer
get_time	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_timer.hh	/^  double get_time( void )$/;"	f	class:STL_Timer
initial	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_timer.hh	/^  time_t initial, final;$/;"	m	class:STL_Timer
iterations	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_timer.hh	/^  vector<long> iterations;$/;"	m	class:STL_Timer
reps	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_timer.hh	/^  unsigned int reps;  \/\/ Number of trials$/;"	m	class:STL_Timer
start	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_timer.hh	/^  void start(unsigned int r){$/;"	f	class:STL_Timer
start_baseline	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/STL_timer.hh	/^  void start_baseline(unsigned int r)$/;"	f	class:STL_Timer
Mixed_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/mixed_perf_analyzer.hh	/^  Mixed_Perf_Analyzer( const Mixed_Perf_Analyzer & ){$/;"	f	class:Mixed_Perf_Analyzer
Mixed_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/mixed_perf_analyzer.hh	/^  Mixed_Perf_Analyzer( void ):_x86pa(),_ppa(),_use_ppa(true)$/;"	f	class:Mixed_Perf_Analyzer
Mixed_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/mixed_perf_analyzer.hh	/^class Mixed_Perf_Analyzer{$/;"	c
_MIXED_PERF_ANALYSER_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/mixed_perf_analyzer.hh	21;"	d
_ppa	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/mixed_perf_analyzer.hh	/^  Portable_Perf_Analyzer<Action> _ppa;$/;"	m	class:Mixed_Perf_Analyzer
_use_ppa	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/mixed_perf_analyzer.hh	/^  bool _use_ppa;$/;"	m	class:Mixed_Perf_Analyzer
_x86pa	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/mixed_perf_analyzer.hh	/^  X86_Perf_Analyzer<Action> _x86pa;$/;"	m	class:Mixed_Perf_Analyzer
eval_mflops	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/mixed_perf_analyzer.hh	/^  inline double eval_mflops(int size)$/;"	f	class:Mixed_Perf_Analyzer
~Mixed_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/mixed_perf_analyzer.hh	/^  ~Mixed_Perf_Analyzer( void ){$/;"	f	class:Mixed_Perf_Analyzer
Portable_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer.hh	/^  Portable_Perf_Analyzer( ):_nb_calc(0), m_time_action(0), _chronos(){$/;"	f	class:Portable_Perf_Analyzer
Portable_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer.hh	/^  Portable_Perf_Analyzer( const Portable_Perf_Analyzer & ){$/;"	f	class:Portable_Perf_Analyzer
Portable_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer.hh	/^class Portable_Perf_Analyzer{$/;"	c
_PORTABLE_PERF_ANALYZER_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer.hh	22;"	d
_chronos	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer.hh	/^  Portable_Timer _chronos;$/;"	m	class:Portable_Perf_Analyzer
_nb_calc	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer.hh	/^  unsigned long long _nb_calc;$/;"	m	class:Portable_Perf_Analyzer
eval_mflops	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer.hh	/^  BTL_DONT_INLINE double eval_mflops(int size)$/;"	f	class:Portable_Perf_Analyzer
get_nb_calc	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer.hh	/^  unsigned long long get_nb_calc()$/;"	f	class:Portable_Perf_Analyzer
m_time_action	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer.hh	/^  double m_time_action;$/;"	m	class:Portable_Perf_Analyzer
time_calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer.hh	/^  BTL_DONT_INLINE double time_calculate(Action & action)$/;"	f	class:Portable_Perf_Analyzer
~Portable_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer.hh	/^  ~Portable_Perf_Analyzer(){$/;"	f	class:Portable_Perf_Analyzer
Portable_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer_old.hh	/^  Portable_Perf_Analyzer( const Portable_Perf_Analyzer & ){$/;"	f	class:Portable_Perf_Analyzer
Portable_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer_old.hh	/^  Portable_Perf_Analyzer( void ):_nb_calc(1),_nb_init(1),_chronos(){$/;"	f	class:Portable_Perf_Analyzer
Portable_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer_old.hh	/^class Portable_Perf_Analyzer{$/;"	c
_PORTABLE_PERF_ANALYZER_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer_old.hh	21;"	d
_chronos	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer_old.hh	/^  Portable_Timer _chronos;$/;"	m	class:Portable_Perf_Analyzer
_nb_calc	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer_old.hh	/^  unsigned long long _nb_calc;$/;"	m	class:Portable_Perf_Analyzer
_nb_init	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer_old.hh	/^  unsigned long long _nb_init;$/;"	m	class:Portable_Perf_Analyzer
eval_mflops	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer_old.hh	/^  inline double eval_mflops(int size)$/;"	f	class:Portable_Perf_Analyzer
get_nb_calc	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer_old.hh	/^  unsigned long long get_nb_calc( void )$/;"	f	class:Portable_Perf_Analyzer
time_calculate	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer_old.hh	/^  inline double time_calculate(Action & action)$/;"	f	class:Portable_Perf_Analyzer
time_init	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer_old.hh	/^  inline double time_init(Action & action)$/;"	f	class:Portable_Perf_Analyzer
~Portable_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_perf_analyzer_old.hh	/^  ~Portable_Perf_Analyzer( void ){$/;"	f	class:Portable_Perf_Analyzer
LIToSecs	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^   double LIToSecs(LARGE_INTEGER& L) {$/;"	f	class:Portable_Timer
NOMINMAX	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	39;"	d
Portable_Timer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^   Portable_Timer()$/;"	f	class:Portable_Timer
Portable_Timer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^  Portable_Timer()$/;"	f	class:Portable_Timer
Portable_Timer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^  Portable_Timer(int clkid) : m_clkid(clkid)$/;"	f	class:Portable_Timer
Portable_Timer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^ class Portable_Timer$/;"	c
Portable_Timer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^class Portable_Timer$/;"	c
USEC_IN_SEC	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	31;"	d
_PORTABLE_TIMER_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	23;"	d
elapsed	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^   double elapsed() {$/;"	f	class:Portable_Timer
elapsed	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^  double elapsed()$/;"	f	class:Portable_Timer
frequency	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^   LARGE_INTEGER frequency;$/;"	m	class:Portable_Timer
m_clkid	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^  int m_clkid;$/;"	m	class:Portable_Timer
m_start_time	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^  double m_stop_time, m_start_time;$/;"	m	class:Portable_Timer
m_stop_time	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^  double m_stop_time, m_start_time;$/;"	m	class:Portable_Timer
start	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^    LARGE_INTEGER start;$/;"	m	struct:Portable_Timer::<anonymous>
start	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^   void start() { QueryPerformanceCounter(&startVal); }$/;"	f	class:Portable_Timer
start	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^  void start()$/;"	f	class:Portable_Timer
startVal	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^   LARGE_INTEGER startVal;$/;"	m	class:Portable_Timer
stop	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^    LARGE_INTEGER stop;$/;"	m	struct:Portable_Timer::<anonymous>
stop	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^   void stop() { QueryPerformanceCounter(&stopVal); }$/;"	f	class:Portable_Timer
stop	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^  void stop()$/;"	f	class:Portable_Timer
stopVal	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^   LARGE_INTEGER stopVal;$/;"	m	class:Portable_Timer
stopWatch	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^   } stopWatch;$/;"	t	class:Portable_Timer
user_time	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^   double user_time() { return elapsed(); }$/;"	f	class:Portable_Timer
user_time	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/portable_timer.hh	/^  double user_time()$/;"	f	class:Portable_Timer
X86_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_perf_analyzer.hh	/^  X86_Perf_Analyzer( const X86_Perf_Analyzer & ){$/;"	f	class:X86_Perf_Analyzer
X86_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_perf_analyzer.hh	/^  X86_Perf_Analyzer( unsigned long long nb_sample=DEFAULT_NB_SAMPLE):_nb_sample(nb_sample),_chronos()$/;"	f	class:X86_Perf_Analyzer
X86_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_perf_analyzer.hh	/^class X86_Perf_Analyzer{$/;"	c
_X86_PERF_ANALYSER_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_perf_analyzer.hh	21;"	d
_chronos	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_perf_analyzer.hh	/^  X86_Timer _chronos;$/;"	m	class:X86_Perf_Analyzer
_nb_sample	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_perf_analyzer.hh	/^  unsigned long long _nb_sample;$/;"	m	class:X86_Perf_Analyzer
eval_mflops	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_perf_analyzer.hh	/^  inline double eval_mflops(int size)$/;"	f	class:X86_Perf_Analyzer
~X86_Perf_Analyzer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_perf_analyzer.hh	/^  ~X86_Perf_Analyzer( void ){$/;"	f	class:X86_Perf_Analyzer
FREQUENCY	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	39;"	d
X86_Timer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  X86_Timer( void ):_frequency(FREQUENCY),_nb_sample(0)$/;"	f	class:X86_Timer
X86_Timer	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^class X86_Timer {$/;"	c
_X86_TIMER_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	21;"	d
_click_start	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  } _click_start;$/;"	m	class:X86_Timer
_click_stop	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  } _click_stop;$/;"	m	class:X86_Timer
_counted_clicks	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  map<unsigned long long,unsigned long long> _counted_clicks;$/;"	m	class:X86_Timer
_frequency	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  double _frequency ;$/;"	m	class:X86_Timer
_history_mean_clicks	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  vector<double> _history_mean_clicks;$/;"	m	class:X86_Timer
_history_most_occured_clicks	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  vector<double> _history_most_occured_clicks;$/;"	m	class:X86_Timer
_history_shortest_clicks	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  vector<double> _history_shortest_clicks;$/;"	m	class:X86_Timer
_nb_sample	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  unsigned long long _nb_sample;$/;"	m	class:X86_Timer
add_get_click	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  void  add_get_click( void ){$/;"	f	class:X86_Timer
clear	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  void clear( void )$/;"	f	class:X86_Timer
dump_history	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  void dump_history(string filemane){$/;"	f	class:X86_Timer
dump_statistics	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  void dump_statistics(string filemane){$/;"	f	class:X86_Timer
fill_history_clicks	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  void fill_history_clicks( void ){$/;"	f	class:X86_Timer
find_frequency	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  inline void find_frequency( void ){$/;"	f	class:X86_Timer
frequency	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  inline double frequency( void ){$/;"	f	class:X86_Timer
get_click	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  unsigned long long  get_click( void ){$/;"	f	class:X86_Timer
get_elapsed_time_in_second	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  double get_elapsed_time_in_second( void ){$/;"	f	class:X86_Timer
get_mean_clicks	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  double get_mean_clicks( void ){$/;"	f	class:X86_Timer
get_most_occured_clicks	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  double get_most_occured_clicks( void ){$/;"	f	class:X86_Timer
get_shortest_clicks	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  double get_shortest_clicks( void ){$/;"	f	class:X86_Timer
n32	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^    unsigned long int n32[2] ;$/;"	m	union:X86_Timer::<anonymous>
n64	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^    unsigned long long n64 ;$/;"	m	union:X86_Timer::<anonymous>
start	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  inline void start( void ){$/;"	f	class:X86_Timer
stop	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	/^  inline void stop( void ){$/;"	f	class:X86_Timer
u32	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/timers/x86_timer.hh	28;"	d
SIZE_LIN_LOG	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/size_lin_log.hh	21;"	d
size_lin_log	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/size_lin_log.hh	/^void size_lin_log(const int nb_point, const int size_min, const int size_max, Vector & X)$/;"	f
SIZE_LOG	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/size_log.hh	21;"	d
size_log	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/size_log.hh	/^void size_log(const int nb_point, const int size_min, const int size_max, Vector & X)$/;"	f
ASSERT	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	63;"	d
ASSERT	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	80;"	d
BEGIN_OF	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	67;"	d
BEGIN_OF	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	84;"	d
COMPILER	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	28;"	d
COMPILER	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	30;"	d
COMPILER	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	32;"	d
COMPILER	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	34;"	d
COMPILER	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	36;"	d
END_OF	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	68;"	d
END_OF	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	85;"	d
HERE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	57;"	d
HERE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	74;"	d
HEREWEARE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	21;"	d
INFOS	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	22;"	d
INFOS_COMPILATION	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	42;"	d
INTERRUPTION	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	60;"	d
INTERRUPTION	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	77;"	d
MESSAGE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	59;"	d
MESSAGE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	76;"	d
PYSCRIPT	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	23;"	d
REPERE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	66;"	d
REPERE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	83;"	d
SCRUTE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	58;"	d
SCRUTE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	75;"	d
UTILITIES_H	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/utilities.h	13;"	d
XY_FILE_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/xy_file.hh	21;"	d
dump_xy_file	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/xy_file.hh	/^void dump_xy_file(const Vector_A & X, const Vector_B & Y, const std::string & filename){$/;"	f
read_xy_file	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/generic_bench/utils/xy_file.hh	/^bool read_xy_file(const std::string & filename, std::vector<int> & tab_sizes,$/;"	f
C_INTERFACE_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C/C_interface.hh	21;"	d
C_interface	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C/C_interface.hh	/^class C_interface : public f77_interface_base<real> {$/;"	c
aat_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C/C_interface.hh	/^  static inline void aat_product(const gene_matrix & A, gene_matrix & X, int N){$/;"	f	class:C_interface
ata_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C/C_interface.hh	/^  static inline void ata_product(const gene_matrix & A, gene_matrix & X, int N)$/;"	f	class:C_interface
atv_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C/C_interface.hh	/^  static inline void atv_product(const gene_matrix & A, const gene_vector & B, gene_vector & X, int N)$/;"	f	class:C_interface
axpy	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C/C_interface.hh	/^  static inline void axpy(real coef, const gene_vector & X, gene_vector & Y, int N){$/;"	f	class:C_interface
gene_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C/C_interface.hh	/^  typedef typename f77_interface_base<real>::gene_matrix gene_matrix;$/;"	t	class:C_interface
gene_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C/C_interface.hh	/^  typedef typename f77_interface_base<real>::gene_vector gene_vector;$/;"	t	class:C_interface
matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C/C_interface.hh	/^  static inline void matrix_matrix_product(const gene_matrix & A, const gene_matrix & B, gene_matrix & X, int N)$/;"	f	class:C_interface
matrix_vector_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C/C_interface.hh	/^  static inline void matrix_vector_product(const gene_matrix & A, const gene_vector & B, gene_vector & X, int N)$/;"	f	class:C_interface
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C/C_interface.hh	/^  static inline std::string name() { return "C"; }$/;"	f	class:C_interface
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C/main.cpp	/^int main()$/;"	f
C_BLAS_PRODUIT_MATRICE_VECTEUR_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	21;"	d
C_BLAS_interface	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^class C_BLAS_interface : public f77_interface_base<real>$/;"	c
C_BLAS_interface	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^class C_BLAS_interface<float> : public f77_interface_base<float>$/;"	c
MAKE_STRING	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	73;"	d
MAKE_STRING2	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	72;"	d
aat_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static  inline void aat_product(gene_matrix & A, gene_matrix & X, int N){$/;"	f	class:C_BLAS_interface
aat_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void aat_product(gene_matrix & A, gene_matrix & X, int N){$/;"	f	class:C_BLAS_interface
ata_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static  inline void ata_product(gene_matrix & A, gene_matrix & X, int N){$/;"	f	class:C_BLAS_interface
ata_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void ata_product(gene_matrix & A, gene_matrix & X, int N){$/;"	f	class:C_BLAS_interface
atv_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static  inline void atv_product(gene_matrix & A, gene_vector & B, gene_vector & X, int N)$/;"	f	class:C_BLAS_interface
atv_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void atv_product(gene_matrix & A, gene_vector & B, gene_vector & X, int N){$/;"	f	class:C_BLAS_interface
axpby	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void axpby(float a, const gene_vector & X, float b, gene_vector & Y, int N){$/;"	f	class:C_BLAS_interface
axpby	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void axpby(real a, const gene_vector & X, real b, gene_vector & Y, int N){$/;"	f	class:C_BLAS_interface
axpy	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static  inline void axpy(real coef, const gene_vector & X, gene_vector & Y, int N){$/;"	f	class:C_BLAS_interface
axpy	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void axpy(float coef, const gene_vector & X, gene_vector & Y, int N){$/;"	f	class:C_BLAS_interface
cholesky	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void cholesky(const gene_matrix & X, gene_matrix & C, int N){$/;"	f	class:C_BLAS_interface
fone	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^static float fone = 1;$/;"	v
fzero	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^static float fzero = 0;$/;"	v
gene_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  typedef typename f77_interface_base<real>::gene_matrix gene_matrix;$/;"	t	class:C_BLAS_interface
gene_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  typedef typename f77_interface_base<real>::gene_vector gene_vector;$/;"	t	class:C_BLAS_interface
ger	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void ger(gene_matrix & A, gene_vector & X, gene_vector & Y, int N){$/;"	f	class:C_BLAS_interface
hessenberg	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void hessenberg(const gene_matrix & X, gene_matrix & C, int N){$/;"	f	class:C_BLAS_interface
intone	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^static int intone = 1;$/;"	v
left	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^static char left = 'L';$/;"	v
lower	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^static char lower = 'L';$/;"	v
lu_decomp	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void lu_decomp(const gene_matrix & X, gene_matrix & C, int N){$/;"	f	class:C_BLAS_interface
matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static  inline void matrix_matrix_product(gene_matrix & A, gene_matrix & B, gene_matrix & X, int N){$/;"	f	class:C_BLAS_interface
matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void matrix_matrix_product(gene_matrix & A, gene_matrix & B, gene_matrix & X, int N){$/;"	f	class:C_BLAS_interface
matrix_vector_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static  inline void matrix_vector_product(gene_matrix & A, gene_vector & B, gene_vector & X, int N)$/;"	f	class:C_BLAS_interface
matrix_vector_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void matrix_vector_product(gene_matrix & A, gene_vector & B, gene_vector & X, int N){$/;"	f	class:C_BLAS_interface
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline std::string name( void )$/;"	f	class:C_BLAS_interface
nonunit	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^static char nonunit = 'N';$/;"	v
notrans	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^static char notrans = 'N';$/;"	v
partial_lu_decomp	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void partial_lu_decomp(const gene_matrix & X, gene_matrix & C, int N){$/;"	f	class:C_BLAS_interface
right	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^static char right = 'R';$/;"	v
rot	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void rot(gene_vector & A,  gene_vector & B, float c, float s, int N){$/;"	f	class:C_BLAS_interface
symv	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static  inline void symv(gene_matrix & A, gene_vector & B, gene_vector & X, int N)$/;"	f	class:C_BLAS_interface
symv	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void symv(gene_matrix & A, gene_vector & B, gene_vector & X, int N){$/;"	f	class:C_BLAS_interface
syr2	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void syr2(gene_matrix & A, gene_vector & B, gene_vector & X, int N){$/;"	f	class:C_BLAS_interface
trans	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^static char trans = 'T';$/;"	v
transposed_matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static  inline void transposed_matrix_matrix_product(gene_matrix & A, gene_matrix & B, gene_matrix & X, int N){$/;"	f	class:C_BLAS_interface
transposed_matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void transposed_matrix_matrix_product(gene_matrix & A, gene_matrix & B, gene_matrix & X, int N){$/;"	f	class:C_BLAS_interface
tridiagonalization	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void tridiagonalization(const gene_matrix & X, gene_matrix & C, int N){$/;"	f	class:C_BLAS_interface
trisolve_lower	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void trisolve_lower(const gene_matrix & L, const gene_vector& B, gene_vector & X, int N){$/;"	f	class:C_BLAS_interface
trisolve_lower_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void trisolve_lower_matrix(const gene_matrix & L, const gene_matrix& B, gene_matrix & X, int N){$/;"	f	class:C_BLAS_interface
trmm	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/C_BLAS_interface.hh	/^  static inline void trmm(gene_matrix & A, gene_matrix & B, gene_matrix & X, int N){$/;"	f	class:C_BLAS_interface
BLASFUNC	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/blas.h	4;"	d
BLASLONG	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/blas.h	/^typedef long BLASLONG;$/;"	t
BLASLONG	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/blas.h	/^typedef long long BLASLONG;$/;"	t
BLASULONG	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/blas.h	/^typedef unsigned long BLASULONG;$/;"	t
BLASULONG	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/blas.h	/^typedef unsigned long long BLASULONG;$/;"	t
BLAS_H	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/blas.h	2;"	d
AtlasConj	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	/^                         AtlasConj=114};$/;"	e	enum:CBLAS_TRANSPOSE
CBLAS_DIAG	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	/^   enum CBLAS_DIAG  {CblasNonUnit=131, CblasUnit=132};$/;"	g
CBLAS_ENUM_DEFINED_H	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	4;"	d
CBLAS_H	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	14;"	d
CBLAS_INDEX	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	15;"	d
CBLAS_ORDER	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	/^   enum CBLAS_ORDER {CblasRowMajor=101, CblasColMajor=102 };$/;"	g
CBLAS_SIDE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	/^   enum CBLAS_SIDE  {CblasLeft=141, CblasRight=142};$/;"	g
CBLAS_TRANSPOSE	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	/^   enum CBLAS_TRANSPOSE {CblasNoTrans=111, CblasTrans=112, CblasConjTrans=113,$/;"	g
CBLAS_UPLO	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	/^   enum CBLAS_UPLO  {CblasUpper=121, CblasLower=122};$/;"	g
CblasColMajor	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	/^   enum CBLAS_ORDER {CblasRowMajor=101, CblasColMajor=102 };$/;"	e	enum:CBLAS_ORDER
CblasConjTrans	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	/^   enum CBLAS_TRANSPOSE {CblasNoTrans=111, CblasTrans=112, CblasConjTrans=113,$/;"	e	enum:CBLAS_TRANSPOSE
CblasLeft	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	/^   enum CBLAS_SIDE  {CblasLeft=141, CblasRight=142};$/;"	e	enum:CBLAS_SIDE
CblasLower	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	/^   enum CBLAS_UPLO  {CblasUpper=121, CblasLower=122};$/;"	e	enum:CBLAS_UPLO
CblasNoTrans	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	/^   enum CBLAS_TRANSPOSE {CblasNoTrans=111, CblasTrans=112, CblasConjTrans=113,$/;"	e	enum:CBLAS_TRANSPOSE
CblasNonUnit	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	/^   enum CBLAS_DIAG  {CblasNonUnit=131, CblasUnit=132};$/;"	e	enum:CBLAS_DIAG
CblasRight	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	/^   enum CBLAS_SIDE  {CblasLeft=141, CblasRight=142};$/;"	e	enum:CBLAS_SIDE
CblasRowMajor	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	/^   enum CBLAS_ORDER {CblasRowMajor=101, CblasColMajor=102 };$/;"	e	enum:CBLAS_ORDER
CblasTrans	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	/^   enum CBLAS_TRANSPOSE {CblasNoTrans=111, CblasTrans=112, CblasConjTrans=113,$/;"	e	enum:CBLAS_TRANSPOSE
CblasUnit	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	/^   enum CBLAS_DIAG  {CblasNonUnit=131, CblasUnit=132};$/;"	e	enum:CBLAS_DIAG
CblasUpper	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/cblas.h	/^   enum CBLAS_UPLO  {CblasUpper=121, CblasLower=122};$/;"	e	enum:CBLAS_UPLO
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/C_BLAS/main.cpp	/^int main()$/;"	f
STL_INTERFACE_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	21;"	d
STL_interface	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^class STL_interface{$/;"	c
aat_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline void aat_product(const gene_matrix & A, gene_matrix & X, int N)$/;"	f	class:STL_interface
ata_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline void ata_product(const gene_matrix & A, gene_matrix & X, int N)$/;"	f	class:STL_interface
atv_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline void atv_product(gene_matrix & A, gene_vector & B, gene_vector & X, int N)$/;"	f	class:STL_interface
axpby	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline void axpby(real a, const gene_vector & X, real b, gene_vector & Y, int N){$/;"	f	class:STL_interface
axpy	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline void axpy(real coef, const gene_vector & X, gene_vector & Y, int N){$/;"	f	class:STL_interface
copy_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline void copy_matrix(const gene_matrix & source, gene_matrix & cible, int N){$/;"	f	class:STL_interface
copy_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline void copy_vector(const gene_vector & source, gene_vector & cible, int N){$/;"	f	class:STL_interface
display_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline void display_vector(const stl_vector & A)$/;"	f	class:STL_interface
free_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static void free_matrix(gene_matrix & A, int N){}$/;"	f	class:STL_interface
free_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static void free_vector(gene_vector & B){}$/;"	f	class:STL_interface
gene_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  typedef stl_matrix gene_matrix;$/;"	t	class:STL_interface
gene_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  typedef stl_vector gene_vector;$/;"	t	class:STL_interface
ger	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline void ger(gene_matrix & A, gene_vector & X, gene_vector & Y, int N)$/;"	f	class:STL_interface
matrix_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline void matrix_from_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:STL_interface
matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline void matrix_matrix_product(const gene_matrix & A, const gene_matrix & B, gene_matrix & X, int N)$/;"	f	class:STL_interface
matrix_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline void matrix_to_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:STL_interface
matrix_vector_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline void matrix_vector_product(gene_matrix & A, gene_vector & B, gene_vector & X, int N)$/;"	f	class:STL_interface
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline std::string name( void )$/;"	f	class:STL_interface
norm_diff	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline real norm_diff(const stl_matrix & A, const stl_matrix & B)$/;"	f	class:STL_interface
norm_diff	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline real norm_diff(const stl_vector & A, const stl_vector & B)$/;"	f	class:STL_interface
real_type	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  typedef real real_type ;$/;"	t	class:STL_interface
stl_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  typedef std::vector<stl_vector > stl_matrix;$/;"	t	class:STL_interface
stl_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  typedef std::vector<real>  stl_vector;$/;"	t	class:STL_interface
symv	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline void symv(gene_matrix & A, gene_vector & B, gene_vector & X, int N)$/;"	f	class:STL_interface
syr2	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline void syr2(gene_matrix & A, gene_vector & B, gene_vector & X, int N)$/;"	f	class:STL_interface
trisolve_lower	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline void trisolve_lower(const gene_matrix & L, const gene_vector & B, gene_vector & X, int N){$/;"	f	class:STL_interface
vector_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline void vector_from_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:STL_interface
vector_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/STL_interface.hh	/^  static inline void vector_to_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:STL_interface
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL/main.cpp	/^int main()$/;"	f
STL_ALGO_INTERFACE_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	21;"	d
STL_algo_interface	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^class STL_algo_interface{$/;"	c
_coef	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^    real _coef;$/;"	m	class:STL_algo_interface::somme
_index	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^    int _index;$/;"	m	class:STL_algo_interface::vector_generator
_matrice	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^    const gene_matrix & _matrice;$/;"	m	class:STL_algo_interface::vector_generator
_vecteur	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^    const gene_vector & _vecteur;$/;"	m	class:STL_algo_interface::vector_generator
atv_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^  static inline void atv_product(const gene_matrix & A, const gene_vector & B, gene_vector & X, int N)$/;"	f	class:STL_algo_interface
axpy	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^  static inline void axpy(real coef, const gene_vector & X, gene_vector & Y, int N)$/;"	f	class:STL_algo_interface
copy_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^  static inline void copy_matrix(const gene_matrix & source, gene_matrix & cible, int N)$/;"	f	class:STL_algo_interface
copy_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^  static inline void copy_vector(const gene_vector & source, gene_vector & cible, int N){$/;"	f	class:STL_algo_interface
free_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^  static void free_matrix(gene_matrix & A, int N){}$/;"	f	class:STL_algo_interface
free_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^  static void free_vector(gene_vector & B){}$/;"	f	class:STL_algo_interface
gene_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^  typedef stl_matrix gene_matrix;$/;"	t	class:STL_algo_interface
gene_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^  typedef stl_vector gene_vector;$/;"	t	class:STL_algo_interface
matrix_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^  static inline void matrix_from_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:STL_algo_interface
matrix_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^  static inline void matrix_to_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:STL_algo_interface
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^  static inline std::string name( void )$/;"	f	class:STL_algo_interface
operator ()	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^    real operator()( void )$/;"	f	class:STL_algo_interface::vector_generator
operator ()	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^    real operator()(const real & val1, const real & val2)$/;"	f	class:STL_algo_interface::somme
real_type	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^  typedef real real_type ;$/;"	t	class:STL_algo_interface
somme	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^    somme(real coef):_coef(coef){};$/;"	f	class:STL_algo_interface::somme
somme	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^  class somme {$/;"	c	class:STL_algo_interface
stl_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^  typedef std::vector<stl_vector > stl_matrix;$/;"	t	class:STL_algo_interface
stl_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^  typedef std::vector<real>  stl_vector;$/;"	t	class:STL_algo_interface
vector_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^  static inline void vector_from_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:STL_algo_interface
vector_generator	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^    vector_generator(const gene_matrix & a_matrix, const gene_vector & a_vector):$/;"	f	class:STL_algo_interface::vector_generator
vector_generator	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^  class vector_generator {$/;"	c	class:STL_algo_interface
vector_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/STL_algo_interface.hh	/^  static inline void vector_to_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:STL_algo_interface
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/STL_algo/main.cpp	/^int main()$/;"	f
BLITZ_LU_SOLVE_INTERFACE_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_LU_solve_interface.hh	21;"	d
LU_factor	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_LU_solve_interface.hh	/^  inline static void LU_factor(gene_matrix & LU, Pivot_Vector & pivot, int N)$/;"	f	class:blitz_LU_solve_interface
LU_solve	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_LU_solve_interface.hh	/^  inline static void LU_solve(const gene_matrix & LU, const Pivot_Vector pivot, gene_vector &B, gene_vector X, int N)$/;"	f	class:blitz_LU_solve_interface
Pivot_Vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_LU_solve_interface.hh	/^  typedef blitz::Array<int,1> Pivot_Vector;$/;"	t	class:blitz_LU_solve_interface
blitz_LU_solve_interface	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_LU_solve_interface.hh	/^class blitz_LU_solve_interface : public blitz_interface<real>$/;"	c
free_Pivot_Vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_LU_solve_interface.hh	/^  inline static void free_Pivot_Vector(Pivot_Vector & pivot)$/;"	f	class:blitz_LU_solve_interface
gene_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_LU_solve_interface.hh	/^  typedef typename blitz_interface<real>::gene_matrix gene_matrix;$/;"	t	class:blitz_LU_solve_interface
gene_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_LU_solve_interface.hh	/^  typedef typename blitz_interface<real>::gene_vector gene_vector;$/;"	t	class:blitz_LU_solve_interface
matrix_matrix_product_sliced	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_LU_solve_interface.hh	/^  static inline real matrix_matrix_product_sliced(gene_matrix & A, int row, int col_start, int col_end, gene_matrix & B, int row_shift, int col )$/;"	f	class:blitz_LU_solve_interface
matrix_vector_product_sliced	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_LU_solve_interface.hh	/^  static inline real matrix_vector_product_sliced(const gene_matrix & A, gene_vector B, int row, int col_start, int col_end)$/;"	f	class:blitz_LU_solve_interface
new_Pivot_Vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_LU_solve_interface.hh	/^  inline static void new_Pivot_Vector(Pivot_Vector & pivot,int N)$/;"	f	class:blitz_LU_solve_interface
BLITZ_INTERFACE_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	22;"	d
aat_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  static inline void aat_product(const gene_matrix & A, gene_matrix & X, int N)$/;"	f	class:blitz_interface
ata_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  static inline void ata_product(const gene_matrix & A, gene_matrix & X, int N)$/;"	f	class:blitz_interface
atv_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  static inline void atv_product(gene_matrix & A, gene_vector & B, gene_vector & X, int N)$/;"	f	class:blitz_interface
axpy	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  static inline void axpy(const real coef, const gene_vector & X, gene_vector & Y, int N)$/;"	f	class:blitz_interface
blitz_interface	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^class blitz_interface{$/;"	c
copy_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  static inline void copy_matrix(const gene_matrix & source, gene_matrix & cible, int N){$/;"	f	class:blitz_interface
copy_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  static inline void copy_vector(const gene_vector & source, gene_vector & cible, int N){$/;"	f	class:blitz_interface
free_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  static void free_matrix(gene_matrix & A, int N){}$/;"	f	class:blitz_interface
free_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  static void free_vector(gene_vector & B){}$/;"	f	class:blitz_interface
gene_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  typedef blitz::Array<real, 2>  gene_matrix;$/;"	t	class:blitz_interface
gene_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  typedef blitz::Array<real, 1>  gene_vector;$/;"	t	class:blitz_interface
matrix_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  static inline void matrix_from_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:blitz_interface
matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  static inline void matrix_matrix_product(const gene_matrix & A, const gene_matrix & B, gene_matrix & X, int N)$/;"	f	class:blitz_interface
matrix_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  static inline void matrix_to_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:blitz_interface
matrix_vector_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  static inline void matrix_vector_product(gene_matrix & A, gene_vector & B, gene_vector & X, int N)$/;"	f	class:blitz_interface
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  static inline std::string name() { return "blitz"; }$/;"	f	class:blitz_interface
real_type	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  typedef real real_type ;$/;"	t	class:blitz_interface
stl_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  typedef std::vector<stl_vector > stl_matrix;$/;"	t	class:blitz_interface
stl_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  typedef std::vector<real>  stl_vector;$/;"	t	class:blitz_interface
vector_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  static inline void vector_from_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:blitz_interface
vector_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/blitz_interface.hh	/^  static inline void vector_to_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:blitz_interface
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/btl_blitz.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/btl_tiny_blitz.cpp	/^int main()$/;"	f
TINY_BLITZ_INTERFACE_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/tiny_blitz_interface.hh	21;"	d
axpy	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/tiny_blitz_interface.hh	/^  static inline void axpy(const real coef, const gene_vector & X, gene_vector & Y, int N){$/;"	f	class:tiny_blitz_interface
copy_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/tiny_blitz_interface.hh	/^  static inline void copy_matrix(const gene_matrix & source, gene_matrix & cible, int N){$/;"	f	class:tiny_blitz_interface
copy_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/tiny_blitz_interface.hh	/^  static inline void copy_vector(const gene_vector & source, gene_vector & cible, int N){$/;"	f	class:tiny_blitz_interface
free_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/tiny_blitz_interface.hh	/^  static void free_matrix(gene_matrix & A, int N){}$/;"	f	class:tiny_blitz_interface
free_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/tiny_blitz_interface.hh	/^  static void free_vector(gene_vector & B){}$/;"	f	class:tiny_blitz_interface
gene_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/tiny_blitz_interface.hh	/^  typedef TinyMatrix<real,SIZE,SIZE> gene_matrix;$/;"	t	class:tiny_blitz_interface
gene_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/tiny_blitz_interface.hh	/^  typedef TinyVector<real,SIZE> gene_vector;$/;"	t	class:tiny_blitz_interface
matrix_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/tiny_blitz_interface.hh	/^  static inline void matrix_from_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:tiny_blitz_interface
matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/tiny_blitz_interface.hh	/^  static inline void matrix_matrix_product(const gene_matrix & A, const gene_matrix & B, gene_matrix & X, int N){$/;"	f	class:tiny_blitz_interface
matrix_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/tiny_blitz_interface.hh	/^  static inline void matrix_to_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:tiny_blitz_interface
matrix_vector_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/tiny_blitz_interface.hh	/^  static inline void matrix_vector_product(gene_matrix & A, gene_vector & B, gene_vector & X, int N){$/;"	f	class:tiny_blitz_interface
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/tiny_blitz_interface.hh	/^  static inline std::string name() { return "tiny_blitz"; }$/;"	f	class:tiny_blitz_interface
real_type	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/tiny_blitz_interface.hh	/^  typedef real real_type ;$/;"	t	class:tiny_blitz_interface
stl_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/tiny_blitz_interface.hh	/^  typedef std::vector<stl_vector > stl_matrix;$/;"	t	class:tiny_blitz_interface
stl_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/tiny_blitz_interface.hh	/^  typedef std::vector<real>  stl_vector;$/;"	t	class:tiny_blitz_interface
tiny_blitz_interface	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/tiny_blitz_interface.hh	/^class tiny_blitz_interface$/;"	c
vector_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/tiny_blitz_interface.hh	/^  static inline void vector_from_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:tiny_blitz_interface
vector_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/blitz/tiny_blitz_interface.hh	/^  static inline void vector_to_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:tiny_blitz_interface
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/btl_tiny_eigen3.cpp	/^int main()$/;"	f
EIGEN3_INTERFACE_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	19;"	d
IsFixedSize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  enum {IsFixedSize = (SIZE!=Dynamic)};$/;"	e	enum:eigen3_interface::<anonymous>
aat_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static inline void aat_product(const gene_matrix & A, gene_matrix & X, int N){$/;"	f	class:eigen3_interface
ata_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static inline void ata_product(const gene_matrix & A, gene_matrix & X, int N){$/;"	f	class:eigen3_interface
atv_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static inline void atv_product(gene_matrix & A, gene_vector & B, gene_vector & X, int N){$/;"	f	class:eigen3_interface
axpby	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static inline void axpby(real a, const gene_vector & X, real b, gene_vector & Y, int N){$/;"	f	class:eigen3_interface
axpy	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static inline void axpy(real coef, const gene_vector & X, gene_vector & Y, int N){$/;"	f	class:eigen3_interface
cholesky	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static inline void cholesky(const gene_matrix & X, gene_matrix & C, int N){$/;"	f	class:eigen3_interface
copy_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static EIGEN_DONT_INLINE void copy_matrix(const gene_matrix & source, gene_matrix & cible, int N){$/;"	f	class:eigen3_interface
copy_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static EIGEN_DONT_INLINE void copy_vector(const gene_vector & source, gene_vector & cible, int N){$/;"	f	class:eigen3_interface
eigen3_interface	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^class eigen3_interface$/;"	c
free_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static void free_matrix(gene_matrix & A, int N) {}$/;"	f	class:eigen3_interface
free_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static void free_vector(gene_vector & B) {}$/;"	f	class:eigen3_interface
gene_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  typedef Eigen::Matrix<real,SIZE,SIZE> gene_matrix;$/;"	t	class:eigen3_interface
gene_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  typedef Eigen::Matrix<real,SIZE,1> gene_vector;$/;"	t	class:eigen3_interface
ger	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static EIGEN_DONT_INLINE void ger(gene_matrix & A,  gene_vector & X, gene_vector & Y, int N){$/;"	f	class:eigen3_interface
hessenberg	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static inline void hessenberg(const gene_matrix & X, gene_matrix & C, int N){$/;"	f	class:eigen3_interface
lu_decomp	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static inline void lu_decomp(const gene_matrix & X, gene_matrix & C, int N){$/;"	f	class:eigen3_interface
matrix_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static BTL_DONT_INLINE void matrix_from_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:eigen3_interface
matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static inline void matrix_matrix_product(const gene_matrix & A, const gene_matrix & B, gene_matrix & X, int N){$/;"	f	class:eigen3_interface
matrix_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static BTL_DONT_INLINE  void matrix_to_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:eigen3_interface
matrix_vector_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static inline void matrix_vector_product(const gene_matrix & A, const gene_vector & B, gene_vector & X, int N){$/;"	f	class:eigen3_interface
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static inline std::string name( void )$/;"	f	class:eigen3_interface
partial_lu_decomp	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static inline void partial_lu_decomp(const gene_matrix & X, gene_matrix & C, int N){$/;"	f	class:eigen3_interface
real_type	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  typedef real real_type;$/;"	t	class:eigen3_interface
rot	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static EIGEN_DONT_INLINE void rot(gene_vector & A,  gene_vector & B, real c, real s, int N){$/;"	f	class:eigen3_interface
stl_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  typedef std::vector<stl_vector> stl_matrix;$/;"	t	class:eigen3_interface
stl_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  typedef std::vector<real> stl_vector;$/;"	t	class:eigen3_interface
symv	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static inline void symv(const gene_matrix & A, const gene_vector & B, gene_vector & X, int N){$/;"	f	class:eigen3_interface
syr2	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static EIGEN_DONT_INLINE void syr2(gene_matrix & A,  gene_vector & X, gene_vector & Y, int N){$/;"	f	class:eigen3_interface
transposed_matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static inline void transposed_matrix_matrix_product(const gene_matrix & A, const gene_matrix & B, gene_matrix & X, int N){$/;"	f	class:eigen3_interface
triassign	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  template<typename Dest, typename Src> static void triassign(Dest& dst, const Src& src)$/;"	f	class:eigen3_interface
tridiagonalization	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static inline void tridiagonalization(const gene_matrix & X, gene_matrix & C, int N){$/;"	f	class:eigen3_interface
trisolve_lower	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static inline void trisolve_lower(const gene_matrix & L, const gene_vector& B, gene_vector& X, int N){$/;"	f	class:eigen3_interface
trisolve_lower_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static inline void trisolve_lower_matrix(const gene_matrix & L, const gene_matrix& B, gene_matrix& X, int N){$/;"	f	class:eigen3_interface
trmm	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static inline void trmm(const gene_matrix & L, const gene_matrix& B, gene_matrix& X, int N){$/;"	f	class:eigen3_interface
vector_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static BTL_DONT_INLINE  void vector_from_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:eigen3_interface
vector_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/eigen3_interface.hh	/^  static BTL_DONT_INLINE  void vector_to_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:eigen3_interface
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/main_adv.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/main_linear.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/main_matmat.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/eigen3/main_vecmat.cpp	/^int main()$/;"	f
10	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/daat.f	/^            R=R+A(I,K)*A(J,K)$/;"	l	subroutine:DAAT	file:
20	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/daat.f	/^         X(I,J)=R$/;"	l	subroutine:DAAT	file:
DAAT	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/daat.f	/^      SUBROUTINE DAAT(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/data.f	/^            R=R+A(K,I)*A(K,J)$/;"	l	file:
20	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/data.f	/^         X(I,J)=R$/;"	l	file:
A	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/data.f	/^      REAL/;"	v
R	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/data.f	/^      RE/;"	v
X	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/data.f	/^      REAL*8 A(N,N),X(/;"	v
10	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/daxpy.f	/^      Y(I)=Y(I)+A*X(I)$/;"	l	subroutine:DAXPYF	file:
DAXPYF	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/daxpy.f	/^      SUBROUTINE DAXPYF(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/dmxm.f	/^            R=R+A(I,K)*B(K,J)$/;"	l	subroutine:DMXM	file:
20	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/dmxm.f	/^         C(I,J)=R$/;"	l	subroutine:DMXM	file:
DMXM	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/dmxm.f	/^      SUBROUTINE DMXM(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/dmxv.f	/^   20 CONTINUE$/;"	l	subroutine:DMXV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/dmxv.f	/^      R(I)=R(I)+A(I,J)*S$/;"	l	subroutine:DMXV	file:
5	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/dmxv.f	/^      R(I)=0$/;"	l	subroutine:DMXV	file:
DMXV	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/dmxv.f	/^      SUBROUTINE DMXV(/;"	s
F77_INTERFACE_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface.hh	21;"	d
aat_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface.hh	/^  static inline void aat_product(gene_matrix & A, gene_matrix & X, int N)$/;"	f	class:f77_interface
ata_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface.hh	/^  static inline void ata_product(gene_matrix & A, gene_matrix & X, int N)$/;"	f	class:f77_interface
axpy	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface.hh	/^  static  inline void axpy(float coef, const gene_vector & X, gene_vector & Y, int N)$/;"	f	class:f77_interface
axpy	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface.hh	/^  static  inline void axpy(real coef, const gene_vector & X, gene_vector & Y, int N)$/;"	f	class:f77_interface
f77_interface	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface.hh	/^class f77_interface : public f77_interface_base<real>$/;"	c
f77_interface	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface.hh	/^class f77_interface<float> : public f77_interface_base<float>$/;"	c
gene_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface.hh	/^  typedef typename f77_interface_base<real>::gene_matrix gene_matrix;$/;"	t	class:f77_interface
gene_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface.hh	/^  typedef typename f77_interface_base<real>::gene_vector gene_vector;$/;"	t	class:f77_interface
matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface.hh	/^  static inline void matrix_matrix_product(gene_matrix & A, gene_matrix & B, gene_matrix & X, int N)$/;"	f	class:f77_interface
matrix_vector_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface.hh	/^  static inline void matrix_vector_product(gene_matrix & A, gene_vector & B, gene_vector & X, int N)$/;"	f	class:f77_interface
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface.hh	/^  static inline std::string name( void )$/;"	f	class:f77_interface
F77_INTERFACE_BASE_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface_base.hh	21;"	d
copy_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface_base.hh	/^  static inline void copy_matrix(const gene_matrix & source, gene_matrix & cible, int N){$/;"	f	class:f77_interface_base
copy_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface_base.hh	/^  static inline void copy_vector(const gene_vector & source, gene_vector & cible, int N){$/;"	f	class:f77_interface_base
f77_interface_base	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface_base.hh	/^class f77_interface_base{$/;"	c
free_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface_base.hh	/^  static void free_matrix(gene_matrix & A, int N){$/;"	f	class:f77_interface_base
free_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface_base.hh	/^  static void free_vector(gene_vector & B){$/;"	f	class:f77_interface_base
gene_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface_base.hh	/^  typedef real * gene_matrix;$/;"	t	class:f77_interface_base
gene_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface_base.hh	/^  typedef real * gene_vector;$/;"	t	class:f77_interface_base
matrix_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface_base.hh	/^  static inline void matrix_from_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:f77_interface_base
matrix_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface_base.hh	/^  static inline void matrix_to_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:f77_interface_base
real_type	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface_base.hh	/^  typedef real real_type ;$/;"	t	class:f77_interface_base
stl_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface_base.hh	/^  typedef std::vector<stl_vector > stl_matrix;$/;"	t	class:f77_interface_base
stl_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface_base.hh	/^  typedef std::vector<real>  stl_vector;$/;"	t	class:f77_interface_base
vector_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface_base.hh	/^  static inline void vector_from_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:f77_interface_base
vector_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/f77_interface_base.hh	/^  static inline void vector_to_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:f77_interface_base
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/main.cpp	/^int main()$/;"	f
10	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/saat.f	/^            R=R+A(I,K)*A(J,K)$/;"	l	subroutine:SAAT	file:
20	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/saat.f	/^         X(I,J)=R$/;"	l	subroutine:SAAT	file:
SAAT	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/saat.f	/^      SUBROUTINE SAAT(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/sata.f	/^            R=R+A(K,I)*A(K,J)$/;"	l	subroutine:SATA	file:
20	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/sata.f	/^         X(I,J)=R$/;"	l	subroutine:SATA	file:
SATA	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/sata.f	/^      SUBROUTINE SATA(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/saxpy.f	/^      Y(I)=Y(I)+A*X(I)$/;"	l	subroutine:SAXPYF	file:
SAXPYF	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/saxpy.f	/^      SUBROUTINE SAXPYF(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/smxm.f	/^            R=R+A(I,K)*B(K,J)$/;"	l	subroutine:SMXM	file:
20	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/smxm.f	/^         C(I,J)=R$/;"	l	subroutine:SMXM	file:
SMXM	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/smxm.f	/^      SUBROUTINE SMXM(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/smxv.f	/^   20 CONTINUE$/;"	l	subroutine:SMXV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/smxv.f	/^      R(I)=R(I)+A(I,J)*S$/;"	l	subroutine:SMXV	file:
5	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/smxv.f	/^      R(I)=0$/;"	l	subroutine:SMXV	file:
SMXV	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/smxv.f	/^      SUBROUTINE SMXV(/;"	s
TEST_INTERFACE_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/test_interface.hh	21;"	d
test_interface	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/f77/test_interface.hh	/^void test_interface( void ){$/;"	f
BLITZ_LU_SOLVE_INTERFACE_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_LU_solve_interface.hh	21;"	d
LU_factor	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_LU_solve_interface.hh	/^  inline static void LU_factor(gene_matrix & LU, Pivot_Vector & pivot, int N)$/;"	f	class:blitz_LU_solve_interface
LU_solve	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_LU_solve_interface.hh	/^  inline static void LU_solve(const gene_matrix & LU, const Pivot_Vector pivot, gene_vector &B, gene_vector X, int N)$/;"	f	class:blitz_LU_solve_interface
Pivot_Vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_LU_solve_interface.hh	/^  typedef blitz::Array<int,1> Pivot_Vector;$/;"	t	class:blitz_LU_solve_interface
blitz_LU_solve_interface	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_LU_solve_interface.hh	/^class blitz_LU_solve_interface : public blitz_interface<real>$/;"	c
free_Pivot_Vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_LU_solve_interface.hh	/^  inline static void free_Pivot_Vector(Pivot_Vector & pivot)$/;"	f	class:blitz_LU_solve_interface
gene_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_LU_solve_interface.hh	/^  typedef typename blitz_interface<real>::gene_matrix gene_matrix;$/;"	t	class:blitz_LU_solve_interface
gene_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_LU_solve_interface.hh	/^  typedef typename blitz_interface<real>::gene_vector gene_vector;$/;"	t	class:blitz_LU_solve_interface
matrix_matrix_product_sliced	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_LU_solve_interface.hh	/^  static inline real matrix_matrix_product_sliced(gene_matrix & A, int row, int col_start, int col_end, gene_matrix & B, int row_shift, int col )$/;"	f	class:blitz_LU_solve_interface
matrix_vector_product_sliced	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_LU_solve_interface.hh	/^  static inline real matrix_vector_product_sliced(const gene_matrix & A, gene_vector B, int row, int col_start, int col_end)$/;"	f	class:blitz_LU_solve_interface
new_Pivot_Vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_LU_solve_interface.hh	/^  inline static void new_Pivot_Vector(Pivot_Vector & pivot,int N)$/;"	f	class:blitz_LU_solve_interface
GMM_INTERFACE_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	19;"	d
aat_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static inline void aat_product(const gene_matrix & A, gene_matrix & X, int N){$/;"	f	class:gmm_interface
ata_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static inline void ata_product(const gene_matrix & A, gene_matrix & X, int N){$/;"	f	class:gmm_interface
atv_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static inline void atv_product(gene_matrix & A, gene_vector & B, gene_vector & X, int N){$/;"	f	class:gmm_interface
axpby	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static inline void axpby(real a, const gene_vector & X, real b, gene_vector & Y, int N){$/;"	f	class:gmm_interface
axpy	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static inline void axpy(const real coef, const gene_vector & X, gene_vector & Y, int N){$/;"	f	class:gmm_interface
copy_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static inline void copy_matrix(const gene_matrix & source, gene_matrix & cible, int N){$/;"	f	class:gmm_interface
copy_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static inline void copy_vector(const gene_vector & source, gene_vector & cible, int N){$/;"	f	class:gmm_interface
free_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static void free_matrix(gene_matrix & A, int N){$/;"	f	class:gmm_interface
free_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static void free_vector(gene_vector & B){$/;"	f	class:gmm_interface
gene_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  typedef gmm::dense_matrix<real> gene_matrix;$/;"	t	class:gmm_interface
gene_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  typedef stl_vector gene_vector;$/;"	t	class:gmm_interface
gmm_interface	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^class gmm_interface {$/;"	c
hessenberg	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static inline void hessenberg(const gene_matrix & X, gene_matrix & R, int N){$/;"	f	class:gmm_interface
lu_decomp	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static inline void lu_decomp(const gene_matrix & X, gene_matrix & R, int N){$/;"	f	class:gmm_interface
matrix_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static inline void matrix_from_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:gmm_interface
matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static inline void matrix_matrix_product(const gene_matrix & A, const gene_matrix & B, gene_matrix & X, int N){$/;"	f	class:gmm_interface
matrix_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static inline void matrix_to_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:gmm_interface
matrix_vector_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static inline void matrix_vector_product(gene_matrix & A, gene_vector & B, gene_vector & X, int N){$/;"	f	class:gmm_interface
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static inline std::string name( void )$/;"	f	class:gmm_interface
real_type	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  typedef real real_type ;$/;"	t	class:gmm_interface
stl_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  typedef std::vector<stl_vector > stl_matrix;$/;"	t	class:gmm_interface
stl_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  typedef std::vector<real>  stl_vector;$/;"	t	class:gmm_interface
transposed_matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static inline void transposed_matrix_matrix_product(const gene_matrix & A, const gene_matrix & B, gene_matrix & X, int N){$/;"	f	class:gmm_interface
tridiagonalization	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static inline void tridiagonalization(const gene_matrix & X, gene_matrix & R, int N){$/;"	f	class:gmm_interface
trisolve_lower	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static inline void trisolve_lower(const gene_matrix & L, const gene_vector& B, gene_vector & X, int N){$/;"	f	class:gmm_interface
vector_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static inline void vector_from_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:gmm_interface
vector_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/gmm_interface.hh	/^  static inline void vector_to_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:gmm_interface
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/gmm/main.cpp	/^int main()$/;"	f
HAND_VEC_INTERFACE_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/hand_vec/hand_vec_interface.hh	20;"	d
Packet	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/hand_vec/hand_vec_interface.hh	/^  typedef typename internal::packet_traits<real>::type Packet;$/;"	t	class:hand_vec_interface
PacketSize	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/hand_vec/hand_vec_interface.hh	/^  static const int PacketSize = internal::packet_traits<real>::size;$/;"	m	class:hand_vec_interface
atv_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/hand_vec/hand_vec_interface.hh	/^    static inline void atv_product(const gene_matrix & A, const gene_vector & B, gene_vector & X, int N)$/;"	f	class:hand_vec_interface
axpy	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/hand_vec/hand_vec_interface.hh	/^  static inline void axpy(real coef, const gene_vector & X, gene_vector & Y, int N){$/;"	f	class:hand_vec_interface
free_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/hand_vec/hand_vec_interface.hh	/^  static void free_matrix(gene_matrix & A, int N){$/;"	f	class:hand_vec_interface
free_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/hand_vec/hand_vec_interface.hh	/^  static void free_vector(gene_vector & B){$/;"	f	class:hand_vec_interface
gene_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/hand_vec/hand_vec_interface.hh	/^  typedef typename f77_interface_base<real>::gene_matrix gene_matrix;$/;"	t	class:hand_vec_interface
gene_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/hand_vec/hand_vec_interface.hh	/^  typedef typename f77_interface_base<real>::gene_vector gene_vector;$/;"	t	class:hand_vec_interface
hand_vec_interface	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/hand_vec/hand_vec_interface.hh	/^class hand_vec_interface : public f77_interface_base<real> {$/;"	c
matrix_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/hand_vec/hand_vec_interface.hh	/^  static inline void matrix_from_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:hand_vec_interface
matrix_vector_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/hand_vec/hand_vec_interface.hh	/^  static inline void matrix_vector_product(const gene_matrix & A, const gene_vector & B, gene_vector & X, int N)$/;"	f	class:hand_vec_interface
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/hand_vec/hand_vec_interface.hh	/^  static inline std::string name() {$/;"	f	class:hand_vec_interface
stl_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/hand_vec/hand_vec_interface.hh	/^  typedef typename f77_interface_base<real>::stl_matrix stl_matrix;$/;"	t	class:hand_vec_interface
stl_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/hand_vec/hand_vec_interface.hh	/^  typedef typename f77_interface_base<real>::stl_vector stl_vector;$/;"	t	class:hand_vec_interface
symv	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/hand_vec/hand_vec_interface.hh	/^  static inline void symv(const gene_matrix & A, const gene_vector & B, gene_vector & X, int N)$/;"	f	class:hand_vec_interface
vector_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/hand_vec/hand_vec_interface.hh	/^  static inline void vector_from_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:hand_vec_interface
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/hand_vec/main.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/main.cpp	/^int main()$/;"	f
BLITZ_LU_SOLVE_INTERFACE_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_LU_solve_interface.hh	21;"	d
LU_factor	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_LU_solve_interface.hh	/^  inline static void LU_factor(gene_matrix & LU, Pivot_Vector & pivot, int N)$/;"	f	class:blitz_LU_solve_interface
LU_solve	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_LU_solve_interface.hh	/^  inline static void LU_solve(const gene_matrix & LU, const Pivot_Vector pivot, gene_vector &B, gene_vector X, int N)$/;"	f	class:blitz_LU_solve_interface
Pivot_Vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_LU_solve_interface.hh	/^  typedef blitz::Array<int,1> Pivot_Vector;$/;"	t	class:blitz_LU_solve_interface
blitz_LU_solve_interface	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_LU_solve_interface.hh	/^class blitz_LU_solve_interface : public blitz_interface<real>$/;"	c
free_Pivot_Vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_LU_solve_interface.hh	/^  inline static void free_Pivot_Vector(Pivot_Vector & pivot)$/;"	f	class:blitz_LU_solve_interface
gene_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_LU_solve_interface.hh	/^  typedef typename blitz_interface<real>::gene_matrix gene_matrix;$/;"	t	class:blitz_LU_solve_interface
gene_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_LU_solve_interface.hh	/^  typedef typename blitz_interface<real>::gene_vector gene_vector;$/;"	t	class:blitz_LU_solve_interface
matrix_matrix_product_sliced	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_LU_solve_interface.hh	/^  static inline real matrix_matrix_product_sliced(gene_matrix & A, int row, int col_start, int col_end, gene_matrix & B, int row_shift, int col )$/;"	f	class:blitz_LU_solve_interface
matrix_vector_product_sliced	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_LU_solve_interface.hh	/^  static inline real matrix_vector_product_sliced(const gene_matrix & A, gene_vector B, int row, int col_start, int col_end)$/;"	f	class:blitz_LU_solve_interface
new_Pivot_Vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_LU_solve_interface.hh	/^  inline static void new_Pivot_Vector(Pivot_Vector & pivot,int N)$/;"	f	class:blitz_LU_solve_interface
MTL4_INTERFACE_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	19;"	d
aat_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  static inline void aat_product(const gene_matrix & A, gene_matrix & X, int N){$/;"	f	class:mtl4_interface
ata_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  static inline void ata_product(const gene_matrix & A, gene_matrix & X, int N){$/;"	f	class:mtl4_interface
atv_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  static inline void atv_product(gene_matrix & A, gene_vector & B, gene_vector & X, int N){$/;"	f	class:mtl4_interface
axpby	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  static inline void axpby(real a, const gene_vector & X, real b, gene_vector & Y, int N){$/;"	f	class:mtl4_interface
axpy	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  static inline void axpy(const real coef, const gene_vector & X, gene_vector & Y, int N){$/;"	f	class:mtl4_interface
copy_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  static inline void copy_matrix(const gene_matrix & source, gene_matrix & cible, int N){$/;"	f	class:mtl4_interface
copy_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  static inline void copy_vector(const gene_vector & source, gene_vector & cible, int N){$/;"	f	class:mtl4_interface
free_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  static void free_matrix(gene_matrix & A, int N){$/;"	f	class:mtl4_interface
free_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  static void free_vector(gene_vector & B){$/;"	f	class:mtl4_interface
gene_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  typedef mtl::dense2D<real, mtl::matrix::parameters<mtl::tag::col_major> > gene_matrix;$/;"	t	class:mtl4_interface
gene_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  typedef mtl::dense_vector<real>  gene_vector;$/;"	t	class:mtl4_interface
matrix_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  static inline void matrix_from_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:mtl4_interface
matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  static inline void matrix_matrix_product(const gene_matrix & A, const gene_matrix & B, gene_matrix & X, int N){$/;"	f	class:mtl4_interface
matrix_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  static inline void matrix_to_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:mtl4_interface
matrix_vector_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  static inline void matrix_vector_product(gene_matrix & A, gene_vector & B, gene_vector & X, int N){$/;"	f	class:mtl4_interface
mtl4_interface	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^class mtl4_interface {$/;"	c
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  static inline std::string name() { return "mtl4"; }$/;"	f	class:mtl4_interface
real_type	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  typedef real real_type ;$/;"	t	class:mtl4_interface
stl_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  typedef std::vector<stl_vector > stl_matrix;$/;"	t	class:mtl4_interface
stl_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  typedef std::vector<real>  stl_vector;$/;"	t	class:mtl4_interface
transposed_matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  static inline void transposed_matrix_matrix_product(const gene_matrix & A, const gene_matrix & B, gene_matrix & X, int N){$/;"	f	class:mtl4_interface
trisolve_lower	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  static inline void trisolve_lower(const gene_matrix & L, const gene_vector& B, gene_vector & X, int N){$/;"	f	class:mtl4_interface
vector_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  static inline void vector_from_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:mtl4_interface
vector_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/mtl4/mtl4_interface.hh	/^  static inline void vector_to_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:mtl4_interface
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/main.cpp	/^int main()$/;"	f
TVMET_INTERFACE_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	21;"	d
atv_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	/^  static inline void atv_product(gene_matrix & A, gene_vector & B, gene_vector & X, int N){$/;"	f	class:tvmet_interface
axpy	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	/^  static inline void axpy(const real coef, const gene_vector & X, gene_vector & Y, int N){$/;"	f	class:tvmet_interface
copy_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	/^  static inline void copy_matrix(const gene_matrix & source, gene_matrix & cible, int N){$/;"	f	class:tvmet_interface
copy_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	/^  static inline void copy_vector(const gene_vector & source, gene_vector & cible, int N){$/;"	f	class:tvmet_interface
free_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	/^  static void free_matrix(gene_matrix & A, int N){}$/;"	f	class:tvmet_interface
free_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	/^  static void free_vector(gene_vector & B){}$/;"	f	class:tvmet_interface
gene_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	/^  typedef Matrix<real,SIZE,SIZE> gene_matrix;$/;"	t	class:tvmet_interface
gene_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	/^  typedef Vector<real,SIZE> gene_vector;$/;"	t	class:tvmet_interface
matrix_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	/^  static inline void matrix_from_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:tvmet_interface
matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	/^  static inline void matrix_matrix_product(const gene_matrix & A, const gene_matrix & B, gene_matrix & X, int N){$/;"	f	class:tvmet_interface
matrix_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	/^  static inline void matrix_to_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:tvmet_interface
matrix_vector_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	/^  static inline void matrix_vector_product(gene_matrix & A, gene_vector & B, gene_vector & X, int N){$/;"	f	class:tvmet_interface
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	/^  static inline std::string name() { return "tiny_tvmet"; }$/;"	f	class:tvmet_interface
real_type	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	/^  typedef real real_type ;$/;"	t	class:tvmet_interface
stl_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	/^  typedef std::vector<stl_vector > stl_matrix;$/;"	t	class:tvmet_interface
stl_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	/^  typedef std::vector<real>  stl_vector;$/;"	t	class:tvmet_interface
tvmet_interface	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	/^class tvmet_interface{$/;"	c
vector_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	/^  static inline void vector_from_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:tvmet_interface
vector_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/tvmet/tvmet_interface.hh	/^  static inline void vector_to_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:tvmet_interface
main	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/main.cpp	/^int main()$/;"	f
UBLAS_INTERFACE_HH	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	21;"	d
aat_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static inline void aat_product(gene_matrix & A, gene_matrix & X, int N){$/;"	f	class:ublas_interface
ata_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static inline void ata_product(gene_matrix & A, gene_matrix & X, int N){$/;"	f	class:ublas_interface
atv_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static inline void atv_product(gene_matrix & A, gene_vector & B, gene_vector & X, int N){$/;"	f	class:ublas_interface
axpby	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static inline void axpby(real a, const gene_vector & X, real b, gene_vector & Y, int N){$/;"	f	class:ublas_interface
axpy	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static inline void axpy(const real coef, const gene_vector & X, gene_vector & Y, int N){$/;"	f	class:ublas_interface
axpy_slow	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static inline void axpy_slow(const real coef, const gene_vector & X, gene_vector & Y, int N){$/;"	f	class:ublas_interface
copy_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static inline void copy_matrix(const gene_matrix & source, gene_matrix & cible, int N){$/;"	f	class:ublas_interface
copy_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static inline void copy_vector(const gene_vector & source, gene_vector & cible, int N){$/;"	f	class:ublas_interface
free_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static void free_matrix(gene_matrix & A, int N) {}$/;"	f	class:ublas_interface
free_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static void free_vector(gene_vector & B) {}$/;"	f	class:ublas_interface
gene_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  typedef typename boost::numeric::ublas::matrix<real,boost::numeric::ublas::column_major> gene_matrix;$/;"	t	class:ublas_interface
gene_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  typedef typename boost::numeric::ublas::vector<real> gene_vector;$/;"	t	class:ublas_interface
matrix_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static inline void matrix_from_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:ublas_interface
matrix_matrix_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static inline void matrix_matrix_product(gene_matrix & A, gene_matrix & B, gene_matrix & X, int N){$/;"	f	class:ublas_interface
matrix_matrix_product_slow	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static inline void matrix_matrix_product_slow(gene_matrix & A, gene_matrix & B, gene_matrix & X, int N){$/;"	f	class:ublas_interface
matrix_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static inline void matrix_to_stl(gene_matrix & A, stl_matrix & A_stl){$/;"	f	class:ublas_interface
matrix_vector_product	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static inline void matrix_vector_product(gene_matrix & A, gene_vector & B, gene_vector & X, int N){$/;"	f	class:ublas_interface
matrix_vector_product_slow	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static inline void matrix_vector_product_slow(gene_matrix & A, gene_vector & B, gene_vector & X, int N){$/;"	f	class:ublas_interface
name	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static inline std::string name( void ) { return "ublas"; }$/;"	f	class:ublas_interface
real_type	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  typedef real real_type ;$/;"	t	class:ublas_interface
stl_matrix	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  typedef std::vector<stl_vector> stl_matrix;$/;"	t	class:ublas_interface
stl_vector	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  typedef std::vector<real> stl_vector;$/;"	t	class:ublas_interface
trisolve_lower	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static inline void trisolve_lower(const gene_matrix & L, const gene_vector& B, gene_vector & X, int N){$/;"	f	class:ublas_interface
ublas_interface	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^class ublas_interface{$/;"	c
vector_from_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static inline void vector_from_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:ublas_interface
vector_to_stl	tags/before-github-sync/EXTERNAL/eigen3/bench/btl/libs/ublas/ublas_interface.hh	/^  static inline void vector_to_stl(gene_vector & B, stl_vector & B_stl){$/;"	f	class:ublas_interface
DUMP_CPUID	tags/before-github-sync/EXTERNAL/eigen3/bench/check_cache_queries.cpp	9;"	d	file:
EIGEN_INTERNAL_DEBUG_CACHE_QUERY	tags/before-github-sync/EXTERNAL/eigen3/bench/check_cache_queries.cpp	2;"	d	file:
main	tags/before-github-sync/EXTERNAL/eigen3/bench/check_cache_queries.cpp	/^int main()$/;"	f
computeRoots	tags/before-github-sync/EXTERNAL/eigen3/bench/eig33.cpp	/^inline void computeRoots(const Matrix& m, Roots& roots)$/;"	f
eigen33	tags/before-github-sync/EXTERNAL/eigen3/bench/eig33.cpp	/^void eigen33(const Matrix& mat, Matrix& evecs, Vector& evals)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/eig33.cpp	/^int main()$/;"	f
A	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^typedef Matrix<RealScalar,Dynamic,Dynamic> A;$/;"	t	file:
B	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^typedef Matrix<\/*Real*\/Scalar,Dynamic,Dynamic> B;$/;"	t	file:
C	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^typedef Matrix<Scalar,Dynamic,Dynamic> C;$/;"	t	file:
Dim	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^  enum {Dim = T::Dim};$/;"	e	enum:ToRotationMatrixWrapper::<anonymous>	file:
Dim	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^struct get_dim<Matrix<S,R,C,O,MR,MC> > { enum { Dim = R }; };$/;"	e	enum:get_dim::<anonymous>	file:
Dim	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^template<typename T> struct get_dim { enum { Dim = T::Dim }; };$/;"	e	enum:get_dim::<anonymous>	file:
M	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^typedef Matrix<RealScalar,Dynamic,Dynamic> M;$/;"	t	file:
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^typedef NumTraits<Scalar>::Real RealScalar;$/;"	t	file:
SCALAR	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	10;"	d	file:
SIZE	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	14;"	d	file:
Scalar	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^  typedef typename T::Scalar Scalar;$/;"	t	struct:ToRotationMatrixWrapper	file:
Scalar	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^typedef SCALAR Scalar;$/;"	t	file:
ToRotationMatrixWrapper	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^  ToRotationMatrixWrapper(const T& o) : object(o) {}$/;"	f	struct:ToRotationMatrixWrapper
ToRotationMatrixWrapper	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^template<typename T> struct ToRotationMatrixWrapper$/;"	s	file:
bench	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^EIGEN_DONT_INLINE void bench(const std::string& msg, const Transformation& t)$/;"	f
bench_impl	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^struct bench_impl$/;"	s	file:
bench_impl	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^struct bench_impl<Transformation,0>$/;"	s	file:
get_dim	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^struct get_dim<Matrix<S,R,C,O,MR,MC> > { enum { Dim = R }; };$/;"	s	file:
get_dim	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^template<typename T> struct get_dim { enum { Dim = T::Dim }; };$/;"	s	file:
main	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^int main(int argc, char ** argv)$/;"	f
object	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^  T object;$/;"	m	struct:ToRotationMatrixWrapper	file:
run	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^  static EIGEN_DONT_INLINE void run(const Transformation& t)$/;"	f	struct:bench_impl
run	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^  static EIGEN_DONT_INLINE void run(const Transformation&) {}$/;"	f	struct:bench_impl
transform	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^EIGEN_DONT_INLINE void transform(const Quaternion<Scalar>& t, Data& data)$/;"	f
transform	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^EIGEN_DONT_INLINE void transform(const ToRotationMatrixWrapper<QType>& t, Data& data)$/;"	f
transform	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^EIGEN_DONT_INLINE void transform(const Transform<Scalar,Dim,Projective>& t, Data& data)$/;"	f
transform	tags/before-github-sync/EXTERNAL/eigen3/bench/geometry.cpp	/^EIGEN_DONT_INLINE void transform(const Transformation& t, Data& data)$/;"	f
END	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	9;"	d	file:
alt_prod	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^template<int M, int N,int K> struct alt_prod$/;"	s	file:
bench_prod	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^EIGEN_DONT_INLINE void bench_prod()$/;"	f
loop_on_k	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^struct loop_on_k$/;"	s	file:
loop_on_k	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^struct loop_on_k<M,N,END> { static void run(){} };$/;"	s	file:
loop_on_m	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^struct loop_on_m$/;"	s	file:
loop_on_m	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^struct loop_on_m<END,N,K> { static void run(){} };$/;"	s	file:
loop_on_n	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^struct loop_on_n$/;"	s	file:
loop_on_n	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^struct loop_on_n<M,END,K,Scalar,Mode> { static void run(){} };$/;"	s	file:
main	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^int main()$/;"	f
map_size	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^template<>  struct map_size<10> { enum { ret = 20 }; };$/;"	s	file:
map_size	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^template<>  struct map_size<11> { enum { ret = 50 }; };$/;"	s	file:
map_size	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^template<>  struct map_size<12> { enum { ret = 100 }; };$/;"	s	file:
map_size	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^template<>  struct map_size<13> { enum { ret = 300 }; };$/;"	s	file:
map_size	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^template<int S> struct map_size { enum { ret = S }; };$/;"	s	file:
print_mode	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^void print_mode(int mode)$/;"	f
print_n	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^template<> struct print_n<END> { static void run(){} };$/;"	s	file:
print_n	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^template<int N> struct print_n$/;"	s	file:
prod	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^EIGEN_DONT_INLINE void prod(const Lhs& a, const Rhs& b, Res& c)$/;"	f
ret	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^    ret = M==1 && N==1 ? InnerProduct$/;"	e	enum:alt_prod::<anonymous>	file:
ret	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^template<>  struct map_size<10> { enum { ret = 20 }; };$/;"	e	enum:map_size::<anonymous>	file:
ret	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^template<>  struct map_size<11> { enum { ret = 50 }; };$/;"	e	enum:map_size::<anonymous>	file:
ret	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^template<>  struct map_size<12> { enum { ret = 100 }; };$/;"	e	enum:map_size::<anonymous>	file:
ret	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^template<>  struct map_size<13> { enum { ret = 300 }; };$/;"	e	enum:map_size::<anonymous>	file:
ret	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^template<int S> struct map_size { enum { ret = S }; };$/;"	e	enum:map_size::<anonymous>	file:
run	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^  static void run()$/;"	f	struct:loop_on_k
run	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^  static void run()$/;"	f	struct:loop_on_m
run	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^  static void run()$/;"	f	struct:loop_on_n
run	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^  static void run()$/;"	f	struct:print_n
run	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^struct loop_on_k<M,N,END> { static void run(){} };$/;"	f	struct:loop_on_k
run	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^struct loop_on_m<END,N,K> { static void run(){} };$/;"	f	struct:loop_on_m
run	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^struct loop_on_n<M,END,K,Scalar,Mode> { static void run(){} };$/;"	f	struct:loop_on_n
run	tags/before-github-sync/EXTERNAL/eigen3/bench/product_threshold.cpp	/^template<> struct print_n<END> { static void run(){} };$/;"	f	struct:print_n
BENCH	tags/before-github-sync/EXTERNAL/eigen3/bench/quat_slerp.cpp	228;"	d	file:
main	tags/before-github-sync/EXTERNAL/eigen3/bench/quat_slerp.cpp	/^int main()$/;"	f
nlerp	tags/before-github-sync/EXTERNAL/eigen3/bench/quat_slerp.cpp	/^EIGEN_DONT_INLINE Q nlerp(const Q& a, const Q& b, typename Q::Scalar t)$/;"	f
sin_over_x	tags/before-github-sync/EXTERNAL/eigen3/bench/quat_slerp.cpp	/^inline T sin_over_x(T x)$/;"	f
slerp_eigen	tags/before-github-sync/EXTERNAL/eigen3/bench/quat_slerp.cpp	/^EIGEN_DONT_INLINE Q slerp_eigen(const Q& a, const Q& b, typename Q::Scalar t)$/;"	f
slerp_gael	tags/before-github-sync/EXTERNAL/eigen3/bench/quat_slerp.cpp	/^EIGEN_DONT_INLINE Q slerp_gael(const Q& a, const Q& b, typename Q::Scalar t)$/;"	f
slerp_legacy	tags/before-github-sync/EXTERNAL/eigen3/bench/quat_slerp.cpp	/^EIGEN_DONT_INLINE Q slerp_legacy(const Q& a, const Q& b, typename Q::Scalar t)$/;"	f
slerp_legacy_nlerp	tags/before-github-sync/EXTERNAL/eigen3/bench/quat_slerp.cpp	/^EIGEN_DONT_INLINE Q slerp_legacy_nlerp(const Q& a, const Q& b, typename Q::Scalar t)$/;"	f
slerp_rw	tags/before-github-sync/EXTERNAL/eigen3/bench/quat_slerp.cpp	/^EIGEN_DONT_INLINE Q slerp_rw(const Q& a, const Q& b, typename Q::Scalar t)$/;"	f
bench	tags/before-github-sync/EXTERNAL/eigen3/bench/quatmul.cpp	/^template<typename Quat> void bench(const std::string& label)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/quatmul.cpp	/^int main()$/;"	f
quatmul_default	tags/before-github-sync/EXTERNAL/eigen3/bench/quatmul.cpp	/^EIGEN_DONT_INLINE void quatmul_default(const Quat& a, const Quat& b, Quat& c)$/;"	f
quatmul_novec	tags/before-github-sync/EXTERNAL/eigen3/bench/quatmul.cpp	/^EIGEN_DONT_INLINE void quatmul_novec(const Quat& a, const Quat& b, Quat& c)$/;"	f
BENCH	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_cholesky.cpp	33;"	d	file:
DENSITY	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_cholesky.cpp	16;"	d	file:
EigenSparseSelfAdjointMatrix	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_cholesky.cpp	/^typedef SparseMatrix<Scalar,SelfAdjoint|LowerTriangular> EigenSparseSelfAdjointMatrix;$/;"	t	file:
MINDENSITY	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_cholesky.cpp	26;"	d	file:
NBTRIES	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_cholesky.cpp	30;"	d	file:
NOGMM	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_cholesky.cpp	8;"	d	file:
NOMTL	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_cholesky.cpp	9;"	d	file:
REPEAT	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_cholesky.cpp	20;"	d	file:
SIZE	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_cholesky.cpp	12;"	d	file:
doEigen	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_cholesky.cpp	/^void doEigen(const char* name, const EigenSparseSelfAdjointMatrix& sm1, int flags = 0)$/;"	f
fillSpdMatrix	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_cholesky.cpp	/^void fillSpdMatrix(float density, int rows, int cols,  EigenSparseSelfAdjointMatrix& dst)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_cholesky.cpp	/^int main(int argc, char *argv[])$/;"	f
BENCH	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_dense_product.cpp	28;"	d	file:
DENSITY	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_dense_product.cpp	11;"	d	file:
MINDENSITY	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_dense_product.cpp	21;"	d	file:
NBTRIES	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_dense_product.cpp	25;"	d	file:
REPEAT	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_dense_product.cpp	15;"	d	file:
SIZE	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_dense_product.cpp	7;"	d	file:
cs_sorted_multiply	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_dense_product.cpp	/^cs* cs_sorted_multiply(const cs* a, const cs* b)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_dense_product.cpp	/^int main(int argc, char *argv[])$/;"	f
BENCH	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_lu.cpp	33;"	d	file:
DENSITY	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_lu.cpp	16;"	d	file:
EIGEN_SUPERLU_SUPPORT	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_lu.cpp	4;"	d	file:
EIGEN_UMFPACK_SUPPORT	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_lu.cpp	5;"	d	file:
MINDENSITY	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_lu.cpp	26;"	d	file:
NBTRIES	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_lu.cpp	30;"	d	file:
NOGMM	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_lu.cpp	8;"	d	file:
NOMTL	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_lu.cpp	9;"	d	file:
REPEAT	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_lu.cpp	20;"	d	file:
SIZE	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_lu.cpp	12;"	d	file:
VectorX	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_lu.cpp	/^typedef Matrix<Scalar,Dynamic,1> VectorX;$/;"	t	file:
doEigen	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_lu.cpp	/^void doEigen(const char* name, const EigenSparseMatrix& sm1, const VectorX& b, VectorX& x, int flags = 0)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_lu.cpp	/^int main(int argc, char *argv[])$/;"	f
BENCH	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_product.cpp	29;"	d	file:
NBTRIES	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_product.cpp	26;"	d	file:
NNZPERCOL	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_product.cpp	14;"	d	file:
REPEAT	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_product.cpp	18;"	d	file:
SIZE	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_product.cpp	10;"	d	file:
cs_sorted_multiply	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_product.cpp	/^cs* cs_sorted_multiply(const cs* a, const cs* b)$/;"	f
cs_sorted_multiply2	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_product.cpp	/^cs* cs_sorted_multiply2(const cs* a, const cs* b)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_product.cpp	/^int main(int argc, char *argv[])$/;"	f
BENCH	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_randomsetter.cpp	32;"	d	file:
DENSITY	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_randomsetter.cpp	15;"	d	file:
MINDENSITY	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_randomsetter.cpp	25;"	d	file:
NBTRIES	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_randomsetter.cpp	29;"	d	file:
NOGMM	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_randomsetter.cpp	2;"	d	file:
NOMTL	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_randomsetter.cpp	3;"	d	file:
REPEAT	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_randomsetter.cpp	19;"	d	file:
SIZE	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_randomsetter.cpp	11;"	d	file:
dostuff	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_randomsetter.cpp	/^void dostuff(const char* name, EigenSparseMatrix& sm1)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_randomsetter.cpp	/^int main(int argc, char *argv[])$/;"	f
nentries	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_randomsetter.cpp	/^static double nentries;$/;"	v	file:
rtime	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_randomsetter.cpp	/^static double rtime;$/;"	v	file:
BENCH	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	36;"	d	file:
CHECK_MEM	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	33;"	d	file:
Coordinates	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	/^typedef std::vector<Vector2i> Coordinates;$/;"	t	file:
EIGEN_GOOGLEHASH_SUPPORT	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	27;"	d	file:
KK	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	23;"	d	file:
NBPERROW	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	11;"	d	file:
NBTRIES	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	19;"	d	file:
REPEAT	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	15;"	d	file:
SIZE	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	7;"	d	file:
Values	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	/^typedef std::vector<float> Values;$/;"	t	file:
coo_tocsr	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	/^void coo_tocsr(const int n_row,$/;"	f
csr_sort_indices	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	/^void csr_sort_indices(const I n_row,$/;"	f
csr_sum_duplicates	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	/^void csr_sum_duplicates(const I n_row,$/;"	f
kv_pair_less	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	/^bool kv_pair_less(const std::pair<T1,T2>& x, const std::pair<T1,T2>& y){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	/^int main(int argc, char *argv[])$/;"	f
setinnerrand_eigen	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	/^EIGEN_DONT_INLINE Scalar* setinnerrand_eigen(const Coordinates& coords, const Values& vals)$/;"	f
setrand_eigen_compact	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	/^EIGEN_DONT_INLINE Scalar* setrand_eigen_compact(const Coordinates& coords, const Values& vals)$/;"	f
setrand_eigen_dynamic	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	/^EIGEN_DONT_INLINE Scalar* setrand_eigen_dynamic(const Coordinates& coords, const Values& vals)$/;"	f
setrand_eigen_gnu_hash	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	/^EIGEN_DONT_INLINE Scalar* setrand_eigen_gnu_hash(const Coordinates& coords, const Values& vals)$/;"	f
setrand_eigen_google_dense	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	/^EIGEN_DONT_INLINE Scalar* setrand_eigen_google_dense(const Coordinates& coords, const Values& vals)$/;"	f
setrand_eigen_google_sparse	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	/^EIGEN_DONT_INLINE Scalar* setrand_eigen_google_sparse(const Coordinates& coords, const Values& vals)$/;"	f
setrand_eigen_sumeq	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	/^EIGEN_DONT_INLINE Scalar* setrand_eigen_sumeq(const Coordinates& coords, const Values& vals)$/;"	f
setrand_scipy	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	/^EIGEN_DONT_INLINE Scalar* setrand_scipy(const Coordinates& coords, const Values& vals)$/;"	f
setrand_ublas_genvec	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	/^EIGEN_DONT_INLINE Scalar* setrand_ublas_genvec(const Coordinates& coords, const Values& vals)$/;"	f
setrand_ublas_mapped	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_setter.cpp	/^EIGEN_DONT_INLINE Scalar* setrand_ublas_mapped(const Coordinates& coords, const Values& vals)$/;"	f
BENCH	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_transpose.cpp	28;"	d	file:
DENSITY	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_transpose.cpp	11;"	d	file:
MINDENSITY	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_transpose.cpp	21;"	d	file:
NBTRIES	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_transpose.cpp	25;"	d	file:
REPEAT	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_transpose.cpp	15;"	d	file:
SIZE	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_transpose.cpp	7;"	d	file:
main	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_transpose.cpp	/^int main(int argc, char *argv[])$/;"	f
BENCH	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_trisolver.cpp	29;"	d	file:
DENSITY	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_trisolver.cpp	12;"	d	file:
EigenSparseTriMatrix	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_trisolver.cpp	/^typedef SparseMatrix<Scalar,UpperTriangular> EigenSparseTriMatrix;$/;"	t	file:
EigenSparseTriMatrixRow	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_trisolver.cpp	/^typedef SparseMatrix<Scalar,RowMajorBit|UpperTriangular> EigenSparseTriMatrixRow;$/;"	t	file:
MINDENSITY	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_trisolver.cpp	22;"	d	file:
NBTRIES	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_trisolver.cpp	26;"	d	file:
REPEAT	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_trisolver.cpp	16;"	d	file:
SIZE	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_trisolver.cpp	8;"	d	file:
fillMatrix	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_trisolver.cpp	/^void fillMatrix(float density, int rows, int cols,  EigenSparseTriMatrix& dst)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/bench/sparse_trisolver.cpp	/^int main(int argc, char *argv[])$/;"	f
SCALAR	tags/before-github-sync/EXTERNAL/eigen3/bench/spmv.cpp	4;"	d	file:
SPMV_BENCH	tags/before-github-sync/EXTERNAL/eigen3/bench/spmv.cpp	11;"	d	file:
main	tags/before-github-sync/EXTERNAL/eigen3/bench/spmv.cpp	/^int main(int argc, char *argv[])$/;"	f
E_VDW	tags/before-github-sync/EXTERNAL/eigen3/bench/vdw_new.cpp	/^SCALAR E_VDW(const Vec &interactions1, const Vec &interactions2)$/;"	f
REPEAT	tags/before-github-sync/EXTERNAL/eigen3/bench/vdw_new.cpp	15;"	d	file:
SCALAR	tags/before-github-sync/EXTERNAL/eigen3/bench/vdw_new.cpp	7;"	d	file:
SIZE	tags/before-github-sync/EXTERNAL/eigen3/bench/vdw_new.cpp	11;"	d	file:
Vec	tags/before-github-sync/EXTERNAL/eigen3/bench/vdw_new.cpp	/^typedef Matrix<SCALAR, Eigen::Dynamic, 1> Vec;$/;"	t	file:
main	tags/before-github-sync/EXTERNAL/eigen3/bench/vdw_new.cpp	/^int main() $/;"	f
10	tags/before-github-sync/EXTERNAL/eigen3/blas/chbmv.f	/^                      Y(I) = ZERO$/;"	l	subroutine:CHBMV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/chbmv.f	/^                  Y(J) = Y(J) + ALPHA*TEMP2$/;"	l	subroutine:CHBMV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/chbmv.f	/^                      TEMP2 = TEMP2 + CONJG(A(L+I,J))*X(IX)$/;"	l	subroutine:CHBMV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/chbmv.f	/^                  JY = JY + INCY$/;"	l	subroutine:CHBMV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/chbmv.f	/^                      Y(I) = BETA*Y(I)$/;"	l	subroutine:CHBMV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/chbmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:CHBMV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/chbmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:CHBMV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/chbmv.f	/^                      TEMP2 = TEMP2 + CONJG(A(L+I,J))*X(I)$/;"	l	subroutine:CHBMV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/chbmv.f	/^                  Y(J) = Y(J) + TEMP1*REAL(A(KPLUS1,J)) + ALPHA*TEMP2$/;"	l	subroutine:CHBMV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/chbmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:CHBMV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/chbmv.f	/^                  END IF$/;"	l	subroutine:CHBMV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/chbmv.f	/^                      TEMP2 = TEMP2 + CONJG(A(L+I,J))*X(I)$/;"	l	subroutine:CHBMV	file:
CHBMV	tags/before-github-sync/EXTERNAL/eigen3/blas/chbmv.f	/^      SUBROUTINE CHBMV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/chpmv.f	/^                      Y(I) = ZERO$/;"	l	subroutine:CHPMV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/chpmv.f	/^                  KK = KK + (N-J+1)$/;"	l	subroutine:CHPMV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/chpmv.f	/^                      TEMP2 = TEMP2 + CONJG(AP(K))*X(IX)$/;"	l	subroutine:CHPMV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/chpmv.f	/^                  KK = KK + (N-J+1)$/;"	l	subroutine:CHPMV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/chpmv.f	/^                      Y(I) = BETA*Y(I)$/;"	l	subroutine:CHPMV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/chpmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:CHPMV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/chpmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:CHPMV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/chpmv.f	/^                      K = K + 1$/;"	l	subroutine:CHPMV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/chpmv.f	/^                  KK = KK + J$/;"	l	subroutine:CHPMV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/chpmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:CHPMV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/chpmv.f	/^                  KK = KK + J$/;"	l	subroutine:CHPMV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/chpmv.f	/^                      K = K + 1$/;"	l	subroutine:CHPMV	file:
CHPMV	tags/before-github-sync/EXTERNAL/eigen3/blas/chpmv.f	/^      SUBROUTINE CHPMV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/chpr.f	/^                          K = K + 1$/;"	l	subroutine:CHPR	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/chpr.f	/^                  KK = KK + J$/;"	l	subroutine:CHPR	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/chpr.f	/^                          IX = IX + INCX$/;"	l	subroutine:CHPR	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/chpr.f	/^                  KK = KK + J$/;"	l	subroutine:CHPR	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/chpr.f	/^                          K = K + 1$/;"	l	subroutine:CHPR	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/chpr.f	/^                  KK = KK + N - J + 1$/;"	l	subroutine:CHPR	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/chpr.f	/^                          AP(K) = AP(K) + X(IX)*TEMP$/;"	l	subroutine:CHPR	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/chpr.f	/^                  KK = KK + N - J + 1$/;"	l	subroutine:CHPR	file:
CHPR	tags/before-github-sync/EXTERNAL/eigen3/blas/chpr.f	/^      SUBROUTINE CHPR(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/chpr2.f	/^                          K = K + 1$/;"	l	subroutine:CHPR2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/chpr2.f	/^                  KK = KK + J$/;"	l	subroutine:CHPR2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/chpr2.f	/^                          IY = IY + INCY$/;"	l	subroutine:CHPR2	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/chpr2.f	/^                  KK = KK + J$/;"	l	subroutine:CHPR2	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/chpr2.f	/^                          K = K + 1$/;"	l	subroutine:CHPR2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/chpr2.f	/^                  KK = KK + N - J + 1$/;"	l	subroutine:CHPR2	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/chpr2.f	/^                          AP(K) = AP(K) + X(IX)*TEMP1 + Y(IY)*TEMP2$/;"	l	subroutine:CHPR2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/chpr2.f	/^                  KK = KK + N - J + 1$/;"	l	subroutine:CHPR2	file:
CHPR2	tags/before-github-sync/EXTERNAL/eigen3/blas/chpr2.f	/^      SUBROUTINE CHPR2(/;"	s
ADJ	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	48;"	d
CompactVectorType	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	/^typedef Map<Matrix<Scalar,Dynamic,1> > CompactVectorType;$/;"	t
Complex	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	/^typedef std::complex<RealScalar> Complex;$/;"	t
Conj	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	/^  Conj = IsComplex$/;"	e
DIAG	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	74;"	d
EIGEN_BLAS_COMMON_H	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	26;"	d
EIGEN_BLAS_FUNC	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	155;"	d
INVALID	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	59;"	d
IsComplex	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	/^  IsComplex = Eigen::NumTraits<SCALAR>::IsComplex,$/;"	e
LEFT	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	50;"	d
LO	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	54;"	d
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	/^typedef Map<Matrix<Scalar,Dynamic,Dynamic,ColMajor>, 0, OuterStride<> > MatrixType;$/;"	t
NOTR	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	46;"	d
NUNIT	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	56;"	d
OP	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	61;"	d
PlainMatrixType	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	/^typedef Matrix<Scalar,Dynamic,Dynamic,ColMajor> PlainMatrixType;$/;"	t
RIGHT	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	51;"	d
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	/^typedef NumTraits<Scalar>::Real RealScalar;$/;"	t
SIDE	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	66;"	d
Scalar	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	/^typedef SCALAR Scalar;$/;"	t
StridedVectorType	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	/^typedef Map<Matrix<Scalar,Dynamic,1>, 0, InnerStride<Dynamic> > StridedVectorType;$/;"	t
TR	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	47;"	d
UNIT	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	57;"	d
UP	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	53;"	d
UPLO	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	70;"	d
check_op	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	/^inline bool check_op(const char* op)$/;"	f
check_side	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	/^inline bool check_side(const char* side)$/;"	f
check_uplo	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	/^inline bool check_uplo(const char* uplo)$/;"	f
copy_back	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	/^T* copy_back(T* x_cpy, T* x, int n, int incx)$/;"	f
get_compact_vector	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	/^T* get_compact_vector(T* x, int n, int incx)$/;"	f
matrix	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	/^matrix(T* data, int rows, int cols, int stride)$/;"	f
vector	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	/^Map<Matrix<T,Dynamic,1> > vector(T* data, int size)$/;"	f
vector	tags/before-github-sync/EXTERNAL/eigen3/blas/common.h	/^Map<Matrix<T,Dynamic,1>, 0, InnerStride<Dynamic> > vector(T* data, int size, int incr)$/;"	f
ISCOMPLEX	tags/before-github-sync/EXTERNAL/eigen3/blas/complex_double.cpp	29;"	d	file:
REAL_SCALAR_SUFFIX	tags/before-github-sync/EXTERNAL/eigen3/blas/complex_double.cpp	28;"	d	file:
SCALAR	tags/before-github-sync/EXTERNAL/eigen3/blas/complex_double.cpp	25;"	d	file:
SCALAR_SUFFIX	tags/before-github-sync/EXTERNAL/eigen3/blas/complex_double.cpp	26;"	d	file:
SCALAR_SUFFIX_UP	tags/before-github-sync/EXTERNAL/eigen3/blas/complex_double.cpp	27;"	d	file:
ISCOMPLEX	tags/before-github-sync/EXTERNAL/eigen3/blas/complex_single.cpp	29;"	d	file:
REAL_SCALAR_SUFFIX	tags/before-github-sync/EXTERNAL/eigen3/blas/complex_single.cpp	28;"	d	file:
SCALAR	tags/before-github-sync/EXTERNAL/eigen3/blas/complex_single.cpp	25;"	d	file:
SCALAR_SUFFIX	tags/before-github-sync/EXTERNAL/eigen3/blas/complex_single.cpp	26;"	d	file:
SCALAR_SUFFIX_UP	tags/before-github-sync/EXTERNAL/eigen3/blas/complex_single.cpp	27;"	d	file:
CDOTC	tags/before-github-sync/EXTERNAL/eigen3/blas/complexdots.f	/^      COMPLEX FUNCTION CDOTC(/;"	f
CDOTU	tags/before-github-sync/EXTERNAL/eigen3/blas/complexdots.f	/^      COMPLEX FUNCTION CDOTU(/;"	f
ZDOTC	tags/before-github-sync/EXTERNAL/eigen3/blas/complexdots.f	/^      DOUBLE COMPLEX FUNCTION ZDOTC(/;"	f
ZDOTU	tags/before-github-sync/EXTERNAL/eigen3/blas/complexdots.f	/^      DOUBLE COMPLEX FUNCTION ZDOTU(/;"	f
10	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                              X(I) = X(I) + TEMP*A(L+I,J)$/;"	l	subroutine:CTBMV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                              TEMP = TEMP + CONJG(A(L+I,J))*X(I)$/;"	l	subroutine:CTBMV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                      X(J) = TEMP$/;"	l	subroutine:CTBMV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                              IX = IX - INCX$/;"	l	subroutine:CTBMV	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                              IX = IX - INCX$/;"	l	subroutine:CTBMV	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                      JX = JX - INCX$/;"	l	subroutine:CTBMV	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                              TEMP = TEMP + A(L+I,J)*X(I)$/;"	l	subroutine:CTBMV	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                              TEMP = TEMP + CONJG(A(L+I,J))*X(I)$/;"	l	subroutine:CTBMV	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                      X(J) = TEMP$/;"	l	subroutine:CTBMV	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                              IX = IX + INCX$/;"	l	subroutine:CTBMV	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                              IX = IX + INCX$/;"	l	subroutine:CTBMV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                      END IF$/;"	l	subroutine:CTBMV	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                      JX = JX + INCX$/;"	l	subroutine:CTBMV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                              IX = IX + INCX$/;"	l	subroutine:CTBMV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                      IF (J.GT.K) KX = KX + INCX$/;"	l	subroutine:CTBMV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                              X(I) = X(I) + TEMP*A(L+I,J)$/;"	l	subroutine:CTBMV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                      END IF$/;"	l	subroutine:CTBMV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                              IX = IX - INCX$/;"	l	subroutine:CTBMV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                      IF ((N-J).GE.K) KX = KX - INCX$/;"	l	subroutine:CTBMV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^                              TEMP = TEMP + A(L+I,J)*X(I)$/;"	l	subroutine:CTBMV	file:
CTBMV	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbmv.f	/^      SUBROUTINE CTBMV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                              X(I) = X(I) - TEMP*A(L+I,J)$/;"	l	subroutine:CTBSV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                              TEMP = TEMP - CONJG(A(L+I,J))*X(I)$/;"	l	subroutine:CTBSV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                      X(J) = TEMP$/;"	l	subroutine:CTBSV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                              IX = IX + INCX$/;"	l	subroutine:CTBSV	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                              IX = IX + INCX$/;"	l	subroutine:CTBSV	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                      IF (J.GT.K) KX = KX + INCX$/;"	l	subroutine:CTBSV	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                              TEMP = TEMP - A(L+I,J)*X(I)$/;"	l	subroutine:CTBSV	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                              TEMP = TEMP - CONJG(A(L+I,J))*X(I)$/;"	l	subroutine:CTBSV	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                      X(J) = TEMP$/;"	l	subroutine:CTBSV	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                              IX = IX - INCX$/;"	l	subroutine:CTBSV	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                              IX = IX - INCX$/;"	l	subroutine:CTBSV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                      END IF$/;"	l	subroutine:CTBSV	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                      IF ((N-J).GE.K) KX = KX - INCX$/;"	l	subroutine:CTBSV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                              IX = IX - INCX$/;"	l	subroutine:CTBSV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                      JX = JX - INCX$/;"	l	subroutine:CTBSV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                              X(I) = X(I) - TEMP*A(L+I,J)$/;"	l	subroutine:CTBSV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                      END IF$/;"	l	subroutine:CTBSV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                              IX = IX + INCX$/;"	l	subroutine:CTBSV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                      JX = JX + INCX$/;"	l	subroutine:CTBSV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^                              TEMP = TEMP - A(L+I,J)*X(I)$/;"	l	subroutine:CTBSV	file:
CTBSV	tags/before-github-sync/EXTERNAL/eigen3/blas/ctbsv.f	/^      SUBROUTINE CTBSV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                              K = K + 1$/;"	l	subroutine:CTPMV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                              K = K - 1$/;"	l	subroutine:CTPMV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                      KK = KK - J$/;"	l	subroutine:CTPMV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                              TEMP = TEMP + AP(K)*X(IX)$/;"	l	subroutine:CTPMV	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                              TEMP = TEMP + CONJG(AP(K))*X(IX)$/;"	l	subroutine:CTPMV	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                      KK = KK - J$/;"	l	subroutine:CTPMV	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                              K = K + 1$/;"	l	subroutine:CTPMV	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                              K = K + 1$/;"	l	subroutine:CTPMV	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                      KK = KK + (N-J+1)$/;"	l	subroutine:CTPMV	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                              TEMP = TEMP + AP(K)*X(IX)$/;"	l	subroutine:CTPMV	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                              TEMP = TEMP + CONJG(AP(K))*X(IX)$/;"	l	subroutine:CTPMV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                      KK = KK + J$/;"	l	subroutine:CTPMV	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                      KK = KK + (N-J+1)$/;"	l	subroutine:CTPMV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                              IX = IX + INCX$/;"	l	subroutine:CTPMV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                      KK = KK + J$/;"	l	subroutine:CTPMV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                              K = K - 1$/;"	l	subroutine:CTPMV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                      KK = KK - (N-J+1)$/;"	l	subroutine:CTPMV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                              IX = IX - INCX$/;"	l	subroutine:CTPMV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                      KK = KK - (N-J+1)$/;"	l	subroutine:CTPMV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^                              K = K - 1$/;"	l	subroutine:CTPMV	file:
CTPMV	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpmv.f	/^      SUBROUTINE CTPMV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                              K = K - 1$/;"	l	subroutine:CTPSV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                              K = K + 1$/;"	l	subroutine:CTPSV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                      KK = KK + J$/;"	l	subroutine:CTPSV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                              IX = IX + INCX$/;"	l	subroutine:CTPSV	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                              IX = IX + INCX$/;"	l	subroutine:CTPSV	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                      KK = KK + J$/;"	l	subroutine:CTPSV	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                              K = K - 1$/;"	l	subroutine:CTPSV	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                              K = K - 1$/;"	l	subroutine:CTPSV	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                      KK = KK - (N-J+1)$/;"	l	subroutine:CTPSV	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                              IX = IX - INCX$/;"	l	subroutine:CTPSV	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                              IX = IX - INCX$/;"	l	subroutine:CTPSV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                      KK = KK - J$/;"	l	subroutine:CTPSV	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                      KK = KK - (N-J+1)$/;"	l	subroutine:CTPSV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                              X(IX) = X(IX) - TEMP*AP(K)$/;"	l	subroutine:CTPSV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                      KK = KK - J$/;"	l	subroutine:CTPSV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                              K = K + 1$/;"	l	subroutine:CTPSV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                      KK = KK + (N-J+1)$/;"	l	subroutine:CTPSV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                              X(IX) = X(IX) - TEMP*AP(K)$/;"	l	subroutine:CTPSV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                      KK = KK + (N-J+1)$/;"	l	subroutine:CTPSV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^                              K = K + 1$/;"	l	subroutine:CTPSV	file:
CTPSV	tags/before-github-sync/EXTERNAL/eigen3/blas/ctpsv.f	/^      SUBROUTINE CTPSV(/;"	s
ISCOMPLEX	tags/before-github-sync/EXTERNAL/eigen3/blas/double.cpp	28;"	d	file:
SCALAR	tags/before-github-sync/EXTERNAL/eigen3/blas/double.cpp	25;"	d	file:
SCALAR_SUFFIX	tags/before-github-sync/EXTERNAL/eigen3/blas/double.cpp	26;"	d	file:
SCALAR_SUFFIX_UP	tags/before-github-sync/EXTERNAL/eigen3/blas/double.cpp	27;"	d	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/drotm.f	/^      IF (DFLAG) 50,10,30$/;"	l	subroutine:DROTM	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/drotm.f	/^      GO TO 140$/;"	l	subroutine:DROTM	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/drotm.f	/^          KY = KY + INCY$/;"	l	subroutine:DROTM	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/drotm.f	/^      GO TO 140$/;"	l	subroutine:DROTM	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/drotm.f	/^          KY = KY + INCY$/;"	l	subroutine:DROTM	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/drotm.f	/^  130 CONTINUE$/;"	l	subroutine:DROTM	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/drotm.f	/^          DY(I) = W*DH21 + Z$/;"	l	subroutine:DROTM	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/drotm.f	/^      GO TO 140$/;"	l	subroutine:DROTM	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/drotm.f	/^          DY(I) = -W + DH22*Z$/;"	l	subroutine:DROTM	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/drotm.f	/^      GO TO 140$/;"	l	subroutine:DROTM	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/drotm.f	/^          DY(I) = W*DH21 + Z*DH22$/;"	l	subroutine:DROTM	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/drotm.f	/^      GO TO 140$/;"	l	subroutine:DROTM	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/drotm.f	/^      IF (DFLAG) 120,80,100$/;"	l	subroutine:DROTM	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/drotm.f	/^          KY = KY + INCY$/;"	l	subroutine:DROTM	file:
DROTM	tags/before-github-sync/EXTERNAL/eigen3/blas/drotm.f	/^      SUBROUTINE DROTM(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^      GO TO 60$/;"	l	subroutine:DROTMG	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^*     PROCEDURE..SCALE-CHECK$/;"	l	subroutine:DROTMG	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^  100 CONTINUE$/;"	l	subroutine:DROTMG	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^      GO TO 70$/;"	l	subroutine:DROTMG	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^      GO TO 110$/;"	l	subroutine:DROTMG	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^  130 CONTINUE$/;"	l	subroutine:DROTMG	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^      GO TO 70$/;"	l	subroutine:DROTMG	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^      GO TO 140$/;"	l	subroutine:DROTMG	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^  160 CONTINUE$/;"	l	subroutine:DROTMG	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^      GO TO 70$/;"	l	subroutine:DROTMG	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^      GO TO 170$/;"	l	subroutine:DROTMG	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^*     REGULAR-CASE..$/;"	l	subroutine:DROTMG	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^  190 CONTINUE$/;"	l	subroutine:DROTMG	file:
210	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^      GO TO 70$/;"	l	subroutine:DROTMG	file:
220	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^      GO TO 200$/;"	l	subroutine:DROTMG	file:
230	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^      IF (DFLAG) 250,230,240$/;"	l	subroutine:DROTMG	file:
240	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^      GO TO 260$/;"	l	subroutine:DROTMG	file:
250	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^      GO TO 260$/;"	l	subroutine:DROTMG	file:
260	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^      DPARAM(5) = DH22$/;"	l	subroutine:DROTMG	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^      GO TO 60$/;"	l	subroutine:DROTMG	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^      GO TO 100$/;"	l	subroutine:DROTMG	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^      GO TO 60$/;"	l	subroutine:DROTMG	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^*     PROCEDURE..ZERO-H-D-AND-DX1..$/;"	l	subroutine:DROTMG	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^*     PROCEDURE..FIX-H..$/;"	l	subroutine:DROTMG	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^      GO TO 90$/;"	l	subroutine:DROTMG	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^      DFLAG = -ONE$/;"	l	subroutine:DROTMG	file:
DROTMG	tags/before-github-sync/EXTERNAL/eigen3/blas/drotmg.f	/^      SUBROUTINE DROTMG(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/dsbmv.f	/^                      Y(I) = ZERO$/;"	l	subroutine:DSBMV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/dsbmv.f	/^                  Y(J) = Y(J) + ALPHA*TEMP2$/;"	l	subroutine:DSBMV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/dsbmv.f	/^                      TEMP2 = TEMP2 + A(L+I,J)*X(IX)$/;"	l	subroutine:DSBMV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/dsbmv.f	/^                  JY = JY + INCY$/;"	l	subroutine:DSBMV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/dsbmv.f	/^                      Y(I) = BETA*Y(I)$/;"	l	subroutine:DSBMV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/dsbmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:DSBMV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/dsbmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:DSBMV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/dsbmv.f	/^                      TEMP2 = TEMP2 + A(L+I,J)*X(I)$/;"	l	subroutine:DSBMV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/dsbmv.f	/^                  Y(J) = Y(J) + TEMP1*A(KPLUS1,J) + ALPHA*TEMP2$/;"	l	subroutine:DSBMV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/dsbmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:DSBMV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/dsbmv.f	/^                  END IF$/;"	l	subroutine:DSBMV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/dsbmv.f	/^                      TEMP2 = TEMP2 + A(L+I,J)*X(I)$/;"	l	subroutine:DSBMV	file:
DSBMV	tags/before-github-sync/EXTERNAL/eigen3/blas/dsbmv.f	/^      SUBROUTINE DSBMV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/dspmv.f	/^                      Y(I) = ZERO$/;"	l	subroutine:DSPMV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/dspmv.f	/^                  KK = KK + (N-J+1)$/;"	l	subroutine:DSPMV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/dspmv.f	/^                      TEMP2 = TEMP2 + AP(K)*X(IX)$/;"	l	subroutine:DSPMV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/dspmv.f	/^                  KK = KK + (N-J+1)$/;"	l	subroutine:DSPMV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/dspmv.f	/^                      Y(I) = BETA*Y(I)$/;"	l	subroutine:DSPMV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/dspmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:DSPMV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/dspmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:DSPMV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/dspmv.f	/^                      K = K + 1$/;"	l	subroutine:DSPMV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/dspmv.f	/^                  KK = KK + J$/;"	l	subroutine:DSPMV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/dspmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:DSPMV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/dspmv.f	/^                  KK = KK + J$/;"	l	subroutine:DSPMV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/dspmv.f	/^                      K = K + 1$/;"	l	subroutine:DSPMV	file:
DSPMV	tags/before-github-sync/EXTERNAL/eigen3/blas/dspmv.f	/^      SUBROUTINE DSPMV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/dspr.f	/^                          K = K + 1$/;"	l	subroutine:DSPR	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/dspr.f	/^                  KK = KK + J$/;"	l	subroutine:DSPR	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/dspr.f	/^                          IX = IX + INCX$/;"	l	subroutine:DSPR	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/dspr.f	/^                  KK = KK + J$/;"	l	subroutine:DSPR	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/dspr.f	/^                          K = K + 1$/;"	l	subroutine:DSPR	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/dspr.f	/^                  KK = KK + N - J + 1$/;"	l	subroutine:DSPR	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/dspr.f	/^                          IX = IX + INCX$/;"	l	subroutine:DSPR	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/dspr.f	/^                  KK = KK + N - J + 1$/;"	l	subroutine:DSPR	file:
DSPR	tags/before-github-sync/EXTERNAL/eigen3/blas/dspr.f	/^      SUBROUTINE DSPR(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/dspr2.f	/^                          K = K + 1$/;"	l	subroutine:DSPR2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/dspr2.f	/^                  KK = KK + J$/;"	l	subroutine:DSPR2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/dspr2.f	/^                          IY = IY + INCY$/;"	l	subroutine:DSPR2	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/dspr2.f	/^                  KK = KK + J$/;"	l	subroutine:DSPR2	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/dspr2.f	/^                          K = K + 1$/;"	l	subroutine:DSPR2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/dspr2.f	/^                  KK = KK + N - J + 1$/;"	l	subroutine:DSPR2	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/dspr2.f	/^                          IY = IY + INCY$/;"	l	subroutine:DSPR2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/dspr2.f	/^                  KK = KK + N - J + 1$/;"	l	subroutine:DSPR2	file:
DSPR2	tags/before-github-sync/EXTERNAL/eigen3/blas/dspr2.f	/^      SUBROUTINE DSPR2(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbmv.f	/^                              X(I) = X(I) + TEMP*A(L+I,J)$/;"	l	subroutine:DTBMV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbmv.f	/^                      X(J) = TEMP$/;"	l	subroutine:DTBMV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbmv.f	/^                          IX = IX - INCX$/;"	l	subroutine:DTBMV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbmv.f	/^                      JX = JX - INCX$/;"	l	subroutine:DTBMV	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbmv.f	/^                          TEMP = TEMP + A(L+I,J)*X(I)$/;"	l	subroutine:DTBMV	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbmv.f	/^                      X(J) = TEMP$/;"	l	subroutine:DTBMV	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbmv.f	/^                          IX = IX + INCX$/;"	l	subroutine:DTBMV	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbmv.f	/^                      JX = JX + INCX$/;"	l	subroutine:DTBMV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbmv.f	/^                      END IF$/;"	l	subroutine:DTBMV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbmv.f	/^                              IX = IX + INCX$/;"	l	subroutine:DTBMV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbmv.f	/^                      IF (J.GT.K) KX = KX + INCX$/;"	l	subroutine:DTBMV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbmv.f	/^                              X(I) = X(I) + TEMP*A(L+I,J)$/;"	l	subroutine:DTBMV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbmv.f	/^                      END IF$/;"	l	subroutine:DTBMV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbmv.f	/^                              IX = IX - INCX$/;"	l	subroutine:DTBMV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbmv.f	/^                      IF ((N-J).GE.K) KX = KX - INCX$/;"	l	subroutine:DTBMV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbmv.f	/^                          TEMP = TEMP + A(L+I,J)*X(I)$/;"	l	subroutine:DTBMV	file:
DTBMV	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbmv.f	/^      SUBROUTINE DTBMV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbsv.f	/^                              X(I) = X(I) - TEMP*A(L+I,J)$/;"	l	subroutine:DTBSV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbsv.f	/^                      X(J) = TEMP$/;"	l	subroutine:DTBSV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbsv.f	/^                          IX = IX + INCX$/;"	l	subroutine:DTBSV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbsv.f	/^                      IF (J.GT.K) KX = KX + INCX$/;"	l	subroutine:DTBSV	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbsv.f	/^                          TEMP = TEMP - A(L+I,J)*X(I)$/;"	l	subroutine:DTBSV	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbsv.f	/^                      X(J) = TEMP$/;"	l	subroutine:DTBSV	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbsv.f	/^                          IX = IX - INCX$/;"	l	subroutine:DTBSV	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbsv.f	/^                      IF ((N-J).GE.K) KX = KX - INCX$/;"	l	subroutine:DTBSV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbsv.f	/^                      END IF$/;"	l	subroutine:DTBSV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbsv.f	/^                              IX = IX - INCX$/;"	l	subroutine:DTBSV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbsv.f	/^                      JX = JX - INCX$/;"	l	subroutine:DTBSV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbsv.f	/^                              X(I) = X(I) - TEMP*A(L+I,J)$/;"	l	subroutine:DTBSV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbsv.f	/^                      END IF$/;"	l	subroutine:DTBSV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbsv.f	/^                              IX = IX + INCX$/;"	l	subroutine:DTBSV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbsv.f	/^                      JX = JX + INCX$/;"	l	subroutine:DTBSV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbsv.f	/^                          TEMP = TEMP - A(L+I,J)*X(I)$/;"	l	subroutine:DTBSV	file:
DTBSV	tags/before-github-sync/EXTERNAL/eigen3/blas/dtbsv.f	/^      SUBROUTINE DTBSV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpmv.f	/^                              K = K + 1$/;"	l	subroutine:DTPMV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpmv.f	/^                      KK = KK - J$/;"	l	subroutine:DTPMV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpmv.f	/^                          TEMP = TEMP + AP(K)*X(IX)$/;"	l	subroutine:DTPMV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpmv.f	/^                      KK = KK - J$/;"	l	subroutine:DTPMV	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpmv.f	/^                          K = K + 1$/;"	l	subroutine:DTPMV	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpmv.f	/^                      KK = KK + (N-J+1)$/;"	l	subroutine:DTPMV	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpmv.f	/^                          TEMP = TEMP + AP(K)*X(IX)$/;"	l	subroutine:DTPMV	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpmv.f	/^                      KK = KK + (N-J+1)$/;"	l	subroutine:DTPMV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpmv.f	/^                      KK = KK + J$/;"	l	subroutine:DTPMV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpmv.f	/^                              IX = IX + INCX$/;"	l	subroutine:DTPMV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpmv.f	/^                      KK = KK + J$/;"	l	subroutine:DTPMV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpmv.f	/^                              K = K - 1$/;"	l	subroutine:DTPMV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpmv.f	/^                      KK = KK - (N-J+1)$/;"	l	subroutine:DTPMV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpmv.f	/^                              IX = IX - INCX$/;"	l	subroutine:DTPMV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpmv.f	/^                      KK = KK - (N-J+1)$/;"	l	subroutine:DTPMV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpmv.f	/^                          K = K - 1$/;"	l	subroutine:DTPMV	file:
DTPMV	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpmv.f	/^      SUBROUTINE DTPMV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpsv.f	/^                              K = K - 1$/;"	l	subroutine:DTPSV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpsv.f	/^                      KK = KK + J$/;"	l	subroutine:DTPSV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpsv.f	/^                          IX = IX + INCX$/;"	l	subroutine:DTPSV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpsv.f	/^                      KK = KK + J$/;"	l	subroutine:DTPSV	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpsv.f	/^                          K = K - 1$/;"	l	subroutine:DTPSV	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpsv.f	/^                      KK = KK - (N-J+1)$/;"	l	subroutine:DTPSV	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpsv.f	/^                          IX = IX - INCX$/;"	l	subroutine:DTPSV	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpsv.f	/^                      KK = KK - (N-J+1)$/;"	l	subroutine:DTPSV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpsv.f	/^                      KK = KK - J$/;"	l	subroutine:DTPSV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpsv.f	/^                              X(IX) = X(IX) - TEMP*AP(K)$/;"	l	subroutine:DTPSV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpsv.f	/^                      KK = KK - J$/;"	l	subroutine:DTPSV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpsv.f	/^                              K = K + 1$/;"	l	subroutine:DTPSV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpsv.f	/^                      KK = KK + (N-J+1)$/;"	l	subroutine:DTPSV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpsv.f	/^                              X(IX) = X(IX) - TEMP*AP(K)$/;"	l	subroutine:DTPSV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpsv.f	/^                      KK = KK + (N-J+1)$/;"	l	subroutine:DTPSV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpsv.f	/^                          K = K + 1$/;"	l	subroutine:DTPSV	file:
DTPSV	tags/before-github-sync/EXTERNAL/eigen3/blas/dtpsv.f	/^      SUBROUTINE DTPSV(/;"	s
Cost	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_cplx_impl.h	/^      enum { Cost = 3 * NumTraits<Scalar>::AddCost, PacketAccess = 0 };$/;"	e	enum:Eigen::internal::functor_traits::<anonymous>
Eigen	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_cplx_impl.h	/^namespace Eigen {$/;"	n
PacketAccess	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_cplx_impl.h	/^      enum { Cost = 3 * NumTraits<Scalar>::AddCost, PacketAccess = 0 };$/;"	e	enum:Eigen::internal::functor_traits::<anonymous>
asum_	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_cplx_impl.h	/^RealScalar EIGEN_CAT(EIGEN_CAT(REAL_SCALAR_SUFFIX,SCALAR_SUFFIX),asum_)(int *n, RealScalar *px, int *incx)$/;"	f
dotcw	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_cplx_impl.h	/^int EIGEN_BLAS_FUNC(dotcw)(int *n, RealScalar *px, int *incx, RealScalar *py, int *incy, RealScalar* pres)$/;"	f
dotuw	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_cplx_impl.h	/^int EIGEN_BLAS_FUNC(dotuw)(int *n, RealScalar *px, int *incx, RealScalar *py, int *incy, RealScalar* pres)$/;"	f
functor_traits	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_cplx_impl.h	/^    template<> struct functor_traits<scalar_norm1_op >$/;"	s	namespace:Eigen::internal
internal	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_cplx_impl.h	/^  namespace internal {$/;"	n	namespace:Eigen
nrm2_	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_cplx_impl.h	/^RealScalar EIGEN_CAT(EIGEN_CAT(REAL_SCALAR_SUFFIX,SCALAR_SUFFIX),nrm2_)(int *n, RealScalar *px, int *incx)$/;"	f
operator ()	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_cplx_impl.h	/^  inline RealScalar operator() (const Scalar& a) const { return internal::norm1(a); }$/;"	f	struct:scalar_norm1_op
result_type	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_cplx_impl.h	/^  typedef RealScalar result_type;$/;"	t	struct:scalar_norm1_op
rot_	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_cplx_impl.h	/^int EIGEN_CAT(EIGEN_CAT(SCALAR_SUFFIX,REAL_SCALAR_SUFFIX),rot_)(int *n, RealScalar *px, int *incx, RealScalar *py, int *incy, RealScalar *pc, RealScalar *ps)$/;"	f
scal_	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_cplx_impl.h	/^int EIGEN_CAT(EIGEN_CAT(SCALAR_SUFFIX,REAL_SCALAR_SUFFIX),scal_)(int *n, RealScalar *palpha, RealScalar *px, int *incx)$/;"	f
scalar_norm1_op	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_cplx_impl.h	/^struct scalar_norm1_op {$/;"	s
amax_	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_impl.h	/^int EIGEN_CAT(EIGEN_CAT(i,SCALAR_SUFFIX),amax_)(int *n, RealScalar *px, int *incx)$/;"	f
amin_	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_impl.h	/^int EIGEN_CAT(EIGEN_CAT(i,SCALAR_SUFFIX),amin_)(int *n, RealScalar *px, int *incx)$/;"	f
axpy	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_impl.h	/^int EIGEN_BLAS_FUNC(axpy)(int *n, RealScalar *palpha, RealScalar *px, int *incx, RealScalar *py, int *incy)$/;"	f
copy	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_impl.h	/^int EIGEN_BLAS_FUNC(copy)(int *n, RealScalar *px, int *incx, RealScalar *py, int *incy)$/;"	f
rotg	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_impl.h	/^int EIGEN_BLAS_FUNC(rotg)(RealScalar *pa, RealScalar *pb, RealScalar *pc, RealScalar *ps)$/;"	f
scal	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_impl.h	/^int EIGEN_BLAS_FUNC(scal)(int *n, RealScalar *palpha, RealScalar *px, int *incx)$/;"	f
swap	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_impl.h	/^int EIGEN_BLAS_FUNC(swap)(int *n, RealScalar *px, int *incx, RealScalar *py, int *incy)$/;"	f
asum	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_real_impl.h	/^RealScalar EIGEN_BLAS_FUNC(asum)(int *n, RealScalar *px, int *incx)$/;"	f
dot	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_real_impl.h	/^Scalar EIGEN_BLAS_FUNC(dot)(int *n, RealScalar *px, int *incx, RealScalar *py, int *incy)$/;"	f
nrm2	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_real_impl.h	/^Scalar EIGEN_BLAS_FUNC(nrm2)(int *n, RealScalar *px, int *incx)$/;"	f
rot	tags/before-github-sync/EXTERNAL/eigen3/blas/level1_real_impl.h	/^int EIGEN_BLAS_FUNC(rot)(int *n, RealScalar *px, int *incx, RealScalar *py, int *incy, RealScalar *pc, RealScalar *ps)$/;"	f
gerc	tags/before-github-sync/EXTERNAL/eigen3/blas/level2_cplx_impl.h	/^int EIGEN_BLAS_FUNC(gerc)(int *m, int *n, RealScalar *palpha, RealScalar *px, int *incx, RealScalar *py, int *incy, RealScalar *pa, int *lda)$/;"	f
geru	tags/before-github-sync/EXTERNAL/eigen3/blas/level2_cplx_impl.h	/^int EIGEN_BLAS_FUNC(geru)(int *m, int *n, RealScalar *palpha, RealScalar *px, int *incx, RealScalar *py, int *incy, RealScalar *pa, int *lda)$/;"	f
hemv	tags/before-github-sync/EXTERNAL/eigen3/blas/level2_cplx_impl.h	/^int EIGEN_BLAS_FUNC(hemv)(char *uplo, int *n, RealScalar *palpha, RealScalar *pa, int *lda, RealScalar *px, int *incx, RealScalar *pbeta, RealScalar *py, int *incy)$/;"	f
her	tags/before-github-sync/EXTERNAL/eigen3/blas/level2_cplx_impl.h	/^int EIGEN_BLAS_FUNC(her)(char *uplo, int *n, RealScalar *palpha, RealScalar *px, int *incx, RealScalar *pa, int *lda)$/;"	f
her2	tags/before-github-sync/EXTERNAL/eigen3/blas/level2_cplx_impl.h	/^int EIGEN_BLAS_FUNC(her2)(char *uplo, int *n, RealScalar *palpha, RealScalar *px, int *incx, RealScalar *py, int *incy, RealScalar *pa, int *lda)$/;"	f
gbmv	tags/before-github-sync/EXTERNAL/eigen3/blas/level2_impl.h	/^int EIGEN_BLAS_FUNC(gbmv)(char *trans, int *m, int *n, int *kl, int *ku, RealScalar *palpha, RealScalar *pa, int *lda,$/;"	f
gemv	tags/before-github-sync/EXTERNAL/eigen3/blas/level2_impl.h	/^int EIGEN_BLAS_FUNC(gemv)(char *opa, int *m, int *n, RealScalar *palpha, RealScalar *pa, int *lda, RealScalar *pb, int *incb, RealScalar *pbeta, RealScalar *pc, int *incc)$/;"	f
ger	tags/before-github-sync/EXTERNAL/eigen3/blas/level2_impl.h	/^int EIGEN_BLAS_FUNC(ger)(int *m, int *n, Scalar *palpha, Scalar *px, int *incx, Scalar *py, int *incy, Scalar *pa, int *lda)$/;"	f
trmv	tags/before-github-sync/EXTERNAL/eigen3/blas/level2_impl.h	/^int EIGEN_BLAS_FUNC(trmv)(char *uplo, char *opa, char *diag, int *n, RealScalar *pa, int *lda, RealScalar *pb, int *incb)$/;"	f
trsv	tags/before-github-sync/EXTERNAL/eigen3/blas/level2_impl.h	/^int EIGEN_BLAS_FUNC(trsv)(char *uplo, char *opa, char *diag, int *n, RealScalar *pa, int *lda, RealScalar *pb, int *incb)$/;"	f
symv	tags/before-github-sync/EXTERNAL/eigen3/blas/level2_real_impl.h	/^int EIGEN_BLAS_FUNC(symv) (char *uplo, int *n, RealScalar *palpha, RealScalar *pa, int *lda, RealScalar *px, int *incx, RealScalar *pbeta, RealScalar *py, int *incy)$/;"	f
syr	tags/before-github-sync/EXTERNAL/eigen3/blas/level2_real_impl.h	/^int EIGEN_BLAS_FUNC(syr)(char *uplo, int *n, RealScalar *palpha, RealScalar *px, int *incx, RealScalar *pc, int *ldc)$/;"	f
syr2	tags/before-github-sync/EXTERNAL/eigen3/blas/level2_real_impl.h	/^int EIGEN_BLAS_FUNC(syr2)(char *uplo, int *n, RealScalar *palpha, RealScalar *px, int *incx, RealScalar *py, int *incy, RealScalar *pc, int *ldc)$/;"	f
gemm	tags/before-github-sync/EXTERNAL/eigen3/blas/level3_impl.h	/^int EIGEN_BLAS_FUNC(gemm)(char *opa, char *opb, int *m, int *n, int *k, RealScalar *palpha, RealScalar *pa, int *lda, RealScalar *pb, int *ldb, RealScalar *pbeta, RealScalar *pc, int *ldc)$/;"	f
hemm	tags/before-github-sync/EXTERNAL/eigen3/blas/level3_impl.h	/^int EIGEN_BLAS_FUNC(hemm)(char *side, char *uplo, int *m, int *n, RealScalar *palpha, RealScalar *pa, int *lda, RealScalar *pb, int *ldb, RealScalar *pbeta, RealScalar *pc, int *ldc)$/;"	f
her2k	tags/before-github-sync/EXTERNAL/eigen3/blas/level3_impl.h	/^int EIGEN_BLAS_FUNC(her2k)(char *uplo, char *op, int *n, int *k, RealScalar *palpha, RealScalar *pa, int *lda, RealScalar *pb, int *ldb, RealScalar *pbeta, RealScalar *pc, int *ldc)$/;"	f
herk	tags/before-github-sync/EXTERNAL/eigen3/blas/level3_impl.h	/^int EIGEN_BLAS_FUNC(herk)(char *uplo, char *op, int *n, int *k, RealScalar *palpha, RealScalar *pa, int *lda, RealScalar *pbeta, RealScalar *pc, int *ldc)$/;"	f
symm	tags/before-github-sync/EXTERNAL/eigen3/blas/level3_impl.h	/^int EIGEN_BLAS_FUNC(symm)(char *side, char *uplo, int *m, int *n, RealScalar *palpha, RealScalar *pa, int *lda, RealScalar *pb, int *ldb, RealScalar *pbeta, RealScalar *pc, int *ldc)$/;"	f
syr2k	tags/before-github-sync/EXTERNAL/eigen3/blas/level3_impl.h	/^int EIGEN_BLAS_FUNC(syr2k)(char *uplo, char *op, int *n, int *k, RealScalar *palpha, RealScalar *pa, int *lda, RealScalar *pb, int *ldb, RealScalar *pbeta, RealScalar *pc, int *ldc)$/;"	f
syrk	tags/before-github-sync/EXTERNAL/eigen3/blas/level3_impl.h	/^int EIGEN_BLAS_FUNC(syrk)(char *uplo, char *op, int *n, int *k, RealScalar *palpha, RealScalar *pa, int *lda, RealScalar *pbeta, RealScalar *pc, int *ldc)$/;"	f
trmm	tags/before-github-sync/EXTERNAL/eigen3/blas/level3_impl.h	/^int EIGEN_BLAS_FUNC(trmm)(char *side, char *uplo, char *opa, char *diag, int *m, int *n, RealScalar *palpha,  RealScalar *pa, int *lda, RealScalar *pb, int *ldb)$/;"	f
trsm	tags/before-github-sync/EXTERNAL/eigen3/blas/level3_impl.h	/^int EIGEN_BLAS_FUNC(trsm)(char *side, char *uplo, char *opa, char *diag, int *m, int *n, RealScalar *palpha,  RealScalar *pa, int *lda, RealScalar *pb, int *ldb)$/;"	f
LSAME	tags/before-github-sync/EXTERNAL/eigen3/blas/lsame.f	/^      LOGICAL FUNCTION LSAME(/;"	f
ISCOMPLEX	tags/before-github-sync/EXTERNAL/eigen3/blas/single.cpp	28;"	d	file:
SCALAR	tags/before-github-sync/EXTERNAL/eigen3/blas/single.cpp	25;"	d	file:
SCALAR_SUFFIX	tags/before-github-sync/EXTERNAL/eigen3/blas/single.cpp	26;"	d	file:
SCALAR_SUFFIX_UP	tags/before-github-sync/EXTERNAL/eigen3/blas/single.cpp	27;"	d	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/srotm.f	/^      IF (SFLAG) 50,10,30$/;"	l	subroutine:SROTM	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/srotm.f	/^      GO TO 140$/;"	l	subroutine:SROTM	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/srotm.f	/^          KY = KY + INCY$/;"	l	subroutine:SROTM	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/srotm.f	/^      GO TO 140$/;"	l	subroutine:SROTM	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/srotm.f	/^          KY = KY + INCY$/;"	l	subroutine:SROTM	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/srotm.f	/^  130 CONTINUE$/;"	l	subroutine:SROTM	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/srotm.f	/^          SY(I) = W*SH21 + Z$/;"	l	subroutine:SROTM	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/srotm.f	/^      GO TO 140$/;"	l	subroutine:SROTM	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/srotm.f	/^          SY(I) = -W + SH22*Z$/;"	l	subroutine:SROTM	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/srotm.f	/^      GO TO 140$/;"	l	subroutine:SROTM	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/srotm.f	/^          SY(I) = W*SH21 + Z*SH22$/;"	l	subroutine:SROTM	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/srotm.f	/^      GO TO 140$/;"	l	subroutine:SROTM	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/srotm.f	/^      IF (SFLAG) 120,80,100$/;"	l	subroutine:SROTM	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/srotm.f	/^          KY = KY + INCY$/;"	l	subroutine:SROTM	file:
SROTM	tags/before-github-sync/EXTERNAL/eigen3/blas/srotm.f	/^      SUBROUTINE SROTM(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^      GO TO 60$/;"	l	subroutine:SROTMG	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^*     PROCEDURE..SCALE-CHECK$/;"	l	subroutine:SROTMG	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^  100 CONTINUE$/;"	l	subroutine:SROTMG	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^      GO TO 70$/;"	l	subroutine:SROTMG	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^      GO TO 110$/;"	l	subroutine:SROTMG	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^  130 CONTINUE$/;"	l	subroutine:SROTMG	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^      GO TO 70$/;"	l	subroutine:SROTMG	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^      GO TO 140$/;"	l	subroutine:SROTMG	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^  160 CONTINUE$/;"	l	subroutine:SROTMG	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^      GO TO 70$/;"	l	subroutine:SROTMG	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^      GO TO 170$/;"	l	subroutine:SROTMG	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^*     REGULAR-CASE..$/;"	l	subroutine:SROTMG	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^  190 CONTINUE$/;"	l	subroutine:SROTMG	file:
210	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^      GO TO 70$/;"	l	subroutine:SROTMG	file:
220	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^      GO TO 200$/;"	l	subroutine:SROTMG	file:
230	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^      IF (SFLAG) 250,230,240$/;"	l	subroutine:SROTMG	file:
240	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^      GO TO 260$/;"	l	subroutine:SROTMG	file:
250	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^      GO TO 260$/;"	l	subroutine:SROTMG	file:
260	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^      SPARAM(5) = SH22$/;"	l	subroutine:SROTMG	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^      GO TO 60$/;"	l	subroutine:SROTMG	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^      GO TO 100$/;"	l	subroutine:SROTMG	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^      GO TO 60$/;"	l	subroutine:SROTMG	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^*     PROCEDURE..ZERO-H-D-AND-SX1..$/;"	l	subroutine:SROTMG	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^*     PROCEDURE..FIX-H..$/;"	l	subroutine:SROTMG	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^      GO TO 90$/;"	l	subroutine:SROTMG	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^      SFLAG = -ONE$/;"	l	subroutine:SROTMG	file:
SROTMG	tags/before-github-sync/EXTERNAL/eigen3/blas/srotmg.f	/^      SUBROUTINE SROTMG(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/ssbmv.f	/^                      Y(I) = ZERO$/;"	l	subroutine:SSBMV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/ssbmv.f	/^                  Y(J) = Y(J) + ALPHA*TEMP2$/;"	l	subroutine:SSBMV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/ssbmv.f	/^                      TEMP2 = TEMP2 + A(L+I,J)*X(IX)$/;"	l	subroutine:SSBMV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/ssbmv.f	/^                  JY = JY + INCY$/;"	l	subroutine:SSBMV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/ssbmv.f	/^                      Y(I) = BETA*Y(I)$/;"	l	subroutine:SSBMV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/ssbmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:SSBMV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/ssbmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:SSBMV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/ssbmv.f	/^                      TEMP2 = TEMP2 + A(L+I,J)*X(I)$/;"	l	subroutine:SSBMV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/ssbmv.f	/^                  Y(J) = Y(J) + TEMP1*A(KPLUS1,J) + ALPHA*TEMP2$/;"	l	subroutine:SSBMV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/ssbmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:SSBMV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/ssbmv.f	/^                  END IF$/;"	l	subroutine:SSBMV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/ssbmv.f	/^                      TEMP2 = TEMP2 + A(L+I,J)*X(I)$/;"	l	subroutine:SSBMV	file:
SSBMV	tags/before-github-sync/EXTERNAL/eigen3/blas/ssbmv.f	/^      SUBROUTINE SSBMV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/sspmv.f	/^                      Y(I) = ZERO$/;"	l	subroutine:SSPMV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/sspmv.f	/^                  KK = KK + (N-J+1)$/;"	l	subroutine:SSPMV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/sspmv.f	/^                      TEMP2 = TEMP2 + AP(K)*X(IX)$/;"	l	subroutine:SSPMV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/sspmv.f	/^                  KK = KK + (N-J+1)$/;"	l	subroutine:SSPMV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/sspmv.f	/^                      Y(I) = BETA*Y(I)$/;"	l	subroutine:SSPMV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/sspmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:SSPMV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/sspmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:SSPMV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/sspmv.f	/^                      K = K + 1$/;"	l	subroutine:SSPMV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/sspmv.f	/^                  KK = KK + J$/;"	l	subroutine:SSPMV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/sspmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:SSPMV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/sspmv.f	/^                  KK = KK + J$/;"	l	subroutine:SSPMV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/sspmv.f	/^                      K = K + 1$/;"	l	subroutine:SSPMV	file:
SSPMV	tags/before-github-sync/EXTERNAL/eigen3/blas/sspmv.f	/^      SUBROUTINE SSPMV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/sspr.f	/^                          K = K + 1$/;"	l	subroutine:SSPR	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/sspr.f	/^                  KK = KK + J$/;"	l	subroutine:SSPR	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/sspr.f	/^                          IX = IX + INCX$/;"	l	subroutine:SSPR	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/sspr.f	/^                  KK = KK + J$/;"	l	subroutine:SSPR	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/sspr.f	/^                          K = K + 1$/;"	l	subroutine:SSPR	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/sspr.f	/^                  KK = KK + N - J + 1$/;"	l	subroutine:SSPR	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/sspr.f	/^                          IX = IX + INCX$/;"	l	subroutine:SSPR	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/sspr.f	/^                  KK = KK + N - J + 1$/;"	l	subroutine:SSPR	file:
SSPR	tags/before-github-sync/EXTERNAL/eigen3/blas/sspr.f	/^      SUBROUTINE SSPR(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/sspr2.f	/^                          K = K + 1$/;"	l	subroutine:SSPR2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/sspr2.f	/^                  KK = KK + J$/;"	l	subroutine:SSPR2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/sspr2.f	/^                          IY = IY + INCY$/;"	l	subroutine:SSPR2	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/sspr2.f	/^                  KK = KK + J$/;"	l	subroutine:SSPR2	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/sspr2.f	/^                          K = K + 1$/;"	l	subroutine:SSPR2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/sspr2.f	/^                  KK = KK + N - J + 1$/;"	l	subroutine:SSPR2	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/sspr2.f	/^                          IY = IY + INCY$/;"	l	subroutine:SSPR2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/sspr2.f	/^                  KK = KK + N - J + 1$/;"	l	subroutine:SSPR2	file:
SSPR2	tags/before-github-sync/EXTERNAL/eigen3/blas/sspr2.f	/^      SUBROUTINE SSPR2(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/stbmv.f	/^                              X(I) = X(I) + TEMP*A(L+I,J)$/;"	l	subroutine:STBMV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/stbmv.f	/^                      X(J) = TEMP$/;"	l	subroutine:STBMV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/stbmv.f	/^                          IX = IX - INCX$/;"	l	subroutine:STBMV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/stbmv.f	/^                      JX = JX - INCX$/;"	l	subroutine:STBMV	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/stbmv.f	/^                          TEMP = TEMP + A(L+I,J)*X(I)$/;"	l	subroutine:STBMV	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/stbmv.f	/^                      X(J) = TEMP$/;"	l	subroutine:STBMV	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/stbmv.f	/^                          IX = IX + INCX$/;"	l	subroutine:STBMV	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/stbmv.f	/^                      JX = JX + INCX$/;"	l	subroutine:STBMV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/stbmv.f	/^                      END IF$/;"	l	subroutine:STBMV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/stbmv.f	/^                              IX = IX + INCX$/;"	l	subroutine:STBMV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/stbmv.f	/^                      IF (J.GT.K) KX = KX + INCX$/;"	l	subroutine:STBMV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/stbmv.f	/^                              X(I) = X(I) + TEMP*A(L+I,J)$/;"	l	subroutine:STBMV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/stbmv.f	/^                      END IF$/;"	l	subroutine:STBMV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/stbmv.f	/^                              IX = IX - INCX$/;"	l	subroutine:STBMV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/stbmv.f	/^                      IF ((N-J).GE.K) KX = KX - INCX$/;"	l	subroutine:STBMV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/stbmv.f	/^                          TEMP = TEMP + A(L+I,J)*X(I)$/;"	l	subroutine:STBMV	file:
STBMV	tags/before-github-sync/EXTERNAL/eigen3/blas/stbmv.f	/^      SUBROUTINE STBMV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/stbsv.f	/^                              X(I) = X(I) - TEMP*A(L+I,J)$/;"	l	subroutine:STBSV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/stbsv.f	/^                      X(J) = TEMP$/;"	l	subroutine:STBSV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/stbsv.f	/^                          IX = IX + INCX$/;"	l	subroutine:STBSV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/stbsv.f	/^                      IF (J.GT.K) KX = KX + INCX$/;"	l	subroutine:STBSV	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/stbsv.f	/^                          TEMP = TEMP - A(L+I,J)*X(I)$/;"	l	subroutine:STBSV	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/stbsv.f	/^                      X(J) = TEMP$/;"	l	subroutine:STBSV	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/stbsv.f	/^                          IX = IX - INCX$/;"	l	subroutine:STBSV	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/stbsv.f	/^                      IF ((N-J).GE.K) KX = KX - INCX$/;"	l	subroutine:STBSV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/stbsv.f	/^                      END IF$/;"	l	subroutine:STBSV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/stbsv.f	/^                              IX = IX - INCX$/;"	l	subroutine:STBSV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/stbsv.f	/^                      JX = JX - INCX$/;"	l	subroutine:STBSV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/stbsv.f	/^                              X(I) = X(I) - TEMP*A(L+I,J)$/;"	l	subroutine:STBSV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/stbsv.f	/^                      END IF$/;"	l	subroutine:STBSV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/stbsv.f	/^                              IX = IX + INCX$/;"	l	subroutine:STBSV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/stbsv.f	/^                      JX = JX + INCX$/;"	l	subroutine:STBSV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/stbsv.f	/^                          TEMP = TEMP - A(L+I,J)*X(I)$/;"	l	subroutine:STBSV	file:
STBSV	tags/before-github-sync/EXTERNAL/eigen3/blas/stbsv.f	/^      SUBROUTINE STBSV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/stpmv.f	/^                              K = K + 1$/;"	l	subroutine:STPMV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/stpmv.f	/^                      KK = KK - J$/;"	l	subroutine:STPMV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/stpmv.f	/^                          TEMP = TEMP + AP(K)*X(IX)$/;"	l	subroutine:STPMV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/stpmv.f	/^                      KK = KK - J$/;"	l	subroutine:STPMV	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/stpmv.f	/^                          K = K + 1$/;"	l	subroutine:STPMV	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/stpmv.f	/^                      KK = KK + (N-J+1)$/;"	l	subroutine:STPMV	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/stpmv.f	/^                          TEMP = TEMP + AP(K)*X(IX)$/;"	l	subroutine:STPMV	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/stpmv.f	/^                      KK = KK + (N-J+1)$/;"	l	subroutine:STPMV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/stpmv.f	/^                      KK = KK + J$/;"	l	subroutine:STPMV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/stpmv.f	/^                              IX = IX + INCX$/;"	l	subroutine:STPMV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/stpmv.f	/^                      KK = KK + J$/;"	l	subroutine:STPMV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/stpmv.f	/^                              K = K - 1$/;"	l	subroutine:STPMV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/stpmv.f	/^                      KK = KK - (N-J+1)$/;"	l	subroutine:STPMV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/stpmv.f	/^                              IX = IX - INCX$/;"	l	subroutine:STPMV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/stpmv.f	/^                      KK = KK - (N-J+1)$/;"	l	subroutine:STPMV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/stpmv.f	/^                          K = K - 1$/;"	l	subroutine:STPMV	file:
STPMV	tags/before-github-sync/EXTERNAL/eigen3/blas/stpmv.f	/^      SUBROUTINE STPMV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/stpsv.f	/^                              K = K - 1$/;"	l	subroutine:STPSV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/stpsv.f	/^                      KK = KK + J$/;"	l	subroutine:STPSV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/stpsv.f	/^                          IX = IX + INCX$/;"	l	subroutine:STPSV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/stpsv.f	/^                      KK = KK + J$/;"	l	subroutine:STPSV	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/stpsv.f	/^                          K = K - 1$/;"	l	subroutine:STPSV	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/stpsv.f	/^                      KK = KK - (N-J+1)$/;"	l	subroutine:STPSV	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/stpsv.f	/^                          IX = IX - INCX$/;"	l	subroutine:STPSV	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/stpsv.f	/^                      KK = KK - (N-J+1)$/;"	l	subroutine:STPSV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/stpsv.f	/^                      KK = KK - J$/;"	l	subroutine:STPSV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/stpsv.f	/^                              X(IX) = X(IX) - TEMP*AP(K)$/;"	l	subroutine:STPSV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/stpsv.f	/^                      KK = KK - J$/;"	l	subroutine:STPSV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/stpsv.f	/^                              K = K + 1$/;"	l	subroutine:STPSV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/stpsv.f	/^                      KK = KK + (N-J+1)$/;"	l	subroutine:STPSV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/stpsv.f	/^                              X(IX) = X(IX) - TEMP*AP(K)$/;"	l	subroutine:STPSV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/stpsv.f	/^                      KK = KK + (N-J+1)$/;"	l	subroutine:STPSV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/stpsv.f	/^                          K = K + 1$/;"	l	subroutine:STPSV	file:
STPSV	tags/before-github-sync/EXTERNAL/eigen3/blas/stpsv.f	/^      SUBROUTINE STPSV(/;"	s
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^            MWPCS(I) = (1.0E0,1.0E0)$/;"	l	subroutine:CHECK1	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^            MWPCS(I) = CX(I)$/;"	l	subroutine:CHECK1	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^            MWPCS(I) = -CX(I)$/;"	l	subroutine:CHECK1	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^               CX(I) = CV(I,NP1,INCX)$/;"	l	subroutine:CHECK1	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^               CY(I) = CY1(I)$/;"	l	subroutine:CHECK2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^         IF (PASS) WRITE (NOUT,99998)$/;"	l	program:CBLAT1	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^         SSIZE(2*I) = AIMAG(CSIZE(I))$/;"	l	subroutine:CTEST	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^         WRITE (NOUT,99998)$/;"	l	subroutine:STEST	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      WRITE (NOUT,99998)$/;"	l	subroutine:ITEST1	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      WRITE (NOUT,99997) ICASE, N, INCX, INCY, MODE, ICOMP, ITRUE, ID$/;"	l	subroutine:ITEST1	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^     +     STRUE(I), SD, SSIZE(I)$/;"	l	subroutine:STEST	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^*$/;"	l	subroutine:CHECK1	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^*$/;"	l	subroutine:CHECK2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^   40    CONTINUE$/;"	l	subroutine:CHECK1	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^   40    CONTINUE$/;"	l	subroutine:CHECK2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^            MWPCS(I) = (1.0E0,1.0E0)$/;"	l	subroutine:CHECK1	file:
99997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^     +       '     SIZE(I)',\/1X)$/;"	l	subroutine:STEST	file:
99997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^     +       \/1X)$/;"	l	subroutine:ITEST1	file:
99998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^99999 FORMAT ('                                       FAIL')$/;"	l	subroutine:ITEST1	file:
99998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^99999 FORMAT ('                                       FAIL')$/;"	l	subroutine:STEST	file:
99998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^99999 FORMAT (' Complex BLAS Test Program Results',\/1X)$/;"	l	program:CBLAT1	file:
99999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^*$/;"	l	program:CBLAT1	file:
99999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^*$/;"	l	subroutine:HEADER	file:
99999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^*$/;"	l	subroutine:ITEST1	file:
99999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^*$/;"	l	subroutine:STEST	file:
CBLAT1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      PROGRAM CBLAT1$/;"	p
CHECK1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      SUBROUTINE CHECK1(/;"	s
CHECK2	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      SUBROUTINE CHECK2(/;"	s
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	103;"	c	subroutine:CHECK1
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	17;"	c	program:CBLAT1
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	302;"	c	subroutine:CHECK2
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	550;"	c	subroutine:STEST
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	58;"	c	subroutine:HEADER
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	660;"	c	subroutine:ITEST1
CTEST	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      SUBROUTINE CTEST(/;"	s
HEADER	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      SUBROUTINE HEADER$/;"	s
IC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      INTEGER          IC$/;"	v	program:CBLAT1
ICASE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      INTEGER          ICASE,/;"	v	program:CBLAT1
INCX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      INTEGER          ICASE, INCX,/;"	v	program:CBLAT1
INCY	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      INTEGER          ICASE, INCX, INCY,/;"	v	program:CBLAT1
ITEST1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      SUBROUTINE ITEST1(/;"	s
MODE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      INTEGER          ICASE, INCX, INCY, MODE,/;"	v	program:CBLAT1
N	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      INT/;"	v	program:CBLAT1
NOUT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      INTEGER          NOUT$/;"	v	program:CBLAT1
PASS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      LOGICAL          PASS$/;"	v	program:CBLAT1
SDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      REAL             FUNCTION SDIFF(/;"	f
SFAC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      REAL             SFAC$/;"	v	program:CBLAT1
STEST	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      SUBROUTINE STEST(/;"	s
STEST1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat1.f	/^      SUBROUTINE STEST1(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                                 AS( I ) = AA( I )$/;"	l	subroutine:CCHK1	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                              AS( I ) = AA( I )$/;"	l	subroutine:CCHK2	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                        AS( I ) = AA( I )$/;"	l	subroutine:CCHK4	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                        AS( I ) = AA( I )$/;"	l	subroutine:CCHK6	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                     AS( I ) = AA( I )$/;"	l	subroutine:CCHK5	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^               JX = JX + INCXL$/;"	l	subroutine:CMVCH	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^            END IF$/;"	l	subroutine:CMAKE	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^         END IF$/;"	l	program:CBLAT2	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^         Z( I ) = ZERO$/;"	l	subroutine:CCHK3	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      IC = IC + 1$/;"	l	function:CBEG	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $            GO TO 70$/;"	l	function:LCERES	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $        170 )ISNUM$/;"	l	subroutine:CCHKE	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      GO TO 20$/;"	l	function:LCE	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:CMAKE	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      GO TO 180$/;"	l	subroutine:CCHKE	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      GO TO 90$/;"	l	program:CBLAT2	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK1	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK2	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK3	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK4	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK5	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK6	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^               AA( I + ( J - 1 )*LDA ) = A( I, J )$/;"	l	subroutine:CMAKE	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^            A( I, J ) = MAX( I - J + 1, 0 )$/;"	l	program:CBLAT2	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      GO TO 180$/;"	l	subroutine:CCHKE	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK1	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK2	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK3	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK4	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK5	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK6	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:CMAKE	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^         Y( J ) = ZERO$/;"	l	program:CBLAT2	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      GO TO 180$/;"	l	subroutine:CCHKE	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK1	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK2	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK3	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK4	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK5	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK6	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^            END IF$/;"	l	subroutine:CMAKE	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^         YY( J ) = J*( ( J + 1 )*J )\/2 - ( ( J + 1 )*J*( J - 1 ) )\/3$/;"	l	program:CBLAT2	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      GO TO 180$/;"	l	subroutine:CCHKE	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK1	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK2	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK3	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK4	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK5	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK6	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:CMAKE	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      GO TO 180$/;"	l	subroutine:CCHKE	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*           Test CGEMV, 01, and CGBMV, 02.$/;"	l	program:CBLAT2	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK1	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK4	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK6	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^               AA( I + ( J - 1 )*LDA ) = A( I + J - KK, J )$/;"	l	subroutine:CMAKE	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      GO TO 180$/;"	l	subroutine:CCHKE	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*           Test CHEMV, 03, CHBMV, 04, and CHPMV, 05.$/;"	l	program:CBLAT2	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK4	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK6	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:CMAKE	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      GO TO 180$/;"	l	subroutine:CCHKE	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*           CTRSV, 09, CTBSV, 10, and CTPSV, 11.$/;"	l	program:CBLAT2	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK6	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^            END IF$/;"	l	subroutine:CMAKE	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      GO TO 180$/;"	l	subroutine:CCHKE	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*           Test CGERC, 12, CGERU, 13.$/;"	l	program:CBLAT2	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK6	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^               END IF$/;"	l	subroutine:CMAKE	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*           Test CHER, 14, and CHPR, 15.$/;"	l	program:CBLAT2	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHKE	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^  180       CONTINUE$/;"	l	subroutine:CMAKE	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*           Test CHER2, 16, and CHPR2, 17.$/;"	l	program:CBLAT2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                                 XS( I ) = XX( I )$/;"	l	subroutine:CCHK1	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                              XS( I ) = XX( I )$/;"	l	subroutine:CCHK2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                           AS( I ) = AA( I )$/;"	l	subroutine:CCHK3	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                        XS( I ) = XX( I )$/;"	l	subroutine:CCHK4	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                        XS( I ) = XX( I )$/;"	l	subroutine:CCHK6	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                     XS( I ) = XX( I )$/;"	l	subroutine:CCHK5	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^               JX = JX + INCXL$/;"	l	subroutine:CMVCH	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^         END IF$/;"	l	program:CBLAT2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      GO TO 180$/;"	l	subroutine:CCHKE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      GO TO 30$/;"	l	function:LCE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      A( J, J ) = ONE$/;"	l	subroutine:CMAKE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^   10       CONTINUE$/;"	l	function:LCERES	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	program:CBLAT2	file:
210	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^         END IF$/;"	l	program:CBLAT2	file:
220	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	program:CBLAT2	file:
230	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	program:CBLAT2	file:
240	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	program:CBLAT2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                                 YS( I ) = YY( I )$/;"	l	subroutine:CCHK1	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                              YS( I ) = YY( I )$/;"	l	subroutine:CCHK2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                           XS( I ) = XX( I )$/;"	l	subroutine:CCHK3	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                        YS( I ) = YY( I )$/;"	l	subroutine:CCHK4	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                        YS( I ) = YY( I )$/;"	l	subroutine:CCHK6	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^               AA( I + ( J - 1 )*LDA ) = A( I, J )$/;"	l	subroutine:CMAKE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^               JX = JX + INCXL$/;"	l	subroutine:CMVCH	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^         END IF$/;"	l	program:CBLAT2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      GO TO 180$/;"	l	subroutine:CCHKE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      LCE = .FALSE.$/;"	l	function:LCE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                  WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:CCHK5	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $            GO TO 70$/;"	l	function:LCERES	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                           Z( I ) = X( I )$/;"	l	subroutine:CCHK5	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:CMAKE	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^         IY = IY + INCYL$/;"	l	subroutine:CMVCH	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^         LTEST( I ) = .FALSE.$/;"	l	program:CBLAT2	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      GO TO 180$/;"	l	subroutine:CCHKE	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                              WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:CCHK1	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                           WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:CCHK2	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                        WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:CCHK3	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                     WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:CCHK4	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                     WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:CCHK6	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $            GO TO 70$/;"	l	function:LCERES	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                              Z( I ) = X( I )$/;"	l	subroutine:CCHK4	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                              Z( I, 1 ) = X( I )$/;"	l	subroutine:CCHK6	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                           Z( I ) = X( N - I + 1 )$/;"	l	subroutine:CCHK5	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      GO TO 180$/;"	l	subroutine:CCHKE	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                              = X( I )$/;"	l	subroutine:CCHK3	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      GO TO 60$/;"	l	subroutine:CMVCH	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^   40       CONTINUE$/;"	l	function:LCERES	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^   40       CONTINUE$/;"	l	subroutine:CMAKE	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^   40 CONTINUE$/;"	l	program:CBLAT2	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK1	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                              Z( I ) = X( M - I + 1 )$/;"	l	subroutine:CCHK4	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                              Z( I, 1 ) = X( N - I + 1 )$/;"	l	subroutine:CCHK6	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^               AA( I1 + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:CMAKE	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      GO TO 180$/;"	l	subroutine:CCHKE	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                     GO TO 110$/;"	l	subroutine:CCHK5	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      GO TO 70$/;"	l	program:CBLAT2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	function:LCERES	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK1	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK3	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CMVCH	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                              Z( I, 2 ) = Y( I )$/;"	l	subroutine:CCHK6	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^               AA( I2 + ( J - 1 )*LDA ) = A( I2 + J - KU - 1, J )$/;"	l	subroutine:CMAKE	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^         END IF$/;"	l	subroutine:CMVCH	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      GO TO 180$/;"	l	subroutine:CCHKE	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      GO TO 80$/;"	l	function:LCERES	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      STOP$/;"	l	program:CBLAT2	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                        GO TO 130$/;"	l	subroutine:CCHK4	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK1	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK2	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK3	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK5	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^                              Z( I, 2 ) = Y( N - I + 1 )$/;"	l	subroutine:CCHK6	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^               AA( I3 + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:CMAKE	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      GO TO 180$/;"	l	subroutine:CCHKE	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      LCERES = .FALSE.$/;"	l	function:LCERES	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	program:CBLAT2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK1	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK3	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK4	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK5	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CMVCH	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      EPS = RONE$/;"	l	program:CBLAT2	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      GO TO 180$/;"	l	subroutine:CCHKE	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                        GO TO 150$/;"	l	subroutine:CCHK6	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^   80       CONTINUE$/;"	l	subroutine:CMAKE	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK1	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK2	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK3	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK4	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK5	file:
9980	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9981 FORMAT( \/' ******* FATAL ERROR - TESTS ABANDONED *******' )$/;"	l	program:CBLAT2	file:
9981	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9982 FORMAT( \/' END OF TESTS' )$/;"	l	program:CBLAT2	file:
9982	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9983 FORMAT( 1X, A6, ' WAS NOT TESTED' )$/;"	l	program:CBLAT2	file:
9983	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9984 FORMAT( A6, L2 )$/;"	l	program:CBLAT2	file:
9984	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      , \/' ******* TESTS ABANDONED *******' )$/;"	l	program:CBLAT2	file:
9985	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'ESTS ABANDONED *******' )$/;"	l	program:CBLAT2	file:
9986	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      \/' ******* TESTS ABANDONED *******' )$/;"	l	program:CBLAT2	file:
9987	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      7( '(', F4.1, ',', F4.1, ')  ', : ) )$/;"	l	program:CBLAT2	file:
9988	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      7( '(', F4.1, ',', F4.1, ')  ', : ) )$/;"	l	program:CBLAT2	file:
9989	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9990 FORMAT( '   FOR INCX AND INCY  ', 7I6 )$/;"	l	program:CBLAT2	file:
9990	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9991 FORMAT( '   FOR K              ', 7I6 )$/;"	l	program:CBLAT2	file:
9991	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9992 FORMAT( '   FOR N              ', 9I6 )$/;"	l	program:CBLAT2	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      '            .' )$/;"	l	subroutine:CCHK6	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'OLLOWING PARAMETER VALUES WILL BE USED:' )$/;"	l	program:CBLAT2	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'Y,', I2, ')             .' )$/;"	l	subroutine:CCHK2	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      I2, ', A,', I3, ')                                      .' )$/;"	l	subroutine:CCHK5	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      I3, ', X,', I2, ')                                   .' )$/;"	l	subroutine:CCHK3	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      '       .' )$/;"	l	subroutine:CCHK6	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      '      .' )$/;"	l	subroutine:CCHK4	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      ' A,', I3, ', X,', I2, ')                               .' )$/;"	l	subroutine:CCHK3	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      F4.1, '), Y,', I2, ')         .' )$/;"	l	subroutine:CCHK1	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      F4.1, '), Y,', I2, ')         .' )$/;"	l	subroutine:CCHK2	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      I2 )$/;"	l	program:CBLAT2	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      I2, ', AP)                                         .' )$/;"	l	subroutine:CCHK5	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      ')                .' )$/;"	l	subroutine:CCHK2	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'X,', I2, ')                                      .' )$/;"	l	subroutine:CCHK3	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      F4.1, '), Y,', I2, ') .' )$/;"	l	subroutine:CCHK1	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:CCHK4	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:CCHK5	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:CCHK6	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9995 FORMAT( ' VALUE OF K IS LESS THAN 0' )$/;"	l	program:CBLAT2	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:CCHK1	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:CCHK2	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:CCHK3	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:CCHK4	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:CCHK5	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:CCHK6	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9996 FORMAT( ' VALUE OF N IS LESS THAN 0 OR GREATER THAN ', I2 )$/;"	l	program:CBLAT2	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:CCHK1	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:CCHK2	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:CCHK3	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:CCHK4	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:CCHK5	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:CCHK6	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'THAN ', I2 )$/;"	l	program:CBLAT2	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'AD OF ', A6, ' *******' )$/;"	l	subroutine:XERBLA	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:CCHK1	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:CCHK2	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:CCHK3	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:CCHK4	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:CCHK5	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:CCHK6	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9998 FORMAT( ' RELATIVE MACHINE PRECISION IS TAKEN TO BE', 1P, E9.1 )$/;"	l	program:CBLAT2	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      ' OF ', I2, ' *******' )$/;"	l	subroutine:XERBLA	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'S THAN', F8.2 )$/;"	l	program:CBLAT2	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'S)' )$/;"	l	subroutine:CCHK1	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'S)' )$/;"	l	subroutine:CCHK2	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'S)' )$/;"	l	subroutine:CCHK3	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'S)' )$/;"	l	subroutine:CCHK4	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'S)' )$/;"	l	subroutine:CCHK5	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'S)' )$/;"	l	subroutine:CCHK6	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $      'SULT                    COMPUTED RESULT' )$/;"	l	subroutine:CMVCH	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^ 9999 FORMAT( ' ', A6, ' PASSED THE TESTS OF ERROR-EXITS' )$/;"	l	subroutine:CCHKE	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	program:CBLAT2	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK1	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK2	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK3	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK4	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK5	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHK6	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CCHKE	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CHKXER	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:CMVCH	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^*$/;"	l	subroutine:XERBLA	file:
A	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      COMPLEX            A(/;"	v	program:CBLAT2
AA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      COMPLEX            A( NMAX, NMAX ), AA(/;"	v	program:CBLAT2
ALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      COMPLEX            A( NMAX, NMAX ), AA( NMAX*NMAX ),$/;"	v	program:CBLAT2
AS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                   ALF( NALMAX ), AS(/;"	v	program:CBLAT2
BET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                   ALF( NALMAX ), AS( NMAX*NMAX ), BET(/;"	v	program:CBLAT2
CBEG	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      COMPLEX FUNCTION CBEG(/;"	f
CBLAT2	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      PROGRAM CBLAT2$/;"	p
CCHK1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      SUBROUTINE CCHK1(/;"	s
CCHK2	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      SUBROUTINE CCHK2(/;"	s
CCHK3	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      SUBROUTINE CCHK3(/;"	s
CCHK4	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      SUBROUTINE CCHK4(/;"	s
CCHK5	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      SUBROUTINE CCHK5(/;"	s
CCHK6	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      SUBROUTINE CCHK6(/;"	s
CCHKE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      SUBROUTINE CCHKE(/;"	s
CHKXER	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      SUBROUTINE CHKXER(/;"	s
CMAKE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      SUBROUTINE CMAKE(/;"	s
CMVCH	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      SUBROUTINE CMVCH(/;"	s
EPS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      REAL               EPS,/;"	v	program:CBLAT2
ERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      REAL               EPS, ERR,/;"	v	program:CBLAT2
FATAL	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      LOGICAL            FATAL,/;"	v	program:CBLAT2
G	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      REAL               G(/;"	v	program:CBLAT2
I	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      IN/;"	v	program:CBLAT2
IDIM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            IDIM(/;"	v	program:CBLAT2
INC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            IDIM( NIDMAX ), INC(/;"	v	program:CBLAT2
INCMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            NMAX, INCMAX$/;"	v	program:CBLAT2
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	1143;"	c	subroutine:CCHK3
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	115;"	c	program:CBLAT2
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	1505;"	c	subroutine:CCHK4
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	1783;"	c	subroutine:CCHK5
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	2068;"	c	subroutine:CCHK6
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	2363;"	c	subroutine:CCHKE
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	3213;"	c	subroutine:XERBLA
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	453;"	c	subroutine:CCHK1
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	797;"	c	subroutine:CCHK2
INFOT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            INFOT,/;"	v	program:CBLAT2
ISNUM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            I, ISNUM,/;"	v	program:CBLAT2
J	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            I, ISNUM, J,/;"	v	program:CBLAT2
KB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            IDIM( NIDMAX ), INC( NINMAX ), KB(/;"	v	program:CBLAT2
LCE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      LOGICAL            LCE$/;"	v	program:CBLAT2
LCE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      LOGICAL FUNCTION LCE(/;"	f
LCERES	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      LOGICAL FUNCTION LCERES(/;"	f
LERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      LOGICAL            LERR,/;"	v	program:CBLAT2
LTEST	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      LOGICAL            LTEST(/;"	v	program:CBLAT2
LTESTT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      LOGICAL            FATAL, LTESTT,/;"	v	program:CBLAT2
N	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INT/;"	v	program:CBLAT2
NALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF,/;"	v	program:CBLAT2
NALMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            NINMAX, NIDMAX, NKBMAX, NALMAX,/;"	v	program:CBLAT2
NBEMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            NINMAX, NIDMAX, NKBMAX, NALMAX, NBEMAX$/;"	v	program:CBLAT2
NBET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET,/;"	v	program:CBLAT2
NIDIM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM,/;"	v	program:CBLAT2
NIDMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            NINMAX, NIDMAX,/;"	v	program:CBLAT2
NIN	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            NIN$/;"	v	program:CBLAT2
NINC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NINC,/;"	v	program:CBLAT2
NINMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            NINMAX,/;"	v	program:CBLAT2
NKB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NINC, NKB,/;"	v	program:CBLAT2
NKBMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            NINMAX, NIDMAX, NKBMAX,/;"	v	program:CBLAT2
NMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            NMAX,/;"	v	program:CBLAT2
NOUT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NINC, NKB,$/;"	v	program:CBLAT2
NOUTC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            INFOT, NOUTC$/;"	v	program:CBLAT2
NSUBS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      INTEGER            NSUBS$/;"	v	program:CBLAT2
NTRA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                   NOUT, NTRA$/;"	v	program:CBLAT2
OK	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      LOGICAL            LERR, OK$/;"	v	program:CBLAT2
ONE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      COMPLEX            ZERO, ONE$/;"	v	program:CBLAT2
REWI	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI,/;"	v	program:CBLAT2
RHALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      REAL               RZERO, RHALF,/;"	v	program:CBLAT2
RONE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      REAL               RZERO, RHALF, RONE$/;"	v	program:CBLAT2
RZERO	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      REAL               RZERO,/;"	v	program:CBLAT2
SAME	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME,/;"	v	program:CBLAT2
SDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      REAL               SDIFF$/;"	v	program:CBLAT2
SDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      REAL FUNCTION SDIFF(/;"	f
SFATAL	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL,/;"	v	program:CBLAT2
SNAMES	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      CHARACTER*6        SNAMES(/;"	v	program:CBLAT2
SNAMET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      CHARACTER*6        SNAMET$/;"	v	program:CBLAT2
SNAPS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      CHARACTER*32       SNAPS,/;"	v	program:CBLAT2
SRNAMC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	116;"	c	program:CBLAT2
SRNAMC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	3214;"	c	subroutine:XERBLA
SRNAMT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      CHARACTER*6        SRNAMT$/;"	v	program:CBLAT2
SUMMRY	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      CHARACTER*32       SNAPS, SUMMRY$/;"	v	program:CBLAT2
THRESH	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      REAL               EPS, ERR, THRESH$/;"	v	program:CBLAT2
TRACE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL, TRACE,/;"	v	program:CBLAT2
TRANS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      CHARACTER*1        TRANS$/;"	v	program:CBLAT2
TSTERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL, TRACE,$/;"	v	program:CBLAT2
X	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                   ALF( NALMAX /;"	v	program:CBLAT2
XERBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      SUBROUTINE XERBLA(/;"	s
XS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                   X( NMAX ), XS(/;"	v	program:CBLAT2
XX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                   X( NMAX ), XS( NMAX*INCMAX ),$/;"	v	program:CBLAT2
Y	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                   XX( NMAX*INCMAX ), Y(/;"	v	program:CBLAT2
YS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                   XX( NMAX*INCMAX ), Y( NMAX ),$/;"	v	program:CBLAT2
YT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                   YS( NMAX*INCMAX ), YT(/;"	v	program:CBLAT2
YY	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                   YS( NMAX*INCMAX ), YT( NMAX ),$/;"	v	program:CBLAT2
Z	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^     $                   YY( NMAX*INCMAX ), Z(/;"	v	program:CBLAT2
ZERO	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat2.f	/^      COMPLEX            ZERO,/;"	v	program:CBLAT2
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^                              AS( I ) = AA( I )$/;"	l	subroutine:CCHK1	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^                           AS( I ) = AA( I )$/;"	l	subroutine:CCHK2	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^                           AS( I ) = AA( I )$/;"	l	subroutine:CCHK4	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^                           AS( I ) = AA( I )$/;"	l	subroutine:CCHK5	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^            C( I, J ) = ZERO$/;"	l	subroutine:CCHK3	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^            END IF$/;"	l	subroutine:CMAKE	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^            G( I ) = RZERO$/;"	l	subroutine:CMMCH	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^         END IF$/;"	l	program:CBLAT3	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      IC = IC + 1$/;"	l	function:CBEG	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $            GO TO 70$/;"	l	function:LCERES	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $        90 )ISNUM$/;"	l	subroutine:CCHKE	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      GO TO 20$/;"	l	function:LCE	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^         C( J, 1 ) = ZERO$/;"	l	program:CBLAT3	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                        ABS1( B( J, K ) )$/;"	l	subroutine:CMMCH	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK1	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK2	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK3	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK4	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK5	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHKE	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^         CC( J ) = J*( ( J + 1 )*J )\/2 - ( ( J + 1 )*J*( J - 1 ) )\/3$/;"	l	program:CBLAT3	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^  100             CONTINUE$/;"	l	subroutine:CMMCH	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK1	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK2	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK3	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK4	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK5	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^         AB( 1, NMAX + J ) = N - J + 1$/;"	l	program:CBLAT3	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                           ABS1( B( J, K ) )$/;"	l	subroutine:CMMCH	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK1	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK2	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK3	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK4	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK5	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                     ( ( J + 1 )*J*( J - 1 ) )\/3$/;"	l	program:CBLAT3	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^  120                CONTINUE$/;"	l	subroutine:CMMCH	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK1	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK3	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK4	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK5	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                           ABS1( B( J, K ) )$/;"	l	subroutine:CMMCH	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*           Test CGEMM, 01.$/;"	l	program:CBLAT3	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK3	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK5	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^  140                CONTINUE$/;"	l	subroutine:CMMCH	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*           Test CHEMM, 02, CSYMM, 03.$/;"	l	program:CBLAT3	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK3	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK5	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                           ABS1( B( J, K ) )$/;"	l	subroutine:CMMCH	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*           Test CTRMM, 04, CTRSM, 05.$/;"	l	program:CBLAT3	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK3	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK5	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^  160                CONTINUE$/;"	l	subroutine:CMMCH	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*           Test CHERK, 06, CSYRK, 07.$/;"	l	program:CBLAT3	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                           ABS1( B( J, K ) )$/;"	l	subroutine:CMMCH	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*           Test CHER2K, 08, CSYR2K, 09.$/;"	l	program:CBLAT3	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^  180                CONTINUE$/;"	l	subroutine:CMMCH	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	program:CBLAT3	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^                              BS( I ) = BB( I )$/;"	l	subroutine:CCHK1	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^                           BS( I ) = BB( I )$/;"	l	subroutine:CCHK2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^                           BS( I ) = BB( I )$/;"	l	subroutine:CCHK5	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^                           CS( I ) = CC( I )$/;"	l	subroutine:CCHK4	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^                  G( I ) = G( I ) + ABS1( A( I, K ) )*ABS1( B( K, J ) )$/;"	l	subroutine:CMMCH	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^         LTEST( I ) = .FALSE.$/;"	l	program:CBLAT3	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      GO TO 100$/;"	l	subroutine:CCHKE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      GO TO 30$/;"	l	function:LCE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      A( J, J ) = ONE$/;"	l	subroutine:CMAKE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^   10       CONTINUE$/;"	l	function:LCERES	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^   10    CONTINUE$/;"	l	subroutine:CCHK3	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^         END IF$/;"	l	program:CBLAT3	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $               ABS1( BETA )*ABS1( C( I, J ) )$/;"	l	subroutine:CMMCH	file:
210	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $         GO TO 230$/;"	l	subroutine:CMMCH	file:
210	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	program:CBLAT3	file:
220	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	program:CBLAT3	file:
220	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CMMCH	file:
230	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	program:CBLAT3	file:
230	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CMMCH	file:
240	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^         END IF$/;"	l	subroutine:CMMCH	file:
250	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CMMCH	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^                              AS( I ) = AA( I )$/;"	l	subroutine:CCHK3	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^                              CS( I ) = CC( I )$/;"	l	subroutine:CCHK1	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^                           CS( I ) = CC( I )$/;"	l	subroutine:CCHK2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^                           CS( I ) = CC( I )$/;"	l	subroutine:CCHK5	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^               AA( I + ( J - 1 )*LDA ) = A( I, J )$/;"	l	subroutine:CMAKE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      GO TO 100$/;"	l	subroutine:CCHKE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      LCE = .FALSE.$/;"	l	function:LCE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                        WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:CCHK4	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $            GO TO 70$/;"	l	function:LCERES	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^   20          CONTINUE$/;"	l	subroutine:CMMCH	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^   20 CONTINUE$/;"	l	program:CBLAT3	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^                              BS( I ) = BB( I )$/;"	l	subroutine:CCHK3	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:CMAKE	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      GO TO 100$/;"	l	subroutine:CCHKE	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                           GO TO 110$/;"	l	subroutine:CCHK4	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                           WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:CCHK1	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                        ABS1( B( K, J ) )$/;"	l	subroutine:CMMCH	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                        WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:CCHK2	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                        WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:CCHK5	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $            GO TO 70$/;"	l	function:LCERES	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      GO TO 50$/;"	l	program:CBLAT3	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^                                    END IF$/;"	l	subroutine:CCHK5	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      GO TO 100$/;"	l	subroutine:CCHKE	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      STOP$/;"	l	program:CBLAT3	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                           WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:CCHK3	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^   40             CONTINUE$/;"	l	subroutine:CMMCH	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^   40       CONTINUE$/;"	l	function:LCERES	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^   40       CONTINUE$/;"	l	subroutine:CMAKE	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK1	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK2	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK4	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^                                    END IF$/;"	l	subroutine:CCHK5	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:CMAKE	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      GO TO 100$/;"	l	subroutine:CCHKE	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                                    B( I, J )$/;"	l	subroutine:CCHK3	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                        ABS1( B( K, J ) )$/;"	l	subroutine:CMMCH	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	function:LCERES	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	program:CBLAT3	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK1	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK4	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^               AA( I + ( J - 1 )*LDA ) = A( I, J )$/;"	l	subroutine:CMAKE	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      EPS = RONE$/;"	l	program:CBLAT3	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      GO TO 100$/;"	l	subroutine:CCHKE	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      GO TO 80$/;"	l	function:LCERES	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                           GO TO 140$/;"	l	subroutine:CCHK5	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^   60                               CONTINUE$/;"	l	subroutine:CCHK3	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^   60             CONTINUE$/;"	l	subroutine:CMMCH	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK1	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK2	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK4	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:CMAKE	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      GO TO 100$/;"	l	subroutine:CCHKE	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      GO TO 70$/;"	l	program:CBLAT3	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      LCERES = .FALSE.$/;"	l	function:LCERES	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                        ABS1( B( J, K ) )$/;"	l	subroutine:CMMCH	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK1	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK3	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK4	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK5	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^            AB( I, J ) = MAX( I - J + 1, 0 )$/;"	l	program:CBLAT3	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^            END IF$/;"	l	subroutine:CMAKE	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      GO TO 100$/;"	l	subroutine:CCHKE	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^   80             CONTINUE$/;"	l	subroutine:CMMCH	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK1	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK2	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK3	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK4	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK5	file:
9984	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^ 9985 FORMAT( \/' ******* FATAL ERROR - TESTS ABANDONED *******' )$/;"	l	program:CBLAT3	file:
9985	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^ 9986 FORMAT( \/' END OF TESTS' )$/;"	l	program:CBLAT3	file:
9986	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^ 9987 FORMAT( 1X, A6, ' WAS NOT TESTED' )$/;"	l	program:CBLAT3	file:
9987	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^ 9988 FORMAT( A6, L2 )$/;"	l	program:CBLAT3	file:
9988	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      '*******' )$/;"	l	program:CBLAT3	file:
9989	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      'ESTS ABANDONED *******' )$/;"	l	program:CBLAT3	file:
9990	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      \/' ******* TESTS ABANDONED *******' )$/;"	l	program:CBLAT3	file:
9991	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      7( '(', F4.1, ',', F4.1, ')  ', : ) )$/;"	l	program:CBLAT3	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      '), C,', I3, ')          .' )$/;"	l	subroutine:CCHK4	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      ',', F4.1, '), C,', I3, ')    .' )$/;"	l	subroutine:CCHK5	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      7( '(', F4.1, ',', F4.1, ')  ', : ) )$/;"	l	program:CBLAT3	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      '          .' )$/;"	l	subroutine:CCHK4	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      ', C,', I3, ')           .' )$/;"	l	subroutine:CCHK5	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^ 9994 FORMAT( '   FOR N              ', 9I6 )$/;"	l	program:CBLAT3	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      '      .' )$/;"	l	subroutine:CCHK3	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      ',', F4.1, '), C,', I3, ')    .' )$/;"	l	subroutine:CCHK2	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      ',(', F4.1, ',', F4.1, '), C,', I3, ').' )$/;"	l	subroutine:CCHK1	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      'OLLOWING PARAMETER VALUES WILL BE USED:' )$/;"	l	program:CBLAT3	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:CCHK4	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:CCHK5	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:CCHK1	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:CCHK2	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:CCHK3	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:CCHK4	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:CCHK5	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^ 9996 FORMAT( ' VALUE OF N IS LESS THAN 0 OR GREATER THAN ', I2 )$/;"	l	program:CBLAT3	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:CCHK1	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:CCHK2	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:CCHK3	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:CCHK4	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:CCHK5	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      'THAN ', I2 )$/;"	l	program:CBLAT3	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      'AD OF ', A6, ' *******' )$/;"	l	subroutine:XERBLA	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:CCHK1	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:CCHK2	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:CCHK3	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:CCHK4	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:CCHK5	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^ 9998 FORMAT( ' RELATIVE MACHINE PRECISION IS TAKEN TO BE', 1P, E9.1 )$/;"	l	program:CBLAT3	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^ 9998 FORMAT( 1X, I7, 2( '  (', G15.6, ',', G15.6, ')' ) )$/;"	l	subroutine:CMMCH	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      ' OF ', I2, ' *******' )$/;"	l	subroutine:XERBLA	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      'S THAN', F8.2 )$/;"	l	program:CBLAT3	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      'S)' )$/;"	l	subroutine:CCHK1	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      'S)' )$/;"	l	subroutine:CCHK2	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      'S)' )$/;"	l	subroutine:CCHK3	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      'S)' )$/;"	l	subroutine:CCHK4	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      'S)' )$/;"	l	subroutine:CCHK5	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $      'SULT                    COMPUTED RESULT' )$/;"	l	subroutine:CMMCH	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^ 9999 FORMAT( ' ', A6, ' PASSED THE TESTS OF ERROR-EXITS' )$/;"	l	subroutine:CCHKE	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	program:CBLAT3	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK1	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK2	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK3	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK4	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHK5	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CCHKE	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CHKXER	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:CMMCH	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^*$/;"	l	subroutine:XERBLA	file:
AA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      COMPLEX            AA(/;"	v	program:CBLAT3
AB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      COMPLEX            AA( NMAX*NMAX ), AB(/;"	v	program:CBLAT3
ALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      COMPLEX            AA( NMAX*NMAX ), AB( NMAX, 2*NMAX ),$/;"	v	program:CBLAT3
AS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                   ALF( NALMAX ), AS(/;"	v	program:CBLAT3
BB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                   ALF( NALMAX ), AS( NMAX*NMAX ),$/;"	v	program:CBLAT3
BET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                   BB( NMAX*NMAX ), BET(/;"	v	program:CBLAT3
BS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                   BB( NMAX*NMAX ), BET( NBEMAX ),$/;"	v	program:CBLAT3
C	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                   BS( NMAX*NMAX ), C(/;"	v	program:CBLAT3
CBEG	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      COMPLEX FUNCTION CBEG(/;"	f
CBLAT3	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      PROGRAM CBLAT3$/;"	p
CC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                   BS( NMAX*NMAX ), C( NMAX, NMAX ),$/;"	v	program:CBLAT3
CCHK1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      SUBROUTINE CCHK1(/;"	s
CCHK2	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      SUBROUTINE CCHK2(/;"	s
CCHK3	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      SUBROUTINE CCHK3(/;"	s
CCHK4	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      SUBROUTINE CCHK4(/;"	s
CCHK5	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      SUBROUTINE CCHK5(/;"	s
CCHKE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      SUBROUTINE CCHKE(/;"	s
CHKXER	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      SUBROUTINE CHKXER(/;"	s
CMAKE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      SUBROUTINE CMAKE(/;"	s
CMMCH	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      SUBROUTINE CMMCH(/;"	s
CS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                   CC( NMAX*NMAX ), CS(/;"	v	program:CBLAT3
CT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                   CC( NMAX*NMAX ), CS( NMAX*NMAX ), CT(/;"	v	program:CBLAT3
EPS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      REAL               EPS,/;"	v	program:CBLAT3
ERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      REAL               EPS, ERR,/;"	v	program:CBLAT3
FATAL	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      LOGICAL            FATAL,/;"	v	program:CBLAT3
G	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      REAL               G(/;"	v	program:CBLAT3
I	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      IN/;"	v	program:CBLAT3
IDIM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      INTEGER            IDIM(/;"	v	program:CBLAT3
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	1294;"	c	subroutine:CCHK4
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	1626;"	c	subroutine:CCHK5
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	1974;"	c	subroutine:CCHKE
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	3411;"	c	subroutine:XERBLA
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	420;"	c	subroutine:CCHK1
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	705;"	c	subroutine:CCHK2
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	94;"	c	program:CBLAT3
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	985;"	c	subroutine:CCHK3
INFOT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      INTEGER            INFOT,/;"	v	program:CBLAT3
ISNUM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      INTEGER            I, ISNUM,/;"	v	program:CBLAT3
J	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      INTEGER            I, ISNUM, J,/;"	v	program:CBLAT3
LCE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      LOGICAL            LCE$/;"	v	program:CBLAT3
LCE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      LOGICAL FUNCTION LCE(/;"	f
LCERES	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      LOGICAL FUNCTION LCERES(/;"	f
LERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      LOGICAL            LERR,/;"	v	program:CBLAT3
LTEST	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      LOGICAL            LTEST(/;"	v	program:CBLAT3
LTESTT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      LOGICAL            FATAL, LTESTT,/;"	v	program:CBLAT3
N	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      INT/;"	v	program:CBLAT3
NALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF,/;"	v	program:CBLAT3
NALMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      INTEGER            NIDMAX, NALMAX,/;"	v	program:CBLAT3
NBEMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      INTEGER            NIDMAX, NALMAX, NBEMAX$/;"	v	program:CBLAT3
NBET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET,/;"	v	program:CBLAT3
NIDIM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM,/;"	v	program:CBLAT3
NIDMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      INTEGER            NIDMAX,/;"	v	program:CBLAT3
NIN	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      INTEGER            NIN$/;"	v	program:CBLAT3
NMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      INTEGER            NMAX$/;"	v	program:CBLAT3
NOUT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NOUT,/;"	v	program:CBLAT3
NOUTC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      INTEGER            INFOT, NOUTC$/;"	v	program:CBLAT3
NSUBS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      INTEGER            NSUBS$/;"	v	program:CBLAT3
NTRA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NOUT, NTRA$/;"	v	program:CBLAT3
OK	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      LOGICAL            LERR, OK$/;"	v	program:CBLAT3
ONE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      COMPLEX            ZERO, ONE$/;"	v	program:CBLAT3
REWI	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI,/;"	v	program:CBLAT3
RHALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      REAL               RZERO, RHALF,/;"	v	program:CBLAT3
RONE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      REAL               RZERO, RHALF, RONE$/;"	v	program:CBLAT3
RZERO	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      REAL               RZERO,/;"	v	program:CBLAT3
SAME	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME,/;"	v	program:CBLAT3
SDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      REAL               SDIFF$/;"	v	program:CBLAT3
SDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      REAL FUNCTION SDIFF(/;"	f
SFATAL	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL,/;"	v	program:CBLAT3
SNAMES	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      CHARACTER*6        SNAMES(/;"	v	program:CBLAT3
SNAMET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      CHARACTER*6        SNAMET$/;"	v	program:CBLAT3
SNAPS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      CHARACTER*32       SNAPS,/;"	v	program:CBLAT3
SRNAMC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	3412;"	c	subroutine:XERBLA
SRNAMC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	95;"	c	program:CBLAT3
SRNAMT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      CHARACTER*6        SRNAMT$/;"	v	program:CBLAT3
SUMMRY	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      CHARACTER*32       SNAPS, SUMMRY$/;"	v	program:CBLAT3
THRESH	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      REAL               EPS, ERR, THRESH$/;"	v	program:CBLAT3
TRACE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL, TRACE,/;"	v	program:CBLAT3
TRANSA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      CHARACTER*1        TRANSA,/;"	v	program:CBLAT3
TRANSB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      CHARACTER*1        TRANSA, TRANSB$/;"	v	program:CBLAT3
TSTERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL, TRACE,$/;"	v	program:CBLAT3
W	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^     $                   CC( NMAX*NMAX ), CS( NMAX*NMAX ), CT( NMAX ),$/;"	v	program:CBLAT3
XERBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      SUBROUTINE XERBLA(/;"	s
ZERO	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/cblat3.f	/^      COMPLEX            ZERO,/;"	v	program:CBLAT3
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^            END IF$/;"	l	subroutine:CHECK2	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^         MWPS(I) = 1$/;"	l	subroutine:CHECK3	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^         MWPS(I) = -1$/;"	l	subroutine:CHECK3	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^  100    CONTINUE$/;"	l	subroutine:CHECK2	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^         MWPN(I) = 5$/;"	l	subroutine:CHECK3	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^         MWPTY(11,I) = 6 - I$/;"	l	subroutine:CHECK3	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^            MWPSTY(K) = MWPTY(I,K)$/;"	l	subroutine:CHECK3	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^                  STY(I) = DT9Y(I,KN,KI)$/;"	l	subroutine:CHECK3	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^               SX(I) = DV(I,NP1,INCX)$/;"	l	subroutine:CHECK1	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^               SY(I) = DY1(I)$/;"	l	subroutine:CHECK2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^         END IF$/;"	l	subroutine:CHECK0	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^         IF (PASS) WRITE (NOUT,99998)$/;"	l	program:DBLAT1	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^         WRITE (NOUT,99998)$/;"	l	subroutine:STEST	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      WRITE (NOUT,99998)$/;"	l	subroutine:ITEST1	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^         CALL STEST(5,COPYY,MWPSTY,MWPSTY,SFAC)$/;"	l	subroutine:CHECK3	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^                  STRUE(I) = DTRUE5(I,NP1,INCX)$/;"	l	subroutine:CHECK1	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^                  STY(J) = DT8(J,KN,KI)$/;"	l	subroutine:CHECK2	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^            END IF$/;"	l	subroutine:CHECK3	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      WRITE (NOUT,99997) ICASE, N, INCX, INCY, MODE, ICOMP, ITRUE, ID$/;"	l	subroutine:ITEST1	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^     +     STRUE(I), SD, SSIZE(I)$/;"	l	subroutine:STEST	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^   20 CONTINUE$/;"	l	subroutine:CHECK0	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^                  STY(I) = DT10Y(I,KN,KI)$/;"	l	subroutine:CHECK2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^            END IF$/;"	l	subroutine:CHECK1	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^   40    CONTINUE$/;"	l	subroutine:CHECK3	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^                  STY(I) = DT10Y(I,KN,KI)$/;"	l	subroutine:CHECK2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^         MWPC(I) = 0$/;"	l	subroutine:CHECK3	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^   60    CONTINUE$/;"	l	subroutine:CHECK1	file:
99997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^     +       '     SIZE(I)',\/1X)$/;"	l	subroutine:STEST	file:
99997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^     +       \/1X)$/;"	l	subroutine:ITEST1	file:
99998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^99999 FORMAT ('                                       FAIL')$/;"	l	subroutine:ITEST1	file:
99998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^99999 FORMAT ('                                       FAIL')$/;"	l	subroutine:STEST	file:
99998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^99999 FORMAT (' Real BLAS Test Program Results',\/1X)$/;"	l	program:DBLAT1	file:
99999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^*$/;"	l	program:DBLAT1	file:
99999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^*$/;"	l	subroutine:HEADER	file:
99999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^*$/;"	l	subroutine:ITEST1	file:
99999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^*$/;"	l	subroutine:STEST	file:
CHECK0	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      SUBROUTINE CHECK0(/;"	s
CHECK1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      SUBROUTINE CHECK1(/;"	s
CHECK2	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      SUBROUTINE CHECK2(/;"	s
CHECK3	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      SUBROUTINE CHECK3(/;"	s
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	100;"	c	subroutine:CHECK0
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	168;"	c	subroutine:CHECK1
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	17;"	c	program:DBLAT1
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	264;"	c	subroutine:CHECK2
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	457;"	c	subroutine:CHECK3
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	64;"	c	subroutine:HEADER
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	668;"	c	subroutine:STEST
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	747;"	c	subroutine:ITEST1
DBLAT1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      PROGRAM DBLAT1$/;"	p
HEADER	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      SUBROUTINE HEADER$/;"	s
IC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      INTEGER          IC$/;"	v	program:DBLAT1
ICASE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      INTEGER          ICASE,/;"	v	program:DBLAT1
INCX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      INTEGER          ICASE, INCX,/;"	v	program:DBLAT1
INCY	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      INTEGER          ICASE, INCX, INCY,/;"	v	program:DBLAT1
ITEST1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      SUBROUTINE ITEST1(/;"	s
MODE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      INTEGER          ICASE, INCX, INCY, MODE,/;"	v	program:DBLAT1
N	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      INT/;"	v	program:DBLAT1
NOUT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      INTEGER          NOUT$/;"	v	program:DBLAT1
PASS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      LOGICAL          PASS$/;"	v	program:DBLAT1
SDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      DOUBLE PRECISION FUNCTION SDIFF(/;"	f
SFAC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      DOUBLE PRECISION SFAC$/;"	v	program:DBLAT1
STEST	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      SUBROUTINE STEST(/;"	s
STEST1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat1.f	/^      SUBROUTINE STEST1(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                                 AS( I ) = AA( I )$/;"	l	subroutine:DCHK1	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                              AS( I ) = AA( I )$/;"	l	subroutine:DCHK2	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                        AS( I ) = AA( I )$/;"	l	subroutine:DCHK4	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                        AS( I ) = AA( I )$/;"	l	subroutine:DCHK6	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                     AS( I ) = AA( I )$/;"	l	subroutine:DCHK5	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^               JX = JX + INCXL$/;"	l	subroutine:DMVCH	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^            END IF$/;"	l	subroutine:DMAKE	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^         END IF$/;"	l	program:DBLAT2	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^         Z( I ) = ZERO$/;"	l	subroutine:DCHK3	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      IC = IC + 1$/;"	l	function:DBEG	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $            GO TO 70$/;"	l	function:LDERES	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $        160 )ISNUM$/;"	l	subroutine:DCHKE	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      GO TO 20$/;"	l	function:LDE	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:DMAKE	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      GO TO 170$/;"	l	subroutine:DCHKE	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      GO TO 90$/;"	l	program:DBLAT2	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK1	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK2	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK3	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK4	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK5	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK6	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^               AA( I + ( J - 1 )*LDA ) = A( I, J )$/;"	l	subroutine:DMAKE	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^            A( I, J ) = MAX( I - J + 1, 0 )$/;"	l	program:DBLAT2	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      GO TO 170$/;"	l	subroutine:DCHKE	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK1	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK2	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK3	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK4	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK5	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK6	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:DMAKE	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^         Y( J ) = ZERO$/;"	l	program:DBLAT2	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      GO TO 170$/;"	l	subroutine:DCHKE	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK1	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK2	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK3	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK4	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK5	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK6	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^         YY( J ) = J*( ( J + 1 )*J )\/2 - ( ( J + 1 )*J*( J - 1 ) )\/3$/;"	l	program:DBLAT2	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      GO TO 170$/;"	l	subroutine:DCHKE	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^  120       CONTINUE$/;"	l	subroutine:DMAKE	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK1	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK2	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK3	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK4	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK5	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK6	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:DMAKE	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      GO TO 170$/;"	l	subroutine:DCHKE	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*           Test DGEMV, 01, and DGBMV, 02.$/;"	l	program:DBLAT2	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK1	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK4	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK6	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^               AA( I + ( J - 1 )*LDA ) = A( I + J - KK, J )$/;"	l	subroutine:DMAKE	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      GO TO 170$/;"	l	subroutine:DCHKE	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*           Test DSYMV, 03, DSBMV, 04, and DSPMV, 05.$/;"	l	program:DBLAT2	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK4	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK6	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:DMAKE	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      GO TO 170$/;"	l	subroutine:DCHKE	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*           DTRSV, 09, DTBSV, 10, and DTPSV, 11.$/;"	l	program:DBLAT2	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK6	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^  160       CONTINUE$/;"	l	subroutine:DMAKE	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*           Test DGER, 12.$/;"	l	program:DBLAT2	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK6	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHKE	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^               END IF$/;"	l	subroutine:DMAKE	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*           Test DSYR, 13, and DSPR, 14.$/;"	l	program:DBLAT2	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^  180       CONTINUE$/;"	l	subroutine:DMAKE	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*           Test DSYR2, 15, and DSPR2, 16.$/;"	l	program:DBLAT2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                                 XS( I ) = XX( I )$/;"	l	subroutine:DCHK1	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                              XS( I ) = XX( I )$/;"	l	subroutine:DCHK2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                           AS( I ) = AA( I )$/;"	l	subroutine:DCHK3	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                        XS( I ) = XX( I )$/;"	l	subroutine:DCHK4	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                        XS( I ) = XX( I )$/;"	l	subroutine:DCHK6	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                     XS( I ) = XX( I )$/;"	l	subroutine:DCHK5	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^               JX = JX + INCXL$/;"	l	subroutine:DMVCH	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^         END IF$/;"	l	program:DBLAT2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      GO TO 170$/;"	l	subroutine:DCHKE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      GO TO 30$/;"	l	function:LDE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      A( J, J ) = ONE$/;"	l	subroutine:DMAKE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^   10       CONTINUE$/;"	l	function:LDERES	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	program:DBLAT2	file:
210	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^         END IF$/;"	l	program:DBLAT2	file:
220	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	program:DBLAT2	file:
230	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	program:DBLAT2	file:
240	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	program:DBLAT2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                                 YS( I ) = YY( I )$/;"	l	subroutine:DCHK1	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                              YS( I ) = YY( I )$/;"	l	subroutine:DCHK2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                           XS( I ) = XX( I )$/;"	l	subroutine:DCHK3	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                        YS( I ) = YY( I )$/;"	l	subroutine:DCHK4	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                        YS( I ) = YY( I )$/;"	l	subroutine:DCHK6	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^               AA( I + ( J - 1 )*LDA ) = A( I, J )$/;"	l	subroutine:DMAKE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^         END IF$/;"	l	program:DBLAT2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^         IY = IY + INCYL$/;"	l	subroutine:DMVCH	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      GO TO 170$/;"	l	subroutine:DCHKE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      LDE = .FALSE.$/;"	l	function:LDE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                  WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:DCHK5	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $            GO TO 70$/;"	l	function:LDERES	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                           Z( I ) = X( I )$/;"	l	subroutine:DCHK5	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:DMAKE	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^         LTEST( I ) = .FALSE.$/;"	l	program:DBLAT2	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      GO TO 170$/;"	l	subroutine:DCHKE	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                              WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:DCHK1	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                           WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:DCHK2	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                        WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:DCHK3	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                     WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:DCHK4	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                     WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:DCHK6	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $            GO TO 70$/;"	l	function:LDERES	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      GO TO 50$/;"	l	subroutine:DMVCH	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                              Z( I ) = X( I )$/;"	l	subroutine:DCHK4	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                              Z( I, 1 ) = X( I )$/;"	l	subroutine:DCHK6	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                           Z( I ) = X( N - I + 1 )$/;"	l	subroutine:DCHK5	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      GO TO 170$/;"	l	subroutine:DCHKE	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                              = X( I )$/;"	l	subroutine:DCHK3	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^   40       CONTINUE$/;"	l	function:LDERES	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^   40       CONTINUE$/;"	l	subroutine:DMAKE	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^   40 CONTINUE$/;"	l	program:DBLAT2	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK1	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK2	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DMVCH	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                              Z( I ) = X( M - I + 1 )$/;"	l	subroutine:DCHK4	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                              Z( I, 1 ) = X( N - I + 1 )$/;"	l	subroutine:DCHK6	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^               AA( I1 + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:DMAKE	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^         END IF$/;"	l	subroutine:DMVCH	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      GO TO 170$/;"	l	subroutine:DCHKE	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                     GO TO 110$/;"	l	subroutine:DCHK5	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      GO TO 70$/;"	l	program:DBLAT2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	function:LDERES	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK1	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK3	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                              Z( I, 2 ) = Y( I )$/;"	l	subroutine:DCHK6	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^               AA( I2 + ( J - 1 )*LDA ) = A( I2 + J - KU - 1, J )$/;"	l	subroutine:DMAKE	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      GO TO 170$/;"	l	subroutine:DCHKE	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      GO TO 80$/;"	l	function:LDERES	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      STOP$/;"	l	program:DBLAT2	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                        GO TO 130$/;"	l	subroutine:DCHK4	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK1	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK2	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK3	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK5	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DMVCH	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^                              Z( I, 2 ) = Y( N - I + 1 )$/;"	l	subroutine:DCHK6	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^               AA( I3 + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:DMAKE	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      GO TO 170$/;"	l	subroutine:DCHKE	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      LDERES = .FALSE.$/;"	l	function:LDERES	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	program:DBLAT2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK1	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK3	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK4	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK5	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      EPS = ONE$/;"	l	program:DBLAT2	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      GO TO 170$/;"	l	subroutine:DCHKE	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                        GO TO 150$/;"	l	subroutine:DCHK6	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^   80       CONTINUE$/;"	l	subroutine:DMAKE	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK1	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK2	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK3	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK4	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK5	file:
9980	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9981 FORMAT( \/' ******* FATAL ERROR - TESTS ABANDONED *******' )$/;"	l	program:DBLAT2	file:
9981	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9982 FORMAT( \/' END OF TESTS' )$/;"	l	program:DBLAT2	file:
9982	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9983 FORMAT( 1X, A6, ' WAS NOT TESTED' )$/;"	l	program:DBLAT2	file:
9983	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9984 FORMAT( A6, L2 )$/;"	l	program:DBLAT2	file:
9984	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      , \/' ******* TESTS ABANDONED *******' )$/;"	l	program:DBLAT2	file:
9985	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      'ESTS ABANDONED *******' )$/;"	l	program:DBLAT2	file:
9986	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      \/' ******* TESTS ABANDONED *******' )$/;"	l	program:DBLAT2	file:
9987	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9988 FORMAT( '   FOR BETA           ', 7F6.1 )$/;"	l	program:DBLAT2	file:
9988	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9989 FORMAT( '   FOR ALPHA          ', 7F6.1 )$/;"	l	program:DBLAT2	file:
9989	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9990 FORMAT( '   FOR INCX AND INCY  ', 7I6 )$/;"	l	program:DBLAT2	file:
9990	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9991 FORMAT( '   FOR K              ', 7I6 )$/;"	l	program:DBLAT2	file:
9991	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9992 FORMAT( '   FOR N              ', 9I6 )$/;"	l	program:DBLAT2	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      'OLLOWING PARAMETER VALUES WILL BE USED:' )$/;"	l	program:DBLAT2	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      I2, ', A,', I3, ')                        .' )$/;"	l	subroutine:DCHK5	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      I2, ', Y,', I2, ', A,', I3, ')                  .' )$/;"	l	subroutine:DCHK6	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      I3, ', X,', I2, ')                     .' )$/;"	l	subroutine:DCHK3	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      I3, ', X,', I2, ',', F4.1, ', Y,', I2, ')             .' )$/;"	l	subroutine:DCHK2	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      ' A,', I3, ', X,', I2, ')                 .' )$/;"	l	subroutine:DCHK3	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      ')         .' )$/;"	l	subroutine:DCHK1	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      ')         .' )$/;"	l	subroutine:DCHK2	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      ', Y,', I2, ', A,', I3, ')                  .' )$/;"	l	subroutine:DCHK4	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      I2 )$/;"	l	program:DBLAT2	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      I2, ', AP)                           .' )$/;"	l	subroutine:DCHK5	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      I2, ', Y,', I2, ', AP)                     .' )$/;"	l	subroutine:DCHK6	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      ', A,', I3, ', X,', I2, ',', F4.1, ', Y,', I2, ') .' )$/;"	l	subroutine:DCHK1	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      ', X,', I2, ',', F4.1, ', Y,', I2, ')                .' )$/;"	l	subroutine:DCHK2	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      'X,', I2, ')                        .' )$/;"	l	subroutine:DCHK3	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:DCHK4	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:DCHK5	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:DCHK6	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9995 FORMAT( ' VALUE OF K IS LESS THAN 0' )$/;"	l	program:DBLAT2	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:DCHK1	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:DCHK2	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:DCHK3	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:DCHK4	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:DCHK5	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:DCHK6	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9996 FORMAT( ' VALUE OF N IS LESS THAN 0 OR GREATER THAN ', I2 )$/;"	l	program:DBLAT2	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:DCHK1	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:DCHK2	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:DCHK3	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:DCHK4	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:DCHK5	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:DCHK6	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      'THAN ', I2 )$/;"	l	program:DBLAT2	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      'AD OF ', A6, ' *******' )$/;"	l	subroutine:XERBLA	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:DCHK1	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:DCHK2	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:DCHK3	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:DCHK4	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:DCHK5	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:DCHK6	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9998 FORMAT( ' RELATIVE MACHINE PRECISION IS TAKEN TO BE', 1P, D9.1 )$/;"	l	program:DBLAT2	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      ' OF ', I2, ' *******' )$/;"	l	subroutine:XERBLA	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      'S THAN', F8.2 )$/;"	l	program:DBLAT2	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      'S)' )$/;"	l	subroutine:DCHK1	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      'S)' )$/;"	l	subroutine:DCHK2	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      'S)' )$/;"	l	subroutine:DCHK3	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      'S)' )$/;"	l	subroutine:DCHK4	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      'S)' )$/;"	l	subroutine:DCHK5	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      'S)' )$/;"	l	subroutine:DCHK6	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $      'TED RESULT' )$/;"	l	subroutine:DMVCH	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^ 9999 FORMAT( ' ', A6, ' PASSED THE TESTS OF ERROR-EXITS' )$/;"	l	subroutine:DCHKE	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	program:DBLAT2	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:CHKXER	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK1	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK2	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK3	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK4	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK5	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHK6	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DCHKE	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:DMVCH	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^*$/;"	l	subroutine:XERBLA	file:
A	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      DOUBLE PRECISION   A(/;"	v	program:DBLAT2
AA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      DOUBLE PRECISION   A( NMAX, NMAX ), AA(/;"	v	program:DBLAT2
ALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      DOUBLE PRECISION   A( NMAX, NMAX ), AA( NMAX*NMAX ),$/;"	v	program:DBLAT2
AS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                   ALF( NALMAX ), AS(/;"	v	program:DBLAT2
BET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                   ALF( NALMAX ), AS( NMAX*NMAX ), BET(/;"	v	program:DBLAT2
CHKXER	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      SUBROUTINE CHKXER(/;"	s
DBEG	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      DOUBLE PRECISION FUNCTION DBEG(/;"	f
DBLAT2	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      PROGRAM DBLAT2$/;"	p
DCHK1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      SUBROUTINE DCHK1(/;"	s
DCHK2	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      SUBROUTINE DCHK2(/;"	s
DCHK3	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      SUBROUTINE DCHK3(/;"	s
DCHK4	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      SUBROUTINE DCHK4(/;"	s
DCHK5	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      SUBROUTINE DCHK5(/;"	s
DCHK6	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      SUBROUTINE DCHK6(/;"	s
DCHKE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      SUBROUTINE DCHKE(/;"	s
DDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      DOUBLE PRECISION   DDIFF$/;"	v	program:DBLAT2
DDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      DOUBLE PRECISION FUNCTION DDIFF(/;"	f
DMAKE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      SUBROUTINE DMAKE(/;"	s
DMVCH	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      SUBROUTINE DMVCH(/;"	s
EPS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      DOUBLE PRECISION   EPS,/;"	v	program:DBLAT2
ERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      DOUBLE PRECISION   EPS, ERR,/;"	v	program:DBLAT2
FATAL	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      LOGICAL            FATAL,/;"	v	program:DBLAT2
G	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                   ALF( NALMAX ), AS( NMAX*NMAX ), BET( NBEMAX ),$/;"	v	program:DBLAT2
HALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      DOUBLE PRECISION   ZERO, HALF,/;"	v	program:DBLAT2
I	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      IN/;"	v	program:DBLAT2
IDIM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            IDIM(/;"	v	program:DBLAT2
INC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            IDIM( NIDMAX ), INC(/;"	v	program:DBLAT2
INCMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            NMAX, INCMAX$/;"	v	program:DBLAT2
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	111;"	c	program:DBLAT2
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	1123;"	c	subroutine:DCHK3
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	1480;"	c	subroutine:DCHK4
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	1742;"	c	subroutine:DCHK5
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	2021;"	c	subroutine:DCHK6
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	2313;"	c	subroutine:DCHKE
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	3110;"	c	subroutine:XERBLA
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	443;"	c	subroutine:DCHK1
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	783;"	c	subroutine:DCHK2
INFOT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            INFOT,/;"	v	program:DBLAT2
ISNUM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            I, ISNUM,/;"	v	program:DBLAT2
J	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            I, ISNUM, J,/;"	v	program:DBLAT2
KB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            IDIM( NIDMAX ), INC( NINMAX ), KB(/;"	v	program:DBLAT2
LDE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      LOGICAL            LDE$/;"	v	program:DBLAT2
LDE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      LOGICAL FUNCTION LDE(/;"	f
LDERES	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      LOGICAL FUNCTION LDERES(/;"	f
LERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      LOGICAL            LERR,/;"	v	program:DBLAT2
LTEST	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      LOGICAL            LTEST(/;"	v	program:DBLAT2
LTESTT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      LOGICAL            FATAL, LTESTT,/;"	v	program:DBLAT2
N	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INT/;"	v	program:DBLAT2
NALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF,/;"	v	program:DBLAT2
NALMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            NINMAX, NIDMAX, NKBMAX, NALMAX,/;"	v	program:DBLAT2
NBEMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            NINMAX, NIDMAX, NKBMAX, NALMAX, NBEMAX$/;"	v	program:DBLAT2
NBET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET,/;"	v	program:DBLAT2
NIDIM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM,/;"	v	program:DBLAT2
NIDMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            NINMAX, NIDMAX,/;"	v	program:DBLAT2
NIN	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            NIN$/;"	v	program:DBLAT2
NINC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NINC,/;"	v	program:DBLAT2
NINMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            NINMAX,/;"	v	program:DBLAT2
NKB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NINC, NKB,/;"	v	program:DBLAT2
NKBMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            NINMAX, NIDMAX, NKBMAX,/;"	v	program:DBLAT2
NMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            NMAX,/;"	v	program:DBLAT2
NOUT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NINC, NKB,$/;"	v	program:DBLAT2
NOUTC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            INFOT, NOUTC$/;"	v	program:DBLAT2
NSUBS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      INTEGER            NSUBS$/;"	v	program:DBLAT2
NTRA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                   NOUT, NTRA$/;"	v	program:DBLAT2
OK	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      LOGICAL            LERR, OK$/;"	v	program:DBLAT2
ONE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      DOUBLE PRECISION   ZERO, HALF, ONE$/;"	v	program:DBLAT2
REWI	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI,/;"	v	program:DBLAT2
SAME	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME,/;"	v	program:DBLAT2
SFATAL	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL,/;"	v	program:DBLAT2
SNAMES	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      CHARACTER*6        SNAMES(/;"	v	program:DBLAT2
SNAMET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      CHARACTER*6        SNAMET$/;"	v	program:DBLAT2
SNAPS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      CHARACTER*32       SNAPS,/;"	v	program:DBLAT2
SRNAMC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	112;"	c	program:DBLAT2
SRNAMC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	3111;"	c	subroutine:XERBLA
SRNAMT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      CHARACTER*6        SRNAMT$/;"	v	program:DBLAT2
SUMMRY	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      CHARACTER*32       SNAPS, SUMMRY$/;"	v	program:DBLAT2
THRESH	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      DOUBLE PRECISION   EPS, ERR, THRESH$/;"	v	program:DBLAT2
TRACE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL, TRACE,/;"	v	program:DBLAT2
TRANS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      CHARACTER*1        TRANS$/;"	v	program:DBLAT2
TSTERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL, TRACE,$/;"	v	program:DBLAT2
X	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                   G( NMAX /;"	v	program:DBLAT2
XERBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      SUBROUTINE XERBLA(/;"	s
XS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                   G( NMAX ), X( NMAX ), XS(/;"	v	program:DBLAT2
XX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                   G( NMAX ), X( NMAX ), XS( NMAX*INCMAX ),$/;"	v	program:DBLAT2
Y	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                   XX( NMAX*INCMAX ), Y(/;"	v	program:DBLAT2
YS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                   XX( NMAX*INCMAX ), Y( NMAX ),$/;"	v	program:DBLAT2
YT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                   YS( NMAX*INCMAX ), YT(/;"	v	program:DBLAT2
YY	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                   YS( NMAX*INCMAX ), YT( NMAX ),$/;"	v	program:DBLAT2
Z	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^     $                   YY( NMAX*INCMAX ), Z(/;"	v	program:DBLAT2
ZERO	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat2.f	/^      DOUBLE PRECISION   ZERO,/;"	v	program:DBLAT2
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^                              AS( I ) = AA( I )$/;"	l	subroutine:DCHK1	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^                           AS( I ) = AA( I )$/;"	l	subroutine:DCHK2	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^                           AS( I ) = AA( I )$/;"	l	subroutine:DCHK4	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^                           AS( I ) = AA( I )$/;"	l	subroutine:DCHK5	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^            C( I, J ) = ZERO$/;"	l	subroutine:DCHK3	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^            END IF$/;"	l	subroutine:DMAKE	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^            G( I ) = ZERO$/;"	l	subroutine:DMMCH	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^         END IF$/;"	l	program:DBLAT3	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      GO TO ( 10, 20, 30, 40, 50, 60 )ISNUM$/;"	l	subroutine:DCHKE	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      IC = IC + 1$/;"	l	function:DBEG	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $            GO TO 70$/;"	l	function:LDERES	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      GO TO 20$/;"	l	function:LDE	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^            G( I ) = ABS( ALPHA )*G( I ) + ABS( BETA )*ABS( C( I, J ) )$/;"	l	subroutine:DMMCH	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^         C( J, 1 ) = ZERO$/;"	l	program:DBLAT3	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK1	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK2	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK3	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK4	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK5	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^         CC( J ) = J*( ( J + 1 )*J )\/2 - ( ( J + 1 )*J*( J - 1 ) )\/3$/;"	l	program:DBLAT3	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $         GO TO 130$/;"	l	subroutine:DMMCH	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK1	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK2	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK3	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK4	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK5	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^         AB( 1, NMAX + J ) = N - J + 1$/;"	l	program:DBLAT3	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK1	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK2	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK3	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK4	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK5	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DMMCH	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                     ( ( J + 1 )*J*( J - 1 ) )\/3$/;"	l	program:DBLAT3	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK1	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK3	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK4	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK5	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DMMCH	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^         END IF$/;"	l	subroutine:DMMCH	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*           Test DGEMM, 01.$/;"	l	program:DBLAT3	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK3	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK5	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*           Test DSYMM, 02.$/;"	l	program:DBLAT3	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK3	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK5	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DMMCH	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*           Test DTRMM, 03, DTRSM, 04.$/;"	l	program:DBLAT3	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK3	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK5	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*           Test DSYRK, 05.$/;"	l	program:DBLAT3	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*           Test DSYR2K, 06.$/;"	l	program:DBLAT3	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	program:DBLAT3	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^                              BS( I ) = BB( I )$/;"	l	subroutine:DCHK1	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^                           BS( I ) = BB( I )$/;"	l	subroutine:DCHK2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^                           BS( I ) = BB( I )$/;"	l	subroutine:DCHK5	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^                           CS( I ) = CC( I )$/;"	l	subroutine:DCHK4	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^                  G( I ) = G( I ) + ABS( A( I, K ) )*ABS( B( K, J ) )$/;"	l	subroutine:DMMCH	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^         LTEST( I ) = .FALSE.$/;"	l	program:DBLAT3	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      GO TO 30$/;"	l	function:LDE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      GO TO 70$/;"	l	subroutine:DCHKE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      A( J, J ) = ONE$/;"	l	subroutine:DMAKE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^   10       CONTINUE$/;"	l	function:LDERES	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^   10    CONTINUE$/;"	l	subroutine:DCHK3	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^         END IF$/;"	l	program:DBLAT3	file:
210	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	program:DBLAT3	file:
220	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	program:DBLAT3	file:
230	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	program:DBLAT3	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^                              AS( I ) = AA( I )$/;"	l	subroutine:DCHK3	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^                              CS( I ) = CC( I )$/;"	l	subroutine:DCHK1	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^                           CS( I ) = CC( I )$/;"	l	subroutine:DCHK2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^                           CS( I ) = CC( I )$/;"	l	subroutine:DCHK5	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^               AA( I + ( J - 1 )*LDA ) = A( I, J )$/;"	l	subroutine:DMAKE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      GO TO 70$/;"	l	subroutine:DCHKE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      LDE = .FALSE.$/;"	l	function:LDE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                        WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:DCHK4	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $            GO TO 70$/;"	l	function:LDERES	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^   20          CONTINUE$/;"	l	subroutine:DMMCH	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^   20 CONTINUE$/;"	l	program:DBLAT3	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^                              BS( I ) = BB( I )$/;"	l	subroutine:DCHK3	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^                  G( I ) = G( I ) + ABS( A( K, I ) )*ABS( B( K, J ) )$/;"	l	subroutine:DMMCH	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:DMAKE	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      GO TO 70$/;"	l	subroutine:DCHKE	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                           GO TO 110$/;"	l	subroutine:DCHK4	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                           WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:DCHK1	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                        WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:DCHK2	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                        WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:DCHK5	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $            GO TO 70$/;"	l	function:LDERES	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      GO TO 50$/;"	l	program:DBLAT3	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      GO TO 70$/;"	l	subroutine:DCHKE	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      STOP$/;"	l	program:DBLAT3	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                                           I )$/;"	l	subroutine:DCHK5	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                           WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:DCHK3	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^   40          CONTINUE$/;"	l	subroutine:DMMCH	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^   40       CONTINUE$/;"	l	function:LDERES	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^   40       CONTINUE$/;"	l	subroutine:DMAKE	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK1	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK2	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK4	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^                  G( I ) = G( I ) + ABS( A( I, K ) )*ABS( B( J, K ) )$/;"	l	subroutine:DMMCH	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:DMAKE	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      GO TO 70$/;"	l	subroutine:DCHKE	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                                           J )$/;"	l	subroutine:DCHK5	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                                    B( I, J )$/;"	l	subroutine:DCHK3	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	function:LDERES	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	program:DBLAT3	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK1	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK4	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^               AA( I + ( J - 1 )*LDA ) = A( I, J )$/;"	l	subroutine:DMAKE	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      EPS = ONE$/;"	l	program:DBLAT3	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      GO TO 80$/;"	l	function:LDERES	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                           GO TO 140$/;"	l	subroutine:DCHK5	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^   60                               CONTINUE$/;"	l	subroutine:DCHK3	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^   60          CONTINUE$/;"	l	subroutine:DMMCH	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK1	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK2	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK4	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHKE	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^                  G( I ) = G( I ) + ABS( A( K, I ) )*ABS( B( J, K ) )$/;"	l	subroutine:DMMCH	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:DMAKE	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      GO TO 70$/;"	l	program:DBLAT3	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      LDERES = .FALSE.$/;"	l	function:LDERES	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK1	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK3	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK4	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK5	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^            AB( I, J ) = MAX( I - J + 1, 0 )$/;"	l	program:DBLAT3	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^   80          CONTINUE$/;"	l	subroutine:DMMCH	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^   80       CONTINUE$/;"	l	subroutine:DMAKE	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK1	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK2	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK3	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK4	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK5	file:
9984	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^ 9985 FORMAT( \/' ******* FATAL ERROR - TESTS ABANDONED *******' )$/;"	l	program:DBLAT3	file:
9985	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^ 9986 FORMAT( \/' END OF TESTS' )$/;"	l	program:DBLAT3	file:
9986	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^ 9987 FORMAT( 1X, A6, ' WAS NOT TESTED' )$/;"	l	program:DBLAT3	file:
9987	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^ 9988 FORMAT( A6, L2 )$/;"	l	program:DBLAT3	file:
9988	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      '*******' )$/;"	l	program:DBLAT3	file:
9989	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      'ESTS ABANDONED *******' )$/;"	l	program:DBLAT3	file:
9990	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      \/' ******* TESTS ABANDONED *******' )$/;"	l	program:DBLAT3	file:
9991	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^ 9992 FORMAT( '   FOR BETA           ', 7F6.1 )$/;"	l	program:DBLAT3	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^ 9993 FORMAT( '   FOR ALPHA          ', 7F6.1 )$/;"	l	program:DBLAT3	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      ' .' )$/;"	l	subroutine:DCHK5	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      F4.1, ', A,', I3, ',', F4.1, ', C,', I3, ')           .' )$/;"	l	subroutine:DCHK4	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^ 9994 FORMAT( '   FOR N              ', 9I6 )$/;"	l	program:DBLAT3	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      ' .' )$/;"	l	subroutine:DCHK2	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      'C,', I3, ').' )$/;"	l	subroutine:DCHK1	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      'OLLOWING PARAMETER VALUES WILL BE USED:' )$/;"	l	program:DBLAT3	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      F4.1, ', A,', I3, ', B,', I3, ')        .' )$/;"	l	subroutine:DCHK3	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:DCHK4	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:DCHK5	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:DCHK1	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:DCHK2	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:DCHK3	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:DCHK4	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:DCHK5	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^ 9996 FORMAT( ' VALUE OF N IS LESS THAN 0 OR GREATER THAN ', I2 )$/;"	l	program:DBLAT3	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:DCHK1	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:DCHK2	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:DCHK3	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:DCHK4	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:DCHK5	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      'THAN ', I2 )$/;"	l	program:DBLAT3	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      'AD OF ', A6, ' *******' )$/;"	l	subroutine:XERBLA	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:DCHK1	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:DCHK2	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:DCHK3	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:DCHK4	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:DCHK5	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^ 9998 FORMAT( ' RELATIVE MACHINE PRECISION IS TAKEN TO BE', 1P, D9.1 )$/;"	l	program:DBLAT3	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^ 9998 FORMAT( 1X, I7, 2G18.6 )$/;"	l	subroutine:DMMCH	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      ' OF ', I2, ' *******' )$/;"	l	subroutine:XERBLA	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      'S THAN', F8.2 )$/;"	l	program:DBLAT3	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      'S)' )$/;"	l	subroutine:DCHK1	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      'S)' )$/;"	l	subroutine:DCHK2	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      'S)' )$/;"	l	subroutine:DCHK3	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      'S)' )$/;"	l	subroutine:DCHK4	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      'S)' )$/;"	l	subroutine:DCHK5	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $      'TED RESULT' )$/;"	l	subroutine:DMMCH	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^ 9999 FORMAT( ' ', A6, ' PASSED THE TESTS OF ERROR-EXITS' )$/;"	l	subroutine:DCHKE	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	program:DBLAT3	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:CHKXER	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK1	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK2	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK3	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK4	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHK5	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DCHKE	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:DMMCH	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^*$/;"	l	subroutine:XERBLA	file:
AA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      DOUBLE PRECISION   AA(/;"	v	program:DBLAT3
AB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      DOUBLE PRECISION   AA( NMAX*NMAX ), AB(/;"	v	program:DBLAT3
ALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      DOUBLE PRECISION   AA( NMAX*NMAX ), AB( NMAX, 2*NMAX ),$/;"	v	program:DBLAT3
AS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                   ALF( NALMAX ), AS(/;"	v	program:DBLAT3
BB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                   ALF( NALMAX ), AS( NMAX*NMAX ),$/;"	v	program:DBLAT3
BET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                   BB( NMAX*NMAX ), BET(/;"	v	program:DBLAT3
BS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                   BB( NMAX*NMAX ), BET( NBEMAX ),$/;"	v	program:DBLAT3
C	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                   BS( NMAX*NMAX ), C(/;"	v	program:DBLAT3
CC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                   BS( NMAX*NMAX ), C( NMAX, NMAX ),$/;"	v	program:DBLAT3
CHKXER	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      SUBROUTINE CHKXER(/;"	s
CS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                   CC( NMAX*NMAX ), CS(/;"	v	program:DBLAT3
CT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                   CC( NMAX*NMAX ), CS( NMAX*NMAX ), CT(/;"	v	program:DBLAT3
DBEG	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      DOUBLE PRECISION FUNCTION DBEG(/;"	f
DBLAT3	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      PROGRAM DBLAT3$/;"	p
DCHK1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      SUBROUTINE DCHK1(/;"	s
DCHK2	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      SUBROUTINE DCHK2(/;"	s
DCHK3	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      SUBROUTINE DCHK3(/;"	s
DCHK4	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      SUBROUTINE DCHK4(/;"	s
DCHK5	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      SUBROUTINE DCHK5(/;"	s
DCHKE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      SUBROUTINE DCHKE(/;"	s
DDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      DOUBLE PRECISION   DDIFF$/;"	v	program:DBLAT3
DDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      DOUBLE PRECISION FUNCTION DDIFF(/;"	f
DMAKE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      SUBROUTINE DMAKE(/;"	s
DMMCH	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      SUBROUTINE DMMCH(/;"	s
EPS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      DOUBLE PRECISION   EPS,/;"	v	program:DBLAT3
ERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      DOUBLE PRECISION   EPS, ERR,/;"	v	program:DBLAT3
FATAL	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      LOGICAL            FATAL,/;"	v	program:DBLAT3
G	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                   CC( NMAX*NMAX ), CS( NMAX*NMAX ), CT( NMAX ),$/;"	v	program:DBLAT3
HALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      DOUBLE PRECISION   ZERO, HALF,/;"	v	program:DBLAT3
I	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      IN/;"	v	program:DBLAT3
IDIM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      INTEGER            IDIM(/;"	v	program:DBLAT3
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	1263;"	c	subroutine:DCHK4
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	1538;"	c	subroutine:DCHK5
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	1829;"	c	subroutine:DCHKE
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	2795;"	c	subroutine:XERBLA
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	406;"	c	subroutine:DCHK1
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	687;"	c	subroutine:DCHK2
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	88;"	c	program:DBLAT3
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	958;"	c	subroutine:DCHK3
INFOT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      INTEGER            INFOT,/;"	v	program:DBLAT3
ISNUM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      INTEGER            I, ISNUM,/;"	v	program:DBLAT3
J	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      INTEGER            I, ISNUM, J,/;"	v	program:DBLAT3
LDE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      LOGICAL            LDE$/;"	v	program:DBLAT3
LDE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      LOGICAL FUNCTION LDE(/;"	f
LDERES	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      LOGICAL FUNCTION LDERES(/;"	f
LERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      LOGICAL            LERR,/;"	v	program:DBLAT3
LTEST	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      LOGICAL            LTEST(/;"	v	program:DBLAT3
LTESTT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      LOGICAL            FATAL, LTESTT,/;"	v	program:DBLAT3
N	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      INT/;"	v	program:DBLAT3
NALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF,/;"	v	program:DBLAT3
NALMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      INTEGER            NIDMAX, NALMAX,/;"	v	program:DBLAT3
NBEMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      INTEGER            NIDMAX, NALMAX, NBEMAX$/;"	v	program:DBLAT3
NBET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET,/;"	v	program:DBLAT3
NIDIM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM,/;"	v	program:DBLAT3
NIDMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      INTEGER            NIDMAX,/;"	v	program:DBLAT3
NIN	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      INTEGER            NIN$/;"	v	program:DBLAT3
NMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      INTEGER            NMAX$/;"	v	program:DBLAT3
NOUT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NOUT,/;"	v	program:DBLAT3
NOUTC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      INTEGER            INFOT, NOUTC$/;"	v	program:DBLAT3
NSUBS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      INTEGER            NSUBS$/;"	v	program:DBLAT3
NTRA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NOUT, NTRA$/;"	v	program:DBLAT3
OK	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      LOGICAL            LERR, OK$/;"	v	program:DBLAT3
ONE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      DOUBLE PRECISION   ZERO, HALF, ONE$/;"	v	program:DBLAT3
REWI	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI,/;"	v	program:DBLAT3
SAME	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME,/;"	v	program:DBLAT3
SFATAL	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL,/;"	v	program:DBLAT3
SNAMES	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      CHARACTER*6        SNAMES(/;"	v	program:DBLAT3
SNAMET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      CHARACTER*6        SNAMET$/;"	v	program:DBLAT3
SNAPS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      CHARACTER*32       SNAPS,/;"	v	program:DBLAT3
SRNAMC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	2796;"	c	subroutine:XERBLA
SRNAMC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	89;"	c	program:DBLAT3
SRNAMT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      CHARACTER*6        SRNAMT$/;"	v	program:DBLAT3
SUMMRY	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      CHARACTER*32       SNAPS, SUMMRY$/;"	v	program:DBLAT3
THRESH	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      DOUBLE PRECISION   EPS, ERR, THRESH$/;"	v	program:DBLAT3
TRACE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL, TRACE,/;"	v	program:DBLAT3
TRANSA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      CHARACTER*1        TRANSA,/;"	v	program:DBLAT3
TRANSB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      CHARACTER*1        TRANSA, TRANSB$/;"	v	program:DBLAT3
TSTERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL, TRACE,$/;"	v	program:DBLAT3
W	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^     $                   G( NMAX ), W(/;"	v	program:DBLAT3
XERBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      SUBROUTINE XERBLA(/;"	s
ZERO	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/dblat3.f	/^      DOUBLE PRECISION   ZERO,/;"	v	program:DBLAT3
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^            END IF$/;"	l	subroutine:CHECK2	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^         MWPS(I) = 1$/;"	l	subroutine:CHECK3	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^         MWPS(I) = -1$/;"	l	subroutine:CHECK3	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^  100    CONTINUE$/;"	l	subroutine:CHECK2	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^         MWPN(I) = 5$/;"	l	subroutine:CHECK3	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^         MWPTY(11,I) = 6 - I$/;"	l	subroutine:CHECK3	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^            MWPSTY(K) = MWPTY(I,K)$/;"	l	subroutine:CHECK3	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^                  STY(I) = DT9Y(I,KN,KI)$/;"	l	subroutine:CHECK3	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^               SX(I) = DV(I,NP1,INCX)$/;"	l	subroutine:CHECK1	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^               SY(I) = DY1(I)$/;"	l	subroutine:CHECK2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^         END IF$/;"	l	subroutine:CHECK0	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^         IF (PASS) WRITE (NOUT,99998)$/;"	l	program:SBLAT1	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^         WRITE (NOUT,99998)$/;"	l	subroutine:STEST	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      WRITE (NOUT,99998)$/;"	l	subroutine:ITEST1	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^         CALL STEST(5,COPYY,MWPSTY,MWPSTY,SFAC)$/;"	l	subroutine:CHECK3	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^                  STRUE(I) = DTRUE5(I,NP1,INCX)$/;"	l	subroutine:CHECK1	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^                  STY(J) = DT8(J,KN,KI)$/;"	l	subroutine:CHECK2	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^            END IF$/;"	l	subroutine:CHECK3	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      WRITE (NOUT,99997) ICASE, N, INCX, INCY, MODE, ICOMP, ITRUE, ID$/;"	l	subroutine:ITEST1	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^     +     STRUE(I), SD, SSIZE(I)$/;"	l	subroutine:STEST	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^   20 CONTINUE$/;"	l	subroutine:CHECK0	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^                  STY(I) = DT10Y(I,KN,KI)$/;"	l	subroutine:CHECK2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^            END IF$/;"	l	subroutine:CHECK1	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^   40    CONTINUE$/;"	l	subroutine:CHECK3	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^                  STY(I) = DT10Y(I,KN,KI)$/;"	l	subroutine:CHECK2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^         MWPC(I) = 0$/;"	l	subroutine:CHECK3	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^   60    CONTINUE$/;"	l	subroutine:CHECK1	file:
99997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^     +       '     SIZE(I)',\/1X)$/;"	l	subroutine:STEST	file:
99997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^     +       \/1X)$/;"	l	subroutine:ITEST1	file:
99998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^99999 FORMAT ('                                       FAIL')$/;"	l	subroutine:ITEST1	file:
99998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^99999 FORMAT ('                                       FAIL')$/;"	l	subroutine:STEST	file:
99998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^99999 FORMAT (' Real BLAS Test Program Results',\/1X)$/;"	l	program:SBLAT1	file:
99999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^*$/;"	l	program:SBLAT1	file:
99999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^*$/;"	l	subroutine:HEADER	file:
99999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^*$/;"	l	subroutine:ITEST1	file:
99999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^*$/;"	l	subroutine:STEST	file:
CHECK0	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      SUBROUTINE CHECK0(/;"	s
CHECK1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      SUBROUTINE CHECK1(/;"	s
CHECK2	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      SUBROUTINE CHECK2(/;"	s
CHECK3	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      SUBROUTINE CHECK3(/;"	s
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	100;"	c	subroutine:CHECK0
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	168;"	c	subroutine:CHECK1
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	17;"	c	program:SBLAT1
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	264;"	c	subroutine:CHECK2
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	457;"	c	subroutine:CHECK3
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	64;"	c	subroutine:HEADER
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	668;"	c	subroutine:STEST
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	747;"	c	subroutine:ITEST1
HEADER	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      SUBROUTINE HEADER$/;"	s
IC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      INTEGER          IC$/;"	v	program:SBLAT1
ICASE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      INTEGER          ICASE,/;"	v	program:SBLAT1
INCX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      INTEGER          ICASE, INCX,/;"	v	program:SBLAT1
INCY	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      INTEGER          ICASE, INCX, INCY,/;"	v	program:SBLAT1
ITEST1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      SUBROUTINE ITEST1(/;"	s
MODE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      INTEGER          ICASE, INCX, INCY, MODE,/;"	v	program:SBLAT1
N	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      INT/;"	v	program:SBLAT1
NOUT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      INTEGER          NOUT$/;"	v	program:SBLAT1
PASS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      LOGICAL          PASS$/;"	v	program:SBLAT1
SBLAT1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      PROGRAM SBLAT1$/;"	p
SDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      REAL             FUNCTION SDIFF(/;"	f
SFAC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      REAL             SFAC$/;"	v	program:SBLAT1
STEST	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      SUBROUTINE STEST(/;"	s
STEST1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat1.f	/^      SUBROUTINE STEST1(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                                 AS( I ) = AA( I )$/;"	l	subroutine:SCHK1	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                              AS( I ) = AA( I )$/;"	l	subroutine:SCHK2	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                        AS( I ) = AA( I )$/;"	l	subroutine:SCHK4	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                        AS( I ) = AA( I )$/;"	l	subroutine:SCHK6	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                     AS( I ) = AA( I )$/;"	l	subroutine:SCHK5	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^               JX = JX + INCXL$/;"	l	subroutine:SMVCH	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^            END IF$/;"	l	subroutine:SMAKE	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^         END IF$/;"	l	program:SBLAT2	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^         Z( I ) = ZERO$/;"	l	subroutine:SCHK3	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      IC = IC + 1$/;"	l	function:SBEG	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $            GO TO 70$/;"	l	function:LSERES	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $        160 )ISNUM$/;"	l	subroutine:SCHKE	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      GO TO 20$/;"	l	function:LSE	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:SMAKE	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      GO TO 170$/;"	l	subroutine:SCHKE	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      GO TO 90$/;"	l	program:SBLAT2	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK1	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK2	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK3	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK4	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK5	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK6	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^               AA( I + ( J - 1 )*LDA ) = A( I, J )$/;"	l	subroutine:SMAKE	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^            A( I, J ) = MAX( I - J + 1, 0 )$/;"	l	program:SBLAT2	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      GO TO 170$/;"	l	subroutine:SCHKE	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK1	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK2	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK3	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK4	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK5	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK6	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:SMAKE	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^         Y( J ) = ZERO$/;"	l	program:SBLAT2	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      GO TO 170$/;"	l	subroutine:SCHKE	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK1	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK2	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK3	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK4	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK5	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK6	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^         YY( J ) = J*( ( J + 1 )*J )\/2 - ( ( J + 1 )*J*( J - 1 ) )\/3$/;"	l	program:SBLAT2	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      GO TO 170$/;"	l	subroutine:SCHKE	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^  120       CONTINUE$/;"	l	subroutine:SMAKE	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK1	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK2	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK3	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK4	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK5	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK6	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:SMAKE	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      GO TO 170$/;"	l	subroutine:SCHKE	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*           Test SGEMV, 01, and SGBMV, 02.$/;"	l	program:SBLAT2	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK1	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK4	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK6	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^               AA( I + ( J - 1 )*LDA ) = A( I + J - KK, J )$/;"	l	subroutine:SMAKE	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      GO TO 170$/;"	l	subroutine:SCHKE	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*           Test SSYMV, 03, SSBMV, 04, and SSPMV, 05.$/;"	l	program:SBLAT2	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK4	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK6	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:SMAKE	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      GO TO 170$/;"	l	subroutine:SCHKE	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*           STRSV, 09, STBSV, 10, and STPSV, 11.$/;"	l	program:SBLAT2	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK6	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^  160       CONTINUE$/;"	l	subroutine:SMAKE	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*           Test SGER, 12.$/;"	l	program:SBLAT2	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK6	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHKE	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^               END IF$/;"	l	subroutine:SMAKE	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*           Test SSYR, 13, and SSPR, 14.$/;"	l	program:SBLAT2	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^  180       CONTINUE$/;"	l	subroutine:SMAKE	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*           Test SSYR2, 15, and SSPR2, 16.$/;"	l	program:SBLAT2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                                 XS( I ) = XX( I )$/;"	l	subroutine:SCHK1	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                              XS( I ) = XX( I )$/;"	l	subroutine:SCHK2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                           AS( I ) = AA( I )$/;"	l	subroutine:SCHK3	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                        XS( I ) = XX( I )$/;"	l	subroutine:SCHK4	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                        XS( I ) = XX( I )$/;"	l	subroutine:SCHK6	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                     XS( I ) = XX( I )$/;"	l	subroutine:SCHK5	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^               JX = JX + INCXL$/;"	l	subroutine:SMVCH	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^         END IF$/;"	l	program:SBLAT2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      GO TO 170$/;"	l	subroutine:SCHKE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      GO TO 30$/;"	l	function:LSE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      A( J, J ) = ONE$/;"	l	subroutine:SMAKE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^   10       CONTINUE$/;"	l	function:LSERES	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	program:SBLAT2	file:
210	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^         END IF$/;"	l	program:SBLAT2	file:
220	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	program:SBLAT2	file:
230	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	program:SBLAT2	file:
240	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	program:SBLAT2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                                 YS( I ) = YY( I )$/;"	l	subroutine:SCHK1	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                              YS( I ) = YY( I )$/;"	l	subroutine:SCHK2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                           XS( I ) = XX( I )$/;"	l	subroutine:SCHK3	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                        YS( I ) = YY( I )$/;"	l	subroutine:SCHK4	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                        YS( I ) = YY( I )$/;"	l	subroutine:SCHK6	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^               AA( I + ( J - 1 )*LDA ) = A( I, J )$/;"	l	subroutine:SMAKE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^         END IF$/;"	l	program:SBLAT2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^         IY = IY + INCYL$/;"	l	subroutine:SMVCH	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      GO TO 170$/;"	l	subroutine:SCHKE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      LSE = .FALSE.$/;"	l	function:LSE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                  WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:SCHK5	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $            GO TO 70$/;"	l	function:LSERES	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                           Z( I ) = X( I )$/;"	l	subroutine:SCHK5	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:SMAKE	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^         LTEST( I ) = .FALSE.$/;"	l	program:SBLAT2	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      GO TO 170$/;"	l	subroutine:SCHKE	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                              WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:SCHK1	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                           WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:SCHK2	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                        WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:SCHK3	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                     WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:SCHK4	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                     WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:SCHK6	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $            GO TO 70$/;"	l	function:LSERES	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      GO TO 50$/;"	l	subroutine:SMVCH	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                              Z( I ) = X( I )$/;"	l	subroutine:SCHK4	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                              Z( I, 1 ) = X( I )$/;"	l	subroutine:SCHK6	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                           Z( I ) = X( N - I + 1 )$/;"	l	subroutine:SCHK5	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      GO TO 170$/;"	l	subroutine:SCHKE	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                              = X( I )$/;"	l	subroutine:SCHK3	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^   40       CONTINUE$/;"	l	function:LSERES	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^   40       CONTINUE$/;"	l	subroutine:SMAKE	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^   40 CONTINUE$/;"	l	program:SBLAT2	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK1	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK2	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SMVCH	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                              Z( I ) = X( M - I + 1 )$/;"	l	subroutine:SCHK4	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                              Z( I, 1 ) = X( N - I + 1 )$/;"	l	subroutine:SCHK6	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^               AA( I1 + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:SMAKE	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^         END IF$/;"	l	subroutine:SMVCH	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      GO TO 170$/;"	l	subroutine:SCHKE	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                     GO TO 110$/;"	l	subroutine:SCHK5	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      GO TO 70$/;"	l	program:SBLAT2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	function:LSERES	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK1	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK3	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                              Z( I, 2 ) = Y( I )$/;"	l	subroutine:SCHK6	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^               AA( I2 + ( J - 1 )*LDA ) = A( I2 + J - KU - 1, J )$/;"	l	subroutine:SMAKE	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      GO TO 170$/;"	l	subroutine:SCHKE	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      GO TO 80$/;"	l	function:LSERES	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      STOP$/;"	l	program:SBLAT2	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                        GO TO 130$/;"	l	subroutine:SCHK4	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK1	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK2	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK3	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK5	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SMVCH	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^                              Z( I, 2 ) = Y( N - I + 1 )$/;"	l	subroutine:SCHK6	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^               AA( I3 + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:SMAKE	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      GO TO 170$/;"	l	subroutine:SCHKE	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      LSERES = .FALSE.$/;"	l	function:LSERES	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	program:SBLAT2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK1	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK3	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK4	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK5	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      EPS = ONE$/;"	l	program:SBLAT2	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      GO TO 170$/;"	l	subroutine:SCHKE	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                        GO TO 150$/;"	l	subroutine:SCHK6	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^   80       CONTINUE$/;"	l	subroutine:SMAKE	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK1	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK2	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK3	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK4	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK5	file:
9980	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9981 FORMAT( \/' ******* FATAL ERROR - TESTS ABANDONED *******' )$/;"	l	program:SBLAT2	file:
9981	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9982 FORMAT( \/' END OF TESTS' )$/;"	l	program:SBLAT2	file:
9982	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9983 FORMAT( 1X, A6, ' WAS NOT TESTED' )$/;"	l	program:SBLAT2	file:
9983	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9984 FORMAT( A6, L2 )$/;"	l	program:SBLAT2	file:
9984	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      , \/' ******* TESTS ABANDONED *******' )$/;"	l	program:SBLAT2	file:
9985	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      'ESTS ABANDONED *******' )$/;"	l	program:SBLAT2	file:
9986	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      \/' ******* TESTS ABANDONED *******' )$/;"	l	program:SBLAT2	file:
9987	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9988 FORMAT( '   FOR BETA           ', 7F6.1 )$/;"	l	program:SBLAT2	file:
9988	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9989 FORMAT( '   FOR ALPHA          ', 7F6.1 )$/;"	l	program:SBLAT2	file:
9989	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9990 FORMAT( '   FOR INCX AND INCY  ', 7I6 )$/;"	l	program:SBLAT2	file:
9990	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9991 FORMAT( '   FOR K              ', 7I6 )$/;"	l	program:SBLAT2	file:
9991	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9992 FORMAT( '   FOR N              ', 9I6 )$/;"	l	program:SBLAT2	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      'OLLOWING PARAMETER VALUES WILL BE USED:' )$/;"	l	program:SBLAT2	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      I2, ', A,', I3, ')                        .' )$/;"	l	subroutine:SCHK5	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      I2, ', Y,', I2, ', A,', I3, ')                  .' )$/;"	l	subroutine:SCHK6	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      I3, ', X,', I2, ')                     .' )$/;"	l	subroutine:SCHK3	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      I3, ', X,', I2, ',', F4.1, ', Y,', I2, ')             .' )$/;"	l	subroutine:SCHK2	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      ' A,', I3, ', X,', I2, ')                 .' )$/;"	l	subroutine:SCHK3	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      ')         .' )$/;"	l	subroutine:SCHK1	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      ')         .' )$/;"	l	subroutine:SCHK2	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      ', Y,', I2, ', A,', I3, ')                  .' )$/;"	l	subroutine:SCHK4	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      I2 )$/;"	l	program:SBLAT2	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      I2, ', AP)                           .' )$/;"	l	subroutine:SCHK5	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      I2, ', Y,', I2, ', AP)                     .' )$/;"	l	subroutine:SCHK6	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      ', A,', I3, ', X,', I2, ',', F4.1, ', Y,', I2, ') .' )$/;"	l	subroutine:SCHK1	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      ', X,', I2, ',', F4.1, ', Y,', I2, ')                .' )$/;"	l	subroutine:SCHK2	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      'X,', I2, ')                        .' )$/;"	l	subroutine:SCHK3	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:SCHK4	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:SCHK5	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:SCHK6	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9995 FORMAT( ' VALUE OF K IS LESS THAN 0' )$/;"	l	program:SBLAT2	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:SCHK1	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:SCHK2	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:SCHK3	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:SCHK4	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:SCHK5	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:SCHK6	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9996 FORMAT( ' VALUE OF N IS LESS THAN 0 OR GREATER THAN ', I2 )$/;"	l	program:SBLAT2	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:SCHK1	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:SCHK2	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:SCHK3	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:SCHK4	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:SCHK5	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:SCHK6	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      'THAN ', I2 )$/;"	l	program:SBLAT2	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      'AD OF ', A6, ' *******' )$/;"	l	subroutine:XERBLA	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:SCHK1	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:SCHK2	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:SCHK3	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:SCHK4	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:SCHK5	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:SCHK6	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9998 FORMAT( ' RELATIVE MACHINE PRECISION IS TAKEN TO BE', 1P, E9.1 )$/;"	l	program:SBLAT2	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      ' OF ', I2, ' *******' )$/;"	l	subroutine:XERBLA	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      'S THAN', F8.2 )$/;"	l	program:SBLAT2	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      'S)' )$/;"	l	subroutine:SCHK1	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      'S)' )$/;"	l	subroutine:SCHK2	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      'S)' )$/;"	l	subroutine:SCHK3	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      'S)' )$/;"	l	subroutine:SCHK4	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      'S)' )$/;"	l	subroutine:SCHK5	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      'S)' )$/;"	l	subroutine:SCHK6	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $      'TED RESULT' )$/;"	l	subroutine:SMVCH	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^ 9999 FORMAT( ' ', A6, ' PASSED THE TESTS OF ERROR-EXITS' )$/;"	l	subroutine:SCHKE	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	program:SBLAT2	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:CHKXER	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK1	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK2	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK3	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK4	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK5	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHK6	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SCHKE	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:SMVCH	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^*$/;"	l	subroutine:XERBLA	file:
A	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      REAL/;"	v	program:SBLAT2
AA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      REAL               A( NMAX, NMAX ), AA(/;"	v	program:SBLAT2
ALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      REAL               A( NMAX, NMAX ), AA( NMAX*NMAX ),$/;"	v	program:SBLAT2
AS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                   ALF( NALMAX ), AS(/;"	v	program:SBLAT2
BET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                   ALF( NALMAX ), AS( NMAX*NMAX ), BET(/;"	v	program:SBLAT2
CHKXER	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      SUBROUTINE CHKXER(/;"	s
EPS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      REAL               EPS,/;"	v	program:SBLAT2
ERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      REAL               EPS, ERR,/;"	v	program:SBLAT2
FATAL	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      LOGICAL            FATAL,/;"	v	program:SBLAT2
G	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                   ALF( NALMAX ), AS( NMAX*NMAX ), BET( NBEMAX ),$/;"	v	program:SBLAT2
HALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      REAL               ZERO, HALF,/;"	v	program:SBLAT2
I	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      IN/;"	v	program:SBLAT2
IDIM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            IDIM(/;"	v	program:SBLAT2
INC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            IDIM( NIDMAX ), INC(/;"	v	program:SBLAT2
INCMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            NMAX, INCMAX$/;"	v	program:SBLAT2
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	111;"	c	program:SBLAT2
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	1123;"	c	subroutine:SCHK3
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	1480;"	c	subroutine:SCHK4
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	1742;"	c	subroutine:SCHK5
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	2021;"	c	subroutine:SCHK6
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	2313;"	c	subroutine:SCHKE
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	3110;"	c	subroutine:XERBLA
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	443;"	c	subroutine:SCHK1
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	783;"	c	subroutine:SCHK2
INFOT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            INFOT,/;"	v	program:SBLAT2
ISNUM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            I, ISNUM,/;"	v	program:SBLAT2
J	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            I, ISNUM, J,/;"	v	program:SBLAT2
KB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            IDIM( NIDMAX ), INC( NINMAX ), KB(/;"	v	program:SBLAT2
LERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      LOGICAL            LERR,/;"	v	program:SBLAT2
LSE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      LOGICAL            LSE$/;"	v	program:SBLAT2
LSE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      LOGICAL FUNCTION LSE(/;"	f
LSERES	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      LOGICAL FUNCTION LSERES(/;"	f
LTEST	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      LOGICAL            LTEST(/;"	v	program:SBLAT2
LTESTT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      LOGICAL            FATAL, LTESTT,/;"	v	program:SBLAT2
N	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INT/;"	v	program:SBLAT2
NALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF,/;"	v	program:SBLAT2
NALMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            NINMAX, NIDMAX, NKBMAX, NALMAX,/;"	v	program:SBLAT2
NBEMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            NINMAX, NIDMAX, NKBMAX, NALMAX, NBEMAX$/;"	v	program:SBLAT2
NBET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET,/;"	v	program:SBLAT2
NIDIM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM,/;"	v	program:SBLAT2
NIDMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            NINMAX, NIDMAX,/;"	v	program:SBLAT2
NIN	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            NIN$/;"	v	program:SBLAT2
NINC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NINC,/;"	v	program:SBLAT2
NINMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            NINMAX,/;"	v	program:SBLAT2
NKB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NINC, NKB,/;"	v	program:SBLAT2
NKBMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            NINMAX, NIDMAX, NKBMAX,/;"	v	program:SBLAT2
NMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            NMAX,/;"	v	program:SBLAT2
NOUT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NINC, NKB,$/;"	v	program:SBLAT2
NOUTC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            INFOT, NOUTC$/;"	v	program:SBLAT2
NSUBS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      INTEGER            NSUBS$/;"	v	program:SBLAT2
NTRA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                   NOUT, NTRA$/;"	v	program:SBLAT2
OK	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      LOGICAL            LERR, OK$/;"	v	program:SBLAT2
ONE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      REAL               ZERO, HALF, ONE$/;"	v	program:SBLAT2
REWI	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI,/;"	v	program:SBLAT2
SAME	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME,/;"	v	program:SBLAT2
SBEG	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      REAL FUNCTION SBEG(/;"	f
SBLAT2	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      PROGRAM SBLAT2$/;"	p
SCHK1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      SUBROUTINE SCHK1(/;"	s
SCHK2	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      SUBROUTINE SCHK2(/;"	s
SCHK3	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      SUBROUTINE SCHK3(/;"	s
SCHK4	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      SUBROUTINE SCHK4(/;"	s
SCHK5	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      SUBROUTINE SCHK5(/;"	s
SCHK6	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      SUBROUTINE SCHK6(/;"	s
SCHKE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      SUBROUTINE SCHKE(/;"	s
SDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      REAL               SDIFF$/;"	v	program:SBLAT2
SDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      REAL FUNCTION SDIFF(/;"	f
SFATAL	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL,/;"	v	program:SBLAT2
SMAKE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      SUBROUTINE SMAKE(/;"	s
SMVCH	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      SUBROUTINE SMVCH(/;"	s
SNAMES	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      CHARACTER*6        SNAMES(/;"	v	program:SBLAT2
SNAMET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      CHARACTER*6        SNAMET$/;"	v	program:SBLAT2
SNAPS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      CHARACTER*32       SNAPS,/;"	v	program:SBLAT2
SRNAMC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	112;"	c	program:SBLAT2
SRNAMC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	3111;"	c	subroutine:XERBLA
SRNAMT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      CHARACTER*6        SRNAMT$/;"	v	program:SBLAT2
SUMMRY	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      CHARACTER*32       SNAPS, SUMMRY$/;"	v	program:SBLAT2
THRESH	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      REAL               EPS, ERR, THRESH$/;"	v	program:SBLAT2
TRACE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL, TRACE,/;"	v	program:SBLAT2
TRANS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      CHARACTER*1        TRANS$/;"	v	program:SBLAT2
TSTERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL, TRACE,$/;"	v	program:SBLAT2
X	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                   G( NMAX /;"	v	program:SBLAT2
XERBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      SUBROUTINE XERBLA(/;"	s
XS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                   G( NMAX ), X( NMAX ), XS(/;"	v	program:SBLAT2
XX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                   G( NMAX ), X( NMAX ), XS( NMAX*INCMAX ),$/;"	v	program:SBLAT2
Y	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                   XX( NMAX*INCMAX ), Y(/;"	v	program:SBLAT2
YS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                   XX( NMAX*INCMAX ), Y( NMAX ),$/;"	v	program:SBLAT2
YT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                   YS( NMAX*INCMAX ), YT(/;"	v	program:SBLAT2
YY	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                   YS( NMAX*INCMAX ), YT( NMAX ),$/;"	v	program:SBLAT2
Z	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^     $                   YY( NMAX*INCMAX ), Z(/;"	v	program:SBLAT2
ZERO	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat2.f	/^      REAL               ZERO,/;"	v	program:SBLAT2
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^                              AS( I ) = AA( I )$/;"	l	subroutine:SCHK1	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^                           AS( I ) = AA( I )$/;"	l	subroutine:SCHK2	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^                           AS( I ) = AA( I )$/;"	l	subroutine:SCHK4	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^                           AS( I ) = AA( I )$/;"	l	subroutine:SCHK5	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^            C( I, J ) = ZERO$/;"	l	subroutine:SCHK3	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^            END IF$/;"	l	subroutine:SMAKE	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^            G( I ) = ZERO$/;"	l	subroutine:SMMCH	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^         END IF$/;"	l	program:SBLAT3	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      GO TO ( 10, 20, 30, 40, 50, 60 )ISNUM$/;"	l	subroutine:SCHKE	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      IC = IC + 1$/;"	l	function:SBEG	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $            GO TO 70$/;"	l	function:LSERES	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      GO TO 20$/;"	l	function:LSE	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^            G( I ) = ABS( ALPHA )*G( I ) + ABS( BETA )*ABS( C( I, J ) )$/;"	l	subroutine:SMMCH	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^         C( J, 1 ) = ZERO$/;"	l	program:SBLAT3	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK1	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK2	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK3	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK4	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK5	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^         CC( J ) = J*( ( J + 1 )*J )\/2 - ( ( J + 1 )*J*( J - 1 ) )\/3$/;"	l	program:SBLAT3	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $         GO TO 130$/;"	l	subroutine:SMMCH	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK1	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK2	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK3	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK4	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK5	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^         AB( 1, NMAX + J ) = N - J + 1$/;"	l	program:SBLAT3	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK1	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK2	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK3	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK4	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK5	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SMMCH	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                     ( ( J + 1 )*J*( J - 1 ) )\/3$/;"	l	program:SBLAT3	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK1	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK3	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK4	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK5	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SMMCH	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^         END IF$/;"	l	subroutine:SMMCH	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*           Test SGEMM, 01.$/;"	l	program:SBLAT3	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK3	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK5	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*           Test SSYMM, 02.$/;"	l	program:SBLAT3	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK3	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK5	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SMMCH	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*           Test STRMM, 03, STRSM, 04.$/;"	l	program:SBLAT3	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK3	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK5	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*           Test SSYRK, 05.$/;"	l	program:SBLAT3	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*           Test SSYR2K, 06.$/;"	l	program:SBLAT3	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	program:SBLAT3	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^                              BS( I ) = BB( I )$/;"	l	subroutine:SCHK1	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^                           BS( I ) = BB( I )$/;"	l	subroutine:SCHK2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^                           BS( I ) = BB( I )$/;"	l	subroutine:SCHK5	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^                           CS( I ) = CC( I )$/;"	l	subroutine:SCHK4	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^                  G( I ) = G( I ) + ABS( A( I, K ) )*ABS( B( K, J ) )$/;"	l	subroutine:SMMCH	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^         LTEST( I ) = .FALSE.$/;"	l	program:SBLAT3	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      GO TO 30$/;"	l	function:LSE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      GO TO 70$/;"	l	subroutine:SCHKE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      A( J, J ) = ONE$/;"	l	subroutine:SMAKE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^   10       CONTINUE$/;"	l	function:LSERES	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^   10    CONTINUE$/;"	l	subroutine:SCHK3	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^         END IF$/;"	l	program:SBLAT3	file:
210	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	program:SBLAT3	file:
220	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	program:SBLAT3	file:
230	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	program:SBLAT3	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^                              AS( I ) = AA( I )$/;"	l	subroutine:SCHK3	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^                              CS( I ) = CC( I )$/;"	l	subroutine:SCHK1	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^                           CS( I ) = CC( I )$/;"	l	subroutine:SCHK2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^                           CS( I ) = CC( I )$/;"	l	subroutine:SCHK5	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^               AA( I + ( J - 1 )*LDA ) = A( I, J )$/;"	l	subroutine:SMAKE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      GO TO 70$/;"	l	subroutine:SCHKE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      LSE = .FALSE.$/;"	l	function:LSE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                        WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:SCHK4	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $            GO TO 70$/;"	l	function:LSERES	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^   20          CONTINUE$/;"	l	subroutine:SMMCH	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^   20 CONTINUE$/;"	l	program:SBLAT3	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^                              BS( I ) = BB( I )$/;"	l	subroutine:SCHK3	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^                  G( I ) = G( I ) + ABS( A( K, I ) )*ABS( B( K, J ) )$/;"	l	subroutine:SMMCH	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:SMAKE	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      GO TO 70$/;"	l	subroutine:SCHKE	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                           GO TO 110$/;"	l	subroutine:SCHK4	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                           WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:SCHK1	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                        WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:SCHK2	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                        WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:SCHK5	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $            GO TO 70$/;"	l	function:LSERES	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      GO TO 50$/;"	l	program:SBLAT3	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      GO TO 70$/;"	l	subroutine:SCHKE	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      STOP$/;"	l	program:SBLAT3	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                                           I )$/;"	l	subroutine:SCHK5	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                           WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:SCHK3	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^   40          CONTINUE$/;"	l	subroutine:SMMCH	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^   40       CONTINUE$/;"	l	function:LSERES	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^   40       CONTINUE$/;"	l	subroutine:SMAKE	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK1	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK2	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK4	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^                  G( I ) = G( I ) + ABS( A( I, K ) )*ABS( B( J, K ) )$/;"	l	subroutine:SMMCH	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:SMAKE	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      GO TO 70$/;"	l	subroutine:SCHKE	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                                           J )$/;"	l	subroutine:SCHK5	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                                    B( I, J )$/;"	l	subroutine:SCHK3	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	function:LSERES	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	program:SBLAT3	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK1	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK4	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^               AA( I + ( J - 1 )*LDA ) = A( I, J )$/;"	l	subroutine:SMAKE	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      EPS = ONE$/;"	l	program:SBLAT3	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      GO TO 80$/;"	l	function:LSERES	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                           GO TO 140$/;"	l	subroutine:SCHK5	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^   60                               CONTINUE$/;"	l	subroutine:SCHK3	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^   60          CONTINUE$/;"	l	subroutine:SMMCH	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK1	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK2	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK4	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHKE	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^                  G( I ) = G( I ) + ABS( A( K, I ) )*ABS( B( J, K ) )$/;"	l	subroutine:SMMCH	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:SMAKE	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      GO TO 70$/;"	l	program:SBLAT3	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      LSERES = .FALSE.$/;"	l	function:LSERES	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK1	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK3	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK4	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK5	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^            AB( I, J ) = MAX( I - J + 1, 0 )$/;"	l	program:SBLAT3	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^   80          CONTINUE$/;"	l	subroutine:SMMCH	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^   80       CONTINUE$/;"	l	subroutine:SMAKE	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK1	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK2	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK3	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK4	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK5	file:
9984	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^ 9985 FORMAT( \/' ******* FATAL ERROR - TESTS ABANDONED *******' )$/;"	l	program:SBLAT3	file:
9985	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^ 9986 FORMAT( \/' END OF TESTS' )$/;"	l	program:SBLAT3	file:
9986	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^ 9987 FORMAT( 1X, A6, ' WAS NOT TESTED' )$/;"	l	program:SBLAT3	file:
9987	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^ 9988 FORMAT( A6, L2 )$/;"	l	program:SBLAT3	file:
9988	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      '*******' )$/;"	l	program:SBLAT3	file:
9989	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      'ESTS ABANDONED *******' )$/;"	l	program:SBLAT3	file:
9990	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      \/' ******* TESTS ABANDONED *******' )$/;"	l	program:SBLAT3	file:
9991	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^ 9992 FORMAT( '   FOR BETA           ', 7F6.1 )$/;"	l	program:SBLAT3	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^ 9993 FORMAT( '   FOR ALPHA          ', 7F6.1 )$/;"	l	program:SBLAT3	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      ' .' )$/;"	l	subroutine:SCHK5	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      F4.1, ', A,', I3, ',', F4.1, ', C,', I3, ')           .' )$/;"	l	subroutine:SCHK4	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^ 9994 FORMAT( '   FOR N              ', 9I6 )$/;"	l	program:SBLAT3	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      ' .' )$/;"	l	subroutine:SCHK2	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      'C,', I3, ').' )$/;"	l	subroutine:SCHK1	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      'OLLOWING PARAMETER VALUES WILL BE USED:' )$/;"	l	program:SBLAT3	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      F4.1, ', A,', I3, ', B,', I3, ')        .' )$/;"	l	subroutine:SCHK3	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:SCHK4	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:SCHK5	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:SCHK1	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:SCHK2	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:SCHK3	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:SCHK4	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:SCHK5	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^ 9996 FORMAT( ' VALUE OF N IS LESS THAN 0 OR GREATER THAN ', I2 )$/;"	l	program:SBLAT3	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:SCHK1	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:SCHK2	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:SCHK3	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:SCHK4	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:SCHK5	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      'THAN ', I2 )$/;"	l	program:SBLAT3	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      'AD OF ', A6, ' *******' )$/;"	l	subroutine:XERBLA	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:SCHK1	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:SCHK2	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:SCHK3	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:SCHK4	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:SCHK5	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^ 9998 FORMAT( ' RELATIVE MACHINE PRECISION IS TAKEN TO BE', 1P, E9.1 )$/;"	l	program:SBLAT3	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^ 9998 FORMAT( 1X, I7, 2G18.6 )$/;"	l	subroutine:SMMCH	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      ' OF ', I2, ' *******' )$/;"	l	subroutine:XERBLA	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      'S THAN', F8.2 )$/;"	l	program:SBLAT3	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      'S)' )$/;"	l	subroutine:SCHK1	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      'S)' )$/;"	l	subroutine:SCHK2	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      'S)' )$/;"	l	subroutine:SCHK3	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      'S)' )$/;"	l	subroutine:SCHK4	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      'S)' )$/;"	l	subroutine:SCHK5	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $      'TED RESULT' )$/;"	l	subroutine:SMMCH	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^ 9999 FORMAT( ' ', A6, ' PASSED THE TESTS OF ERROR-EXITS' )$/;"	l	subroutine:SCHKE	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	program:SBLAT3	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:CHKXER	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK1	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK2	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK3	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK4	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHK5	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SCHKE	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:SMMCH	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^*$/;"	l	subroutine:XERBLA	file:
AA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      REAL               AA(/;"	v	program:SBLAT3
AB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      REAL               AA( NMAX*NMAX ), AB(/;"	v	program:SBLAT3
ALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      REAL               AA( NMAX*NMAX ), AB( NMAX, 2*NMAX ),$/;"	v	program:SBLAT3
AS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                   ALF( NALMAX ), AS(/;"	v	program:SBLAT3
BB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                   ALF( NALMAX ), AS( NMAX*NMAX ),$/;"	v	program:SBLAT3
BET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                   BB( NMAX*NMAX ), BET(/;"	v	program:SBLAT3
BS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                   BB( NMAX*NMAX ), BET( NBEMAX ),$/;"	v	program:SBLAT3
C	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                   BS( NMAX*NMAX ), C(/;"	v	program:SBLAT3
CC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                   BS( NMAX*NMAX ), C( NMAX, NMAX ),$/;"	v	program:SBLAT3
CHKXER	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      SUBROUTINE CHKXER(/;"	s
CS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                   CC( NMAX*NMAX ), CS(/;"	v	program:SBLAT3
CT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                   CC( NMAX*NMAX ), CS( NMAX*NMAX ), CT(/;"	v	program:SBLAT3
EPS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      REAL               EPS,/;"	v	program:SBLAT3
ERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      REAL               EPS, ERR,/;"	v	program:SBLAT3
FATAL	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      LOGICAL            FATAL,/;"	v	program:SBLAT3
G	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                   CC( NMAX*NMAX ), CS( NMAX*NMAX ), CT( NMAX ),$/;"	v	program:SBLAT3
HALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      REAL               ZERO, HALF,/;"	v	program:SBLAT3
I	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      IN/;"	v	program:SBLAT3
IDIM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      INTEGER            IDIM(/;"	v	program:SBLAT3
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	1263;"	c	subroutine:SCHK4
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	1538;"	c	subroutine:SCHK5
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	1829;"	c	subroutine:SCHKE
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	2795;"	c	subroutine:XERBLA
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	406;"	c	subroutine:SCHK1
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	687;"	c	subroutine:SCHK2
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	88;"	c	program:SBLAT3
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	958;"	c	subroutine:SCHK3
INFOT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      INTEGER            INFOT,/;"	v	program:SBLAT3
ISNUM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      INTEGER            I, ISNUM,/;"	v	program:SBLAT3
J	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      INTEGER            I, ISNUM, J,/;"	v	program:SBLAT3
LERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      LOGICAL            LERR,/;"	v	program:SBLAT3
LSE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      LOGICAL            LSE$/;"	v	program:SBLAT3
LSE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      LOGICAL FUNCTION LSE(/;"	f
LSERES	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      LOGICAL FUNCTION LSERES(/;"	f
LTEST	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      LOGICAL            LTEST(/;"	v	program:SBLAT3
LTESTT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      LOGICAL            FATAL, LTESTT,/;"	v	program:SBLAT3
N	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      INT/;"	v	program:SBLAT3
NALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF,/;"	v	program:SBLAT3
NALMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      INTEGER            NIDMAX, NALMAX,/;"	v	program:SBLAT3
NBEMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      INTEGER            NIDMAX, NALMAX, NBEMAX$/;"	v	program:SBLAT3
NBET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET,/;"	v	program:SBLAT3
NIDIM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM,/;"	v	program:SBLAT3
NIDMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      INTEGER            NIDMAX,/;"	v	program:SBLAT3
NIN	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      INTEGER            NIN$/;"	v	program:SBLAT3
NMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      INTEGER            NMAX$/;"	v	program:SBLAT3
NOUT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NOUT,/;"	v	program:SBLAT3
NOUTC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      INTEGER            INFOT, NOUTC$/;"	v	program:SBLAT3
NSUBS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      INTEGER            NSUBS$/;"	v	program:SBLAT3
NTRA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NOUT, NTRA$/;"	v	program:SBLAT3
OK	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      LOGICAL            LERR, OK$/;"	v	program:SBLAT3
ONE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      REAL               ZERO, HALF, ONE$/;"	v	program:SBLAT3
REWI	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI,/;"	v	program:SBLAT3
SAME	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME,/;"	v	program:SBLAT3
SBEG	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      REAL FUNCTION SBEG(/;"	f
SBLAT3	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      PROGRAM SBLAT3$/;"	p
SCHK1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      SUBROUTINE SCHK1(/;"	s
SCHK2	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      SUBROUTINE SCHK2(/;"	s
SCHK3	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      SUBROUTINE SCHK3(/;"	s
SCHK4	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      SUBROUTINE SCHK4(/;"	s
SCHK5	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      SUBROUTINE SCHK5(/;"	s
SCHKE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      SUBROUTINE SCHKE(/;"	s
SDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      REAL               SDIFF$/;"	v	program:SBLAT3
SDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      REAL FUNCTION SDIFF(/;"	f
SFATAL	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL,/;"	v	program:SBLAT3
SMAKE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      SUBROUTINE SMAKE(/;"	s
SMMCH	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      SUBROUTINE SMMCH(/;"	s
SNAMES	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      CHARACTER*6        SNAMES(/;"	v	program:SBLAT3
SNAMET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      CHARACTER*6        SNAMET$/;"	v	program:SBLAT3
SNAPS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      CHARACTER*32       SNAPS,/;"	v	program:SBLAT3
SRNAMC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	2796;"	c	subroutine:XERBLA
SRNAMC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	89;"	c	program:SBLAT3
SRNAMT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      CHARACTER*6        SRNAMT$/;"	v	program:SBLAT3
SUMMRY	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      CHARACTER*32       SNAPS, SUMMRY$/;"	v	program:SBLAT3
THRESH	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      REAL               EPS, ERR, THRESH$/;"	v	program:SBLAT3
TRACE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL, TRACE,/;"	v	program:SBLAT3
TRANSA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      CHARACTER*1        TRANSA,/;"	v	program:SBLAT3
TRANSB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      CHARACTER*1        TRANSA, TRANSB$/;"	v	program:SBLAT3
TSTERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL, TRACE,$/;"	v	program:SBLAT3
W	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^     $                   G( NMAX ), W(/;"	v	program:SBLAT3
XERBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      SUBROUTINE XERBLA(/;"	s
ZERO	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/sblat3.f	/^      REAL               ZERO,/;"	v	program:SBLAT3
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^            MWPCS(I) = (1.0D0,1.0D0)$/;"	l	subroutine:CHECK1	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^            MWPCS(I) = CX(I)$/;"	l	subroutine:CHECK1	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^            MWPCS(I) = -CX(I)$/;"	l	subroutine:CHECK1	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^               CX(I) = CV(I,NP1,INCX)$/;"	l	subroutine:CHECK1	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^               CY(I) = CY1(I)$/;"	l	subroutine:CHECK2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^         IF (PASS) WRITE (NOUT,99998)$/;"	l	program:ZBLAT1	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^         SSIZE(2*I) = DIMAG(CSIZE(I))$/;"	l	subroutine:CTEST	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^         WRITE (NOUT,99998)$/;"	l	subroutine:STEST	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      WRITE (NOUT,99998)$/;"	l	subroutine:ITEST1	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      WRITE (NOUT,99997) ICASE, N, INCX, INCY, MODE, ICOMP, ITRUE, ID$/;"	l	subroutine:ITEST1	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^     +     STRUE(I), SD, SSIZE(I)$/;"	l	subroutine:STEST	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^*$/;"	l	subroutine:CHECK1	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^*$/;"	l	subroutine:CHECK2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^   40    CONTINUE$/;"	l	subroutine:CHECK1	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^   40    CONTINUE$/;"	l	subroutine:CHECK2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^            MWPCS(I) = (1.0D0,1.0D0)$/;"	l	subroutine:CHECK1	file:
99997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^     +       '     SIZE(I)',\/1X)$/;"	l	subroutine:STEST	file:
99997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^     +       \/1X)$/;"	l	subroutine:ITEST1	file:
99998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^99999 FORMAT ('                                       FAIL')$/;"	l	subroutine:ITEST1	file:
99998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^99999 FORMAT ('                                       FAIL')$/;"	l	subroutine:STEST	file:
99998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^99999 FORMAT (' Complex BLAS Test Program Results',\/1X)$/;"	l	program:ZBLAT1	file:
99999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^*$/;"	l	program:ZBLAT1	file:
99999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^*$/;"	l	subroutine:HEADER	file:
99999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^*$/;"	l	subroutine:ITEST1	file:
99999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^*$/;"	l	subroutine:STEST	file:
CHECK1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      SUBROUTINE CHECK1(/;"	s
CHECK2	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      SUBROUTINE CHECK2(/;"	s
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	103;"	c	subroutine:CHECK1
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	17;"	c	program:ZBLAT1
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	302;"	c	subroutine:CHECK2
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	550;"	c	subroutine:STEST
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	58;"	c	subroutine:HEADER
COMBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	660;"	c	subroutine:ITEST1
CTEST	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      SUBROUTINE CTEST(/;"	s
HEADER	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      SUBROUTINE HEADER$/;"	s
IC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      INTEGER          IC$/;"	v	program:ZBLAT1
ICASE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      INTEGER          ICASE,/;"	v	program:ZBLAT1
INCX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      INTEGER          ICASE, INCX,/;"	v	program:ZBLAT1
INCY	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      INTEGER          ICASE, INCX, INCY,/;"	v	program:ZBLAT1
ITEST1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      SUBROUTINE ITEST1(/;"	s
MODE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      INTEGER          ICASE, INCX, INCY, MODE,/;"	v	program:ZBLAT1
N	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      INT/;"	v	program:ZBLAT1
NOUT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      INTEGER          NOUT$/;"	v	program:ZBLAT1
PASS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      LOGICAL          PASS$/;"	v	program:ZBLAT1
SDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      DOUBLE PRECISION FUNCTION SDIFF(/;"	f
SFAC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      DOUBLE PRECISION SFAC$/;"	v	program:ZBLAT1
STEST	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      SUBROUTINE STEST(/;"	s
STEST1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      SUBROUTINE STEST1(/;"	s
ZBLAT1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat1.f	/^      PROGRAM ZBLAT1$/;"	p
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                                 AS( I ) = AA( I )$/;"	l	subroutine:ZCHK1	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                              AS( I ) = AA( I )$/;"	l	subroutine:ZCHK2	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                        AS( I ) = AA( I )$/;"	l	subroutine:ZCHK4	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                        AS( I ) = AA( I )$/;"	l	subroutine:ZCHK6	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                     AS( I ) = AA( I )$/;"	l	subroutine:ZCHK5	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^               JX = JX + INCXL$/;"	l	subroutine:ZMVCH	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^            END IF$/;"	l	subroutine:ZMAKE	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^         END IF$/;"	l	program:ZBLAT2	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^         Z( I ) = ZERO$/;"	l	subroutine:ZCHK3	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      IC = IC + 1$/;"	l	function:ZBEG	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $            GO TO 70$/;"	l	function:LZERES	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $        170 )ISNUM$/;"	l	subroutine:ZCHKE	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      GO TO 20$/;"	l	function:LZE	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:ZMAKE	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      GO TO 180$/;"	l	subroutine:ZCHKE	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      GO TO 90$/;"	l	program:ZBLAT2	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK1	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK2	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK3	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK4	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK5	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK6	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^               AA( I + ( J - 1 )*LDA ) = A( I, J )$/;"	l	subroutine:ZMAKE	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^            A( I, J ) = MAX( I - J + 1, 0 )$/;"	l	program:ZBLAT2	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      GO TO 180$/;"	l	subroutine:ZCHKE	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK1	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK2	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK3	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK4	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK5	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK6	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:ZMAKE	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^         Y( J ) = ZERO$/;"	l	program:ZBLAT2	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      GO TO 180$/;"	l	subroutine:ZCHKE	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK1	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK2	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK3	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK4	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK5	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK6	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^            END IF$/;"	l	subroutine:ZMAKE	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^         YY( J ) = J*( ( J + 1 )*J )\/2 - ( ( J + 1 )*J*( J - 1 ) )\/3$/;"	l	program:ZBLAT2	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      GO TO 180$/;"	l	subroutine:ZCHKE	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK1	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK2	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK3	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK4	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK5	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK6	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:ZMAKE	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      GO TO 180$/;"	l	subroutine:ZCHKE	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*           Test ZGEMV, 01, and ZGBMV, 02.$/;"	l	program:ZBLAT2	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK1	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK4	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK6	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^               AA( I + ( J - 1 )*LDA ) = A( I + J - KK, J )$/;"	l	subroutine:ZMAKE	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      GO TO 180$/;"	l	subroutine:ZCHKE	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*           Test ZHEMV, 03, ZHBMV, 04, and ZHPMV, 05.$/;"	l	program:ZBLAT2	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK4	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK6	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:ZMAKE	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      GO TO 180$/;"	l	subroutine:ZCHKE	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*           ZTRSV, 09, ZTBSV, 10, and ZTPSV, 11.$/;"	l	program:ZBLAT2	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK6	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^            END IF$/;"	l	subroutine:ZMAKE	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      GO TO 180$/;"	l	subroutine:ZCHKE	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*           Test ZGERC, 12, ZGERU, 13.$/;"	l	program:ZBLAT2	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK6	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^               END IF$/;"	l	subroutine:ZMAKE	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*           Test ZHER, 14, and ZHPR, 15.$/;"	l	program:ZBLAT2	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHKE	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^  180       CONTINUE$/;"	l	subroutine:ZMAKE	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*           Test ZHER2, 16, and ZHPR2, 17.$/;"	l	program:ZBLAT2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                                 XS( I ) = XX( I )$/;"	l	subroutine:ZCHK1	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                              XS( I ) = XX( I )$/;"	l	subroutine:ZCHK2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                           AS( I ) = AA( I )$/;"	l	subroutine:ZCHK3	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                        XS( I ) = XX( I )$/;"	l	subroutine:ZCHK4	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                        XS( I ) = XX( I )$/;"	l	subroutine:ZCHK6	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                     XS( I ) = XX( I )$/;"	l	subroutine:ZCHK5	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^               JX = JX + INCXL$/;"	l	subroutine:ZMVCH	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^         END IF$/;"	l	program:ZBLAT2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      GO TO 180$/;"	l	subroutine:ZCHKE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      GO TO 30$/;"	l	function:LZE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      A( J, J ) = ONE$/;"	l	subroutine:ZMAKE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^   10       CONTINUE$/;"	l	function:LZERES	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	program:ZBLAT2	file:
210	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^         END IF$/;"	l	program:ZBLAT2	file:
220	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	program:ZBLAT2	file:
230	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	program:ZBLAT2	file:
240	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	program:ZBLAT2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                                 YS( I ) = YY( I )$/;"	l	subroutine:ZCHK1	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                              YS( I ) = YY( I )$/;"	l	subroutine:ZCHK2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                           XS( I ) = XX( I )$/;"	l	subroutine:ZCHK3	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                        YS( I ) = YY( I )$/;"	l	subroutine:ZCHK4	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                        YS( I ) = YY( I )$/;"	l	subroutine:ZCHK6	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^               AA( I + ( J - 1 )*LDA ) = A( I, J )$/;"	l	subroutine:ZMAKE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^               JX = JX + INCXL$/;"	l	subroutine:ZMVCH	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^         END IF$/;"	l	program:ZBLAT2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      GO TO 180$/;"	l	subroutine:ZCHKE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      LZE = .FALSE.$/;"	l	function:LZE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                  WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:ZCHK5	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $            GO TO 70$/;"	l	function:LZERES	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                           Z( I ) = X( I )$/;"	l	subroutine:ZCHK5	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:ZMAKE	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^         IY = IY + INCYL$/;"	l	subroutine:ZMVCH	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^         LTEST( I ) = .FALSE.$/;"	l	program:ZBLAT2	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      GO TO 180$/;"	l	subroutine:ZCHKE	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                              WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:ZCHK1	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                           WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:ZCHK2	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                        WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:ZCHK3	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                     WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:ZCHK4	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                     WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:ZCHK6	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $            GO TO 70$/;"	l	function:LZERES	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                              Z( I ) = X( I )$/;"	l	subroutine:ZCHK4	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                              Z( I, 1 ) = X( I )$/;"	l	subroutine:ZCHK6	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                           Z( I ) = X( N - I + 1 )$/;"	l	subroutine:ZCHK5	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      GO TO 180$/;"	l	subroutine:ZCHKE	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                              = X( I )$/;"	l	subroutine:ZCHK3	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      GO TO 60$/;"	l	subroutine:ZMVCH	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^   40       CONTINUE$/;"	l	function:LZERES	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^   40       CONTINUE$/;"	l	subroutine:ZMAKE	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^   40 CONTINUE$/;"	l	program:ZBLAT2	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK1	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                              Z( I ) = X( M - I + 1 )$/;"	l	subroutine:ZCHK4	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                              Z( I, 1 ) = X( N - I + 1 )$/;"	l	subroutine:ZCHK6	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^               AA( I1 + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:ZMAKE	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      GO TO 180$/;"	l	subroutine:ZCHKE	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                     GO TO 110$/;"	l	subroutine:ZCHK5	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      GO TO 70$/;"	l	program:ZBLAT2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	function:LZERES	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK1	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK3	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZMVCH	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                              Z( I, 2 ) = Y( I )$/;"	l	subroutine:ZCHK6	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^               AA( I2 + ( J - 1 )*LDA ) = A( I2 + J - KU - 1, J )$/;"	l	subroutine:ZMAKE	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^         END IF$/;"	l	subroutine:ZMVCH	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      GO TO 180$/;"	l	subroutine:ZCHKE	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      GO TO 80$/;"	l	function:LZERES	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      STOP$/;"	l	program:ZBLAT2	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                        GO TO 130$/;"	l	subroutine:ZCHK4	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK1	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK2	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK3	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK5	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^                              Z( I, 2 ) = Y( N - I + 1 )$/;"	l	subroutine:ZCHK6	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^               AA( I3 + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:ZMAKE	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      GO TO 180$/;"	l	subroutine:ZCHKE	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      LZERES = .FALSE.$/;"	l	function:LZERES	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	program:ZBLAT2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK1	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK3	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK4	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK5	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZMVCH	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      EPS = RONE$/;"	l	program:ZBLAT2	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      GO TO 180$/;"	l	subroutine:ZCHKE	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                        GO TO 150$/;"	l	subroutine:ZCHK6	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^   80       CONTINUE$/;"	l	subroutine:ZMAKE	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK1	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK2	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK3	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK4	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK5	file:
9980	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9981 FORMAT( \/' ******* FATAL ERROR - TESTS ABANDONED *******' )$/;"	l	program:ZBLAT2	file:
9981	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9982 FORMAT( \/' END OF TESTS' )$/;"	l	program:ZBLAT2	file:
9982	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9983 FORMAT( 1X, A6, ' WAS NOT TESTED' )$/;"	l	program:ZBLAT2	file:
9983	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9984 FORMAT( A6, L2 )$/;"	l	program:ZBLAT2	file:
9984	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      , \/' ******* TESTS ABANDONED *******' )$/;"	l	program:ZBLAT2	file:
9985	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'ESTS ABANDONED *******' )$/;"	l	program:ZBLAT2	file:
9986	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      \/' ******* TESTS ABANDONED *******' )$/;"	l	program:ZBLAT2	file:
9987	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      7( '(', F4.1, ',', F4.1, ')  ', : ) )$/;"	l	program:ZBLAT2	file:
9988	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      7( '(', F4.1, ',', F4.1, ')  ', : ) )$/;"	l	program:ZBLAT2	file:
9989	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9990 FORMAT( '   FOR INCX AND INCY  ', 7I6 )$/;"	l	program:ZBLAT2	file:
9990	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9991 FORMAT( '   FOR K              ', 7I6 )$/;"	l	program:ZBLAT2	file:
9991	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9992 FORMAT( '   FOR N              ', 9I6 )$/;"	l	program:ZBLAT2	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      '            .' )$/;"	l	subroutine:ZCHK6	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'OLLOWING PARAMETER VALUES WILL BE USED:' )$/;"	l	program:ZBLAT2	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'Y,', I2, ')             .' )$/;"	l	subroutine:ZCHK2	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      I2, ', A,', I3, ')                                      .' )$/;"	l	subroutine:ZCHK5	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      I3, ', X,', I2, ')                                   .' )$/;"	l	subroutine:ZCHK3	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      '       .' )$/;"	l	subroutine:ZCHK6	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      '      .' )$/;"	l	subroutine:ZCHK4	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      ' A,', I3, ', X,', I2, ')                               .' )$/;"	l	subroutine:ZCHK3	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      F4.1, '), Y,', I2, ')         .' )$/;"	l	subroutine:ZCHK1	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      F4.1, '), Y,', I2, ')         .' )$/;"	l	subroutine:ZCHK2	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      I2 )$/;"	l	program:ZBLAT2	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      I2, ', AP)                                         .' )$/;"	l	subroutine:ZCHK5	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      ')                .' )$/;"	l	subroutine:ZCHK2	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'X,', I2, ')                                      .' )$/;"	l	subroutine:ZCHK3	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      F4.1, '), Y,', I2, ') .' )$/;"	l	subroutine:ZCHK1	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:ZCHK4	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:ZCHK5	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:ZCHK6	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9995 FORMAT( ' VALUE OF K IS LESS THAN 0' )$/;"	l	program:ZBLAT2	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:ZCHK1	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:ZCHK2	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:ZCHK3	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:ZCHK4	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:ZCHK5	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:ZCHK6	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9996 FORMAT( ' VALUE OF N IS LESS THAN 0 OR GREATER THAN ', I2 )$/;"	l	program:ZBLAT2	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:ZCHK1	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:ZCHK2	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:ZCHK3	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:ZCHK4	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:ZCHK5	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:ZCHK6	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'THAN ', I2 )$/;"	l	program:ZBLAT2	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'AD OF ', A6, ' *******' )$/;"	l	subroutine:XERBLA	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:ZCHK1	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:ZCHK2	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:ZCHK3	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:ZCHK4	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:ZCHK5	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:ZCHK6	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9998 FORMAT( ' RELATIVE MACHINE PRECISION IS TAKEN TO BE', 1P, D9.1 )$/;"	l	program:ZBLAT2	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      ' OF ', I2, ' *******' )$/;"	l	subroutine:XERBLA	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'S THAN', F8.2 )$/;"	l	program:ZBLAT2	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'S)' )$/;"	l	subroutine:ZCHK1	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'S)' )$/;"	l	subroutine:ZCHK2	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'S)' )$/;"	l	subroutine:ZCHK3	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'S)' )$/;"	l	subroutine:ZCHK4	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'S)' )$/;"	l	subroutine:ZCHK5	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'S)' )$/;"	l	subroutine:ZCHK6	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $      'SULT                    COMPUTED RESULT' )$/;"	l	subroutine:ZMVCH	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^ 9999 FORMAT( ' ', A6, ' PASSED THE TESTS OF ERROR-EXITS' )$/;"	l	subroutine:ZCHKE	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	program:ZBLAT2	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:CHKXER	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:XERBLA	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK1	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK2	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK3	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK4	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK5	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHK6	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZCHKE	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^*$/;"	l	subroutine:ZMVCH	file:
A	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      COMPLEX*16         A(/;"	v	program:ZBLAT2
AA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      COMPLEX*16         A( NMAX, NMAX ), AA(/;"	v	program:ZBLAT2
ALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      COMPLEX*16         A( NMAX, NMAX ), AA( NMAX*NMAX ),$/;"	v	program:ZBLAT2
AS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                   ALF( NALMAX ), AS(/;"	v	program:ZBLAT2
BET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                   ALF( NALMAX ), AS( NMAX*NMAX ), BET(/;"	v	program:ZBLAT2
CHKXER	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      SUBROUTINE CHKXER(/;"	s
DDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      DOUBLE PRECISION   DDIFF$/;"	v	program:ZBLAT2
DDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      DOUBLE PRECISION FUNCTION DDIFF(/;"	f
EPS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      DOUBLE PRECISION   EPS,/;"	v	program:ZBLAT2
ERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      DOUBLE PRECISION   EPS, ERR,/;"	v	program:ZBLAT2
FATAL	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      LOGICAL            FATAL,/;"	v	program:ZBLAT2
G	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      DOUBLE PRECISION   G(/;"	v	program:ZBLAT2
I	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      IN/;"	v	program:ZBLAT2
IDIM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            IDIM(/;"	v	program:ZBLAT2
INC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            IDIM( NIDMAX ), INC(/;"	v	program:ZBLAT2
INCMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            NMAX, INCMAX$/;"	v	program:ZBLAT2
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	1147;"	c	subroutine:ZCHK3
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	116;"	c	program:ZBLAT2
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	1510;"	c	subroutine:ZCHK4
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	1789;"	c	subroutine:ZCHK5
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	2075;"	c	subroutine:ZCHK6
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	2370;"	c	subroutine:ZCHKE
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	3221;"	c	subroutine:XERBLA
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	455;"	c	subroutine:ZCHK1
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	800;"	c	subroutine:ZCHK2
INFOT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            INFOT,/;"	v	program:ZBLAT2
ISNUM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            I, ISNUM,/;"	v	program:ZBLAT2
J	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            I, ISNUM, J,/;"	v	program:ZBLAT2
KB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            IDIM( NIDMAX ), INC( NINMAX ), KB(/;"	v	program:ZBLAT2
LERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      LOGICAL            LERR,/;"	v	program:ZBLAT2
LTEST	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      LOGICAL            LTEST(/;"	v	program:ZBLAT2
LTESTT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      LOGICAL            FATAL, LTESTT,/;"	v	program:ZBLAT2
LZE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      LOGICAL            LZE$/;"	v	program:ZBLAT2
LZE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      LOGICAL FUNCTION LZE(/;"	f
LZERES	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      LOGICAL FUNCTION LZERES(/;"	f
N	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INT/;"	v	program:ZBLAT2
NALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF,/;"	v	program:ZBLAT2
NALMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            NINMAX, NIDMAX, NKBMAX, NALMAX,/;"	v	program:ZBLAT2
NBEMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            NINMAX, NIDMAX, NKBMAX, NALMAX, NBEMAX$/;"	v	program:ZBLAT2
NBET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET,/;"	v	program:ZBLAT2
NIDIM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM,/;"	v	program:ZBLAT2
NIDMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            NINMAX, NIDMAX,/;"	v	program:ZBLAT2
NIN	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            NIN$/;"	v	program:ZBLAT2
NINC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NINC,/;"	v	program:ZBLAT2
NINMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            NINMAX,/;"	v	program:ZBLAT2
NKB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NINC, NKB,/;"	v	program:ZBLAT2
NKBMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            NINMAX, NIDMAX, NKBMAX,/;"	v	program:ZBLAT2
NMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            NMAX,/;"	v	program:ZBLAT2
NOUT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NINC, NKB,$/;"	v	program:ZBLAT2
NOUTC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            INFOT, NOUTC$/;"	v	program:ZBLAT2
NSUBS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      INTEGER            NSUBS$/;"	v	program:ZBLAT2
NTRA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                   NOUT, NTRA$/;"	v	program:ZBLAT2
OK	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      LOGICAL            LERR, OK$/;"	v	program:ZBLAT2
ONE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      COMPLEX*16         ZERO, ONE$/;"	v	program:ZBLAT2
REWI	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI,/;"	v	program:ZBLAT2
RHALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      DOUBLE PRECISION   RZERO, RHALF,/;"	v	program:ZBLAT2
RONE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      DOUBLE PRECISION   RZERO, RHALF, RONE$/;"	v	program:ZBLAT2
RZERO	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      DOUBLE PRECISION   RZERO,/;"	v	program:ZBLAT2
SAME	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME,/;"	v	program:ZBLAT2
SFATAL	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL,/;"	v	program:ZBLAT2
SNAMES	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      CHARACTER*6        SNAMES(/;"	v	program:ZBLAT2
SNAMET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      CHARACTER*6        SNAMET$/;"	v	program:ZBLAT2
SNAPS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      CHARACTER*32       SNAPS,/;"	v	program:ZBLAT2
SRNAMC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	117;"	c	program:ZBLAT2
SRNAMC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	3222;"	c	subroutine:XERBLA
SRNAMT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      CHARACTER*6        SRNAMT$/;"	v	program:ZBLAT2
SUMMRY	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      CHARACTER*32       SNAPS, SUMMRY$/;"	v	program:ZBLAT2
THRESH	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      DOUBLE PRECISION   EPS, ERR, THRESH$/;"	v	program:ZBLAT2
TRACE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL, TRACE,/;"	v	program:ZBLAT2
TRANS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      CHARACTER*1        TRANS$/;"	v	program:ZBLAT2
TSTERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL, TRACE,$/;"	v	program:ZBLAT2
X	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                   ALF( NALMAX /;"	v	program:ZBLAT2
XERBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      SUBROUTINE XERBLA(/;"	s
XS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                   X( NMAX ), XS(/;"	v	program:ZBLAT2
XX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                   X( NMAX ), XS( NMAX*INCMAX ),$/;"	v	program:ZBLAT2
Y	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                   XX( NMAX*INCMAX ), Y(/;"	v	program:ZBLAT2
YS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                   XX( NMAX*INCMAX ), Y( NMAX ),$/;"	v	program:ZBLAT2
YT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                   YS( NMAX*INCMAX ), YT(/;"	v	program:ZBLAT2
YY	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                   YS( NMAX*INCMAX ), YT( NMAX ),$/;"	v	program:ZBLAT2
Z	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^     $                   YY( NMAX*INCMAX ), Z(/;"	v	program:ZBLAT2
ZBEG	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      COMPLEX*16 FUNCTION ZBEG(/;"	f
ZBLAT2	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      PROGRAM ZBLAT2$/;"	p
ZCHK1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      SUBROUTINE ZCHK1(/;"	s
ZCHK2	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      SUBROUTINE ZCHK2(/;"	s
ZCHK3	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      SUBROUTINE ZCHK3(/;"	s
ZCHK4	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      SUBROUTINE ZCHK4(/;"	s
ZCHK5	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      SUBROUTINE ZCHK5(/;"	s
ZCHK6	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      SUBROUTINE ZCHK6(/;"	s
ZCHKE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      SUBROUTINE ZCHKE(/;"	s
ZERO	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      COMPLEX*16         ZERO,/;"	v	program:ZBLAT2
ZMAKE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      SUBROUTINE ZMAKE(/;"	s
ZMVCH	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat2.f	/^      SUBROUTINE ZMVCH(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^                              AS( I ) = AA( I )$/;"	l	subroutine:ZCHK1	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^                           AS( I ) = AA( I )$/;"	l	subroutine:ZCHK2	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^                           AS( I ) = AA( I )$/;"	l	subroutine:ZCHK4	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^                           AS( I ) = AA( I )$/;"	l	subroutine:ZCHK5	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^            C( I, J ) = ZERO$/;"	l	subroutine:ZCHK3	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^            END IF$/;"	l	subroutine:ZMAKE	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^            G( I ) = RZERO$/;"	l	subroutine:ZMMCH	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^         END IF$/;"	l	program:ZBLAT3	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      IC = IC + 1$/;"	l	function:ZBEG	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $            GO TO 70$/;"	l	function:LZERES	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $        90 )ISNUM$/;"	l	subroutine:ZCHKE	file:
10	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      GO TO 20$/;"	l	function:LZE	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^         C( J, 1 ) = ZERO$/;"	l	program:ZBLAT3	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                        ABS1( B( J, K ) )$/;"	l	subroutine:ZMMCH	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK1	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK2	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK3	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK4	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK5	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHKE	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^         CC( J ) = J*( ( J + 1 )*J )\/2 - ( ( J + 1 )*J*( J - 1 ) )\/3$/;"	l	program:ZBLAT3	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^  100             CONTINUE$/;"	l	subroutine:ZMMCH	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK1	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK2	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK3	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK4	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK5	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^         AB( 1, NMAX + J ) = N - J + 1$/;"	l	program:ZBLAT3	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                           ABS1( B( J, K ) )$/;"	l	subroutine:ZMMCH	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK1	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK2	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK3	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK4	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK5	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                     ( ( J + 1 )*J*( J - 1 ) )\/3$/;"	l	program:ZBLAT3	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^  120                CONTINUE$/;"	l	subroutine:ZMMCH	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK1	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK3	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK4	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK5	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                           ABS1( B( J, K ) )$/;"	l	subroutine:ZMMCH	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*           Test ZGEMM, 01.$/;"	l	program:ZBLAT3	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK3	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK5	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^  140                CONTINUE$/;"	l	subroutine:ZMMCH	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*           Test ZHEMM, 02, ZSYMM, 03.$/;"	l	program:ZBLAT3	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK3	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK5	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                           ABS1( B( J, K ) )$/;"	l	subroutine:ZMMCH	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*           Test ZTRMM, 04, ZTRSM, 05.$/;"	l	program:ZBLAT3	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK3	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK5	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^  160                CONTINUE$/;"	l	subroutine:ZMMCH	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*           Test ZHERK, 06, ZSYRK, 07.$/;"	l	program:ZBLAT3	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                           ABS1( B( J, K ) )$/;"	l	subroutine:ZMMCH	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*           Test ZHER2K, 08, ZSYR2K, 09.$/;"	l	program:ZBLAT3	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^  180                CONTINUE$/;"	l	subroutine:ZMMCH	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	program:ZBLAT3	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^                              BS( I ) = BB( I )$/;"	l	subroutine:ZCHK1	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^                           BS( I ) = BB( I )$/;"	l	subroutine:ZCHK2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^                           BS( I ) = BB( I )$/;"	l	subroutine:ZCHK5	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^                           CS( I ) = CC( I )$/;"	l	subroutine:ZCHK4	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^                  G( I ) = G( I ) + ABS1( A( I, K ) )*ABS1( B( K, J ) )$/;"	l	subroutine:ZMMCH	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^         LTEST( I ) = .FALSE.$/;"	l	program:ZBLAT3	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      GO TO 100$/;"	l	subroutine:ZCHKE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      GO TO 30$/;"	l	function:LZE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      A( J, J ) = ONE$/;"	l	subroutine:ZMAKE	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^   10       CONTINUE$/;"	l	function:LZERES	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^   10    CONTINUE$/;"	l	subroutine:ZCHK3	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^         END IF$/;"	l	program:ZBLAT3	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $               ABS1( BETA )*ABS1( C( I, J ) )$/;"	l	subroutine:ZMMCH	file:
210	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $         GO TO 230$/;"	l	subroutine:ZMMCH	file:
210	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	program:ZBLAT3	file:
220	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	program:ZBLAT3	file:
220	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZMMCH	file:
230	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	program:ZBLAT3	file:
230	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZMMCH	file:
240	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^         END IF$/;"	l	subroutine:ZMMCH	file:
250	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZMMCH	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^                              AS( I ) = AA( I )$/;"	l	subroutine:ZCHK3	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^                              CS( I ) = CC( I )$/;"	l	subroutine:ZCHK1	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^                           CS( I ) = CC( I )$/;"	l	subroutine:ZCHK2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^                           CS( I ) = CC( I )$/;"	l	subroutine:ZCHK5	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^               AA( I + ( J - 1 )*LDA ) = A( I, J )$/;"	l	subroutine:ZMAKE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      GO TO 100$/;"	l	subroutine:ZCHKE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      LZE = .FALSE.$/;"	l	function:LZE	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                        WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:ZCHK4	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $            GO TO 70$/;"	l	function:LZERES	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^   20          CONTINUE$/;"	l	subroutine:ZMMCH	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^   20 CONTINUE$/;"	l	program:ZBLAT3	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^                              BS( I ) = BB( I )$/;"	l	subroutine:ZCHK3	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:ZMAKE	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      GO TO 100$/;"	l	subroutine:ZCHKE	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                           GO TO 110$/;"	l	subroutine:ZCHK4	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                           WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:ZCHK1	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                        ABS1( B( K, J ) )$/;"	l	subroutine:ZMMCH	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                        WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:ZCHK2	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                        WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:ZCHK5	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $            GO TO 70$/;"	l	function:LZERES	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      GO TO 50$/;"	l	program:ZBLAT3	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^                                    END IF$/;"	l	subroutine:ZCHK5	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      GO TO 100$/;"	l	subroutine:ZCHKE	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      STOP$/;"	l	program:ZBLAT3	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                           WRITE( NOUT, FMT = 9998 )I$/;"	l	subroutine:ZCHK3	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^   40             CONTINUE$/;"	l	subroutine:ZMMCH	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^   40       CONTINUE$/;"	l	function:LZERES	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^   40       CONTINUE$/;"	l	subroutine:ZMAKE	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK1	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK2	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK4	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^                                    END IF$/;"	l	subroutine:ZCHK5	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:ZMAKE	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      GO TO 100$/;"	l	subroutine:ZCHKE	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                                    B( I, J )$/;"	l	subroutine:ZCHK3	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                        ABS1( B( K, J ) )$/;"	l	subroutine:ZMMCH	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	function:LZERES	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	program:ZBLAT3	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK1	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK4	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^               AA( I + ( J - 1 )*LDA ) = A( I, J )$/;"	l	subroutine:ZMAKE	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      EPS = RONE$/;"	l	program:ZBLAT3	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      GO TO 100$/;"	l	subroutine:ZCHKE	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      GO TO 80$/;"	l	function:LZERES	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                           GO TO 140$/;"	l	subroutine:ZCHK5	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^   60                               CONTINUE$/;"	l	subroutine:ZCHK3	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^   60             CONTINUE$/;"	l	subroutine:ZMMCH	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK1	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK2	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK4	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^               AA( I + ( J - 1 )*LDA ) = ROGUE$/;"	l	subroutine:ZMAKE	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      GO TO 100$/;"	l	subroutine:ZCHKE	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      GO TO 70$/;"	l	program:ZBLAT3	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      LZERES = .FALSE.$/;"	l	function:LZERES	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                        ABS1( B( J, K ) )$/;"	l	subroutine:ZMMCH	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK1	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK3	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK4	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK5	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^            AB( I, J ) = MAX( I - J + 1, 0 )$/;"	l	program:ZBLAT3	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^            END IF$/;"	l	subroutine:ZMAKE	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      GO TO 100$/;"	l	subroutine:ZCHKE	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^   80             CONTINUE$/;"	l	subroutine:ZMMCH	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK1	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK2	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK3	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK4	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK5	file:
9984	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^ 9985 FORMAT( \/' ******* FATAL ERROR - TESTS ABANDONED *******' )$/;"	l	program:ZBLAT3	file:
9985	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^ 9986 FORMAT( \/' END OF TESTS' )$/;"	l	program:ZBLAT3	file:
9986	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^ 9987 FORMAT( 1X, A6, ' WAS NOT TESTED' )$/;"	l	program:ZBLAT3	file:
9987	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^ 9988 FORMAT( A6, L2 )$/;"	l	program:ZBLAT3	file:
9988	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      '*******' )$/;"	l	program:ZBLAT3	file:
9989	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      'ESTS ABANDONED *******' )$/;"	l	program:ZBLAT3	file:
9990	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      \/' ******* TESTS ABANDONED *******' )$/;"	l	program:ZBLAT3	file:
9991	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      7( '(', F4.1, ',', F4.1, ')  ', : ) )$/;"	l	program:ZBLAT3	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      '), C,', I3, ')          .' )$/;"	l	subroutine:ZCHK4	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      ',', F4.1, '), C,', I3, ')    .' )$/;"	l	subroutine:ZCHK5	file:
9992	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      7( '(', F4.1, ',', F4.1, ')  ', : ) )$/;"	l	program:ZBLAT3	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      '          .' )$/;"	l	subroutine:ZCHK4	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      ', C,', I3, ')           .' )$/;"	l	subroutine:ZCHK5	file:
9993	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^ 9994 FORMAT( '   FOR N              ', 9I6 )$/;"	l	program:ZBLAT3	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      '      .' )$/;"	l	subroutine:ZCHK3	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      ',', F4.1, '), C,', I3, ')    .' )$/;"	l	subroutine:ZCHK2	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      ',(', F4.1, ',', F4.1, '), C,', I3, ').' )$/;"	l	subroutine:ZCHK1	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      'OLLOWING PARAMETER VALUES WILL BE USED:' )$/;"	l	program:ZBLAT3	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:ZCHK4	file:
9994	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^ 9995 FORMAT( '      THESE ARE THE RESULTS FOR COLUMN ', I3 )$/;"	l	subroutine:ZCHK5	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:ZCHK1	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:ZCHK2	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:ZCHK3	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:ZCHK4	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^ 9996 FORMAT( ' ******* ', A6, ' FAILED ON CALL NUMBER:' )$/;"	l	subroutine:ZCHK5	file:
9995	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^ 9996 FORMAT( ' VALUE OF N IS LESS THAN 0 OR GREATER THAN ', I2 )$/;"	l	program:ZBLAT3	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:ZCHK1	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:ZCHK2	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:ZCHK3	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:ZCHK4	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      ' - SUSPECT *******' )$/;"	l	subroutine:ZCHK5	file:
9996	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      'THAN ', I2 )$/;"	l	program:ZBLAT3	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      'AD OF ', A6, ' *******' )$/;"	l	subroutine:XERBLA	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:ZCHK1	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:ZCHK2	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:ZCHK3	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:ZCHK4	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      'ANGED INCORRECTLY *******' )$/;"	l	subroutine:ZCHK5	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^ 9998 FORMAT( ' RELATIVE MACHINE PRECISION IS TAKEN TO BE', 1P, D9.1 )$/;"	l	program:ZBLAT3	file:
9997	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^ 9998 FORMAT( 1X, I7, 2( '  (', G15.6, ',', G15.6, ')' ) )$/;"	l	subroutine:ZMMCH	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      ' OF ', I2, ' *******' )$/;"	l	subroutine:XERBLA	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      'S THAN', F8.2 )$/;"	l	program:ZBLAT3	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      'S)' )$/;"	l	subroutine:ZCHK1	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      'S)' )$/;"	l	subroutine:ZCHK2	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      'S)' )$/;"	l	subroutine:ZCHK3	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      'S)' )$/;"	l	subroutine:ZCHK4	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      'S)' )$/;"	l	subroutine:ZCHK5	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $      'SULT                    COMPUTED RESULT' )$/;"	l	subroutine:ZMMCH	file:
9998	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^ 9999 FORMAT( ' ', A6, ' PASSED THE TESTS OF ERROR-EXITS' )$/;"	l	subroutine:ZCHKE	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	program:ZBLAT3	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:CHKXER	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:XERBLA	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK1	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK2	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK3	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK4	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHK5	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZCHKE	file:
9999	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^*$/;"	l	subroutine:ZMMCH	file:
AA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      COMPLEX*16         AA(/;"	v	program:ZBLAT3
AB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      COMPLEX*16         AA( NMAX*NMAX ), AB(/;"	v	program:ZBLAT3
ALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      COMPLEX*16         AA( NMAX*NMAX ), AB( NMAX, 2*NMAX ),$/;"	v	program:ZBLAT3
AS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                   ALF( NALMAX ), AS(/;"	v	program:ZBLAT3
BB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                   ALF( NALMAX ), AS( NMAX*NMAX ),$/;"	v	program:ZBLAT3
BET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                   BB( NMAX*NMAX ), BET(/;"	v	program:ZBLAT3
BS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                   BB( NMAX*NMAX ), BET( NBEMAX ),$/;"	v	program:ZBLAT3
C	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                   BS( NMAX*NMAX ), C(/;"	v	program:ZBLAT3
CC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                   BS( NMAX*NMAX ), C( NMAX, NMAX ),$/;"	v	program:ZBLAT3
CHKXER	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      SUBROUTINE CHKXER(/;"	s
CS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                   CC( NMAX*NMAX ), CS(/;"	v	program:ZBLAT3
CT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                   CC( NMAX*NMAX ), CS( NMAX*NMAX ), CT(/;"	v	program:ZBLAT3
DDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      DOUBLE PRECISION   DDIFF$/;"	v	program:ZBLAT3
DDIFF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      DOUBLE PRECISION FUNCTION DDIFF(/;"	f
EPS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      DOUBLE PRECISION   EPS,/;"	v	program:ZBLAT3
ERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      DOUBLE PRECISION   EPS, ERR,/;"	v	program:ZBLAT3
FATAL	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      LOGICAL            FATAL,/;"	v	program:ZBLAT3
G	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      DOUBLE PRECISION   G(/;"	v	program:ZBLAT3
I	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      IN/;"	v	program:ZBLAT3
IDIM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      INTEGER            IDIM(/;"	v	program:ZBLAT3
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	1296;"	c	subroutine:ZCHK4
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	1629;"	c	subroutine:ZCHK5
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	1977;"	c	subroutine:ZCHKE
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	3417;"	c	subroutine:XERBLA
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	421;"	c	subroutine:ZCHK1
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	706;"	c	subroutine:ZCHK2
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	95;"	c	program:ZBLAT3
INFOC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	987;"	c	subroutine:ZCHK3
INFOT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      INTEGER            INFOT,/;"	v	program:ZBLAT3
ISNUM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      INTEGER            I, ISNUM,/;"	v	program:ZBLAT3
J	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      INTEGER            I, ISNUM, J,/;"	v	program:ZBLAT3
LERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      LOGICAL            LERR,/;"	v	program:ZBLAT3
LTEST	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      LOGICAL            LTEST(/;"	v	program:ZBLAT3
LTESTT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      LOGICAL            FATAL, LTESTT,/;"	v	program:ZBLAT3
LZE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      LOGICAL            LZE$/;"	v	program:ZBLAT3
LZE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      LOGICAL FUNCTION LZE(/;"	f
LZERES	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      LOGICAL FUNCTION LZERES(/;"	f
N	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      INT/;"	v	program:ZBLAT3
NALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF,/;"	v	program:ZBLAT3
NALMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      INTEGER            NIDMAX, NALMAX,/;"	v	program:ZBLAT3
NBEMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      INTEGER            NIDMAX, NALMAX, NBEMAX$/;"	v	program:ZBLAT3
NBET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET,/;"	v	program:ZBLAT3
NIDIM	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM,/;"	v	program:ZBLAT3
NIDMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      INTEGER            NIDMAX,/;"	v	program:ZBLAT3
NIN	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      INTEGER            NIN$/;"	v	program:ZBLAT3
NMAX	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      INTEGER            NMAX$/;"	v	program:ZBLAT3
NOUT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NOUT,/;"	v	program:ZBLAT3
NOUTC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      INTEGER            INFOT, NOUTC$/;"	v	program:ZBLAT3
NSUBS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      INTEGER            NSUBS$/;"	v	program:ZBLAT3
NTRA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      INTEGER            I, ISNUM, J, N, NALF, NBET, NIDIM, NOUT, NTRA$/;"	v	program:ZBLAT3
OK	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      LOGICAL            LERR, OK$/;"	v	program:ZBLAT3
ONE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      COMPLEX*16         ZERO, ONE$/;"	v	program:ZBLAT3
REWI	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI,/;"	v	program:ZBLAT3
RHALF	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      DOUBLE PRECISION   RZERO, RHALF,/;"	v	program:ZBLAT3
RONE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      DOUBLE PRECISION   RZERO, RHALF, RONE$/;"	v	program:ZBLAT3
RZERO	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      DOUBLE PRECISION   RZERO,/;"	v	program:ZBLAT3
SAME	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME,/;"	v	program:ZBLAT3
SFATAL	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL,/;"	v	program:ZBLAT3
SNAMES	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      CHARACTER*6        SNAMES(/;"	v	program:ZBLAT3
SNAMET	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      CHARACTER*6        SNAMET$/;"	v	program:ZBLAT3
SNAPS	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      CHARACTER*32       SNAPS,/;"	v	program:ZBLAT3
SRNAMC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	3418;"	c	subroutine:XERBLA
SRNAMC	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	96;"	c	program:ZBLAT3
SRNAMT	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      CHARACTER*6        SRNAMT$/;"	v	program:ZBLAT3
SUMMRY	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      CHARACTER*32       SNAPS, SUMMRY$/;"	v	program:ZBLAT3
THRESH	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      DOUBLE PRECISION   EPS, ERR, THRESH$/;"	v	program:ZBLAT3
TRACE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL, TRACE,/;"	v	program:ZBLAT3
TRANSA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      CHARACTER*1        TRANSA,/;"	v	program:ZBLAT3
TRANSB	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      CHARACTER*1        TRANSA, TRANSB$/;"	v	program:ZBLAT3
TSTERR	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      LOGICAL            FATAL, LTESTT, REWI, SAME, SFATAL, TRACE,$/;"	v	program:ZBLAT3
W	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^     $                   CC( NMAX*NMAX ), CS( NMAX*NMAX ), CT( NMAX ),$/;"	v	program:ZBLAT3
XERBLA	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      SUBROUTINE XERBLA(/;"	s
ZBEG	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      COMPLEX*16     FUNCTION ZBEG(/;"	f
ZBLAT3	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      PROGRAM ZBLAT3$/;"	p
ZCHK1	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      SUBROUTINE ZCHK1(/;"	s
ZCHK2	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      SUBROUTINE ZCHK2(/;"	s
ZCHK3	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      SUBROUTINE ZCHK3(/;"	s
ZCHK4	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      SUBROUTINE ZCHK4(/;"	s
ZCHK5	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      SUBROUTINE ZCHK5(/;"	s
ZCHKE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      SUBROUTINE ZCHKE(/;"	s
ZERO	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      COMPLEX*16         ZERO,/;"	v	program:ZBLAT3
ZMAKE	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      SUBROUTINE ZMAKE(/;"	s
ZMMCH	tags/before-github-sync/EXTERNAL/eigen3/blas/testing/zblat3.f	/^      SUBROUTINE ZMMCH(/;"	s
xerbla_	tags/before-github-sync/EXTERNAL/eigen3/blas/xerbla.cpp	/^int xerbla_(const char * msg, int *info, int)$/;"	f
10	tags/before-github-sync/EXTERNAL/eigen3/blas/zhbmv.f	/^                      Y(I) = ZERO$/;"	l	subroutine:ZHBMV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/zhbmv.f	/^                  Y(J) = Y(J) + ALPHA*TEMP2$/;"	l	subroutine:ZHBMV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/zhbmv.f	/^                      TEMP2 = TEMP2 + DCONJG(A(L+I,J))*X(IX)$/;"	l	subroutine:ZHBMV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/zhbmv.f	/^                  JY = JY + INCY$/;"	l	subroutine:ZHBMV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/zhbmv.f	/^                      Y(I) = BETA*Y(I)$/;"	l	subroutine:ZHBMV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/zhbmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:ZHBMV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/zhbmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:ZHBMV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/zhbmv.f	/^                      TEMP2 = TEMP2 + DCONJG(A(L+I,J))*X(I)$/;"	l	subroutine:ZHBMV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/zhbmv.f	/^                  Y(J) = Y(J) + TEMP1*DBLE(A(KPLUS1,J)) + ALPHA*TEMP2$/;"	l	subroutine:ZHBMV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/zhbmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:ZHBMV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/zhbmv.f	/^                  END IF$/;"	l	subroutine:ZHBMV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/zhbmv.f	/^                      TEMP2 = TEMP2 + DCONJG(A(L+I,J))*X(I)$/;"	l	subroutine:ZHBMV	file:
ZHBMV	tags/before-github-sync/EXTERNAL/eigen3/blas/zhbmv.f	/^      SUBROUTINE ZHBMV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpmv.f	/^                      Y(I) = ZERO$/;"	l	subroutine:ZHPMV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpmv.f	/^                  KK = KK + (N-J+1)$/;"	l	subroutine:ZHPMV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpmv.f	/^                      TEMP2 = TEMP2 + DCONJG(AP(K))*X(IX)$/;"	l	subroutine:ZHPMV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpmv.f	/^                  KK = KK + (N-J+1)$/;"	l	subroutine:ZHPMV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpmv.f	/^                      Y(I) = BETA*Y(I)$/;"	l	subroutine:ZHPMV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:ZHPMV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:ZHPMV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpmv.f	/^                      K = K + 1$/;"	l	subroutine:ZHPMV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpmv.f	/^                  KK = KK + J$/;"	l	subroutine:ZHPMV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpmv.f	/^                      IY = IY + INCY$/;"	l	subroutine:ZHPMV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpmv.f	/^                  KK = KK + J$/;"	l	subroutine:ZHPMV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpmv.f	/^                      K = K + 1$/;"	l	subroutine:ZHPMV	file:
ZHPMV	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpmv.f	/^      SUBROUTINE ZHPMV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpr.f	/^                          K = K + 1$/;"	l	subroutine:ZHPR	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpr.f	/^                  KK = KK + J$/;"	l	subroutine:ZHPR	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpr.f	/^                          IX = IX + INCX$/;"	l	subroutine:ZHPR	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpr.f	/^                  KK = KK + J$/;"	l	subroutine:ZHPR	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpr.f	/^                          K = K + 1$/;"	l	subroutine:ZHPR	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpr.f	/^                  KK = KK + N - J + 1$/;"	l	subroutine:ZHPR	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpr.f	/^                          AP(K) = AP(K) + X(IX)*TEMP$/;"	l	subroutine:ZHPR	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpr.f	/^                  KK = KK + N - J + 1$/;"	l	subroutine:ZHPR	file:
ZHPR	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpr.f	/^      SUBROUTINE ZHPR(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpr2.f	/^                          K = K + 1$/;"	l	subroutine:ZHPR2	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpr2.f	/^                  KK = KK + J$/;"	l	subroutine:ZHPR2	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpr2.f	/^                          IY = IY + INCY$/;"	l	subroutine:ZHPR2	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpr2.f	/^                  KK = KK + J$/;"	l	subroutine:ZHPR2	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpr2.f	/^                          K = K + 1$/;"	l	subroutine:ZHPR2	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpr2.f	/^                  KK = KK + N - J + 1$/;"	l	subroutine:ZHPR2	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpr2.f	/^                          AP(K) = AP(K) + X(IX)*TEMP1 + Y(IY)*TEMP2$/;"	l	subroutine:ZHPR2	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpr2.f	/^                  KK = KK + N - J + 1$/;"	l	subroutine:ZHPR2	file:
ZHPR2	tags/before-github-sync/EXTERNAL/eigen3/blas/zhpr2.f	/^      SUBROUTINE ZHPR2(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                              X(I) = X(I) + TEMP*A(L+I,J)$/;"	l	subroutine:ZTBMV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                              TEMP = TEMP + DCONJG(A(L+I,J))*X(I)$/;"	l	subroutine:ZTBMV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                      X(J) = TEMP$/;"	l	subroutine:ZTBMV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                              IX = IX - INCX$/;"	l	subroutine:ZTBMV	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                              IX = IX - INCX$/;"	l	subroutine:ZTBMV	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                      JX = JX - INCX$/;"	l	subroutine:ZTBMV	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                              TEMP = TEMP + A(L+I,J)*X(I)$/;"	l	subroutine:ZTBMV	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                              TEMP = TEMP + DCONJG(A(L+I,J))*X(I)$/;"	l	subroutine:ZTBMV	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                      X(J) = TEMP$/;"	l	subroutine:ZTBMV	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                              IX = IX + INCX$/;"	l	subroutine:ZTBMV	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                              IX = IX + INCX$/;"	l	subroutine:ZTBMV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                      END IF$/;"	l	subroutine:ZTBMV	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                      JX = JX + INCX$/;"	l	subroutine:ZTBMV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                              IX = IX + INCX$/;"	l	subroutine:ZTBMV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                      IF (J.GT.K) KX = KX + INCX$/;"	l	subroutine:ZTBMV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                              X(I) = X(I) + TEMP*A(L+I,J)$/;"	l	subroutine:ZTBMV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                      END IF$/;"	l	subroutine:ZTBMV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                              IX = IX - INCX$/;"	l	subroutine:ZTBMV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                      IF ((N-J).GE.K) KX = KX - INCX$/;"	l	subroutine:ZTBMV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^                              TEMP = TEMP + A(L+I,J)*X(I)$/;"	l	subroutine:ZTBMV	file:
ZTBMV	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbmv.f	/^      SUBROUTINE ZTBMV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                              X(I) = X(I) - TEMP*A(L+I,J)$/;"	l	subroutine:ZTBSV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                              TEMP = TEMP - DCONJG(A(L+I,J))*X(I)$/;"	l	subroutine:ZTBSV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                      X(J) = TEMP$/;"	l	subroutine:ZTBSV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                              IX = IX + INCX$/;"	l	subroutine:ZTBSV	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                              IX = IX + INCX$/;"	l	subroutine:ZTBSV	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                      IF (J.GT.K) KX = KX + INCX$/;"	l	subroutine:ZTBSV	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                              TEMP = TEMP - A(L+I,J)*X(I)$/;"	l	subroutine:ZTBSV	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                              TEMP = TEMP - DCONJG(A(L+I,J))*X(I)$/;"	l	subroutine:ZTBSV	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                      X(J) = TEMP$/;"	l	subroutine:ZTBSV	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                              IX = IX - INCX$/;"	l	subroutine:ZTBSV	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                              IX = IX - INCX$/;"	l	subroutine:ZTBSV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                      END IF$/;"	l	subroutine:ZTBSV	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                      IF ((N-J).GE.K) KX = KX - INCX$/;"	l	subroutine:ZTBSV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                              IX = IX - INCX$/;"	l	subroutine:ZTBSV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                      JX = JX - INCX$/;"	l	subroutine:ZTBSV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                              X(I) = X(I) - TEMP*A(L+I,J)$/;"	l	subroutine:ZTBSV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                      END IF$/;"	l	subroutine:ZTBSV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                              IX = IX + INCX$/;"	l	subroutine:ZTBSV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                      JX = JX + INCX$/;"	l	subroutine:ZTBSV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^                              TEMP = TEMP - A(L+I,J)*X(I)$/;"	l	subroutine:ZTBSV	file:
ZTBSV	tags/before-github-sync/EXTERNAL/eigen3/blas/ztbsv.f	/^      SUBROUTINE ZTBSV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                              K = K + 1$/;"	l	subroutine:ZTPMV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                              K = K - 1$/;"	l	subroutine:ZTPMV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                      KK = KK - J$/;"	l	subroutine:ZTPMV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                              TEMP = TEMP + AP(K)*X(IX)$/;"	l	subroutine:ZTPMV	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                              TEMP = TEMP + DCONJG(AP(K))*X(IX)$/;"	l	subroutine:ZTPMV	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                      KK = KK - J$/;"	l	subroutine:ZTPMV	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                              K = K + 1$/;"	l	subroutine:ZTPMV	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                              K = K + 1$/;"	l	subroutine:ZTPMV	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                      KK = KK + (N-J+1)$/;"	l	subroutine:ZTPMV	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                              TEMP = TEMP + AP(K)*X(IX)$/;"	l	subroutine:ZTPMV	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                              TEMP = TEMP + DCONJG(AP(K))*X(IX)$/;"	l	subroutine:ZTPMV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                      KK = KK + J$/;"	l	subroutine:ZTPMV	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                      KK = KK + (N-J+1)$/;"	l	subroutine:ZTPMV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                              IX = IX + INCX$/;"	l	subroutine:ZTPMV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                      KK = KK + J$/;"	l	subroutine:ZTPMV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                              K = K - 1$/;"	l	subroutine:ZTPMV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                      KK = KK - (N-J+1)$/;"	l	subroutine:ZTPMV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                              IX = IX - INCX$/;"	l	subroutine:ZTPMV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                      KK = KK - (N-J+1)$/;"	l	subroutine:ZTPMV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^                              K = K - 1$/;"	l	subroutine:ZTPMV	file:
ZTPMV	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpmv.f	/^      SUBROUTINE ZTPMV(/;"	s
10	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                              K = K - 1$/;"	l	subroutine:ZTPSV	file:
100	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                              K = K + 1$/;"	l	subroutine:ZTPSV	file:
110	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                      KK = KK + J$/;"	l	subroutine:ZTPSV	file:
120	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                              IX = IX + INCX$/;"	l	subroutine:ZTPSV	file:
130	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                              IX = IX + INCX$/;"	l	subroutine:ZTPSV	file:
140	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                      KK = KK + J$/;"	l	subroutine:ZTPSV	file:
150	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                              K = K - 1$/;"	l	subroutine:ZTPSV	file:
160	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                              K = K - 1$/;"	l	subroutine:ZTPSV	file:
170	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                      KK = KK - (N-J+1)$/;"	l	subroutine:ZTPSV	file:
180	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                              IX = IX - INCX$/;"	l	subroutine:ZTPSV	file:
190	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                              IX = IX - INCX$/;"	l	subroutine:ZTPSV	file:
20	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                      KK = KK - J$/;"	l	subroutine:ZTPSV	file:
200	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                      KK = KK - (N-J+1)$/;"	l	subroutine:ZTPSV	file:
30	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                              X(IX) = X(IX) - TEMP*AP(K)$/;"	l	subroutine:ZTPSV	file:
40	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                      KK = KK - J$/;"	l	subroutine:ZTPSV	file:
50	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                              K = K + 1$/;"	l	subroutine:ZTPSV	file:
60	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                      KK = KK + (N-J+1)$/;"	l	subroutine:ZTPSV	file:
70	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                              X(IX) = X(IX) - TEMP*AP(K)$/;"	l	subroutine:ZTPSV	file:
80	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                      KK = KK + (N-J+1)$/;"	l	subroutine:ZTPSV	file:
90	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^                              K = K + 1$/;"	l	subroutine:ZTPSV	file:
ZTPSV	tags/before-github-sync/EXTERNAL/eigen3/blas/ztpsv.f	/^      SUBROUTINE ZTPSV(/;"	s
EigenMatrixPrinter	tags/before-github-sync/EXTERNAL/eigen3/debug/gdb/printers.py	/^class EigenMatrixPrinter:$/;"	c
EigenQuaternionPrinter	tags/before-github-sync/EXTERNAL/eigen3/debug/gdb/printers.py	/^class EigenQuaternionPrinter:$/;"	c
__init__	tags/before-github-sync/EXTERNAL/eigen3/debug/gdb/printers.py	/^		def __init__ (self, dataPtr):$/;"	m	class:_iterator
__init__	tags/before-github-sync/EXTERNAL/eigen3/debug/gdb/printers.py	/^		def __init__ (self, rows, cols, dataPtr, rowMajor):$/;"	m	class:_iterator
__init__	tags/before-github-sync/EXTERNAL/eigen3/debug/gdb/printers.py	/^	def __init__(self, val):$/;"	m	class:EigenMatrixPrinter
__init__	tags/before-github-sync/EXTERNAL/eigen3/debug/gdb/printers.py	/^	def __init__(self, val):$/;"	m	class:EigenQuaternionPrinter
__iter__	tags/before-github-sync/EXTERNAL/eigen3/debug/gdb/printers.py	/^		def __iter__ (self):$/;"	m	class:_iterator	file:
_iterator	tags/before-github-sync/EXTERNAL/eigen3/debug/gdb/printers.py	/^	class _iterator:$/;"	c
build_eigen_dictionary	tags/before-github-sync/EXTERNAL/eigen3/debug/gdb/printers.py	/^def build_eigen_dictionary ():$/;"	f
children	tags/before-github-sync/EXTERNAL/eigen3/debug/gdb/printers.py	/^	def children(self):$/;"	f
lookup_function	tags/before-github-sync/EXTERNAL/eigen3/debug/gdb/printers.py	/^def lookup_function(val):$/;"	f
next	tags/before-github-sync/EXTERNAL/eigen3/debug/gdb/printers.py	/^		def next(self):$/;"	m	class:_iterator
register_eigen_printers	tags/before-github-sync/EXTERNAL/eigen3/debug/gdb/printers.py	/^def register_eigen_printers(obj):$/;"	f
to_string	tags/before-github-sync/EXTERNAL/eigen3/debug/gdb/printers.py	/^	def to_string(self):$/;"	f
ITERATE	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.cpp	89;"	d	file:
iters_before_test	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.cpp	/^template<> struct iters_before_test<double> { enum { ret = 16 }; };$/;"	s	file:
iters_before_test	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.cpp	/^template<typename T> struct iters_before_test { enum { ret = 8 }; };$/;"	s	file:
main	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.cpp	/^int main(int argc, char *argv[])$/;"	f
mouseMoveEvent	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.cpp	/^void MandelbrotWidget::mouseMoveEvent(QMouseEvent *event)$/;"	f	class:MandelbrotWidget
mousePressEvent	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.cpp	/^void MandelbrotWidget::mousePressEvent(QMouseEvent *event)$/;"	f	class:MandelbrotWidget
paintEvent	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.cpp	/^void MandelbrotWidget::paintEvent(QPaintEvent *)$/;"	f	class:MandelbrotWidget
render	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.cpp	/^template<typename Real> void MandelbrotThread::render(int img_width, int img_height)$/;"	f	class:MandelbrotThread
resizeEvent	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.cpp	/^void MandelbrotWidget::resizeEvent(QResizeEvent *)$/;"	f	class:MandelbrotWidget
ret	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.cpp	/^template<> struct iters_before_test<double> { enum { ret = 16 }; };$/;"	e	enum:iters_before_test::<anonymous>	file:
ret	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.cpp	/^template<typename T> struct iters_before_test { enum { ret = 8 }; };$/;"	e	enum:iters_before_test::<anonymous>	file:
run	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.cpp	/^void MandelbrotThread::run()$/;"	f	class:MandelbrotThread
MANDELBROT_H	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.h	26;"	d
MandelbrotThread	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.h	/^    MandelbrotThread(MandelbrotWidget *w, int i) : widget(w), id(i) {}$/;"	f	class:MandelbrotThread
MandelbrotThread	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.h	/^class MandelbrotThread : public QThread$/;"	c
MandelbrotWidget	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.h	/^    MandelbrotWidget() : QWidget(), center(0,0), xradius(2),$/;"	f	class:MandelbrotWidget
MandelbrotWidget	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.h	/^class MandelbrotWidget : public QWidget$/;"	c
buffer	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.h	/^    unsigned char *buffer;$/;"	m	class:MandelbrotWidget
center	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.h	/^    Eigen::Vector2d center;$/;"	m	class:MandelbrotWidget
draft	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.h	/^    int draft;$/;"	m	class:MandelbrotWidget
id	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.h	/^    int id, max_iter;$/;"	m	class:MandelbrotThread
lastpos	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.h	/^    QPoint lastpos;$/;"	m	class:MandelbrotWidget
max_iter	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.h	/^    int id, max_iter;$/;"	m	class:MandelbrotThread
single_precision	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.h	/^    bool single_precision;$/;"	m	class:MandelbrotThread
size	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.h	/^    int size;$/;"	m	class:MandelbrotWidget
threadcount	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.h	/^    int threadcount;$/;"	m	class:MandelbrotWidget
threads	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.h	/^    MandelbrotThread **threads;$/;"	m	class:MandelbrotWidget
total_iter	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.h	/^    long long total_iter;$/;"	m	class:MandelbrotThread
widget	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.h	/^    MandelbrotWidget *widget;$/;"	m	class:MandelbrotThread
xradius	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.h	/^    double xradius;$/;"	m	class:MandelbrotWidget
~MandelbrotWidget	tags/before-github-sync/EXTERNAL/eigen3/demos/mandelbrot/mandelbrot.h	/^    ~MandelbrotWidget()$/;"	f	class:MandelbrotWidget
Map_MatrixXd_add	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^void Map_MatrixXd_add(const C_Map_MatrixXd *m1, const C_Map_MatrixXd *m2, C_Map_MatrixXd *result)$/;"	f
Map_MatrixXd_copy	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^void Map_MatrixXd_copy(C_Map_MatrixXd *dst, const C_Map_MatrixXd *src)$/;"	f
Map_MatrixXd_copy_matrix	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^void Map_MatrixXd_copy_matrix(C_Map_MatrixXd *dst, const C_MatrixXd *src)$/;"	f
Map_MatrixXd_delete	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^void Map_MatrixXd_delete(C_Map_MatrixXd *m)$/;"	f
Map_MatrixXd_get_coeff	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^double Map_MatrixXd_get_coeff(const C_Map_MatrixXd *m, int i, int j)$/;"	f
Map_MatrixXd_multiply	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^void Map_MatrixXd_multiply(const C_Map_MatrixXd *m1, const C_Map_MatrixXd *m2, C_Map_MatrixXd *result)$/;"	f
Map_MatrixXd_new	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^C_Map_MatrixXd* Map_MatrixXd_new(double *array, int rows, int cols)$/;"	f
Map_MatrixXd_print	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^void Map_MatrixXd_print(const C_Map_MatrixXd *m)$/;"	f
Map_MatrixXd_set_coeff	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^void Map_MatrixXd_set_coeff(C_Map_MatrixXd *m, int i, int j, double coeff)$/;"	f
Map_MatrixXd_set_zero	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^void Map_MatrixXd_set_zero(C_Map_MatrixXd *m)$/;"	f
MatrixXd_add	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^void MatrixXd_add(const C_MatrixXd *m1, const C_MatrixXd *m2, C_MatrixXd *result)$/;"	f
MatrixXd_copy	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^void MatrixXd_copy(C_MatrixXd *dst, const C_MatrixXd *src)$/;"	f
MatrixXd_copy_map	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^void MatrixXd_copy_map(C_MatrixXd *dst, const C_Map_MatrixXd *src)$/;"	f
MatrixXd_data	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^double* MatrixXd_data(C_MatrixXd *m)$/;"	f
MatrixXd_delete	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^void MatrixXd_delete(C_MatrixXd *m)$/;"	f
MatrixXd_get_coeff	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^double MatrixXd_get_coeff(const C_MatrixXd *m, int i, int j)$/;"	f
MatrixXd_multiply	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^void MatrixXd_multiply(const C_MatrixXd *m1, const C_MatrixXd *m2, C_MatrixXd *result)$/;"	f
MatrixXd_new	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^C_MatrixXd* MatrixXd_new(int rows, int cols)$/;"	f
MatrixXd_print	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^void MatrixXd_print(const C_MatrixXd *m)$/;"	f
MatrixXd_resize	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^void MatrixXd_resize(C_MatrixXd *m, int rows, int cols)$/;"	f
MatrixXd_set_coeff	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^void MatrixXd_set_coeff(C_MatrixXd *m, int i, int j, double coeff)$/;"	f
MatrixXd_set_zero	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^void MatrixXd_set_zero(C_MatrixXd *m)$/;"	f
c_to_eigen	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^inline Map<MatrixXd>& c_to_eigen(C_Map_MatrixXd* ptr)$/;"	f
c_to_eigen	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^inline MatrixXd& c_to_eigen(C_MatrixXd* ptr)$/;"	f
c_to_eigen	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^inline const Map<MatrixXd>& c_to_eigen(const C_Map_MatrixXd* ptr)$/;"	f
c_to_eigen	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^inline const MatrixXd& c_to_eigen(const C_MatrixXd* ptr)$/;"	f
eigen_to_c	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^inline C_Map_MatrixXd* eigen_to_c(Map<MatrixXd>& ref)$/;"	f
eigen_to_c	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^inline C_MatrixXd* eigen_to_c(MatrixXd& ref)$/;"	f
eigen_to_c	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^inline const C_Map_MatrixXd* eigen_to_c(const Map<MatrixXd>& ref)$/;"	f
eigen_to_c	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.cpp	/^inline const C_MatrixXd* eigen_to_c(const MatrixXd& ref)$/;"	f
C_Map_MatrixXd	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.h	/^  struct C_Map_MatrixXd {};$/;"	s
C_MatrixXd	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/binary_library.h	/^  struct C_MatrixXd {};$/;"	s
demo_Map_MatrixXd	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/example.c	/^void demo_Map_MatrixXd()$/;"	f
demo_MatrixXd	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/example.c	/^void demo_MatrixXd()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/example.c	/^int main()$/;"	f
print_array	tags/before-github-sync/EXTERNAL/eigen3/demos/mix_eigen_and_c/example.c	/^void print_array(double *array, int n)$/;"	f
Camera	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^Camera::Camera()$/;"	f	class:Camera
Camera	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^Camera::Camera(const Camera& other)$/;"	f	class:Camera
activateGL	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^void Camera::activateGL(void)$/;"	f	class:Camera
direction	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^Vector3f Camera::direction(void) const$/;"	f	class:Camera
localRotate	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^void Camera::localRotate(const Quaternionf& q)$/;"	f	class:Camera
localTranslate	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^void Camera::localTranslate(const Vector3f& t)$/;"	f	class:Camera
operator =	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^Camera& Camera::operator=(const Camera& other)$/;"	f	class:Camera
projectionMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^const Matrix4f& Camera::projectionMatrix(void) const$/;"	f	class:Camera
right	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^Vector3f Camera::right(void) const$/;"	f	class:Camera
rotateAroundTarget	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^void Camera::rotateAroundTarget(const Quaternionf& q)$/;"	f	class:Camera
setDirection	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^void Camera::setDirection(const Vector3f& newDirection)$/;"	f	class:Camera
setFovY	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^void Camera::setFovY(float value)$/;"	f	class:Camera
setFrame	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^void Camera::setFrame(const Frame& f)$/;"	f	class:Camera
setOrientation	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^void Camera::setOrientation(const Quaternionf& q)$/;"	f	class:Camera
setPosition	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^void Camera::setPosition(const Vector3f& p)$/;"	f	class:Camera
setTarget	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^void Camera::setTarget(const Vector3f& target)$/;"	f	class:Camera
setViewport	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^void Camera::setViewport(uint offsetx, uint offsety, uint width, uint height)$/;"	f	class:Camera
setViewport	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^void Camera::setViewport(uint width, uint height)$/;"	f	class:Camera
unProject	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^Vector3f Camera::unProject(const Vector2f& uv, float depth) const$/;"	f	class:Camera
unProject	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^Vector3f Camera::unProject(const Vector2f& uv, float depth, const Matrix4f& invModelview) const$/;"	f	class:Camera
up	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^Vector3f Camera::up(void) const$/;"	f	class:Camera
updateProjectionMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^void Camera::updateProjectionMatrix(void) const$/;"	f	class:Camera
updateViewMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^void Camera::updateViewMatrix(void) const$/;"	f	class:Camera
viewMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^const Affine3f& Camera::viewMatrix(void) const$/;"	f	class:Camera
zoom	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^void Camera::zoom(float d)$/;"	f	class:Camera
~Camera	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.cpp	/^Camera::~Camera()$/;"	f	class:Camera
Camera	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^class Camera$/;"	c
EIGEN_CAMERA_H	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	26;"	d
Frame	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    inline Frame(const Eigen::Vector3f& pos = Eigen::Vector3f::Zero(),$/;"	f	class:Frame
Frame	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^class Frame$/;"	c
fovY	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    inline float fovY(void) const { return mFovY; }$/;"	f	class:Camera
frame	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    const Frame& frame(void) const { return mFrame; }$/;"	f	class:Camera
lerp	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    Frame lerp(float alpha, const Frame& other) const$/;"	f	class:Frame
mFarDist	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    float mFarDist;$/;"	m	class:Camera
mFovY	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    float mFovY;$/;"	m	class:Camera
mFrame	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    Frame mFrame;$/;"	m	class:Camera
mNearDist	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    float mNearDist;$/;"	m	class:Camera
mProjIsUptodate	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    mutable bool mProjIsUptodate;$/;"	m	class:Camera
mProjectionMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    mutable Eigen::Matrix4f mProjectionMatrix;$/;"	m	class:Camera
mTarget	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    Eigen::Vector3f mTarget;$/;"	m	class:Camera
mViewIsUptodate	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    mutable bool mViewIsUptodate;$/;"	m	class:Camera
mViewMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    mutable Eigen::Affine3f mViewMatrix;$/;"	m	class:Camera
mVpHeight	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    uint mVpWidth, mVpHeight;$/;"	m	class:Camera
mVpWidth	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    uint mVpWidth, mVpHeight;$/;"	m	class:Camera
mVpX	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    uint mVpX, mVpY;$/;"	m	class:Camera
mVpY	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    uint mVpX, mVpY;$/;"	m	class:Camera
orientation	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    Eigen::Quaternionf orientation;$/;"	m	class:Frame
orientation	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    inline const Eigen::Quaternionf& orientation(void) const { return mFrame.orientation; }$/;"	f	class:Camera
position	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    Eigen::Vector3f position;$/;"	m	class:Frame
position	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    inline const Eigen::Vector3f& position(void) const { return mFrame.position; }$/;"	f	class:Camera
target	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    inline const Eigen::Vector3f& target(void) { return mTarget; }$/;"	f	class:Camera
vpHeight	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    inline uint vpHeight(void) const { return mVpHeight; }$/;"	f	class:Camera
vpWidth	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    inline uint vpWidth(void) const { return mVpWidth; }$/;"	f	class:Camera
vpX	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    inline uint vpX(void) const { return mVpX; }$/;"	f	class:Camera
vpY	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/camera.h	/^    inline uint vpY(void) const { return mVpY; }$/;"	f	class:Camera
GpuHelper	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.cpp	/^GpuHelper::GpuHelper()$/;"	f	class:GpuHelper
drawUnitCube	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.cpp	/^void GpuHelper::drawUnitCube(void)$/;"	f	class:GpuHelper
drawUnitSphere	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.cpp	/^void GpuHelper::drawUnitSphere(int level)$/;"	f	class:GpuHelper
drawVector	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.cpp	/^void GpuHelper::drawVector(const Vector3f& position, const Vector3f& vec, const Color& color, float aspect \/* = 50.*\/)$/;"	f	class:GpuHelper
drawVectorBox	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.cpp	/^void GpuHelper::drawVectorBox(const Vector3f& position, const Vector3f& vec, const Color& color, float aspect)$/;"	f	class:GpuHelper
gpu	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.cpp	/^GpuHelper gpu;$/;"	v
popProjectionMode2D	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.cpp	/^void GpuHelper::popProjectionMode2D(void)$/;"	f	class:GpuHelper
pushProjectionMode2D	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.cpp	/^void GpuHelper::pushProjectionMode2D(ProjectionMode2D pm)$/;"	f	class:GpuHelper
~GpuHelper	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.cpp	/^GpuHelper::~GpuHelper()$/;"	f	class:GpuHelper
Color	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^typedef Vector4f Color;$/;"	t
EIGEN_GPUHELPER_H	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	26;"	d
GlMatrixHelper	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^template<int _Flags> struct GlMatrixHelper<false,_Flags>$/;"	s
GlMatrixHelper	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^template<int _Flags> struct GlMatrixHelper<true,_Flags>$/;"	s
GpuHelper	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^class GpuHelper$/;"	c
PM_Normalized	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^    enum ProjectionMode2D { PM_Normalized = 1, PM_Viewport = 2 };$/;"	e	enum:GpuHelper::ProjectionMode2D
PM_Viewport	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^    enum ProjectionMode2D { PM_Normalized = 1, PM_Viewport = 2 };$/;"	e	enum:GpuHelper::ProjectionMode2D
ProjectionMode2D	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^    enum ProjectionMode2D { PM_Normalized = 1, PM_Viewport = 2 };$/;"	g	class:GpuHelper
draw	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^inline void GpuHelper::draw(GLenum mode, const std::vector<uint>* pIndexes)$/;"	f	class:GpuHelper
draw	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^inline void GpuHelper::draw(GLenum mode, uint nofElement)$/;"	f	class:GpuHelper
draw	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^inline void GpuHelper::draw(GLenum mode, uint start, uint end)$/;"	f	class:GpuHelper
forceMatrixTarget	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^    inline void forceMatrixTarget(GLenum matrixTarget) {glMatrixMode(mCurrentMatrixTarget=matrixTarget);}$/;"	f	class:GpuHelper
loadMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^    static void loadMatrix(const Matrix<double,4,4, _Flags, 4,4>& mat) { glLoadMatrixd(mat.data()); }$/;"	f	struct:GlMatrixHelper
loadMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^    static void loadMatrix(const Matrix<double,4,4, _Flags, 4,4>& mat) { glLoadMatrixd(mat.transpose().eval().data()); }$/;"	f	struct:GlMatrixHelper
loadMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^    static void loadMatrix(const Matrix<float, 4,4, _Flags, 4,4>&  mat) { glLoadMatrixf(mat.data()); }$/;"	f	struct:GlMatrixHelper
loadMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^    static void loadMatrix(const Matrix<float, 4,4, _Flags, 4,4>&  mat) { glLoadMatrixf(mat.transpose().eval().data()); }$/;"	f	struct:GlMatrixHelper
loadMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^void GpuHelper::loadMatrix($/;"	f	class:GpuHelper
loadMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^void GpuHelper::loadMatrix(const Eigen::Matrix<Scalar,4,4, _Flags, 4,4>& mat, GLenum matrixTarget)$/;"	f	class:GpuHelper
mColorBufferId	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^    GLuint mColorBufferId;$/;"	m	class:GpuHelper
mCurrentMatrixTarget	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^    GLenum mCurrentMatrixTarget;$/;"	m	class:GpuHelper
mInitialized	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^    bool mInitialized;$/;"	m	class:GpuHelper
mVpHeight	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^    int mVpWidth, mVpHeight;$/;"	m	class:GpuHelper
mVpWidth	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^    int mVpWidth, mVpHeight;$/;"	m	class:GpuHelper
multMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^    static void multMatrix(const Matrix<double,4,4, _Flags, 4,4>& mat) { glMultMatrixd(mat.data()); }$/;"	f	struct:GlMatrixHelper
multMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^    static void multMatrix(const Matrix<double,4,4, _Flags, 4,4>& mat) { glMultMatrixd(mat.transpose().eval().data()); }$/;"	f	struct:GlMatrixHelper
multMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^    static void multMatrix(const Matrix<float, 4,4, _Flags, 4,4>&  mat) { glMultMatrixf(mat.data()); }$/;"	f	struct:GlMatrixHelper
multMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^    static void multMatrix(const Matrix<float, 4,4, _Flags, 4,4>&  mat) { glMultMatrixf(mat.transpose().eval().data()); }$/;"	f	struct:GlMatrixHelper
multMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^void GpuHelper::multMatrix(const Matrix<Scalar,4,4, _Flags, 4,4>& mat, GLenum matrixTarget)$/;"	f	class:GpuHelper
popMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^inline void GpuHelper::popMatrix(GLenum matrixTarget)$/;"	f	class:GpuHelper
pushMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^inline void GpuHelper::pushMatrix(GLenum matrixTarget)$/;"	f	class:GpuHelper
pushMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^inline void GpuHelper::pushMatrix(const Matrix<Scalar,4,4, _Flags, 4,4>& mat, GLenum matrixTarget)$/;"	f	class:GpuHelper
pushMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^void GpuHelper::pushMatrix($/;"	f	class:GpuHelper
setMatrixTarget	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/gpuhelper.h	/^inline void GpuHelper::setMatrixTarget(GLenum matrixTarget)$/;"	f	class:GpuHelper
IcoSphere	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/icosphere.cpp	/^IcoSphere::IcoSphere(unsigned int levels)$/;"	f	class:IcoSphere
X	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/icosphere.cpp	35;"	d	file:
Z	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/icosphere.cpp	36;"	d	file:
_subdivide	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/icosphere.cpp	/^void IcoSphere::_subdivide(void)$/;"	f	class:IcoSphere
draw	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/icosphere.cpp	/^void IcoSphere::draw(int level)$/;"	f	class:IcoSphere
indices	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/icosphere.cpp	/^const std::vector<int>& IcoSphere::indices(int level) const$/;"	f	class:IcoSphere
tindices	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/icosphere.cpp	/^static GLint tindices[20][3] = {$/;"	v	file:
vdata	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/icosphere.cpp	/^static GLfloat vdata[12][3] = {$/;"	v	file:
EIGEN_ICOSPHERE_H	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/icosphere.h	26;"	d
IcoSphere	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/icosphere.h	/^class IcoSphere$/;"	c
mIndices	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/icosphere.h	/^    std::vector<std::vector<int>*> mIndices;$/;"	m	class:IcoSphere
mListIds	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/icosphere.h	/^    std::vector<int> mListIds;$/;"	m	class:IcoSphere
mVertices	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/icosphere.h	/^    std::vector<Eigen::Vector3f> mVertices;$/;"	m	class:IcoSphere
vertices	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/icosphere.h	/^    const std::vector<Eigen::Vector3f>& vertices() const { return mVertices; }$/;"	f	class:IcoSphere
Dim	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^  enum { Dim = 3 };$/;"	e	enum:EulerAngles::<anonymous>	file:
EulerAngles	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^  EulerAngles() {}$/;"	f	class:EulerAngles
EulerAngles	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^  inline EulerAngles(Scalar a0, Scalar a1, Scalar a2) : m_angles(a0, a1, a2) {}$/;"	f	class:EulerAngles
EulerAngles	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^  inline EulerAngles(const QuaternionType& q) { *this = q; }$/;"	f	class:EulerAngles
EulerAngles	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^template<typename _Scalar> class EulerAngles$/;"	c	file:
FancySpheres	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^    FancySpheres()$/;"	f	class:FancySpheres
FancySpheres	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^class FancySpheres$/;"	c	file:
Matrix3	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^  typedef Matrix<Scalar,3,3> Matrix3;$/;"	t	class:EulerAngles	file:
QuaternionDemo	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^QuaternionDemo::QuaternionDemo()$/;"	f	class:QuaternionDemo
QuaternionType	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^  typedef Quaternion<Scalar> QuaternionType;$/;"	t	class:EulerAngles	file:
RenderingWidget	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^RenderingWidget::RenderingWidget()$/;"	f	class:RenderingWidget
Scalar	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^  typedef _Scalar Scalar;$/;"	t	class:EulerAngles	file:
Vector3	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^  typedef Matrix<Scalar,3,1> Vector3;$/;"	t	class:EulerAngles	file:
animate	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^void RenderingWidget::animate()$/;"	f	class:RenderingWidget
coeffs	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^  Vector3& coeffs() { return m_angles; }$/;"	f	class:EulerAngles
coeffs	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^  const Vector3& coeffs() const { return m_angles; }$/;"	f	class:EulerAngles
createNavigationControlWidget	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^QWidget* RenderingWidget::createNavigationControlWidget()$/;"	f	class:RenderingWidget
draw	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^    void draw()$/;"	f	class:FancySpheres
drawScene	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^void RenderingWidget::drawScene()$/;"	f	class:RenderingWidget
grabFrame	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^void RenderingWidget::grabFrame(void)$/;"	f	class:RenderingWidget
initializeGL	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^void RenderingWidget::initializeGL()$/;"	f	class:RenderingWidget
keyPressEvent	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^void RenderingWidget::keyPressEvent(QKeyEvent * e)$/;"	f	class:RenderingWidget
lerp	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^template<> EulerAngles<float> lerp(float t, const EulerAngles<float>& a, const EulerAngles<float>& b)$/;"	f
lerp	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^template<> Quaternionf lerp(float t, const Quaternionf& a, const Quaternionf& b)$/;"	f
lerp	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^template<typename T> T lerp(float t, const T& a, const T& b)$/;"	f
lerpFrame	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^inline static Frame lerpFrame(float alpha, const Frame& a, const Frame& b)$/;"	f	file:
mCenters	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^    std::vector<Vector3f> mCenters;$/;"	m	class:FancySpheres	file:
mIcoSphere	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^    IcoSphere mIcoSphere;$/;"	m	class:FancySpheres	file:
mRadii	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^    std::vector<float> mRadii;$/;"	m	class:FancySpheres	file:
m_angles	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^  Vector3 m_angles;$/;"	m	class:EulerAngles	file:
main	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^int main(int argc, char *argv[])$/;"	f
mouseMoveEvent	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^void RenderingWidget::mouseMoveEvent(QMouseEvent* e)$/;"	f	class:RenderingWidget
mousePressEvent	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^void RenderingWidget::mousePressEvent(QMouseEvent* e)$/;"	f	class:RenderingWidget
mouseReleaseEvent	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^void RenderingWidget::mouseReleaseEvent(QMouseEvent*)$/;"	f	class:RenderingWidget
operator =	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^  EulerAngles& operator=(const Matrix3& m)$/;"	f	class:EulerAngles
operator =	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^  EulerAngles& operator=(const QuaternionType& q)$/;"	f	class:EulerAngles
operator QuaternionType	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^  operator QuaternionType() { return QuaternionType(toRotationMatrix()); }$/;"	f	class:EulerAngles
paintGL	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^void RenderingWidget::paintGL()$/;"	f	class:RenderingWidget
resetCamera	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^void RenderingWidget::resetCamera()$/;"	f	class:RenderingWidget
resizeGL	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^void RenderingWidget::resizeGL(int width, int height)$/;"	f	class:RenderingWidget
setLerpMode	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^void RenderingWidget::setLerpMode(int m)$/;"	f	class:RenderingWidget
setNavMode	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^void RenderingWidget::setNavMode(int m)$/;"	f	class:RenderingWidget
setRotationMode	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^void RenderingWidget::setRotationMode(int m)$/;"	f	class:RenderingWidget
stopAnimation	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^void RenderingWidget::stopAnimation()$/;"	f	class:RenderingWidget
toRotationMatrix	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.cpp	/^  Matrix3 toRotationMatrix(void) const$/;"	f	class:EulerAngles
EIGEN_QUATERNION_DEMO_H	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	26;"	d
LerpEulerAngles	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^      LerpEulerAngles$/;"	e	enum:RenderingWidget::LerpMode
LerpMode	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    enum LerpMode {$/;"	g	class:RenderingWidget
LerpQuaternion	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^      LerpQuaternion,$/;"	e	enum:RenderingWidget::LerpMode
NavFly	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^      NavFly$/;"	e	enum:RenderingWidget::NavMode
NavMode	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    enum NavMode {$/;"	g	class:RenderingWidget
NavTurnAround	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^      NavTurnAround,$/;"	e	enum:RenderingWidget::NavMode
QuaternionDemo	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^class QuaternionDemo : public QMainWindow$/;"	c
RenderingWidget	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^class RenderingWidget : public QGLWidget$/;"	c
RotationMode	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    enum RotationMode {$/;"	g	class:RenderingWidget
RotationStable	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^      RotationStable,$/;"	e	enum:RenderingWidget::RotationMode
RotationStandard	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^      RotationStandard$/;"	e	enum:RenderingWidget::RotationMode
TM_FLY_PAN	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^      TM_LOCAL_ROTATE, TM_FLY_Z, TM_FLY_PAN$/;"	e	enum:RenderingWidget::TrackMode
TM_FLY_Z	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^      TM_LOCAL_ROTATE, TM_FLY_Z, TM_FLY_PAN$/;"	e	enum:RenderingWidget::TrackMode
TM_LOCAL_ROTATE	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^      TM_LOCAL_ROTATE, TM_FLY_Z, TM_FLY_PAN$/;"	e	enum:RenderingWidget::TrackMode
TM_NO_TRACK	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^      TM_NO_TRACK=0, TM_ROTATE_AROUND, TM_ZOOM,$/;"	e	enum:RenderingWidget::TrackMode
TM_ROTATE_AROUND	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^      TM_NO_TRACK=0, TM_ROTATE_AROUND, TM_ZOOM,$/;"	e	enum:RenderingWidget::TrackMode
TM_ZOOM	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^      TM_NO_TRACK=0, TM_ROTATE_AROUND, TM_ZOOM,$/;"	e	enum:RenderingWidget::TrackMode
TimeLine	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    typedef std::map<float,Frame> TimeLine;$/;"	t	class:RenderingWidget
TrackMode	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    enum TrackMode {$/;"	g	class:RenderingWidget
mAnimate	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    bool mAnimate;$/;"	m	class:RenderingWidget
mCamera	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    Camera mCamera;$/;"	m	class:RenderingWidget
mCurrentTrackingMode	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    TrackMode mCurrentTrackingMode;$/;"	m	class:RenderingWidget
mIndices	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    std::vector<int> mIndices;$/;"	m	class:RenderingWidget
mInitFrame	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    Frame mInitFrame;$/;"	m	class:RenderingWidget
mLerpMode	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    LerpMode mLerpMode;$/;"	m	class:RenderingWidget
mMouseCoords	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    Vector2i mMouseCoords;$/;"	m	class:RenderingWidget
mNavMode	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    NavMode mNavMode;$/;"	m	class:RenderingWidget
mNormals	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    std::vector<Vector3f> mNormals;$/;"	m	class:RenderingWidget
mRenderingWidget	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    RenderingWidget* mRenderingWidget;$/;"	m	class:QuaternionDemo
mRotationMode	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    RotationMode mRotationMode;$/;"	m	class:RenderingWidget
mTrackball	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    Trackball mTrackball;$/;"	m	class:RenderingWidget
mVertices	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    std::vector<Vector3f> mVertices;$/;"	m	class:RenderingWidget
m_alpha	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    float m_alpha;$/;"	m	class:RenderingWidget
m_timeline	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    TimeLine m_timeline;$/;"	m	class:RenderingWidget
m_timer	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    QTimer m_timer;$/;"	m	class:RenderingWidget
~RenderingWidget	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/quaternion_demo.h	/^    ~RenderingWidget() { }$/;"	f	class:RenderingWidget
mapToSphere	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/trackball.cpp	/^bool Trackball::mapToSphere(const Vector2i& p2, Vector3f& v3)$/;"	f	class:Trackball
track	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/trackball.cpp	/^void Trackball::track(const Vector2i& point2D)$/;"	f	class:Trackball
Around	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/trackball.h	/^    enum Mode {Around, Local};$/;"	e	enum:Trackball::Mode
EIGEN_TRACKBALL_H	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/trackball.h	26;"	d
Local	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/trackball.h	/^    enum Mode {Around, Local};$/;"	e	enum:Trackball::Mode
Mode	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/trackball.h	/^    enum Mode {Around, Local};$/;"	g	class:Trackball
Trackball	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/trackball.h	/^    Trackball() : mpCamera(0) {}$/;"	f	class:Trackball
Trackball	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/trackball.h	/^class Trackball$/;"	c
mLastPoint3D	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/trackball.h	/^    Eigen::Vector3f mLastPoint3D;$/;"	m	class:Trackball
mLastPointOk	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/trackball.h	/^    bool mLastPointOk;$/;"	m	class:Trackball
mMode	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/trackball.h	/^    Mode mMode;$/;"	m	class:Trackball
mpCamera	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/trackball.h	/^    Camera* mpCamera;$/;"	m	class:Trackball
setCamera	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/trackball.h	/^    void setCamera(Camera* pCam) { mpCamera = pCam; }$/;"	f	class:Trackball
start	tags/before-github-sync/EXTERNAL/eigen3/demos/opengl/trackball.h	/^    void start(Mode m = Around) { mMode = m; mLastPointOk = false; }$/;"	f	class:Trackball
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/DenseBase_middleCols_int.cpp	/^int main(void)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/DenseBase_middleRows_int.cpp	/^int main(void)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/DenseBase_template_int_middleCols.cpp	/^int main(void)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/DenseBase_template_int_middleRows.cpp	/^int main(void)$/;"	f
EIGEN2_SUPPORT	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/MatrixBase_cwise_const.cpp	1;"	d	file:
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/MatrixBase_cwise_const.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/QuickStart_example.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/QuickStart_example2_dynamic.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/QuickStart_example2_fixed.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/TutorialLinAlgComputeTwice.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/TutorialLinAlgExComputeSolveError.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/TutorialLinAlgExSolveColPivHouseholderQR.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/TutorialLinAlgExSolveLDLT.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/TutorialLinAlgInverseDeterminant.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/TutorialLinAlgRankRevealing.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/TutorialLinAlgSVDSolve.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/TutorialLinAlgSelfAdjointEigenSolver.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/TutorialLinAlgSetThreshold.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_ArrayClass_accessors.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_ArrayClass_addition.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_ArrayClass_cwise_other.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_ArrayClass_interop.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_ArrayClass_interop_matrix.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_ArrayClass_mult.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_BlockOperations_block_assignment.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_BlockOperations_colrow.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_BlockOperations_corner.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_BlockOperations_print_block.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_BlockOperations_vector.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_PartialLU_solve.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_ReductionsVisitorsBroadcasting_broadcast_1nn.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_ReductionsVisitorsBroadcasting_broadcast_simple.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_ReductionsVisitorsBroadcasting_broadcast_simple_rowwise.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_ReductionsVisitorsBroadcasting_colwise.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_ReductionsVisitorsBroadcasting_maxnorm.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_ReductionsVisitorsBroadcasting_reductions_bool.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_ReductionsVisitorsBroadcasting_reductions_norm.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_ReductionsVisitorsBroadcasting_rowwise.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_ReductionsVisitorsBroadcasting_visitors.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_simple_example_dynamic_size.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/Tutorial_simple_example_fixed_size.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_Block.cpp	/^int main(int, char**)$/;"	f
topLeftCorner	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_Block.cpp	/^topLeftCorner(MatrixBase<Derived>& m, int rows, int cols)$/;"	f
topLeftCorner	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_Block.cpp	/^topLeftCorner(const MatrixBase<Derived>& m, int rows, int cols)$/;"	f
MakeComplexOp	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_CwiseBinaryOp.cpp	/^template<typename Scalar> struct MakeComplexOp {$/;"	s	file:
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_CwiseBinaryOp.cpp	/^int main(int, char**)$/;"	f
operator ()	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_CwiseBinaryOp.cpp	/^  complex<Scalar> operator()(const Scalar& a, const Scalar& b) const { return complex<Scalar>(a,b); }$/;"	f	struct:MakeComplexOp
result_type	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_CwiseBinaryOp.cpp	/^  typedef complex<Scalar> result_type;$/;"	t	struct:MakeComplexOp	file:
CwiseClampOp	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_CwiseUnaryOp.cpp	/^  CwiseClampOp(const Scalar& inf, const Scalar& sup) : m_inf(inf), m_sup(sup) {}$/;"	f	struct:CwiseClampOp
CwiseClampOp	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_CwiseUnaryOp.cpp	/^struct CwiseClampOp {$/;"	s	file:
m_inf	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_CwiseUnaryOp.cpp	/^  Scalar m_inf, m_sup;$/;"	m	struct:CwiseClampOp	file:
m_sup	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_CwiseUnaryOp.cpp	/^  Scalar m_inf, m_sup;$/;"	m	struct:CwiseClampOp	file:
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_CwiseUnaryOp.cpp	/^int main(int, char**)$/;"	f
operator ()	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_CwiseUnaryOp.cpp	/^  const Scalar operator()(const Scalar& x) const { return x<m_inf ? m_inf : (x>m_sup ? m_sup : x); }$/;"	f	struct:CwiseClampOp
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_CwiseUnaryOp_ptrfun.cpp	/^int main(int, char**)$/;"	f
ramp	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_CwiseUnaryOp_ptrfun.cpp	/^double ramp(double x)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_FixedBlock.cpp	/^int main(int, char**)$/;"	f
topLeft2x2Corner	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_FixedBlock.cpp	/^topLeft2x2Corner(MatrixBase<Derived>& m)$/;"	f
topLeft2x2Corner	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_FixedBlock.cpp	/^topLeft2x2Corner(const MatrixBase<Derived>& m)$/;"	f
firstTwo	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_FixedVectorBlock.cpp	/^firstTwo(MatrixBase<Derived>& v)$/;"	f
firstTwo	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_FixedVectorBlock.cpp	/^firstTwo(const MatrixBase<Derived>& v)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_FixedVectorBlock.cpp	/^int main(int, char**)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_VectorBlock.cpp	/^int main(int, char**)$/;"	f
segmentFromRange	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_VectorBlock.cpp	/^segmentFromRange(MatrixBase<Derived>& v, int start, int end)$/;"	f
segmentFromRange	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/class_VectorBlock.cpp	/^segmentFromRange(const MatrixBase<Derived>& v, int start, int end)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/function_taking_eigenbase.cpp	/^int main()$/;"	f
print_size	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/function_taking_eigenbase.cpp	/^void print_size(const EigenBase<Derived>& b)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/tut_arithmetic_add_sub.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/tut_arithmetic_dot_cross.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/tut_arithmetic_matrix_mul.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/tut_arithmetic_redux_basic.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/tut_arithmetic_scalar_mul_div.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/tut_matrix_coefficient_accessors.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/tut_matrix_resize.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/doc/examples/tut_matrix_resize_fixed_size.cpp	/^int main()$/;"	f
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/AngleAxis_mimic_euler.cpp	/^Matrix3f m;$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/ColPivHouseholderQR_solve.cpp	/^Matrix3f m = Matrix3f::Random();$/;"	v
y	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/ColPivHouseholderQR_solve.cpp	/^Matrix3f y = Matrix3f::Random();$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/ComplexEigenSolver_compute.cpp	/^MatrixXcf A = MatrixXcf::Random(4,4);$/;"	v
ones	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/ComplexEigenSolver_eigenvalues.cpp	/^MatrixXcf ones = MatrixXcf::Ones(3,3);$/;"	v
ones	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/ComplexEigenSolver_eigenvectors.cpp	/^MatrixXcf ones = MatrixXcf::Ones(3,3);$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/ComplexSchur_compute.cpp	/^MatrixXcf A = MatrixXcf::Random(4,4);$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/ComplexSchur_matrixT.cpp	/^MatrixXcf A = MatrixXcf::Random(4,4);$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/ComplexSchur_matrixU.cpp	/^MatrixXcf A = MatrixXcf::Random(4,4);$/;"	v
a	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Cwise_product.cpp	/^Array33i a = Array33i::Random(), b = Array33i::Random();$/;"	v
b	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Cwise_product.cpp	/^Array33i a = Array33i::Random(), b = Array33i::Random();$/;"	v
c	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Cwise_product.cpp	/^Array33i c = a * b;$/;"	v
v	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/DenseBase_setLinSpaced.cpp	/^VectorXf v;$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/DirectionWise_replicate.cpp	/^MatrixXi m = MatrixXi::Random(2,3);$/;"	v
v	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/DirectionWise_replicate_int.cpp	/^Vector3i v = Vector3i::Random();$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/EigenSolver_EigenSolver_MatrixType.cpp	/^MatrixXd A = MatrixXd::Random(6,6);$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/EigenSolver_compute.cpp	/^MatrixXf A = MatrixXf::Random(4,4);$/;"	v
es	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/EigenSolver_compute.cpp	/^EigenSolver<MatrixXf> es;$/;"	v
ones	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/EigenSolver_eigenvalues.cpp	/^MatrixXd ones = MatrixXd::Ones(3,3);$/;"	v
ones	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/EigenSolver_eigenvectors.cpp	/^MatrixXd ones = MatrixXd::Ones(3,3);$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/EigenSolver_pseudoEigenvectors.cpp	/^MatrixXd A = MatrixXd::Random(6,6);$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/FullPivHouseholderQR_solve.cpp	/^Matrix3f m = Matrix3f::Random();$/;"	v
y	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/FullPivHouseholderQR_solve.cpp	/^Matrix3f y = Matrix3f::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/FullPivLU_image.cpp	/^Matrix3d m;$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/FullPivLU_kernel.cpp	/^MatrixXf m = MatrixXf::Random(3,5);$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/FullPivLU_solve.cpp	/^Matrix<float,2,3> m = Matrix<float,2,3>::Random();$/;"	v
y	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/FullPivLU_solve.cpp	/^Matrix2f y = Matrix2f::Random();$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/HessenbergDecomposition_compute.cpp	/^MatrixXcf A = MatrixXcf::Random(4,4);$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/HessenbergDecomposition_matrixH.cpp	/^Matrix4f A = MatrixXf::Random(4,4);$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/HessenbergDecomposition_packedMatrix.cpp	/^Matrix4d A = Matrix4d::Random(4,4);$/;"	v
Matrix3x3	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/HouseholderQR_solve.cpp	/^typedef Matrix<float,3,3> Matrix3x3;$/;"	t	file:
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/HouseholderQR_solve.cpp	/^Matrix3x3 m = Matrix3x3::Random();$/;"	v
y	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/HouseholderQR_solve.cpp	/^Matrix3f y = Matrix3f::Random();$/;"	v
v	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/HouseholderSequence_HouseholderSequence.cpp	/^Matrix3d v = Matrix3d::Random();$/;"	v
m1	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/IOFormat.cpp	/^Matrix3d m1;$/;"	v
sep	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/IOFormat.cpp	/^std::string sep = "\\n----------------------------------------\\n";$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/JacobiSVD_basic.cpp	/^MatrixXf m = MatrixXf::Random(3,2);$/;"	v
G	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Jacobi_makeGivens.cpp	/^JacobiRotation<float> G;$/;"	v
v	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Jacobi_makeGivens.cpp	/^Vector2f v = Vector2f::Random();$/;"	v
J	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Jacobi_makeJacobi.cpp	/^JacobiRotation<float> J;$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Jacobi_makeJacobi.cpp	/^Matrix2f m = Matrix2f::Random();$/;"	v
DataMatrix	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/LLT_solve.cpp	/^typedef Matrix<float,Dynamic,2> DataMatrix;$/;"	t	file:
elevations	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/LLT_solve.cpp	/^VectorXf elevations = 2*samples.col(0) + 3*samples.col(1) + VectorXf::Random(12)*0.1;$/;"	v
samples	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/LLT_solve.cpp	/^DataMatrix samples = DataMatrix::Random(12,2);$/;"	v
xy	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/LLT_solve.cpp	/^Matrix<float,2,1> xy$/;"	v
array	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Map_general_stride.cpp	/^int array[24];$/;"	v
array	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Map_inner_stride.cpp	/^int array[12];$/;"	v
array	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Map_outer_stride.cpp	/^int array[12];$/;"	v
data	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Map_placement_new.cpp	/^int data[] = {1,2,3,4,5,6,7,8,9};$/;"	v
array	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Map_simple.cpp	/^int array[9];$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_adjoint.cpp	/^Matrix2cf m = Matrix2cf::Random();$/;"	v
p0	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_all.cpp	/^Vector3f p0 = Vector3f::Random(), p1 = Vector3f::Random().cwiseAbs();$/;"	v
p1	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_all.cpp	/^Vector3f p0 = Vector3f::Random(), p1 = Vector3f::Random().cwiseAbs();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_block_int_int.cpp	/^Matrix4i m = Matrix4i::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_block_int_int_int_int.cpp	/^Matrix4i m = Matrix4i::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_bottomLeftCorner_int_int.cpp	/^Matrix4i m = Matrix4i::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_bottomRightCorner_int_int.cpp	/^Matrix4i m = Matrix4i::Random();$/;"	v
a	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_bottomRows_int.cpp	/^Array44i a = Array44i::Random();$/;"	v
md	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_cast.cpp	/^Matrix2d md = Matrix2d::Identity() * 0.45;$/;"	v
mf	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_cast.cpp	/^Matrix2f mf = Matrix2f::Identity();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_col.cpp	/^Matrix3d m = Matrix3d::Identity();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_colwise.cpp	/^Matrix3d m = Matrix3d::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_computeInverseAndDetWithCheck.cpp	/^Matrix3d m = Matrix3d::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_computeInverseWithCheck.cpp	/^Matrix3d m = Matrix3d::Random();$/;"	v
a	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_cwiseProduct.cpp	/^Matrix3i a = Matrix3i::Random(), b = Matrix3i::Random();$/;"	v
b	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_cwiseProduct.cpp	/^Matrix3i a = Matrix3i::Random(), b = Matrix3i::Random();$/;"	v
c	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_cwiseProduct.cpp	/^Matrix3i c = a.cwiseProduct(b);$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_diagonal.cpp	/^Matrix3i m = Matrix3i::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_diagonal_int.cpp	/^Matrix4i m = Matrix4i::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_diagonal_template_int.cpp	/^Matrix4i m = Matrix4i::Random();$/;"	v
eivals	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_eigenvalues.cpp	/^VectorXcd eivals = ones.eigenvalues();$/;"	v
ones	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_eigenvalues.cpp	/^MatrixXd ones = MatrixXd::Ones(3,3);$/;"	v
v	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_end_int.cpp	/^RowVector4i v = RowVector4i::Random();$/;"	v
M	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_eval.cpp	/^Matrix2f M = Matrix2f::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_eval.cpp	/^Matrix2f m;$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_fixedBlock_int_int.cpp	/^Matrix4d m = Vector4d(1,2,3,4).asDiagonal();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_inverse.cpp	/^Matrix3d m = Matrix3d::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_isDiagonal.cpp	/^Matrix3d m = 10000 * Matrix3d::Identity();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_isIdentity.cpp	/^Matrix3d m = Matrix3d::Identity();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_isOnes.cpp	/^Matrix3d m = Matrix3d::Ones();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_isUnitary.cpp	/^Matrix3d m = Matrix3d::Identity();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_isZero.cpp	/^Matrix3d m = Matrix3d::Zero();$/;"	v
a	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_leftCols_int.cpp	/^Array44i a = Array44i::Random();$/;"	v
a	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_noalias.cpp	/^Matrix2d a, b, c; a << 1,2,3,4; b << 5,6,7,8;$/;"	v
b	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_noalias.cpp	/^Matrix2d a, b, c; a << 1,2,3,4; b << 5,6,7,8;$/;"	v
c	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_noalias.cpp	/^Matrix2d a, b, c; a << 1,2,3,4; b << 5,6,7,8;$/;"	v
ones	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_operatorNorm.cpp	/^MatrixXd ones = MatrixXd::Ones(3,3);$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_prod.cpp	/^Matrix3d m = Matrix3d::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_replicate.cpp	/^MatrixXi m = MatrixXi::Random(2,3);$/;"	v
v	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_replicate_int_int.cpp	/^Vector3i v = Vector3i::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_reverse.cpp	/^MatrixXi m = MatrixXi::Random(3,4);$/;"	v
a	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_rightCols_int.cpp	/^Array44i a = Array44i::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_row.cpp	/^Matrix3d m = Matrix3d::Identity();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_rowwise.cpp	/^Matrix3d m = Matrix3d::Random();$/;"	v
v	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_segment_int_int.cpp	/^RowVector4i v = RowVector4i::Random();$/;"	v
m1	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_set.cpp	/^Matrix3i m1;$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_setIdentity.cpp	/^Matrix4i m = Matrix4i::Zero();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_setOnes.cpp	/^Matrix4i m = Matrix4i::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_setRandom.cpp	/^Matrix4i m = Matrix4i::Zero();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_setZero.cpp	/^Matrix4i m = Matrix4i::Random();$/;"	v
v	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_start_int.cpp	/^RowVector4i v = RowVector4i::Random();$/;"	v
a	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_template_int_bottomRows.cpp	/^Array44i a = Array44i::Random();$/;"	v
v	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_template_int_end.cpp	/^RowVector4i v = RowVector4i::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_template_int_int_bottomLeftCorner.cpp	/^Matrix4i m = Matrix4i::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_template_int_int_bottomRightCorner.cpp	/^Matrix4i m = Matrix4i::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_template_int_int_topLeftCorner.cpp	/^Matrix4i m = Matrix4i::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_template_int_int_topRightCorner.cpp	/^Matrix4i m = Matrix4i::Random();$/;"	v
a	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_template_int_leftCols.cpp	/^Array44i a = Array44i::Random();$/;"	v
a	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_template_int_rightCols.cpp	/^Array44i a = Array44i::Random();$/;"	v
v	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_template_int_segment.cpp	/^RowVector4i v = RowVector4i::Random();$/;"	v
v	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_template_int_start.cpp	/^RowVector4i v = RowVector4i::Random();$/;"	v
a	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_template_int_topRows.cpp	/^Array44i a = Array44i::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_topLeftCorner_int_int.cpp	/^Matrix4i m = Matrix4i::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_topRightCorner_int_int.cpp	/^Matrix4i m = Matrix4i::Random();$/;"	v
a	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_topRows_int.cpp	/^Array44i a = Array44i::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/MatrixBase_transpose.cpp	/^Matrix2i m = Matrix2i::Random();$/;"	v
w	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Matrix_resize_int.cpp	/^RowVector3d w;$/;"	v
v	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Matrix_setConstant_int.cpp	/^VectorXf v;$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Matrix_setConstant_int_int.cpp	/^MatrixXf m;$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Matrix_setIdentity_int_int.cpp	/^MatrixXf m;$/;"	v
v	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Matrix_setOnes_int.cpp	/^VectorXf v;$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Matrix_setOnes_int_int.cpp	/^MatrixXf m;$/;"	v
v	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Matrix_setRandom_int.cpp	/^VectorXf v;$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Matrix_setRandom_int_int.cpp	/^MatrixXf m;$/;"	v
v	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Matrix_setZero_int.cpp	/^VectorXf v;$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Matrix_setZero_int_int.cpp	/^MatrixXf m;$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/PartialPivLU_solve.cpp	/^MatrixXd A = MatrixXd::Random(3,3);$/;"	v
B	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/PartialPivLU_solve.cpp	/^MatrixXd B = MatrixXd::Random(3,2);$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/PartialRedux_count.cpp	/^Matrix3d m = Matrix3d::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/PartialRedux_maxCoeff.cpp	/^Matrix3d m = Matrix3d::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/PartialRedux_minCoeff.cpp	/^Matrix3d m = Matrix3d::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/PartialRedux_norm.cpp	/^Matrix3d m = Matrix3d::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/PartialRedux_prod.cpp	/^Matrix3d m = Matrix3d::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/PartialRedux_squaredNorm.cpp	/^Matrix3d m = Matrix3d::Random();$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/PartialRedux_sum.cpp	/^Matrix3d m = Matrix3d::Random();$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/RealSchur_RealSchur_MatrixType.cpp	/^MatrixXd A = MatrixXd::Random(6,6);$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/RealSchur_compute.cpp	/^MatrixXf A = MatrixXf::Random(4,4);$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointEigenSolver_SelfAdjointEigenSolver.cpp	/^Matrix4f A = X + X.transpose();$/;"	v
X	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointEigenSolver_SelfAdjointEigenSolver.cpp	/^Matrix4f X = Matrix4f::Random(4,4);$/;"	v
es	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointEigenSolver_SelfAdjointEigenSolver.cpp	/^SelfAdjointEigenSolver<Matrix4f> es;$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointEigenSolver_SelfAdjointEigenSolver_MatrixType.cpp	/^MatrixXd A = X + X.transpose();$/;"	v
X	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointEigenSolver_SelfAdjointEigenSolver_MatrixType.cpp	/^MatrixXd X = MatrixXd::Random(5,5);$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointEigenSolver_SelfAdjointEigenSolver_MatrixType2.cpp	/^MatrixXd A = X + X.transpose();$/;"	v
X	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointEigenSolver_SelfAdjointEigenSolver_MatrixType2.cpp	/^MatrixXd X = MatrixXd::Random(5,5);$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointEigenSolver_compute_MatrixType.cpp	/^MatrixXf A = X + X.transpose();$/;"	v
X	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointEigenSolver_compute_MatrixType.cpp	/^MatrixXf X = MatrixXf::Random(4,4);$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointEigenSolver_compute_MatrixType2.cpp	/^MatrixXd A = X * X.transpose();$/;"	v
B	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointEigenSolver_compute_MatrixType2.cpp	/^MatrixXd B = X * X.transpose();$/;"	v
X	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointEigenSolver_compute_MatrixType2.cpp	/^MatrixXd X = MatrixXd::Random(5,5);$/;"	v
ones	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointEigenSolver_eigenvalues.cpp	/^MatrixXd ones = MatrixXd::Ones(3,3);$/;"	v
ones	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointEigenSolver_eigenvectors.cpp	/^MatrixXd ones = MatrixXd::Ones(3,3);$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointEigenSolver_operatorInverseSqrt.cpp	/^MatrixXd A = X * X.transpose();$/;"	v
X	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointEigenSolver_operatorInverseSqrt.cpp	/^MatrixXd X = MatrixXd::Random(4,4);$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointEigenSolver_operatorSqrt.cpp	/^MatrixXd A = X * X.transpose();$/;"	v
X	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointEigenSolver_operatorSqrt.cpp	/^MatrixXd X = MatrixXd::Random(4,4);$/;"	v
eivals	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointView_eigenvalues.cpp	/^VectorXd eivals = ones.selfadjointView<Lower>().eigenvalues();$/;"	v
ones	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointView_eigenvalues.cpp	/^MatrixXd ones = MatrixXd::Ones(3,3);$/;"	v
ones	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/SelfAdjointView_operatorNorm.cpp	/^MatrixXd ones = MatrixXd::Ones(3,3);$/;"	v
Acolmajor	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/TopicStorageOrders_example.cpp	/^Matrix<int, 3, 4, ColMajor> Acolmajor;$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tridiagonalization_Tridiagonalization_MatrixType.cpp	/^MatrixXd A = X + X.transpose();$/;"	v
X	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tridiagonalization_Tridiagonalization_MatrixType.cpp	/^MatrixXd X = MatrixXd::Random(5,5);$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tridiagonalization_compute.cpp	/^MatrixXf A = X + X.transpose();$/;"	v
X	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tridiagonalization_compute.cpp	/^MatrixXf X = MatrixXf::Random(4,4);$/;"	v
tri	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tridiagonalization_compute.cpp	/^Tridiagonalization<MatrixXf> tri;$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tridiagonalization_decomposeInPlace.cpp	/^MatrixXd A = X + X.transpose();$/;"	v
X	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tridiagonalization_decomposeInPlace.cpp	/^MatrixXd X = MatrixXd::Random(5,5);$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tridiagonalization_diagonal.cpp	/^MatrixXcd A = X + X.adjoint();$/;"	v
X	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tridiagonalization_diagonal.cpp	/^MatrixXcd X = MatrixXcd::Random(4,4);$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tridiagonalization_householderCoefficients.cpp	/^Matrix4d A = X + X.transpose();$/;"	v
X	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tridiagonalization_householderCoefficients.cpp	/^Matrix4d X = Matrix4d::Random(4,4);$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tridiagonalization_packedMatrix.cpp	/^Matrix4d A = X + X.transpose();$/;"	v
X	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tridiagonalization_packedMatrix.cpp	/^Matrix4d X = Matrix4d::Random(4,4);$/;"	v
mat	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tutorial_AdvancedInitialization_CommaTemporary.cpp	/^MatrixXf mat = MatrixXf::Random(2, 3);$/;"	v
size	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tutorial_AdvancedInitialization_ThreeWays.cpp	/^const int size = 6;$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tutorial_commainit_01.cpp	/^Matrix3f m;$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tutorial_commainit_01b.cpp	/^Matrix3f m;$/;"	v
cols	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tutorial_commainit_02.cpp	/^int rows=5, cols=5;$/;"	v
rows	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tutorial_commainit_02.cpp	/^int rows=5, cols=5;$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tutorial_solve_matrix_inverse.cpp	/^Matrix3f A;$/;"	v
b	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tutorial_solve_matrix_inverse.cpp	/^Vector3f b;$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tutorial_solve_singular.cpp	/^Matrix3f A;$/;"	v
b	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tutorial_solve_singular.cpp	/^Vector3f b;$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tutorial_solve_triangular.cpp	/^Matrix3f A;$/;"	v
b	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tutorial_solve_triangular.cpp	/^Vector3f b;$/;"	v
A	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tutorial_solve_triangular_inplace.cpp	/^Matrix3f A;$/;"	v
b	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Tutorial_solve_triangular_inplace.cpp	/^Vector3f b;$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/Vectorwise_reverse.cpp	/^MatrixXi m = MatrixXi::Random(3,4);$/;"	v
Matrix5x3	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/class_FullPivLU.cpp	/^typedef Matrix<double, 5, 3> Matrix5x3;$/;"	t	file:
Matrix5x5	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/class_FullPivLU.cpp	/^typedef Matrix<double, 5, 5> Matrix5x5;$/;"	t	file:
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/class_FullPivLU.cpp	/^Matrix5x3 m = Matrix5x3::Random();$/;"	v
i	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/tut_arithmetic_redux_minmax.cpp	/^  std::ptrdiff_t i, j;$/;"	v
j	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/tut_arithmetic_redux_minmax.cpp	/^  std::ptrdiff_t i, j;$/;"	v
m	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/tut_arithmetic_redux_minmax.cpp	/^  Matrix3f m = Matrix3f::Random();$/;"	v
minOfM	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/tut_arithmetic_redux_minmax.cpp	/^  float minOfM = m.minCoeff(&i,&j);$/;"	v
a	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/tut_arithmetic_transpose_aliasing.cpp	/^Matrix2i a; a << 1, 2, 3, 4;$/;"	v
a	tags/before-github-sync/EXTERNAL/eigen3/doc/snippets/tut_arithmetic_transpose_conjugate.cpp	/^MatrixXcf a = MatrixXcf::Random(2,2);$/;"	v
main	tags/before-github-sync/EXTERNAL/eigen3/doc/tutorial.cpp	/^int main(int argc, char *argv[])$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_nonconst_ctor_on_const_xpr_0.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_nonconst_ctor_on_const_xpr_0.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_nonconst_ctor_on_const_xpr_0.cpp	/^void foo(CV_QUALIFIER Matrix3d &m){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_nonconst_ctor_on_const_xpr_0.cpp	/^int main() {}$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_nonconst_ctor_on_const_xpr_1.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_nonconst_ctor_on_const_xpr_1.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_nonconst_ctor_on_const_xpr_1.cpp	/^void foo(CV_QUALIFIER Matrix3d &m){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_nonconst_ctor_on_const_xpr_1.cpp	/^int main() {}$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_nonconst_ctor_on_const_xpr_2.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_nonconst_ctor_on_const_xpr_2.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_nonconst_ctor_on_const_xpr_2.cpp	/^void foo(CV_QUALIFIER Matrix3d &m){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_nonconst_ctor_on_const_xpr_2.cpp	/^int main() {}$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_on_const_type_actually_const_0.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_on_const_type_actually_const_0.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_on_const_type_actually_const_0.cpp	/^void foo(){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_on_const_type_actually_const_0.cpp	/^int main() {}$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_on_const_type_actually_const_1.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_on_const_type_actually_const_1.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_on_const_type_actually_const_1.cpp	/^void foo(){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/block_on_const_type_actually_const_1.cpp	/^int main() {}$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/const_qualified_block_method_retval_0.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/const_qualified_block_method_retval_0.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/const_qualified_block_method_retval_0.cpp	/^void foo(CV_QUALIFIER Matrix3d &m){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/const_qualified_block_method_retval_0.cpp	/^int main() {}$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/const_qualified_block_method_retval_1.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/const_qualified_block_method_retval_1.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/const_qualified_block_method_retval_1.cpp	/^void foo(CV_QUALIFIER Matrix3d &m){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/const_qualified_block_method_retval_1.cpp	/^int main() {}$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/const_qualified_diagonal_method_retval.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/const_qualified_diagonal_method_retval.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/const_qualified_diagonal_method_retval.cpp	/^void foo(CV_QUALIFIER Matrix3d &m){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/const_qualified_diagonal_method_retval.cpp	/^int main() {}$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/const_qualified_transpose_method_retval.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/const_qualified_transpose_method_retval.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/const_qualified_transpose_method_retval.cpp	/^void foo(CV_QUALIFIER Matrix3d &m){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/const_qualified_transpose_method_retval.cpp	/^int main() {}$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/diagonal_nonconst_ctor_on_const_xpr.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/diagonal_nonconst_ctor_on_const_xpr.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/diagonal_nonconst_ctor_on_const_xpr.cpp	/^void foo(CV_QUALIFIER Matrix3d &m){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/diagonal_nonconst_ctor_on_const_xpr.cpp	/^int main() {}$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/diagonal_on_const_type_actually_const.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/diagonal_on_const_type_actually_const.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/diagonal_on_const_type_actually_const.cpp	/^void foo(){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/diagonal_on_const_type_actually_const.cpp	/^int main() {}$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_0.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_0.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_0.cpp	/^void foo(CV_QUALIFIER float *ptr){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_0.cpp	/^int main() {}$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_1.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_1.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_1.cpp	/^void foo(CV_QUALIFIER float *ptr, DenseIndex size){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_1.cpp	/^int main() {}$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_2.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_2.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_2.cpp	/^void foo(CV_QUALIFIER float *ptr, DenseIndex rows, DenseIndex cols){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_2.cpp	/^int main() {}$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_3.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_3.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_3.cpp	/^void foo(CV_QUALIFIER float *ptr, DenseIndex rows, DenseIndex cols){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_3.cpp	/^int main() {}$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_4.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_4.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_4.cpp	/^void foo(const float *ptr, DenseIndex rows, DenseIndex cols){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_nonconst_ctor_on_const_ptr_4.cpp	/^int main() {}$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_on_const_type_actually_const_0.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_on_const_type_actually_const_0.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_on_const_type_actually_const_0.cpp	/^void foo(float *ptr){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_on_const_type_actually_const_0.cpp	/^int main() {}$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_on_const_type_actually_const_1.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_on_const_type_actually_const_1.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_on_const_type_actually_const_1.cpp	/^void foo(float *ptr){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/map_on_const_type_actually_const_1.cpp	/^int main() {}$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/transpose_nonconst_ctor_on_const_xpr.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/transpose_nonconst_ctor_on_const_xpr.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/transpose_nonconst_ctor_on_const_xpr.cpp	/^void foo(CV_QUALIFIER Matrix3d &m){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/transpose_nonconst_ctor_on_const_xpr.cpp	/^int main() {}$/;"	f
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/transpose_on_const_type_actually_const.cpp	4;"	d	file:
CV_QUALIFIER	tags/before-github-sync/EXTERNAL/eigen3/failtest/transpose_on_const_type_actually_const.cpp	6;"	d	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/failtest/transpose_on_const_type_actually_const.cpp	/^void foo(){$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/failtest/transpose_on_const_type_actually_const.cpp	/^int main() {}$/;"	f
EIGEN_LAPACK_FUNC	tags/before-github-sync/EXTERNAL/eigen3/lapack/cholesky.cpp	/^EIGEN_LAPACK_FUNC(potrf,(char* uplo, int *n, RealScalar *pa, int *lda, int *info))$/;"	f
EIGEN_LAPACK_FUNC	tags/before-github-sync/EXTERNAL/eigen3/lapack/cholesky.cpp	/^EIGEN_LAPACK_FUNC(potrs,(char* uplo, int *n, int *nrhs, RealScalar *pa, int *lda, RealScalar *pb, int *ldb, int *info))$/;"	f
ISCOMPLEX	tags/before-github-sync/EXTERNAL/eigen3/lapack/complex_double.cpp	29;"	d	file:
REAL_SCALAR_SUFFIX	tags/before-github-sync/EXTERNAL/eigen3/lapack/complex_double.cpp	28;"	d	file:
SCALAR	tags/before-github-sync/EXTERNAL/eigen3/lapack/complex_double.cpp	25;"	d	file:
SCALAR_SUFFIX	tags/before-github-sync/EXTERNAL/eigen3/lapack/complex_double.cpp	26;"	d	file:
SCALAR_SUFFIX_UP	tags/before-github-sync/EXTERNAL/eigen3/lapack/complex_double.cpp	27;"	d	file:
ISCOMPLEX	tags/before-github-sync/EXTERNAL/eigen3/lapack/complex_single.cpp	29;"	d	file:
REAL_SCALAR_SUFFIX	tags/before-github-sync/EXTERNAL/eigen3/lapack/complex_single.cpp	28;"	d	file:
SCALAR	tags/before-github-sync/EXTERNAL/eigen3/lapack/complex_single.cpp	25;"	d	file:
SCALAR_SUFFIX	tags/before-github-sync/EXTERNAL/eigen3/lapack/complex_single.cpp	26;"	d	file:
SCALAR_SUFFIX_UP	tags/before-github-sync/EXTERNAL/eigen3/lapack/complex_single.cpp	27;"	d	file:
ISCOMPLEX	tags/before-github-sync/EXTERNAL/eigen3/lapack/double.cpp	28;"	d	file:
SCALAR	tags/before-github-sync/EXTERNAL/eigen3/lapack/double.cpp	25;"	d	file:
SCALAR_SUFFIX	tags/before-github-sync/EXTERNAL/eigen3/lapack/double.cpp	26;"	d	file:
SCALAR_SUFFIX_UP	tags/before-github-sync/EXTERNAL/eigen3/lapack/double.cpp	27;"	d	file:
EIGEN_LAPACK_FUNC	tags/before-github-sync/EXTERNAL/eigen3/lapack/eigenvalues.cpp	/^EIGEN_LAPACK_FUNC(syev,(char *jobz, char *uplo, int* n, Scalar* a, int *lda, Scalar* w, Scalar* \/*work*\/, int* lwork, int *info))$/;"	f
EIGEN_LAPACK_COMMON_H	tags/before-github-sync/EXTERNAL/eigen3/lapack/lapack_common.h	26;"	d
EIGEN_LAPACK_FUNC	tags/before-github-sync/EXTERNAL/eigen3/lapack/lapack_common.h	30;"	d
PivotsType	tags/before-github-sync/EXTERNAL/eigen3/lapack/lapack_common.h	/^typedef Eigen::Map<Eigen::Transpositions<Eigen::Dynamic,Eigen::Dynamic,int> > PivotsType;$/;"	t
EIGEN_LAPACK_FUNC	tags/before-github-sync/EXTERNAL/eigen3/lapack/lu.cpp	/^EIGEN_LAPACK_FUNC(getrf,(int *m, int *n, RealScalar *pa, int *lda, int *ipiv, int *info))$/;"	f
EIGEN_LAPACK_FUNC	tags/before-github-sync/EXTERNAL/eigen3/lapack/lu.cpp	/^EIGEN_LAPACK_FUNC(getrs,(char *trans, int *n, int *nrhs, RealScalar *pa, int *lda, int *ipiv, RealScalar *pb, int *ldb, int *info))$/;"	f
ISCOMPLEX	tags/before-github-sync/EXTERNAL/eigen3/lapack/single.cpp	28;"	d	file:
SCALAR	tags/before-github-sync/EXTERNAL/eigen3/lapack/single.cpp	25;"	d	file:
SCALAR_SUFFIX	tags/before-github-sync/EXTERNAL/eigen3/lapack/single.cpp	26;"	d	file:
SCALAR_SUFFIX_UP	tags/before-github-sync/EXTERNAL/eigen3/lapack/single.cpp	27;"	d	file:
add_online_info_into_contributors_list	tags/before-github-sync/EXTERNAL/eigen3/scripts/eigen_gen_credits.cpp	/^void add_online_info_into_contributors_list(list<contributor>& contributors_list, const char *filename)$/;"	f
changedlines	tags/before-github-sync/EXTERNAL/eigen3/scripts/eigen_gen_credits.cpp	/^  int changedlines;$/;"	m	struct:contributor	file:
changesets	tags/before-github-sync/EXTERNAL/eigen3/scripts/eigen_gen_credits.cpp	/^  int changesets;$/;"	m	struct:contributor	file:
contributor	tags/before-github-sync/EXTERNAL/eigen3/scripts/eigen_gen_credits.cpp	/^  contributor() : changedlines(0), changesets(0) {}$/;"	f	struct:contributor
contributor	tags/before-github-sync/EXTERNAL/eigen3/scripts/eigen_gen_credits.cpp	/^struct contributor$/;"	s	file:
contributor_name	tags/before-github-sync/EXTERNAL/eigen3/scripts/eigen_gen_credits.cpp	/^std::string contributor_name(const std::string& line)$/;"	f
contributors_map_from_churn_output	tags/before-github-sync/EXTERNAL/eigen3/scripts/eigen_gen_credits.cpp	/^map<string,int> contributors_map_from_churn_output(const char *filename)$/;"	f
lastname	tags/before-github-sync/EXTERNAL/eigen3/scripts/eigen_gen_credits.cpp	/^string lastname(const string& name)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/scripts/eigen_gen_credits.cpp	/^int main()$/;"	f
misc	tags/before-github-sync/EXTERNAL/eigen3/scripts/eigen_gen_credits.cpp	/^  string misc;$/;"	m	struct:contributor	file:
name	tags/before-github-sync/EXTERNAL/eigen3/scripts/eigen_gen_credits.cpp	/^  string name;$/;"	m	struct:contributor	file:
operator <	tags/before-github-sync/EXTERNAL/eigen3/scripts/eigen_gen_credits.cpp	/^  bool operator < (const contributor& other)$/;"	f	struct:contributor
url	tags/before-github-sync/EXTERNAL/eigen3/scripts/eigen_gen_credits.cpp	/^  string url;$/;"	m	struct:contributor	file:
EIGEN_NO_STATIC_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/adjoint.cpp	25;"	d	file:
adjoint	tags/before-github-sync/EXTERNAL/eigen3/test/adjoint.cpp	/^template<typename MatrixType> void adjoint(const MatrixType& m)$/;"	f
test_adjoint	tags/before-github-sync/EXTERNAL/eigen3/test/adjoint.cpp	/^void test_adjoint()$/;"	f
array	tags/before-github-sync/EXTERNAL/eigen3/test/array.cpp	/^template<typename ArrayType> void array(const ArrayType& m)$/;"	f
array_real	tags/before-github-sync/EXTERNAL/eigen3/test/array.cpp	/^template<typename ArrayType> void array_real(const ArrayType& m)$/;"	f
comparisons	tags/before-github-sync/EXTERNAL/eigen3/test/array.cpp	/^template<typename ArrayType> void comparisons(const ArrayType& m)$/;"	f
test_array	tags/before-github-sync/EXTERNAL/eigen3/test/array.cpp	/^void test_array()$/;"	f
array_for_matrix	tags/before-github-sync/EXTERNAL/eigen3/test/array_for_matrix.cpp	/^template<typename MatrixType> void array_for_matrix(const MatrixType& m)$/;"	f
comparisons	tags/before-github-sync/EXTERNAL/eigen3/test/array_for_matrix.cpp	/^template<typename MatrixType> void comparisons(const MatrixType& m)$/;"	f
lpNorm	tags/before-github-sync/EXTERNAL/eigen3/test/array_for_matrix.cpp	/^template<typename VectorType> void lpNorm(const VectorType& v)$/;"	f
test_array_for_matrix	tags/before-github-sync/EXTERNAL/eigen3/test/array_for_matrix.cpp	/^void test_array_for_matrix()$/;"	f
replicate	tags/before-github-sync/EXTERNAL/eigen3/test/array_replicate.cpp	/^template<typename MatrixType> void replicate(const MatrixType& m)$/;"	f
test_array_replicate	tags/before-github-sync/EXTERNAL/eigen3/test/array_replicate.cpp	/^void test_array_replicate()$/;"	f
reverse	tags/before-github-sync/EXTERNAL/eigen3/test/array_reverse.cpp	/^template<typename MatrixType> void reverse(const MatrixType& m)$/;"	f
test_array_reverse	tags/before-github-sync/EXTERNAL/eigen3/test/array_reverse.cpp	/^void test_array_reverse()$/;"	f
bandmatrix	tags/before-github-sync/EXTERNAL/eigen3/test/bandmatrix.cpp	/^template<typename MatrixType> void bandmatrix(const MatrixType& _m)$/;"	f
test_bandmatrix	tags/before-github-sync/EXTERNAL/eigen3/test/bandmatrix.cpp	/^void test_bandmatrix()$/;"	f
EIGEN_NO_STATIC_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/basicstuff.cpp	25;"	d	file:
basicStuff	tags/before-github-sync/EXTERNAL/eigen3/test/basicstuff.cpp	/^template<typename MatrixType> void basicStuff(const MatrixType& m)$/;"	f
basicStuffComplex	tags/before-github-sync/EXTERNAL/eigen3/test/basicstuff.cpp	/^template<typename MatrixType> void basicStuffComplex(const MatrixType& m)$/;"	f
casting	tags/before-github-sync/EXTERNAL/eigen3/test/basicstuff.cpp	/^void casting()$/;"	f
fixedSizeMatrixConstruction	tags/before-github-sync/EXTERNAL/eigen3/test/basicstuff.cpp	/^void fixedSizeMatrixConstruction()$/;"	f
test_basicstuff	tags/before-github-sync/EXTERNAL/eigen3/test/basicstuff.cpp	/^void test_basicstuff()$/;"	f
EIGEN_NO_STATIC_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/block.cpp	25;"	d	file:
block	tags/before-github-sync/EXTERNAL/eigen3/test/block.cpp	/^template<typename MatrixType> void block(const MatrixType& m)$/;"	f
compare_using_data_and_stride	tags/before-github-sync/EXTERNAL/eigen3/test/block.cpp	/^void compare_using_data_and_stride(const MatrixType& m)$/;"	f
data_and_stride	tags/before-github-sync/EXTERNAL/eigen3/test/block.cpp	/^void data_and_stride(const MatrixType& m)$/;"	f
test_block	tags/before-github-sync/EXTERNAL/eigen3/test/block.cpp	/^void test_block()$/;"	f
EIGEN_DENSE_STORAGE_CTOR_PLUGIN	tags/before-github-sync/EXTERNAL/eigen3/test/cholesky.cpp	31;"	d	file:
EIGEN_NO_ASSERTION_CHECKING	tags/before-github-sync/EXTERNAL/eigen3/test/cholesky.cpp	26;"	d	file:
VERIFY_EVALUATION_COUNT	tags/before-github-sync/EXTERNAL/eigen3/test/cholesky.cpp	37;"	d	file:
cholesky	tags/before-github-sync/EXTERNAL/eigen3/test/cholesky.cpp	/^template<typename MatrixType> void cholesky(const MatrixType& m)$/;"	f
cholesky_cplx	tags/before-github-sync/EXTERNAL/eigen3/test/cholesky.cpp	/^template<typename MatrixType> void cholesky_cplx(const MatrixType& m)$/;"	f
cholesky_verify_assert	tags/before-github-sync/EXTERNAL/eigen3/test/cholesky.cpp	/^template<typename MatrixType> void cholesky_verify_assert()$/;"	f
nb_temporaries	tags/before-github-sync/EXTERNAL/eigen3/test/cholesky.cpp	/^static int nb_temporaries;$/;"	v	file:
test_cholesky	tags/before-github-sync/EXTERNAL/eigen3/test/cholesky.cpp	/^void test_cholesky()$/;"	f
test_commainitializer	tags/before-github-sync/EXTERNAL/eigen3/test/commainitializer.cpp	/^void test_commainitializer()$/;"	f
run_matrix_tests	tags/before-github-sync/EXTERNAL/eigen3/test/conservative_resize.cpp	/^void run_matrix_tests()$/;"	f
run_vector_tests	tags/before-github-sync/EXTERNAL/eigen3/test/conservative_resize.cpp	/^void run_vector_tests()$/;"	f
test_conservative_resize	tags/before-github-sync/EXTERNAL/eigen3/test/conservative_resize.cpp	/^void test_conservative_resize()$/;"	f
COMPARE_CORNER	tags/before-github-sync/EXTERNAL/eigen3/test/corners.cpp	27;"	d	file:
corners	tags/before-github-sync/EXTERNAL/eigen3/test/corners.cpp	/^template<typename MatrixType> void corners(const MatrixType& m)$/;"	f
corners_fixedsize	tags/before-github-sync/EXTERNAL/eigen3/test/corners.cpp	/^template<typename MatrixType, int CRows, int CCols, int SRows, int SCols> void corners_fixedsize()$/;"	f
test_corners	tags/before-github-sync/EXTERNAL/eigen3/test/corners.cpp	/^void test_corners()$/;"	f
AddIfNull	tags/before-github-sync/EXTERNAL/eigen3/test/cwiseop.cpp	/^template<typename Scalar> struct AddIfNull {$/;"	s	file:
Cost	tags/before-github-sync/EXTERNAL/eigen3/test/cwiseop.cpp	/^    enum { Cost = NumTraits<Scalar>::AddCost };$/;"	e	enum:AddIfNull::<anonymous>	file:
EIGEN2_SUPPORT	tags/before-github-sync/EXTERNAL/eigen3/test/cwiseop.cpp	26;"	d	file:
EIGEN_NO_STATIC_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/cwiseop.cpp	27;"	d	file:
cwiseops	tags/before-github-sync/EXTERNAL/eigen3/test/cwiseop.cpp	/^template<typename MatrixType> void cwiseops(const MatrixType& m)$/;"	f
operator ()	tags/before-github-sync/EXTERNAL/eigen3/test/cwiseop.cpp	/^    const Scalar operator() (const Scalar a, const Scalar b) const {return a<=1e-3 ? b : a;}$/;"	f	struct:AddIfNull
test_cwiseop	tags/before-github-sync/EXTERNAL/eigen3/test/cwiseop.cpp	/^void test_cwiseop()$/;"	f
determinant	tags/before-github-sync/EXTERNAL/eigen3/test/determinant.cpp	/^template<typename MatrixType> void determinant(const MatrixType& m)$/;"	f
test_determinant	tags/before-github-sync/EXTERNAL/eigen3/test/determinant.cpp	/^void test_determinant()$/;"	f
diagonal	tags/before-github-sync/EXTERNAL/eigen3/test/diagonal.cpp	/^template<typename MatrixType> void diagonal(const MatrixType& m)$/;"	f
test_diagonal	tags/before-github-sync/EXTERNAL/eigen3/test/diagonal.cpp	/^void test_diagonal()$/;"	f
diagonalmatrices	tags/before-github-sync/EXTERNAL/eigen3/test/diagonalmatrices.cpp	/^template<typename MatrixType> void diagonalmatrices(const MatrixType& m)$/;"	f
test_diagonalmatrices	tags/before-github-sync/EXTERNAL/eigen3/test/diagonalmatrices.cpp	/^void test_diagonalmatrices()$/;"	f
EIGEN_DONT_ALIGN	tags/before-github-sync/EXTERNAL/eigen3/test/dontalign.cpp	26;"	d	file:
EIGEN_DONT_ALIGN_STATICALLY	tags/before-github-sync/EXTERNAL/eigen3/test/dontalign.cpp	28;"	d	file:
dontalign	tags/before-github-sync/EXTERNAL/eigen3/test/dontalign.cpp	/^void dontalign(const MatrixType& m)$/;"	f
test_dontalign	tags/before-github-sync/EXTERNAL/eigen3/test/dontalign.cpp	/^void test_dontalign()$/;"	f
ALIGNMENT	tags/before-github-sync/EXTERNAL/eigen3/test/dynalloc.cpp	28;"	d	file:
ALIGNMENT	tags/before-github-sync/EXTERNAL/eigen3/test/dynalloc.cpp	30;"	d	file:
MyClassA	tags/before-github-sync/EXTERNAL/eigen3/test/dynalloc.cpp	/^class MyClassA$/;"	c	file:
MyStruct	tags/before-github-sync/EXTERNAL/eigen3/test/dynalloc.cpp	/^struct MyStruct$/;"	s	file:
avec	tags/before-github-sync/EXTERNAL/eigen3/test/dynalloc.cpp	/^    Vector4f avec;$/;"	m	class:MyClassA	file:
avec	tags/before-github-sync/EXTERNAL/eigen3/test/dynalloc.cpp	/^  Vector4f avec;$/;"	m	struct:MyStruct	file:
check_aligned_malloc	tags/before-github-sync/EXTERNAL/eigen3/test/dynalloc.cpp	/^void check_aligned_malloc()$/;"	f
check_aligned_new	tags/before-github-sync/EXTERNAL/eigen3/test/dynalloc.cpp	/^void check_aligned_new()$/;"	f
check_aligned_stack_alloc	tags/before-github-sync/EXTERNAL/eigen3/test/dynalloc.cpp	/^void check_aligned_stack_alloc()$/;"	f
check_dynaligned	tags/before-github-sync/EXTERNAL/eigen3/test/dynalloc.cpp	/^template<typename T> void check_dynaligned()$/;"	f
check_handmade_aligned_malloc	tags/before-github-sync/EXTERNAL/eigen3/test/dynalloc.cpp	/^void check_handmade_aligned_malloc()$/;"	f
dummychar	tags/before-github-sync/EXTERNAL/eigen3/test/dynalloc.cpp	/^    char dummychar;$/;"	m	class:MyClassA	file:
dummychar	tags/before-github-sync/EXTERNAL/eigen3/test/dynalloc.cpp	/^  char dummychar;$/;"	m	struct:MyStruct	file:
test_dynalloc	tags/before-github-sync/EXTERNAL/eigen3/test/dynalloc.cpp	/^void test_dynalloc()$/;"	f
adjoint	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_adjoint.cpp	/^template<typename MatrixType> void adjoint(const MatrixType& m)$/;"	f
test_eigen2_adjoint	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_adjoint.cpp	/^void test_eigen2_adjoint()$/;"	f
alignedbox	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_alignedbox.cpp	/^template<typename BoxType> void alignedbox(const BoxType& _box)$/;"	f
test_eigen2_alignedbox	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_alignedbox.cpp	/^void test_eigen2_alignedbox()$/;"	f
array	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_array.cpp	/^template<typename MatrixType> void array(const MatrixType& m)$/;"	f
comparisons	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_array.cpp	/^template<typename MatrixType> void comparisons(const MatrixType& m)$/;"	f
lpNorm	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_array.cpp	/^template<typename VectorType> void lpNorm(const VectorType& v)$/;"	f
test_eigen2_array	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_array.cpp	/^void test_eigen2_array()$/;"	f
basicStuff	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_basicstuff.cpp	/^template<typename MatrixType> void basicStuff(const MatrixType& m)$/;"	f
test_eigen2_basicstuff	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_basicstuff.cpp	/^void test_eigen2_basicstuff()$/;"	f
test_eigen2_bug_132	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_bug_132.cpp	/^void test_eigen2_bug_132() {$/;"	f
EIGEN_NO_ASSERTION_CHECKING	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_cholesky.cpp	25;"	d	file:
cholesky	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_cholesky.cpp	/^template<typename MatrixType> void cholesky(const MatrixType& m)$/;"	f
test_eigen2_cholesky	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_cholesky.cpp	/^void test_eigen2_cholesky()$/;"	f
test_eigen2_commainitializer	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_commainitializer.cpp	/^void test_eigen2_commainitializer()$/;"	f
AddIfNull	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_cwiseop.cpp	/^template<typename Scalar> struct AddIfNull {$/;"	s	file:
Cost	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_cwiseop.cpp	/^    enum { Cost = NumTraits<Scalar>::AddCost };$/;"	e	enum:AddIfNull::<anonymous>	file:
cwiseops	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_cwiseop.cpp	/^template<typename MatrixType> void cwiseops(const MatrixType& m)$/;"	f
operator ()	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_cwiseop.cpp	/^    const Scalar operator() (const Scalar a, const Scalar b) const {return a<=1e-3 ? b : a;}$/;"	f	struct:AddIfNull
test_eigen2_cwiseop	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_cwiseop.cpp	/^void test_eigen2_cwiseop()$/;"	f
determinant	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_determinant.cpp	/^template<typename MatrixType> void determinant(const MatrixType& m)$/;"	f
test_eigen2_determinant	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_determinant.cpp	/^void test_eigen2_determinant()$/;"	f
ALIGNMENT	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_dynalloc.cpp	28;"	d	file:
ALIGNMENT	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_dynalloc.cpp	30;"	d	file:
MyClassA	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_dynalloc.cpp	/^class MyClassA$/;"	c	file:
MyStruct	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_dynalloc.cpp	/^struct MyStruct$/;"	s	file:
avec	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_dynalloc.cpp	/^    Vector4f avec;$/;"	m	class:MyClassA	file:
avec	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_dynalloc.cpp	/^  Vector4f avec;$/;"	m	struct:MyStruct	file:
check_aligned_malloc	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_dynalloc.cpp	/^void check_aligned_malloc()$/;"	f
check_aligned_new	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_dynalloc.cpp	/^void check_aligned_new()$/;"	f
check_aligned_stack_alloc	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_dynalloc.cpp	/^void check_aligned_stack_alloc()$/;"	f
check_dynaligned	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_dynalloc.cpp	/^template<typename T> void check_dynaligned()$/;"	f
check_handmade_aligned_malloc	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_dynalloc.cpp	/^void check_handmade_aligned_malloc()$/;"	f
dummychar	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_dynalloc.cpp	/^    char dummychar;$/;"	m	class:MyClassA	file:
dummychar	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_dynalloc.cpp	/^  char dummychar;$/;"	m	struct:MyStruct	file:
test_eigen2_dynalloc	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_dynalloc.cpp	/^void test_eigen2_dynalloc()$/;"	f
eigensolver	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_eigensolver.cpp	/^template<typename MatrixType> void eigensolver(const MatrixType& m)$/;"	f
selfadjointeigensolver	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_eigensolver.cpp	/^template<typename MatrixType> void selfadjointeigensolver(const MatrixType& m)$/;"	f
test_eigen2_eigensolver	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_eigensolver.cpp	/^void test_eigen2_eigensolver()$/;"	f
some_non_vectorizable_type	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_first_aligned.cpp	/^struct some_non_vectorizable_type { float x; };$/;"	s	file:
test_eigen2_first_aligned	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_first_aligned.cpp	/^void test_eigen2_first_aligned()$/;"	f
test_eigen2_first_aligned_helper	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_first_aligned.cpp	/^void test_eigen2_first_aligned_helper(Scalar *array, int size)$/;"	f
test_eigen2_none_aligned_helper	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_first_aligned.cpp	/^void test_eigen2_none_aligned_helper(Scalar *array, int size)$/;"	f
x	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_first_aligned.cpp	/^struct some_non_vectorizable_type { float x; };$/;"	m	struct:some_non_vectorizable_type	file:
VERIFY_EULER	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_geometry.cpp	407;"	d	file:
geometry	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_geometry.cpp	/^template<typename Scalar> void geometry(void)$/;"	f
test_eigen2_geometry	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_geometry.cpp	/^void test_eigen2_geometry()$/;"	f
EIGEN2_SUPPORT_STAGE15_RESOLVE_API_CONFLICTS_WARN	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_geometry_with_eigen2_prefix.cpp	25;"	d	file:
VERIFY_EULER	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_geometry_with_eigen2_prefix.cpp	409;"	d	file:
geometry	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_geometry_with_eigen2_prefix.cpp	/^template<typename Scalar> void geometry(void)$/;"	f
test_eigen2_geometry_with_eigen2_prefix	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_geometry_with_eigen2_prefix.cpp	/^void test_eigen2_geometry_with_eigen2_prefix()$/;"	f
hyperplane	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_hyperplane.cpp	/^template<typename HyperplaneType> void hyperplane(const HyperplaneType& _plane)$/;"	f
lines	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_hyperplane.cpp	/^template<typename Scalar> void lines()$/;"	f
test_eigen2_hyperplane	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_hyperplane.cpp	/^void test_eigen2_hyperplane()$/;"	f
inverse	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_inverse.cpp	/^template<typename MatrixType> void inverse(const MatrixType& m)$/;"	f
test_eigen2_inverse	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_inverse.cpp	/^void test_eigen2_inverse()$/;"	f
linearStructure	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_linearstructure.cpp	/^template<typename MatrixType> void linearStructure(const MatrixType& m)$/;"	f
test_eigen2_linearstructure	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_linearstructure.cpp	/^void test_eigen2_linearstructure()$/;"	f
doSomeRankPreservingOperations	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_lu.cpp	/^void doSomeRankPreservingOperations(Eigen::MatrixBase<Derived>& m)$/;"	f
lu_invertible	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_lu.cpp	/^template<typename MatrixType> void lu_invertible()$/;"	f
lu_non_invertible	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_lu.cpp	/^template<typename MatrixType> void lu_non_invertible()$/;"	f
test_eigen2_lu	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_lu.cpp	/^void test_eigen2_lu()$/;"	f
map_class_matrix	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_map.cpp	/^template<typename MatrixType> void map_class_matrix(const MatrixType& m)$/;"	f
map_class_vector	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_map.cpp	/^template<typename VectorType> void map_class_vector(const VectorType& m)$/;"	f
map_static_methods	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_map.cpp	/^template<typename VectorType> void map_static_methods(const VectorType& m)$/;"	f
test_eigen2_map	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_map.cpp	/^void test_eigen2_map()$/;"	f
VERIFY_META_SQRT	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_meta.cpp	58;"	d	file:
test_eigen2_meta	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_meta.cpp	/^void test_eigen2_meta()$/;"	f
miscMatrices	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_miscmatrices.cpp	/^template<typename MatrixType> void miscMatrices(const MatrixType& m)$/;"	f
test_eigen2_miscmatrices	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_miscmatrices.cpp	/^void test_eigen2_miscmatrices()$/;"	f
EIGEN_DONT_VECTORIZE	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_mixingtypes.cpp	31;"	d	file:
EIGEN_NO_STATIC_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_mixingtypes.cpp	27;"	d	file:
mixingtypes	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_mixingtypes.cpp	/^template<int SizeAtCompileType> void mixingtypes(int size = SizeAtCompileType)$/;"	f
test_eigen2_mixingtypes	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_mixingtypes.cpp	/^void test_eigen2_mixingtypes()$/;"	f
EIGEN_USE_NEW_STDVECTOR	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_newstdvector.cpp	25;"	d	file:
check_stdvector_matrix	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_newstdvector.cpp	/^void check_stdvector_matrix(const MatrixType& m)$/;"	f
check_stdvector_quaternion	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_newstdvector.cpp	/^void check_stdvector_quaternion(const QuaternionType&)$/;"	f
check_stdvector_transform	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_newstdvector.cpp	/^void check_stdvector_transform(const TransformType&)$/;"	f
test_eigen2_newstdvector	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_newstdvector.cpp	/^void test_eigen2_newstdvector()$/;"	f
EIGEN_NO_MALLOC	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_nomalloc.cpp	33;"	d	file:
EIGEN_STACK_ALLOCATION_LIMIT	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_nomalloc.cpp	31;"	d	file:
nomalloc	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_nomalloc.cpp	/^template<typename MatrixType> void nomalloc(const MatrixType& m)$/;"	f
test_eigen2_nomalloc	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_nomalloc.cpp	/^void test_eigen2_nomalloc()$/;"	f
throw	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_nomalloc.cpp	28;"	d	file:
CHECK_CWISE	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_packetmath.cpp	36;"	d	file:
REF_ADD	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_packetmath.cpp	43;"	d	file:
REF_DIV	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_packetmath.cpp	46;"	d	file:
REF_MUL	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_packetmath.cpp	45;"	d	file:
REF_SUB	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_packetmath.cpp	44;"	d	file:
areApprox	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_packetmath.cpp	/^template<typename Scalar> bool areApprox(const Scalar* a, const Scalar* b, int size)$/;"	f
max	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_packetmath.cpp	/^template<> const complex<float>& max(const complex<float>& a, const complex<float>& b)$/;"	f	namespace:std
min	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_packetmath.cpp	/^template<> const complex<float>& min(const complex<float>& a, const complex<float>& b)$/;"	f	namespace:std
packetmath	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_packetmath.cpp	/^template<typename Scalar> void packetmath()$/;"	f
std	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_packetmath.cpp	/^namespace std {$/;"	n	file:
test_eigen2_packetmath	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_packetmath.cpp	/^void test_eigen2_packetmath()$/;"	f
parametrizedline	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_parametrizedline.cpp	/^template<typename LineType> void parametrizedline(const LineType& _line)$/;"	f
test_eigen2_parametrizedline	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_parametrizedline.cpp	/^void test_eigen2_parametrizedline()$/;"	f
EIGEN_DEBUG_VAR	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_prec_inverse_4x4.cpp	37;"	d	file:
epsilon	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_prec_inverse_4x4.cpp	/^template<typename T> inline typename NumTraits<T>::Real epsilon()$/;"	f
inverse_general_4x4	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_prec_inverse_4x4.cpp	/^template<typename MatrixType> void inverse_general_4x4(int repeat)$/;"	f
inverse_permutation_4x4	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_prec_inverse_4x4.cpp	/^template<typename MatrixType> void inverse_permutation_4x4()$/;"	f
test_eigen2_prec_inverse_4x4	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_prec_inverse_4x4.cpp	/^void test_eigen2_prec_inverse_4x4()$/;"	f
type_name	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_prec_inverse_4x4.cpp	/^template<> std::string type_name<double>() { return "double"; }$/;"	f
type_name	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_prec_inverse_4x4.cpp	/^template<> std::string type_name<float>() { return "float"; }$/;"	f
type_name	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_prec_inverse_4x4.cpp	/^template<> std::string type_name<int>() { return "int"; }$/;"	f
type_name	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_prec_inverse_4x4.cpp	/^template<> std::string type_name<std::complex<double> >() { return "complex<double>"; }$/;"	f
type_name	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_prec_inverse_4x4.cpp	/^template<> std::string type_name<std::complex<float> >() { return "complex<float>"; }$/;"	f
type_name	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_prec_inverse_4x4.cpp	/^template<> std::string type_name<std::complex<int> >() { return "complex<int>"; }$/;"	f
type_name	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_prec_inverse_4x4.cpp	/^template<typename T> std::string type_name() { return "other"; }$/;"	f
test_eigen2_product_large	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_product_large.cpp	/^void test_eigen2_product_large()$/;"	f
EIGEN_NO_STATIC_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_product_small.cpp	25;"	d	file:
test_eigen2_product_small	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_product_small.cpp	/^void test_eigen2_product_small()$/;"	f
qr	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_qr.cpp	/^template<typename MatrixType> void qr(const MatrixType& m)$/;"	f
test_eigen2_qr	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_qr.cpp	/^void test_eigen2_qr()$/;"	f
EIGEN_WORK_AROUND_QT_BUG_CALLING_WRONG_OPERATOR_NEW_FIXED_IN_QT_4_5	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_qtvector.cpp	26;"	d	file:
check_qtvector_matrix	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_qtvector.cpp	/^void check_qtvector_matrix(const MatrixType& m)$/;"	f
check_qtvector_quaternion	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_qtvector.cpp	/^void check_qtvector_quaternion(const QuaternionType&)$/;"	f
check_qtvector_transform	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_qtvector.cpp	/^void check_qtvector_transform(const TransformType&)$/;"	f
test_eigen2_qtvector	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_qtvector.cpp	/^void test_eigen2_qtvector()$/;"	f
check_fitHyperplane	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_regression.cpp	/^void check_fitHyperplane(int numPoints,$/;"	f
check_linearRegression	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_regression.cpp	/^void check_linearRegression(int numPoints,$/;"	f
makeNoisyCohyperplanarPoints	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_regression.cpp	/^void makeNoisyCohyperplanarPoints(int numPoints,$/;"	f
test_eigen2_regression	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_regression.cpp	/^void test_eigen2_regression()$/;"	f
test_eigen2_sizeof	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_sizeof.cpp	/^void test_eigen2_sizeof()$/;"	f
verifySizeOf	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_sizeof.cpp	/^template<typename MatrixType> void verifySizeOf(const MatrixType&)$/;"	f
smallVectors	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_smallvectors.cpp	/^template<typename Scalar> void smallVectors()$/;"	f
test_eigen2_smallvectors	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_smallvectors.cpp	/^void test_eigen2_smallvectors()$/;"	f
sparse_basic	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_sparse_basic.cpp	/^template<typename SparseMatrixType> void sparse_basic(const SparseMatrixType& ref)$/;"	f
test_eigen2_sparse_basic	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_sparse_basic.cpp	/^void test_eigen2_sparse_basic()$/;"	f
test_random_setter	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_sparse_basic.cpp	/^bool test_random_setter(DynamicSparseMatrix<T>& sm, const DenseType& ref, const std::vector<Vector2i>& nonzeroCoords)$/;"	f
test_random_setter	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_sparse_basic.cpp	/^bool test_random_setter(SparseMatrix<Scalar,Options>& sm, const DenseType& ref, const std::vector<Vector2i>& nonzeroCoords)$/;"	f
sparse_product	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_sparse_product.cpp	/^template<typename SparseMatrixType> void sparse_product(const SparseMatrixType& ref)$/;"	f
test_eigen2_sparse_product	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_sparse_product.cpp	/^void test_eigen2_sparse_product()$/;"	f
initSPD	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_sparse_solvers.cpp	/^initSPD(double density,$/;"	f
sparse_solvers	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_sparse_solvers.cpp	/^template<typename Scalar> void sparse_solvers(int rows, int cols)$/;"	f
test_eigen2_sparse_solvers	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_sparse_solvers.cpp	/^void test_eigen2_sparse_solvers()$/;"	f
sparse_vector	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_sparse_vector.cpp	/^template<typename Scalar> void sparse_vector(int rows, int cols)$/;"	f
test_eigen2_sparse_vector	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_sparse_vector.cpp	/^void test_eigen2_sparse_vector()$/;"	f
check_stdvector_matrix	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_stdvector.cpp	/^void check_stdvector_matrix(const MatrixType& m)$/;"	f
check_stdvector_quaternion	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_stdvector.cpp	/^void check_stdvector_quaternion(const QuaternionType&)$/;"	f
check_stdvector_transform	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_stdvector.cpp	/^void check_stdvector_transform(const TransformType&)$/;"	f
test_eigen2_stdvector	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_stdvector.cpp	/^void test_eigen2_stdvector()$/;"	f
CheckMinor	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_submatrices.cpp	/^    CheckMinor(MatrixType& m1, int r1, int c1)$/;"	f	struct:CheckMinor
CheckMinor	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_submatrices.cpp	/^    CheckMinor(MatrixType&, int, int) {}$/;"	f	struct:CheckMinor
CheckMinor	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_submatrices.cpp	/^template<typename Scalar, int _Rows, int _Cols> struct CheckMinor$/;"	s	file:
CheckMinor	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_submatrices.cpp	/^template<typename Scalar> struct CheckMinor<Scalar,1,1>$/;"	s	file:
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_submatrices.cpp	/^    typedef Matrix<Scalar, 1, 1> MatrixType;$/;"	t	struct:CheckMinor	file:
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_submatrices.cpp	/^    typedef Matrix<Scalar, _Rows, _Cols> MatrixType;$/;"	t	struct:CheckMinor	file:
submatrices	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_submatrices.cpp	/^template<typename MatrixType> void submatrices(const MatrixType& m)$/;"	f
test_eigen2_submatrices	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_submatrices.cpp	/^void test_eigen2_submatrices()$/;"	f
matrixSum	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_sum.cpp	/^template<typename MatrixType> void matrixSum(const MatrixType& m)$/;"	f
test_eigen2_sum	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_sum.cpp	/^void test_eigen2_sum()$/;"	f
vectorSum	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_sum.cpp	/^template<typename VectorType> void vectorSum(const VectorType& w)$/;"	f
svd	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_svd.cpp	/^template<typename MatrixType> void svd(const MatrixType& m)$/;"	f
test_eigen2_svd	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_svd.cpp	/^void test_eigen2_svd()$/;"	f
EIGEN_NO_STATIC_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_swap.cpp	25;"	d	file:
other_matrix_type	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_swap.cpp	/^struct other_matrix_type$/;"	s	file:
other_matrix_type	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_swap.cpp	/^struct other_matrix_type<Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> >$/;"	s	file:
swap	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_swap.cpp	/^template<typename MatrixType> void swap(const MatrixType& m)$/;"	f
test_eigen2_swap	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_swap.cpp	/^void test_eigen2_swap()$/;"	f
type	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_swap.cpp	/^  typedef Matrix<_Scalar, _Rows, _Cols, _Options^RowMajor, _MaxRows, _MaxCols> type;$/;"	t	struct:other_matrix_type	file:
type	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_swap.cpp	/^  typedef int type;$/;"	t	struct:other_matrix_type	file:
selfadjoint	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_triangular.cpp	/^void selfadjoint()$/;"	f
test_eigen2_triangular	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_triangular.cpp	/^void test_eigen2_triangular()$/;"	f
triangular	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_triangular.cpp	/^template<typename MatrixType> void triangular(const MatrixType& m)$/;"	f
Bad4	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^struct Bad4$/;"	s	file:
Bad5	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^struct Bad5$/;"	s	file:
Bad6	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^struct Bad6$/;"	s	file:
Depends	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^template<bool Align> struct Depends$/;"	s	file:
Good1	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^  Good1() : m(20,20) {}$/;"	f	struct:Good1
Good1	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^struct Good1$/;"	s	file:
Good2	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^struct Good2$/;"	s	file:
Good3	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^struct Good3$/;"	s	file:
Good7	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^struct Good7$/;"	s	file:
Good8	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^struct Good8$/;"	s	file:
Good9	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^struct Good9$/;"	s	file:
check_unalignedassert_bad	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^void check_unalignedassert_bad()$/;"	f
check_unalignedassert_good	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^void check_unalignedassert_good()$/;"	f
f	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^  float f; \/\/ make the struct have sizeof%16!=0 to make it a little more tricky when we allow an array of 2 such objects$/;"	m	struct:Good7	file:
f	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^  float f; \/\/ try the f at first -- the EIGEN_ALIGN_128 attribute of m should make that still work$/;"	m	struct:Good8	file:
f	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^  float f;$/;"	m	struct:Depends	file:
f	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^  float f;$/;"	m	struct:Good9	file:
m	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^  Matrix3d m; \/\/ good: m's size isn't a multiple of 16 bytes, so m doesn't have to be aligned$/;"	m	struct:Good2	file:
m	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^  Matrix4f m;$/;"	m	struct:Good8	file:
m	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^  Matrix<double, 3, 4> m; \/\/ bad: same reason$/;"	m	struct:Bad6	file:
m	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^  Matrix<float, 2, 6> m; \/\/ bad: same reason$/;"	m	struct:Bad5	file:
m	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^  Matrix<float,2,2,DontAlign> m; \/\/ good: no alignment requested$/;"	m	struct:Good9	file:
m	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^  MatrixXd m; \/\/ good: m will allocate its own array, taking care of alignment.$/;"	m	struct:Good1	file:
m	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^  Vector2d m; \/\/ bad: sizeof(m)%16==0 so alignment is required$/;"	m	struct:Bad4	file:
m	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^  Vector2d m;$/;"	m	struct:Depends	file:
m	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^  Vector2d m;$/;"	m	struct:Good7	file:
m	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^  Vector2f m; \/\/ good: same reason$/;"	m	struct:Good3	file:
test_eigen2_unalignedassert	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^void test_eigen2_unalignedassert()$/;"	f
unalignedassert	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_unalignedassert.cpp	/^void unalignedassert()$/;"	f
matrixVisitor	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_visitor.cpp	/^template<typename MatrixType> void matrixVisitor(const MatrixType& p)$/;"	f
test_eigen2_visitor	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_visitor.cpp	/^void test_eigen2_visitor()$/;"	f
vectorVisitor	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/eigen2_visitor.cpp	/^template<typename VectorType> void vectorVisitor(const VectorType& w)$/;"	f
EIGEN_GSL_HELPER	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	26;"	d
Eigen	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^namespace Eigen {$/;"	n
GslTraits	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^template<typename Scalar, bool IsComplex = NumTraits<Scalar>::IsComplex> struct GslTraits$/;"	s	namespace:Eigen
GslTraits	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^template<typename Scalar> struct GslTraits<Scalar,true>$/;"	s	namespace:Eigen
Matrix	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  typedef gsl_matrix* Matrix;$/;"	t	struct:Eigen::GslTraits
Matrix	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  typedef gsl_matrix_complex* Matrix;$/;"	t	struct:Eigen::GslTraits
Vector	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  typedef gsl_vector* Vector;$/;"	t	struct:Eigen::GslTraits
Vector	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  typedef gsl_vector_complex* Vector;$/;"	t	struct:Eigen::GslTraits
cholesky	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  static void cholesky(Matrix& m) { gsl_linalg_cholesky_decomp(m); }$/;"	f	struct:Eigen::GslTraits
cholesky	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  static void cholesky(Matrix& m) { gsl_linalg_complex_cholesky_decomp(m); }$/;"	f	struct:Eigen::GslTraits
cholesky_solve	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  static void cholesky_solve(const Matrix& m, const Vector& b, Vector& x) { gsl_linalg_cholesky_solve(m,b,x); }$/;"	f	struct:Eigen::GslTraits
cholesky_solve	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  static void cholesky_solve(const Matrix& m, const Vector& b, Vector& x) { gsl_linalg_complex_cholesky_solve(m,b,x); }$/;"	f	struct:Eigen::GslTraits
convert	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^void convert(const MatrixType& m, gsl_matrix* &res)$/;"	f	namespace:Eigen
convert	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^void convert(const MatrixType& m, gsl_matrix_complex* &res)$/;"	f	namespace:Eigen
convert	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^void convert(const VectorType& m, gsl_vector* &res)$/;"	f	namespace:Eigen
convert	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^void convert(const VectorType& m, gsl_vector_complex* &res)$/;"	f	namespace:Eigen
convert	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^void convert(const gsl_matrix* m, MatrixType& res)$/;"	f	namespace:Eigen
convert	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^void convert(const gsl_matrix_complex* m, MatrixType& res)$/;"	f	namespace:Eigen
convert	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^void convert(const gsl_vector* m, VectorType& res)$/;"	f	namespace:Eigen
convert	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^void convert(const gsl_vector_complex* m, VectorType& res)$/;"	f	namespace:Eigen
createMatrix	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  static Matrix createMatrix(int rows, int cols) { return gsl_matrix_alloc(rows,cols); }$/;"	f	struct:Eigen::GslTraits
createMatrix	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  static Matrix createMatrix(int rows, int cols) { return gsl_matrix_complex_alloc(rows,cols); }$/;"	f	struct:Eigen::GslTraits
createVector	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  static Vector createVector(int size) { return gsl_vector_alloc(size); }$/;"	f	struct:Eigen::GslTraits
createVector	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  static Vector createVector(int size) { return gsl_vector_complex_alloc(size); }$/;"	f	struct:Eigen::GslTraits
eigen_symm	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  static void eigen_symm(const Matrix& m, Vector& eval, Matrix& evec)$/;"	f	struct:Eigen::GslTraits
eigen_symm	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  static void eigen_symm(const Matrix& m, gsl_vector* &eval, Matrix& evec)$/;"	f	struct:Eigen::GslTraits
eigen_symm_gen	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  static void eigen_symm_gen(const Matrix& m, const Matrix& _b, Vector& eval, Matrix& evec)$/;"	f	struct:Eigen::GslTraits
eigen_symm_gen	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  static void eigen_symm_gen(const Matrix& m, const Matrix& _b, gsl_vector* &eval, Matrix& evec)$/;"	f	struct:Eigen::GslTraits
free	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  static void free(Matrix& m) { gsl_matrix_complex_free(m); m=0; }$/;"	f	struct:Eigen::GslTraits
free	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  static void free(Matrix& m) { gsl_matrix_free(m); m=0; }$/;"	f	struct:Eigen::GslTraits
free	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  static void free(Vector& m) { gsl_vector_complex_free(m); m=0; }$/;"	f	struct:Eigen::GslTraits
free	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  static void free(Vector& m) { gsl_vector_free(m); m=0; }$/;"	f	struct:Eigen::GslTraits
prod	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  static void prod(const Matrix& m, const Vector& v, Vector& x) { gsl_blas_dgemv(CblasNoTrans,1,m,v,0,x); }$/;"	f	struct:Eigen::GslTraits
prod	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/gsl_helper.h	/^  static void prod(const Matrix& m, const Vector& v, Vector& x)$/;"	f	struct:Eigen::GslTraits
CALL_SUBTEST	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	158;"	d
CALL_SUBTEST_1	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	247;"	d
CALL_SUBTEST_1	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	249;"	d
CALL_SUBTEST_10	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	301;"	d
CALL_SUBTEST_10	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	303;"	d
CALL_SUBTEST_11	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	307;"	d
CALL_SUBTEST_11	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	309;"	d
CALL_SUBTEST_12	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	313;"	d
CALL_SUBTEST_12	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	315;"	d
CALL_SUBTEST_13	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	319;"	d
CALL_SUBTEST_13	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	321;"	d
CALL_SUBTEST_14	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	325;"	d
CALL_SUBTEST_14	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	327;"	d
CALL_SUBTEST_15	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	331;"	d
CALL_SUBTEST_15	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	333;"	d
CALL_SUBTEST_16	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	337;"	d
CALL_SUBTEST_16	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	339;"	d
CALL_SUBTEST_2	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	253;"	d
CALL_SUBTEST_2	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	255;"	d
CALL_SUBTEST_3	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	259;"	d
CALL_SUBTEST_3	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	261;"	d
CALL_SUBTEST_4	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	265;"	d
CALL_SUBTEST_4	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	267;"	d
CALL_SUBTEST_5	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	271;"	d
CALL_SUBTEST_5	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	273;"	d
CALL_SUBTEST_6	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	277;"	d
CALL_SUBTEST_6	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	279;"	d
CALL_SUBTEST_7	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	283;"	d
CALL_SUBTEST_7	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	285;"	d
CALL_SUBTEST_8	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	289;"	d
CALL_SUBTEST_8	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	291;"	d
CALL_SUBTEST_9	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	295;"	d
CALL_SUBTEST_9	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	297;"	d
DEFAULT_REPEAT	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	36;"	d
EIGEN_INTERNAL_DEBUGGING	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	140;"	d
EIGEN_NICE_RANDOM	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	141;"	d
EIGEN_USE_CUSTOM_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	131;"	d
EI_PP_CAT	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	48;"	d
EI_PP_CAT2	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	47;"	d
EI_PP_MAKE_STRING	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	45;"	d
EI_PP_MAKE_STRING2	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	44;"	d
Eigen	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^    namespace Eigen$/;"	n
Eigen	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^  namespace Eigen$/;"	n
Eigen	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^namespace Eigen {$/;"	n
Eigen	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^namespace Eigen$/;"	n
GetDifferentType	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^template<> struct GetDifferentType<double> { typedef float type; };$/;"	s
GetDifferentType	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^template<> struct GetDifferentType<float> { typedef double type; };$/;"	s
GetDifferentType	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^template<typename T> struct GetDifferentType<std::complex<T> >$/;"	s
VERIFY	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	145;"	d
VERIFY_IS_APPROX	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	151;"	d
VERIFY_IS_APPROX_OR_LESS_THAN	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	155;"	d
VERIFY_IS_MUCH_SMALLER_THAN	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	153;"	d
VERIFY_IS_NOT_APPROX	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	152;"	d
VERIFY_IS_NOT_APPROX_OR_LESS_THAN	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	156;"	d
VERIFY_IS_NOT_MUCH_SMALLER_THAN	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	154;"	d
VERIFY_RAISES_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	123;"	d
VERIFY_RAISES_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	135;"	d
VERIFY_RAISES_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	94;"	d
ei_push_assert	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^      static bool ei_push_assert = false;$/;"	v
eigen_assert	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	113;"	d
eigen_assert	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	116;"	d
eigen_assert	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	83;"	d
eigen_assert_exception	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^      eigen_assert_exception(void) {}$/;"	f	struct:Eigen::eigen_assert_exception
eigen_assert_exception	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^    struct eigen_assert_exception$/;"	s	namespace:Eigen
eigen_assert_list	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^      static std::vector<std::string> eigen_assert_list;$/;"	v
g_repeat	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^  static int g_repeat;$/;"	v
g_test_stack	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^  static std::vector<std::string> g_test_stack;$/;"	v
main	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^int main(int argc, char *argv[])$/;"	f
no_more_assert	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^    static bool no_more_assert = false;$/;"	v
should_raise_an_assert	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^    static const bool should_raise_an_assert = false;$/;"	v
test_ei_isApprox	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^inline bool test_ei_isApprox(const Type1& a, const Type2& b)$/;"	f	namespace:Eigen
test_ei_isApprox	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^inline bool test_ei_isApprox(const double& a, const double& b)$/;"	f	namespace:Eigen
test_ei_isApprox	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^inline bool test_ei_isApprox(const float& a, const float& b)$/;"	f	namespace:Eigen
test_ei_isApprox	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^inline bool test_ei_isApprox(const int& a, const int& b)$/;"	f	namespace:Eigen
test_ei_isApprox	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^inline bool test_ei_isApprox(const long double& a, const long double& b)$/;"	f	namespace:Eigen
test_ei_isApprox	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^inline bool test_ei_isApprox(const std::complex<double>& a, const std::complex<double>& b)$/;"	f	namespace:Eigen
test_ei_isApprox	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^inline bool test_ei_isApprox(const std::complex<float>& a, const std::complex<float>& b)$/;"	f	namespace:Eigen
test_ei_isApproxOrLessThan	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^inline bool test_ei_isApproxOrLessThan(const double& a, const double& b)$/;"	f	namespace:Eigen
test_ei_isApproxOrLessThan	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^inline bool test_ei_isApproxOrLessThan(const float& a, const float& b)$/;"	f	namespace:Eigen
test_ei_isApproxOrLessThan	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^inline bool test_ei_isApproxOrLessThan(const int& a, const int& b)$/;"	f	namespace:Eigen
test_ei_isApproxOrLessThan	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^inline bool test_ei_isApproxOrLessThan(const long double& a, const long double& b)$/;"	f	namespace:Eigen
test_ei_isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^inline bool test_ei_isMuchSmallerThan(const MatrixBase<Derived1>& m1,$/;"	f	namespace:Eigen
test_ei_isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^inline bool test_ei_isMuchSmallerThan(const MatrixBase<Derived>& m,$/;"	f	namespace:Eigen
test_ei_isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^inline bool test_ei_isMuchSmallerThan(const double& a, const double& b)$/;"	f	namespace:Eigen
test_ei_isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^inline bool test_ei_isMuchSmallerThan(const float& a, const float& b)$/;"	f	namespace:Eigen
test_ei_isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^inline bool test_ei_isMuchSmallerThan(const int& a, const int& b)$/;"	f	namespace:Eigen
test_ei_isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^inline bool test_ei_isMuchSmallerThan(const long double& a, const long double& b)$/;"	f	namespace:Eigen
test_ei_isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^inline bool test_ei_isMuchSmallerThan(const std::complex<double>& a, const std::complex<double>& b)$/;"	f	namespace:Eigen
test_ei_isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^inline bool test_ei_isMuchSmallerThan(const std::complex<float>& a, const std::complex<float>& b)$/;"	f	namespace:Eigen
test_precision	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^template<> inline double test_precision<double>() { return 1e-6; }$/;"	f	namespace:Eigen
test_precision	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^template<> inline double test_precision<std::complex<double> >() { return test_precision<double>(); }$/;"	f	namespace:Eigen
test_precision	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^template<> inline float test_precision<float>() { return 1e-3f; }$/;"	f	namespace:Eigen
test_precision	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^template<> inline float test_precision<std::complex<float> >() { return test_precision<float>(); }$/;"	f	namespace:Eigen
test_precision	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^template<> inline int test_precision<int>() { return 0; }$/;"	f	namespace:Eigen
test_precision	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^template<> inline long double test_precision<long double>() { return 1e-6; }$/;"	f	namespace:Eigen
type	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^template<> struct GetDifferentType<double> { typedef float type; };$/;"	t	struct:GetDifferentType
type	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^template<> struct GetDifferentType<float> { typedef double type; };$/;"	t	struct:GetDifferentType
type	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^{ typedef std::complex<typename GetDifferentType<T>::type> type; };$/;"	t	struct:GetDifferentType
~eigen_assert_exception	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/main.h	/^      ~eigen_assert_exception() { Eigen::no_more_assert = false; }$/;"	f	struct:Eigen::eigen_assert_exception
areNotApprox	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/product.h	/^bool areNotApprox(const MatrixBase<Derived1>& m1, const MatrixBase<Derived2>& m2, typename Derived1::RealScalar epsilon = precision<typename Derived1::RealScalar>())$/;"	f
product	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/product.h	/^template<typename MatrixType> void product(const MatrixType& m)$/;"	f
EIGEN_UNORDERED_MAP_SUPPORT	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/sparse.h	31;"	d
ForceNonZeroDiag	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/sparse.h	/^  ForceNonZeroDiag = 1,$/;"	e
ForceRealDiag	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/sparse.h	/^  ForceRealDiag = 8$/;"	e
MakeLowerTriangular	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/sparse.h	/^  MakeLowerTriangular = 2,$/;"	e
MakeUpperTriangular	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/sparse.h	/^  MakeUpperTriangular = 4,$/;"	e
initSparse	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/sparse.h	/^initSparse(double density,$/;"	f
std	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2/sparse.h	/^namespace std {$/;"	n
EIGEN2_SUPPORT	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2support.cpp	25;"	d	file:
eigen2support	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2support.cpp	/^template<typename MatrixType> void eigen2support(const MatrixType& m)$/;"	f
test_eigen2support	tags/before-github-sync/EXTERNAL/eigen3/test/eigen2support.cpp	/^void test_eigen2support()$/;"	f
eigensolver	tags/before-github-sync/EXTERNAL/eigen3/test/eigensolver_complex.cpp	/^template<typename MatrixType> void eigensolver(const MatrixType& m)$/;"	f
eigensolver_verify_assert	tags/before-github-sync/EXTERNAL/eigen3/test/eigensolver_complex.cpp	/^template<typename MatrixType> void eigensolver_verify_assert(const MatrixType& m)$/;"	f
test_eigensolver_complex	tags/before-github-sync/EXTERNAL/eigen3/test/eigensolver_complex.cpp	/^void test_eigensolver_complex()$/;"	f
verify_is_approx_upto_permutation	tags/before-github-sync/EXTERNAL/eigen3/test/eigensolver_complex.cpp	/^void verify_is_approx_upto_permutation(const VectorType& vec1, const VectorType& vec2)$/;"	f
eigensolver	tags/before-github-sync/EXTERNAL/eigen3/test/eigensolver_generic.cpp	/^template<typename MatrixType> void eigensolver(const MatrixType& m)$/;"	f
eigensolver_verify_assert	tags/before-github-sync/EXTERNAL/eigen3/test/eigensolver_generic.cpp	/^template<typename MatrixType> void eigensolver_verify_assert(const MatrixType& m)$/;"	f
test_eigensolver_generic	tags/before-github-sync/EXTERNAL/eigen3/test/eigensolver_generic.cpp	/^void test_eigensolver_generic()$/;"	f
selfadjointeigensolver	tags/before-github-sync/EXTERNAL/eigen3/test/eigensolver_selfadjoint.cpp	/^template<typename MatrixType> void selfadjointeigensolver(const MatrixType& m)$/;"	f
test_eigensolver_selfadjoint	tags/before-github-sync/EXTERNAL/eigen3/test/eigensolver_selfadjoint.cpp	/^void test_eigensolver_selfadjoint()$/;"	f
CHECK_MEMLEAK	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	91;"	d	file:
EIGEN_STACK_ALLOCATION_LIMIT	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	30;"	d	file:
ScalarWithExceptions	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^    ScalarWithExceptions() { init(); }$/;"	f	class:ScalarWithExceptions
ScalarWithExceptions	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^    ScalarWithExceptions(const ScalarWithExceptions& other) { init(); *v = *(other.v); }$/;"	f	class:ScalarWithExceptions
ScalarWithExceptions	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^    ScalarWithExceptions(const float& _v) { init(); *v = _v; }$/;"	f	class:ScalarWithExceptions
ScalarWithExceptions	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^class ScalarWithExceptions$/;"	c	file:
countdown	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^    static int countdown;$/;"	m	class:ScalarWithExceptions	file:
countdown	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^int ScalarWithExceptions::countdown = 0;$/;"	m	class:ScalarWithExceptions	file:
init	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^    void init() {$/;"	f	class:ScalarWithExceptions
instances	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^    static int instances;$/;"	m	class:ScalarWithExceptions	file:
instances	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^int ScalarWithExceptions::instances = 0;$/;"	m	class:ScalarWithExceptions	file:
memoryleak	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^void memoryleak()$/;"	f
my_exception	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^  my_exception() {}$/;"	f	struct:my_exception
my_exception	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^struct my_exception$/;"	s	file:
operator !=	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^    bool operator!=(const ScalarWithExceptions& other) const$/;"	f	class:ScalarWithExceptions
operator *	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^    ScalarWithExceptions operator*(const ScalarWithExceptions& other) const$/;"	f	class:ScalarWithExceptions
operator +	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^    ScalarWithExceptions operator+(const ScalarWithExceptions& other) const$/;"	f	class:ScalarWithExceptions
operator +=	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^    ScalarWithExceptions& operator+=(const ScalarWithExceptions& other)$/;"	f	class:ScalarWithExceptions
operator -	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^    ScalarWithExceptions operator-(const ScalarWithExceptions& other) const$/;"	f	class:ScalarWithExceptions
operator -=	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^    ScalarWithExceptions& operator-=(const ScalarWithExceptions& other)$/;"	f	class:ScalarWithExceptions
operator =	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^    ScalarWithExceptions& operator=(const ScalarWithExceptions& other)$/;"	f	class:ScalarWithExceptions
operator ==	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^    bool operator==(const ScalarWithExceptions& other) const$/;"	f	class:ScalarWithExceptions
test_exceptions	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^void test_exceptions()$/;"	f
v	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^    float* v;$/;"	m	class:ScalarWithExceptions	file:
~ScalarWithExceptions	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^    ~ScalarWithExceptions() {$/;"	f	class:ScalarWithExceptions
~my_exception	tags/before-github-sync/EXTERNAL/eigen3/test/exceptions.cpp	/^  ~my_exception() {}$/;"	f	struct:my_exception
some_non_vectorizable_type	tags/before-github-sync/EXTERNAL/eigen3/test/first_aligned.cpp	/^struct some_non_vectorizable_type { float x; };$/;"	s	file:
test_first_aligned	tags/before-github-sync/EXTERNAL/eigen3/test/first_aligned.cpp	/^void test_first_aligned()$/;"	f
test_first_aligned_helper	tags/before-github-sync/EXTERNAL/eigen3/test/first_aligned.cpp	/^void test_first_aligned_helper(Scalar *array, int size)$/;"	f
test_none_aligned_helper	tags/before-github-sync/EXTERNAL/eigen3/test/first_aligned.cpp	/^void test_none_aligned_helper(Scalar *array, int size)$/;"	f
x	tags/before-github-sync/EXTERNAL/eigen3/test/first_aligned.cpp	/^struct some_non_vectorizable_type { float x; };$/;"	m	struct:some_non_vectorizable_type	file:
alignedbox	tags/before-github-sync/EXTERNAL/eigen3/test/geo_alignedbox.cpp	/^template<typename BoxType> void alignedbox(const BoxType& _box)$/;"	f
alignedboxCastTests	tags/before-github-sync/EXTERNAL/eigen3/test/geo_alignedbox.cpp	/^void alignedboxCastTests(const BoxType& _box)$/;"	f
specificTest1	tags/before-github-sync/EXTERNAL/eigen3/test/geo_alignedbox.cpp	/^void specificTest1()$/;"	f
specificTest2	tags/before-github-sync/EXTERNAL/eigen3/test/geo_alignedbox.cpp	/^void specificTest2()$/;"	f
test_geo_alignedbox	tags/before-github-sync/EXTERNAL/eigen3/test/geo_alignedbox.cpp	/^void test_geo_alignedbox()$/;"	f
VERIFY_EULER	tags/before-github-sync/EXTERNAL/eigen3/test/geo_eulerangles.cpp	43;"	d	file:
eulerangles	tags/before-github-sync/EXTERNAL/eigen3/test/geo_eulerangles.cpp	/^template<typename Scalar> void eulerangles(void)$/;"	f
test_geo_eulerangles	tags/before-github-sync/EXTERNAL/eigen3/test/geo_eulerangles.cpp	/^void test_geo_eulerangles()$/;"	f
homogeneous	tags/before-github-sync/EXTERNAL/eigen3/test/geo_homogeneous.cpp	/^template<typename Scalar,int Size> void homogeneous(void)$/;"	f
test_geo_homogeneous	tags/before-github-sync/EXTERNAL/eigen3/test/geo_homogeneous.cpp	/^void test_geo_homogeneous()$/;"	f
hyperplane	tags/before-github-sync/EXTERNAL/eigen3/test/geo_hyperplane.cpp	/^template<typename HyperplaneType> void hyperplane(const HyperplaneType& _plane)$/;"	f
hyperplane_alignment	tags/before-github-sync/EXTERNAL/eigen3/test/geo_hyperplane.cpp	/^template<typename Scalar> void hyperplane_alignment()$/;"	f
lines	tags/before-github-sync/EXTERNAL/eigen3/test/geo_hyperplane.cpp	/^template<typename Scalar> void lines()$/;"	f
test_geo_hyperplane	tags/before-github-sync/EXTERNAL/eigen3/test/geo_hyperplane.cpp	/^void test_geo_hyperplane()$/;"	f
orthomethods	tags/before-github-sync/EXTERNAL/eigen3/test/geo_orthomethods.cpp	/^template<typename Scalar, int Size> void orthomethods(int size=Size)$/;"	f
orthomethods_3	tags/before-github-sync/EXTERNAL/eigen3/test/geo_orthomethods.cpp	/^template<typename Scalar> void orthomethods_3()$/;"	f
test_geo_orthomethods	tags/before-github-sync/EXTERNAL/eigen3/test/geo_orthomethods.cpp	/^void test_geo_orthomethods()$/;"	f
parametrizedline	tags/before-github-sync/EXTERNAL/eigen3/test/geo_parametrizedline.cpp	/^template<typename LineType> void parametrizedline(const LineType& _line)$/;"	f
parametrizedline_alignment	tags/before-github-sync/EXTERNAL/eigen3/test/geo_parametrizedline.cpp	/^template<typename Scalar> void parametrizedline_alignment()$/;"	f
test_geo_parametrizedline	tags/before-github-sync/EXTERNAL/eigen3/test/geo_parametrizedline.cpp	/^void test_geo_parametrizedline()$/;"	f
check_const_correctness	tags/before-github-sync/EXTERNAL/eigen3/test/geo_quaternion.cpp	/^template<typename PlainObjectType> void check_const_correctness(const PlainObjectType&)$/;"	f
mapQuaternion	tags/before-github-sync/EXTERNAL/eigen3/test/geo_quaternion.cpp	/^template<typename Scalar> void mapQuaternion(void){$/;"	f
quaternion	tags/before-github-sync/EXTERNAL/eigen3/test/geo_quaternion.cpp	/^template<typename Scalar, int Options> void quaternion(void)$/;"	f
quaternionAlignment	tags/before-github-sync/EXTERNAL/eigen3/test/geo_quaternion.cpp	/^template<typename Scalar> void quaternionAlignment(void){$/;"	f
test_geo_quaternion	tags/before-github-sync/EXTERNAL/eigen3/test/geo_quaternion.cpp	/^void test_geo_quaternion()$/;"	f
non_projective_only	tags/before-github-sync/EXTERNAL/eigen3/test/geo_transformations.cpp	/^template<typename Scalar, int Mode, int Options> void non_projective_only()$/;"	f
test_geo_transformations	tags/before-github-sync/EXTERNAL/eigen3/test/geo_transformations.cpp	/^void test_geo_transformations()$/;"	f
transform_alignment	tags/before-github-sync/EXTERNAL/eigen3/test/geo_transformations.cpp	/^template<typename Scalar> void transform_alignment()$/;"	f
transformations	tags/before-github-sync/EXTERNAL/eigen3/test/geo_transformations.cpp	/^template<typename Scalar, int Mode, int Options> void transformations()$/;"	f
EIGEN_GSL_HELPER	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	26;"	d
Eigen	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^namespace Eigen {$/;"	n
GslTraits	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^template<typename Scalar, bool IsComplex = NumTraits<Scalar>::IsComplex> struct GslTraits$/;"	s	namespace:Eigen
GslTraits	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^template<typename Scalar> struct GslTraits<Scalar,true>$/;"	s	namespace:Eigen
Matrix	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  typedef gsl_matrix* Matrix;$/;"	t	struct:Eigen::GslTraits
Matrix	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  typedef gsl_matrix_complex* Matrix;$/;"	t	struct:Eigen::GslTraits
Vector	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  typedef gsl_vector* Vector;$/;"	t	struct:Eigen::GslTraits
Vector	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  typedef gsl_vector_complex* Vector;$/;"	t	struct:Eigen::GslTraits
cholesky	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  static void cholesky(Matrix& m) { gsl_linalg_cholesky_decomp(m); }$/;"	f	struct:Eigen::GslTraits
cholesky	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  static void cholesky(Matrix& m) { gsl_linalg_complex_cholesky_decomp(m); }$/;"	f	struct:Eigen::GslTraits
cholesky_solve	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  static void cholesky_solve(const Matrix& m, const Vector& b, Vector& x) { gsl_linalg_cholesky_solve(m,b,x); }$/;"	f	struct:Eigen::GslTraits
cholesky_solve	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  static void cholesky_solve(const Matrix& m, const Vector& b, Vector& x) { gsl_linalg_complex_cholesky_solve(m,b,x); }$/;"	f	struct:Eigen::GslTraits
convert	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^void convert(const MatrixType& m, gsl_matrix* &res)$/;"	f	namespace:Eigen
convert	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^void convert(const MatrixType& m, gsl_matrix_complex* &res)$/;"	f	namespace:Eigen
convert	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^void convert(const VectorType& m, gsl_vector* &res)$/;"	f	namespace:Eigen
convert	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^void convert(const VectorType& m, gsl_vector_complex* &res)$/;"	f	namespace:Eigen
convert	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^void convert(const gsl_matrix* m, MatrixType& res)$/;"	f	namespace:Eigen
convert	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^void convert(const gsl_matrix_complex* m, MatrixType& res)$/;"	f	namespace:Eigen
convert	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^void convert(const gsl_vector* m, VectorType& res)$/;"	f	namespace:Eigen
convert	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^void convert(const gsl_vector_complex* m, VectorType& res)$/;"	f	namespace:Eigen
createMatrix	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  static Matrix createMatrix(int rows, int cols) { return gsl_matrix_alloc(rows,cols); }$/;"	f	struct:Eigen::GslTraits
createMatrix	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  static Matrix createMatrix(int rows, int cols) { return gsl_matrix_complex_alloc(rows,cols); }$/;"	f	struct:Eigen::GslTraits
createVector	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  static Vector createVector(int size) { return gsl_vector_alloc(size); }$/;"	f	struct:Eigen::GslTraits
createVector	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  static Vector createVector(int size) { return gsl_vector_complex_alloc(size); }$/;"	f	struct:Eigen::GslTraits
eigen_poly_solve	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  static void eigen_poly_solve(const EIGEN_VECTOR& poly, EIGEN_ROOTS& roots )$/;"	f	struct:Eigen::GslTraits
eigen_symm	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  static void eigen_symm(const Matrix& m, Vector& eval, Matrix& evec)$/;"	f	struct:Eigen::GslTraits
eigen_symm	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  static void eigen_symm(const Matrix& m, gsl_vector* &eval, Matrix& evec)$/;"	f	struct:Eigen::GslTraits
eigen_symm_gen	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  static void eigen_symm_gen(const Matrix& m, const Matrix& _b, Vector& eval, Matrix& evec)$/;"	f	struct:Eigen::GslTraits
eigen_symm_gen	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  static void eigen_symm_gen(const Matrix& m, const Matrix& _b, gsl_vector* &eval, Matrix& evec)$/;"	f	struct:Eigen::GslTraits
free	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  static void free(Matrix& m) { gsl_matrix_complex_free(m); m=0; }$/;"	f	struct:Eigen::GslTraits
free	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  static void free(Matrix& m) { gsl_matrix_free(m); m=0; }$/;"	f	struct:Eigen::GslTraits
free	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  static void free(Vector& m) { gsl_vector_complex_free(m); m=0; }$/;"	f	struct:Eigen::GslTraits
free	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  static void free(Vector& m) { gsl_vector_free(m); m=0; }$/;"	f	struct:Eigen::GslTraits
prod	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  static void prod(const Matrix& m, const Vector& v, Vector& x) { gsl_blas_dgemv(CblasNoTrans,1,m,v,0,x); }$/;"	f	struct:Eigen::GslTraits
prod	tags/before-github-sync/EXTERNAL/eigen3/test/gsl_helper.h	/^  static void prod(const Matrix& m, const Vector& v, Vector& x)$/;"	f	struct:Eigen::GslTraits
hessenberg	tags/before-github-sync/EXTERNAL/eigen3/test/hessenberg.cpp	/^template<typename Scalar,int Size> void hessenberg(int size = Size)$/;"	f
test_hessenberg	tags/before-github-sync/EXTERNAL/eigen3/test/hessenberg.cpp	/^void test_hessenberg()$/;"	f
householder	tags/before-github-sync/EXTERNAL/eigen3/test/householder.cpp	/^template<typename MatrixType> void householder(const MatrixType& m)$/;"	f
test_householder	tags/before-github-sync/EXTERNAL/eigen3/test/householder.cpp	/^void test_householder()$/;"	f
EIGEN_NO_STATIC_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/integer_types.cpp	25;"	d	file:
VERIFY_IS_APPROX	tags/before-github-sync/EXTERNAL/eigen3/test/integer_types.cpp	29;"	d	file:
VERIFY_IS_APPROX	tags/before-github-sync/EXTERNAL/eigen3/test/integer_types.cpp	30;"	d	file:
VERIFY_IS_NOT_APPROX	tags/before-github-sync/EXTERNAL/eigen3/test/integer_types.cpp	31;"	d	file:
VERIFY_IS_NOT_APPROX	tags/before-github-sync/EXTERNAL/eigen3/test/integer_types.cpp	32;"	d	file:
integer_type_tests	tags/before-github-sync/EXTERNAL/eigen3/test/integer_types.cpp	/^template<typename MatrixType> void integer_type_tests(const MatrixType& m)$/;"	f
signed_integer_type_tests	tags/before-github-sync/EXTERNAL/eigen3/test/integer_types.cpp	/^template<typename MatrixType> void signed_integer_type_tests(const MatrixType& m)$/;"	f
test_integer_types	tags/before-github-sync/EXTERNAL/eigen3/test/integer_types.cpp	/^void test_integer_types()$/;"	f
inverse	tags/before-github-sync/EXTERNAL/eigen3/test/inverse.cpp	/^template<typename MatrixType> void inverse(const MatrixType& m)$/;"	f
test_inverse	tags/before-github-sync/EXTERNAL/eigen3/test/inverse.cpp	/^void test_inverse()$/;"	f
jacobi	tags/before-github-sync/EXTERNAL/eigen3/test/jacobi.cpp	/^void jacobi(const MatrixType& m = MatrixType())$/;"	f
test_jacobi	tags/before-github-sync/EXTERNAL/eigen3/test/jacobi.cpp	/^void test_jacobi()$/;"	f
EIGEN_RUNTIME_NO_MALLOC	tags/before-github-sync/EXTERNAL/eigen3/test/jacobisvd.cpp	28;"	d	file:
EIGEN_STACK_ALLOCATION_LIMIT	tags/before-github-sync/EXTERNAL/eigen3/test/jacobisvd.cpp	27;"	d	file:
jacobisvd	tags/before-github-sync/EXTERNAL/eigen3/test/jacobisvd.cpp	/^void jacobisvd(const MatrixType& a = MatrixType(), bool pickrandom = true)$/;"	f
jacobisvd_check_full	tags/before-github-sync/EXTERNAL/eigen3/test/jacobisvd.cpp	/^void jacobisvd_check_full(const MatrixType& m, const JacobiSVD<MatrixType, QRPreconditioner>& svd)$/;"	f
jacobisvd_compare_to_full	tags/before-github-sync/EXTERNAL/eigen3/test/jacobisvd.cpp	/^void jacobisvd_compare_to_full(const MatrixType& m,$/;"	f
jacobisvd_inf_nan	tags/before-github-sync/EXTERNAL/eigen3/test/jacobisvd.cpp	/^void jacobisvd_inf_nan()$/;"	f
jacobisvd_method	tags/before-github-sync/EXTERNAL/eigen3/test/jacobisvd.cpp	/^void jacobisvd_method()$/;"	f
jacobisvd_preallocate	tags/before-github-sync/EXTERNAL/eigen3/test/jacobisvd.cpp	/^void jacobisvd_preallocate()$/;"	f
jacobisvd_solve	tags/before-github-sync/EXTERNAL/eigen3/test/jacobisvd.cpp	/^void jacobisvd_solve(const MatrixType& m, unsigned int computationOptions)$/;"	f
jacobisvd_test_all_computation_options	tags/before-github-sync/EXTERNAL/eigen3/test/jacobisvd.cpp	/^void jacobisvd_test_all_computation_options(const MatrixType& m)$/;"	f
jacobisvd_verify_assert	tags/before-github-sync/EXTERNAL/eigen3/test/jacobisvd.cpp	/^template<typename MatrixType> void jacobisvd_verify_assert(const MatrixType& m)$/;"	f
sub	tags/before-github-sync/EXTERNAL/eigen3/test/jacobisvd.cpp	/^template<typename T> EIGEN_DONT_INLINE  T sub(T a, T b) { return a - b; }$/;"	f
test_jacobisvd	tags/before-github-sync/EXTERNAL/eigen3/test/jacobisvd.cpp	/^void test_jacobisvd()$/;"	f
zero	tags/before-github-sync/EXTERNAL/eigen3/test/jacobisvd.cpp	/^EIGEN_DONT_INLINE Scalar zero() { return Scalar(0); }$/;"	f
linearStructure	tags/before-github-sync/EXTERNAL/eigen3/test/linearstructure.cpp	/^template<typename MatrixType> void linearStructure(const MatrixType& m)$/;"	f
test_linearstructure	tags/before-github-sync/EXTERNAL/eigen3/test/linearstructure.cpp	/^void test_linearstructure()$/;"	f
lu_invertible	tags/before-github-sync/EXTERNAL/eigen3/test/lu.cpp	/^template<typename MatrixType> void lu_invertible()$/;"	f
lu_non_invertible	tags/before-github-sync/EXTERNAL/eigen3/test/lu.cpp	/^template<typename MatrixType> void lu_non_invertible()$/;"	f
lu_partial_piv	tags/before-github-sync/EXTERNAL/eigen3/test/lu.cpp	/^template<typename MatrixType> void lu_partial_piv()$/;"	f
lu_verify_assert	tags/before-github-sync/EXTERNAL/eigen3/test/lu.cpp	/^template<typename MatrixType> void lu_verify_assert()$/;"	f
test_lu	tags/before-github-sync/EXTERNAL/eigen3/test/lu.cpp	/^void test_lu()$/;"	f
CALL_SUBTEST	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	192;"	d
CALL_SUBTEST_1	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	199;"	d
CALL_SUBTEST_1	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	201;"	d
CALL_SUBTEST_10	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	253;"	d
CALL_SUBTEST_10	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	255;"	d
CALL_SUBTEST_11	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	259;"	d
CALL_SUBTEST_11	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	261;"	d
CALL_SUBTEST_12	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	265;"	d
CALL_SUBTEST_12	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	267;"	d
CALL_SUBTEST_13	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	271;"	d
CALL_SUBTEST_13	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	273;"	d
CALL_SUBTEST_14	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	277;"	d
CALL_SUBTEST_14	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	279;"	d
CALL_SUBTEST_15	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	283;"	d
CALL_SUBTEST_15	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	285;"	d
CALL_SUBTEST_16	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	289;"	d
CALL_SUBTEST_16	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	291;"	d
CALL_SUBTEST_2	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	205;"	d
CALL_SUBTEST_2	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	207;"	d
CALL_SUBTEST_3	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	211;"	d
CALL_SUBTEST_3	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	213;"	d
CALL_SUBTEST_4	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	217;"	d
CALL_SUBTEST_4	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	219;"	d
CALL_SUBTEST_5	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	223;"	d
CALL_SUBTEST_5	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	225;"	d
CALL_SUBTEST_6	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	229;"	d
CALL_SUBTEST_6	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	231;"	d
CALL_SUBTEST_7	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	235;"	d
CALL_SUBTEST_7	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	237;"	d
CALL_SUBTEST_8	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	241;"	d
CALL_SUBTEST_8	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	243;"	d
CALL_SUBTEST_9	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	247;"	d
CALL_SUBTEST_9	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	249;"	d
DEFAULT_REPEAT	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	47;"	d
EIGEN_DEFAULT_IO_FORMAT	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	65;"	d
EIGEN_INTERNAL_DEBUGGING	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	167;"	d
EIGEN_MAKING_DOCS	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	40;"	d
EIGEN_USE_CUSTOM_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	158;"	d
EI_PP_MAKE_STRING	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	63;"	d
EI_PP_MAKE_STRING2	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	62;"	d
Eigen	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^    namespace Eigen$/;"	n
Eigen	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^  namespace Eigen$/;"	n
Eigen	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^namespace Eigen {$/;"	n
Eigen	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^namespace Eigen$/;"	n
GetDifferentType	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^template<> struct GetDifferentType<double> { typedef float type; };$/;"	s
GetDifferentType	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^template<> struct GetDifferentType<float> { typedef double type; };$/;"	s
GetDifferentType	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^template<typename T> struct GetDifferentType<std::complex<T> >$/;"	s
NDEBUG	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	35;"	d
VERIFY	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	180;"	d
VERIFY_IS_APPROX	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	183;"	d
VERIFY_IS_APPROX_OR_LESS_THAN	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	187;"	d
VERIFY_IS_EQUAL	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	182;"	d
VERIFY_IS_MUCH_SMALLER_THAN	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	185;"	d
VERIFY_IS_NOT_APPROX	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	184;"	d
VERIFY_IS_NOT_APPROX_OR_LESS_THAN	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	188;"	d
VERIFY_IS_NOT_MUCH_SMALLER_THAN	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	186;"	d
VERIFY_IS_UNITARY	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	190;"	d
VERIFY_RAISES_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	115;"	d
VERIFY_RAISES_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	145;"	d
VERIFY_RAISES_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	162;"	d
createRandomPIMatrixOfRank	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^void createRandomPIMatrixOfRank(typename MatrixType::Index desired_rank, typename MatrixType::Index rows, typename MatrixType::Index cols, MatrixType& m)$/;"	f	namespace:Eigen
eigen_assert	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	102;"	d
eigen_assert	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	136;"	d
eigen_assert_exception	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^      eigen_assert_exception(void) {}$/;"	f	struct:Eigen::eigen_assert_exception
eigen_assert_exception	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^    struct eigen_assert_exception$/;"	s	namespace:Eigen
eigen_assert_list	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^      static std::vector<std::string> eigen_assert_list;$/;"	v
g_has_set_repeat	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^  static bool g_has_set_repeat, g_has_set_seed;$/;"	v
g_has_set_seed	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^  static bool g_has_set_repeat, g_has_set_seed;$/;"	v
g_repeat	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^  static int g_repeat;$/;"	v
g_seed	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^  static unsigned int g_seed;$/;"	v
g_test_stack	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^  static std::vector<std::string> g_test_stack;$/;"	v
internal	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^      namespace internal$/;"	n	namespace:Eigen
main	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^int main(int argc, char *argv[])$/;"	f
no_more_assert	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^    static bool no_more_assert = false;$/;"	v
push_assert	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^        static bool push_assert = false;$/;"	v
report_on_cerr_on_assert_failure	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^    static bool report_on_cerr_on_assert_failure = true;$/;"	v
set_repeat_from_string	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^void set_repeat_from_string(const char *str)$/;"	f
set_seed_from_string	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^void set_seed_from_string(const char *str)$/;"	f
should_raise_an_assert	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^    static const bool should_raise_an_assert = false;$/;"	v
test_isApprox	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isApprox(const Type1& a, const Type2& b)$/;"	f	namespace:Eigen
test_isApprox	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isApprox(const double& a, const double& b)$/;"	f	namespace:Eigen
test_isApprox	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isApprox(const float& a, const float& b)$/;"	f	namespace:Eigen
test_isApprox	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isApprox(const int& a, const int& b)$/;"	f	namespace:Eigen
test_isApprox	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isApprox(const long double& a, const long double& b)$/;"	f	namespace:Eigen
test_isApprox	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isApprox(const std::complex<double>& a, const std::complex<double>& b)$/;"	f	namespace:Eigen
test_isApprox	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isApprox(const std::complex<float>& a, const std::complex<float>& b)$/;"	f	namespace:Eigen
test_isApproxOrLessThan	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isApproxOrLessThan(const double& a, const double& b)$/;"	f	namespace:Eigen
test_isApproxOrLessThan	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isApproxOrLessThan(const float& a, const float& b)$/;"	f	namespace:Eigen
test_isApproxOrLessThan	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isApproxOrLessThan(const int& a, const int& b)$/;"	f	namespace:Eigen
test_isApproxOrLessThan	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isApproxOrLessThan(const long double& a, const long double& b)$/;"	f	namespace:Eigen
test_isApproxWithRef	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isApproxWithRef(const Scalar& a, const Scalar& b, const ScalarRef& ref)$/;"	f	namespace:Eigen
test_isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isMuchSmallerThan(const MatrixBase<Derived1>& m1,$/;"	f	namespace:Eigen
test_isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isMuchSmallerThan(const MatrixBase<Derived>& m,$/;"	f	namespace:Eigen
test_isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isMuchSmallerThan(const double& a, const double& b)$/;"	f	namespace:Eigen
test_isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isMuchSmallerThan(const float& a, const float& b)$/;"	f	namespace:Eigen
test_isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isMuchSmallerThan(const int& a, const int& b)$/;"	f	namespace:Eigen
test_isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isMuchSmallerThan(const long double& a, const long double& b)$/;"	f	namespace:Eigen
test_isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isMuchSmallerThan(const std::complex<double>& a, const std::complex<double>& b)$/;"	f	namespace:Eigen
test_isMuchSmallerThan	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isMuchSmallerThan(const std::complex<float>& a, const std::complex<float>& b)$/;"	f	namespace:Eigen
test_isUnitary	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^inline bool test_isUnitary(const MatrixBase<Derived>& m)$/;"	f	namespace:Eigen
test_is_equal	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^bool test_is_equal(const T& actual, const U& expected)$/;"	f	namespace:Eigen
test_precision	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^template<> inline double test_precision<double>() { return 1e-6; }$/;"	f	namespace:Eigen
test_precision	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^template<> inline double test_precision<std::complex<double> >() { return test_precision<double>(); }$/;"	f	namespace:Eigen
test_precision	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^template<> inline float test_precision<float>() { return 1e-3f; }$/;"	f	namespace:Eigen
test_precision	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^template<> inline float test_precision<std::complex<float> >() { return test_precision<float>(); }$/;"	f	namespace:Eigen
test_precision	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^template<> inline long double test_precision<long double>() { return 1e-6; }$/;"	f	namespace:Eigen
test_precision	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^template<typename T> inline typename NumTraits<T>::Real test_precision() { return NumTraits<T>::dummy_precision(); }$/;"	f	namespace:Eigen
type	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^template<> struct GetDifferentType<double> { typedef float type; };$/;"	t	struct:GetDifferentType
type	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^template<> struct GetDifferentType<float> { typedef double type; };$/;"	t	struct:GetDifferentType
type	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^{ typedef std::complex<typename GetDifferentType<T>::type> type; };$/;"	t	struct:GetDifferentType
type_name	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^template<> std::string type_name<double>() { return "double"; }$/;"	f
type_name	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^template<> std::string type_name<float>() { return "float"; }$/;"	f
type_name	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^template<> std::string type_name<int>() { return "int"; }$/;"	f
type_name	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^template<> std::string type_name<std::complex<double> >() { return "complex<double>"; }$/;"	f
type_name	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^template<> std::string type_name<std::complex<float> >() { return "complex<float>"; }$/;"	f
type_name	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^template<> std::string type_name<std::complex<int> >() { return "complex<int>"; }$/;"	f
type_name	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^template<typename T> std::string type_name() { return "other"; }$/;"	f
verify_impl	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^static void verify_impl(bool condition, const char *testname, const char *file, int line, const char *condition_as_string)$/;"	f
~eigen_assert_exception	tags/before-github-sync/EXTERNAL/eigen3/test/main.h	/^      ~eigen_assert_exception() { Eigen::no_more_assert = false; }$/;"	f	struct:Eigen::eigen_assert_exception
EIGEN_NO_STATIC_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/map.cpp	26;"	d	file:
check_const_correctness	tags/before-github-sync/EXTERNAL/eigen3/test/map.cpp	/^template<typename PlainObjectType> void check_const_correctness(const PlainObjectType&)$/;"	f
map_class_matrix	tags/before-github-sync/EXTERNAL/eigen3/test/map.cpp	/^template<typename MatrixType> void map_class_matrix(const MatrixType& m)$/;"	f
map_class_vector	tags/before-github-sync/EXTERNAL/eigen3/test/map.cpp	/^template<typename VectorType> void map_class_vector(const VectorType& m)$/;"	f
map_static_methods	tags/before-github-sync/EXTERNAL/eigen3/test/map.cpp	/^template<typename VectorType> void map_static_methods(const VectorType& m)$/;"	f
test_map	tags/before-github-sync/EXTERNAL/eigen3/test/map.cpp	/^void test_map()$/;"	f
const_ptr	tags/before-github-sync/EXTERNAL/eigen3/test/mapstaticmethods.cpp	/^const float *const_ptr;$/;"	v
mapstaticmethods	tags/before-github-sync/EXTERNAL/eigen3/test/mapstaticmethods.cpp	/^void mapstaticmethods(const PlainObjectType& m)$/;"	f
mapstaticmethods_impl	tags/before-github-sync/EXTERNAL/eigen3/test/mapstaticmethods.cpp	/^struct mapstaticmethods_impl {};$/;"	s	file:
mapstaticmethods_impl	tags/before-github-sync/EXTERNAL/eigen3/test/mapstaticmethods.cpp	/^struct mapstaticmethods_impl<PlainObjectType, false, IsVector>$/;"	s	file:
mapstaticmethods_impl	tags/before-github-sync/EXTERNAL/eigen3/test/mapstaticmethods.cpp	/^struct mapstaticmethods_impl<PlainObjectType, true, false>$/;"	s	file:
mapstaticmethods_impl	tags/before-github-sync/EXTERNAL/eigen3/test/mapstaticmethods.cpp	/^struct mapstaticmethods_impl<PlainObjectType, true, true>$/;"	s	file:
ptr	tags/before-github-sync/EXTERNAL/eigen3/test/mapstaticmethods.cpp	/^float *ptr;$/;"	v
run	tags/before-github-sync/EXTERNAL/eigen3/test/mapstaticmethods.cpp	/^  static void run(const PlainObjectType& m)$/;"	f	struct:mapstaticmethods_impl
run	tags/before-github-sync/EXTERNAL/eigen3/test/mapstaticmethods.cpp	/^  static void run(const PlainObjectType& v)$/;"	f	struct:mapstaticmethods_impl
test_mapstaticmethods	tags/before-github-sync/EXTERNAL/eigen3/test/mapstaticmethods.cpp	/^void test_mapstaticmethods()$/;"	f
map_class_matrix	tags/before-github-sync/EXTERNAL/eigen3/test/mapstride.cpp	/^template<int Alignment,typename MatrixType> void map_class_matrix(const MatrixType& _m)$/;"	f
map_class_vector	tags/before-github-sync/EXTERNAL/eigen3/test/mapstride.cpp	/^template<int Alignment,typename VectorType> void map_class_vector(const VectorType& m)$/;"	f
test_mapstride	tags/before-github-sync/EXTERNAL/eigen3/test/mapstride.cpp	/^void test_mapstride()$/;"	f
VERIFY_META_SQRT	tags/before-github-sync/EXTERNAL/eigen3/test/meta.cpp	74;"	d	file:
test_meta	tags/before-github-sync/EXTERNAL/eigen3/test/meta.cpp	/^void test_meta()$/;"	f
miscMatrices	tags/before-github-sync/EXTERNAL/eigen3/test/miscmatrices.cpp	/^template<typename MatrixType> void miscMatrices(const MatrixType& m)$/;"	f
test_miscmatrices	tags/before-github-sync/EXTERNAL/eigen3/test/miscmatrices.cpp	/^void test_miscmatrices()$/;"	f
EIGEN_INITIALIZE_MATRICES_BY_ZERO	tags/before-github-sync/EXTERNAL/eigen3/test/mixingtypes.cpp	27;"	d	file:
EIGEN_NO_STATIC_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/mixingtypes.cpp	30;"	d	file:
mixingtypes	tags/before-github-sync/EXTERNAL/eigen3/test/mixingtypes.cpp	/^template<int SizeAtCompileType> void mixingtypes(int size = SizeAtCompileType)$/;"	f
test_mixingtypes	tags/before-github-sync/EXTERNAL/eigen3/test/mixingtypes.cpp	/^void test_mixingtypes()$/;"	f
run_nesting_ops	tags/before-github-sync/EXTERNAL/eigen3/test/nesting_ops.cpp	/^template <typename MatrixType> void run_nesting_ops(const MatrixType& _m)$/;"	f
test_nesting_ops	tags/before-github-sync/EXTERNAL/eigen3/test/nesting_ops.cpp	/^void test_nesting_ops()$/;"	f
EIGEN_NO_MALLOC	tags/before-github-sync/EXTERNAL/eigen3/test/nomalloc.cpp	33;"	d	file:
EIGEN_STACK_ALLOCATION_LIMIT	tags/before-github-sync/EXTERNAL/eigen3/test/nomalloc.cpp	31;"	d	file:
ctms_decompositions	tags/before-github-sync/EXTERNAL/eigen3/test/nomalloc.cpp	/^void ctms_decompositions()$/;"	f
nomalloc	tags/before-github-sync/EXTERNAL/eigen3/test/nomalloc.cpp	/^template<typename MatrixType> void nomalloc(const MatrixType& m)$/;"	f
test_nomalloc	tags/before-github-sync/EXTERNAL/eigen3/test/nomalloc.cpp	/^void test_nomalloc()$/;"	f
throw	tags/before-github-sync/EXTERNAL/eigen3/test/nomalloc.cpp	28;"	d	file:
equalsIdentity	tags/before-github-sync/EXTERNAL/eigen3/test/nullary.cpp	/^bool equalsIdentity(const MatrixType& A)$/;"	f
testMatrixType	tags/before-github-sync/EXTERNAL/eigen3/test/nullary.cpp	/^void testMatrixType(const MatrixType& m)$/;"	f
testVectorType	tags/before-github-sync/EXTERNAL/eigen3/test/nullary.cpp	/^void testVectorType(const VectorType& base)$/;"	f
test_nullary	tags/before-github-sync/EXTERNAL/eigen3/test/nullary.cpp	/^void test_nullary()$/;"	f
CHECK_CWISE1	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	75;"	d	file:
CHECK_CWISE1_IF	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	102;"	d	file:
CHECK_CWISE2	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	68;"	d	file:
Eigen	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	/^namespace Eigen {$/;"	n	file:
REF_ADD	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	110;"	d	file:
REF_DIV	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	113;"	d	file:
REF_MUL	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	112;"	d	file:
REF_SUB	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	111;"	d	file:
areApprox	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	/^template<typename Scalar> bool areApprox(const Scalar* a, const Scalar* b, int size)$/;"	f
areApproxAbs	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	/^template<typename Scalar> bool areApproxAbs(const Scalar* a, const Scalar* b, int size, const typename NumTraits<Scalar>::Real& refvalue)$/;"	f
internal	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	/^namespace internal {$/;"	n	namespace:Eigen	file:
isApproxAbs	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	/^template<typename Scalar> bool isApproxAbs(const Scalar& a, const Scalar& b, const typename NumTraits<Scalar>::Real& refvalue)$/;"	f
load	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	/^  inline Packet load(const T* from) const { return internal::pload<Packet>(from); }$/;"	f	struct:packet_helper
load	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	/^  inline T load(const T* from) const { return *from; }$/;"	f	struct:packet_helper
negate	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	/^template<typename T> T negate(const T& x) { return -x; }$/;"	f	namespace:Eigen::internal
packet_helper	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	/^struct packet_helper$/;"	s	file:
packet_helper	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	/^struct packet_helper<false,Packet>$/;"	s	file:
packetmath	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	/^template<typename Scalar> void packetmath()$/;"	f
packetmath_complex	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	/^template<typename Scalar> void packetmath_complex()$/;"	f
packetmath_real	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	/^template<typename Scalar> void packetmath_real()$/;"	f
store	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	/^  inline void store(T* to, const Packet& x) const { internal::pstore(to,x); }$/;"	f	struct:packet_helper
store	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	/^  inline void store(T* to, const T& x) const { *to = x; }$/;"	f	struct:packet_helper
test_conj_helper	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	/^template<typename Scalar,bool ConjLhs,bool ConjRhs> void test_conj_helper(Scalar* data1, Scalar* data2, Scalar* ref, Scalar* pval)$/;"	f
test_packetmath	tags/before-github-sync/EXTERNAL/eigen3/test/packetmath.cpp	/^void test_packetmath()$/;"	f
permutationmatrices	tags/before-github-sync/EXTERNAL/eigen3/test/permutationmatrices.cpp	/^template<typename MatrixType> void permutationmatrices(const MatrixType& m)$/;"	f
randomPermutationVector	tags/before-github-sync/EXTERNAL/eigen3/test/permutationmatrices.cpp	/^void randomPermutationVector(PermutationVectorType& v, typename PermutationVectorType::Index size)$/;"	f
test_permutationmatrices	tags/before-github-sync/EXTERNAL/eigen3/test/permutationmatrices.cpp	/^void test_permutationmatrices()$/;"	f
inverse_general_4x4	tags/before-github-sync/EXTERNAL/eigen3/test/prec_inverse_4x4.cpp	/^template<typename MatrixType> void inverse_general_4x4(int repeat)$/;"	f
inverse_permutation_4x4	tags/before-github-sync/EXTERNAL/eigen3/test/prec_inverse_4x4.cpp	/^template<typename MatrixType> void inverse_permutation_4x4()$/;"	f
test_prec_inverse_4x4	tags/before-github-sync/EXTERNAL/eigen3/test/prec_inverse_4x4.cpp	/^void test_prec_inverse_4x4()$/;"	f
areNotApprox	tags/before-github-sync/EXTERNAL/eigen3/test/product.h	/^bool areNotApprox(const MatrixBase<Derived1>& m1, const MatrixBase<Derived2>& m2, typename Derived1::RealScalar epsilon = NumTraits<typename Derived1::RealScalar>::dummy_precision())$/;"	f
product	tags/before-github-sync/EXTERNAL/eigen3/test/product.h	/^template<typename MatrixType> void product(const MatrixType& m)$/;"	f
product_extra	tags/before-github-sync/EXTERNAL/eigen3/test/product_extra.cpp	/^template<typename MatrixType> void product_extra(const MatrixType& m)$/;"	f
test_product_extra	tags/before-github-sync/EXTERNAL/eigen3/test/product_extra.cpp	/^void test_product_extra()$/;"	f
zero_sized_objects	tags/before-github-sync/EXTERNAL/eigen3/test/product_extra.cpp	/^void zero_sized_objects()$/;"	f
test_product_large	tags/before-github-sync/EXTERNAL/eigen3/test/product_large.cpp	/^void test_product_large()$/;"	f
CHECK_MMTR	tags/before-github-sync/EXTERNAL/eigen3/test/product_mmtr.cpp	27;"	d	file:
mmtr	tags/before-github-sync/EXTERNAL/eigen3/test/product_mmtr.cpp	/^template<typename Scalar> void mmtr(int size)$/;"	f
test_product_mmtr	tags/before-github-sync/EXTERNAL/eigen3/test/product_mmtr.cpp	/^void test_product_mmtr()$/;"	f
EIGEN_DENSE_STORAGE_CTOR_PLUGIN	tags/before-github-sync/EXTERNAL/eigen3/test/product_notemporary.cpp	33;"	d	file:
VERIFY_EVALUATION_COUNT	tags/before-github-sync/EXTERNAL/eigen3/test/product_notemporary.cpp	37;"	d	file:
nb_temporaries	tags/before-github-sync/EXTERNAL/eigen3/test/product_notemporary.cpp	/^static int nb_temporaries;$/;"	v	file:
on_temporary_creation	tags/before-github-sync/EXTERNAL/eigen3/test/product_notemporary.cpp	/^void on_temporary_creation(int size) {$/;"	f
product_notemporary	tags/before-github-sync/EXTERNAL/eigen3/test/product_notemporary.cpp	/^template<typename MatrixType> void product_notemporary(const MatrixType& m)$/;"	f
test_product_notemporary	tags/before-github-sync/EXTERNAL/eigen3/test/product_notemporary.cpp	/^void test_product_notemporary()$/;"	f
product_selfadjoint	tags/before-github-sync/EXTERNAL/eigen3/test/product_selfadjoint.cpp	/^template<typename MatrixType> void product_selfadjoint(const MatrixType& m)$/;"	f
test_product_selfadjoint	tags/before-github-sync/EXTERNAL/eigen3/test/product_selfadjoint.cpp	/^void test_product_selfadjoint()$/;"	f
EIGEN_NO_STATIC_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/product_small.cpp	25;"	d	file:
test_product_small	tags/before-github-sync/EXTERNAL/eigen3/test/product_small.cpp	/^void test_product_small()$/;"	f
symm	tags/before-github-sync/EXTERNAL/eigen3/test/product_symm.cpp	/^template<typename Scalar, int Size, int OtherSize> void symm(int size = Size, int othersize = OtherSize)$/;"	f
test_product_symm	tags/before-github-sync/EXTERNAL/eigen3/test/product_symm.cpp	/^void test_product_symm()$/;"	f
syrk	tags/before-github-sync/EXTERNAL/eigen3/test/product_syrk.cpp	/^template<typename MatrixType> void syrk(const MatrixType& m)$/;"	f
test_product_syrk	tags/before-github-sync/EXTERNAL/eigen3/test/product_syrk.cpp	/^void test_product_syrk()$/;"	f
test_product_trmm	tags/before-github-sync/EXTERNAL/eigen3/test/product_trmm.cpp	/^void test_product_trmm()$/;"	f
trmm	tags/before-github-sync/EXTERNAL/eigen3/test/product_trmm.cpp	/^template<typename Scalar> void trmm(int size,int \/*othersize*\/)$/;"	f
test_product_trmv	tags/before-github-sync/EXTERNAL/eigen3/test/product_trmv.cpp	/^void test_product_trmv()$/;"	f
trmv	tags/before-github-sync/EXTERNAL/eigen3/test/product_trmv.cpp	/^template<typename MatrixType> void trmv(const MatrixType& m)$/;"	f
VERIFY_TRSM	tags/before-github-sync/EXTERNAL/eigen3/test/product_trsolve.cpp	27;"	d	file:
VERIFY_TRSM_ONTHERIGHT	tags/before-github-sync/EXTERNAL/eigen3/test/product_trsolve.cpp	36;"	d	file:
test_product_trsolve	tags/before-github-sync/EXTERNAL/eigen3/test/product_trsolve.cpp	/^void test_product_trsolve()$/;"	f
trsolve	tags/before-github-sync/EXTERNAL/eigen3/test/product_trsolve.cpp	/^template<typename Scalar,int Size, int Cols> void trsolve(int size=Size,int cols=Cols)$/;"	f
qr	tags/before-github-sync/EXTERNAL/eigen3/test/qr.cpp	/^template<typename MatrixType> void qr(const MatrixType& m)$/;"	f
qr_fixedsize	tags/before-github-sync/EXTERNAL/eigen3/test/qr.cpp	/^template<typename MatrixType, int Cols2> void qr_fixedsize()$/;"	f
qr_invertible	tags/before-github-sync/EXTERNAL/eigen3/test/qr.cpp	/^template<typename MatrixType> void qr_invertible()$/;"	f
qr_verify_assert	tags/before-github-sync/EXTERNAL/eigen3/test/qr.cpp	/^template<typename MatrixType> void qr_verify_assert()$/;"	f
test_qr	tags/before-github-sync/EXTERNAL/eigen3/test/qr.cpp	/^void test_qr()$/;"	f
qr	tags/before-github-sync/EXTERNAL/eigen3/test/qr_colpivoting.cpp	/^template<typename MatrixType> void qr()$/;"	f
qr_fixedsize	tags/before-github-sync/EXTERNAL/eigen3/test/qr_colpivoting.cpp	/^template<typename MatrixType, int Cols2> void qr_fixedsize()$/;"	f
qr_invertible	tags/before-github-sync/EXTERNAL/eigen3/test/qr_colpivoting.cpp	/^template<typename MatrixType> void qr_invertible()$/;"	f
qr_verify_assert	tags/before-github-sync/EXTERNAL/eigen3/test/qr_colpivoting.cpp	/^template<typename MatrixType> void qr_verify_assert()$/;"	f
test_qr_colpivoting	tags/before-github-sync/EXTERNAL/eigen3/test/qr_colpivoting.cpp	/^void test_qr_colpivoting()$/;"	f
qr	tags/before-github-sync/EXTERNAL/eigen3/test/qr_fullpivoting.cpp	/^template<typename MatrixType> void qr()$/;"	f
qr_invertible	tags/before-github-sync/EXTERNAL/eigen3/test/qr_fullpivoting.cpp	/^template<typename MatrixType> void qr_invertible()$/;"	f
qr_verify_assert	tags/before-github-sync/EXTERNAL/eigen3/test/qr_fullpivoting.cpp	/^template<typename MatrixType> void qr_verify_assert()$/;"	f
test_qr_fullpivoting	tags/before-github-sync/EXTERNAL/eigen3/test/qr_fullpivoting.cpp	/^void test_qr_fullpivoting()$/;"	f
EIGEN_WORK_AROUND_QT_BUG_CALLING_WRONG_OPERATOR_NEW_FIXED_IN_QT_4_5	tags/before-github-sync/EXTERNAL/eigen3/test/qtvector.cpp	26;"	d	file:
check_qtvector_matrix	tags/before-github-sync/EXTERNAL/eigen3/test/qtvector.cpp	/^void check_qtvector_matrix(const MatrixType& m)$/;"	f
check_qtvector_quaternion	tags/before-github-sync/EXTERNAL/eigen3/test/qtvector.cpp	/^void check_qtvector_quaternion(const QuaternionType&)$/;"	f
check_qtvector_transform	tags/before-github-sync/EXTERNAL/eigen3/test/qtvector.cpp	/^void check_qtvector_transform(const TransformType&)$/;"	f
test_qtvector	tags/before-github-sync/EXTERNAL/eigen3/test/qtvector.cpp	/^void test_qtvector()$/;"	f
matrixRedux	tags/before-github-sync/EXTERNAL/eigen3/test/redux.cpp	/^template<typename MatrixType> void matrixRedux(const MatrixType& m)$/;"	f
test_redux	tags/before-github-sync/EXTERNAL/eigen3/test/redux.cpp	/^void test_redux()$/;"	f
vectorRedux	tags/before-github-sync/EXTERNAL/eigen3/test/redux.cpp	/^template<typename VectorType> void vectorRedux(const VectorType& w)$/;"	f
resizeLikeTest	tags/before-github-sync/EXTERNAL/eigen3/test/resize.cpp	/^void resizeLikeTest()$/;"	f
resizeLikeTest1020	tags/before-github-sync/EXTERNAL/eigen3/test/resize.cpp	/^void resizeLikeTest1020() { resizeLikeTest<10,20>(); }$/;"	f
resizeLikeTest12	tags/before-github-sync/EXTERNAL/eigen3/test/resize.cpp	/^void resizeLikeTest12() { resizeLikeTest<1,2>(); }$/;"	f
resizeLikeTest31	tags/before-github-sync/EXTERNAL/eigen3/test/resize.cpp	/^void resizeLikeTest31() { resizeLikeTest<3,1>(); }$/;"	f
test_resize	tags/before-github-sync/EXTERNAL/eigen3/test/resize.cpp	/^void test_resize()$/;"	f
schur	tags/before-github-sync/EXTERNAL/eigen3/test/schur_complex.cpp	/^template<typename MatrixType> void schur(int size = MatrixType::ColsAtCompileTime)$/;"	f
test_schur_complex	tags/before-github-sync/EXTERNAL/eigen3/test/schur_complex.cpp	/^void test_schur_complex()$/;"	f
schur	tags/before-github-sync/EXTERNAL/eigen3/test/schur_real.cpp	/^template<typename MatrixType> void schur(int size = MatrixType::ColsAtCompileTime)$/;"	f
test_schur_real	tags/before-github-sync/EXTERNAL/eigen3/test/schur_real.cpp	/^void test_schur_real()$/;"	f
verifyIsQuasiTriangular	tags/before-github-sync/EXTERNAL/eigen3/test/schur_real.cpp	/^template<typename MatrixType> void verifyIsQuasiTriangular(const MatrixType& T)$/;"	f
bug_159	tags/before-github-sync/EXTERNAL/eigen3/test/selfadjoint.cpp	/^void bug_159()$/;"	f
selfadjoint	tags/before-github-sync/EXTERNAL/eigen3/test/selfadjoint.cpp	/^template<typename MatrixType> void selfadjoint(const MatrixType& m)$/;"	f
test_selfadjoint	tags/before-github-sync/EXTERNAL/eigen3/test/selfadjoint.cpp	/^void test_selfadjoint()$/;"	f
test_sizeof	tags/before-github-sync/EXTERNAL/eigen3/test/sizeof.cpp	/^void test_sizeof()$/;"	f
verifySizeOf	tags/before-github-sync/EXTERNAL/eigen3/test/sizeof.cpp	/^template<typename MatrixType> void verifySizeOf(const MatrixType&)$/;"	f
smallVectors	tags/before-github-sync/EXTERNAL/eigen3/test/smallvectors.cpp	/^template<typename Scalar> void smallVectors()$/;"	f
test_smallvectors	tags/before-github-sync/EXTERNAL/eigen3/test/smallvectors.cpp	/^void test_smallvectors()$/;"	f
EIGEN_UNORDERED_MAP_SUPPORT	tags/before-github-sync/EXTERNAL/eigen3/test/sparse.h	33;"	d
EIGEN_YES_I_KNOW_SPARSE_MODULE_IS_NOT_STABLE_YET	tags/before-github-sync/EXTERNAL/eigen3/test/sparse.h	27;"	d
ForceNonZeroDiag	tags/before-github-sync/EXTERNAL/eigen3/test/sparse.h	/^  ForceNonZeroDiag = 1,$/;"	e
ForceRealDiag	tags/before-github-sync/EXTERNAL/eigen3/test/sparse.h	/^  ForceRealDiag = 8$/;"	e
MakeLowerTriangular	tags/before-github-sync/EXTERNAL/eigen3/test/sparse.h	/^  MakeLowerTriangular = 2,$/;"	e
MakeUpperTriangular	tags/before-github-sync/EXTERNAL/eigen3/test/sparse.h	/^  MakeUpperTriangular = 4,$/;"	e
initSparse	tags/before-github-sync/EXTERNAL/eigen3/test/sparse.h	/^initSparse(double density,$/;"	f
std	tags/before-github-sync/EXTERNAL/eigen3/test/sparse.h	/^namespace std {$/;"	n
sparse_basic	tags/before-github-sync/EXTERNAL/eigen3/test/sparse_basic.cpp	/^template<typename SparseMatrixType> void sparse_basic(const SparseMatrixType& ref)$/;"	f
test_sparse_basic	tags/before-github-sync/EXTERNAL/eigen3/test/sparse_basic.cpp	/^void test_sparse_basic()$/;"	f
sparse_product	tags/before-github-sync/EXTERNAL/eigen3/test/sparse_product.cpp	/^template<typename SparseMatrixType> void sparse_product(const SparseMatrixType& ref)$/;"	f
sparse_product_regression_test	tags/before-github-sync/EXTERNAL/eigen3/test/sparse_product.cpp	/^template<typename SparseMatrixType, typename DenseMatrixType> void sparse_product_regression_test()$/;"	f
test_sparse_product	tags/before-github-sync/EXTERNAL/eigen3/test/sparse_product.cpp	/^void test_sparse_product()$/;"	f
initSPD	tags/before-github-sync/EXTERNAL/eigen3/test/sparse_solvers.cpp	/^initSPD(double density,$/;"	f
sparse_solvers	tags/before-github-sync/EXTERNAL/eigen3/test/sparse_solvers.cpp	/^template<typename Scalar> void sparse_solvers(int rows, int cols)$/;"	f
test_sparse_solvers	tags/before-github-sync/EXTERNAL/eigen3/test/sparse_solvers.cpp	/^void test_sparse_solvers()$/;"	f
sparse_vector	tags/before-github-sync/EXTERNAL/eigen3/test/sparse_vector.cpp	/^template<typename Scalar> void sparse_vector(int rows, int cols)$/;"	f
test_sparse_vector	tags/before-github-sync/EXTERNAL/eigen3/test/sparse_vector.cpp	/^void test_sparse_vector()$/;"	f
copy	tags/before-github-sync/EXTERNAL/eigen3/test/stable_norm.cpp	/^template<typename T> EIGEN_DONT_INLINE T copy(const T& x)$/;"	f
isFinite	tags/before-github-sync/EXTERNAL/eigen3/test/stable_norm.cpp	/^template<typename T> bool isFinite(const T& x)$/;"	f
isNotNaN	tags/before-github-sync/EXTERNAL/eigen3/test/stable_norm.cpp	/^template<typename T> bool isNotNaN(const T& x)$/;"	f
stable_norm	tags/before-github-sync/EXTERNAL/eigen3/test/stable_norm.cpp	/^template<typename MatrixType> void stable_norm(const MatrixType& m)$/;"	f
sub	tags/before-github-sync/EXTERNAL/eigen3/test/stable_norm.cpp	/^template<typename T> EIGEN_DONT_INLINE  T sub(T a, T b) { return a - b; }$/;"	f
test_stable_norm	tags/before-github-sync/EXTERNAL/eigen3/test/stable_norm.cpp	/^void test_stable_norm()$/;"	f
check_stddeque_matrix	tags/before-github-sync/EXTERNAL/eigen3/test/stddeque.cpp	/^void check_stddeque_matrix(const MatrixType& m)$/;"	f
check_stddeque_quaternion	tags/before-github-sync/EXTERNAL/eigen3/test/stddeque.cpp	/^void check_stddeque_quaternion(const QuaternionType&)$/;"	f
check_stddeque_transform	tags/before-github-sync/EXTERNAL/eigen3/test/stddeque.cpp	/^void check_stddeque_transform(const TransformType&)$/;"	f
test_stddeque	tags/before-github-sync/EXTERNAL/eigen3/test/stddeque.cpp	/^void test_stddeque()$/;"	f
check_stdlist_matrix	tags/before-github-sync/EXTERNAL/eigen3/test/stdlist.cpp	/^void check_stdlist_matrix(const MatrixType& m)$/;"	f
check_stdlist_quaternion	tags/before-github-sync/EXTERNAL/eigen3/test/stdlist.cpp	/^void check_stdlist_quaternion(const QuaternionType&)$/;"	f
check_stdlist_transform	tags/before-github-sync/EXTERNAL/eigen3/test/stdlist.cpp	/^void check_stdlist_transform(const TransformType&)$/;"	f
test_stdlist	tags/before-github-sync/EXTERNAL/eigen3/test/stdlist.cpp	/^void test_stdlist()$/;"	f
check_stdvector_matrix	tags/before-github-sync/EXTERNAL/eigen3/test/stdvector.cpp	/^void check_stdvector_matrix(const MatrixType& m)$/;"	f
check_stdvector_quaternion	tags/before-github-sync/EXTERNAL/eigen3/test/stdvector.cpp	/^void check_stdvector_quaternion(const QuaternionType&)$/;"	f
check_stdvector_transform	tags/before-github-sync/EXTERNAL/eigen3/test/stdvector.cpp	/^void check_stdvector_transform(const TransformType&)$/;"	f
test_stdvector	tags/before-github-sync/EXTERNAL/eigen3/test/stdvector.cpp	/^void test_stdvector()$/;"	f
check_stdvector_matrix	tags/before-github-sync/EXTERNAL/eigen3/test/stdvector_overload.cpp	/^void check_stdvector_matrix(const MatrixType& m)$/;"	f
check_stdvector_quaternion	tags/before-github-sync/EXTERNAL/eigen3/test/stdvector_overload.cpp	/^void check_stdvector_quaternion(const QuaternionType&)$/;"	f
check_stdvector_transform	tags/before-github-sync/EXTERNAL/eigen3/test/stdvector_overload.cpp	/^void check_stdvector_transform(const TransformType&)$/;"	f
test_stdvector_overload	tags/before-github-sync/EXTERNAL/eigen3/test/stdvector_overload.cpp	/^void test_stdvector_overload()$/;"	f
EIGEN_NO_STATIC_ASSERT	tags/before-github-sync/EXTERNAL/eigen3/test/swap.cpp	25;"	d	file:
other_matrix_type	tags/before-github-sync/EXTERNAL/eigen3/test/swap.cpp	/^struct other_matrix_type$/;"	s	file:
other_matrix_type	tags/before-github-sync/EXTERNAL/eigen3/test/swap.cpp	/^struct other_matrix_type<Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> >$/;"	s	file:
swap	tags/before-github-sync/EXTERNAL/eigen3/test/swap.cpp	/^template<typename MatrixType> void swap(const MatrixType& m)$/;"	f
test_swap	tags/before-github-sync/EXTERNAL/eigen3/test/swap.cpp	/^void test_swap()$/;"	f
type	tags/before-github-sync/EXTERNAL/eigen3/test/swap.cpp	/^  typedef Matrix<_Scalar, _Rows, _Cols, _Options^RowMajor, _MaxRows, _MaxCols> type;$/;"	t	struct:other_matrix_type	file:
type	tags/before-github-sync/EXTERNAL/eigen3/test/swap.cpp	/^  typedef int type;$/;"	t	struct:other_matrix_type	file:
bug_159	tags/before-github-sync/EXTERNAL/eigen3/test/triangular.cpp	/^void bug_159()$/;"	f
test_triangular	tags/before-github-sync/EXTERNAL/eigen3/test/triangular.cpp	/^void test_triangular()$/;"	f
triangular_rect	tags/before-github-sync/EXTERNAL/eigen3/test/triangular.cpp	/^template<typename MatrixType> void triangular_rect(const MatrixType& m)$/;"	f
triangular_square	tags/before-github-sync/EXTERNAL/eigen3/test/triangular.cpp	/^template<typename MatrixType> void triangular_square(const MatrixType& m)$/;"	f
randMatrixSpecialUnitary	tags/before-github-sync/EXTERNAL/eigen3/test/umeyama.cpp	/^Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic> randMatrixSpecialUnitary(int size)$/;"	f
randMatrixUnitary	tags/before-github-sync/EXTERNAL/eigen3/test/umeyama.cpp	/^Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic> randMatrixUnitary(int size)$/;"	f
run_fixed_size_test	tags/before-github-sync/EXTERNAL/eigen3/test/umeyama.cpp	/^void run_fixed_size_test(int num_elements)$/;"	f
run_test	tags/before-github-sync/EXTERNAL/eigen3/test/umeyama.cpp	/^void run_test(int dim, int num_elements)$/;"	f
test_umeyama	tags/before-github-sync/EXTERNAL/eigen3/test/umeyama.cpp	/^void test_umeyama()$/;"	f
Depends	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^template<bool Align> struct Depends$/;"	s	file:
TestNew1	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^  TestNew1() : m(20,20) {}$/;"	f	struct:TestNew1
TestNew1	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^struct TestNew1$/;"	s	file:
TestNew2	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^struct TestNew2$/;"	s	file:
TestNew3	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^struct TestNew3$/;"	s	file:
TestNew4	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^struct TestNew4$/;"	s	file:
TestNew5	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^struct TestNew5$/;"	s	file:
TestNew6	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^struct TestNew6$/;"	s	file:
check_unalignedassert_good	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^void check_unalignedassert_good()$/;"	f
construct_at_boundary	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^void construct_at_boundary(int boundary)$/;"	f
f	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^  float f; \/\/ make the struct have sizeof%16!=0 to make it a little more tricky when we allow an array of 2 such objects$/;"	m	struct:TestNew4	file:
f	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^  float f; \/\/ try the f at first -- the EIGEN_ALIGN16 attribute of m should make that still work$/;"	m	struct:TestNew5	file:
f	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^  float f;$/;"	m	struct:Depends	file:
f	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^  float f;$/;"	m	struct:TestNew6	file:
m	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^  Matrix3d m; \/\/ good: m's size isn't a multiple of 16 bytes, so m doesn't have to be 16-byte aligned,$/;"	m	struct:TestNew2	file:
m	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^  Matrix4f m;$/;"	m	struct:TestNew5	file:
m	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^  Matrix<float,2,2,DontAlign> m; \/\/ good: no alignment requested$/;"	m	struct:TestNew6	file:
m	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^  MatrixXd m; \/\/ good: m will allocate its own array, taking care of alignment.$/;"	m	struct:TestNew1	file:
m	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^  Vector2d m;$/;"	m	struct:Depends	file:
m	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^  Vector2d m;$/;"	m	struct:TestNew4	file:
m	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^  Vector2f m; \/\/ good: m's size isn't a multiple of 16 bytes, so m doesn't have to be 16-byte aligned$/;"	m	struct:TestNew3	file:
test_unalignedassert	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^void test_unalignedassert()$/;"	f
unalignedassert	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedassert.cpp	/^void unalignedassert()$/;"	f
EIGEN_DEBUG_ALIGNED_LOAD	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedcount.cpp	30;"	d	file:
EIGEN_DEBUG_ALIGNED_STORE	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedcount.cpp	32;"	d	file:
EIGEN_DEBUG_UNALIGNED_LOAD	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedcount.cpp	31;"	d	file:
EIGEN_DEBUG_UNALIGNED_STORE	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedcount.cpp	33;"	d	file:
VERIFY_ALIGNED_UNALIGNED_COUNT	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedcount.cpp	35;"	d	file:
nb_load	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedcount.cpp	/^static int nb_load;$/;"	v	file:
nb_loadu	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedcount.cpp	/^static int nb_loadu;$/;"	v	file:
nb_store	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedcount.cpp	/^static int nb_store;$/;"	v	file:
nb_storeu	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedcount.cpp	/^static int nb_storeu;$/;"	v	file:
test_unalignedcount	tags/before-github-sync/EXTERNAL/eigen3/test/unalignedcount.cpp	/^void test_unalignedcount()$/;"	f
test_upperbidiagonalization	tags/before-github-sync/EXTERNAL/eigen3/test/upperbidiagonalization.cpp	/^void test_upperbidiagonalization()$/;"	f
upperbidiag	tags/before-github-sync/EXTERNAL/eigen3/test/upperbidiagonalization.cpp	/^template<typename MatrixType> void upperbidiag(const MatrixType& m)$/;"	f
EIGEN_DEBUG_ASSIGN	tags/before-github-sync/EXTERNAL/eigen3/test/vectorization_logic.cpp	25;"	d	file:
PacketSize	tags/before-github-sync/EXTERNAL/eigen3/test/vectorization_logic.cpp	/^    PacketSize = internal::packet_traits<Scalar>::size$/;"	e	enum:vectorization_logic::<anonymous>	file:
demangle_traversal	tags/before-github-sync/EXTERNAL/eigen3/test/vectorization_logic.cpp	/^std::string demangle_traversal(int t)$/;"	f
demangle_unrolling	tags/before-github-sync/EXTERNAL/eigen3/test/vectorization_logic.cpp	/^std::string demangle_unrolling(int t)$/;"	f
run	tags/before-github-sync/EXTERNAL/eigen3/test/vectorization_logic.cpp	/^  static void run() {}$/;"	f	struct:vectorization_logic
run	tags/before-github-sync/EXTERNAL/eigen3/test/vectorization_logic.cpp	/^  static void run()$/;"	f	struct:vectorization_logic
test_assign	tags/before-github-sync/EXTERNAL/eigen3/test/vectorization_logic.cpp	/^bool test_assign(const Dst&, const Src&, int traversal, int unrolling)$/;"	f
test_assign	tags/before-github-sync/EXTERNAL/eigen3/test/vectorization_logic.cpp	/^bool test_assign(int traversal, int unrolling)$/;"	f
test_redux	tags/before-github-sync/EXTERNAL/eigen3/test/vectorization_logic.cpp	/^bool test_redux(const Xpr&, int traversal, int unrolling)$/;"	f
test_vectorization_logic	tags/before-github-sync/EXTERNAL/eigen3/test/vectorization_logic.cpp	/^void test_vectorization_logic()$/;"	f
vectorization_logic	tags/before-github-sync/EXTERNAL/eigen3/test/vectorization_logic.cpp	/^template<typename Scalar, bool Enable = internal::packet_traits<Scalar>::Vectorizable> struct vectorization_logic$/;"	s	file:
vectorization_logic	tags/before-github-sync/EXTERNAL/eigen3/test/vectorization_logic.cpp	/^template<typename Scalar> struct vectorization_logic<Scalar,false>$/;"	s	file:
matrixVisitor	tags/before-github-sync/EXTERNAL/eigen3/test/visitor.cpp	/^template<typename MatrixType> void matrixVisitor(const MatrixType& p)$/;"	f
test_visitor	tags/before-github-sync/EXTERNAL/eigen3/test/visitor.cpp	/^void test_visitor()$/;"	f
vectorVisitor	tags/before-github-sync/EXTERNAL/eigen3/test/visitor.cpp	/^template<typename VectorType> void vectorVisitor(const VectorType& w)$/;"	f
test_zerosized	tags/before-github-sync/EXTERNAL/eigen3/test/zerosized.cpp	/^void test_zerosized()$/;"	f
zeroSizedMatrix	tags/before-github-sync/EXTERNAL/eigen3/test/zerosized.cpp	/^template<typename MatrixType> void zeroSizedMatrix()$/;"	f
zeroSizedVector	tags/before-github-sync/EXTERNAL/eigen3/test/zerosized.cpp	/^template<typename VectorType> void zeroSizedVector()$/;"	f
ActiveInput	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	/^  typedef Matrix<ActiveScalar, InputsAtCompileTime, 1> ActiveInput;$/;"	t	class:Eigen::AutoDiffJacobian
ActiveScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	/^  typedef AutoDiffScalar<DerivativeType> ActiveScalar;$/;"	t	class:Eigen::AutoDiffJacobian
ActiveValue	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	/^  typedef Matrix<ActiveScalar, ValuesAtCompileTime, 1> ActiveValue;$/;"	t	class:Eigen::AutoDiffJacobian
AutoDiffJacobian	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	/^  AutoDiffJacobian() : Functor() {}$/;"	f	class:Eigen::AutoDiffJacobian
AutoDiffJacobian	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	/^  AutoDiffJacobian(const Functor& f) : Functor(f) {}$/;"	f	class:Eigen::AutoDiffJacobian
AutoDiffJacobian	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	/^  AutoDiffJacobian(const T0& a0) : Functor(a0) {}$/;"	f	class:Eigen::AutoDiffJacobian
AutoDiffJacobian	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	/^  AutoDiffJacobian(const T0& a0, const T1& a1) : Functor(a0, a1) {}$/;"	f	class:Eigen::AutoDiffJacobian
AutoDiffJacobian	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	/^  AutoDiffJacobian(const T0& a0, const T1& a1, const T1& a2) : Functor(a0, a1, a2) {}$/;"	f	class:Eigen::AutoDiffJacobian
AutoDiffJacobian	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	/^template<typename Functor> class AutoDiffJacobian : public Functor$/;"	c	namespace:Eigen
DerivativeType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	/^  typedef Matrix<Scalar,InputsAtCompileTime,1> DerivativeType;$/;"	t	class:Eigen::AutoDiffJacobian
EIGEN_AUTODIFF_JACOBIAN_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	26;"	d
Eigen	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	/^namespace Eigen$/;"	n
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	/^  typedef typename JacobianType::Index Index;$/;"	t	class:Eigen::AutoDiffJacobian
InputType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	/^  typedef typename Functor::InputType InputType;$/;"	t	class:Eigen::AutoDiffJacobian
InputsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	/^    InputsAtCompileTime = Functor::InputsAtCompileTime,$/;"	e	enum:Eigen::AutoDiffJacobian::<anonymous>
JacobianType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	/^  typedef typename Functor::JacobianType JacobianType;$/;"	t	class:Eigen::AutoDiffJacobian
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	/^  typedef typename JacobianType::Scalar Scalar;$/;"	t	class:Eigen::AutoDiffJacobian
ValueType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	/^  typedef typename Functor::ValueType ValueType;$/;"	t	class:Eigen::AutoDiffJacobian
ValuesAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	/^    ValuesAtCompileTime = Functor::ValuesAtCompileTime$/;"	e	enum:Eigen::AutoDiffJacobian::<anonymous>
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffJacobian.h	/^  void operator() (const InputType& x, ValueType* v, JacobianType* _jac=0) const$/;"	f	class:Eigen::AutoDiffJacobian
A	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^  typedef Matrix<A_Scalar, A_Rows, A_Cols, A_Options, A_MaxRows, A_MaxCols> A;$/;"	t	struct:Eigen::internal::make_coherent_impl
AutoDiffScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    AutoDiffScalar() {}$/;"	f	class:Eigen::AutoDiffScalar
AutoDiffScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    AutoDiffScalar(const AutoDiffScalar& other)$/;"	f	class:Eigen::AutoDiffScalar
AutoDiffScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    AutoDiffScalar(const AutoDiffScalar<OtherDerType>& other)$/;"	f	class:Eigen::AutoDiffScalar
AutoDiffScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    AutoDiffScalar(const Scalar& value, const DerType& der)$/;"	f	class:Eigen::AutoDiffScalar
AutoDiffScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    AutoDiffScalar(const Scalar& value, int nbDer, int derNumber)$/;"	f	class:Eigen::AutoDiffScalar
AutoDiffScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    explicit AutoDiffScalar(const Real& value)$/;"	f	class:Eigen::AutoDiffScalar
AutoDiffScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^class AutoDiffScalar$/;"	c	namespace:Eigen
B	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^  typedef Matrix<B_Scalar, B_Rows, B_Cols, B_Options, B_MaxRows, B_MaxCols> B;$/;"	t	struct:Eigen::internal::make_coherent_impl
Base	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^                       typename NumTraits<typename internal::traits<typename internal::remove_all<_DerType>::type>::Scalar>::Real>::value> Base;$/;"	t	class:Eigen::AutoDiffScalar
DerType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    typedef typename internal::remove_all<_DerType>::type DerType;$/;"	t	class:Eigen::AutoDiffScalar
DerType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^  typedef typename remove_all<_DerType>::type DerType;$/;"	t	struct:Eigen::internal::auto_diff_special_op
EIGEN_AUTODIFF_DECLARE_GLOBAL_UNARY	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	476;"	d
EIGEN_AUTODIFF_DECLARE_GLOBAL_UNARY	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	562;"	d
EIGEN_AUTODIFF_SCALAR_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	26;"	d
Eigen	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^namespace Eigen {$/;"	n
Nested	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^  typedef AutoDiffScalar<DerType>& Nested;$/;"	t	struct:Eigen::NumTraits
NonInteger	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^  typedef AutoDiffScalar<DerType> NonInteger;$/;"	t	struct:Eigen::NumTraits
NumTraits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^template<typename DerType> struct NumTraits<AutoDiffScalar<DerType> >$/;"	s	namespace:Eigen
Real	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    typedef typename NumTraits<Scalar>::Real Real;$/;"	t	class:Eigen::AutoDiffScalar
Real	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^  typedef typename NumTraits<Scalar>::Real Real;$/;"	t	struct:Eigen::internal::auto_diff_special_op
RequireInitialization	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    RequireInitialization = 1$/;"	e	enum:Eigen::NumTraits::<anonymous>
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^   typedef Matrix<A_Scalar, A_Rows, A_Cols, A_Options, A_MaxRows, A_MaxCols> ReturnType;$/;"	t	struct:Eigen::internal::scalar_product_traits
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^ typedef AutoDiffScalar<DerType> ReturnType;$/;"	t	struct:Eigen::internal::scalar_product_traits
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    typedef typename internal::traits<DerType>::Scalar Scalar;$/;"	t	class:Eigen::AutoDiffScalar
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^  typedef typename traits<DerType>::Scalar Scalar;$/;"	t	struct:Eigen::internal::auto_diff_special_op
auto_diff_special_op	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^struct auto_diff_special_op<_DerType, false>$/;"	s	namespace:Eigen::internal
auto_diff_special_op	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^struct auto_diff_special_op<_DerType, true>$/;"	s	namespace:Eigen::internal
conj	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^inline const AutoDiffScalar<DerType>& conj(const AutoDiffScalar<DerType>& x)  { return x; }$/;"	f	namespace:Eigen::internal
derivatives	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    inline DerType& derivatives() { return m_derivatives; }$/;"	f	class:Eigen::AutoDiffScalar
derivatives	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    inline const DerType& derivatives() const { return m_derivatives; }$/;"	f	class:Eigen::AutoDiffScalar
derived	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^  AutoDiffScalar<_DerType>& derived() { return *static_cast<AutoDiffScalar<_DerType>*>(this); }$/;"	f	struct:Eigen::internal::auto_diff_special_op
derived	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^  const AutoDiffScalar<_DerType>& derived() const { return *static_cast<const AutoDiffScalar<_DerType>*>(this); }$/;"	f	struct:Eigen::internal::auto_diff_special_op
imag	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^inline typename DerType::Scalar imag(const AutoDiffScalar<DerType>&)    { return 0.; }$/;"	f	namespace:Eigen::internal
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^namespace internal {$/;"	n	namespace:Eigen
m_derivatives	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    DerType m_derivatives;$/;"	m	class:Eigen::AutoDiffScalar
m_value	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    Scalar m_value;$/;"	m	class:Eigen::AutoDiffScalar
make_coherent	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^void make_coherent(const A& a, const B&b)$/;"	f	namespace:Eigen::internal
make_coherent_impl	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^struct make_coherent_impl {$/;"	s	namespace:Eigen::internal
make_coherent_impl	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^struct make_coherent_impl<A, Matrix<B_Scalar, B_Rows, B_Cols, B_Options, B_MaxRows, B_MaxCols> > {$/;"	s	namespace:Eigen::internal
make_coherent_impl	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^struct make_coherent_impl<Matrix<A_Scalar, A_Rows, A_Cols, A_Options, A_MaxRows, A_MaxCols>, B> {$/;"	s	namespace:Eigen::internal
make_coherent_impl	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^struct make_coherent_impl<Matrix<A_Scalar, A_Rows, A_Cols, A_Options, A_MaxRows, A_MaxCols>,$/;"	s	namespace:Eigen::internal
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    operator*(const AutoDiffScalar<OtherDerType>& other) const$/;"	f	class:Eigen::AutoDiffScalar
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    operator*(const Scalar& other) const$/;"	f	class:Eigen::AutoDiffScalar
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    operator*(const Scalar& other, const AutoDiffScalar& a)$/;"	f	class:Eigen::AutoDiffScalar
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^  operator*(const Real& other) const$/;"	f	struct:Eigen::internal::auto_diff_special_op
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^  operator*(const Real& other, const AutoDiffScalar<_DerType>& a)$/;"	f	struct:Eigen::internal::auto_diff_special_op
operator *=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    inline AutoDiffScalar& operator*=(const AutoDiffScalar<OtherDerType>& other)$/;"	f	class:Eigen::AutoDiffScalar
operator *=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    inline AutoDiffScalar& operator*=(const Scalar& other)$/;"	f	class:Eigen::AutoDiffScalar
operator *=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^  inline AutoDiffScalar<_DerType>& operator*=(const Scalar& other)$/;"	f	struct:Eigen::internal::auto_diff_special_op
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    friend inline const AutoDiffScalar<DerType&> operator+(const Scalar& a, const AutoDiffScalar& b)$/;"	f	class:Eigen::AutoDiffScalar
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    inline const AutoDiffScalar<DerType&> operator+(const Scalar& other) const$/;"	f	class:Eigen::AutoDiffScalar
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    operator+(const AutoDiffScalar<OtherDerType>& other) const$/;"	f	class:Eigen::AutoDiffScalar
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^  friend inline const AutoDiffScalar<DerType&> operator+(const Real& a, const AutoDiffScalar<_DerType>& b)$/;"	f	struct:Eigen::internal::auto_diff_special_op
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^  inline const AutoDiffScalar<DerType&> operator+(const Real& other) const$/;"	f	struct:Eigen::internal::auto_diff_special_op
operator +=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    inline AutoDiffScalar& operator+=(const Scalar& other)$/;"	f	class:Eigen::AutoDiffScalar
operator +=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    operator+=(const AutoDiffScalar<OtherDerType>& other)$/;"	f	class:Eigen::AutoDiffScalar
operator +=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^  inline AutoDiffScalar<_DerType>& operator+=(const Real& other)$/;"	f	struct:Eigen::internal::auto_diff_special_op
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    operator-() const$/;"	f	class:Eigen::AutoDiffScalar
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    operator-(const AutoDiffScalar<OtherDerType>& other) const$/;"	f	class:Eigen::AutoDiffScalar
operator -=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    operator-=(const AutoDiffScalar<OtherDerType>& other)$/;"	f	class:Eigen::AutoDiffScalar
operator /	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    operator\/(const AutoDiffScalar<OtherDerType>& other) const$/;"	f	class:Eigen::AutoDiffScalar
operator /	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    operator\/(const Scalar& other) const$/;"	f	class:Eigen::AutoDiffScalar
operator /	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    operator\/(const Scalar& other, const AutoDiffScalar& a)$/;"	f	class:Eigen::AutoDiffScalar
operator <<	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    friend  std::ostream & operator << (std::ostream & s, const AutoDiffScalar& a)$/;"	f	class:Eigen::AutoDiffScalar
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    inline AutoDiffScalar& operator=(const AutoDiffScalar& other)$/;"	f	class:Eigen::AutoDiffScalar
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    inline AutoDiffScalar& operator=(const AutoDiffScalar<OtherDerType>& other)$/;"	f	class:Eigen::AutoDiffScalar
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^  pow(const Eigen::AutoDiffScalar<DerType>& x, typename Eigen::internal::traits<DerType>::Scalar y)$/;"	f	namespace:std
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^pow(const AutoDiffScalar<DerType>& x, typename traits<DerType>::Scalar y)$/;"	f	namespace:Eigen::internal
real	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^inline const AutoDiffScalar<DerType>& real(const AutoDiffScalar<DerType>& x)  { return x; }$/;"	f	namespace:Eigen::internal
run	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^  static void run(A& a, B& b) {$/;"	f	struct:Eigen::internal::make_coherent_impl
run	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^  static void run(A&, B&) {}$/;"	f	struct:Eigen::internal::make_coherent_impl
scalar_product_traits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^struct scalar_product_traits<AutoDiffScalar<DerType>,T>$/;"	s	namespace:Eigen::internal
scalar_product_traits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^template<typename A_Scalar, int A_Rows, int A_Cols, int A_Options, int A_MaxRows, int A_MaxCols> struct scalar_product_traits<A_Scalar, Matrix<A_Scalar, A_Rows, A_Cols, A_Options, A_MaxRows, A_MaxCols> >$/;"	s	namespace:Eigen::internal
scalar_product_traits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^template<typename A_Scalar, int A_Rows, int A_Cols, int A_Options, int A_MaxRows, int A_MaxCols> struct scalar_product_traits<Matrix<A_Scalar, A_Rows, A_Cols, A_Options, A_MaxRows, A_MaxCols>,A_Scalar>$/;"	s	namespace:Eigen::internal
std	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^namespace std$/;"	n
value	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    inline Scalar& value() { return m_value; }$/;"	f	class:Eigen::AutoDiffScalar
value	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffScalar.h	/^    inline const Scalar& value() const { return m_value; }$/;"	f	class:Eigen::AutoDiffScalar
ActiveScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    typedef AutoDiffScalar<Matrix<BaseScalar,JacobianType::RowsAtCompileTime,1> > ActiveScalar;$/;"	t	class:Eigen::AutoDiffVector
AutoDiffVector	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    inline AutoDiffVector() {}$/;"	f	class:Eigen::AutoDiffVector
AutoDiffVector	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    inline AutoDiffVector(const AutoDiffVector& other)$/;"	f	class:Eigen::AutoDiffVector
AutoDiffVector	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    inline AutoDiffVector(const AutoDiffVector<OtherValueType, OtherJacobianType>& other)$/;"	f	class:Eigen::AutoDiffVector
AutoDiffVector	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    inline AutoDiffVector(const ValueType& values)$/;"	f	class:Eigen::AutoDiffVector
AutoDiffVector	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    inline AutoDiffVector(const ValueType& values, const JacobianType& jac)$/;"	f	class:Eigen::AutoDiffVector
AutoDiffVector	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^class AutoDiffVector$/;"	c	namespace:Eigen
BaseScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    typedef typename internal::traits<ValueType>::Scalar BaseScalar;$/;"	t	class:Eigen::AutoDiffVector
CoeffType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    typedef AutoDiffScalar<typename JacobianType::ColXpr> CoeffType;$/;"	t	class:Eigen::AutoDiffVector
EIGEN_AUTODIFF_VECTOR_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	26;"	d
Eigen	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^namespace Eigen {$/;"	n
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    typedef typename JacobianType::Index Index;$/;"	t	class:Eigen::AutoDiffVector
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    typedef ActiveScalar Scalar;$/;"	t	class:Eigen::AutoDiffVector
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    CoeffType coeffRef(Index i) { return CoeffType(m_values[i], m_jacobian.col(i)); }$/;"	f	class:Eigen::AutoDiffVector
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    const CoeffType coeffRef(Index i) const { return CoeffType(m_values[i], m_jacobian.col(i)); }$/;"	f	class:Eigen::AutoDiffVector
jacobian	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    inline JacobianType& jacobian() { return m_jacobian; }$/;"	f	class:Eigen::AutoDiffVector
jacobian	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    inline const JacobianType& jacobian() const { return m_jacobian; }$/;"	f	class:Eigen::AutoDiffVector
m_jacobian	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    JacobianType m_jacobian;$/;"	m	class:Eigen::AutoDiffVector
m_values	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    ValueType m_values;$/;"	m	class:Eigen::AutoDiffVector
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    CoeffType operator() (Index i) { return CoeffType(m_values[i], m_jacobian.col(i)); }$/;"	f	class:Eigen::AutoDiffVector
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    const CoeffType operator() (Index i) const { return CoeffType(m_values[i], m_jacobian.col(i)); }$/;"	f	class:Eigen::AutoDiffVector
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    operator*(const BaseScalar& other) const$/;"	f	class:Eigen::AutoDiffVector
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    operator*(const Scalar& other, const AutoDiffVector& v)$/;"	f	class:Eigen::AutoDiffVector
operator *=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    inline AutoDiffVector& operator*=(const AutoDiffVector<OtherValueType,OtherJacobianType>& other)$/;"	f	class:Eigen::AutoDiffVector
operator *=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    inline AutoDiffVector& operator*=(const Scalar& other)$/;"	f	class:Eigen::AutoDiffVector
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    operator+(const AutoDiffVector<OtherValueType,OtherJacobianType>& other) const$/;"	f	class:Eigen::AutoDiffVector
operator +=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    operator+=(const AutoDiffVector<OtherValueType,OtherJacobianType>& other)$/;"	f	class:Eigen::AutoDiffVector
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    operator-() const$/;"	f	class:Eigen::AutoDiffVector
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    operator-(const AutoDiffVector<OtherValueType,OtherJacobianType>& other) const$/;"	f	class:Eigen::AutoDiffVector
operator -=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    operator-=(const AutoDiffVector<OtherValueType,OtherJacobianType>& other)$/;"	f	class:Eigen::AutoDiffVector
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    inline AutoDiffVector& operator=(const AutoDiffVector& other)$/;"	f	class:Eigen::AutoDiffVector
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    inline AutoDiffVector& operator=(const AutoDiffVector<OtherValueType, OtherJacobianType>& other)$/;"	f	class:Eigen::AutoDiffVector
operator []	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    CoeffType operator[] (Index i) { return CoeffType(m_values[i], m_jacobian.col(i)); }$/;"	f	class:Eigen::AutoDiffVector
operator []	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    const CoeffType operator[] (Index i) const { return CoeffType(m_values[i], m_jacobian.col(i)); }$/;"	f	class:Eigen::AutoDiffVector
size	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    Index size() const { return m_values.size(); }$/;"	f	class:Eigen::AutoDiffVector
sum	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    Scalar sum() const { \/*std::cerr << "sum \\n\\n";*\/ \/*std::cerr << m_jacobian.rowwise().sum() << "\\n\\n";*\/ return Scalar(m_values.sum(), m_jacobian.rowwise().sum()); }$/;"	f	class:Eigen::AutoDiffVector
values	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    inline ValueType& values() { return m_values; }$/;"	f	class:Eigen::AutoDiffVector
values	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/AutoDiff/AutoDiffVector.h	/^    inline const ValueType& values() const { return m_values; }$/;"	f	class:Eigen::AutoDiffVector
BVIntersect	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^void BVIntersect(const BVH &tree, Intersector &intersector)$/;"	f
BVIntersect	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^void BVIntersect(const BVH1 &tree1, const BVH2 &tree2, Intersector &intersector) \/\/TODO: tandem descent when it makes sense$/;"	f
BVMinimize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^typename Minimizer::Scalar BVMinimize(const BVH &tree, Minimizer &minimizer)$/;"	f
BVMinimize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^typename Minimizer::Scalar BVMinimize(const BVH1 &tree1, const BVH2 &tree2, Minimizer &minimizer)$/;"	f
EIGEN_BVALGORITHMS_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	26;"	d
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  typedef typename Minimizer::Scalar Scalar;$/;"	t	struct:internal::minimizer_helper1
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  typedef typename Minimizer::Scalar Scalar;$/;"	t	struct:internal::minimizer_helper2
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^namespace internal {$/;"	n
intersectObject	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  bool intersectObject(const Object1 &obj) { return intersector.intersectObjectObject(obj, stored); }$/;"	f	struct:internal::intersector_helper1
intersectObject	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  bool intersectObject(const Object2 &obj) { return intersector.intersectObjectObject(stored, obj); }$/;"	f	struct:internal::intersector_helper2
intersectVolume	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  bool intersectVolume(const Volume1 &vol) { return intersector.intersectVolumeObject(vol, stored); }$/;"	f	struct:internal::intersector_helper1
intersectVolume	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  bool intersectVolume(const Volume2 &vol) { return intersector.intersectObjectVolume(stored, vol); }$/;"	f	struct:internal::intersector_helper2
intersect_helper	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^bool intersect_helper(const BVH &tree, Intersector &intersector, typename BVH::Index root)$/;"	f	namespace:internal
intersector	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  Intersector &intersector;$/;"	m	struct:internal::intersector_helper1
intersector	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  Intersector &intersector;$/;"	m	struct:internal::intersector_helper2
intersector_helper1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  intersector_helper1(const Object2 &inStored, Intersector &in) : stored(inStored), intersector(in) {}$/;"	f	struct:internal::intersector_helper1
intersector_helper1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^struct intersector_helper1$/;"	s	namespace:internal
intersector_helper2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  intersector_helper2(const Object1 &inStored, Intersector &in) : stored(inStored), intersector(in) {}$/;"	f	struct:internal::intersector_helper2
intersector_helper2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^struct intersector_helper2$/;"	s	namespace:internal
minimize_helper	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^typename Minimizer::Scalar minimize_helper(const BVH &tree, Minimizer &minimizer, typename BVH::Index root, typename Minimizer::Scalar minimum)$/;"	f	namespace:internal
minimizer	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  Minimizer &minimizer;$/;"	m	struct:internal::minimizer_helper1
minimizer	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  Minimizer &minimizer;$/;"	m	struct:internal::minimizer_helper2
minimizer_helper1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  minimizer_helper1(const Object2 &inStored, Minimizer &m) : stored(inStored), minimizer(m) {}$/;"	f	struct:internal::minimizer_helper1
minimizer_helper1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^struct minimizer_helper1$/;"	s	namespace:internal
minimizer_helper2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  minimizer_helper2(const Object1 &inStored, Minimizer &m) : stored(inStored), minimizer(m) {}$/;"	f	struct:internal::minimizer_helper2
minimizer_helper2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^struct minimizer_helper2$/;"	s	namespace:internal
minimumOnObject	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  Scalar minimumOnObject(const Object1 &obj) { return minimizer.minimumOnObjectObject(obj, stored); }$/;"	f	struct:internal::minimizer_helper1
minimumOnObject	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  Scalar minimumOnObject(const Object2 &obj) { return minimizer.minimumOnObjectObject(stored, obj); }$/;"	f	struct:internal::minimizer_helper2
minimumOnVolume	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  Scalar minimumOnVolume(const Volume1 &vol) { return minimizer.minimumOnVolumeObject(vol, stored); }$/;"	f	struct:internal::minimizer_helper1
minimumOnVolume	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  Scalar minimumOnVolume(const Volume2 &vol) { return minimizer.minimumOnObjectVolume(stored, vol); }$/;"	f	struct:internal::minimizer_helper2
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  minimizer_helper1& operator=(const minimizer_helper1&) {}$/;"	f	struct:internal::minimizer_helper1
stored	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  Object1 stored;$/;"	m	struct:internal::intersector_helper2
stored	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  Object1 stored;$/;"	m	struct:internal::minimizer_helper2
stored	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  Object2 stored;$/;"	m	struct:internal::intersector_helper1
stored	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/BVAlgorithms.h	/^  Object2 stored;$/;"	m	struct:internal::minimizer_helper1
Dim	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  enum { Dim = _Dim };$/;"	e	enum:KdBVH::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  typedef int Index;$/;"	t	class:KdBVH
KDBVH_H_INCLUDED	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	26;"	d
KdBVH	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  KdBVH() {}$/;"	f	class:KdBVH
KdBVH	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  template<typename Iter> KdBVH(Iter begin, Iter end) { init(begin, end, 0, 0); } \/\/int is recognized by init as not being an iterator type$/;"	f	class:KdBVH
KdBVH	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  template<typename OIter, typename BIter> KdBVH(OIter begin, OIter end, BIter boxBegin, BIter boxEnd) { init(begin, end, boxBegin, boxEnd); }$/;"	f	class:KdBVH
KdBVH	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^template<typename _Scalar, int _Dim, typename _Object> class KdBVH$/;"	c
Object	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  typedef _Object Object;$/;"	t	class:KdBVH
ObjectIterator	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  typedef const Object *ObjectIterator;$/;"	t	class:KdBVH
ObjectList	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  typedef std::vector<Object, aligned_allocator<Object> > ObjectList;$/;"	t	class:KdBVH
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  typedef _Scalar Scalar;$/;"	t	class:KdBVH
VIPair	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  typedef internal::vector_int_pair<Scalar, Dim> VIPair;$/;"	t	class:KdBVH
VIPairList	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  typedef std::vector<VIPair, aligned_allocator<VIPair> > VIPairList;$/;"	t	class:KdBVH
VectorComparator	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^    VectorComparator(int inDim) : dim(inDim) {}$/;"	f	struct:KdBVH::VectorComparator
VectorComparator	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  struct VectorComparator \/\/compares vectors, or, more specificall, VIPairs along a particular dimension$/;"	s	class:KdBVH
VectorType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  typedef Matrix<Scalar, Dim, 1> VectorType;$/;"	t	class:KdBVH
VectorType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  typedef Matrix<Scalar, Dim, 1> VectorType;$/;"	t	struct:internal::vector_int_pair
Volume	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  typedef AlignedBox<Scalar, Dim> Volume;$/;"	t	class:KdBVH
VolumeIterator	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  typedef const int *VolumeIterator; \/\/the iterators are just pointers into the tree's vectors$/;"	t	class:KdBVH
VolumeList	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  typedef std::vector<Volume, aligned_allocator<Volume> > VolumeList;$/;"	t	class:KdBVH
boxes	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  VolumeList boxes;$/;"	m	class:KdBVH
build	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  void build(VIPairList &objCenters, int from, int to, const VolumeList &objBoxes, int dim)$/;"	f	class:KdBVH
children	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  std::vector<int> children; \/\/children of x are children[2x] and children[2x+1], indices bigger than boxes.size() index into objects.$/;"	m	class:KdBVH
dim	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^    int dim;$/;"	m	struct:KdBVH::VectorComparator
first	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  VectorType first;$/;"	m	struct:internal::vector_int_pair
getChildren	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  EIGEN_STRONG_INLINE void getChildren(Index index, VolumeIterator &outVBegin, VolumeIterator &outVEnd,$/;"	f	class:KdBVH
getRootIndex	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  inline Index getRootIndex() const { return (int)boxes.size() - 1; }$/;"	f	class:KdBVH
getVolume	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  inline const Volume &getVolume(Index index) const$/;"	f	class:KdBVH
get_boxes_helper	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^struct get_boxes_helper {$/;"	s	namespace:internal
get_boxes_helper	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^struct get_boxes_helper<ObjectList, VolumeList, int> {$/;"	s	namespace:internal
init	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  template<typename Iter> void init(Iter begin, Iter end) { init(begin, end, 0, 0); }$/;"	f	class:KdBVH
init	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  template<typename OIter, typename BIter> void init(OIter begin, OIter end, BIter boxBegin, BIter boxEnd)$/;"	f	class:KdBVH
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^namespace internal {$/;"	n
objects	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  ObjectList objects;$/;"	m	class:KdBVH
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^    inline bool operator()(const VIPair &v1, const VIPair &v2) const { return v1.first[dim] < v2.first[dim]; }$/;"	f	struct:KdBVH::VectorComparator
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  void operator()(const ObjectList &objects, BoxIter boxBegin, BoxIter boxEnd, VolumeList &outBoxes)$/;"	f	struct:internal::get_boxes_helper
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  void operator()(const ObjectList &objects, int, int, VolumeList &outBoxes)$/;"	f	struct:internal::get_boxes_helper
second	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  int second;$/;"	m	struct:internal::vector_int_pair
vector_int_pair	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^  vector_int_pair(const VectorType &v, int i) : first(v), second(i) {}$/;"	f	struct:internal::vector_int_pair
vector_int_pair	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/BVH/KdBVH.h	/^struct vector_int_pair$/;"	s	namespace:internal
Complex	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      typedef std::complex<Scalar> Complex;$/;"	t	struct:internal::fftw_impl
PlanData	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      typedef fftw_plan<Scalar> PlanData;$/;"	t	struct:internal::fftw_impl
PlanMap	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      typedef std::map<int64_t,PlanData> PlanMap;$/;"	t	struct:internal::fftw_impl
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      typedef _Scalar Scalar;$/;"	t	struct:internal::fftw_impl
clear	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      void clear() $/;"	f	struct:internal::fftw_impl
complex_type	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      typedef fftw_complex complex_type;$/;"	t	struct:internal::fftw_plan
complex_type	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      typedef fftwf_complex complex_type;$/;"	t	struct:internal::fftw_plan
complex_type	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      typedef fftwl_complex complex_type;$/;"	t	struct:internal::fftw_plan
fftw_cast	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^  T * fftw_cast(const T* p)$/;"	f	namespace:internal
fftw_cast	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^  fftw_complex * fftw_cast( const std::complex<double> * p)$/;"	f	namespace:internal
fftw_cast	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^  fftwf_complex * fftw_cast( const std::complex<float> * p)$/;"	f	namespace:internal
fftw_cast	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^  fftwl_complex * fftw_cast( const std::complex<long double> * p)$/;"	f	namespace:internal
fftw_impl	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^  struct fftw_impl$/;"	s	namespace:internal
fftw_plan	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      fftw_plan() :m_plan(NULL) {}$/;"	f	struct:internal::fftw_plan
fftw_plan	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^  struct fftw_plan {};$/;"	s	namespace:internal
fftw_plan	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^  struct fftw_plan<double>$/;"	s	namespace:internal
fftw_plan	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^  struct fftw_plan<float>$/;"	s	namespace:internal
fftw_plan	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^  struct fftw_plan<long double>$/;"	s	namespace:internal
fwd	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      void fwd( Complex * dst,const Complex *src,int nfft)$/;"	f	struct:internal::fftw_impl
fwd	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      void fwd( Complex * dst,const Scalar * src,int nfft) $/;"	f	struct:internal::fftw_impl
fwd	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      void fwd(complex_type * dst,complex_type * src,int nfft) {$/;"	f	struct:internal::fftw_plan
fwd	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      void fwd(complex_type * dst,scalar_type * src,int nfft) {$/;"	f	struct:internal::fftw_plan
fwd2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      void fwd2( complex_type * dst,complex_type * src,int n0,int n1) {$/;"	f	struct:internal::fftw_plan
fwd2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      void fwd2(Complex * dst, const Complex * src, int n0,int n1)$/;"	f	struct:internal::fftw_impl
get_plan	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      PlanData & get_plan(int n0,int n1,bool inverse,void * dst,const void * src)$/;"	f	struct:internal::fftw_impl
get_plan	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      PlanData & get_plan(int nfft,bool inverse,void * dst,const void * src)$/;"	f	struct:internal::fftw_impl
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^namespace internal {$/;"	n
inv	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      void inv( Scalar * dst,const Complex * src,int nfft) $/;"	f	struct:internal::fftw_impl
inv	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      void inv(Complex * dst,const Complex  *src,int nfft)$/;"	f	struct:internal::fftw_impl
inv	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      void inv(complex_type * dst,complex_type * src,int nfft) {$/;"	f	struct:internal::fftw_plan
inv	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      void inv(scalar_type * dst,complex_type * src,int nfft) {$/;"	f	struct:internal::fftw_plan
inv2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      void inv2( complex_type * dst,complex_type * src,int n0,int n1) {$/;"	f	struct:internal::fftw_plan
inv2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      void inv2(Complex * dst, const Complex * src, int n0,int n1)$/;"	f	struct:internal::fftw_impl
m_plan	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      ::fftw_plan m_plan;$/;"	m	struct:internal::fftw_plan
m_plan	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      fftwf_plan m_plan;$/;"	m	struct:internal::fftw_plan
m_plan	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      fftwl_plan m_plan;$/;"	m	struct:internal::fftw_plan
m_plans	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      PlanMap m_plans;$/;"	m	struct:internal::fftw_impl
scalar_type	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      typedef double scalar_type;$/;"	t	struct:internal::fftw_plan
scalar_type	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      typedef float scalar_type;$/;"	t	struct:internal::fftw_plan
scalar_type	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      typedef long double scalar_type;$/;"	t	struct:internal::fftw_plan
~fftw_plan	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      ~fftw_plan() {if (m_plan) fftw_destroy_plan(m_plan);}$/;"	f	struct:internal::fftw_plan
~fftw_plan	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      ~fftw_plan() {if (m_plan) fftwf_destroy_plan(m_plan);}$/;"	f	struct:internal::fftw_plan
~fftw_plan	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_fftw_impl.h	/^      ~fftw_plan() {if (m_plan) fftwl_destroy_plan(m_plan);}$/;"	f	struct:internal::fftw_plan
Complex	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^  typedef std::complex<Scalar> Complex;$/;"	t	struct:internal::kiss_cpx_fft
Complex	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^  typedef std::complex<Scalar> Complex;$/;"	t	struct:internal::kissfft_impl
PlanData	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^  typedef kiss_cpx_fft<Scalar> PlanData;$/;"	t	struct:internal::kissfft_impl
PlanKey	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^    int PlanKey(int nfft, bool isinverse) const { return (nfft<<1) | int(isinverse); }$/;"	f	struct:internal::kissfft_impl
PlanMap	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^  typedef std::map<int,PlanData> PlanMap;$/;"	t	struct:internal::kissfft_impl
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^  typedef _Scalar Scalar;$/;"	t	struct:internal::kiss_cpx_fft
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^  typedef _Scalar Scalar;$/;"	t	struct:internal::kissfft_impl
bfly2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^    void bfly2( Complex * Fout, const size_t fstride, int m)$/;"	f	struct:internal::kiss_cpx_fft
bfly3	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^    void bfly3( Complex * Fout, const size_t fstride, const size_t m)$/;"	f	struct:internal::kiss_cpx_fft
bfly4	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^    void bfly4( Complex * Fout, const size_t fstride, const size_t m)$/;"	f	struct:internal::kiss_cpx_fft
bfly5	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^    void bfly5( Complex * Fout, const size_t fstride, const size_t m)$/;"	f	struct:internal::kiss_cpx_fft
bfly_generic	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^    void bfly_generic($/;"	f	struct:internal::kiss_cpx_fft
clear	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^  void clear() $/;"	f	struct:internal::kissfft_impl
factorize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^  void factorize(int nfft)$/;"	f	struct:internal::kiss_cpx_fft
fwd	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^    void fwd( Complex * dst,const Complex *src,int nfft)$/;"	f	struct:internal::kissfft_impl
fwd	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^    void fwd( Complex * dst,const Scalar * src,int nfft) $/;"	f	struct:internal::kissfft_impl
fwd2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^    void fwd2( Complex * dst,const Complex *src,int n0,int n1)$/;"	f	struct:internal::kissfft_impl
get_plan	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^    PlanData & get_plan(int nfft, bool inverse)$/;"	f	struct:internal::kissfft_impl
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^namespace internal {$/;"	n
inv	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^    void inv( Scalar * dst,const Complex * src,int nfft) $/;"	f	struct:internal::kissfft_impl
inv	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^    void inv(Complex * dst,const Complex  *src,int nfft)$/;"	f	struct:internal::kissfft_impl
inv2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^    void inv2( Complex * dst,const Complex *src,int n0,int n1)$/;"	f	struct:internal::kissfft_impl
kiss_cpx_fft	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^struct kiss_cpx_fft$/;"	s	namespace:internal
kissfft_impl	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^struct kissfft_impl$/;"	s	namespace:internal
m_inverse	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^  bool m_inverse;$/;"	m	struct:internal::kiss_cpx_fft
m_plans	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^  PlanMap m_plans;$/;"	m	struct:internal::kissfft_impl
m_realTwiddles	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^  std::map<int, std::vector<Complex> > m_realTwiddles;$/;"	m	struct:internal::kissfft_impl
m_scratchBuf	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^  std::vector<Complex> m_scratchBuf;$/;"	m	struct:internal::kiss_cpx_fft
m_stageRadix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^  std::vector<int> m_stageRadix;$/;"	m	struct:internal::kiss_cpx_fft
m_stageRemainder	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^  std::vector<int> m_stageRemainder;$/;"	m	struct:internal::kiss_cpx_fft
m_tmpBuf1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^  std::vector<Complex> m_tmpBuf1;$/;"	m	struct:internal::kissfft_impl
m_tmpBuf2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^  std::vector<Complex> m_tmpBuf2;$/;"	m	struct:internal::kissfft_impl
m_twiddles	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^  std::vector<Complex> m_twiddles;$/;"	m	struct:internal::kiss_cpx_fft
make_twiddles	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^    void make_twiddles(int nfft,bool inverse)$/;"	f	struct:internal::kiss_cpx_fft
real_twiddles	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^    Complex * real_twiddles(int ncfft2)$/;"	f	struct:internal::kissfft_impl
work	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/FFT/ei_kissfft_impl.h	/^    void work( int stage,Complex * xout, const _Src * xin, size_t fstride,size_t in_stride)$/;"	f	struct:internal::kiss_cpx_fft
EIGEN_CONSTRAINEDCG_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h	49;"	d
constrained_cg	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h	/^void constrained_cg(const TMatrix& A, const CMatrix& C, VectorX& x,$/;"	f	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h	/^namespace internal {$/;"	n
pseudo_inverse	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h	/^void pseudo_inverse(const CMatrix &C, CINVMatrix &CINV)$/;"	f	namespace:internal
EIGEN_ITERATION_CONTROLLER_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	76;"	d
IterationController	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    IterationController(double r = 1.0E-8, int noi = 0, size_t mit = size_t(-1))$/;"	f	class:IterationController
IterationController	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^class IterationController$/;"	c
converged	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    bool converged() const { return m_res <= m_rhsn * m_resmax; }$/;"	f	class:IterationController
converged	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    bool converged(double nr)$/;"	f	class:IterationController
converged	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    template<typename VectorType> bool converged(const VectorType &v)$/;"	f	class:IterationController
finished	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    bool finished(const MatrixBase<VectorType> &v)$/;"	f	class:IterationController
finished	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    bool finished(double nr)$/;"	f	class:IterationController
first	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    bool first() { return m_nit == 0; }$/;"	f	class:IterationController
init	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    void init()$/;"	f	class:IterationController
iteration	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    size_t iteration() const { return m_nit; }$/;"	f	class:IterationController
m_callback	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    void (*m_callback)(const IterationController&);$/;"	m	class:IterationController
m_maxiter	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    size_t m_maxiter;     \/\/\/< Max. number of iterations$/;"	m	class:IterationController
m_nit	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    size_t m_nit;         \/\/\/< iteration number$/;"	m	class:IterationController
m_noise	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    int m_noise;          \/\/\/< if noise > 0 iterations are printed$/;"	m	class:IterationController
m_res	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    double m_res;         \/\/\/< last computed residual$/;"	m	class:IterationController
m_resadd	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    double m_resminreach, m_resadd;$/;"	m	class:IterationController
m_resmax	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    double m_resmax;      \/\/\/< maximum residual$/;"	m	class:IterationController
m_resminreach	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    double m_resminreach, m_resadd;$/;"	m	class:IterationController
m_rhsn	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    double m_rhsn;        \/\/\/< Right hand side norm$/;"	m	class:IterationController
m_written	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    bool m_written;$/;"	m	class:IterationController
maxIterarions	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    size_t maxIterarions() const { return m_maxiter; }$/;"	f	class:IterationController
maxResidual	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    double maxResidual() const { return m_resmax; }$/;"	f	class:IterationController
noiseLevel	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    int noiseLevel() const { return m_noise; }$/;"	f	class:IterationController
operator ++	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    void operator ++() { (*this)++; }$/;"	f	class:IterationController
operator ++	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    void operator ++(int) { m_nit++; m_written = false; m_resadd += m_res; }$/;"	f	class:IterationController
reduceNoiseLevel	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    void reduceNoiseLevel() { if (m_noise > 0) m_noise--; }$/;"	f	class:IterationController
residual	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    double residual() const { return m_res; }$/;"	f	class:IterationController
rhsNorm	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    double rhsNorm() const { return m_rhsn; }$/;"	f	class:IterationController
setCallback	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    void setCallback(void (*t)(const IterationController&))$/;"	f	class:IterationController
setIteration	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    void setIteration(size_t i) { m_nit = i; }$/;"	f	class:IterationController
setMaxIterations	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    void setMaxIterations(size_t i) { m_maxiter = i; }$/;"	f	class:IterationController
setMaxResidual	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    void setMaxResidual(double r) { m_resmax = r; }$/;"	f	class:IterationController
setNoiseLevel	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    void setNoiseLevel(int n) { m_noise = n; }$/;"	f	class:IterationController
setRhsNorm	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/IterativeSolvers/IterationController.h	/^    void setRhsNorm(double r) { m_rhsn = r; }$/;"	f	class:IterationController
EIGEN_MATRIX_EXPONENTIAL	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^    typedef typename Derived::Index Index;$/;"	t	struct:MatrixExponentialReturnValue
MatrixExponential	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^MatrixExponential<MatrixType>::MatrixExponential(const MatrixType &M) :$/;"	f	class:MatrixExponential
MatrixExponential	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^class MatrixExponential {$/;"	c
MatrixExponentialReturnValue	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^    MatrixExponentialReturnValue(const Derived& src) : m_src(src) { }$/;"	f	struct:MatrixExponentialReturnValue
MatrixExponentialReturnValue	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^template<typename Derived> struct MatrixExponentialReturnValue$/;"	s
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:MatrixExponential
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^  typedef typename Derived::PlainObject ReturnType;$/;"	t	struct:internal::traits
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^    typedef typename internal::traits<MatrixType>::Scalar Scalar;$/;"	t	class:MatrixExponential
cols	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^    Index cols() const { return m_src.cols(); }$/;"	f	struct:MatrixExponentialReturnValue
compute	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^void MatrixExponential<MatrixType>::compute(ResultType &result)$/;"	f	class:MatrixExponential
computeUV	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^void MatrixExponential<MatrixType>::computeUV(double)$/;"	f	class:MatrixExponential
computeUV	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^void MatrixExponential<MatrixType>::computeUV(float)$/;"	f	class:MatrixExponential
evalTo	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^    inline void evalTo(ResultType& result) const$/;"	f	struct:MatrixExponentialReturnValue
exp	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^const MatrixExponentialReturnValue<Derived> MatrixBase<Derived>::exp() const$/;"	f	class:MatrixBase
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^namespace internal {$/;"	n
log2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^  template <typename Scalar> Scalar log2(Scalar v) { using std::log; return log(v)\/log(Scalar(2)); }$/;"	f
m_Id	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^    MatrixType m_Id;$/;"	m	class:MatrixExponential
m_M	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^    typename internal::nested<MatrixType>::type m_M;$/;"	m	class:MatrixExponential
m_U	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^    MatrixType m_U;$/;"	m	class:MatrixExponential
m_V	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^    MatrixType m_V;$/;"	m	class:MatrixExponential
m_l1norm	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^    float m_l1norm;$/;"	m	class:MatrixExponential
m_squarings	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^    int m_squarings;$/;"	m	class:MatrixExponential
m_src	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^    const Derived& m_src;$/;"	m	struct:MatrixExponentialReturnValue
m_tmp1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^    MatrixType m_tmp1;$/;"	m	class:MatrixExponential
m_tmp2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^    MatrixType m_tmp2;$/;"	m	class:MatrixExponential
pade13	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^EIGEN_STRONG_INLINE void MatrixExponential<MatrixType>::pade13(const MatrixType &A)$/;"	f	class:MatrixExponential
pade3	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^EIGEN_STRONG_INLINE void MatrixExponential<MatrixType>::pade3(const MatrixType &A)$/;"	f	class:MatrixExponential
pade5	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^EIGEN_STRONG_INLINE void MatrixExponential<MatrixType>::pade5(const MatrixType &A)$/;"	f	class:MatrixExponential
pade7	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^EIGEN_STRONG_INLINE void MatrixExponential<MatrixType>::pade7(const MatrixType &A)$/;"	f	class:MatrixExponential
pade9	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^EIGEN_STRONG_INLINE void MatrixExponential<MatrixType>::pade9(const MatrixType &A)$/;"	f	class:MatrixExponential
rows	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^    Index rows() const { return m_src.rows(); }$/;"	f	struct:MatrixExponentialReturnValue
traits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h	/^struct traits<MatrixExponentialReturnValue<Derived> >$/;"	s	namespace:internal
Cluster	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typedef std::list<Scalar> Cluster;$/;"	t	class:MatrixFunction
Cols	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    static const int Cols = Traits::ColsAtCompileTime;$/;"	m	class:MatrixFunction
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    static const int ColsAtCompileTime = Traits::ColsAtCompileTime;$/;"	m	class:MatrixFunction
ComplexMatrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typedef Matrix<ComplexScalar, Rows, Cols, Options, MaxRows, MaxCols> ComplexMatrix;$/;"	t	class:MatrixFunction
ComplexScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typedef std::complex<Scalar> ComplexScalar;$/;"	t	class:MatrixFunction
DynMatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typedef Matrix<Scalar, Dynamic, Dynamic, Options, RowsAtCompileTime, ColsAtCompileTime> DynMatrixType;$/;"	t	class:MatrixFunction
DynamicIntVectorType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typedef Matrix<Index, Dynamic, 1> DynamicIntVectorType;$/;"	t	class:MatrixFunction
EIGEN_MATRIX_FUNCTION	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typedef typename Derived::Index Index;$/;"	t	class:MatrixFunctionReturnValue
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:MatrixFunction
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typedef typename internal::traits<MatrixType>::Index Index;$/;"	t	class:MatrixFunction
IntVectorType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typedef Matrix<Index, Traits::RowsAtCompileTime, 1> IntVectorType;$/;"	t	class:MatrixFunction
ListOfClusters	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typedef std::list<Cluster> ListOfClusters;$/;"	t	class:MatrixFunction
MatrixFunction	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    MatrixFunction(const MatrixType& A, StemFunction f) : m_A(A), m_f(f) { }$/;"	f	class:MatrixFunction
MatrixFunction	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^MatrixFunction<MatrixType,1>::MatrixFunction(const MatrixType& A, StemFunction f) :$/;"	f	class:MatrixFunction
MatrixFunction	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^class MatrixFunction$/;"	c
MatrixFunction	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^class MatrixFunction<MatrixType, 0>$/;"	c
MatrixFunction	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^class MatrixFunction<MatrixType, 1>$/;"	c
MatrixFunctionReturnValue	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    MatrixFunctionReturnValue(const Derived& A, StemFunction f) : m_A(A), m_f(f) { }$/;"	f	class:MatrixFunctionReturnValue
MatrixFunctionReturnValue	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^template<typename Derived> class MatrixFunctionReturnValue$/;"	c
MaxCols	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    static const int MaxCols = Traits::MaxColsAtCompileTime;$/;"	m	class:MatrixFunction
MaxRows	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    static const int MaxRows = Traits::MaxRowsAtCompileTime;$/;"	m	class:MatrixFunction
Options	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    static const int Options = MatrixType::Options;$/;"	m	class:MatrixFunction
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:MatrixFunction
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^  typedef typename Derived::PlainObject ReturnType;$/;"	t	struct:internal::traits
Rows	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    static const int Rows = Traits::RowsAtCompileTime;$/;"	m	class:MatrixFunction
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    static const int RowsAtCompileTime = Traits::RowsAtCompileTime;$/;"	m	class:MatrixFunction
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typedef typename Derived::Scalar Scalar;$/;"	t	class:MatrixFunctionReturnValue
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:MatrixFunction
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typedef typename Traits::Scalar Scalar;$/;"	t	class:MatrixFunction
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typedef typename internal::traits<MatrixType>::Scalar Scalar;    $/;"	t	class:MatrixFunction
StemFunction	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typedef typename internal::stem_function<Scalar>::type StemFunction;$/;"	t	class:MatrixFunction
StemFunction	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typedef typename internal::stem_function<Scalar>::type StemFunction;$/;"	t	class:MatrixFunctionReturnValue
Traits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typedef internal::traits<MatrixType> Traits;$/;"	t	class:MatrixFunction
VectorType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typedef Matrix<Scalar, Traits::RowsAtCompileTime, 1> VectorType;$/;"	t	class:MatrixFunction
block	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^Block<MatrixType> MatrixFunction<MatrixType,1>::block(MatrixType& A, Index i, Index j)$/;"	f	class:MatrixFunction
cols	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    Index cols() const { return m_A.cols(); }$/;"	f	class:MatrixFunctionReturnValue
compute	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    void compute(ResultType& result) $/;"	f	class:MatrixFunction
compute	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^void MatrixFunction<MatrixType,1>::compute(ResultType& result) $/;"	f	class:MatrixFunction
computeBlockAtomic	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^void MatrixFunction<MatrixType,1>::computeBlockAtomic()$/;"	f	class:MatrixFunction
computeBlockStart	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^void MatrixFunction<MatrixType,1>::computeBlockStart()$/;"	f	class:MatrixFunction
computeClusterSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^void MatrixFunction<MatrixType,1>::computeClusterSize()$/;"	f	class:MatrixFunction
computeOffDiagonal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^void MatrixFunction<MatrixType,1>::computeOffDiagonal()$/;"	f	class:MatrixFunction
computeSchurDecomposition	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^void MatrixFunction<MatrixType,1>::computeSchurDecomposition()$/;"	f	class:MatrixFunction
constructPermutation	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^void MatrixFunction<MatrixType,1>::constructPermutation()$/;"	f	class:MatrixFunction
cos	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^const MatrixFunctionReturnValue<Derived> MatrixBase<Derived>::cos() const$/;"	f	class:MatrixBase
cosh	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^const MatrixFunctionReturnValue<Derived> MatrixBase<Derived>::cosh() const$/;"	f	class:MatrixBase
evalTo	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    inline void evalTo(ResultType& result) const$/;"	f	class:MatrixFunctionReturnValue
findCluster	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^typename MatrixFunction<MatrixType,1>::ListOfClusters::iterator MatrixFunction<MatrixType,1>::findCluster(Scalar key)$/;"	f	class:MatrixFunction
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^namespace internal {$/;"	n
m_A	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typename internal::nested<Derived>::type m_A;$/;"	m	class:MatrixFunctionReturnValue
m_A	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    typename internal::nested<MatrixType>::type m_A; \/**< \\brief Reference to argument of matrix function. *\/$/;"	m	class:MatrixFunction
m_T	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    MatrixType m_T; \/**< \\brief Triangular part of Schur decomposition *\/$/;"	m	class:MatrixFunction
m_U	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    MatrixType m_U; \/**< \\brief Unitary part of Schur decomposition *\/$/;"	m	class:MatrixFunction
m_blockStart	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    DynamicIntVectorType m_blockStart; \/**< \\brief Row index at which block corresponding to i-th cluster starts *\/$/;"	m	class:MatrixFunction
m_clusterSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    DynamicIntVectorType m_clusterSize; \/**< \\brief Number of eigenvalues in each clusters  *\/$/;"	m	class:MatrixFunction
m_clusters	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    ListOfClusters m_clusters; \/**< \\brief Partition of eigenvalues into clusters of ei'vals "close" to each other *\/$/;"	m	class:MatrixFunction
m_eivalToCluster	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    DynamicIntVectorType m_eivalToCluster; \/**< \\brief m_eivalToCluster[i] = j means i-th ei'val is in j-th cluster *\/$/;"	m	class:MatrixFunction
m_f	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    StemFunction *m_f; \/**< \\brief Stem function for matrix function under consideration *\/    $/;"	m	class:MatrixFunction
m_f	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    StemFunction *m_f; \/**< \\brief Stem function for matrix function under consideration *\/$/;"	m	class:MatrixFunction
m_f	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    StemFunction *m_f;$/;"	m	class:MatrixFunctionReturnValue
m_fT	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    MatrixType m_fT; \/**< \\brief %Matrix function applied to #m_T *\/$/;"	m	class:MatrixFunction
m_permutation	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    IntVectorType m_permutation; \/**< \\brief Permutation which groups ei'vals in the same cluster together *\/$/;"	m	class:MatrixFunction
matrixFunction	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^const MatrixFunctionReturnValue<Derived> MatrixBase<Derived>::matrixFunction(typename internal::stem_function<typename internal::traits<Derived>::Scalar>::type f) const$/;"	f	class:MatrixBase
partitionEigenvalues	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^void MatrixFunction<MatrixType,1>::partitionEigenvalues()$/;"	f	class:MatrixFunction
permuteSchur	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^void MatrixFunction<MatrixType,1>::permuteSchur()$/;"	f	class:MatrixFunction
rows	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    Index rows() const { return m_A.rows(); }$/;"	f	class:MatrixFunctionReturnValue
separation	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^    static const RealScalar separation() { return static_cast<RealScalar>(0.1); }$/;"	f	class:MatrixFunction
sin	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^const MatrixFunctionReturnValue<Derived> MatrixBase<Derived>::sin() const$/;"	f	class:MatrixBase
sinh	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^const MatrixFunctionReturnValue<Derived> MatrixBase<Derived>::sinh() const$/;"	f	class:MatrixBase
solveTriangularSylvester	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^typename MatrixFunction<MatrixType,1>::DynMatrixType MatrixFunction<MatrixType,1>::solveTriangularSylvester($/;"	f	class:MatrixFunction
swapEntriesInSchur	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^void MatrixFunction<MatrixType,1>::swapEntriesInSchur(Index index)$/;"	f	class:MatrixFunction
traits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunction.h	/^struct traits<MatrixFunctionReturnValue<Derived> >$/;"	s	namespace:internal
EIGEN_MATRIX_FUNCTION_ATOMIC	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunctionAtomic.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunctionAtomic.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:MatrixFunctionAtomic
MatrixFunctionAtomic	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunctionAtomic.h	/^    MatrixFunctionAtomic(StemFunction f) : m_f(f) { }$/;"	f	class:MatrixFunctionAtomic
MatrixFunctionAtomic	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunctionAtomic.h	/^class MatrixFunctionAtomic$/;"	c
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunctionAtomic.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:MatrixFunctionAtomic
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunctionAtomic.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:MatrixFunctionAtomic
StemFunction	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunctionAtomic.h	/^    typedef typename internal::stem_function<Scalar>::type StemFunction;$/;"	t	class:MatrixFunctionAtomic
VectorType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunctionAtomic.h	/^    typedef Matrix<Scalar, MatrixType::RowsAtCompileTime, 1> VectorType;$/;"	t	class:MatrixFunctionAtomic
compute	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunctionAtomic.h	/^MatrixType MatrixFunctionAtomic<MatrixType>::compute(const MatrixType& A)$/;"	f	class:MatrixFunctionAtomic
computeMu	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunctionAtomic.h	/^void MatrixFunctionAtomic<MatrixType>::computeMu()$/;"	f	class:MatrixFunctionAtomic
m_Arows	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunctionAtomic.h	/^    Index m_Arows;$/;"	m	class:MatrixFunctionAtomic
m_Ashifted	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunctionAtomic.h	/^    MatrixType m_Ashifted;$/;"	m	class:MatrixFunctionAtomic
m_avgEival	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunctionAtomic.h	/^    Scalar m_avgEival;$/;"	m	class:MatrixFunctionAtomic
m_f	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunctionAtomic.h	/^    StemFunction* m_f;$/;"	m	class:MatrixFunctionAtomic
m_mu	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunctionAtomic.h	/^    RealScalar m_mu;$/;"	m	class:MatrixFunctionAtomic
taylorConverged	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixFunctionAtomic.h	/^bool MatrixFunctionAtomic<MatrixType>::taylorConverged(Index s, const MatrixType& F,$/;"	f	class:MatrixFunctionAtomic
EIGEN_STEM_FUNCTION	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/StemFunction.h	26;"	d
StdStemFunctions	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/StemFunction.h	/^class StdStemFunctions$/;"	c
cos	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/StemFunction.h	/^    static Scalar cos(Scalar x, int n)$/;"	f	class:StdStemFunctions
cosh	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/StemFunction.h	/^    static Scalar cosh(Scalar x, int n)$/;"	f	class:StdStemFunctions
exp	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/StemFunction.h	/^    static Scalar exp(Scalar x, int)$/;"	f	class:StdStemFunctions
sin	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/StemFunction.h	/^    static Scalar sin(Scalar x, int n)$/;"	f	class:StdStemFunctions
sinh	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MatrixFunctions/StemFunction.h	/^    static Scalar sinh(Scalar x, int n)$/;"	f	class:StdStemFunctions
EIGEN_MOREVECTORIZATION_MATHFUNCTIONS_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MoreVectorization/MathFunctions.h	27;"	d
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MoreVectorization/MathFunctions.h	/^namespace internal {$/;"	n
pasin	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MoreVectorization/MathFunctions.h	/^template<> EIGEN_DONT_INLINE Packet4f pasin(Packet4f x)$/;"	f	namespace:internal
pasin	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/MoreVectorization/MathFunctions.h	/^template<typename Packet> inline static Packet pasin(Packet a) { return std::asin(a); }$/;"	f	namespace:internal
EIGEN_HYBRIDNONLINEARSOLVER_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	29;"	d
FVectorType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    typedef Matrix< Scalar, Dynamic, 1 > FVectorType;$/;"	t	class:HybridNonLinearSolver
HybridNonLinearSolver	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    HybridNonLinearSolver(FunctorType &_functor)$/;"	f	class:HybridNonLinearSolver
HybridNonLinearSolver	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^class HybridNonLinearSolver$/;"	c
HybridNonLinearSolverSpace	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^namespace HybridNonLinearSolverSpace { $/;"	n
ImproperInputParameters	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^        ImproperInputParameters = 0,$/;"	e	enum:HybridNonLinearSolverSpace::Status
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    typedef DenseIndex Index;$/;"	t	class:HybridNonLinearSolver
JacobianType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    typedef Matrix< Scalar, Dynamic, Dynamic > JacobianType;$/;"	t	class:HybridNonLinearSolver
NotMakingProgressIterations	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^        NotMakingProgressIterations = 5,$/;"	e	enum:HybridNonLinearSolverSpace::Status
NotMakingProgressJacobian	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^        NotMakingProgressJacobian = 4,$/;"	e	enum:HybridNonLinearSolverSpace::Status
Parameters	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^        Parameters()$/;"	f	struct:HybridNonLinearSolver::Parameters
Parameters	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    struct Parameters {$/;"	s	class:HybridNonLinearSolver
R	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    UpperTriangularType R;$/;"	m	class:HybridNonLinearSolver
RelativeErrorTooSmall	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^        RelativeErrorTooSmall = 1,$/;"	e	enum:HybridNonLinearSolverSpace::Status
Running	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^        Running = -1,$/;"	e	enum:HybridNonLinearSolverSpace::Status
Status	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    enum Status {$/;"	g	namespace:HybridNonLinearSolverSpace
TolTooSmall	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^        TolTooSmall = 3,$/;"	e	enum:HybridNonLinearSolverSpace::Status
TooManyFunctionEvaluation	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^        TooManyFunctionEvaluation = 2,$/;"	e	enum:HybridNonLinearSolverSpace::Status
UpperTriangularType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    typedef Matrix< Scalar, Dynamic, Dynamic > UpperTriangularType;$/;"	t	class:HybridNonLinearSolver
UserAksed	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^        UserAksed = 6$/;"	e	enum:HybridNonLinearSolverSpace::Status
actred	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    Scalar actred, prered;$/;"	m	class:HybridNonLinearSolver
delta	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    Scalar delta;$/;"	m	class:HybridNonLinearSolver
diag	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    FVectorType  fvec, qtf, diag;$/;"	m	class:HybridNonLinearSolver
epsfcn	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^        Scalar epsfcn;$/;"	m	struct:HybridNonLinearSolver::Parameters
factor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^        Scalar factor;$/;"	m	struct:HybridNonLinearSolver::Parameters
fjac	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    JacobianType fjac;$/;"	m	class:HybridNonLinearSolver
fnorm	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    Scalar fnorm;$/;"	m	class:HybridNonLinearSolver
fnorm1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    Scalar pnorm, xnorm, fnorm1;$/;"	m	class:HybridNonLinearSolver
functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    FunctorType &functor;$/;"	m	class:HybridNonLinearSolver
fvec	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    FVectorType  fvec, qtf, diag;$/;"	m	class:HybridNonLinearSolver
hybrd1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^HybridNonLinearSolver<FunctorType,Scalar>::hybrd1($/;"	f	class:HybridNonLinearSolver
hybrj1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^HybridNonLinearSolver<FunctorType,Scalar>::hybrj1($/;"	f	class:HybridNonLinearSolver
iter	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    Index iter;$/;"	m	class:HybridNonLinearSolver
jeval	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    bool jeval;$/;"	m	class:HybridNonLinearSolver
maxfev	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^        Index maxfev;   \/\/ maximum number of function evaluation$/;"	m	struct:HybridNonLinearSolver::Parameters
n	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    Index n;$/;"	m	class:HybridNonLinearSolver
nb_of_subdiagonals	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^        Index nb_of_subdiagonals;$/;"	m	struct:HybridNonLinearSolver::Parameters
nb_of_superdiagonals	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^        Index nb_of_superdiagonals;$/;"	m	struct:HybridNonLinearSolver::Parameters
ncfail	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    Index ncfail;$/;"	m	class:HybridNonLinearSolver
ncsuc	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    Index ncsuc;$/;"	m	class:HybridNonLinearSolver
nfev	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    Index nfev;$/;"	m	class:HybridNonLinearSolver
njev	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    Index njev;$/;"	m	class:HybridNonLinearSolver
nslow1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    Index nslow1, nslow2;$/;"	m	class:HybridNonLinearSolver
nslow2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    Index nslow1, nslow2;$/;"	m	class:HybridNonLinearSolver
parameters	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    Parameters parameters;$/;"	m	class:HybridNonLinearSolver
pnorm	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    Scalar pnorm, xnorm, fnorm1;$/;"	m	class:HybridNonLinearSolver
prered	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    Scalar actred, prered;$/;"	m	class:HybridNonLinearSolver
qtf	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    FVectorType  fvec, qtf, diag;$/;"	m	class:HybridNonLinearSolver
ratio	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    Scalar ratio;$/;"	m	class:HybridNonLinearSolver
resetParameters	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    void resetParameters(void) { parameters = Parameters(); }$/;"	f	class:HybridNonLinearSolver
sing	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    bool sing;$/;"	m	class:HybridNonLinearSolver
solve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^HybridNonLinearSolver<FunctorType,Scalar>::solve(FVectorType  &x)$/;"	f	class:HybridNonLinearSolver
solveInit	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^HybridNonLinearSolver<FunctorType,Scalar>::solveInit(FVectorType  &x)$/;"	f	class:HybridNonLinearSolver
solveNumericalDiff	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^HybridNonLinearSolver<FunctorType,Scalar>::solveNumericalDiff(FVectorType  &x)$/;"	f	class:HybridNonLinearSolver
solveNumericalDiffInit	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^HybridNonLinearSolver<FunctorType,Scalar>::solveNumericalDiffInit(FVectorType  &x)$/;"	f	class:HybridNonLinearSolver
solveNumericalDiffOneStep	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^HybridNonLinearSolver<FunctorType,Scalar>::solveNumericalDiffOneStep(FVectorType  &x)$/;"	f	class:HybridNonLinearSolver
solveOneStep	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^HybridNonLinearSolver<FunctorType,Scalar>::solveOneStep(FVectorType  &x)$/;"	f	class:HybridNonLinearSolver
sum	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    Scalar sum;$/;"	m	class:HybridNonLinearSolver
temp	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    Scalar temp;$/;"	m	class:HybridNonLinearSolver
useExternalScaling	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    bool useExternalScaling; $/;"	m	class:HybridNonLinearSolver
wa1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    FVectorType wa1, wa2, wa3, wa4;$/;"	m	class:HybridNonLinearSolver
wa2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    FVectorType wa1, wa2, wa3, wa4;$/;"	m	class:HybridNonLinearSolver
wa3	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    FVectorType wa1, wa2, wa3, wa4;$/;"	m	class:HybridNonLinearSolver
wa4	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    FVectorType wa1, wa2, wa3, wa4;$/;"	m	class:HybridNonLinearSolver
xnorm	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^    Scalar pnorm, xnorm, fnorm1;$/;"	m	class:HybridNonLinearSolver
xtol	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/HybridNonLinearSolver.h	/^        Scalar xtol;$/;"	m	struct:HybridNonLinearSolver::Parameters
CosinusTooSmall	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^        CosinusTooSmall = 4,$/;"	e	enum:LevenbergMarquardtSpace::Status
EIGEN_LEVENBERGMARQUARDT__H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	29;"	d
FVectorType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    typedef Matrix< Scalar, Dynamic, 1 > FVectorType;$/;"	t	class:LevenbergMarquardt
FtolTooSmall	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^        FtolTooSmall = 6,$/;"	e	enum:LevenbergMarquardtSpace::Status
GtolTooSmall	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^        GtolTooSmall = 8,$/;"	e	enum:LevenbergMarquardtSpace::Status
ImproperInputParameters	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^        ImproperInputParameters = 0,$/;"	e	enum:LevenbergMarquardtSpace::Status
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    typedef DenseIndex Index;$/;"	t	class:LevenbergMarquardt
JacobianType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    typedef Matrix< Scalar, Dynamic, Dynamic > JacobianType;$/;"	t	class:LevenbergMarquardt
LevenbergMarquardt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    LevenbergMarquardt(FunctorType &_functor)$/;"	f	class:LevenbergMarquardt
LevenbergMarquardt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^class LevenbergMarquardt$/;"	c
LevenbergMarquardtSpace	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^namespace LevenbergMarquardtSpace {$/;"	n
NotStarted	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^        NotStarted = -2,$/;"	e	enum:LevenbergMarquardtSpace::Status
Parameters	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^        Parameters()$/;"	f	struct:LevenbergMarquardt::Parameters
Parameters	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    struct Parameters {$/;"	s	class:LevenbergMarquardt
RelativeErrorAndReductionTooSmall	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^        RelativeErrorAndReductionTooSmall = 3,$/;"	e	enum:LevenbergMarquardtSpace::Status
RelativeErrorTooSmall	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^        RelativeErrorTooSmall = 2,$/;"	e	enum:LevenbergMarquardtSpace::Status
RelativeReductionTooSmall	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^        RelativeReductionTooSmall = 1,$/;"	e	enum:LevenbergMarquardtSpace::Status
Running	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^        Running = -1,$/;"	e	enum:LevenbergMarquardtSpace::Status
Status	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    enum Status {$/;"	g	namespace:LevenbergMarquardtSpace
TooManyFunctionEvaluation	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^        TooManyFunctionEvaluation = 5,$/;"	e	enum:LevenbergMarquardtSpace::Status
UserAsked	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^        UserAsked = 9$/;"	e	enum:LevenbergMarquardtSpace::Status
XtolTooSmall	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^        XtolTooSmall = 7,$/;"	e	enum:LevenbergMarquardtSpace::Status
actred	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Scalar pnorm, xnorm, fnorm1, actred, dirder, prered;$/;"	m	class:LevenbergMarquardt
delta	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Scalar delta;$/;"	m	class:LevenbergMarquardt
diag	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    FVectorType  fvec, qtf, diag;$/;"	m	class:LevenbergMarquardt
dirder	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Scalar pnorm, xnorm, fnorm1, actred, dirder, prered;$/;"	m	class:LevenbergMarquardt
epsfcn	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^        Scalar epsfcn;$/;"	m	struct:LevenbergMarquardt::Parameters
factor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^        Scalar factor;$/;"	m	struct:LevenbergMarquardt::Parameters
fjac	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    JacobianType fjac;$/;"	m	class:LevenbergMarquardt
fnorm	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Scalar fnorm, gnorm;$/;"	m	class:LevenbergMarquardt
fnorm1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Scalar pnorm, xnorm, fnorm1, actred, dirder, prered;$/;"	m	class:LevenbergMarquardt
ftol	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^        Scalar ftol;$/;"	m	struct:LevenbergMarquardt::Parameters
functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    FunctorType &functor;$/;"	m	class:LevenbergMarquardt
fvec	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    FVectorType  fvec, qtf, diag;$/;"	m	class:LevenbergMarquardt
gnorm	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Scalar fnorm, gnorm;$/;"	m	class:LevenbergMarquardt
gtol	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^        Scalar gtol;$/;"	m	struct:LevenbergMarquardt::Parameters
iter	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Index iter;$/;"	m	class:LevenbergMarquardt
lm_param	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Scalar lm_param(void) { return par; }$/;"	f	class:LevenbergMarquardt
lmder1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^LevenbergMarquardt<FunctorType,Scalar>::lmder1($/;"	f	class:LevenbergMarquardt
lmdif1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^LevenbergMarquardt<FunctorType,Scalar>::lmdif1($/;"	f	class:LevenbergMarquardt
lmstr1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^LevenbergMarquardt<FunctorType,Scalar>::lmstr1($/;"	f	class:LevenbergMarquardt
m	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Index m;$/;"	m	class:LevenbergMarquardt
maxfev	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^        Index maxfev;   \/\/ maximum number of function evaluation$/;"	m	struct:LevenbergMarquardt::Parameters
minimize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^LevenbergMarquardt<FunctorType,Scalar>::minimize(FVectorType  &x)$/;"	f	class:LevenbergMarquardt
minimizeInit	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^LevenbergMarquardt<FunctorType,Scalar>::minimizeInit(FVectorType  &x)$/;"	f	class:LevenbergMarquardt
minimizeOneStep	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^LevenbergMarquardt<FunctorType,Scalar>::minimizeOneStep(FVectorType  &x)$/;"	f	class:LevenbergMarquardt
minimizeOptimumStorage	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^LevenbergMarquardt<FunctorType,Scalar>::minimizeOptimumStorage(FVectorType  &x)$/;"	f	class:LevenbergMarquardt
minimizeOptimumStorageInit	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^LevenbergMarquardt<FunctorType,Scalar>::minimizeOptimumStorageInit(FVectorType  &x)$/;"	f	class:LevenbergMarquardt
minimizeOptimumStorageOneStep	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^LevenbergMarquardt<FunctorType,Scalar>::minimizeOptimumStorageOneStep(FVectorType  &x)$/;"	f	class:LevenbergMarquardt
n	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Index n;$/;"	m	class:LevenbergMarquardt
nfev	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Index nfev;$/;"	m	class:LevenbergMarquardt
njev	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Index njev;$/;"	m	class:LevenbergMarquardt
par	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Scalar par, sum;$/;"	m	class:LevenbergMarquardt
parameters	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Parameters parameters;$/;"	m	class:LevenbergMarquardt
permutation	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    PermutationMatrix<Dynamic,Dynamic> permutation;$/;"	m	class:LevenbergMarquardt
pnorm	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Scalar pnorm, xnorm, fnorm1, actred, dirder, prered;$/;"	m	class:LevenbergMarquardt
prered	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Scalar pnorm, xnorm, fnorm1, actred, dirder, prered;$/;"	m	class:LevenbergMarquardt
qtf	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    FVectorType  fvec, qtf, diag;$/;"	m	class:LevenbergMarquardt
ratio	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Scalar ratio;$/;"	m	class:LevenbergMarquardt
resetParameters	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    void resetParameters(void) { parameters = Parameters(); }$/;"	f	class:LevenbergMarquardt
sum	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Scalar par, sum;$/;"	m	class:LevenbergMarquardt
temp	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Scalar temp, temp1, temp2;$/;"	m	class:LevenbergMarquardt
temp1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Scalar temp, temp1, temp2;$/;"	m	class:LevenbergMarquardt
temp2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Scalar temp, temp1, temp2;$/;"	m	class:LevenbergMarquardt
useExternalScaling	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    bool useExternalScaling; $/;"	m	class:LevenbergMarquardt
wa1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    FVectorType wa1, wa2, wa3, wa4;$/;"	m	class:LevenbergMarquardt
wa2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    FVectorType wa1, wa2, wa3, wa4;$/;"	m	class:LevenbergMarquardt
wa3	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    FVectorType wa1, wa2, wa3, wa4;$/;"	m	class:LevenbergMarquardt
wa4	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    FVectorType wa1, wa2, wa3, wa4;$/;"	m	class:LevenbergMarquardt
xnorm	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^    Scalar pnorm, xnorm, fnorm1, actred, dirder, prered;$/;"	m	class:LevenbergMarquardt
xtol	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/LevenbergMarquardt.h	/^        Scalar xtol;$/;"	m	struct:LevenbergMarquardt::Parameters
chkder	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/chkder.h	/^void chkder($/;"	f	namespace:internal
chkder_factor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/chkder.h	3;"	d
chkder_log10e	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/chkder.h	2;"	d
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/chkder.h	/^namespace internal {$/;"	n
covar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/covar.h	/^void covar($/;"	f	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/covar.h	/^namespace internal {$/;"	n
dogleg	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/dogleg.h	/^void dogleg($/;"	f	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/dogleg.h	/^namespace internal {$/;"	n
fdjac1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/fdjac1.h	/^DenseIndex fdjac1($/;"	f	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/fdjac1.h	/^namespace internal {$/;"	n
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/lmpar.h	/^namespace internal {$/;"	n
lmpar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/lmpar.h	/^void lmpar($/;"	f	namespace:internal
lmpar2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/lmpar.h	/^void lmpar2($/;"	f	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/qrsolv.h	/^namespace internal {$/;"	n
qrsolv	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/qrsolv.h	/^void qrsolv($/;"	f	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/r1mpyq.h	/^namespace internal {$/;"	n
r1mpyq	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/r1mpyq.h	/^void r1mpyq(DenseIndex m, DenseIndex n, Scalar *a, const std::vector<JacobiRotation<Scalar> > &v_givens, const std::vector<JacobiRotation<Scalar> > &w_givens)$/;"	f	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/r1updt.h	/^namespace internal {$/;"	n
r1updt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/r1updt.h	/^void r1updt($/;"	f	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/rwupdt.h	/^namespace internal {$/;"	n
rwupdt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NonLinearOptimization/rwupdt.h	/^void rwupdt($/;"	f	namespace:internal
Central	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NumericalDiff/NumericalDiff.h	/^    Central$/;"	e	enum:NumericalDiffMode
EIGEN_NUMERICAL_DIFF_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NumericalDiff/NumericalDiff.h	29;"	d
Forward	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NumericalDiff/NumericalDiff.h	/^    Forward,$/;"	e	enum:NumericalDiffMode
Functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NumericalDiff/NumericalDiff.h	/^    typedef _Functor Functor;$/;"	t	class:NumericalDiff
InputType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NumericalDiff/NumericalDiff.h	/^    typedef typename Functor::InputType InputType;$/;"	t	class:NumericalDiff
InputsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NumericalDiff/NumericalDiff.h	/^        InputsAtCompileTime = Functor::InputsAtCompileTime,$/;"	e	enum:NumericalDiff::<anonymous>
JacobianType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NumericalDiff/NumericalDiff.h	/^    typedef typename Functor::JacobianType JacobianType;$/;"	t	class:NumericalDiff
NumericalDiff	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NumericalDiff/NumericalDiff.h	/^        NumericalDiff(const T0& a0) : Functor(a0), epsfcn(0) {}$/;"	f	class:NumericalDiff
NumericalDiff	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NumericalDiff/NumericalDiff.h	/^        NumericalDiff(const T0& a0, const T1& a1) : Functor(a0, a1), epsfcn(0) {}$/;"	f	class:NumericalDiff
NumericalDiff	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NumericalDiff/NumericalDiff.h	/^        NumericalDiff(const T0& a0, const T1& a1, const T1& a2) : Functor(a0, a1, a2), epsfcn(0) {}$/;"	f	class:NumericalDiff
NumericalDiff	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NumericalDiff/NumericalDiff.h	/^    NumericalDiff(Scalar _epsfcn=0.) : Functor(), epsfcn(_epsfcn) {}$/;"	f	class:NumericalDiff
NumericalDiff	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NumericalDiff/NumericalDiff.h	/^    NumericalDiff(const Functor& f, Scalar _epsfcn=0.) : Functor(f), epsfcn(_epsfcn) {}$/;"	f	class:NumericalDiff
NumericalDiff	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NumericalDiff/NumericalDiff.h	/^class NumericalDiff : public _Functor$/;"	c
NumericalDiffMode	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NumericalDiff/NumericalDiff.h	/^enum NumericalDiffMode {$/;"	g
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NumericalDiff/NumericalDiff.h	/^    typedef typename Functor::Scalar Scalar;$/;"	t	class:NumericalDiff
ValueType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NumericalDiff/NumericalDiff.h	/^    typedef typename Functor::ValueType ValueType;$/;"	t	class:NumericalDiff
ValuesAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NumericalDiff/NumericalDiff.h	/^        ValuesAtCompileTime = Functor::ValuesAtCompileTime$/;"	e	enum:NumericalDiff::<anonymous>
df	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NumericalDiff/NumericalDiff.h	/^    int df(const InputType& _x, JacobianType &jac) const$/;"	f	class:NumericalDiff
epsfcn	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/NumericalDiff/NumericalDiff.h	/^    Scalar epsfcn;$/;"	m	class:NumericalDiff
BottomLeftBlock	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^    typedef Matrix< Scalar, Deg_1, Deg_1 >         BottomLeftBlock;$/;"	t	class:internal::companion
BottomLeftDiagonal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^    typedef Matrix<Scalar, Deg_1, 1>               BottomLeftDiagonal;$/;"	t	class:internal::companion
Deg	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^      Deg = _Deg,$/;"	e	enum:internal::companion::<anonymous>
Deg_1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^      Deg_1=decrement_if_fixed_size<Deg>::ret$/;"	e	enum:internal::companion::<anonymous>
DenseCompanionMatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^    typedef Matrix<Scalar, Deg, Deg>               DenseCompanionMatrixType;$/;"	t	class:internal::companion
EIGEN_COMPANION_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^    typedef DenseIndex Index;$/;"	t	class:internal::companion
LeftBlock	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^    typedef Matrix< Scalar, _Deg, Deg_1 >          LeftBlock;$/;"	t	class:internal::companion
LeftBlockFirstRow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^    typedef Matrix< Scalar, 1, Deg_1 >             LeftBlockFirstRow;$/;"	t	class:internal::companion
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^    typedef typename NumTraits<Scalar>::Real       RealScalar;$/;"	t	class:internal::companion
RightColumn	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^    typedef Matrix<Scalar, Deg, 1>                 RightColumn;$/;"	t	class:internal::companion
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^    typedef _Scalar                                Scalar;$/;"	t	class:internal::companion
balance	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^void companion<_Scalar,_Deg>::balance()$/;"	f	class:internal::companion
balanced	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^bool companion<_Scalar,_Deg>::balanced( Scalar colNorm, Scalar rowNorm,$/;"	f	class:internal::companion
balancedR	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^bool companion<_Scalar,_Deg>::balancedR( Scalar colNorm, Scalar rowNorm,$/;"	f	class:internal::companion
companion	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^    companion( const VectorType& poly ){$/;"	f	class:internal::companion
companion	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^class companion$/;"	c	namespace:internal
decrement_if_fixed_size	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^struct decrement_if_fixed_size$/;"	s	namespace:internal
denseMatrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^    DenseCompanionMatrixType denseMatrix() const$/;"	f	class:internal::companion
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^namespace internal {$/;"	n
m_bl_diag	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^      BottomLeftDiagonal         m_bl_diag;$/;"	m	class:internal::companion
m_monic	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^      RightColumn                m_monic;$/;"	m	class:internal::companion
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^    EIGEN_STRONG_INLINE const _Scalar operator()(Index row, Index col ) const$/;"	f	class:internal::companion
radix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^T radix(){ return 2; }$/;"	f	namespace:internal
radix2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^T radix2(){ return radix<T>()*radix<T>(); }$/;"	f	namespace:internal
ret	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^    ret = (Size == Dynamic) ? Dynamic : Size-1 };$/;"	e	enum:internal::decrement_if_fixed_size::<anonymous>
setPolynomial	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/Companion.h	/^    void setPolynomial( const VectorType& poly )$/;"	f	class:internal::companion
CompanionMatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    typedef Matrix<Scalar,_Deg,_Deg>                 CompanionMatrixType;$/;"	t	class:PolynomialSolver
EIGEN_POLYNOMIAL_SOLVER_BASE_INHERITED_TYPES	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	303;"	d
EIGEN_POLYNOMIAL_SOLVER_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	26;"	d
EigenSolverType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    typedef EigenSolver<CompanionMatrixType>         EigenSolverType;$/;"	t	class:PolynomialSolver
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    typedef DenseIndex Index;$/;"	t	class:PolynomialSolverBase
PS_Base	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    typedef PolynomialSolverBase<_Scalar,1>    PS_Base;$/;"	t	class:PolynomialSolver
PS_Base	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    typedef PolynomialSolverBase<_Scalar,_Deg>    PS_Base;$/;"	t	class:PolynomialSolver
PolynomialSolver	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    inline PolynomialSolver( const OtherPolynomial& poly ){$/;"	f	class:PolynomialSolver
PolynomialSolver	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    inline PolynomialSolver(){}$/;"	f	class:PolynomialSolver
PolynomialSolver	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^class PolynomialSolver : public PolynomialSolverBase<_Scalar,_Deg>$/;"	c
PolynomialSolver	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^class PolynomialSolver<_Scalar,1> : public PolynomialSolverBase<_Scalar,1>$/;"	c
PolynomialSolverBase	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    inline PolynomialSolverBase( const OtherPolynomial& poly ){$/;"	f	class:PolynomialSolverBase
PolynomialSolverBase	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    inline PolynomialSolverBase(){}$/;"	f	class:PolynomialSolverBase
PolynomialSolverBase	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^class PolynomialSolverBase$/;"	c
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    typedef typename NumTraits<Scalar>::Real    RealScalar;$/;"	t	class:PolynomialSolverBase
RootType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    typedef std::complex<RealScalar>            RootType;$/;"	t	class:PolynomialSolverBase
RootsType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    typedef Matrix<RootType,_Deg,1>             RootsType;$/;"	t	class:PolynomialSolverBase
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    typedef _Scalar                             Scalar;$/;"	t	class:PolynomialSolverBase
absGreatestRealRoot	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    inline const RealScalar& absGreatestRealRoot($/;"	f	class:PolynomialSolverBase
absSmallestRealRoot	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    inline const RealScalar& absSmallestRealRoot($/;"	f	class:PolynomialSolverBase
compute	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    void compute( const OtherPolynomial& poly )$/;"	f	class:PolynomialSolver
greatestRealRoot	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    inline const RealScalar& greatestRealRoot($/;"	f	class:PolynomialSolverBase
greatestRoot	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    inline const RootType& greatestRoot() const$/;"	f	class:PolynomialSolverBase
m_eigenSolver	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    EigenSolverType         m_eigenSolver;$/;"	m	class:PolynomialSolver
m_roots	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    RootsType               m_roots;$/;"	m	class:PolynomialSolverBase
realRoots	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    inline void realRoots( Stl_back_insertion_sequence& bi_seq,$/;"	f	class:PolynomialSolverBase
roots	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    inline const RootsType& roots() const { return m_roots; }$/;"	f	class:PolynomialSolverBase
selectComplexRoot_withRespectToNorm	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    inline const RootType& selectComplexRoot_withRespectToNorm( squaredNormBinaryPredicate& pred ) const$/;"	f	class:PolynomialSolverBase
selectRealRoot_withRespectToAbsRealPart	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    inline const RealScalar& selectRealRoot_withRespectToAbsRealPart($/;"	f	class:PolynomialSolverBase
selectRealRoot_withRespectToRealPart	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    inline const RealScalar& selectRealRoot_withRespectToRealPart($/;"	f	class:PolynomialSolverBase
setPolynomial	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    inline void setPolynomial( const OtherPolynomial& poly ){$/;"	f	class:PolynomialSolverBase
smallestRealRoot	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    inline const RealScalar& smallestRealRoot($/;"	f	class:PolynomialSolverBase
smallestRoot	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialSolver.h	/^    inline const RootType& smallestRoot() const$/;"	f	class:PolynomialSolverBase
EIGEN_POLYNOMIAL_UTILS_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialUtils.h	26;"	d
cauchy_max_bound	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialUtils.h	/^typename NumTraits<typename Polynomial::Scalar>::Real cauchy_max_bound( const Polynomial& poly )$/;"	f
cauchy_min_bound	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialUtils.h	/^typename NumTraits<typename Polynomial::Scalar>::Real cauchy_min_bound( const Polynomial& poly )$/;"	f
poly_eval	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialUtils.h	/^T poly_eval( const Polynomials& poly, const T& x )$/;"	f
poly_eval_horner	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialUtils.h	/^T poly_eval_horner( const Polynomials& poly, const T& x )$/;"	f
roots_to_monicPolynomial	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Polynomials/PolynomialUtils.h	/^void roots_to_monicPolynomial( const RootVector& rv, Polynomial& poly )$/;"	f
EIGEN_SKYLINEINPLACELU_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:SkylineInplaceLU
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^    typedef typename NumTraits<typename MatrixType::Scalar>::Real RealScalar;$/;"	t	class:SkylineInplaceLU
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:SkylineInplaceLU
SkylineInplaceLU	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^    SkylineInplaceLU(MatrixType& matrix, int flags = 0)$/;"	f	class:SkylineInplaceLU
SkylineInplaceLU	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^class SkylineInplaceLU {$/;"	c
compute	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^void SkylineInplaceLU<MatrixType>::compute() {$/;"	f	class:SkylineInplaceLU
computeRowMajor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^void SkylineInplaceLU<MatrixType>::computeRowMajor() {$/;"	f	class:SkylineInplaceLU
flags	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^    int flags() const {$/;"	f	class:SkylineInplaceLU
m_flags	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^    int m_flags;$/;"	m	class:SkylineInplaceLU
m_lu	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^    MatrixType& m_lu;$/;"	m	class:SkylineInplaceLU
m_precision	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^    RealScalar m_precision;$/;"	m	class:SkylineInplaceLU
m_status	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^    mutable int m_status;$/;"	m	class:SkylineInplaceLU
m_succeeded	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^    bool m_succeeded;$/;"	m	class:SkylineInplaceLU
orderingMethod	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^    int orderingMethod() const {$/;"	f	class:SkylineInplaceLU
precision	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^    RealScalar precision() const {$/;"	f	class:SkylineInplaceLU
setFlags	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^    void setFlags(int f) {$/;"	f	class:SkylineInplaceLU
setOrderingMethod	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^    void setOrderingMethod(int m) {$/;"	f	class:SkylineInplaceLU
setPrecision	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^    void setPrecision(RealScalar v) {$/;"	f	class:SkylineInplaceLU
solve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^bool SkylineInplaceLU<MatrixType>::solve(const MatrixBase<BDerived> &b, MatrixBase<XDerived>* x, const int transposed) const {$/;"	f	class:SkylineInplaceLU
succeeded	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineInplaceLU.h	/^    inline bool succeeded(void) const {$/;"	f	class:SkylineInplaceLU
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^        CoeffReadCost = NumTraits<Scalar>::ReadCost,$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^        ColsAtCompileTime = Dynamic,$/;"	e	enum:internal::traits::<anonymous>
EIGEN_SKYLINEMATRIX_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	26;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^        Flags = SkylineBit | _Options,$/;"	e	enum:internal::traits::<anonymous>
InnerLowerIterator	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    InnerLowerIterator(const SkylineMatrix& mat, Index outer)$/;"	f	class:SkylineMatrix::InnerLowerIterator
InnerLowerIterator	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^class SkylineMatrix<Scalar, _Options>::InnerLowerIterator {$/;"	c	class:SkylineMatrix
InnerUpperIterator	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    InnerUpperIterator(const SkylineMatrix& mat, Index outer)$/;"	f	class:SkylineMatrix::InnerUpperIterator
InnerUpperIterator	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^class SkylineMatrix<Scalar, _Options>::InnerUpperIterator {$/;"	c	class:SkylineMatrix
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^        MaxColsAtCompileTime = Dynamic,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^        MaxRowsAtCompileTime = Dynamic,$/;"	e	enum:internal::traits::<anonymous>
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^        RowsAtCompileTime = Dynamic,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    typedef _Scalar Scalar;$/;"	t	struct:internal::traits
SkylineMatrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline SkylineMatrix()$/;"	f	class:SkylineMatrix
SkylineMatrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline SkylineMatrix(const SkylineMatrix & other)$/;"	f	class:SkylineMatrix
SkylineMatrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline SkylineMatrix(const SkylineMatrixBase<OtherDerived>& other)$/;"	f	class:SkylineMatrix
SkylineMatrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline SkylineMatrix(size_t rows, size_t cols)$/;"	f	class:SkylineMatrix
SkylineMatrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^class SkylineMatrix$/;"	c
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    typedef Sparse StorageKind;$/;"	t	struct:internal::traits
TransposedSkylineMatrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    typedef SkylineMatrix<Scalar, (Flags&~RowMajorBit) | (IsRowMajor ? RowMajorBit : 0) > TransposedSkylineMatrix;$/;"	t	class:SkylineMatrix
_diagPtr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Scalar* _diagPtr() {$/;"	f	class:SkylineMatrix
_diagPtr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline const Scalar* _diagPtr() const {$/;"	f	class:SkylineMatrix
_lowerProfilePtr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Index* _lowerProfilePtr() {$/;"	f	class:SkylineMatrix
_lowerProfilePtr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline const Index* _lowerProfilePtr() const {$/;"	f	class:SkylineMatrix
_lowerPtr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Scalar* _lowerPtr() {$/;"	f	class:SkylineMatrix
_lowerPtr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline const Scalar* _lowerPtr() const {$/;"	f	class:SkylineMatrix
_upperProfilePtr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Index* _upperProfilePtr() {$/;"	f	class:SkylineMatrix
_upperProfilePtr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline const Index* _upperProfilePtr() const {$/;"	f	class:SkylineMatrix
_upperPtr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Scalar* _upperPtr() {$/;"	f	class:SkylineMatrix
_upperPtr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline const Scalar* _upperPtr() const {$/;"	f	class:SkylineMatrix
coeff	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Scalar coeff(Index row, Index col) const {$/;"	f	class:SkylineMatrix
coeffDiag	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Scalar coeffDiag(Index idx) const {$/;"	f	class:SkylineMatrix
coeffExistLower	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline bool coeffExistLower(Index row, Index col) {$/;"	f	class:SkylineMatrix
coeffExistUpper	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline bool coeffExistUpper(Index row, Index col) {$/;"	f	class:SkylineMatrix
coeffLower	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Scalar coeffLower(Index row, Index col) const {$/;"	f	class:SkylineMatrix
coeffRef	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Scalar& coeffRef(Index row, Index col) {$/;"	f	class:SkylineMatrix
coeffRefDiag	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Scalar& coeffRefDiag(Index idx) {$/;"	f	class:SkylineMatrix
coeffRefLower	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Scalar& coeffRefLower(Index row, Index col) {$/;"	f	class:SkylineMatrix
coeffRefUpper	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Scalar& coeffRefUpper(Index row, Index col) {$/;"	f	class:SkylineMatrix
coeffUpper	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Scalar coeffUpper(Index row, Index col) const {$/;"	f	class:SkylineMatrix
col	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Index col() const {$/;"	f	class:SkylineMatrix::InnerLowerIterator
col	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Index col() const {$/;"	f	class:SkylineMatrix::InnerUpperIterator
cols	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Index cols() const {$/;"	f	class:SkylineMatrix
finalize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline void finalize() {$/;"	f	class:SkylineMatrix
index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Index index() const {$/;"	f	class:SkylineMatrix::InnerLowerIterator
index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Index index() const {$/;"	f	class:SkylineMatrix::InnerUpperIterator
innerSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Index innerSize() const {$/;"	f	class:SkylineMatrix
insert	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    EIGEN_DONT_INLINE Scalar & insert(Index row, Index col) {$/;"	f	class:SkylineMatrix
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^namespace internal {$/;"	n
lowerNonZeros	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Index lowerNonZeros() const {$/;"	f	class:SkylineMatrix
lowerNonZeros	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Index lowerNonZeros(Index j) const {$/;"	f	class:SkylineMatrix
m_colStartIndex	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    Index* m_colStartIndex;$/;"	m	class:SkylineMatrix
m_data	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    SkylineStorage<Scalar> m_data;$/;"	m	class:SkylineMatrix
m_end	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    const Index m_end;$/;"	m	class:SkylineMatrix::InnerLowerIterator
m_end	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    const Index m_end;$/;"	m	class:SkylineMatrix::InnerUpperIterator
m_id	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    Index m_id;$/;"	m	class:SkylineMatrix::InnerLowerIterator
m_id	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    Index m_id;$/;"	m	class:SkylineMatrix::InnerUpperIterator
m_innerSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    Index m_innerSize;$/;"	m	class:SkylineMatrix
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    const SkylineMatrix& m_matrix;$/;"	m	class:SkylineMatrix::InnerLowerIterator
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    const SkylineMatrix& m_matrix;$/;"	m	class:SkylineMatrix::InnerUpperIterator
m_outer	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    const Index m_outer;$/;"	m	class:SkylineMatrix::InnerLowerIterator
m_outer	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    const Index m_outer;$/;"	m	class:SkylineMatrix::InnerUpperIterator
m_outerSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    Index m_outerSize;$/;"	m	class:SkylineMatrix
m_rowStartIndex	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    Index* m_rowStartIndex;$/;"	m	class:SkylineMatrix
m_start	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    const Index m_start;$/;"	m	class:SkylineMatrix::InnerLowerIterator
m_start	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    const Index m_start;$/;"	m	class:SkylineMatrix::InnerUpperIterator
nonZeros	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Index nonZeros() const {$/;"	f	class:SkylineMatrix
operator ++	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline InnerLowerIterator & operator++() {$/;"	f	class:SkylineMatrix::InnerLowerIterator
operator ++	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline InnerUpperIterator & operator++() {$/;"	f	class:SkylineMatrix::InnerUpperIterator
operator +=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline InnerLowerIterator & operator+=(Index shift) {$/;"	f	class:SkylineMatrix::InnerLowerIterator
operator +=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline InnerUpperIterator & operator+=(Index shift) {$/;"	f	class:SkylineMatrix::InnerUpperIterator
operator <<	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    friend std::ostream & operator <<(std::ostream & s, const SkylineMatrix & m) {$/;"	f	class:SkylineMatrix
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^            inline SkylineMatrix & operator=(const SkylineMatrixBase<OtherDerived>& other) {$/;"	f	class:SkylineMatrix
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline SkylineMatrix & operator=(const SkylineMatrix & other) {$/;"	f	class:SkylineMatrix
operator bool	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline operator bool() const {$/;"	f	class:SkylineMatrix::InnerLowerIterator
operator bool	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline operator bool() const {$/;"	f	class:SkylineMatrix::InnerUpperIterator
outerSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Index outerSize() const {$/;"	f	class:SkylineMatrix
prune	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    void prune(Scalar reference, RealScalar epsilon = dummy_precision<RealScalar > ()) {$/;"	f	class:SkylineMatrix
reserve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline void reserve(Index reserveSize, Index reserveUpperSize, Index reserveLowerSize) {$/;"	f	class:SkylineMatrix
resize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    void resize(size_t rows, size_t cols) {$/;"	f	class:SkylineMatrix
resizeNonZeros	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    void resizeNonZeros(Index size) {$/;"	f	class:SkylineMatrix
row	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Index row() const {$/;"	f	class:SkylineMatrix::InnerLowerIterator
row	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Index row() const {$/;"	f	class:SkylineMatrix::InnerUpperIterator
rows	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Index rows() const {$/;"	f	class:SkylineMatrix
setZero	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline void setZero() {$/;"	f	class:SkylineMatrix
size	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline size_t size() const {$/;"	f	class:SkylineMatrix::InnerLowerIterator
size	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline size_t size() const {$/;"	f	class:SkylineMatrix::InnerUpperIterator
squeeze	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline void squeeze() {$/;"	f	class:SkylineMatrix
swap	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline void swap(SkylineMatrix & other) {$/;"	f	class:SkylineMatrix
traits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^struct traits<SkylineMatrix<_Scalar, _Options> > {$/;"	s	namespace:internal
upperNonZeros	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Index upperNonZeros() const {$/;"	f	class:SkylineMatrix
upperNonZeros	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Index upperNonZeros(Index j) const {$/;"	f	class:SkylineMatrix
value	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Scalar value() const {$/;"	f	class:SkylineMatrix::InnerLowerIterator
value	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Scalar value() const {$/;"	f	class:SkylineMatrix::InnerUpperIterator
valuePtr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Scalar* valuePtr() {$/;"	f	class:SkylineMatrix::InnerLowerIterator
valuePtr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Scalar* valuePtr() {$/;"	f	class:SkylineMatrix::InnerUpperIterator
valueRef	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Scalar& valueRef() {$/;"	f	class:SkylineMatrix::InnerLowerIterator
valueRef	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline Scalar& valueRef() {$/;"	f	class:SkylineMatrix::InnerUpperIterator
~SkylineMatrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrix.h	/^    inline ~SkylineMatrix() {$/;"	f	class:SkylineMatrix
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^        CoeffReadCost = internal::traits<Derived>::CoeffReadCost,$/;"	e	enum:SkylineMatrixBase::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^        ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,$/;"	e	enum:SkylineMatrixBase::<anonymous>
EIGEN_SKYLINEMATRIXBASE_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	26;"	d
Flags	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^        Flags = internal::traits<Derived>::Flags,$/;"	e	enum:SkylineMatrixBase::<anonymous>
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    typedef typename internal::index<StorageKind>::type Index;$/;"	t	class:SkylineMatrixBase
IsRowMajor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^        IsRowMajor = Flags & RowMajorBit ? 1 : 0$/;"	e	enum:SkylineMatrixBase::<anonymous>
IsVectorAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^        IsVectorAtCompileTime = RowsAtCompileTime == 1 || ColsAtCompileTime == 1,$/;"	e	enum:SkylineMatrixBase::<anonymous>
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^        MaxColsAtCompileTime = ColsAtCompileTime,$/;"	e	enum:SkylineMatrixBase::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^        MaxRowsAtCompileTime = RowsAtCompileTime,$/;"	e	enum:SkylineMatrixBase::<anonymous>
MaxSizeAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^        MaxSizeAtCompileTime = (internal::size_at_compile_time<MaxRowsAtCompileTime,$/;"	e	enum:SkylineMatrixBase::<anonymous>
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:SkylineMatrixBase
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^        RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,$/;"	e	enum:SkylineMatrixBase::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:SkylineMatrixBase
SizeAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^        SizeAtCompileTime = (internal::size_at_compile_time<internal::traits<Derived>::RowsAtCompileTime,$/;"	e	enum:SkylineMatrixBase::<anonymous>
SkylineMatrixBase	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    SkylineMatrixBase() : m_isRValue(false) {$/;"	f	class:SkylineMatrixBase
SkylineMatrixBase	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^template<typename Derived> class SkylineMatrixBase : public EigenBase<Derived> {$/;"	c
SquareMatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^                           EIGEN_SIZE_MAX(RowsAtCompileTime, ColsAtCompileTime) > SquareMatrixType;$/;"	t	class:SkylineMatrixBase
StorageKind	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    typedef typename internal::traits<Derived>::StorageKind StorageKind;$/;"	t	class:SkylineMatrixBase
assignGeneric	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    inline void assignGeneric(const OtherDerived& other) {$/;"	f	class:SkylineMatrixBase
cols	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    inline Index cols() const {$/;"	f	class:SkylineMatrixBase
const_cast_derived	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    inline Derived& const_cast_derived() const {$/;"	f	class:SkylineMatrixBase
derived	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    inline Derived& derived() {$/;"	f	class:SkylineMatrixBase
derived	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    inline const Derived& derived() const {$/;"	f	class:SkylineMatrixBase
eval	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    EIGEN_STRONG_INLINE const typename internal::eval<Derived, IsSkyline>::type eval() const {$/;"	f	class:SkylineMatrixBase
evalTo	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    void evalTo(MatrixBase<DenseDerived>& dst) const {$/;"	f	class:SkylineMatrixBase
innerSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    Index innerSize() const {$/;"	f	class:SkylineMatrixBase
isRValue	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    bool isRValue() const {$/;"	f	class:SkylineMatrixBase
m_isRValue	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    bool m_isRValue;$/;"	m	class:SkylineMatrixBase
markAsRValue	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    Derived& markAsRValue() {$/;"	f	class:SkylineMatrixBase
nonZeros	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    inline Index nonZeros() const {$/;"	f	class:SkylineMatrixBase
operator <<	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    friend std::ostream & operator <<(std::ostream & s, const SkylineMatrixBase& m) {$/;"	f	class:SkylineMatrixBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^            inline Derived & operator=(const SkylineMatrixBase<OtherDerived>& other) {$/;"	f	class:SkylineMatrixBase
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    inline Derived & operator=(const Derived& other) {$/;"	f	class:SkylineMatrixBase
outerSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    Index outerSize() const {$/;"	f	class:SkylineMatrixBase
rows	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    inline Index rows() const {$/;"	f	class:SkylineMatrixBase
size	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    inline Index size() const {$/;"	f	class:SkylineMatrixBase
toDense	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineMatrixBase.h	/^    Matrix<Scalar, RowsAtCompileTime, ColsAtCompileTime> toDense() const {$/;"	f	class:SkylineMatrixBase
Base	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^            MatrixBase<SkylineProduct<LhsNested, RhsNested, ProductMode> > >::type Base;$/;"	t	struct:internal::traits
CoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^        CoeffReadCost = Dynamic$/;"	e	enum:internal::traits::<anonymous>
ColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^        ColsAtCompileTime = _RhsNested::ColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
EIGEN_SKYLINEPRODUCT_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	26;"	d
EvalToRowMajor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^        EvalToRowMajor = (RhsFlags & LhsFlags & RowMajorBit),$/;"	e	enum:internal::traits::<anonymous>
Flags	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^        Flags = (int(LhsFlags | RhsFlags) & HereditaryBits & RemovedBits)$/;"	e	enum:internal::traits::<anonymous>
InnerSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^        InnerSize = EIGEN_SIZE_MIN_PREFER_FIXED(_LhsNested::ColsAtCompileTime, _RhsNested::RowsAtCompileTime),$/;"	e	enum:internal::traits::<anonymous>
LhsCoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^        LhsCoeffReadCost = _LhsNested::CoeffReadCost,$/;"	e	enum:internal::traits::<anonymous>
LhsFlags	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^        LhsFlags = _LhsNested::Flags,$/;"	e	enum:internal::traits::<anonymous>
LhsNested	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^    typedef const typename internal::nested<Lhs, Rhs::RowsAtCompileTime>::type LhsNested;$/;"	t	struct:SkylineProductReturnType
MaxColsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^        MaxColsAtCompileTime = _RhsNested::MaxColsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
MaxRowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^        MaxRowsAtCompileTime = _LhsNested::MaxRowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
RemovedBits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^        RemovedBits = ~((EvalToRowMajor ? 0 : RowMajorBit) | (ResultIsSkyline ? 0 : SkylineBit)),$/;"	e	enum:internal::traits::<anonymous>
ResultIsSkyline	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^        ResultIsSkyline = ProductMode == SkylineTimeSkylineProduct,$/;"	e	enum:internal::traits::<anonymous>
RhsCoeffReadCost	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^        RhsCoeffReadCost = _RhsNested::CoeffReadCost,$/;"	e	enum:internal::traits::<anonymous>
RhsFlags	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^        RhsFlags = _RhsNested::Flags,$/;"	e	enum:internal::traits::<anonymous>
RhsNested	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^    typedef const typename internal::nested<Rhs, Lhs::RowsAtCompileTime>::type RhsNested;$/;"	t	struct:SkylineProductReturnType
RowsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^        RowsAtCompileTime = _LhsNested::RowsAtCompileTime,$/;"	e	enum:internal::traits::<anonymous>
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^    typedef typename _LhsNested::Scalar Scalar;$/;"	t	struct:internal::traits
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^    typedef typename traits<typename remove_all<Lhs>::type>::Scalar Scalar;$/;"	t	struct:internal::skyline_product_selector
SkylineProduct	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^    EIGEN_STRONG_INLINE SkylineProduct(const Lhs& lhs, const Rhs& rhs)$/;"	f	class:internal::SkylineProduct
SkylineProduct	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^class SkylineProduct : no_assignment_operator,$/;"	c	namespace:internal
SkylineProductReturnType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^struct SkylineProductReturnType {$/;"	s
Type	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^    typedef SkylineProduct<LhsNested, RhsNested, ProductMode> Type;$/;"	t	struct:SkylineProductReturnType
_LhsNested	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^    typedef typename internal::remove_all<LhsNested>::type _LhsNested;$/;"	t	struct:internal::traits
_LhsNested	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^    typedef typename traits<SkylineProduct>::_LhsNested _LhsNested;$/;"	t	class:internal::SkylineProduct
_RhsNested	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^    typedef typename internal::remove_all<RhsNested>::type _RhsNested;$/;"	t	struct:internal::traits
_RhsNested	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^    typedef typename traits<SkylineProduct>::_RhsNested _RhsNested;$/;"	t	class:internal::SkylineProduct
cols	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^    EIGEN_STRONG_INLINE Index cols() const {$/;"	f	class:internal::SkylineProduct
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^namespace internal {$/;"	n
lhs	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^    EIGEN_STRONG_INLINE const _LhsNested& lhs() const {$/;"	f	class:internal::SkylineProduct
m_lhs	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^    LhsNested m_lhs;$/;"	m	class:internal::SkylineProduct
m_rhs	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^    RhsNested m_rhs;$/;"	m	class:internal::SkylineProduct
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^SkylineMatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const {$/;"	f	class:SkylineMatrixBase
rhs	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^    EIGEN_STRONG_INLINE const _RhsNested& rhs() const {$/;"	f	class:internal::SkylineProduct
rows	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^    EIGEN_STRONG_INLINE Index rows() const {$/;"	f	class:internal::SkylineProduct
run	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^    static void run(const Lhs& lhs, const Rhs& rhs, ResultType & res) {$/;"	f	struct:internal::skyline_product_selector
skyline_col_major_time_dense_product	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^EIGEN_DONT_INLINE void skyline_col_major_time_dense_product(const Lhs& lhs, const Rhs& rhs, Dest& dst) {$/;"	f	namespace:internal
skyline_product_selector	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^struct skyline_product_selector<Lhs, Rhs, ResultType, ColMajor> {$/;"	s	namespace:internal
skyline_product_selector	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^struct skyline_product_selector<Lhs, Rhs, ResultType, RowMajor> {$/;"	s	namespace:internal
skyline_row_major_time_dense_product	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^EIGEN_DONT_INLINE void skyline_row_major_time_dense_product(const Lhs& lhs, const Rhs& rhs, Dest& dst) {$/;"	f	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineProduct.h	/^struct internal::traits<SkylineProduct<LhsNested, RhsNested, ProductMode> > {$/;"	s	class:internal
EIGEN_SKYLINE_STORAGE_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    typedef SparseIndex Index;$/;"	t	class:SkylineStorage
Map	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    static SkylineStorage Map(Index* upperProfile, Index* lowerProfile, Scalar* diag, Scalar* upper, Scalar* lower, Index size, Index upperSize, Index lowerSize) {$/;"	f	class:SkylineStorage
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    typedef typename NumTraits<Scalar>::Real RealScalar;$/;"	t	class:SkylineStorage
SkylineStorage	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    SkylineStorage()$/;"	f	class:SkylineStorage
SkylineStorage	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    SkylineStorage(const SkylineStorage& other)$/;"	f	class:SkylineStorage
SkylineStorage	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^class SkylineStorage {$/;"	c
allocatedSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    inline Index allocatedSize() const {$/;"	f	class:SkylineStorage
clear	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    inline void clear() {$/;"	f	class:SkylineStorage
diag	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    inline Scalar& diag(Index i) {$/;"	f	class:SkylineStorage
diag	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    inline const Scalar& diag(Index i) const {$/;"	f	class:SkylineStorage
diagSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    inline Index diagSize() const {$/;"	f	class:SkylineStorage
lower	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    inline Scalar& lower(Index i) {$/;"	f	class:SkylineStorage
lower	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    inline const Scalar& lower(Index i) const {$/;"	f	class:SkylineStorage
lowerProfile	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    inline Index& lowerProfile(Index i) {$/;"	f	class:SkylineStorage
lowerProfile	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    inline const Index& lowerProfile(Index i) const {$/;"	f	class:SkylineStorage
lowerProfileSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    inline Index lowerProfileSize() const {$/;"	f	class:SkylineStorage
lowerSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    inline Index lowerSize() const {$/;"	f	class:SkylineStorage
m_allocatedSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    Index m_allocatedSize;$/;"	m	class:SkylineStorage
m_diag	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    Scalar* m_diag;$/;"	m	class:SkylineStorage
m_diagSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    Index m_diagSize;$/;"	m	class:SkylineStorage
m_lower	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    Scalar* m_lower;$/;"	m	class:SkylineStorage
m_lowerProfile	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    Index* m_lowerProfile;$/;"	m	class:SkylineStorage
m_lowerProfileSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    Index m_lowerProfileSize;$/;"	m	class:SkylineStorage
m_lowerSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    Index m_lowerSize;$/;"	m	class:SkylineStorage
m_upper	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    Scalar* m_upper;$/;"	m	class:SkylineStorage
m_upperProfile	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    Index* m_upperProfile;$/;"	m	class:SkylineStorage
m_upperProfileSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    Index m_upperProfileSize;$/;"	m	class:SkylineStorage
m_upperSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    Index m_upperSize;$/;"	m	class:SkylineStorage
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    SkylineStorage & operator=(const SkylineStorage& other) {$/;"	f	class:SkylineStorage
prune	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    void prune(Scalar reference, RealScalar epsilon = dummy_precision<RealScalar>()) {$/;"	f	class:SkylineStorage
reallocate	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    inline void reallocate(Index diagSize, Index upperProfileSize, Index lowerProfileSize, Index upperSize, Index lowerSize) {$/;"	f	class:SkylineStorage
reserve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    void reserve(Index size, Index upperProfileSize, Index lowerProfileSize, Index upperSize, Index lowerSize) {$/;"	f	class:SkylineStorage
reset	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    inline void reset() {$/;"	f	class:SkylineStorage
resize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    void resize(Index diagSize, Index upperProfileSize, Index lowerProfileSize, Index upperSize, Index lowerSize, float reserveSizeFactor = 0) {$/;"	f	class:SkylineStorage
squeeze	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    void squeeze() {$/;"	f	class:SkylineStorage
swap	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    void swap(SkylineStorage& other) {$/;"	f	class:SkylineStorage
upper	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    inline Scalar& upper(Index i) {$/;"	f	class:SkylineStorage
upper	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    inline const Scalar& upper(Index i) const {$/;"	f	class:SkylineStorage
upperProfile	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    inline Index& upperProfile(Index i) {$/;"	f	class:SkylineStorage
upperProfile	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    inline const Index& upperProfile(Index i) const {$/;"	f	class:SkylineStorage
upperProfileSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    inline Index upperProfileSize() const {$/;"	f	class:SkylineStorage
upperSize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    inline Index upperSize() const {$/;"	f	class:SkylineStorage
~SkylineStorage	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineStorage.h	/^    ~SkylineStorage() {$/;"	f	class:SkylineStorage
AdditionalProductEvaluationMode	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineUtil.h	/^enum AdditionalProductEvaluationMode {SkylineTimeDenseProduct, SkylineTimeSkylineProduct, DenseTimeSkylineProduct};$/;"	g
DenseTimeSkylineProduct	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineUtil.h	/^enum AdditionalProductEvaluationMode {SkylineTimeDenseProduct, SkylineTimeSkylineProduct, DenseTimeSkylineProduct};$/;"	e	enum:AdditionalProductEvaluationMode
EIGEN_DBG_SKYLINE	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineUtil.h	29;"	d
EIGEN_DBG_SKYLINE	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineUtil.h	31;"	d
EIGEN_SKYLINEUTIL_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineUtil.h	26;"	d
EIGEN_SKYLINE_GENERIC_PUBLIC_INTERFACE	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineUtil.h	73;"	d
EIGEN_SKYLINE_INHERIT_ASSIGNMENT_OPERATOR	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineUtil.h	40;"	d
EIGEN_SKYLINE_INHERIT_ASSIGNMENT_OPERATORS	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineUtil.h	58;"	d
EIGEN_SKYLINE_INHERIT_SCALAR_ASSIGNMENT_OPERATOR	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineUtil.h	51;"	d
IsSkyline	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineUtil.h	/^enum {IsSkyline = SkylineBit};$/;"	e
SkylineBit	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineUtil.h	/^const unsigned int SkylineBit = 0x1200;$/;"	v
SkylineTimeDenseProduct	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineUtil.h	/^enum AdditionalProductEvaluationMode {SkylineTimeDenseProduct, SkylineTimeSkylineProduct, DenseTimeSkylineProduct};$/;"	e	enum:AdditionalProductEvaluationMode
SkylineTimeSkylineProduct	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineUtil.h	/^enum AdditionalProductEvaluationMode {SkylineTimeDenseProduct, SkylineTimeSkylineProduct, DenseTimeSkylineProduct};$/;"	e	enum:AdditionalProductEvaluationMode
_EIGEN_SKYLINE_GENERIC_PUBLIC_INTERFACE	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineUtil.h	65;"	d
_Flags	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineUtil.h	/^          _Flags = traits<T>::Flags$/;"	e	enum:internal::eval::<anonymous>
_Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineUtil.h	/^    typedef typename traits<T>::Scalar _Scalar;$/;"	t	class:internal::eval
eval	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineUtil.h	/^template<typename T> class eval<T,IsSkyline>$/;"	c	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineUtil.h	/^namespace internal {$/;"	n
type	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/Skyline/SkylineUtil.h	/^    typedef SkylineMatrix<_Scalar, _Flags> type;$/;"	t	class:internal::eval
CS_FLIP	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Amd.h	54;"	d
CS_MARK	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Amd.h	57;"	d
CS_MARKED	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Amd.h	56;"	d
CS_UNFLIP	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Amd.h	55;"	d
EIGEN_SPARSE_AMD_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Amd.h	49;"	d
cs_tdfs	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Amd.h	/^Index cs_tdfs(Index j, Index k, Index *head, const Index *next, Index *post, Index *stack)$/;"	f	namespace:internal
cs_wclear	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Amd.h	/^static int cs_wclear (Index mark, Index lemax, Index *w, Index n)$/;"	f	namespace:internal
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Amd.h	/^namespace internal {$/;"	n
minimum_degree_ordering	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Amd.h	/^void minimum_degree_ordering(SparseMatrix<Scalar,ColMajor,Index>& C, PermutationMatrix<Dynamic>& perm)$/;"	f	namespace:internal
CholMatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    typedef MatrixType CholMatrixType;$/;"	t	class:CholmodDecomposition
CholmodAuto	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^  CholmodAuto, CholmodSimplicialLLt, CholmodSupernodalLLt, CholmodLDLt$/;"	e	enum:CholmodMode
CholmodDecomposition	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    CholmodDecomposition()$/;"	f	class:CholmodDecomposition
CholmodDecomposition	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    CholmodDecomposition(const MatrixType& matrix)$/;"	f	class:CholmodDecomposition
CholmodDecomposition	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^class CholmodDecomposition$/;"	c
CholmodLDLt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^  CholmodAuto, CholmodSimplicialLLt, CholmodSupernodalLLt, CholmodLDLt$/;"	e	enum:CholmodMode
CholmodMode	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^enum CholmodMode {$/;"	g
CholmodSimplicialLLt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^  CholmodAuto, CholmodSimplicialLLt, CholmodSupernodalLLt, CholmodLDLt$/;"	e	enum:CholmodMode
CholmodSupernodalLLt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^  CholmodAuto, CholmodSimplicialLLt, CholmodSupernodalLLt, CholmodLDLt$/;"	e	enum:CholmodMode
Dec	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^  typedef CholmodDecomposition<_MatrixType,_UpLo> Dec;$/;"	t	struct:internal::solve_retval
Dec	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^  typedef CholmodDecomposition<_MatrixType,_UpLo> Dec;$/;"	t	struct:internal::sparse_solve_retval
EIGEN_CHOLMODSUPPORT_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:CholmodDecomposition
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:CholmodDecomposition
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:CholmodDecomposition
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:CholmodDecomposition
UpLo	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    enum { UpLo = _UpLo };$/;"	e	enum:CholmodDecomposition::<anonymous>
_solve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    void _solve(const MatrixBase<Rhs> &b, MatrixBase<Dest> &dest) const$/;"	f	class:CholmodDecomposition
_solve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    void _solve(const SparseMatrix<RhsScalar,RhsOptions,RhsIndex> &b, SparseMatrix<DestScalar,DestOptions,DestIndex> &dest) const$/;"	f	class:CholmodDecomposition
analyzePattern	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    void analyzePattern(const MatrixType& matrix)$/;"	f	class:CholmodDecomposition
cholmod	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    cholmod_common& cholmod() { return m_cholmod; }$/;"	f	class:CholmodDecomposition
cholmod_configure_matrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^void cholmod_configure_matrix(CholmodType& mat)$/;"	f	namespace:internal
cols	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    inline Index cols() const { return m_cholmodFactor->n; }$/;"	f	class:CholmodDecomposition
compute	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    void compute(const MatrixType& matrix)$/;"	f	class:CholmodDecomposition
dumpMemory	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    void dumpMemory(Stream& s)$/;"	f	class:CholmodDecomposition
evalTo	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::solve_retval
evalTo	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::sparse_solve_retval
factorize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    void factorize(const MatrixType& matrix)$/;"	f	class:CholmodDecomposition
info	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    ComputationInfo info() const$/;"	f	class:CholmodDecomposition
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^namespace internal {$/;"	n
m_analysisIsOk	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    int m_analysisIsOk;$/;"	m	class:CholmodDecomposition
m_cholmod	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    mutable cholmod_common m_cholmod;$/;"	m	class:CholmodDecomposition
m_cholmodFactor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    cholmod_factor* m_cholmodFactor;$/;"	m	class:CholmodDecomposition
m_factorizationIsOk	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    int m_factorizationIsOk;$/;"	m	class:CholmodDecomposition
m_info	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    mutable ComputationInfo m_info;$/;"	m	class:CholmodDecomposition
m_isInitialized	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    bool m_isInitialized;$/;"	m	class:CholmodDecomposition
rows	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    inline Index rows() const { return m_cholmodFactor->n; }$/;"	f	class:CholmodDecomposition
setMode	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    void setMode(CholmodMode mode)$/;"	f	class:CholmodDecomposition
solve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:CholmodDecomposition
solve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    solve(const SparseMatrixBase<Rhs>& b) const$/;"	f	class:CholmodDecomposition
solve_retval	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^struct solve_retval<CholmodDecomposition<_MatrixType,_UpLo>, Rhs>$/;"	s	namespace:internal
sparse_solve_retval	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^struct sparse_solve_retval<CholmodDecomposition<_MatrixType,_UpLo>, Rhs>$/;"	s	namespace:internal
viewAsCholmod	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^cholmod_dense viewAsCholmod(MatrixBase<Derived>& mat)$/;"	f
viewAsCholmod	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^cholmod_sparse viewAsCholmod(SparseMatrix<_Scalar,_Options,_Index>& mat)$/;"	f
viewAsCholmod	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^cholmod_sparse viewAsCholmod(const SparseSelfAdjointView<SparseMatrix<_Scalar,_Options,_Index>, UpLo>& mat)$/;"	f
viewAsCholmod	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^const cholmod_sparse viewAsCholmod(const SparseMatrix<_Scalar,_Options,_Index>& mat)$/;"	f
viewAsEigen	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^MappedSparseMatrix<Scalar,Flags,Index> viewAsEigen(cholmod_sparse& cm)$/;"	f
~CholmodDecomposition	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupport.h	/^    ~CholmodDecomposition()$/;"	f	class:CholmodDecomposition
Base	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    typedef SparseLDLT<_MatrixType> Base;$/;"	t	class:SparseLDLT
Base	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    typedef SparseLLT<_MatrixType> Base;$/;"	t	class:SparseLLT
CholMatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    typedef typename Base::CholMatrixType CholMatrixType;$/;"	t	class:SparseLLT
EIGEN_CHOLMODSUPPORT_LEGACY_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:SparseLDLT
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:SparseLLT
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:SparseLDLT
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:SparseLLT
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    typedef typename Base::RealScalar RealScalar;$/;"	t	class:SparseLDLT
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    typedef typename Base::RealScalar RealScalar;$/;"	t	class:SparseLLT
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    typedef typename Base::Scalar Scalar;$/;"	t	class:SparseLDLT
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    typedef typename Base::Scalar Scalar;$/;"	t	class:SparseLLT
SpLDLTDecType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^  typedef SparseLDLT<_MatrixType, Cholmod> SpLDLTDecType;$/;"	t	struct:internal::solve_retval
SpLLTDecType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^  typedef SparseLLT<_MatrixType, Cholmod> SpLLTDecType;$/;"	t	struct:internal::solve_retval
SparseLDLT	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    SparseLDLT(const _MatrixType& matrix, int flags = 0)$/;"	f	class:SparseLDLT
SparseLDLT	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    SparseLDLT(int flags = 0)$/;"	f	class:SparseLDLT
SparseLDLT	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^class SparseLDLT<_MatrixType,Cholmod> : public SparseLDLT<_MatrixType>$/;"	c
SparseLLT	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    SparseLLT(const MatrixType& matrix, int flags = 0)$/;"	f	class:SparseLLT
SparseLLT	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    SparseLLT(int flags = 0)$/;"	f	class:SparseLLT
SparseLLT	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^class SparseLLT<_MatrixType, Cholmod> : public SparseLLT<_MatrixType>$/;"	c
cholmodCommon	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    inline cholmod_common* cholmodCommon() const$/;"	f	class:SparseLDLT
cholmodCommon	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    inline cholmod_common* cholmodCommon() const$/;"	f	class:SparseLLT
cholmodFactor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    inline const cholmod_factor* cholmodFactor() const$/;"	f	class:SparseLDLT
cholmodFactor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    inline const cholmod_factor* cholmodFactor() const$/;"	f	class:SparseLLT
cholmod_configure_matrix_legacy	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^void cholmod_configure_matrix_legacy(CholmodType& mat)$/;"	f	namespace:internal
cholmod_map_eigen_to_dense	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^cholmod_dense cholmod_map_eigen_to_dense(MatrixBase<Derived>& mat)$/;"	f	namespace:internal
cholmod_map_eigen_to_sparse	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^cholmod_sparse cholmod_map_eigen_to_sparse(_MatrixType& mat)$/;"	f	namespace:internal
cols	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:SparseLDLT
cols	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:SparseLLT
compute	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^void SparseLDLT<_MatrixType,Cholmod>::compute(const _MatrixType& a)$/;"	f	class:SparseLDLT
compute	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^void SparseLLT<_MatrixType,Cholmod>::compute(const _MatrixType& a)$/;"	f	class:SparseLLT
evalTo	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::solve_retval
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^namespace internal {$/;"	n
m_cholmod	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    mutable cholmod_common m_cholmod;$/;"	m	class:SparseLDLT
m_cholmod	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    mutable cholmod_common m_cholmod;$/;"	m	class:SparseLLT
m_cholmodFactor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    cholmod_factor* m_cholmodFactor;$/;"	m	class:SparseLDLT
m_cholmodFactor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    cholmod_factor* m_cholmodFactor;$/;"	m	class:SparseLLT
map_cholmod_sparse_to_eigen	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^MappedSparseMatrix<Scalar,Flags,Index> map_cholmod_sparse_to_eigen(cholmod_sparse& cm)$/;"	f	namespace:internal
matrixL	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^SparseLDLT<_MatrixType,Cholmod>::matrixL() const$/;"	f	class:SparseLDLT
matrixL	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^SparseLLT<_MatrixType,Cholmod>::matrixL() const$/;"	f	class:SparseLLT
rows	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:SparseLDLT
rows	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:SparseLLT
solve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:SparseLDLT
solve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:SparseLLT
solveInPlace	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^bool SparseLLT<_MatrixType,Cholmod>::solveInPlace(MatrixBase<Derived> &b) const$/;"	f	class:SparseLLT
solveInPlace	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^void SparseLDLT<_MatrixType,Cholmod>::solveInPlace(MatrixBase<Derived> &b) const$/;"	f	class:SparseLDLT
solve_retval	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^  struct solve_retval<SparseLDLT<_MatrixType, Cholmod>, Rhs>$/;"	s	namespace:internal
solve_retval	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^  struct solve_retval<SparseLLT<_MatrixType, Cholmod>, Rhs>$/;"	s	namespace:internal
succeeded	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^bool SparseLDLT<_MatrixType,Cholmod>::succeeded() const$/;"	f	class:SparseLDLT
succeeded	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^bool SparseLLT<_MatrixType,Cholmod>::succeeded() const$/;"	f	class:SparseLLT
~SparseLDLT	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    ~SparseLDLT()$/;"	f	class:SparseLDLT
~SparseLLT	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/CholmodSupportLegacy.h	/^    ~SparseLLT()$/;"	f	class:SparseLLT
EIGEN_RANDOMSETTER_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	26;"	d
GoogleDenseHashMapTraits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^template<typename Scalar> struct GoogleDenseHashMapTraits$/;"	s
GoogleSparseHashMapTraits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^template<typename Scalar> struct GoogleSparseHashMapTraits$/;"	s
HashMapType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^    typedef typename MapTraits<ScalarWrapper>::Type HashMapType;$/;"	t	class:RandomSetter
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^    typedef typename SparseMatrixType::Index Index;$/;"	t	class:RandomSetter
IsLower	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^      IsLower = SparseMatrixType::Flags & Lower$/;"	e	enum:RandomSetter::<anonymous>
IsSorted	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^    IsSorted = 0$/;"	e	enum:GoogleDenseHashMapTraits::<anonymous>
IsSorted	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^    IsSorted = 0$/;"	e	enum:GoogleSparseHashMapTraits::<anonymous>
IsSorted	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^    IsSorted = 0$/;"	e	enum:StdUnorderedMapTraits::<anonymous>
IsSorted	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^    IsSorted = 1$/;"	e	enum:StdMapTraits::<anonymous>
IsUpper	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^      IsUpper = SparseMatrixType::Flags & Upper,$/;"	e	enum:RandomSetter::<anonymous>
KeyType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^    typedef typename MapTraits<ScalarWrapper>::KeyType KeyType;$/;"	t	class:RandomSetter
KeyType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^  typedef int KeyType;$/;"	t	struct:GoogleDenseHashMapTraits
KeyType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^  typedef int KeyType;$/;"	t	struct:GoogleSparseHashMapTraits
KeyType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^  typedef int KeyType;$/;"	t	struct:StdMapTraits
KeyType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^  typedef int KeyType;$/;"	t	struct:StdUnorderedMapTraits
OuterPacketMask	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^    static const int OuterPacketMask = (1 << OuterPacketBits) - 1;$/;"	m	class:RandomSetter
RandomSetter	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^    inline RandomSetter(SparseMatrixType& target)$/;"	f	class:RandomSetter
RandomSetter	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^class RandomSetter$/;"	c
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^    typedef typename SparseMatrixType::Scalar Scalar;$/;"	t	class:RandomSetter
ScalarWrapper	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^      ScalarWrapper() : value(0) {}$/;"	f	struct:RandomSetter::ScalarWrapper
ScalarWrapper	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^    struct ScalarWrapper$/;"	s	class:RandomSetter
SetterRowMajor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^      SetterRowMajor = SwapStorage ? 1-TargetRowMajor : TargetRowMajor,$/;"	e	enum:RandomSetter::<anonymous>
StdMapTraits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^template<typename Scalar> struct StdMapTraits$/;"	s
StdUnorderedMapTraits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^template<typename Scalar> struct StdUnorderedMapTraits$/;"	s
SwapStorage	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^      SwapStorage = 1 - MapTraits<ScalarWrapper>::IsSorted,$/;"	e	enum:RandomSetter::<anonymous>
TargetRowMajor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^      TargetRowMajor = (SparseMatrixType::Flags & RowMajorBit) ? 1 : 0,$/;"	e	enum:RandomSetter::<anonymous>
Type	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^  typedef google::dense_hash_map<KeyType,Scalar> Type;$/;"	t	struct:GoogleDenseHashMapTraits
Type	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^  typedef google::sparse_hash_map<KeyType,Scalar> Type;$/;"	t	struct:GoogleSparseHashMapTraits
Type	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^  typedef std::map<KeyType,Scalar> Type;$/;"	t	struct:StdMapTraits
Type	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^  typedef std::unordered_map<KeyType,Scalar> Type;$/;"	t	struct:StdUnorderedMapTraits
m_hashmaps	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^    HashMapType* m_hashmaps;$/;"	m	class:RandomSetter
m_keyBitsOffset	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^    unsigned char m_keyBitsOffset;$/;"	m	class:RandomSetter
m_outerPackets	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^    Index m_outerPackets;$/;"	m	class:RandomSetter
mp_target	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^    SparseMatrixType* mp_target;$/;"	m	class:RandomSetter
nonZeros	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^    Index nonZeros() const$/;"	f	class:RandomSetter
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^    Scalar& operator() (Index row, Index col)$/;"	f	class:RandomSetter
setInvalidKey	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^  static void setInvalidKey(Type& map, const KeyType& k)$/;"	f	struct:GoogleDenseHashMapTraits
setInvalidKey	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^  static void setInvalidKey(Type&, const KeyType&) {}$/;"	f	struct:GoogleSparseHashMapTraits
setInvalidKey	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^  static void setInvalidKey(Type&, const KeyType&) {}$/;"	f	struct:StdMapTraits
setInvalidKey	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^  static void setInvalidKey(Type&, const KeyType&) {}$/;"	f	struct:StdUnorderedMapTraits
value	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^      Scalar value;$/;"	m	struct:RandomSetter::ScalarWrapper
~RandomSetter	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/RandomSetter.h	/^    ~RandomSetter()$/;"	f	class:RandomSetter
CholMatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    typedef SparseMatrix<Scalar,ColMajor,Index> CholMatrixType;$/;"	t	class:SimplicialCholesky
Dec	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^  typedef SimplicialCholesky<_MatrixType,_UpLo> Dec;$/;"	t	struct:internal::solve_retval
Dec	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^  typedef SimplicialCholesky<_MatrixType,_UpLo> Dec;$/;"	t	struct:internal::sparse_solve_retval
EIGEN_SIMPLICIAL_CHOLESKY_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	64;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:SimplicialCholesky
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:SimplicialCholesky
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    typedef typename MatrixType::RealScalar RealScalar;$/;"	t	class:SimplicialCholesky
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    typedef typename MatrixType::Scalar Scalar;$/;"	t	class:SimplicialCholesky
SimplicialCholesky	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    SimplicialCholesky()$/;"	f	class:SimplicialCholesky
SimplicialCholesky	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    SimplicialCholesky(const MatrixType& matrix)$/;"	f	class:SimplicialCholesky
SimplicialCholesky	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^class SimplicialCholesky$/;"	c
SimplicialCholeskyLDLt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^  SimplicialCholeskyLDLt$/;"	e	enum:SimplicialCholeskyMode
SimplicialCholeskyLLt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^  SimplicialCholeskyLLt,$/;"	e	enum:SimplicialCholeskyMode
SimplicialCholeskyMode	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^enum SimplicialCholeskyMode {$/;"	g
UpLo	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    enum { UpLo = _UpLo };$/;"	e	enum:SimplicialCholesky::<anonymous>
VectorType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    typedef Matrix<Scalar,MatrixType::ColsAtCompileTime,1> VectorType;$/;"	t	class:SimplicialCholesky
_solve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    void _solve(const MatrixBase<Rhs> &b, MatrixBase<Dest> &dest) const$/;"	f	class:SimplicialCholesky
analyzePattern	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^void SimplicialCholesky<_MatrixType,_UpLo>::analyzePattern(const MatrixType& a)$/;"	f	class:SimplicialCholesky
cols	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:SimplicialCholesky
compute	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    SimplicialCholesky& compute(const MatrixType& matrix)$/;"	f	class:SimplicialCholesky
dumpMemory	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    void dumpMemory(Stream& s)$/;"	f	class:SimplicialCholesky
evalTo	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::solve_retval
evalTo	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::sparse_solve_retval
factorize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^void SimplicialCholesky<_MatrixType,_UpLo>::factorize(const MatrixType& a)$/;"	f	class:SimplicialCholesky
info	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    ComputationInfo info() const$/;"	f	class:SimplicialCholesky
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^namespace internal {$/;"	n
keep_diag	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    struct keep_diag {$/;"	s	class:SimplicialCholesky
m_LDLt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    bool m_LDLt;$/;"	m	class:SimplicialCholesky
m_P	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    PermutationMatrix<Dynamic> m_P;     \/\/ the permutation$/;"	m	class:SimplicialCholesky
m_Pinv	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    PermutationMatrix<Dynamic> m_Pinv;  \/\/ the inverse permutation$/;"	m	class:SimplicialCholesky
m_analysisIsOk	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    bool m_analysisIsOk;$/;"	m	class:SimplicialCholesky
m_diag	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    VectorType m_diag;                  \/\/ the diagonal coefficients in case of a LDLt decomposition$/;"	m	class:SimplicialCholesky
m_factorizationIsOk	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    bool m_factorizationIsOk;$/;"	m	class:SimplicialCholesky
m_info	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    mutable ComputationInfo m_info;$/;"	m	class:SimplicialCholesky
m_isInitialized	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    bool m_isInitialized;$/;"	m	class:SimplicialCholesky
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    CholMatrixType m_matrix;$/;"	m	class:SimplicialCholesky
m_nonZerosPerCol	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    VectorXi m_nonZerosPerCol;$/;"	m	class:SimplicialCholesky
m_parent	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    VectorXi m_parent;                  \/\/ elimination tree$/;"	m	class:SimplicialCholesky
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^      inline bool operator() (const Index& row, const Index& col, const Scalar&) const$/;"	f	struct:SimplicialCholesky::keep_diag
permutationP	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    const PermutationMatrix<Dynamic>& permutationP() const$/;"	f	class:SimplicialCholesky
permutationPinv	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    const PermutationMatrix<Dynamic>& permutationPinv() const$/;"	f	class:SimplicialCholesky
rows	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:SimplicialCholesky
setMode	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    SimplicialCholesky& setMode(SimplicialCholeskyMode mode)$/;"	f	class:SimplicialCholesky
solve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:SimplicialCholesky
solve_retval	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^struct solve_retval<SimplicialCholesky<_MatrixType,_UpLo>, Rhs>$/;"	s	namespace:internal
sparse_solve_retval	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^struct sparse_solve_retval<SimplicialCholesky<_MatrixType,_UpLo>, Rhs>$/;"	s	namespace:internal
~SimplicialCholesky	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SimplicialCholesky.h	/^    ~SimplicialCholesky()$/;"	f	class:SimplicialCholesky
Base	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Solve.h	/^  typedef ReturnByValue<sparse_solve_retval_base> Base;$/;"	t	struct:internal::sparse_solve_retval_base
DecompositionType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Solve.h	/^  typedef _DecompositionType DecompositionType;$/;"	t	struct:internal::sparse_solve_retval_base
EIGEN_MAKE_SPARSE_SOLVE_HELPERS	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Solve.h	67;"	d
EIGEN_SPARSE_SOLVE_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Solve.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Solve.h	/^  typedef typename Base::Index Index;$/;"	t	struct:internal::sparse_solve_retval_base
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Solve.h	/^  typedef typename DecompositionType::MatrixType MatrixType;$/;"	t	struct:internal::traits
ReturnType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Solve.h	/^  typedef SparseMatrix<typename Rhs::Scalar, Rhs::Options, typename Rhs::Index> ReturnType;$/;"	t	struct:internal::traits
RhsNestedCleaned	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Solve.h	/^  typedef typename remove_all<typename Rhs::Nested>::type RhsNestedCleaned;$/;"	t	struct:internal::sparse_solve_retval_base
cols	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Solve.h	/^  inline Index cols() const { return m_rhs.cols(); }$/;"	f	struct:internal::sparse_solve_retval_base
dec	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Solve.h	/^  inline const DecompositionType& dec() const { return m_dec; }$/;"	f	struct:internal::sparse_solve_retval_base
evalTo	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Solve.h	/^  template<typename Dest> inline void evalTo(Dest& dst) const$/;"	f	struct:internal::sparse_solve_retval_base
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Solve.h	/^namespace internal {$/;"	n
m_dec	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Solve.h	/^    const DecompositionType& m_dec;$/;"	m	struct:internal::sparse_solve_retval_base
m_rhs	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Solve.h	/^    const typename Rhs::Nested m_rhs;$/;"	m	struct:internal::sparse_solve_retval_base
rhs	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Solve.h	/^  inline const RhsNestedCleaned& rhs() const { return m_rhs; }$/;"	f	struct:internal::sparse_solve_retval_base
rows	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Solve.h	/^  inline Index rows() const { return m_dec.cols(); }$/;"	f	struct:internal::sparse_solve_retval_base
sparse_solve_retval_base	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Solve.h	/^  sparse_solve_retval_base(const DecompositionType& dec, const Rhs& rhs)$/;"	f	struct:internal::sparse_solve_retval_base
sparse_solve_retval_base	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Solve.h	/^template<typename _DecompositionType, typename Rhs> struct sparse_solve_retval_base$/;"	s	namespace:internal
traits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/Solve.h	/^struct traits<sparse_solve_retval_base<DecompositionType, Rhs> >$/;"	s	namespace:internal
CholMatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    typedef SparseMatrix<Scalar> CholMatrixType;$/;"	t	class:SparseLDLT
EIGEN_SPARSELDLT_LEGACY_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	64;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:SparseLDLT
MatrixLIsDirty	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^      MatrixLIsDirty               = 0x20000$/;"	e	enum:SparseLDLT::<anonymous>
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:SparseLDLT
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    typedef typename NumTraits<typename _MatrixType::Scalar>::Real RealScalar;$/;"	t	class:SparseLDLT
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    typedef typename _MatrixType::Scalar Scalar;$/;"	t	class:SparseLDLT
SpLDLTDecType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^  typedef SparseLDLT<_MatrixType> SpLDLTDecType;$/;"	t	struct:internal::solve_retval
SparseLDLT	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    SparseLDLT(const MatrixType& matrix, int flags = 0)$/;"	f	class:SparseLDLT
SparseLDLT	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    SparseLDLT(int flags = 0)$/;"	f	class:SparseLDLT
SparseLDLT	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^class SparseLDLT$/;"	c
SupernodalFactorIsDirty	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^      SupernodalFactorIsDirty      = 0x10000,$/;"	e	enum:SparseLDLT::<anonymous>
VectorType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    typedef Matrix<Scalar,_MatrixType::ColsAtCompileTime,1> VectorType;$/;"	t	class:SparseLDLT
_numeric	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^bool SparseLDLT<_MatrixType,Backend>::_numeric(const _MatrixType& a)$/;"	f	class:SparseLDLT
_symbolic	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^void SparseLDLT<_MatrixType,Backend>::_symbolic(const _MatrixType& a)$/;"	f	class:SparseLDLT
cols	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:SparseLDLT
compute	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^void SparseLDLT<_MatrixType,Backend>::compute(const _MatrixType& a)$/;"	f	class:SparseLDLT
diag	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    inline const VectorType& diag() const { return m_diag; }$/;"	f	class:SparseLDLT
evalTo	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::solve_retval
flags	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    int flags() const { return m_flags; }$/;"	f	class:SparseLDLT
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^namespace internal {$/;"	n
m_P	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    PermutationMatrix<Dynamic> m_P;$/;"	m	class:SparseLDLT
m_Pinv	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    PermutationMatrix<Dynamic> m_Pinv;$/;"	m	class:SparseLDLT
m_diag	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    VectorType m_diag;$/;"	m	class:SparseLDLT
m_flags	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    int m_flags;$/;"	m	class:SparseLDLT
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    CholMatrixType m_matrix;$/;"	m	class:SparseLDLT
m_nonZerosPerCol	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    VectorXi m_nonZerosPerCol;$/;"	m	class:SparseLDLT
m_parent	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    VectorXi m_parent; \/\/ elimination tree$/;"	m	class:SparseLDLT
m_precision	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    RealScalar m_precision;$/;"	m	class:SparseLDLT
m_status	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    mutable int m_status;$/;"	m	class:SparseLDLT
m_succeeded	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    bool m_succeeded;$/;"	m	class:SparseLDLT
matrixL	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    inline const CholMatrixType& matrixL(void) const { return m_matrix; }$/;"	f	class:SparseLDLT
precision	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    RealScalar precision() const { return m_precision; }$/;"	f	class:SparseLDLT
rows	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:SparseLDLT
setPrecision	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    void setPrecision(RealScalar v) { m_precision = v; }$/;"	f	class:SparseLDLT
settags	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    void settags(int f) { m_flags = f; }$/;"	f	class:SparseLDLT
solve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:SparseLDLT
solveInPlace	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^bool SparseLDLT<_MatrixType, Backend>::solveInPlace(MatrixBase<Derived> &b) const$/;"	f	class:SparseLDLT
solve_retval	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^struct solve_retval<SparseLDLT<_MatrixType>, Rhs>$/;"	s	namespace:internal
succeeded	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    inline bool succeeded(void) const { return m_succeeded; }$/;"	f	class:SparseLDLT
vectorD	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLDLTLegacy.h	/^    inline VectorType vectorD(void) const { return m_diag; }$/;"	f	class:SparseLDLT
CholMatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    typedef SparseMatrix<Scalar> CholMatrixType;$/;"	t	class:SparseLLT
EIGEN_SPARSELLT_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:SparseLLT
MatrixLIsDirty	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^      MatrixLIsDirty               = 0x20000$/;"	e	enum:SparseLLT::<anonymous>
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:SparseLLT
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    typedef typename NumTraits<typename _MatrixType::Scalar>::Real RealScalar;$/;"	t	class:SparseLLT
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    typedef typename _MatrixType::Scalar Scalar;$/;"	t	class:SparseLLT
SpLLTDecType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^  typedef SparseLLT<_MatrixType> SpLLTDecType;$/;"	t	struct:internal::solve_retval
SparseLLT	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    SparseLLT(const MatrixType& matrix, int flags = 0)$/;"	f	class:SparseLLT
SparseLLT	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    SparseLLT(int flags = 0)$/;"	f	class:SparseLLT
SparseLLT	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^class SparseLLT$/;"	c
SupernodalFactorIsDirty	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^      SupernodalFactorIsDirty      = 0x10000,$/;"	e	enum:SparseLLT::<anonymous>
cols	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    inline Index cols() const { return m_matrix.cols(); }$/;"	f	class:SparseLLT
compute	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^void SparseLLT<_MatrixType,Backend>::compute(const _MatrixType& a)$/;"	f	class:SparseLLT
evalTo	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::solve_retval
flags	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    int flags() const { return m_flags; }$/;"	f	class:SparseLLT
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^namespace internal {$/;"	n
m_flags	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    int m_flags;$/;"	m	class:SparseLLT
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    CholMatrixType m_matrix;$/;"	m	class:SparseLLT
m_precision	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    RealScalar m_precision;$/;"	m	class:SparseLLT
m_status	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    mutable int m_status;$/;"	m	class:SparseLLT
m_succeeded	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    bool m_succeeded;$/;"	m	class:SparseLLT
matrixL	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    inline const CholMatrixType& matrixL(void) const { return m_matrix; }$/;"	f	class:SparseLLT
precision	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    RealScalar precision() const { return m_precision; }$/;"	f	class:SparseLLT
rows	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    inline Index rows() const { return m_matrix.rows(); }$/;"	f	class:SparseLLT
setFlags	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    void setFlags(int f) { m_flags = f; }$/;"	f	class:SparseLLT
setPrecision	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    void setPrecision(RealScalar v) { m_precision = v; }$/;"	f	class:SparseLLT
solve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:SparseLLT
solveInPlace	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^bool SparseLLT<_MatrixType, Backend>::solveInPlace(MatrixBase<Derived> &b) const$/;"	f	class:SparseLLT
solve_retval	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^struct solve_retval<SparseLLT<_MatrixType>, Rhs>$/;"	s	namespace:internal
succeeded	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLLT.h	/^    inline bool succeeded(void) const { return m_succeeded; }$/;"	f	class:SparseLLT
EIGEN_SPARSELU_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	26;"	d
LUMatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    typedef SparseMatrix<Scalar> LUMatrixType;$/;"	t	class:SparseLU
MatrixLUIsDirty	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^      MatrixLUIsDirty             = 0x10000$/;"	e	enum:SparseLU::<anonymous>
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:SparseLU
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    typedef typename NumTraits<typename _MatrixType::Scalar>::Real RealScalar;$/;"	t	class:SparseLU
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    typedef typename _MatrixType::Scalar Scalar;$/;"	t	class:SparseLU
SparseLU	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    SparseLU(const _MatrixType& matrix, int flags = 0)$/;"	f	class:SparseLU
SparseLU	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    SparseLU(int flags = 0)$/;"	f	class:SparseLU
SparseLU	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^class SparseLU$/;"	c
SvAdjoint	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    SvAdjoint   = 2$/;"	e
SvNoTrans	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    SvNoTrans   = 0,$/;"	e
SvTranspose	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    SvTranspose = 1,$/;"	e
compute	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^void SparseLU<_MatrixType,Backend>::compute(const _MatrixType& )$/;"	f	class:SparseLU
flags	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    int flags() const { return m_flags; }$/;"	f	class:SparseLU
m_flags	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    int m_flags;$/;"	m	class:SparseLU
m_precision	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    RealScalar m_precision;$/;"	m	class:SparseLU
m_status	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    mutable int m_status;$/;"	m	class:SparseLU
m_succeeded	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    bool m_succeeded;$/;"	m	class:SparseLU
orderingMethod	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    int orderingMethod() const$/;"	f	class:SparseLU
precision	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    RealScalar precision() const { return m_precision; }$/;"	f	class:SparseLU
setFlags	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    void setFlags(int f) { m_flags = f; }$/;"	f	class:SparseLU
setOrderingMethod	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    void setOrderingMethod(int m)$/;"	f	class:SparseLU
setPrecision	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    void setPrecision(RealScalar v) { m_precision = v; }$/;"	f	class:SparseLU
solve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^bool SparseLU<_MatrixType,Backend>::solve(const MatrixBase<BDerived> &, MatrixBase<XDerived>* , const int ) const$/;"	f	class:SparseLU
succeeded	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SparseLU.h	/^    inline bool succeeded(void) const { return m_succeeded; }$/;"	f	class:SparseLU
Base	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    typedef SparseLU<MatrixType> Base;$/;"	t	class:SparseLU
DECL_GSISX	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	64;"	d
DECL_GSSVX	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	28;"	d
EIGEN_SUPERLUSUPPORT_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	26;"	d
EIGEN_SUPERLU_HAS_ILU	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	58;"	d
IntColVectorType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    typedef Matrix<int, MatrixType::RowsAtCompileTime, 1> IntColVectorType;$/;"	t	class:SparseLU
IntRowVectorType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    typedef Matrix<int, 1, MatrixType::ColsAtCompileTime> IntRowVectorType;$/;"	t	class:SparseLU
LMatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    typedef SparseMatrix<Scalar,Lower|UnitDiag> LMatrixType;$/;"	t	class:SparseLU
Map	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^  static SluMatrix Map(Matrix<Scalar,Rows,Cols,Options,MRows,MCols>& mat)$/;"	f	struct:SluMatrix
Map	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^  static SluMatrix Map(SparseMatrixBase<MatrixType>& mat)$/;"	f	struct:SluMatrix
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^  typedef Derived MatrixType;$/;"	t	struct:SluMatrixMapHelper
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^  typedef Matrix<Scalar,Rows,Cols,Options,MRows,MCols> MatrixType;$/;"	t	struct:SluMatrixMapHelper
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    typedef typename Base::RealScalar RealScalar;$/;"	t	class:SparseLU
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    typedef typename Base::Scalar Scalar;$/;"	t	class:SparseLU
SluMatrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^  SluMatrix()$/;"	f	struct:SluMatrix
SluMatrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^  SluMatrix(const SluMatrix& other)$/;"	f	struct:SluMatrix
SluMatrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^struct SluMatrix : SuperMatrix$/;"	s
SluMatrixMapHelper	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^struct SluMatrixMapHelper<Matrix<Scalar,Rows,Cols,Options,MRows,MCols> >$/;"	s
SluMatrixMapHelper	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^struct SluMatrixMapHelper<SparseMatrixBase<Derived> >$/;"	s
SparseLU	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    SparseLU(const MatrixType& matrix, int flags = NaturalOrdering)$/;"	f	class:SparseLU
SparseLU	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    SparseLU(int flags = NaturalOrdering)$/;"	f	class:SparseLU
SparseLU	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^class SparseLU<MatrixType,SuperLU> : public SparseLU<MatrixType>$/;"	c
UMatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    typedef SparseMatrix<Scalar,Upper> UMatrixType;$/;"	t	class:SparseLU
Vector	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    typedef Matrix<Scalar,Dynamic,1> Vector;$/;"	t	class:SparseLU
asSluMatrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^SluMatrix asSluMatrix(MatrixType& mat)$/;"	f	namespace:internal
compute	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^void SparseLU<MatrixType,SuperLU>::compute(const MatrixType& a)$/;"	f	class:SparseLU
determinant	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^typename SparseLU<MatrixType,SuperLU>::Scalar SparseLU<MatrixType,SuperLU>::determinant() const$/;"	f	class:SparseLU
extractData	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^void SparseLU<MatrixType,SuperLU>::extractData() const$/;"	f	class:SparseLU
innerInd	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    int *innerInd;$/;"	m	struct:SluMatrix::<anonymous>
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^namespace internal {$/;"	n
lda	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    union {int nnz;int lda;};$/;"	m	union:SluMatrix::<anonymous>::<anonymous>
m_extractedDataAreDirty	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    mutable bool m_extractedDataAreDirty;$/;"	m	class:SparseLU
m_l	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    mutable LMatrixType m_l;$/;"	m	class:SparseLU
m_matrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    mutable SparseMatrix<Scalar> m_matrix;$/;"	m	class:SparseLU
m_p	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    mutable IntColVectorType m_p;$/;"	m	class:SparseLU
m_q	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    mutable IntRowVectorType m_q;$/;"	m	class:SparseLU
m_sluA	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    mutable SluMatrix m_sluA;$/;"	m	class:SparseLU
m_sluB	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    mutable SluMatrix m_sluB, m_sluX;$/;"	m	class:SparseLU
m_sluBerr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    mutable std::vector<RealScalar> m_sluFerr, m_sluBerr;$/;"	m	class:SparseLU
m_sluCscale	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    mutable std::vector<RealScalar> m_sluRscale, m_sluCscale;$/;"	m	class:SparseLU
m_sluEqued	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    mutable char m_sluEqued;$/;"	m	class:SparseLU
m_sluEtree	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    mutable std::vector<int> m_sluEtree;$/;"	m	class:SparseLU
m_sluFerr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    mutable std::vector<RealScalar> m_sluFerr, m_sluBerr;$/;"	m	class:SparseLU
m_sluL	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    mutable SuperMatrix m_sluL, m_sluU;$/;"	m	class:SparseLU
m_sluOptions	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    mutable superlu_options_t m_sluOptions;$/;"	m	class:SparseLU
m_sluRscale	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    mutable std::vector<RealScalar> m_sluRscale, m_sluCscale;$/;"	m	class:SparseLU
m_sluStat	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    mutable SuperLUStat_t m_sluStat;$/;"	m	class:SparseLU
m_sluU	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    mutable SuperMatrix m_sluL, m_sluU;$/;"	m	class:SparseLU
m_sluX	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    mutable SluMatrix m_sluB, m_sluX;$/;"	m	class:SparseLU
m_u	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    mutable UMatrixType m_u;$/;"	m	class:SparseLU
map_superlu	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^MappedSparseMatrix<Scalar,Flags,Index> map_superlu(SluMatrix& sluMat)$/;"	f	namespace:internal
matrixL	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    inline const LMatrixType& matrixL() const$/;"	f	class:SparseLU
matrixU	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    inline const UMatrixType& matrixU() const$/;"	f	class:SparseLU
nnz	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    union {int nnz;int lda;};$/;"	m	union:SluMatrix::<anonymous>::<anonymous>
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^  SluMatrix& operator=(const SluMatrix& other)$/;"	f	struct:SluMatrix
outerInd	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    int *outerInd;$/;"	m	struct:SluMatrix::<anonymous>
permutationP	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    inline const IntColVectorType& permutationP() const$/;"	f	class:SparseLU
permutationQ	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    inline const IntRowVectorType& permutationQ() const$/;"	f	class:SparseLU
run	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^  static void run(MatrixType& mat, SluMatrix& res)$/;"	f	struct:SluMatrixMapHelper
setScalarType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^  void setScalarType()$/;"	f	struct:SluMatrix
setStorageType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^  void setStorageType(Stype_t t)$/;"	f	struct:SluMatrix
solve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^bool SparseLU<MatrixType,SuperLU>::solve(const MatrixBase<BDerived> &b,$/;"	f	class:SparseLU
storage	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^  } storage;$/;"	m	struct:SluMatrix
values	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    void *values;$/;"	m	struct:SluMatrix::<anonymous>
~SparseLU	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/SuperLUSupport.h	/^    ~SparseLU()$/;"	f	class:SparseLU
Base	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    typedef SparseLU<_MatrixType> Base;$/;"	t	class:SparseLU
EIGEN_UMFPACKSUPPORT_H	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	26;"	d
Index	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    typedef typename MatrixType::Index Index;$/;"	t	class:SparseLU
IntColVectorType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    typedef Matrix<int, _MatrixType::RowsAtCompileTime, 1> IntColVectorType;$/;"	t	class:SparseLU
IntRowVectorType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    typedef Matrix<int, 1, _MatrixType::ColsAtCompileTime> IntRowVectorType;$/;"	t	class:SparseLU
LMatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    typedef SparseMatrix<Scalar,Lower|UnitDiag> LMatrixType;$/;"	t	class:SparseLU
MatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    typedef _MatrixType MatrixType;$/;"	t	class:SparseLU
RealScalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    typedef typename Base::RealScalar RealScalar;$/;"	t	class:SparseLU
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    typedef typename Base::Scalar Scalar;$/;"	t	class:SparseLU
SpLUDecType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^  typedef SparseLU<_MatrixType, UmfPack> SpLUDecType;$/;"	t	struct:internal::solve_retval
SparseLU	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    SparseLU(const MatrixType& matrix, int flags = NaturalOrdering)$/;"	f	class:SparseLU
SparseLU	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    SparseLU(int flags = NaturalOrdering)$/;"	f	class:SparseLU
SparseLU	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^class SparseLU<_MatrixType,UmfPack> : public SparseLU<_MatrixType>$/;"	c
UMatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    typedef SparseMatrix<Scalar,Upper> UMatrixType;$/;"	t	class:SparseLU
Vector	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    typedef Matrix<Scalar,Dynamic,1> Vector;$/;"	t	class:SparseLU
cols	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    inline Index cols() const { return m_matrixRef->cols(); }$/;"	f	class:SparseLU
compute	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^void SparseLU<MatrixType,UmfPack>::compute(const MatrixType& a)$/;"	f	class:SparseLU
determinant	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^typename SparseLU<MatrixType,UmfPack>::Scalar SparseLU<MatrixType,UmfPack>::determinant() const$/;"	f	class:SparseLU
evalTo	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^  template<typename Dest> void evalTo(Dest& dst) const$/;"	f	struct:internal::solve_retval
extractData	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^void SparseLU<MatrixType,UmfPack>::extractData() const$/;"	f	class:SparseLU
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^namespace internal {$/;"	n
m_extractedDataAreDirty	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    mutable bool m_extractedDataAreDirty;$/;"	m	class:SparseLU
m_l	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    mutable LMatrixType m_l;$/;"	m	class:SparseLU
m_matrixRef	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    const MatrixType* m_matrixRef;$/;"	m	class:SparseLU
m_numeric	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    void* m_numeric;$/;"	m	class:SparseLU
m_p	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    mutable IntColVectorType m_p;$/;"	m	class:SparseLU
m_q	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    mutable IntRowVectorType m_q;$/;"	m	class:SparseLU
m_u	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    mutable UMatrixType m_u;$/;"	m	class:SparseLU
matrixL	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    inline const LMatrixType& matrixL() const$/;"	f	class:SparseLU
matrixLU	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    inline const MatrixType& matrixLU() const$/;"	f	class:SparseLU
matrixU	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    inline const UMatrixType& matrixU() const$/;"	f	class:SparseLU
numeric	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    const void* numeric() const$/;"	f	class:SparseLU
permutationP	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    inline const IntColVectorType& permutationP() const$/;"	f	class:SparseLU
permutationQ	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    inline const IntRowVectorType& permutationQ() const$/;"	f	class:SparseLU
rows	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    inline Index rows() const { return m_matrixRef->rows(); }$/;"	f	class:SparseLU
solve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    solve(const MatrixBase<Rhs>& b) const$/;"	f	class:SparseLU
solve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^bool SparseLU<MatrixType,UmfPack>::solve(const MatrixBase<BDerived> &b, MatrixBase<XDerived> *x) const$/;"	f	class:SparseLU
solve_retval	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^  struct solve_retval<SparseLU<_MatrixType, UmfPack>, Rhs>$/;"	s	namespace:internal
umfpack_free_numeric	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^inline void umfpack_free_numeric(void **Numeric, double)$/;"	f
umfpack_free_numeric	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^inline void umfpack_free_numeric(void **Numeric, std::complex<double>)$/;"	f
umfpack_free_symbolic	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^inline void umfpack_free_symbolic(void **Symbolic, double)$/;"	f
umfpack_free_symbolic	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^inline void umfpack_free_symbolic(void **Symbolic, std::complex<double>)$/;"	f
umfpack_get_determinant	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^inline int umfpack_get_determinant(double *Mx, double *Ex, void *NumericHandle, double User_Info [UMFPACK_INFO])$/;"	f
umfpack_get_determinant	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^inline int umfpack_get_determinant(std::complex<double> *Mx, double *Ex, void *NumericHandle, double User_Info [UMFPACK_INFO])$/;"	f
umfpack_get_lunz	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^inline int umfpack_get_lunz(int *lnz, int *unz, int *n_row, int *n_col, int *nz_udiag, void *Numeric, double)$/;"	f
umfpack_get_lunz	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^inline int umfpack_get_lunz(int *lnz, int *unz, int *n_row, int *n_col, int *nz_udiag, void *Numeric, std::complex<double>)$/;"	f
umfpack_get_numeric	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^inline int umfpack_get_numeric(int Lp[], int Lj[], double Lx[], int Up[], int Ui[], double Ux[],$/;"	f
umfpack_get_numeric	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^inline int umfpack_get_numeric(int Lp[], int Lj[], std::complex<double> Lx[], int Up[], int Ui[], std::complex<double> Ux[],$/;"	f
umfpack_numeric	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^inline int umfpack_numeric( const int Ap[], const int Ai[], const double Ax[],$/;"	f
umfpack_numeric	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^inline int umfpack_numeric( const int Ap[], const int Ai[], const std::complex<double> Ax[],$/;"	f
umfpack_solve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^inline int umfpack_solve( int sys, const int Ap[], const int Ai[], const double Ax[],$/;"	f
umfpack_solve	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^inline int umfpack_solve( int sys, const int Ap[], const int Ai[], const std::complex<double> Ax[],$/;"	f
umfpack_symbolic	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^inline int umfpack_symbolic(int n_row,int n_col,$/;"	f
~SparseLU	tags/before-github-sync/EXTERNAL/eigen3/unsupported/Eigen/src/SparseExtra/UmfPackSupport.h	/^    ~SparseLU()$/;"	f	class:SparseLU
Box2d	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/BVH_Example.cpp	/^typedef AlignedBox<double, 2> Box2d;$/;"	t	file:
Eigen	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/BVH_Example.cpp	/^namespace Eigen {$/;"	n	file:
PointPointMinimizer	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/BVH_Example.cpp	/^  PointPointMinimizer() : calls(0) {}$/;"	f	struct:PointPointMinimizer
PointPointMinimizer	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/BVH_Example.cpp	/^struct PointPointMinimizer \/\/how to compute squared distances between points and rectangles$/;"	s	file:
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/BVH_Example.cpp	/^  typedef double Scalar;$/;"	t	struct:PointPointMinimizer	file:
bounding_box	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/BVH_Example.cpp	/^        Box2d bounding_box(const Vector2d &v) { return Box2d(v, v); } \/\/compute the bounding box of a single point$/;"	f	namespace:Eigen::internal
calls	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/BVH_Example.cpp	/^  int calls;$/;"	m	struct:PointPointMinimizer	file:
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/BVH_Example.cpp	/^    namespace internal {$/;"	n	namespace:Eigen	file:
main	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/BVH_Example.cpp	/^int main()$/;"	f
minimumOnObjectObject	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/BVH_Example.cpp	/^  double minimumOnObjectObject(const Vector2d &v1, const Vector2d &v2) { ++calls; return (v1 - v2).squaredNorm(); }$/;"	f	struct:PointPointMinimizer
minimumOnObjectVolume	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/BVH_Example.cpp	/^  double minimumOnObjectVolume(const Vector2d &v, const Box2d &r) { ++calls; return r.squaredExteriorDistance(v); }$/;"	f	struct:PointPointMinimizer
minimumOnVolumeObject	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/BVH_Example.cpp	/^  double minimumOnVolumeObject(const Box2d &r, const Vector2d &v) { ++calls; return r.squaredExteriorDistance(v); }$/;"	f	struct:PointPointMinimizer
minimumOnVolumeVolume	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/BVH_Example.cpp	/^  double minimumOnVolumeVolume(const Box2d &r1, const Box2d &r2) { ++calls; return r1.squaredExteriorDistance(r2); }$/;"	f	struct:PointPointMinimizer
RandomFill	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/FFT.cpp	/^void RandomFill(std::vector<T> & vec)$/;"	f
RandomFill	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/FFT.cpp	/^void RandomFill(std::vector<std::complex<T> > & vec)$/;"	f
demo_all_types	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/FFT.cpp	/^void demo_all_types(int nfft)$/;"	f
fwd_inv	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/FFT.cpp	/^void fwd_inv(size_t nfft)$/;"	f
mag2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/FFT.cpp	/^T mag2(T a)$/;"	f
mag2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/FFT.cpp	/^T mag2(const std::vector<T> & vec)$/;"	f
mag2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/FFT.cpp	/^T mag2(const std::vector<std::complex<T> > & vec)$/;"	f
mag2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/FFT.cpp	/^T mag2(std::complex<T> a)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/FFT.cpp	/^int main()$/;"	f
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/FFT.cpp	/^vector<T> operator-(const vector<T> & a,const vector<T> & b )$/;"	f
two_demos	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/FFT.cpp	/^void two_demos(int nfft)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/MatrixExponential.cpp	/^int main()$/;"	f
expfn	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/MatrixFunction.cpp	/^std::complex<double> expfn(std::complex<double> x, int)$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/MatrixFunction.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/MatrixSine.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/MatrixSinh.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/PolynomialSolver1.cpp	/^int main()$/;"	f
main	tags/before-github-sync/EXTERNAL/eigen3/unsupported/doc/examples/PolynomialUtils1.cpp	/^int main()$/;"	f
Ball	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  Ball() {}$/;"	f	struct:Ball
Ball	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  Ball(const VectorType &c, double r) : center(c), radius(r) {}$/;"	f	struct:Ball
Ball	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^struct Ball$/;"	s	file:
BallPointStuff	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  BallPointStuff() : calls(0), count(0) {}$/;"	f	struct:BallPointStuff
BallPointStuff	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  BallPointStuff(const VectorType &inP) : p(inP), calls(0), count(0) {}$/;"	f	struct:BallPointStuff
BallPointStuff	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^struct BallPointStuff \/\/this class provides functions to be both an intersector and a minimizer, both for a ball and a point and for two trees$/;"	s	file:
BallType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  typedef Ball<Dim> BallType;$/;"	t	struct:BallPointStuff	file:
BallType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  typedef Ball<Dim> BallType;$/;"	t	struct:TreeTest	file:
BallTypeList	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  typedef std::vector<BallType, aligned_allocator<BallType> > BallTypeList;$/;"	t	struct:TreeTest	file:
BoxType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  typedef AlignedBox<double, Dim> BoxType;$/;"	t	struct:BallPointStuff	file:
BoxType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  typedef AlignedBox<double, Dim> BoxType;$/;"	t	struct:TreeTest	file:
Eigen	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^namespace Eigen {$/;"	n	file:
SQR	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^inline double SQR(double x) { return x * x; }$/;"	f
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  typedef double Scalar;$/;"	t	struct:BallPointStuff	file:
TreeTest	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^struct TreeTest$/;"	s	file:
VectorType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  typedef Matrix<double, Dim, 1> VectorType;$/;"	t	struct:Ball	file:
VectorType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  typedef Matrix<double, Dim, 1> VectorType;$/;"	t	struct:BallPointStuff	file:
VectorType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  typedef Matrix<double, Dim, 1> VectorType;$/;"	t	struct:TreeTest	file:
VectorTypeList	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  typedef std::vector<VectorType, aligned_allocator<VectorType> > VectorTypeList;$/;"	t	struct:TreeTest	file:
bounding_box	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^template<int Dim> AlignedBox<double, Dim> bounding_box(const Ball<Dim> &b)$/;"	f	namespace:Eigen::internal
bounding_box	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^template<typename Scalar, int Dim> AlignedBox<Scalar, Dim> bounding_box(const Matrix<Scalar, Dim, 1> &v) { return AlignedBox<Scalar, Dim>(v); }$/;"	f	namespace:Eigen::internal
calls	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  int calls;$/;"	m	struct:BallPointStuff	file:
center	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  VectorType center;$/;"	m	struct:Ball	file:
count	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  int count;$/;"	m	struct:BallPointStuff	file:
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^namespace internal {$/;"	n	namespace:Eigen	file:
intersectObject	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  bool intersectObject(const BallType &b) {$/;"	f	struct:BallPointStuff
intersectObjectObject	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  bool intersectObjectObject(const BallType &b, const VectorType &v){$/;"	f	struct:BallPointStuff
intersectObjectObject	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  bool intersectObjectObject(const BallType &b1, const BallType &b2){$/;"	f	struct:BallPointStuff
intersectObjectVolume	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  bool intersectObjectVolume(const BallType &b, const BoxType &r) { ++calls; return r.squaredExteriorDistance(b.center) < SQR(b.radius); }$/;"	f	struct:BallPointStuff
intersectVolume	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  bool intersectVolume(const BoxType &r) { ++calls; return r.contains(p); }$/;"	f	struct:BallPointStuff
intersectVolumeObject	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  bool intersectVolumeObject(const BoxType &r, const BallType &b) { ++calls; return r.squaredExteriorDistance(b.center) < SQR(b.radius); }$/;"	f	struct:BallPointStuff
intersectVolumeObject	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  bool intersectVolumeObject(const BoxType &r, const VectorType &v) { ++calls; return r.contains(v); }$/;"	f	struct:BallPointStuff
intersectVolumeVolume	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  bool intersectVolumeVolume(const BoxType &r1, const BoxType &r2) { ++calls; return !(r1.intersection(r2)).isNull(); }$/;"	f	struct:BallPointStuff
minimumOnObject	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  double minimumOnObject(const BallType &b) { ++calls; return std::max(0., (b.center - p).squaredNorm() - SQR(b.radius)); }$/;"	f	struct:BallPointStuff
minimumOnObjectObject	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  double minimumOnObjectObject(const BallType &b, const VectorType &v){ ++calls; return SQR(std::max(0., (b.center - v).norm() - b.radius)); }$/;"	f	struct:BallPointStuff
minimumOnObjectObject	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  double minimumOnObjectObject(const BallType &b1, const BallType &b2){ ++calls; return SQR(std::max(0., (b1.center - b2.center).norm() - b1.radius - b2.radius)); }$/;"	f	struct:BallPointStuff
minimumOnObjectVolume	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  double minimumOnObjectVolume(const BallType &b, const BoxType &r) { ++calls; return SQR(std::max(0., r.exteriorDistance(b.center) - b.radius)); }$/;"	f	struct:BallPointStuff
minimumOnVolume	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  double minimumOnVolume(const BoxType &r) { ++calls; return r.squaredExteriorDistance(p); }$/;"	f	struct:BallPointStuff
minimumOnVolumeObject	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  double minimumOnVolumeObject(const BoxType &r, const BallType &b) { ++calls; return SQR(std::max(0., r.exteriorDistance(b.center) - b.radius)); }$/;"	f	struct:BallPointStuff
minimumOnVolumeObject	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  double minimumOnVolumeObject(const BoxType &r, const VectorType &v) { ++calls; return r.squaredExteriorDistance(v); }$/;"	f	struct:BallPointStuff
minimumOnVolumeVolume	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  double minimumOnVolumeVolume(const BoxType &r1, const BoxType &r2) { ++calls; return r1.squaredExteriorDistance(r2); }$/;"	f	struct:BallPointStuff
p	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  VectorType p;$/;"	m	struct:BallPointStuff	file:
radius	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  double radius;$/;"	m	struct:Ball	file:
testIntersect1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  void testIntersect1()$/;"	f	struct:TreeTest
testIntersect2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  void testIntersect2()$/;"	f	struct:TreeTest
testMinimize1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  void testMinimize1()$/;"	f	struct:TreeTest
testMinimize2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^  void testMinimize2()$/;"	f	struct:TreeTest
test_BVH	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/BVH.cpp	/^void test_BVH()$/;"	f
test_FFTW	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFT.cpp	1;"	d	file:
EigenVectorContainer	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^enum { StdVectorContainer, EigenVectorContainer };$/;"	e	file:
RandomCpx	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^std::complex<T> RandomCpx() { return std::complex<T>( (T)(rand()\/(T)RAND_MAX - .5), (T)(rand()\/(T)RAND_MAX - .5) ); }$/;"	f
StdVectorContainer	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^enum { StdVectorContainer, EigenVectorContainer };$/;"	e	file:
VectorType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^template<typename Scalar> struct VectorType<EigenVectorContainer,Scalar>$/;"	s	file:
VectorType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^template<typename Scalar> struct VectorType<StdVectorContainer,Scalar>$/;"	s	file:
dif_rmse	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^    long double dif_rmse( const VT1 buf1,const VT2 buf2)$/;"	f
fft_rmse	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^    long double fft_rmse( const VT1 & fftbuf,const VT2 & timebuf)$/;"	f
norm	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^double norm(double x) {return x*x;}$/;"	f
norm	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^float norm(float x) {return x*x;}$/;"	f
norm	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^long double norm(long double x) {return x*x;}$/;"	f
promote	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^complex<long double>  promote(complex<T> x) { return complex<long double>(x.real(),x.imag()); }$/;"	f
promote	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^complex<long double>  promote(double x) { return complex<long double>( x); }$/;"	f
promote	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^complex<long double>  promote(float x) { return complex<long double>( x); }$/;"	f
promote	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^complex<long double>  promote(long double x) { return complex<long double>( x); }$/;"	f
test_FFTW	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^void test_FFTW()$/;"	f
test_complex	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^void test_complex(int nfft)$/;"	f
test_complex_generic	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^void test_complex_generic(int nfft)$/;"	f
test_return_by_value	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^void test_return_by_value(int len)$/;"	f
test_scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^void test_scalar(int nfft)$/;"	f
test_scalar_generic	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^void test_scalar_generic(int nfft)$/;"	f
type	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^  typedef Matrix<Scalar,Dynamic,1> type;$/;"	t	struct:VectorType	file:
type	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/FFTW.cpp	/^  typedef vector<Scalar> type;$/;"	t	struct:VectorType	file:
Bennett5_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    Bennett5_functor(void) : Functor<double>(3,154) {}$/;"	f	struct:Bennett5_functor
Bennett5_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct Bennett5_functor : Functor<double>$/;"	s	file:
BoxBOD_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    BoxBOD_functor(void) : Functor<double>(2,6) {}$/;"	f	struct:BoxBOD_functor
BoxBOD_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct BoxBOD_functor : Functor<double>$/;"	s	file:
Functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^  Functor() : m_inputs(InputsAtCompileTime), m_values(ValuesAtCompileTime) {}$/;"	f	struct:Functor
Functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^  Functor(int inputs, int values) : m_inputs(inputs), m_values(values) {}$/;"	f	struct:Functor
Functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct Functor$/;"	s	file:
InputType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^  typedef Matrix<Scalar,InputsAtCompileTime,1> InputType;$/;"	t	struct:Functor	file:
InputsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    InputsAtCompileTime = NX,$/;"	e	enum:Functor::<anonymous>	file:
JacobianType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^  typedef Matrix<Scalar,ValuesAtCompileTime,InputsAtCompileTime> JacobianType;$/;"	t	struct:Functor	file:
MGH09_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    MGH09_functor(void) : Functor<double>(4,11) {}$/;"	f	struct:MGH09_functor
MGH09_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct MGH09_functor : Functor<double>$/;"	s	file:
MGH10_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    MGH10_functor(void) : Functor<double>(3,16) {}$/;"	f	struct:MGH10_functor
MGH10_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct MGH10_functor : Functor<double>$/;"	s	file:
MGH17_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    MGH17_functor(void) : Functor<double>(5,33) {}$/;"	f	struct:MGH17_functor
MGH17_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct MGH17_functor : Functor<double>$/;"	s	file:
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^  typedef _Scalar Scalar;$/;"	t	struct:Functor	file:
ValueType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^  typedef Matrix<Scalar,ValuesAtCompileTime,1> ValueType;$/;"	t	struct:Functor	file:
ValuesAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    ValuesAtCompileTime = NY$/;"	e	enum:Functor::<anonymous>	file:
_x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double _x[11];$/;"	m	struct:MGH09_functor	file:
_x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double _x[37];$/;"	m	struct:thurber_functor	file:
_x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double MGH09_functor::_x[11] = { 4., 2., 1., 5.E-1 , 2.5E-01, 1.670000E-01, 1.250000E-01,  1.E-01, 8.330000E-02, 7.140000E-02, 6.250000E-02 };$/;"	m	class:MGH09_functor	file:
_x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double thurber_functor::_x[37] = { -3.067E0, -2.981E0, -2.921E0, -2.912E0, -2.840E0, -2.797E0, -2.702E0, -2.699E0, -2.633E0, -2.481E0, -2.363E0, -2.322E0, -1.501E0, -1.460E0, -1.274E0, -1.212E0, -1.100E0, -1.046E0, -0.915E0, -0.714E0, -0.566E0, -0.545E0, -0.400E0, -0.309E0, -0.109E0, -0.103E0, 0.010E0, 0.119E0, 0.377E0, 0.790E0, 0.963E0, 1.006E0, 1.115E0, 1.572E0, 1.841E0, 2.047E0, 2.200E0 };$/;"	m	class:thurber_functor	file:
_y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double _y[37];$/;"	m	struct:thurber_functor	file:
_y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double thurber_functor::_y[37] = { 80.574E0, 84.248E0, 87.264E0, 87.195E0, 89.076E0, 89.608E0, 89.868E0, 90.101E0, 92.405E0, 95.854E0, 100.696E0, 101.060E0, 401.672E0, 390.724E0, 567.534E0, 635.316E0, 733.054E0, 759.087E0, 894.206E0, 990.785E0, 1090.109E0, 1080.914E0, 1122.643E0, 1178.351E0, 1260.531E0, 1273.514E0, 1288.339E0, 1327.543E0, 1353.863E0, 1414.509E0, 1425.208E0, 1421.384E0, 1442.962E0, 1464.350E0, 1468.705E0, 1447.894E0, 1457.628E0};$/;"	m	class:thurber_functor	file:
chwirut2_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    chwirut2_functor(void) : Functor<double>(3,54) {}$/;"	f	struct:chwirut2_functor
chwirut2_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct chwirut2_functor : Functor<double>$/;"	s	file:
df	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int df(const VectorXd &b, MatrixXd &fjac)$/;"	f	struct:Bennett5_functor
df	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int df(const VectorXd &b, MatrixXd &fjac)$/;"	f	struct:BoxBOD_functor
df	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int df(const VectorXd &b, MatrixXd &fjac)$/;"	f	struct:MGH09_functor
df	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int df(const VectorXd &b, MatrixXd &fjac)$/;"	f	struct:MGH10_functor
df	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int df(const VectorXd &b, MatrixXd &fjac)$/;"	f	struct:MGH17_functor
df	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int df(const VectorXd &b, MatrixXd &fjac)$/;"	f	struct:chwirut2_functor
df	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int df(const VectorXd &b, MatrixXd &fjac)$/;"	f	struct:eckerle4_functor
df	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int df(const VectorXd &b, MatrixXd &fjac)$/;"	f	struct:hahn1_functor
df	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int df(const VectorXd &b, MatrixXd &fjac)$/;"	f	struct:lanczos1_functor
df	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int df(const VectorXd &b, MatrixXd &fjac)$/;"	f	struct:misra1a_functor
df	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int df(const VectorXd &b, MatrixXd &fjac)$/;"	f	struct:misra1d_functor
df	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int df(const VectorXd &b, MatrixXd &fjac)$/;"	f	struct:rat42_functor
df	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int df(const VectorXd &b, MatrixXd &fjac)$/;"	f	struct:rat43_functor
df	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int df(const VectorXd &b, MatrixXd &fjac)$/;"	f	struct:thurber_functor
df	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int df(const VectorXd &x, MatrixXd &fjac) const$/;"	f	struct:lmder_functor
df	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int df(const VectorXd &x, MatrixXd &fjac)$/;"	f	struct:hybrj_functor
df	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int df(const VectorXd &x, VectorXd &jac_row, VectorXd::Index rownb)$/;"	f	struct:lmstr_functor
eckerle4_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    eckerle4_functor(void) : Functor<double>(3,35) {}$/;"	f	struct:eckerle4_functor
eckerle4_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct eckerle4_functor : Functor<double>$/;"	s	file:
fcn_chkder	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^int fcn_chkder(const VectorXd &x, VectorXd &fvec, MatrixXd &fjac, int iflag)$/;"	f
hahn1_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    hahn1_functor(void) : Functor<double>(7,236) {}$/;"	f	struct:hahn1_functor
hahn1_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct hahn1_functor : Functor<double>$/;"	s	file:
hybrd_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    hybrd_functor(void) : Functor<double>(9,9) {}$/;"	f	struct:hybrd_functor
hybrd_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct hybrd_functor : Functor<double>$/;"	s	file:
hybrj_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    hybrj_functor(void) : Functor<double>(9,9) {}$/;"	f	struct:hybrj_functor
hybrj_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct hybrj_functor : Functor<double>$/;"	s	file:
inputs	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^  int inputs() const { return m_inputs; }$/;"	f	struct:Functor
lanczos1_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    lanczos1_functor(void) : Functor<double>(6,24) {}$/;"	f	struct:lanczos1_functor
lanczos1_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct lanczos1_functor : Functor<double>$/;"	s	file:
lmder_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    lmder_functor(void): Functor<double>(3,15) {}$/;"	f	struct:lmder_functor
lmder_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct lmder_functor : Functor<double>$/;"	s	file:
lmdif_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    lmdif_functor(void) : Functor<double>(3,15) {}$/;"	f	struct:lmdif_functor
lmdif_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct lmdif_functor : Functor<double>$/;"	s	file:
lmstr_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    lmstr_functor(void) : Functor<double>(3,15) {}$/;"	f	struct:lmstr_functor
lmstr_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct lmstr_functor : Functor<double>$/;"	s	file:
m_inputs	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^  const int m_inputs, m_values;$/;"	m	struct:Functor	file:
m_values	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^  const int m_inputs, m_values;$/;"	m	struct:Functor	file:
m_x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double m_x[14];$/;"	m	struct:misra1a_functor	file:
m_x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double m_x[236];$/;"	m	struct:hahn1_functor	file:
m_x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double m_x[54];$/;"	m	struct:chwirut2_functor	file:
m_x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double chwirut2_functor::m_x[54] = { 0.500E0, 1.000E0, 1.750E0, 3.750E0, 5.750E0, 0.875E0, 2.250E0, 3.250E0, 5.250E0, 0.750E0, 1.750E0, 2.750E0, 4.750E0, 0.625E0, 1.250E0, 2.250E0, 4.250E0, .500E0, 3.000E0, .750E0, 3.000E0, 1.500E0, 6.000E0, 3.000E0, 6.000E0, 1.500E0, 3.000E0, .500E0, 2.000E0, 4.000E0, .750E0, 2.000E0, 5.000E0, .750E0, 2.250E0, 3.750E0, 5.750E0, 3.000E0, .750E0, 2.500E0, 4.000E0, .750E0, 2.500E0, 4.000E0, .750E0, 2.500E0, 4.000E0, .500E0, 6.000E0, 3.000E0, .500E0, 2.750E0, .500E0, 1.750E0};$/;"	m	class:chwirut2_functor	file:
m_x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double hahn1_functor::m_x[236] = { 24.41E0 , 34.82E0 , 44.09E0 , 45.07E0 , 54.98E0 , 65.51E0 , 70.53E0 , 75.70E0 , 89.57E0 , 91.14E0 , 96.40E0 , 97.19E0 , 114.26E0 , 120.25E0 , 127.08E0 , 133.55E0 , 133.61E0 , 158.67E0 , 172.74E0 , 171.31E0 , 202.14E0 , 220.55E0 , 221.05E0 , 221.39E0 , 250.99E0 , 268.99E0 , 271.80E0 , 271.97E0 , 321.31E0 , 321.69E0 , 330.14E0 , 333.03E0 , 333.47E0 , 340.77E0 , 345.65E0 , 373.11E0 , 373.79E0 , 411.82E0 , 419.51E0 , 421.59E0 , 422.02E0 , 422.47E0 , 422.61E0 , 441.75E0 , 447.41E0 , 448.7E0  , 472.89E0 , 476.69E0 , 522.47E0 , 522.62E0 , 524.43E0 , 546.75E0 , 549.53E0 , 575.29E0 , 576.00E0 , 625.55E0 , 20.15E0 , 28.78E0 , 29.57E0 , 37.41E0 , 39.12E0 , 50.24E0 , 61.38E0 , 66.25E0 , 73.42E0 , 95.52E0 , 107.32E0 , 122.04E0 , 134.03E0 , 163.19E0 , 163.48E0 , 175.70E0 , 179.86E0 , 211.27E0 , 217.78E0 , 219.14E0 , 262.52E0 , 268.01E0 , 268.62E0 , 336.25E0 , 337.23E0 , 339.33E0 , 427.38E0 , 428.58E0 , 432.68E0 , 528.99E0 , 531.08E0 , 628.34E0 , 253.24E0 , 273.13E0 , 273.66E0 , 282.10E0 , 346.62E0 , 347.19E0 , 348.78E0 , 351.18E0 , 450.10E0 , 450.35E0 , 451.92E0 , 455.56E0 , 552.22E0 , 553.56E0 , 555.74E0 , 652.59E0 , 656.20E0 , 14.13E0 , 20.41E0 , 31.30E0 , 33.84E0 , 39.70E0 , 48.83E0 , 54.50E0 , 60.41E0 , 72.77E0 , 75.25E0 , 86.84E0 , 94.88E0 , 96.40E0 , 117.37E0 , 139.08E0 , 147.73E0 , 158.63E0 , 161.84E0 , 192.11E0 , 206.76E0 , 209.07E0 , 213.32E0 , 226.44E0 , 237.12E0 , 330.90E0 , 358.72E0 , 370.77E0 , 372.72E0 , 396.24E0 , 416.59E0 , 484.02E0 , 495.47E0 , 514.78E0 , 515.65E0 , 519.47E0 , 544.47E0 , 560.11E0 , 620.77E0 , 18.97E0 , 28.93E0 , 33.91E0 , 40.03E0 , 44.66E0 , 49.87E0 , 55.16E0 , 60.90E0 , 72.08E0 , 85.15E0 , 97.06E0 , 119.63E0 , 133.27E0 , 143.84E0 , 161.91E0 , 180.67E0 , 198.44E0 , 226.86E0 , 229.65E0 , 258.27E0 , 273.77E0 , 339.15E0 , 350.13E0 , 362.75E0 , 371.03E0 , 393.32E0 , 448.53E0 , 473.78E0 , 511.12E0 , 524.70E0 , 548.75E0 , 551.64E0 , 574.02E0 , 623.86E0 , 21.46E0 , 24.33E0 , 33.43E0 , 39.22E0 , 44.18E0 , 55.02E0 , 94.33E0 , 96.44E0 , 118.82E0 , 128.48E0 , 141.94E0 , 156.92E0 , 171.65E0 , 190.00E0 , 223.26E0 , 223.88E0 , 231.50E0 , 265.05E0 , 269.44E0 , 271.78E0 , 273.46E0 , 334.61E0 , 339.79E0 , 349.52E0 , 358.18E0 , 377.98E0 , 394.77E0 , 429.66E0 , 468.22E0 , 487.27E0 , 519.54E0 , 523.03E0 , 612.99E0 , 638.59E0 , 641.36E0 , 622.05E0 , 631.50E0 , 663.97E0 , 646.9E0  , 748.29E0 , 749.21E0 , 750.14E0 , 647.04E0 , 646.89E0 , 746.9E0  , 748.43E0 , 747.35E0 , 749.27E0 , 647.61E0 , 747.78E0 , 750.51E0 , 851.37E0 , 845.97E0 , 847.54E0 , 849.93E0 , 851.61E0 , 849.75E0 , 850.98E0 , 848.23E0};$/;"	m	class:hahn1_functor	file:
m_x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double misra1a_functor::m_x[14] = { 77.6E0, 114.9E0, 141.1E0, 190.8E0, 239.9E0, 289.0E0, 332.8E0, 378.4E0, 434.8E0, 477.3E0, 536.8E0, 593.1E0, 689.1E0, 760.0E0};$/;"	m	class:misra1a_functor	file:
m_y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double m_y[14];$/;"	m	struct:misra1a_functor	file:
m_y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double m_y[54];$/;"	m	struct:chwirut2_functor	file:
m_y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double chwirut2_functor::m_y[54] = { 92.9000E0 ,57.1000E0 ,31.0500E0 ,11.5875E0 ,8.0250E0 ,63.6000E0 ,21.4000E0 ,14.2500E0 ,8.4750E0 ,63.8000E0 ,26.8000E0 ,16.4625E0 ,7.1250E0 ,67.3000E0 ,41.0000E0 ,21.1500E0 ,8.1750E0 ,81.5000E0 ,13.1200E0 ,59.9000E0 ,14.6200E0 ,32.9000E0 ,5.4400E0 ,12.5600E0 ,5.4400E0 ,32.0000E0 ,13.9500E0 ,75.8000E0 ,20.0000E0 ,10.4200E0 ,59.5000E0 ,21.6700E0 ,8.5500E0 ,62.0000E0 ,20.2000E0 ,7.7600E0 ,3.7500E0 ,11.8100E0 ,54.7000E0 ,23.7000E0 ,11.5500E0 ,61.3000E0 ,17.7000E0 ,8.7400E0 ,59.2000E0 ,16.3000E0 ,8.6200E0 ,81.0000E0 ,4.8700E0 ,14.6200E0 ,81.7000E0 ,17.1700E0 ,81.3000E0 ,28.9000E0  };$/;"	m	class:chwirut2_functor	file:
m_y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double misra1a_functor::m_y[14] = { 10.07E0, 14.73E0, 17.94E0, 23.93E0, 29.61E0, 35.18E0, 40.02E0, 44.82E0, 50.76E0, 55.05E0, 61.01E0, 66.40E0, 75.47E0, 81.78E0};$/;"	m	class:misra1a_functor	file:
misra1a_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    misra1a_functor(void) : Functor<double>(2,14) {}$/;"	f	struct:misra1a_functor
misra1a_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct misra1a_functor : Functor<double>$/;"	s	file:
misra1d_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    misra1d_functor(void) : Functor<double>(2,14) {}$/;"	f	struct:misra1d_functor
misra1d_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct misra1d_functor : Functor<double>$/;"	s	file:
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int operator()(const VectorXd &b, VectorXd &fvec)$/;"	f	struct:Bennett5_functor
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int operator()(const VectorXd &b, VectorXd &fvec)$/;"	f	struct:BoxBOD_functor
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int operator()(const VectorXd &b, VectorXd &fvec)$/;"	f	struct:MGH09_functor
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int operator()(const VectorXd &b, VectorXd &fvec)$/;"	f	struct:MGH10_functor
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int operator()(const VectorXd &b, VectorXd &fvec)$/;"	f	struct:MGH17_functor
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int operator()(const VectorXd &b, VectorXd &fvec)$/;"	f	struct:chwirut2_functor
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int operator()(const VectorXd &b, VectorXd &fvec)$/;"	f	struct:eckerle4_functor
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int operator()(const VectorXd &b, VectorXd &fvec)$/;"	f	struct:hahn1_functor
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int operator()(const VectorXd &b, VectorXd &fvec)$/;"	f	struct:lanczos1_functor
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int operator()(const VectorXd &b, VectorXd &fvec)$/;"	f	struct:misra1a_functor
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int operator()(const VectorXd &b, VectorXd &fvec)$/;"	f	struct:misra1d_functor
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int operator()(const VectorXd &b, VectorXd &fvec)$/;"	f	struct:rat42_functor
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int operator()(const VectorXd &b, VectorXd &fvec)$/;"	f	struct:rat43_functor
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int operator()(const VectorXd &b, VectorXd &fvec)$/;"	f	struct:thurber_functor
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int operator()(const VectorXd &x, VectorXd &fvec) const$/;"	f	struct:hybrd_functor
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int operator()(const VectorXd &x, VectorXd &fvec) const$/;"	f	struct:lmder_functor
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int operator()(const VectorXd &x, VectorXd &fvec) const$/;"	f	struct:lmdif_functor
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int operator()(const VectorXd &x, VectorXd &fvec)$/;"	f	struct:hybrj_functor
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    int operator()(const VectorXd &x, VectorXd &fvec)$/;"	f	struct:lmstr_functor
rat42_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    rat42_functor(void) : Functor<double>(3,9) {}$/;"	f	struct:rat42_functor
rat42_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct rat42_functor : Functor<double>$/;"	s	file:
rat43_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    rat43_functor(void) : Functor<double>(4,15) {}$/;"	f	struct:rat43_functor
rat43_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct rat43_functor : Functor<double>$/;"	s	file:
testChkder	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testChkder()$/;"	f
testHybrd	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testHybrd()$/;"	f
testHybrd1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testHybrd1()$/;"	f
testHybrj	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testHybrj()$/;"	f
testHybrj1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testHybrj1()$/;"	f
testLmder	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testLmder()$/;"	f
testLmder1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testLmder1()$/;"	f
testLmdif	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testLmdif()$/;"	f
testLmdif1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testLmdif1()$/;"	f
testLmstr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testLmstr()$/;"	f
testLmstr1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testLmstr1()$/;"	f
testNistBennett5	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testNistBennett5(void)$/;"	f
testNistBoxBOD	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testNistBoxBOD(void)$/;"	f
testNistChwirut2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testNistChwirut2(void)$/;"	f
testNistEckerle4	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testNistEckerle4(void)$/;"	f
testNistHahn1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testNistHahn1(void)$/;"	f
testNistLanczos1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testNistLanczos1(void)$/;"	f
testNistMGH09	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testNistMGH09(void)$/;"	f
testNistMGH10	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testNistMGH10(void)$/;"	f
testNistMGH17	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testNistMGH17(void)$/;"	f
testNistMisra1a	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testNistMisra1a(void)$/;"	f
testNistMisra1d	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testNistMisra1d(void)$/;"	f
testNistRat42	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testNistRat42(void)$/;"	f
testNistRat43	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testNistRat43(void)$/;"	f
testNistThurber	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void testNistThurber(void)$/;"	f
test_NonLinearOptimization	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^void test_NonLinearOptimization()$/;"	f
thurber_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    thurber_functor(void) : Functor<double>(7,37) {}$/;"	f	struct:thurber_functor
thurber_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^struct thurber_functor : Functor<double>$/;"	s	file:
values	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^  int values() const { return m_values; }$/;"	f	struct:Functor
x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double x[14];$/;"	m	struct:misra1d_functor	file:
x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double x[154];$/;"	m	struct:Bennett5_functor	file:
x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double x[15];$/;"	m	struct:rat43_functor	file:
x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double x[16];$/;"	m	struct:MGH10_functor	file:
x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double x[24];$/;"	m	struct:lanczos1_functor	file:
x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double x[33];$/;"	m	struct:MGH17_functor	file:
x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double x[35];$/;"	m	struct:eckerle4_functor	file:
x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double x[6];$/;"	m	struct:BoxBOD_functor	file:
x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double x[9];$/;"	m	struct:rat42_functor	file:
x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double Bennett5_functor::x[154] = { 7.447168E0, 8.102586E0, 8.452547E0, 8.711278E0, 8.916774E0, 9.087155E0, 9.232590E0, 9.359535E0, 9.472166E0, 9.573384E0, 9.665293E0, 9.749461E0, 9.827092E0, 9.899128E0, 9.966321E0, 10.029280E0, 10.088510E0, 10.144430E0, 10.197380E0, 10.247670E0, 10.295560E0, 10.341250E0, 10.384950E0, 10.426820E0, 10.467000E0, 10.505640E0, 10.542830E0, 10.578690E0, 10.613310E0, 10.646780E0, 10.679150E0, 10.710520E0, 10.740920E0, 10.770440E0, 10.799100E0, 10.826970E0, 10.854080E0, 10.880470E0, 10.906190E0, 10.931260E0, 10.955720E0, 10.979590E0, 11.002910E0, 11.025700E0, 11.047980E0, 11.069770E0, 11.091100E0, 11.111980E0, 11.132440E0, 11.152480E0, 11.172130E0, 11.191410E0, 11.210310E0, 11.228870E0, 11.247090E0, 11.264980E0, 11.282560E0, 11.299840E0, 11.316820E0, 11.333520E0, 11.349940E0, 11.366100E0, 11.382000E0, 11.397660E0, 11.413070E0, 11.428240E0, 11.443200E0, 11.457930E0, 11.472440E0, 11.486750E0, 11.500860E0, 11.514770E0, 11.528490E0, 11.542020E0, 11.555380E0, 11.568550E0, 11.581560E0, 11.594420E0, 11.607121E0, 11.619640E0, 11.632000E0, 11.644210E0, 11.656280E0, 11.668200E0, 11.679980E0, 11.691620E0, 11.703130E0, 11.714510E0, 11.725760E0, 11.736880E0, 11.747890E0, 11.758780E0, 11.769550E0, 11.780200E0, 11.790730E0, 11.801160E0, 11.811480E0, 11.821700E0, 11.831810E0, 11.841820E0, 11.851730E0, 11.861550E0, 11.871270E0, 11.880890E0, 11.890420E0, 11.899870E0, 11.909220E0, 11.918490E0, 11.927680E0, 11.936780E0, 11.945790E0, 11.954730E0, 11.963590E0, 11.972370E0, 11.981070E0, 11.989700E0, 11.998260E0, 12.006740E0, 12.015150E0, 12.023490E0, 12.031760E0, 12.039970E0, 12.048100E0, 12.056170E0, 12.064180E0, 12.072120E0, 12.080010E0, 12.087820E0, 12.095580E0, 12.103280E0, 12.110920E0, 12.118500E0, 12.126030E0, 12.133500E0, 12.140910E0, 12.148270E0, 12.155570E0, 12.162830E0, 12.170030E0, 12.177170E0, 12.184270E0, 12.191320E0, 12.198320E0, 12.205270E0, 12.212170E0, 12.219030E0, 12.225840E0, 12.232600E0, 12.239320E0, 12.245990E0, 12.252620E0, 12.259200E0, 12.265750E0, 12.272240E0 };$/;"	m	class:Bennett5_functor	file:
x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double BoxBOD_functor::x[6] = { 1., 2., 3., 5., 7., 10. };$/;"	m	class:BoxBOD_functor	file:
x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double MGH10_functor::x[16] = { 5.000000E+01, 5.500000E+01, 6.000000E+01, 6.500000E+01, 7.000000E+01, 7.500000E+01, 8.000000E+01, 8.500000E+01, 9.000000E+01, 9.500000E+01, 1.000000E+02, 1.050000E+02, 1.100000E+02, 1.150000E+02, 1.200000E+02, 1.250000E+02 };$/;"	m	class:MGH10_functor	file:
x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double MGH17_functor::x[33] = { 0.000000E+00, 1.000000E+01, 2.000000E+01, 3.000000E+01, 4.000000E+01, 5.000000E+01, 6.000000E+01, 7.000000E+01, 8.000000E+01, 9.000000E+01, 1.000000E+02, 1.100000E+02, 1.200000E+02, 1.300000E+02, 1.400000E+02, 1.500000E+02, 1.600000E+02, 1.700000E+02, 1.800000E+02, 1.900000E+02, 2.000000E+02, 2.100000E+02, 2.200000E+02, 2.300000E+02, 2.400000E+02, 2.500000E+02, 2.600000E+02, 2.700000E+02, 2.800000E+02, 2.900000E+02, 3.000000E+02, 3.100000E+02, 3.200000E+02 };$/;"	m	class:MGH17_functor	file:
x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double eckerle4_functor::x[35] = { 400.0, 405.0, 410.0, 415.0, 420.0, 425.0, 430.0, 435.0, 436.5, 438.0, 439.5, 441.0, 442.5, 444.0, 445.5, 447.0, 448.5, 450.0, 451.5, 453.0, 454.5, 456.0, 457.5, 459.0, 460.5, 462.0, 463.5, 465.0, 470.0, 475.0, 480.0, 485.0, 490.0, 495.0, 500.0};$/;"	m	class:eckerle4_functor	file:
x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double lanczos1_functor::x[24] = { 0.000000000000E+00, 5.000000000000E-02, 1.000000000000E-01, 1.500000000000E-01, 2.000000000000E-01, 2.500000000000E-01, 3.000000000000E-01, 3.500000000000E-01, 4.000000000000E-01, 4.500000000000E-01, 5.000000000000E-01, 5.500000000000E-01, 6.000000000000E-01, 6.500000000000E-01, 7.000000000000E-01, 7.500000000000E-01, 8.000000000000E-01, 8.500000000000E-01, 9.000000000000E-01, 9.500000000000E-01, 1.000000000000E+00, 1.050000000000E+00, 1.100000000000E+00, 1.150000000000E+00 };$/;"	m	class:lanczos1_functor	file:
x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double misra1d_functor::x[14] = { 77.6E0, 114.9E0, 141.1E0, 190.8E0, 239.9E0, 289.0E0, 332.8E0, 378.4E0, 434.8E0, 477.3E0, 536.8E0, 593.1E0, 689.1E0, 760.0E0};$/;"	m	class:misra1d_functor	file:
x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double rat42_functor::x[9] = { 9.000E0, 14.000E0, 21.000E0, 28.000E0, 42.000E0, 57.000E0, 63.000E0, 70.000E0, 79.000E0 };$/;"	m	class:rat42_functor	file:
x	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double rat43_functor::x[15] = { 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15. };$/;"	m	class:rat43_functor	file:
y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double y[11];$/;"	m	struct:MGH09_functor	file:
y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double y[14];$/;"	m	struct:misra1d_functor	file:
y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double y[154];$/;"	m	struct:Bennett5_functor	file:
y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double y[15];$/;"	m	struct:rat43_functor	file:
y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double y[16];$/;"	m	struct:MGH10_functor	file:
y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double y[24];$/;"	m	struct:lanczos1_functor	file:
y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double y[33];$/;"	m	struct:MGH17_functor	file:
y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double y[35];$/;"	m	struct:eckerle4_functor	file:
y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^    static const double y[9];$/;"	m	struct:rat42_functor	file:
y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double Bennett5_functor::y[154] = { -34.834702E0 ,-34.393200E0 ,-34.152901E0 ,-33.979099E0 ,-33.845901E0 ,-33.732899E0 ,-33.640301E0 ,-33.559200E0 ,-33.486801E0 ,-33.423100E0 ,-33.365101E0 ,-33.313000E0 ,-33.260899E0 ,-33.217400E0 ,-33.176899E0 ,-33.139198E0 ,-33.101601E0 ,-33.066799E0 ,-33.035000E0 ,-33.003101E0 ,-32.971298E0 ,-32.942299E0 ,-32.916302E0 ,-32.890202E0 ,-32.864101E0 ,-32.841000E0 ,-32.817799E0 ,-32.797501E0 ,-32.774300E0 ,-32.757000E0 ,-32.733799E0 ,-32.716400E0 ,-32.699100E0 ,-32.678799E0 ,-32.661400E0 ,-32.644001E0 ,-32.626701E0 ,-32.612202E0 ,-32.597698E0 ,-32.583199E0 ,-32.568699E0 ,-32.554298E0 ,-32.539799E0 ,-32.525299E0 ,-32.510799E0 ,-32.499199E0 ,-32.487598E0 ,-32.473202E0 ,-32.461601E0 ,-32.435501E0 ,-32.435501E0 ,-32.426800E0 ,-32.412300E0 ,-32.400799E0 ,-32.392101E0 ,-32.380501E0 ,-32.366001E0 ,-32.357300E0 ,-32.348598E0 ,-32.339901E0 ,-32.328400E0 ,-32.319698E0 ,-32.311001E0 ,-32.299400E0 ,-32.290699E0 ,-32.282001E0 ,-32.273300E0 ,-32.264599E0 ,-32.256001E0 ,-32.247299E0 ,-32.238602E0 ,-32.229900E0 ,-32.224098E0 ,-32.215401E0 ,-32.203800E0 ,-32.198002E0 ,-32.189400E0 ,-32.183601E0 ,-32.174900E0 ,-32.169102E0 ,-32.163300E0 ,-32.154598E0 ,-32.145901E0 ,-32.140099E0 ,-32.131401E0 ,-32.125599E0 ,-32.119801E0 ,-32.111198E0 ,-32.105400E0 ,-32.096699E0 ,-32.090900E0 ,-32.088001E0 ,-32.079300E0 ,-32.073502E0 ,-32.067699E0 ,-32.061901E0 ,-32.056099E0 ,-32.050301E0 ,-32.044498E0 ,-32.038799E0 ,-32.033001E0 ,-32.027199E0 ,-32.024300E0 ,-32.018501E0 ,-32.012699E0 ,-32.004002E0 ,-32.001099E0 ,-31.995300E0 ,-31.989500E0 ,-31.983700E0 ,-31.977900E0 ,-31.972099E0 ,-31.969299E0 ,-31.963501E0 ,-31.957701E0 ,-31.951900E0 ,-31.946100E0 ,-31.940300E0 ,-31.937401E0 ,-31.931601E0 ,-31.925800E0 ,-31.922899E0 ,-31.917101E0 ,-31.911301E0 ,-31.908400E0 ,-31.902599E0 ,-31.896900E0 ,-31.893999E0 ,-31.888201E0 ,-31.885300E0 ,-31.882401E0 ,-31.876600E0 ,-31.873699E0 ,-31.867901E0 ,-31.862101E0 ,-31.859200E0 ,-31.856300E0 ,-31.850500E0 ,-31.844700E0 ,-31.841801E0 ,-31.838900E0 ,-31.833099E0 ,-31.830200E0 ,-31.827299E0 ,-31.821600E0 ,-31.818701E0 ,-31.812901E0 ,-31.809999E0 ,-31.807100E0 ,-31.801300E0 ,-31.798401E0 ,-31.795500E0 ,-31.789700E0 ,-31.786800E0 };$/;"	m	class:Bennett5_functor	file:
y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double MGH09_functor::y[11] = { 1.957000E-01, 1.947000E-01, 1.735000E-01, 1.600000E-01, 8.440000E-02, 6.270000E-02, 4.560000E-02, 3.420000E-02, 3.230000E-02, 2.350000E-02, 2.460000E-02 };$/;"	m	class:MGH09_functor	file:
y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double MGH10_functor::y[16] = { 3.478000E+04, 2.861000E+04, 2.365000E+04, 1.963000E+04, 1.637000E+04, 1.372000E+04, 1.154000E+04, 9.744000E+03, 8.261000E+03, 7.030000E+03, 6.005000E+03, 5.147000E+03, 4.427000E+03, 3.820000E+03, 3.307000E+03, 2.872000E+03 };$/;"	m	class:MGH10_functor	file:
y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double MGH17_functor::y[33] = { 8.440000E-01, 9.080000E-01, 9.320000E-01, 9.360000E-01, 9.250000E-01, 9.080000E-01, 8.810000E-01, 8.500000E-01, 8.180000E-01, 7.840000E-01, 7.510000E-01, 7.180000E-01, 6.850000E-01, 6.580000E-01, 6.280000E-01, 6.030000E-01, 5.800000E-01, 5.580000E-01, 5.380000E-01, 5.220000E-01, 5.060000E-01, 4.900000E-01, 4.780000E-01, 4.670000E-01, 4.570000E-01, 4.480000E-01, 4.380000E-01, 4.310000E-01, 4.240000E-01, 4.200000E-01, 4.140000E-01, 4.110000E-01, 4.060000E-01 };$/;"	m	class:MGH17_functor	file:
y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double eckerle4_functor::y[35] = { 0.0001575, 0.0001699, 0.0002350, 0.0003102, 0.0004917, 0.0008710, 0.0017418, 0.0046400, 0.0065895, 0.0097302, 0.0149002, 0.0237310, 0.0401683, 0.0712559, 0.1264458, 0.2073413, 0.2902366, 0.3445623, 0.3698049, 0.3668534, 0.3106727, 0.2078154, 0.1164354, 0.0616764, 0.0337200, 0.0194023, 0.0117831, 0.0074357, 0.0022732, 0.0008800, 0.0004579, 0.0002345, 0.0001586, 0.0001143, 0.0000710 };$/;"	m	class:eckerle4_functor	file:
y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double lanczos1_functor::y[24] = { 2.513400000000E+00 ,2.044333373291E+00 ,1.668404436564E+00 ,1.366418021208E+00 ,1.123232487372E+00 ,9.268897180037E-01 ,7.679338563728E-01 ,6.388775523106E-01 ,5.337835317402E-01 ,4.479363617347E-01 ,3.775847884350E-01 ,3.197393199326E-01 ,2.720130773746E-01 ,2.324965529032E-01 ,1.996589546065E-01 ,1.722704126914E-01 ,1.493405660168E-01 ,1.300700206922E-01 ,1.138119324644E-01 ,1.000415587559E-01 ,8.833209084540E-02 ,7.833544019350E-02 ,6.976693743449E-02 ,6.239312536719E-02 };$/;"	m	class:lanczos1_functor	file:
y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double misra1d_functor::y[14] = { 10.07E0, 14.73E0, 17.94E0, 23.93E0, 29.61E0, 35.18E0, 40.02E0, 44.82E0, 50.76E0, 55.05E0, 61.01E0, 66.40E0, 75.47E0, 81.78E0};$/;"	m	class:misra1d_functor	file:
y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double rat42_functor::y[9] = { 8.930E0 ,10.800E0 ,18.590E0 ,22.330E0 ,39.350E0 ,56.110E0 ,61.730E0 ,64.620E0 ,67.080E0 };$/;"	m	class:rat42_functor	file:
y	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NonLinearOptimization.cpp	/^const double rat43_functor::y[15] = { 16.08, 33.83, 65.80, 97.20, 191.55, 326.20, 386.87, 520.53, 590.03, 651.92, 724.93, 699.56, 689.96, 637.56, 717.41 };$/;"	m	class:rat43_functor	file:
Functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^  Functor() : m_inputs(InputsAtCompileTime), m_values(ValuesAtCompileTime) {}$/;"	f	struct:Functor
Functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^  Functor(int inputs, int values) : m_inputs(inputs), m_values(values) {}$/;"	f	struct:Functor
Functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^struct Functor$/;"	s	file:
InputType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^  typedef Matrix<Scalar,InputsAtCompileTime,1> InputType;$/;"	t	struct:Functor	file:
InputsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^    InputsAtCompileTime = NX,$/;"	e	enum:Functor::<anonymous>	file:
JacobianType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^  typedef Matrix<Scalar,ValuesAtCompileTime,InputsAtCompileTime> JacobianType;$/;"	t	struct:Functor	file:
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^  typedef _Scalar Scalar;$/;"	t	struct:Functor	file:
ValueType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^  typedef Matrix<Scalar,ValuesAtCompileTime,1> ValueType;$/;"	t	struct:Functor	file:
ValuesAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^    ValuesAtCompileTime = NY$/;"	e	enum:Functor::<anonymous>	file:
actual_df	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^    int actual_df(const VectorXd &x, MatrixXd &fjac) const$/;"	f	struct:my_functor
inputs	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^  int inputs() const { return m_inputs; }$/;"	f	struct:Functor
m_inputs	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^  int m_inputs, m_values;$/;"	m	struct:Functor	file:
m_values	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^  int m_inputs, m_values;$/;"	m	struct:Functor	file:
my_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^    my_functor(void): Functor<double>(3,15) {}$/;"	f	struct:my_functor
my_functor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^struct my_functor : Functor<double>$/;"	s	file:
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^    int operator()(const VectorXd &x, VectorXd &fvec) const$/;"	f	struct:my_functor
test_NumericalDiff	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^void test_NumericalDiff()$/;"	f
test_central	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^void test_central()$/;"	f
test_forward	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^void test_forward()$/;"	f
values	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/NumericalDiff.cpp	/^  int values() const { return m_values; }$/;"	f	struct:Functor
alignedvector3	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/alignedvector3.cpp	/^void alignedvector3()$/;"	f
test_alignedvector3	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/alignedvector3.cpp	/^void test_alignedvector3()$/;"	f
InputType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^  typedef Matrix<Scalar,InputsAtCompileTime,1> InputType;$/;"	t	struct:TestFunc1	file:
InputsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^    InputsAtCompileTime = NX,$/;"	e	enum:TestFunc1::<anonymous>	file:
JacobianType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^  typedef Matrix<Scalar,ValuesAtCompileTime,InputsAtCompileTime> JacobianType;$/;"	t	struct:TestFunc1	file:
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^  typedef _Scalar Scalar;$/;"	t	struct:TestFunc1	file:
TestFunc1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^  TestFunc1() : m_inputs(InputsAtCompileTime), m_values(ValuesAtCompileTime) {}$/;"	f	struct:TestFunc1
TestFunc1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^  TestFunc1(int inputs, int values) : m_inputs(inputs), m_values(values) {}$/;"	f	struct:TestFunc1
TestFunc1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^struct TestFunc1$/;"	s	file:
ValueType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^  typedef Matrix<Scalar,ValuesAtCompileTime,1> ValueType;$/;"	t	struct:TestFunc1	file:
ValuesAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^    ValuesAtCompileTime = NY$/;"	e	enum:TestFunc1::<anonymous>	file:
foo	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^EIGEN_DONT_INLINE Scalar foo(const Scalar& x, const Scalar& y)$/;"	f
forward_jacobian	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^template<typename Func> void forward_jacobian(const Func& f)$/;"	f
inputs	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^  int inputs() const { return m_inputs; }$/;"	f	struct:TestFunc1
m_inputs	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^  int m_inputs, m_values;$/;"	m	struct:TestFunc1	file:
m_values	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^  int m_inputs, m_values;$/;"	m	struct:TestFunc1	file:
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^  void operator() (const InputType& x, ValueType* v, JacobianType* _j) const$/;"	f	struct:TestFunc1
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^  void operator() (const Matrix<T,InputsAtCompileTime,1>& x, Matrix<T,ValuesAtCompileTime,1>* _v) const$/;"	f	struct:TestFunc1
test_autodiff	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^void test_autodiff()$/;"	f
test_autodiff_jacobian	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^void test_autodiff_jacobian()$/;"	f
test_autodiff_scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^void test_autodiff_scalar()$/;"	f
values	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/autodiff.cpp	/^  int values() const { return m_values; }$/;"	f	struct:TestFunc1
ADOLC_numDir	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/forward_adolc.cpp	/^int adtl::ADOLC_numDir;$/;"	m	class:adtl	file:
InputType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/forward_adolc.cpp	/^  typedef Matrix<Scalar,InputsAtCompileTime,1> InputType;$/;"	t	struct:TestFunc1	file:
InputsAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/forward_adolc.cpp	/^    InputsAtCompileTime = NX,$/;"	e	enum:TestFunc1::<anonymous>	file:
JacobianType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/forward_adolc.cpp	/^  typedef Matrix<Scalar,ValuesAtCompileTime,InputsAtCompileTime> JacobianType;$/;"	t	struct:TestFunc1	file:
NUMBER_DIRECTIONS	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/forward_adolc.cpp	26;"	d	file:
Scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/forward_adolc.cpp	/^  typedef _Scalar Scalar;$/;"	t	struct:TestFunc1	file:
TestFunc1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/forward_adolc.cpp	/^  TestFunc1() : m_inputs(InputsAtCompileTime), m_values(ValuesAtCompileTime) {}$/;"	f	struct:TestFunc1
TestFunc1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/forward_adolc.cpp	/^  TestFunc1(int inputs, int values) : m_inputs(inputs), m_values(values) {}$/;"	f	struct:TestFunc1
TestFunc1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/forward_adolc.cpp	/^struct TestFunc1$/;"	s	file:
ValueType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/forward_adolc.cpp	/^  typedef Matrix<Scalar,ValuesAtCompileTime,1> ValueType;$/;"	t	struct:TestFunc1	file:
ValuesAtCompileTime	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/forward_adolc.cpp	/^    ValuesAtCompileTime = NY$/;"	e	enum:TestFunc1::<anonymous>	file:
adolc_forward_jacobian	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/forward_adolc.cpp	/^template<typename Func> void adolc_forward_jacobian(const Func& f)$/;"	f
inputs	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/forward_adolc.cpp	/^  int inputs() const { return m_inputs; }$/;"	f	struct:TestFunc1
m_inputs	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/forward_adolc.cpp	/^  int m_inputs, m_values;$/;"	m	struct:TestFunc1	file:
m_values	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/forward_adolc.cpp	/^  int m_inputs, m_values;$/;"	m	struct:TestFunc1	file:
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/forward_adolc.cpp	/^  void operator() (const InputType& x, ValueType* v, JacobianType* _j) const$/;"	f	struct:TestFunc1
operator ()	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/forward_adolc.cpp	/^  void operator() (const Matrix<T,InputsAtCompileTime,1>& x, Matrix<T,ValuesAtCompileTime,1>* _v) const$/;"	f	struct:TestFunc1
test_forward_adolc	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/forward_adolc.cpp	/^void test_forward_adolc()$/;"	f
values	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/forward_adolc.cpp	/^  int values() const { return m_values; }$/;"	f	struct:TestFunc1
binom	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_exponential.cpp	/^double binom(int n, int k)$/;"	f
expfn	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_exponential.cpp	/^T expfn(T x, int)$/;"	f
randomTest	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_exponential.cpp	/^void randomTest(const MatrixType& m, double tol)$/;"	f
relerr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_exponential.cpp	/^double relerr(const MatrixBase<Derived>& A, const MatrixBase<OtherDerived>& B)$/;"	f
test2dHyperbolicRotation	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_exponential.cpp	/^void test2dHyperbolicRotation(double tol)$/;"	f
test2dRotation	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_exponential.cpp	/^void test2dRotation(double tol)$/;"	f
testPascal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_exponential.cpp	/^void testPascal(double tol)$/;"	f
test_matrix_exponential	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_exponential.cpp	/^void test_matrix_exponential()$/;"	f
VERIFY_IS_APPROX_ABS	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_function.cpp	30;"	d	file:
randomMatrixWithImagEivals	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_function.cpp	/^struct randomMatrixWithImagEivals$/;"	s	file:
randomMatrixWithImagEivals	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_function.cpp	/^struct randomMatrixWithImagEivals<MatrixType, 0>$/;"	s	file:
randomMatrixWithImagEivals	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_function.cpp	/^struct randomMatrixWithImagEivals<MatrixType, 1>$/;"	s	file:
randomMatrixWithRealEivals	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_function.cpp	/^MatrixType randomMatrixWithRealEivals(const typename MatrixType::Index size)$/;"	f
run	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_function.cpp	/^  static MatrixType run(const typename MatrixType::Index size)$/;"	f	struct:randomMatrixWithImagEivals
testGonioFunctions	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_function.cpp	/^void testGonioFunctions(const MatrixType& A)$/;"	f
testHyperbolicFunctions	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_function.cpp	/^void testHyperbolicFunctions(const MatrixType& A)$/;"	f
testMatrix	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_function.cpp	/^void testMatrix(const MatrixType& A)$/;"	f
testMatrixExponential	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_function.cpp	/^void testMatrixExponential(const MatrixType& A)$/;"	f
testMatrixType	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_function.cpp	/^void testMatrixType(const MatrixType& m)$/;"	f
test_isApprox_abs	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_function.cpp	/^inline bool test_isApprox_abs(const Type1& a, const Type2& b)$/;"	f
test_matrix_function	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/matrix_function.cpp	/^void test_matrix_function()$/;"	f
agm	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^const mpreal agm (const mpreal& v1, const mpreal& v2, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
default_base	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^int		   mpreal::default_base = 10;$/;"	m	class:mpfr::mpreal	file:
default_prec	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^mp_prec_t  mpreal::default_prec = mpfr_get_default_prec();	$/;"	m	class:mpfr::mpreal	file:
default_rnd	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^mp_rnd_t   mpreal::default_rnd  = mpfr_get_default_rounding_mode();	$/;"	m	class:mpfr::mpreal	file:
double_bits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^int        mpreal::double_bits = -1;$/;"	m	class:mpfr::mpreal	file:
fma	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^const mpreal fma (const mpreal& v1, const mpreal& v2, const mpreal& v3, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
fms	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^const mpreal fms (const mpreal& v1, const mpreal& v2, const mpreal& v3, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
hypot	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^const mpreal hypot (const mpreal& x, const mpreal& y, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
mpfr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^namespace mpfr{$/;"	n	file:
mpreal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^mpreal::mpreal() $/;"	f	class:mpfr::mpreal
mpreal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^mpreal::mpreal(const char* s, mp_prec_t prec, int base, mp_rnd_t mode)$/;"	f	class:mpfr::mpreal
mpreal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^mpreal::mpreal(const double u, mp_prec_t prec, mp_rnd_t mode)$/;"	f	class:mpfr::mpreal
mpreal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^mpreal::mpreal(const int u, mp_prec_t prec, mp_rnd_t mode)$/;"	f	class:mpfr::mpreal
mpreal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^mpreal::mpreal(const long double u, mp_prec_t prec, mp_rnd_t mode)$/;"	f	class:mpfr::mpreal
mpreal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^mpreal::mpreal(const long int u, mp_prec_t prec, mp_rnd_t mode)$/;"	f	class:mpfr::mpreal
mpreal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^mpreal::mpreal(const mpf_t u)$/;"	f	class:mpfr::mpreal
mpreal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^mpreal::mpreal(const mpfr_t u)$/;"	f	class:mpfr::mpreal
mpreal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^mpreal::mpreal(const mpq_t u, mp_prec_t prec, mp_rnd_t mode)$/;"	f	class:mpfr::mpreal
mpreal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^mpreal::mpreal(const mpreal& u) $/;"	f	class:mpfr::mpreal
mpreal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^mpreal::mpreal(const mpz_t u, mp_prec_t prec, mp_rnd_t mode)$/;"	f	class:mpfr::mpreal
mpreal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^mpreal::mpreal(const unsigned int u, mp_prec_t prec, mp_rnd_t mode)$/;"	f	class:mpfr::mpreal
mpreal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^mpreal::mpreal(const unsigned long int u, mp_prec_t prec, mp_rnd_t mode)$/;"	f	class:mpfr::mpreal
operator <<	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^ostream& operator<<(ostream& os, const mpreal& v)$/;"	f	namespace:mpfr
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^mpreal& mpreal::operator=(const char* s)$/;"	f	class:mpfr::mpreal
operator >>	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^istream& operator>>(istream &is, mpreal& v)$/;"	f	namespace:mpfr
operator std::string	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^mpreal::operator std::string() const$/;"	f	class:mpfr::mpreal
remainder	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^const mpreal remainder (const mpreal& x, const mpreal& y, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
remquo	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^const mpreal remquo (long* q, const mpreal& x, const mpreal& y, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sum	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^const mpreal sum (const mpreal tab[], unsigned long int n, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
to_string	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^std::string to_string(T t, std::ios_base & (*f)(std::ios_base&))$/;"	f	namespace:mpfr
to_string	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^string mpreal::to_string(size_t n, int b, mp_rnd_t mode) const$/;"	f	class:mpfr::mpreal
~mpreal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.cpp	/^mpreal::~mpreal() $/;"	f	class:mpfr::mpreal
IsInf	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	41;"	d
IsInf	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	44;"	d
IsInf	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	47;"	d
IsInf	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	50;"	d
__MP_REAL_H__	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	28;"	d
_isinf	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool _isinf(const mpreal& v)$/;"	f	namespace:mpfr
_isint	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool _isint(const mpreal& v)$/;"	f	namespace:mpfr
_isnan	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool _isnan(const mpreal& v)$/;"	f	namespace:mpfr
_isnum	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool _isnum(const mpreal& v)$/;"	f	namespace:mpfr
_isregular	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool _isregular(const mpreal& v)$/;"	f	namespace:mpfr
_iszero	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool _iszero(const mpreal& v)$/;"	f	namespace:mpfr
_j0	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal _j0 (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
_j1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal _j1 (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
_jn	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal _jn (long n, const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
_y0	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal _y0 (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
_y1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal _y1 (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
_yn	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal _yn (long n, const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
abs	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal abs(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
acos	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal acos (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
acosh	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal acosh  (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
asin	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal asin (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
asinh	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal asinh  (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
atan	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal atan (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
atan2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal atan2 (const mpreal& y, const mpreal& x, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
atanh	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal atanh  (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
cbrt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal cbrt(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
ceil	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal ceil(const mpreal& v)$/;"	f	namespace:mpfr
check_range	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline int mpreal::check_range (int t, mp_rnd_t rnd_mode)$/;"	f	class:mpfr::mpreal
cmpabs	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline int cmpabs(const mpreal& a,const mpreal& b)$/;"	f	namespace:mpfr
const_catalan	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal const_catalan (mp_prec_t prec, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
const_euler	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal const_euler (mp_prec_t prec, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
const_infinity	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal const_infinity (int sign, mp_prec_t prec, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
const_log2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal const_log2 (mp_prec_t prec, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
const_pi	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal const_pi (mp_prec_t prec, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
conversion_overflow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^class conversion_overflow : public std::exception {$/;"	c	namespace:mpfr
cos	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal cos(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
cosh	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal cosh (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
cot	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal cot(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
coth	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal coth (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
csc	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal csc(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
csch	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal csch (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
default_base	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^	static int			default_base;$/;"	m	class:mpfr::mpreal
default_prec	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^	static mp_prec_t	default_prec;	$/;"	m	class:mpfr::mpreal
default_rnd	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^	static mp_rnd_t		default_rnd;	$/;"	m	class:mpfr::mpreal
digamma	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal digamma(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
dim	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal dim(const mpreal& a, const mpreal& b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
div_2si	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal div_2si(const mpreal& v, long int k, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
div_2ui	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal div_2ui(const mpreal& v, unsigned long int k, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
double_bits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^	static int			double_bits;$/;"	m	class:mpfr::mpreal
eint	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal eint   (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
erf	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal erf (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
erfc	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal erfc (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
exp	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal exp(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
exp10	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal exp10(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
exp2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal exp2(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
expm1	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal expm1  (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
fabs	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal fabs(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
fac_ui	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal fac_ui (unsigned long int v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
fits_in_bits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool mpreal::fits_in_bits(double x, int n)$/;"	f	class:mpfr::mpreal
floor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal floor(const mpreal& v)$/;"	f	namespace:mpfr
fmod	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal fmod (const mpreal& x, const mpreal& y, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
frac	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal frac (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
frexp	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal frexp(const mpreal& v, mp_exp_t* exp)$/;"	f	namespace:mpfr
gamma	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal gamma (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
get_default_base	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline int mpreal::get_default_base()$/;"	f	class:mpfr::mpreal
get_default_prec	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mp_prec_t mpreal::get_default_prec()$/;"	f	class:mpfr::mpreal
get_default_rnd	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mp_rnd_t mpreal::get_default_rnd()$/;"	f	class:mpfr::mpreal
get_double_bits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline int mpreal::get_double_bits()$/;"	f	class:mpfr::mpreal
get_emax	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mp_exp_t mpreal::get_emax (void)$/;"	f	class:mpfr::mpreal
get_emax_max	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mp_exp_t mpreal::get_emax_max (void)$/;"	f	class:mpfr::mpreal
get_emax_min	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mp_exp_t mpreal::get_emax_min (void)$/;"	f	class:mpfr::mpreal
get_emin	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mp_exp_t mpreal::get_emin (void)$/;"	f	class:mpfr::mpreal
get_emin_max	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mp_exp_t mpreal::get_emin_max (void)$/;"	f	class:mpfr::mpreal
get_emin_min	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mp_exp_t mpreal::get_emin_min (void)$/;"	f	class:mpfr::mpreal
get_exp	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mp_exp_t mpreal::get_exp ()$/;"	f	class:mpfr::mpreal
get_prec	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mp_prec_t mpreal::get_prec() const$/;"	f	class:mpfr::mpreal
ldexp	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal ldexp(const mpreal& v, mp_exp_t exp)$/;"	f	namespace:mpfr
lgamma	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal lgamma (const mpreal& v, int *signp, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
li2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal li2(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
lngamma	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal lngamma (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
log	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal log  (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
log10	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal log10(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
log1p	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal log1p  (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
log2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal log2(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
machine_epsilon	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal machine_epsilon(mp_prec_t prec)$/;"	f	namespace:mpfr
max	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal max(const mpreal& x, const mpreal& y)$/;"	f	namespace:mpfr
min	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal min(const mpreal& x, const mpreal& y)$/;"	f	namespace:mpfr
modf	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal modf(const mpreal& v, mpreal& n)$/;"	f	namespace:mpfr
mp	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^	mpfr_t mp;$/;"	m	class:mpfr::mpreal
mpfr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^namespace mpfr {$/;"	n
mpreal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^class mpreal {$/;"	c	namespace:mpfr
mpreal_max	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal mpreal_max(mp_prec_t prec)$/;"	f	namespace:mpfr
mpreal_min	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal mpreal_min(mp_prec_t prec)$/;"	f	namespace:mpfr
mul_2si	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal mul_2si(const mpreal& v, long int k, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
mul_2ui	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal mul_2ui(const mpreal& v, unsigned long int k, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
nextabove	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal nextabove  (const mpreal& x)$/;"	f	namespace:mpfr
nextbelow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal nextbelow  (const mpreal& x)$/;"	f	namespace:mpfr
nexttoward	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal nexttoward (const mpreal& x, const mpreal& y)$/;"	f	namespace:mpfr
operator !=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator !=  (const double a,			const mpreal& b)$/;"	f	namespace:mpfr
operator !=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator !=  (const int a,				const mpreal& b)$/;"	f	namespace:mpfr
operator !=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator !=  (const long double a,		const mpreal& b)$/;"	f	namespace:mpfr
operator !=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator !=  (const long int a,			const mpreal& b)$/;"	f	namespace:mpfr
operator !=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator !=  (const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator !=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator !=  (const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator !=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator !=  (const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator !=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator !=  (const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator !=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator !=  (const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator !=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator !=  (const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator !=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator !=  (const unsigned int a,		const mpreal& b)$/;"	f	namespace:mpfr
operator !=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator !=  (const unsigned long int a,const mpreal& b)$/;"	f	namespace:mpfr
operator !=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator != (const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator*(const double  b, const mpreal& a)$/;"	f	namespace:mpfr
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator*(const int b, const mpreal& a)$/;"	f	namespace:mpfr
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator*(const long double b, const mpreal& a)$/;"	f	namespace:mpfr
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator*(const long int b, const mpreal& a)$/;"	f	namespace:mpfr
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator*(const mpq_t b, const mpreal& a)$/;"	f	namespace:mpfr
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator*(const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator*(const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator*(const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator*(const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator*(const mpreal& a, const mpq_t b)$/;"	f	namespace:mpfr
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator*(const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator*(const mpreal& a, const mpz_t b)$/;"	f	namespace:mpfr
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator*(const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator*(const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator*(const mpz_t b, const mpreal& a)$/;"	f	namespace:mpfr
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator*(const unsigned int b, const mpreal& a)$/;"	f	namespace:mpfr
operator *	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator*(const unsigned long int b, const mpreal& a)$/;"	f	namespace:mpfr
operator *=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator*= (const mpreal& v)$/;"	f	class:mpfr::mpreal
operator *=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator*=(const double v)$/;"	f	class:mpfr::mpreal
operator *=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator*=(const int v)$/;"	f	class:mpfr::mpreal
operator *=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator*=(const long double v)$/;"	f	class:mpfr::mpreal
operator *=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator*=(const long int v)$/;"	f	class:mpfr::mpreal
operator *=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator*=(const mpq_t v)$/;"	f	class:mpfr::mpreal
operator *=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator*=(const mpz_t v)$/;"	f	class:mpfr::mpreal
operator *=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator*=(const unsigned int v)$/;"	f	class:mpfr::mpreal
operator *=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator*=(const unsigned long int v)$/;"	f	class:mpfr::mpreal
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal mpreal::operator+()const$/;"	f	class:mpfr::mpreal
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator+(const char* a, const mpreal& b)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator+(const double  b, const mpreal& a)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator+(const int b, const mpreal& a)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator+(const long double b, const mpreal& a)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator+(const long int b, const mpreal& a)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator+(const mpq_t b, const mpreal& a)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const char* b)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const mpq_t b)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const mpz_t b)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator+(const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator+(const mpz_t b, const mpreal& a)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator+(const unsigned int b, const mpreal& a)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator+(const unsigned long int b, const mpreal& a)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const std::string operator+(const mpreal& a, const std::string b)$/;"	f	namespace:mpfr
operator +	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const std::string operator+(const std::string a, const mpreal& b)$/;"	f	namespace:mpfr
operator ++	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal mpreal::operator++ (int)$/;"	f	class:mpfr::mpreal
operator ++	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator++() $/;"	f	class:mpfr::mpreal
operator +=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator+= (const double u)$/;"	f	class:mpfr::mpreal
operator +=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator+= (const long double u)$/;"	f	class:mpfr::mpreal
operator +=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator+=(const int u)$/;"	f	class:mpfr::mpreal
operator +=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator+=(const long int u)$/;"	f	class:mpfr::mpreal
operator +=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator+=(const mpf_t u)$/;"	f	class:mpfr::mpreal
operator +=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator+=(const mpq_t u)$/;"	f	class:mpfr::mpreal
operator +=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator+=(const mpreal& v)$/;"	f	class:mpfr::mpreal
operator +=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator+=(const mpz_t u)$/;"	f	class:mpfr::mpreal
operator +=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator+=(const unsigned int u)$/;"	f	class:mpfr::mpreal
operator +=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator+=(const unsigned long int u)$/;"	f	class:mpfr::mpreal
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal mpreal::operator-()const$/;"	f	class:mpfr::mpreal
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator-(const char* a, const mpreal& b)$/;"	f	namespace:mpfr
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator-(const double  b, const mpreal& a)$/;"	f	namespace:mpfr
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator-(const int b, const mpreal& a)$/;"	f	namespace:mpfr
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator-(const long double b, const mpreal& a)$/;"	f	namespace:mpfr
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator-(const long int b, const mpreal& a)$/;"	f	namespace:mpfr
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator-(const mpq_t b, const mpreal& a)$/;"	f	namespace:mpfr
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const char* b)$/;"	f	namespace:mpfr
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const mpq_t b)$/;"	f	namespace:mpfr
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const mpz_t b)$/;"	f	namespace:mpfr
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator-(const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator-(const mpz_t b, const mpreal& a)$/;"	f	namespace:mpfr
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator-(const unsigned int b, const mpreal& a)$/;"	f	namespace:mpfr
operator -	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator-(const unsigned long int b, const mpreal& a)$/;"	f	namespace:mpfr
operator --	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal mpreal::operator-- (int)$/;"	f	class:mpfr::mpreal
operator --	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator--() $/;"	f	class:mpfr::mpreal
operator -=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator-= (const mpreal& v)$/;"	f	class:mpfr::mpreal
operator -=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator-=(const double v)$/;"	f	class:mpfr::mpreal
operator -=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator-=(const int v)$/;"	f	class:mpfr::mpreal
operator -=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator-=(const long double v)$/;"	f	class:mpfr::mpreal
operator -=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator-=(const long int v)$/;"	f	class:mpfr::mpreal
operator -=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator-=(const mpq_t v)$/;"	f	class:mpfr::mpreal
operator -=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator-=(const mpz_t v)$/;"	f	class:mpfr::mpreal
operator -=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator-=(const unsigned int v)$/;"	f	class:mpfr::mpreal
operator -=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator-=(const unsigned long int v)$/;"	f	class:mpfr::mpreal
operator /	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator\/(const double  b, const mpreal& a)$/;"	f	namespace:mpfr
operator /	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator\/(const int b, const mpreal& a)$/;"	f	namespace:mpfr
operator /	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator\/(const long double b, const mpreal& a)$/;"	f	namespace:mpfr
operator /	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator\/(const long int b, const mpreal& a)$/;"	f	namespace:mpfr
operator /	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator\/(const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator /	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator\/(const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator /	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator\/(const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator /	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator\/(const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator /	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator\/(const mpreal& a, const mpq_t b)$/;"	f	namespace:mpfr
operator /	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator\/(const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator /	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator\/(const mpreal& a, const mpz_t b)$/;"	f	namespace:mpfr
operator /	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator\/(const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator /	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator\/(const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator /	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator\/(const unsigned int b, const mpreal& a)$/;"	f	namespace:mpfr
operator /	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator\/(const unsigned long int b, const mpreal& a)$/;"	f	namespace:mpfr
operator /=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator\/=(const double v)$/;"	f	class:mpfr::mpreal
operator /=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator\/=(const int v)$/;"	f	class:mpfr::mpreal
operator /=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator\/=(const long double v)$/;"	f	class:mpfr::mpreal
operator /=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator\/=(const long int v)$/;"	f	class:mpfr::mpreal
operator /=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator\/=(const mpq_t v)$/;"	f	class:mpfr::mpreal
operator /=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator\/=(const mpreal& v)$/;"	f	class:mpfr::mpreal
operator /=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator\/=(const mpz_t v)$/;"	f	class:mpfr::mpreal
operator /=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator\/=(const unsigned int v)$/;"	f	class:mpfr::mpreal
operator /=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator\/=(const unsigned long int v)$/;"	f	class:mpfr::mpreal
operator <	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <  (const double a,const mpreal& b)$/;"	f	namespace:mpfr
operator <	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <  (const int a,const mpreal& b)$/;"	f	namespace:mpfr
operator <	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <  (const long double a,const mpreal& b)$/;"	f	namespace:mpfr
operator <	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <  (const long int a,const mpreal& b)$/;"	f	namespace:mpfr
operator <	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <  (const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator <	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <  (const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator <	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <  (const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator <	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <  (const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator <	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <  (const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator <	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <  (const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator <	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <  (const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator <	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <  (const unsigned int a,const mpreal& b)$/;"	f	namespace:mpfr
operator <	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <  (const unsigned long int a,	const mpreal& b)$/;"	f	namespace:mpfr
operator <<	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator<<(const mpreal& v, const int k)$/;"	f	namespace:mpfr
operator <<	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator<<(const mpreal& v, const long int k)$/;"	f	namespace:mpfr
operator <<	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator<<(const mpreal& v, const unsigned int k)$/;"	f	namespace:mpfr
operator <<	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator<<(const mpreal& v, const unsigned long int k)$/;"	f	namespace:mpfr
operator <<=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator<<=(const int u)$/;"	f	class:mpfr::mpreal
operator <<=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator<<=(const long int u)$/;"	f	class:mpfr::mpreal
operator <<=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator<<=(const unsigned int u)$/;"	f	class:mpfr::mpreal
operator <<=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator<<=(const unsigned long int u)$/;"	f	class:mpfr::mpreal
operator <=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <=  (const double a,			const mpreal& b)$/;"	f	namespace:mpfr
operator <=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <=  (const int a,				const mpreal& b)$/;"	f	namespace:mpfr
operator <=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <=  (const long double a,		const mpreal& b)$/;"	f	namespace:mpfr
operator <=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <=  (const long int a,			const mpreal& b)$/;"	f	namespace:mpfr
operator <=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <=  (const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator <=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <=  (const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator <=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <=  (const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator <=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <=  (const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator <=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <=  (const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator <=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <=  (const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator <=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <=  (const unsigned int a,		const mpreal& b)$/;"	f	namespace:mpfr
operator <=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <=  (const unsigned long int a,const mpreal& b)$/;"	f	namespace:mpfr
operator <=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator <= (const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator=(const double v)				$/;"	f	class:mpfr::mpreal
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator=(const int v)$/;"	f	class:mpfr::mpreal
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator=(const long double v)		$/;"	f	class:mpfr::mpreal
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator=(const long int v)			$/;"	f	class:mpfr::mpreal
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator=(const mpf_t v)$/;"	f	class:mpfr::mpreal
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator=(const mpq_t v)$/;"	f	class:mpfr::mpreal
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator=(const mpreal& v)$/;"	f	class:mpfr::mpreal
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator=(const mpz_t v)$/;"	f	class:mpfr::mpreal
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator=(const unsigned int v)		$/;"	f	class:mpfr::mpreal
operator =	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator=(const unsigned long int v)	$/;"	f	class:mpfr::mpreal
operator ==	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator ==  (const double a,			const mpreal& b)$/;"	f	namespace:mpfr
operator ==	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator ==  (const int a,				const mpreal& b)$/;"	f	namespace:mpfr
operator ==	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator ==  (const long double a,		const mpreal& b)$/;"	f	namespace:mpfr
operator ==	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator ==  (const long int a,			const mpreal& b)$/;"	f	namespace:mpfr
operator ==	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator ==  (const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator ==	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator ==  (const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator ==	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator ==  (const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator ==	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator ==  (const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator ==	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator ==  (const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator ==	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator ==  (const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator ==	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator ==  (const unsigned int a,		const mpreal& b)$/;"	f	namespace:mpfr
operator ==	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator ==  (const unsigned long int a,const mpreal& b)$/;"	f	namespace:mpfr
operator ==	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator == (const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator >	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >  (const double a,			const mpreal& b)$/;"	f	namespace:mpfr
operator >	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >  (const int a,				const mpreal& b)$/;"	f	namespace:mpfr
operator >	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >  (const long double a,		const mpreal& b)$/;"	f	namespace:mpfr
operator >	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >  (const long int a,			const mpreal& b)$/;"	f	namespace:mpfr
operator >	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >  (const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator >	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >  (const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator >	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >  (const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator >	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >  (const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator >	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >  (const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator >	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >  (const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator >	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >  (const unsigned int a,		const mpreal& b)$/;"	f	namespace:mpfr
operator >	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >  (const unsigned long int a,	const mpreal& b)$/;"	f	namespace:mpfr
operator >	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator > (const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator >=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >=  (const double a,			const mpreal& b)$/;"	f	namespace:mpfr
operator >=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >=  (const int a,				const mpreal& b)$/;"	f	namespace:mpfr
operator >=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >=  (const long double a,		const mpreal& b)$/;"	f	namespace:mpfr
operator >=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >=  (const long int a,			const mpreal& b)$/;"	f	namespace:mpfr
operator >=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >=  (const mpreal& a, const double b)$/;"	f	namespace:mpfr
operator >=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >=  (const mpreal& a, const int b)$/;"	f	namespace:mpfr
operator >=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >=  (const mpreal& a, const long double b)$/;"	f	namespace:mpfr
operator >=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >=  (const mpreal& a, const long int b)$/;"	f	namespace:mpfr
operator >=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >=  (const mpreal& a, const unsigned int b)$/;"	f	namespace:mpfr
operator >=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >=  (const mpreal& a, const unsigned long int b)$/;"	f	namespace:mpfr
operator >=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >=  (const unsigned int a,		const mpreal& b)$/;"	f	namespace:mpfr
operator >=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >=  (const unsigned long int a,const mpreal& b)$/;"	f	namespace:mpfr
operator >=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline bool operator >= (const mpreal& a, const mpreal& b)$/;"	f	namespace:mpfr
operator >>	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator>>(const mpreal& v, const int k)$/;"	f	namespace:mpfr
operator >>	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator>>(const mpreal& v, const long int k)$/;"	f	namespace:mpfr
operator >>	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator>>(const mpreal& v, const unsigned int k)$/;"	f	namespace:mpfr
operator >>	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal operator>>(const mpreal& v, const unsigned long int k)$/;"	f	namespace:mpfr
operator >>=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator>>=(const int u)$/;"	f	class:mpfr::mpreal
operator >>=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator>>=(const long int u)$/;"	f	class:mpfr::mpreal
operator >>=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator>>=(const unsigned int u)$/;"	f	class:mpfr::mpreal
operator >>=	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal& mpreal::operator>>=(const unsigned long int u)$/;"	f	class:mpfr::mpreal
operator double	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal::operator double() const$/;"	f	class:mpfr::mpreal
operator float	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal::operator float() const$/;"	f	class:mpfr::mpreal
operator long	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal::operator long() const$/;"	f	class:mpfr::mpreal
operator long double	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal::operator long double() const$/;"	f	class:mpfr::mpreal
operator mpfr_ptr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal::operator mpfr_ptr()$/;"	f	class:mpfr::mpreal
operator unsigned int	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal::operator unsigned int() const$/;"	f	class:mpfr::mpreal
operator unsigned long	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline mpreal::operator unsigned long() const$/;"	f	class:mpfr::mpreal
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const double a, const double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const double a, const int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const double a, const long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const double a, const mpreal& b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const double a, const unsigned int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const double a, const unsigned long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const int a, const double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const int a, const int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const int a, const long double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const int a, const long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const int a, const mpreal& b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const int a, const unsigned int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const int a, const unsigned long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const long double a, const int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const long double a, const long double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const long double a, const long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const long double a, const mpreal& b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const long double a, const unsigned int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const long double a, const unsigned long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const long int a, const double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const long int a, const int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const long int a, const long double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const long int a, const long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const long int a, const mpreal& b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const long int a, const unsigned int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const long int a, const unsigned long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const mpreal& a, const double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const mpreal& a, const int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const mpreal& a, const long double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const mpreal& a, const long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const mpreal& a, const mpreal& b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const mpreal& a, const mpz_t b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const mpreal& a, const unsigned int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const mpreal& a, const unsigned long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const unsigned int a, const double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const unsigned int a, const int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const unsigned int a, const long double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const unsigned int a, const long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const unsigned int a, const mpreal& b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const unsigned int a, const unsigned int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const unsigned int a, const unsigned long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const unsigned long int a, const double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const unsigned long int a, const int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const unsigned long int a, const long double b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const unsigned long int a, const long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const unsigned long int a, const mpreal& b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const unsigned long int a, const unsigned int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
pow	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal pow(const unsigned long int a, const unsigned long int b, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
random2	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal random2 (mp_size_t size, mp_exp_t exp)$/;"	f	namespace:mpfr
rec_sqrt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal rec_sqrt(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
rint	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal rint(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
rint_ceil	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal rint_ceil (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
rint_floor	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal rint_floor(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
rint_round	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal rint_round(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
rint_trunc	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal rint_trunc(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
root	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal root(const mpreal& v, unsigned long int k, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
round	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal round(const mpreal& v)$/;"	f	namespace:mpfr
sec	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal sec(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sech	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal sech (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
set_default_base	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline void mpreal::set_default_base(int base)$/;"	f	class:mpfr::mpreal
set_default_prec	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline void mpreal::set_default_prec(mp_prec_t prec)$/;"	f	class:mpfr::mpreal
set_default_rnd	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline void mpreal::set_default_rnd(mp_rnd_t rnd_mode)$/;"	f	class:mpfr::mpreal
set_double_bits	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline void mpreal::set_double_bits(int dbits)$/;"	f	class:mpfr::mpreal
set_emax	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline int mpreal::set_emax (mp_exp_t exp)$/;"	f	class:mpfr::mpreal
set_emin	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline int mpreal::set_emin (mp_exp_t exp)$/;"	f	class:mpfr::mpreal
set_exp	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline int mpreal::set_exp (mp_exp_t e)$/;"	f	class:mpfr::mpreal
set_inf	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline void mpreal::set_inf(int sign) $/;"	f	class:mpfr::mpreal
set_nan	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline void mpreal::set_nan() $/;"	f	class:mpfr::mpreal
set_prec	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline void mpreal::set_prec(mp_prec_t prec, mp_rnd_t rnd_mode)$/;"	f	class:mpfr::mpreal
set_sign	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline void mpreal::set_sign(int sign, mp_rnd_t rnd_mode)$/;"	f	class:mpfr::mpreal
sgn	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline int sgn(const mpreal& v)$/;"	f	namespace:mpfr
sin	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal sin(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sin_cos	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline int sin_cos(mpreal& s, mpreal& c, const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sinh	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal sinh (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sinh_cosh	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline int sinh_cosh(mpreal& s, mpreal& c, const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sqr	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal sqr(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sqrt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal sqrt(const double v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sqrt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal sqrt(const int v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sqrt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal sqrt(const long double v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sqrt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal sqrt(const long int v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sqrt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal sqrt(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sqrt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal sqrt(const unsigned int v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
sqrt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal sqrt(const unsigned long int v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
std	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^namespace std$/;"	n
subnormalize	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline int mpreal::subnormalize (int t,mp_rnd_t rnd_mode)$/;"	f	class:mpfr::mpreal
swap	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^	inline void swap(mpfr::mpreal& x, mpfr::mpreal& y) $/;"	f	namespace:std
swap	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline void swap(mpreal& a, mpreal& b) $/;"	f	namespace:mpfr
tan	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal tan(const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
tanh	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal tanh (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
trunc	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal trunc(const mpreal& v)$/;"	f	namespace:mpfr
urandom	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal urandom (gmp_randstate_t& state,mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
urandomb	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal urandomb (gmp_randstate_t& state)$/;"	f	namespace:mpfr
why	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^	std::string why() { return "inexact conversion from floating point"; }$/;"	f	class:mpfr::conversion_overflow
zeta	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal.h	/^inline const mpreal zeta (const mpreal& v, mp_rnd_t rnd_mode)$/;"	f	namespace:mpfr
test_mpreal_support	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/mpreal_support.cpp	/^void test_mpreal_support()$/;"	f
VERIFY_MATRIX	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/openglsupport.cpp	35;"	d	file:
VERIFY_UNIFORM	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/openglsupport.cpp	46;"	d	file:
VERIFY_UNIFORMi	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/openglsupport.cpp	59;"	d	file:
createShader	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/openglsupport.cpp	/^GLint createShader(const char* vtx, const char* frg)$/;"	f
printInfoLog	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/openglsupport.cpp	/^void printInfoLog(GLuint objectID)$/;"	f
test_openglsupport	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/openglsupport.cpp	/^void test_openglsupport()$/;"	f
Eigen	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/polynomialsolver.cpp	/^namespace Eigen {$/;"	n	file:
aux_evalSolver	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/polynomialsolver.cpp	/^bool aux_evalSolver( const POLYNOMIAL& pols, SOLVER& psolve )$/;"	f
evalSolver	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/polynomialsolver.cpp	/^void evalSolver( const POLYNOMIAL& pols )$/;"	f
evalSolverSugarFunction	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/polynomialsolver.cpp	/^void evalSolverSugarFunction( const POLYNOMIAL& pols, const ROOTS& roots, const REAL_ROOTS& real_roots )$/;"	f
increment_if_fixed_size	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/polynomialsolver.cpp	/^struct increment_if_fixed_size$/;"	s	namespace:Eigen::internal	file:
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/polynomialsolver.cpp	/^namespace internal {$/;"	n	namespace:Eigen	file:
polynomialsolver	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/polynomialsolver.cpp	/^void polynomialsolver(int deg)$/;"	f
ret	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/polynomialsolver.cpp	/^    ret = (Size == Dynamic) ? Dynamic : Size+1$/;"	e	enum:Eigen::internal::increment_if_fixed_size::<anonymous>	file:
test_polynomialsolver	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/polynomialsolver.cpp	/^void test_polynomialsolver()$/;"	f
CauchyBounds	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/polynomialutils.cpp	/^void CauchyBounds(int deg)$/;"	f
CauchyBounds_scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/polynomialutils.cpp	/^template<typename _Scalar> void CauchyBounds_scalar()$/;"	f
Eigen	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/polynomialutils.cpp	/^namespace Eigen {$/;"	n	file:
increment_if_fixed_size	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/polynomialutils.cpp	/^struct increment_if_fixed_size$/;"	s	namespace:Eigen::internal	file:
internal	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/polynomialutils.cpp	/^namespace internal {$/;"	n	namespace:Eigen	file:
realRoots_to_monicPolynomial_scalar	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/polynomialutils.cpp	/^template<typename _Scalar> void realRoots_to_monicPolynomial_scalar()$/;"	f
realRoots_to_monicPolynomial_test	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/polynomialutils.cpp	/^void realRoots_to_monicPolynomial_test(int deg)$/;"	f
ret	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/polynomialutils.cpp	/^    ret = (Size == Dynamic) ? Dynamic : Size+1$/;"	e	enum:Eigen::internal::increment_if_fixed_size::<anonymous>	file:
test_polynomialutils	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/polynomialutils.cpp	/^void test_polynomialutils()$/;"	f
sparse_extra	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/sparse_extra.cpp	/^template<typename SparseMatrixType> void sparse_extra(const SparseMatrixType& ref)$/;"	f
test_random_setter	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/sparse_extra.cpp	/^bool test_random_setter(DynamicSparseMatrix<T>& sm, const DenseType& ref, const std::vector<Vector2i>& nonzeroCoords)$/;"	f
test_random_setter	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/sparse_extra.cpp	/^bool test_random_setter(SparseMatrix<Scalar,Options>& sm, const DenseType& ref, const std::vector<Vector2i>& nonzeroCoords)$/;"	f
test_sparse_extra	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/sparse_extra.cpp	/^void test_sparse_extra()$/;"	f
sparse_ldlt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/sparse_ldlt.cpp	/^template<typename Scalar> void sparse_ldlt(int rows, int cols)$/;"	f
test_sparse_ldlt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/sparse_ldlt.cpp	/^void test_sparse_ldlt()$/;"	f
sparse_llt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/sparse_llt.cpp	/^template<typename Scalar> void sparse_llt(int rows, int cols)$/;"	f
test_sparse_llt	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/sparse_llt.cpp	/^void test_sparse_llt()$/;"	f
sparse_lu	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/sparse_lu.cpp	/^template<typename Scalar> void sparse_lu(int rows, int cols)$/;"	f
test_sparse_lu	tags/before-github-sync/EXTERNAL/eigen3/unsupported/test/sparse_lu.cpp	/^void test_sparse_lu()$/;"	f
DlWrapper	tags/before-github-sync/g2o/apps/g2o_cli/dl_wrapper.cpp	/^DlWrapper::DlWrapper()$/;"	f	class:g2o::DlWrapper
SO_EXT	tags/before-github-sync/g2o/apps/g2o_cli/dl_wrapper.cpp	31;"	d	file:
SO_EXT	tags/before-github-sync/g2o/apps/g2o_cli/dl_wrapper.cpp	34;"	d	file:
SO_EXT	tags/before-github-sync/g2o/apps/g2o_cli/dl_wrapper.cpp	37;"	d	file:
SO_EXT_LEN	tags/before-github-sync/g2o/apps/g2o_cli/dl_wrapper.cpp	32;"	d	file:
SO_EXT_LEN	tags/before-github-sync/g2o/apps/g2o_cli/dl_wrapper.cpp	35;"	d	file:
SO_EXT_LEN	tags/before-github-sync/g2o/apps/g2o_cli/dl_wrapper.cpp	38;"	d	file:
clear	tags/before-github-sync/g2o/apps/g2o_cli/dl_wrapper.cpp	/^void DlWrapper::clear()$/;"	f	class:g2o::DlWrapper
g2o	tags/before-github-sync/g2o/apps/g2o_cli/dl_wrapper.cpp	/^namespace g2o {$/;"	n	file:
openLibraries	tags/before-github-sync/g2o/apps/g2o_cli/dl_wrapper.cpp	/^int DlWrapper::openLibraries(const std::string& directory, const std::string& pattern)$/;"	f	class:g2o::DlWrapper
openLibrary	tags/before-github-sync/g2o/apps/g2o_cli/dl_wrapper.cpp	/^bool DlWrapper::openLibrary(const std::string& filename)$/;"	f	class:g2o::DlWrapper
~DlWrapper	tags/before-github-sync/g2o/apps/g2o_cli/dl_wrapper.cpp	/^DlWrapper::~DlWrapper()$/;"	f	class:g2o::DlWrapper
DlWrapper	tags/before-github-sync/g2o/apps/g2o_cli/dl_wrapper.h	/^  class DlWrapper$/;"	c	namespace:g2o
G2O_DL_WRAPPER_H	tags/before-github-sync/g2o/apps/g2o_cli/dl_wrapper.h	18;"	d
_filenames	tags/before-github-sync/g2o/apps/g2o_cli/dl_wrapper.h	/^      std::vector<std::string> _filenames;$/;"	m	class:g2o::DlWrapper
_handles	tags/before-github-sync/g2o/apps/g2o_cli/dl_wrapper.h	/^      std::vector<HMODULE> _handles;$/;"	m	class:g2o::DlWrapper
_handles	tags/before-github-sync/g2o/apps/g2o_cli/dl_wrapper.h	/^      std::vector<void*> _handles;$/;"	m	class:g2o::DlWrapper
g2o	tags/before-github-sync/g2o/apps/g2o_cli/dl_wrapper.h	/^namespace g2o {$/;"	n
IncrementalEdgesCompare	tags/before-github-sync/g2o/apps/g2o_cli/g2o.cpp	/^struct IncrementalEdgesCompare {$/;"	s	file:
hasToStop	tags/before-github-sync/g2o/apps/g2o_cli/g2o.cpp	/^static bool hasToStop=false;$/;"	v	file:
main	tags/before-github-sync/g2o/apps/g2o_cli/g2o.cpp	/^int main(int argc, char** argv)$/;"	f
operator ()	tags/before-github-sync/g2o/apps/g2o_cli/g2o.cpp	/^  bool operator()(SparseOptimizer::Edge* const & e1, SparseOptimizer::Edge* const & e2)$/;"	f	struct:IncrementalEdgesCompare
sigquit_handler	tags/before-github-sync/g2o/apps/g2o_cli/g2o.cpp	/^void sigquit_handler(int sig)$/;"	f
str2method	tags/before-github-sync/g2o/apps/g2o_cli/g2o.cpp	/^SparseOptimizer::Method str2method(const std::string& strMethod_){$/;"	f
G2O_LIBRARY_POSTFIX	tags/before-github-sync/g2o/apps/g2o_cli/g2o_common.cpp	62;"	d	file:
PATH_SEPARATOR	tags/before-github-sync/g2o/apps/g2o_cli/g2o_common.cpp	43;"	d	file:
PATH_SEPARATOR	tags/before-github-sync/g2o/apps/g2o_cli/g2o_common.cpp	45;"	d	file:
SOLVERS_PATTERN	tags/before-github-sync/g2o/apps/g2o_cli/g2o_common.cpp	/^static const string SOLVERS_PATTERN=string("*_solver_*")+string(G2O_LIBRARY_POSTFIX)+string(".")+string(SO_EXT);$/;"	v	file:
SO_EXT	tags/before-github-sync/g2o/apps/g2o_cli/g2o_common.cpp	32;"	d	file:
SO_EXT	tags/before-github-sync/g2o/apps/g2o_cli/g2o_common.cpp	34;"	d	file:
SO_EXT	tags/before-github-sync/g2o/apps/g2o_cli/g2o_common.cpp	36;"	d	file:
TYPES_PATTERN	tags/before-github-sync/g2o/apps/g2o_cli/g2o_common.cpp	/^static const string TYPES_PATTERN=string("*_types_*")+string(G2O_LIBRARY_POSTFIX)+string(".")+string(SO_EXT);$/;"	v	file:
fakeFunctionForWindows	tags/before-github-sync/g2o/apps/g2o_cli/g2o_common.cpp	/^static void fakeFunctionForWindows() {}$/;"	f	file:
findArguments	tags/before-github-sync/g2o/apps/g2o_cli/g2o_common.cpp	/^void findArguments(const std::string& option, vector<string>& args, int argc, char** argv)$/;"	f	namespace:g2o
g2o	tags/before-github-sync/g2o/apps/g2o_cli/g2o_common.cpp	/^namespace g2o {$/;"	n	file:
getMyInstance	tags/before-github-sync/g2o/apps/g2o_cli/g2o_common.cpp	/^HMODULE getMyInstance()$/;"	f
info	tags/before-github-sync/g2o/apps/g2o_cli/g2o_common.cpp	/^static Dl_info info;$/;"	v	file:
loadStandardSolver	tags/before-github-sync/g2o/apps/g2o_cli/g2o_common.cpp	/^void loadStandardSolver(DlWrapper& dlSolverWrapper, int argc, char** argv)$/;"	f	namespace:g2o
loadStandardTypes	tags/before-github-sync/g2o/apps/g2o_cli/g2o_common.cpp	/^void loadStandardTypes(DlWrapper& dlTypesWrapper, int argc, char** argv)$/;"	f	namespace:g2o
G2O_G2O_COMMON_H	tags/before-github-sync/g2o/apps/g2o_cli/g2o_common.h	18;"	d
g2o	tags/before-github-sync/g2o/apps/g2o_cli/g2o_common.h	/^namespace g2o {$/;"	n
dumpEdges	tags/before-github-sync/g2o/apps/g2o_cli/output_helper.cpp	/^bool dumpEdges(std::ostream& os, const OptimizableGraph& optimizer)$/;"	f	namespace:g2o
edgeAllVertsSameDim	tags/before-github-sync/g2o/apps/g2o_cli/output_helper.cpp	/^bool edgeAllVertsSameDim(OptimizableGraph::Edge* e, int dim)$/;"	f	namespace:g2o
g2o	tags/before-github-sync/g2o/apps/g2o_cli/output_helper.cpp	/^namespace g2o {$/;"	n	file:
saveGnuplot	tags/before-github-sync/g2o/apps/g2o_cli/output_helper.cpp	/^bool saveGnuplot(const std::string& gnudump, const HyperGraph::VertexSet& vertices, const HyperGraph::EdgeSet& edges)$/;"	f	namespace:g2o
saveGnuplot	tags/before-github-sync/g2o/apps/g2o_cli/output_helper.cpp	/^bool saveGnuplot(const std::string& gnudump, const OptimizableGraph& optimizer)$/;"	f	namespace:g2o
G2O_G2O_OUTPUT_HELPER_H	tags/before-github-sync/g2o/apps/g2o_cli/output_helper.h	18;"	d
g2o	tags/before-github-sync/g2o/apps/g2o_cli/output_helper.h	/^namespace g2o {$/;"	n
hasToStop	tags/before-github-sync/g2o/apps/g2o_incremental/g2o_incremental.cpp	/^static bool hasToStop=false;$/;"	v	file:
main	tags/before-github-sync/g2o/apps/g2o_incremental/g2o_incremental.cpp	/^int main(int argc, char** argv)$/;"	f
sigquit_handler	tags/before-github-sync/g2o/apps/g2o_incremental/g2o_incremental.cpp	/^void sigquit_handler(int sig)$/;"	f
ALLOC_CHOLMOD	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.cpp	27;"	d	file:
DIM_TO_SOLVER	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.cpp	25;"	d	file:
SparseOptimizerIncremental	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^  SparseOptimizerIncremental::SparseOptimizerIncremental()$/;"	f	class:g2o::SparseOptimizerIncremental
VertexBackup	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^    struct VertexBackup$/;"	s	namespace:g2o::<anonymous>	file:
computeCholeskyUpdate	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^  bool SparseOptimizerIncremental::computeCholeskyUpdate()$/;"	f	class:g2o::SparseOptimizerIncremental
createSolver	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^  static Solver* createSolver(SparseOptimizer* opt, const std::string& solverName)$/;"	f	namespace:g2o	file:
g2o	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^namespace g2o {$/;"	n	file:
hessianData	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^      double* hessianData;$/;"	m	struct:g2o::<anonymous>::VertexBackup	file:
initSolver	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^  bool SparseOptimizerIncremental::initSolver(int dimension, int batchEveryN)$/;"	f	class:g2o::SparseOptimizerIncremental
operator <	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^      bool operator<(const VertexBackup& other) const$/;"	f	struct:g2o::<anonymous>::VertexBackup
optimize	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^  int SparseOptimizerIncremental::optimize(int iterations, bool online)$/;"	f	class:g2o::SparseOptimizerIncremental
tempIndex	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^      int tempIndex;$/;"	m	struct:g2o::<anonymous>::VertexBackup	file:
updateInitialization	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^  bool SparseOptimizerIncremental::updateInitialization(HyperGraph::VertexSet& vset, HyperGraph::EdgeSet& eset)$/;"	f	class:g2o::SparseOptimizerIncremental
vertex	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^      OptimizableGraph::Vertex* vertex;$/;"	m	struct:g2o::<anonymous>::VertexBackup	file:
~SparseOptimizerIncremental	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^  SparseOptimizerIncremental::~SparseOptimizerIncremental()$/;"	f	class:g2o::SparseOptimizerIncremental
G2O_GRAPH_OPTIMIZER_SPARSE_INCREMENTAL_H	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.h	18;"	d
SparseOptimizerIncremental	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.h	/^  class SparseOptimizerIncremental : public SparseOptimizerOnline$/;"	c	namespace:g2o
_L	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      cholmod_factor* _L;$/;"	m	class:g2o::SparseOptimizerIncremental
_cholmodCommon	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      cholmod_common _cholmodCommon;$/;"	m	class:g2o::SparseOptimizerIncremental
_cholmodFactor	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      cholmod_factor* _cholmodFactor;$/;"	m	class:g2o::SparseOptimizerIncremental
_cholmodSparse	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      CholmodExt* _cholmodSparse;$/;"	m	class:g2o::SparseOptimizerIncremental
_cmember	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      Eigen::VectorXi _cmember;$/;"	m	class:g2o::SparseOptimizerIncremental
_perm	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      Eigen::VectorXi _perm;$/;"	m	class:g2o::SparseOptimizerIncremental
_permutedUpdate	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      cholmod_triplet* _permutedUpdate;$/;"	m	class:g2o::SparseOptimizerIncremental
_solverInterface	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      LinearSolverCholmodOnlineInterface* _solverInterface;$/;"	m	class:g2o::SparseOptimizerIncremental
_touchedVertices	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      HyperGraph::VertexSet _touchedVertices;$/;"	m	class:g2o::SparseOptimizerIncremental
_updateMat	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      SparseBlockMatrix<MatrixXd> _updateMat;$/;"	m	class:g2o::SparseOptimizerIncremental
g2o	tags/before-github-sync/g2o/apps/g2o_incremental/graph_optimizer_sparse_incremental.h	/^namespace g2o {$/;"	n
G2O_LINEAR_SOLVER_CHOLMOD_ONLINE	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	18;"	d
L	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    cholmod_factor* L() const { return _cholmodFactor;}$/;"	f	class:g2o::LinearSolverCholmodOnline
LinearSolverCholmodOnline	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    LinearSolverCholmodOnline() :$/;"	f	class:g2o::LinearSolverCholmodOnline
LinearSolverCholmodOnline	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^class LinearSolverCholmodOnline : public LinearSolver<MatrixType>, public LinearSolverCholmodOnlineInterface$/;"	c	namespace:g2o
LinearSolverCholmodOnlineInterface	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    LinearSolverCholmodOnlineInterface() : cmember(0), batchEveryN(100) {}$/;"	f	class:g2o::LinearSolverCholmodOnlineInterface
LinearSolverCholmodOnlineInterface	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^class LinearSolverCholmodOnlineInterface$/;"	c	namespace:g2o
_blockOrdering	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    bool _blockOrdering;$/;"	m	class:g2o::LinearSolverCholmodOnline
_blockPermutation	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    VectorXi _scalarPermutation, _blockPermutation;$/;"	m	class:g2o::LinearSolverCholmodOnline
_cholmodCommon	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    cholmod_common _cholmodCommon;$/;"	m	class:g2o::LinearSolverCholmodOnline
_cholmodFactor	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    cholmod_factor* _cholmodFactor;$/;"	m	class:g2o::LinearSolverCholmodOnline
_cholmodSparse	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    CholmodExt* _cholmodSparse;$/;"	m	class:g2o::LinearSolverCholmodOnline
_matrixStructure	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    MatrixStructure _matrixStructure;$/;"	m	class:g2o::LinearSolverCholmodOnline
_scalarPermutation	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    VectorXi _scalarPermutation, _blockPermutation;$/;"	m	class:g2o::LinearSolverCholmodOnline
batchEveryN	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    int batchEveryN;$/;"	m	class:g2o::LinearSolverCholmodOnlineInterface
blockOrdering	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    bool blockOrdering() const { return true;}$/;"	f	class:g2o::LinearSolverCholmodOnline
choleskyUpdate	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    int choleskyUpdate(cholmod_sparse* update)$/;"	f	class:g2o::LinearSolverCholmodOnline
cmember	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    VectorXi* cmember;$/;"	m	class:g2o::LinearSolverCholmodOnlineInterface
computeSymbolicDecomposition	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    void computeSymbolicDecomposition(const SparseBlockMatrix<MatrixType>& A)$/;"	f	class:g2o::LinearSolverCholmodOnline
fillCholmodExt	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    void fillCholmodExt(const SparseBlockMatrix<MatrixType>& A, bool onlyValues)$/;"	f	class:g2o::LinearSolverCholmodOnline
g2o	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^namespace g2o {$/;"	n
init	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    virtual bool init()$/;"	f	class:g2o::LinearSolverCholmodOnline
solve	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    bool solve(const SparseBlockMatrix<MatrixType>& A, double* x, double* b)$/;"	f	class:g2o::LinearSolverCholmodOnline
solve	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    bool solve(double* x, double* b)$/;"	f	class:g2o::LinearSolverCholmodOnline
~LinearSolverCholmodOnline	tags/before-github-sync/g2o/apps/g2o_incremental/linear_solver_cholmod_online.h	/^    virtual ~LinearSolverCholmodOnline()$/;"	f	class:g2o::LinearSolverCholmodOnline
hasToStop	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_online.cpp	/^static bool hasToStop=false;$/;"	v	file:
main	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_online.cpp	/^int main(int argc, char** argv)$/;"	f
sigquit_handler	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_online.cpp	/^void sigquit_handler(int sig)$/;"	f
G2oSlamInterface	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.cpp	/^G2oSlamInterface::G2oSlamInterface(SparseOptimizerOnline* optimizer) :$/;"	f	class:g2o::G2oSlamInterface
addEdge	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.cpp	/^bool G2oSlamInterface::addEdge(const std::string& tag, int id, int dimension, int v1Id, int v2Id, const std::vector<double>& measurement, const std::vector<double>& information)$/;"	f	class:g2o::G2oSlamInterface
addNode	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.cpp	/^bool G2oSlamInterface::addNode(const std::string& tag, int id, int dimension, const std::vector<double>& values)$/;"	f	class:g2o::G2oSlamInterface
addVertex	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.cpp	/^OptimizableGraph::Vertex* G2oSlamInterface::addVertex(int dimension, int id)$/;"	f	class:g2o::G2oSlamInterface
euler_to_quat	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.cpp	/^Eigen::Quaterniond euler_to_quat(double yaw, double pitch, double roll)$/;"	f	namespace:g2o
fixNode	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.cpp	/^bool G2oSlamInterface::fixNode(const std::vector<int>& nodes)$/;"	f	class:g2o::G2oSlamInterface
g2o	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.cpp	/^namespace g2o {$/;"	n	file:
jac_quat3_euler3	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.cpp	/^void jac_quat3_euler3(Eigen::Matrix<double, 6, 6>& J, const SE3Quat& t)$/;"	f	namespace:g2o
printVertex	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.cpp	/^bool G2oSlamInterface::printVertex(OptimizableGraph::Vertex* v)$/;"	f	class:g2o::G2oSlamInterface
quat_to_euler	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.cpp	/^void quat_to_euler(Eigen::Quaterniond q, double& yaw, double& pitch, double& roll)$/;"	f	namespace:g2o
queryState	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.cpp	/^bool G2oSlamInterface::queryState(const std::vector<int>& nodes)$/;"	f	class:g2o::G2oSlamInterface
setUpdateGraphEachN	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.cpp	/^void G2oSlamInterface::setUpdateGraphEachN(int n)$/;"	f	class:g2o::G2oSlamInterface
solveState	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.cpp	/^bool G2oSlamInterface::solveState()$/;"	f	class:g2o::G2oSlamInterface
G2O_G2O_SLAM_INTERFACE_H	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.h	18;"	d
G2oSlamInterface	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.h	/^  class G2oSlamInterface : public SlamParser::AbstractSlamInterface$/;"	c	namespace:g2o
_batchEveryN	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.h	/^      int _batchEveryN;$/;"	m	class:g2o::G2oSlamInterface
_edgesAdded	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.h	/^      HyperGraph::EdgeSet _edgesAdded;$/;"	m	class:g2o::G2oSlamInterface
_firstOptimization	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.h	/^      bool _firstOptimization;$/;"	m	class:g2o::G2oSlamInterface
_incIterations	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.h	/^      int _incIterations;$/;"	m	class:g2o::G2oSlamInterface
_initSolverDone	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.h	/^      bool _initSolverDone;$/;"	m	class:g2o::G2oSlamInterface
_lastBatchStep	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.h	/^      int _lastBatchStep;$/;"	m	class:g2o::G2oSlamInterface
_nodesAdded	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.h	/^      int _nodesAdded;$/;"	m	class:g2o::G2oSlamInterface
_optimizer	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.h	/^      SparseOptimizerOnline* _optimizer;$/;"	m	class:g2o::G2oSlamInterface
_updateGraphEachN	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.h	/^      int _updateGraphEachN;$/;"	m	class:g2o::G2oSlamInterface
_verticesAdded	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.h	/^      HyperGraph::VertexSet _verticesAdded;$/;"	m	class:g2o::G2oSlamInterface
g2o	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.h	/^namespace g2o {$/;"	n
updatedGraphEachN	tags/before-github-sync/g2o/apps/g2o_interactive/g2o_slam_interface.h	/^      int updatedGraphEachN() const { return _updateGraphEachN;}$/;"	f	class:g2o::G2oSlamInterface
IncrementalEdgesCompare	tags/before-github-sync/g2o/apps/g2o_interactive/generate_commands.cpp	/^struct IncrementalEdgesCompare {$/;"	s	file:
hasToStop	tags/before-github-sync/g2o/apps/g2o_interactive/generate_commands.cpp	/^static bool hasToStop=false;$/;"	v	file:
main	tags/before-github-sync/g2o/apps/g2o_interactive/generate_commands.cpp	/^int main(int argc, char** argv)$/;"	f
operator ()	tags/before-github-sync/g2o/apps/g2o_interactive/generate_commands.cpp	/^  bool operator()(SparseOptimizer::Edge* const & e1, SparseOptimizer::Edge* const & e2)$/;"	f	struct:IncrementalEdgesCompare
sigquit_handler	tags/before-github-sync/g2o/apps/g2o_interactive/generate_commands.cpp	/^void sigquit_handler(int sig)$/;"	f
str2method	tags/before-github-sync/g2o/apps/g2o_interactive/generate_commands.cpp	/^SparseOptimizer::Method str2method(const std::string& strMethod_){$/;"	f
ALLOC_PCG	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.cpp	35;"	d	file:
DIM_TO_SOLVER	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.cpp	33;"	d	file:
SparseOptimizerOnline	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.cpp	/^SparseOptimizerOnline::SparseOptimizerOnline(bool pcg) :$/;"	f	class:g2o::SparseOptimizerOnline
createSolver	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.cpp	/^static Solver* createSolver(SparseOptimizer* opt, const std::string& solverName)$/;"	f	namespace:g2o	file:
g2o	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.cpp	/^namespace g2o {$/;"	n	file:
gnuplotVisualization	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.cpp	/^void SparseOptimizerOnline::gnuplotVisualization()$/;"	f	class:g2o::SparseOptimizerOnline
initSolver	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.cpp	/^bool SparseOptimizerOnline::initSolver(int dimension, int \/*batchEveryN*\/)$/;"	f	class:g2o::SparseOptimizerOnline
optimize	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.cpp	/^int SparseOptimizerOnline::optimize(int iterations, bool online)$/;"	f	class:g2o::SparseOptimizerOnline
update	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.cpp	/^void SparseOptimizerOnline::update(double* update)$/;"	f	class:g2o::SparseOptimizerOnline
updateInitialization	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.cpp	/^bool SparseOptimizerOnline::updateInitialization(HyperGraph::VertexSet& vset, HyperGraph::EdgeSet& eset)$/;"	f	class:g2o::SparseOptimizerOnline
~SparseOptimizerOnline	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.cpp	/^SparseOptimizerOnline::~SparseOptimizerOnline()$/;"	f	class:g2o::SparseOptimizerOnline
G2O_GRAPH_OPTIMIZER_SPARSE_ONLINE_H	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.h	18;"	d
SparseOptimizerOnline	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.h	/^  class SparseOptimizerOnline : public SparseOptimizer$/;"	c	namespace:g2o
_gnuplot	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.h	/^      FILE* _gnuplot;$/;"	m	class:g2o::SparseOptimizerOnline
_usePcg	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.h	/^      bool _usePcg;$/;"	m	class:g2o::SparseOptimizerOnline
batchStep	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.h	/^      bool batchStep;$/;"	m	class:g2o::SparseOptimizerOnline
g2o	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.h	/^namespace g2o {$/;"	n
newEdges	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.h	/^      HyperGraph::EdgeSet* newEdges;$/;"	m	class:g2o::SparseOptimizerOnline
slamDimension	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.h	/^      int slamDimension;$/;"	m	class:g2o::SparseOptimizerOnline
vizWithGnuplot	tags/before-github-sync/g2o/apps/g2o_interactive/graph_optimizer_sparse_online.h	/^      bool vizWithGnuplot;$/;"	m	class:g2o::SparseOptimizerOnline
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam2d_online.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::OnlineEdgeSE2
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam2d_online.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::OnlineVertexSE2
G2O_TYPES_SLAM2D_ONLINE_H	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam2d_online.h	18;"	d
OnlineEdgeSE2	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam2d_online.h	/^      OnlineEdgeSE2() : EdgeSE2() {}$/;"	f	class:g2o::OnlineEdgeSE2
OnlineEdgeSE2	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam2d_online.h	/^  class OnlineEdgeSE2 : public EdgeSE2$/;"	c	namespace:g2o
OnlineVertexSE2	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam2d_online.h	/^      OnlineVertexSE2() : VertexSE2() {}$/;"	f	class:g2o::OnlineVertexSE2
OnlineVertexSE2	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam2d_online.h	/^  class OnlineVertexSE2 : public VertexSE2$/;"	c	namespace:g2o
g2o	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam2d_online.h	/^namespace g2o {$/;"	n
initialEstimate	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam2d_online.h	/^      void initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/* to *\/)$/;"	f	class:g2o::OnlineEdgeSE2
oplus	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam2d_online.h	/^      virtual void oplus(double* update)$/;"	f	class:g2o::OnlineVertexSE2
oplusUpdatedEstimate	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam2d_online.h	/^      void oplusUpdatedEstimate(double* update)$/;"	f	class:g2o::OnlineVertexSE2
updatedEstimate	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam2d_online.h	/^      VertexSE2::EstimateType updatedEstimate;$/;"	m	class:g2o::OnlineVertexSE2
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam3d_online.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::OnlineEdgeSE3
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam3d_online.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::OnlineVertexSE3
G2O_TYPES_SLAM3D_ONLINE_H	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam3d_online.h	18;"	d
OnlineEdgeSE3	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam3d_online.h	/^      OnlineEdgeSE3() : EdgeSE3() {}$/;"	f	class:g2o::OnlineEdgeSE3
OnlineEdgeSE3	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam3d_online.h	/^  class OnlineEdgeSE3 : public EdgeSE3$/;"	c	namespace:g2o
OnlineVertexSE3	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam3d_online.h	/^      OnlineVertexSE3() : VertexSE3() {}$/;"	f	class:g2o::OnlineVertexSE3
OnlineVertexSE3	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam3d_online.h	/^  class OnlineVertexSE3 : public VertexSE3$/;"	c	namespace:g2o
g2o	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam3d_online.h	/^namespace g2o {$/;"	n
initialEstimate	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam3d_online.h	/^      void initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/* to *\/)$/;"	f	class:g2o::OnlineEdgeSE3
oplus	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam3d_online.h	/^      virtual void oplus(double* update)$/;"	f	class:g2o::OnlineVertexSE3
oplusUpdatedEstimate	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam3d_online.h	/^      void oplusUpdatedEstimate(double* update)$/;"	f	class:g2o::OnlineVertexSE3
updatedEstimate	tags/before-github-sync/g2o/apps/g2o_interactive/types_slam3d_online.h	/^      VertexSE3::EstimateType updatedEstimate;$/;"	m	class:g2o::OnlineVertexSE3
G2oQGLViewer	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^G2oQGLViewer::G2oQGLViewer(QWidget* parent, const QGLWidget* shareWidget, Qt::WFlags flags) :$/;"	f	class:g2o::G2oQGLViewer
StandardCamera	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^      StandardCamera() : _standard(true) {};$/;"	f	class:g2o::<anonymous>::StandardCamera
StandardCamera	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^  class StandardCamera : public qglviewer::Camera$/;"	c	namespace:g2o::<anonymous>	file:
_standard	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^      bool _standard;$/;"	m	class:g2o::<anonymous>::StandardCamera	file:
draw	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^void G2oQGLViewer::draw()$/;"	f	class:g2o::G2oQGLViewer
g2o	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^namespace g2o {$/;"	n	file:
init	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^void G2oQGLViewer::init()$/;"	f	class:g2o::G2oQGLViewer
setUpdateDisplay	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^void G2oQGLViewer::setUpdateDisplay(bool updateDisplay)$/;"	f	class:g2o::G2oQGLViewer
standard	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^      bool& standard() {return _standard;}$/;"	f	class:g2o::<anonymous>::StandardCamera
standard	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^      const bool& standard() const {return _standard;}$/;"	f	class:g2o::<anonymous>::StandardCamera
zFar	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^      float zFar() const$/;"	f	class:g2o::<anonymous>::StandardCamera
zNear	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^      float zNear() const {$/;"	f	class:g2o::<anonymous>::StandardCamera
~G2oQGLViewer	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^G2oQGLViewer::~G2oQGLViewer()$/;"	f	class:g2o::G2oQGLViewer
G2O_G2O_QGL_GRAPH_VIEWER_H	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.h	20;"	d
G2oQGLViewer	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.h	/^  class G2oQGLViewer : public QGLViewer$/;"	c	namespace:g2o
_drawActions	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.h	/^      HyperGraphElementAction* _drawActions;$/;"	m	class:g2o::G2oQGLViewer
_drawList	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.h	/^      GLuint _drawList;$/;"	m	class:g2o::G2oQGLViewer
_updateDisplay	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.h	/^      bool _updateDisplay;$/;"	m	class:g2o::G2oQGLViewer
g2o	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.h	/^namespace g2o {$/;"	n
graph	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.h	/^      SparseOptimizer* graph;$/;"	m	class:g2o::G2oQGLViewer
updateDisplay	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_qglviewer.h	/^      bool updateDisplay() const { return _updateDisplay;}$/;"	f	class:g2o::G2oQGLViewer
main	tags/before-github-sync/g2o/apps/g2o_viewer/g2o_viewer.cpp	/^int main(int argc, char** argv)$/;"	f
GuiHyperGraphAction	tags/before-github-sync/g2o/apps/g2o_viewer/gui_hyper_graph_action.cpp	/^GuiHyperGraphAction::GuiHyperGraphAction() :$/;"	f	class:g2o::GuiHyperGraphAction
g2o	tags/before-github-sync/g2o/apps/g2o_viewer/gui_hyper_graph_action.cpp	/^namespace g2o {$/;"	n	file:
operator ()	tags/before-github-sync/g2o/apps/g2o_viewer/gui_hyper_graph_action.cpp	/^HyperGraphAction* GuiHyperGraphAction::operator()(const HyperGraph* graph, Parameters* parameters)$/;"	f	class:g2o::GuiHyperGraphAction
~GuiHyperGraphAction	tags/before-github-sync/g2o/apps/g2o_viewer/gui_hyper_graph_action.cpp	/^GuiHyperGraphAction::~GuiHyperGraphAction()$/;"	f	class:g2o::GuiHyperGraphAction
G2O_GUI_HYPER_GRAPH_ACTION_H	tags/before-github-sync/g2o/apps/g2o_viewer/gui_hyper_graph_action.h	20;"	d
GuiHyperGraphAction	tags/before-github-sync/g2o/apps/g2o_viewer/gui_hyper_graph_action.h	/^  class GuiHyperGraphAction : public HyperGraphAction$/;"	c	namespace:g2o
dumpScreenshots	tags/before-github-sync/g2o/apps/g2o_viewer/gui_hyper_graph_action.h	/^      bool dumpScreenshots;$/;"	m	class:g2o::GuiHyperGraphAction
g2o	tags/before-github-sync/g2o/apps/g2o_viewer/gui_hyper_graph_action.h	/^namespace g2o {$/;"	n
viewer	tags/before-github-sync/g2o/apps/g2o_viewer/gui_hyper_graph_action.h	/^      G2oQGLViewer* viewer;   \/\/\/< the viewer which visualizes the graph$/;"	m	class:g2o::GuiHyperGraphAction
MainWindow	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.cpp	/^MainWindow::MainWindow(QWidget * parent, Qt::WindowFlags flags) :$/;"	f	class:MainWindow
allocateSolver	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.cpp	/^bool MainWindow::allocateSolver(bool& allocatedNewSolver)$/;"	f	class:MainWindow
fixGraph	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::fixGraph()$/;"	f	class:MainWindow
load	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.cpp	/^bool MainWindow::load(const QString& filename)$/;"	f	class:MainWindow
loadFromFile	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.cpp	/^bool MainWindow::loadFromFile(const QString& filename)$/;"	f	class:MainWindow
on_actionDefault_Background_triggered	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_actionDefault_Background_triggered(bool)$/;"	f	class:MainWindow
on_actionLoad_triggered	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_actionLoad_triggered(bool)$/;"	f	class:MainWindow
on_actionQuit_triggered	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_actionQuit_triggered(bool)$/;"	f	class:MainWindow
on_actionSave_Screenshot_triggered	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_actionSave_Screenshot_triggered(bool)$/;"	f	class:MainWindow
on_actionSave_triggered	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_actionSave_triggered(bool)$/;"	f	class:MainWindow
on_actionWhite_Background_triggered	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_actionWhite_Background_triggered(bool)$/;"	f	class:MainWindow
on_btnForceStop_clicked	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_btnForceStop_clicked()$/;"	f	class:MainWindow
on_btnInitialGuess_clicked	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_btnInitialGuess_clicked()$/;"	f	class:MainWindow
on_btnOptimize_clicked	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_btnOptimize_clicked()$/;"	f	class:MainWindow
prepare	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.cpp	/^bool MainWindow::prepare()$/;"	f	class:MainWindow
setRobustKernel	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::setRobustKernel()$/;"	f	class:MainWindow
updateDisplayedSolvers	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::updateDisplayedSolvers()$/;"	f	class:MainWindow
~MainWindow	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow
G2O_MAIN_WINDOW_H	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.h	20;"	d
MainWindow	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.h	/^class MainWindow : public QMainWindow, public Ui::BaseMainWindow$/;"	c
_currentSolverProperty	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.h	/^    g2o::SolverProperty _currentSolverProperty;$/;"	m	class:MainWindow
_forceStopFlag	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.h	/^    bool _forceStopFlag;$/;"	m	class:MainWindow
_knownSolvers	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.h	/^    std::vector<g2o::SolverProperty> _knownSolvers;$/;"	m	class:MainWindow
_lastSolver	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.h	/^    int _lastSolver;$/;"	m	class:MainWindow
g2o	tags/before-github-sync/g2o/apps/g2o_viewer/main_window.h	/^namespace g2o {$/;"	n
GLUWrapper	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^    GLUWrapper()$/;"	f	class:g2o::GLUWrapper
GLUWrapper	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^class GLUWrapper$/;"	c	namespace:g2o	file:
_quadratic	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^    GLUquadricObj* _quadratic;;$/;"	m	class:g2o::GLUWrapper	file:
drawArrow	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^void drawArrow(float length, float radius, int nbSubdivisions)$/;"	f	namespace:g2o
drawArrow2D	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^void drawArrow2D(float len, float head_width, float head_len)$/;"	f	namespace:g2o
drawAxis	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^void drawAxis(float length)$/;"	f	namespace:g2o
drawBox	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^void drawBox(GLfloat l, GLfloat w, GLfloat h)$/;"	f	namespace:g2o
drawCone	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^void drawCone(GLfloat radius, GLfloat height)$/;"	f	namespace:g2o
drawCylinder	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^void drawCylinder(GLfloat radius, GLfloat height)$/;"	f	namespace:g2o
drawDisk	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^void drawDisk(GLfloat radius)$/;"	f	namespace:g2o
drawEllipsoid	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^void drawEllipsoid(GLfloat r1, GLfloat r2, GLfloat r3)$/;"	f	namespace:g2o
drawGrid	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^void drawGrid(float size, int nbSubdivisions)$/;"	f	namespace:g2o
drawPlane	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^void drawPlane(GLfloat l, GLfloat w)$/;"	f	namespace:g2o
drawPoseBox	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^void drawPoseBox()$/;"	f	namespace:g2o
drawPyramid	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^void drawPyramid(GLfloat length, GLfloat height)$/;"	f	namespace:g2o
drawRangeRing	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^void drawRangeRing(GLfloat range, GLfloat fov, GLfloat range_width)$/;"	f	namespace:g2o
drawSlice	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^void drawSlice(GLfloat radius, GLfloat height, GLfloat fov, int slices_per_circle)$/;"	f	namespace:g2o
drawSphere	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^void drawSphere(GLfloat radius)$/;"	f	namespace:g2o
g2o	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^namespace g2o {$/;"	n	file:
getQuadradic	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^    static GLUquadricObj* getQuadradic()$/;"	f	class:g2o::GLUWrapper
~GLUWrapper	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.cpp	/^    ~GLUWrapper()$/;"	f	class:g2o::GLUWrapper
G2O_PRIMITIVES_H	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.h	20;"	d
g2o	tags/before-github-sync/g2o/apps/g2o_viewer/primitives.h	/^namespace g2o {$/;"	n
StreamRedirect	tags/before-github-sync/g2o/apps/g2o_viewer/stream_redirect.cpp	/^StreamRedirect::StreamRedirect(std::ostream &stream, QPlainTextEdit* te):$/;"	f	class:StreamRedirect
overflow	tags/before-github-sync/g2o/apps/g2o_viewer/stream_redirect.cpp	/^std::char_traits<char>::int_type StreamRedirect::overflow(int_type v)$/;"	f	class:StreamRedirect
xsputn	tags/before-github-sync/g2o/apps/g2o_viewer/stream_redirect.cpp	/^std::streamsize StreamRedirect::xsputn(const char *p, std::streamsize n)$/;"	f	class:StreamRedirect
~StreamRedirect	tags/before-github-sync/g2o/apps/g2o_viewer/stream_redirect.cpp	/^StreamRedirect::~StreamRedirect()$/;"	f	class:StreamRedirect
G2O_STREAM_REDIRECT_H	tags/before-github-sync/g2o/apps/g2o_viewer/stream_redirect.h	18;"	d
StreamRedirect	tags/before-github-sync/g2o/apps/g2o_viewer/stream_redirect.h	/^class StreamRedirect : public std::basic_streambuf<char>$/;"	c
_buffer	tags/before-github-sync/g2o/apps/g2o_viewer/stream_redirect.h	/^    std::string _buffer;$/;"	m	class:StreamRedirect
_mutex	tags/before-github-sync/g2o/apps/g2o_viewer/stream_redirect.h	/^    QMutex _mutex;$/;"	m	class:StreamRedirect
_old_buf	tags/before-github-sync/g2o/apps/g2o_viewer/stream_redirect.h	/^    std::streambuf* _old_buf;$/;"	m	class:StreamRedirect
_stream	tags/before-github-sync/g2o/apps/g2o_viewer/stream_redirect.h	/^    std::ostream& _stream;$/;"	m	class:StreamRedirect
_te	tags/before-github-sync/g2o/apps/g2o_viewer/stream_redirect.h	/^    QPlainTextEdit* _te;$/;"	m	class:StreamRedirect
int_type	tags/before-github-sync/g2o/apps/g2o_viewer/stream_redirect.h	/^    typedef std::char_traits<char>::int_type int_type;$/;"	t	class:StreamRedirect
BaseBinaryEdge	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      BaseBinaryEdge() : BaseEdge<D,E>(),$/;"	f	class:g2o::BaseBinaryEdge
BaseBinaryEdge	tags/before-github-sync/g2o/core/base_binary_edge.h	/^  class BaseBinaryEdge : public BaseEdge<D, E>$/;"	c	namespace:g2o
Di	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      static const int Di = VertexXiType::Dimension;$/;"	m	class:g2o::BaseBinaryEdge
Dimension	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      static const int Dimension = BaseEdge<D, E>::Dimension;$/;"	m	class:g2o::BaseBinaryEdge
Dimension	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      static const int Dimension = BaseEdge<D, E>::Dimension;$/;"	m	class:g2o::BaseBinaryEdge::E
Dj	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      static const int Dj = VertexXjType::Dimension;$/;"	m	class:g2o::BaseBinaryEdge
ErrorVector	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      typedef typename BaseEdge<D,E>::ErrorVector ErrorVector;$/;"	t	class:g2o::BaseBinaryEdge
G2O_BASE_BINARY_EDGE_H	tags/before-github-sync/g2o/core/base_binary_edge.h	18;"	d
HessianBlockTransposedType	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      typedef Map<Matrix<double, Dj, Di>, Matrix<double, Dj, Di>::Flags & AlignedBit ? Aligned : Unaligned > HessianBlockTransposedType;$/;"	t	class:g2o::BaseBinaryEdge
HessianBlockType	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      typedef Map<Matrix<double, Di, Dj>, Matrix<double, Di, Dj>::Flags & AlignedBit ? Aligned : Unaligned > HessianBlockType;$/;"	t	class:g2o::BaseBinaryEdge
InformationType	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      typedef typename BaseEdge<D,E>::InformationType InformationType;$/;"	t	class:g2o::BaseBinaryEdge
JacobianXiOplusType	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      typedef Matrix<double, D, Di> JacobianXiOplusType;$/;"	t	class:g2o::BaseBinaryEdge
JacobianXjOplusType	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      typedef Matrix<double, D, Dj> JacobianXjOplusType;$/;"	t	class:g2o::BaseBinaryEdge
Measurement	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      typedef typename BaseEdge<D,E>::Measurement Measurement;$/;"	t	class:g2o::BaseBinaryEdge
VertexXiType	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      typedef VertexXi VertexXiType;$/;"	t	class:g2o::BaseBinaryEdge
VertexXjType	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      typedef VertexXj VertexXjType;$/;"	t	class:g2o::BaseBinaryEdge
_hessian	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      HessianBlockType _hessian;$/;"	m	class:g2o::BaseBinaryEdge
_hessianRowMajor	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      bool _hessianRowMajor;$/;"	m	class:g2o::BaseBinaryEdge
_hessianTransposed	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      HessianBlockTransposedType _hessianTransposed;$/;"	m	class:g2o::BaseBinaryEdge
_jacobianOplusXi	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      JacobianXiOplusType _jacobianOplusXi;$/;"	m	class:g2o::BaseBinaryEdge
_jacobianOplusXj	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      JacobianXjOplusType _jacobianOplusXj;$/;"	m	class:g2o::BaseBinaryEdge
g2o	tags/before-github-sync/g2o/core/base_binary_edge.h	/^namespace g2o {$/;"	n
jacobianOplusXi	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      const JacobianXiOplusType& jacobianOplusXi() const { return _jacobianOplusXi;}$/;"	f	class:g2o::BaseBinaryEdge
jacobianOplusXj	tags/before-github-sync/g2o/core/base_binary_edge.h	/^      const JacobianXjOplusType& jacobianOplusXj() const { return _jacobianOplusXj;}$/;"	f	class:g2o::BaseBinaryEdge
constructQuadraticForm	tags/before-github-sync/g2o/core/base_binary_edge.hpp	/^void BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::constructQuadraticForm()$/;"	f	class:BaseBinaryEdge
createFrom	tags/before-github-sync/g2o/core/base_binary_edge.hpp	/^OptimizableGraph::Vertex* BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::createFrom(){$/;"	f	class:BaseBinaryEdge
createTo	tags/before-github-sync/g2o/core/base_binary_edge.hpp	/^OptimizableGraph::Vertex* BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::createTo(){$/;"	f	class:BaseBinaryEdge
linearizeOplus	tags/before-github-sync/g2o/core/base_binary_edge.hpp	/^void BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::linearizeOplus()$/;"	f	class:BaseBinaryEdge
mapHessianMemory	tags/before-github-sync/g2o/core/base_binary_edge.hpp	/^void BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::mapHessianMemory(double* d, int i, int j, bool rowMajor)$/;"	f	class:BaseBinaryEdge
BaseEdge	tags/before-github-sync/g2o/core/base_edge.h	/^      BaseEdge() : OptimizableGraph::Edge()$/;"	f	class:g2o::BaseEdge
BaseEdge	tags/before-github-sync/g2o/core/base_edge.h	/^  class BaseEdge : public OptimizableGraph::Edge$/;"	c	namespace:g2o
Dimension	tags/before-github-sync/g2o/core/base_edge.h	/^      static const int Dimension = D;$/;"	m	class:g2o::BaseEdge
ErrorVector	tags/before-github-sync/g2o/core/base_edge.h	/^      typedef Matrix<double, D, 1> ErrorVector;$/;"	t	class:g2o::BaseEdge
G2O_BASE_EDGE_H	tags/before-github-sync/g2o/core/base_edge.h	18;"	d
InformationType	tags/before-github-sync/g2o/core/base_edge.h	/^      typedef Matrix<double, D, D> InformationType;$/;"	t	class:g2o::BaseEdge
Measurement	tags/before-github-sync/g2o/core/base_edge.h	/^      typedef E Measurement;$/;"	t	class:g2o::BaseEdge
_error	tags/before-github-sync/g2o/core/base_edge.h	/^      ErrorVector _error;$/;"	m	class:g2o::BaseEdge
_information	tags/before-github-sync/g2o/core/base_edge.h	/^      InformationType _information;$/;"	m	class:g2o::BaseEdge
_inverseMeasurement	tags/before-github-sync/g2o/core/base_edge.h	/^      Measurement _inverseMeasurement;$/;"	m	class:g2o::BaseEdge
_measurement	tags/before-github-sync/g2o/core/base_edge.h	/^      Measurement _measurement;$/;"	m	class:g2o::BaseEdge
chi2	tags/before-github-sync/g2o/core/base_edge.h	/^      virtual double chi2() const $/;"	f	class:g2o::BaseEdge
error	tags/before-github-sync/g2o/core/base_edge.h	/^      ErrorVector& error() { return _error;}$/;"	f	class:g2o::BaseEdge
error	tags/before-github-sync/g2o/core/base_edge.h	/^      const ErrorVector& error() const { return _error;}$/;"	f	class:g2o::BaseEdge
errorData	tags/before-github-sync/g2o/core/base_edge.h	/^      virtual const double* errorData() const { return _error.data();}$/;"	f	class:g2o::BaseEdge
errorData	tags/before-github-sync/g2o/core/base_edge.h	/^      virtual double* errorData() { return _error.data();}$/;"	f	class:g2o::BaseEdge
g2o	tags/before-github-sync/g2o/core/base_edge.h	/^namespace g2o {$/;"	n
information	tags/before-github-sync/g2o/core/base_edge.h	/^      InformationType& information() { return _information;}$/;"	f	class:g2o::BaseEdge
information	tags/before-github-sync/g2o/core/base_edge.h	/^      const InformationType& information() const { return _information;}$/;"	f	class:g2o::BaseEdge
informationData	tags/before-github-sync/g2o/core/base_edge.h	/^      virtual const double* informationData() const { return _information.data();}$/;"	f	class:g2o::BaseEdge
informationData	tags/before-github-sync/g2o/core/base_edge.h	/^      virtual double* informationData() { return _information.data();}$/;"	f	class:g2o::BaseEdge
initialEstimate	tags/before-github-sync/g2o/core/base_edge.h	/^      virtual void initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to)$/;"	f	class:g2o::BaseEdge
inverseMeasurement	tags/before-github-sync/g2o/core/base_edge.h	/^      Measurement& inverseMeasurement() { return _inverseMeasurement;}$/;"	f	class:g2o::BaseEdge
inverseMeasurement	tags/before-github-sync/g2o/core/base_edge.h	/^      const Measurement& inverseMeasurement() const { return _inverseMeasurement;}$/;"	f	class:g2o::BaseEdge
measurement	tags/before-github-sync/g2o/core/base_edge.h	/^      Measurement& measurement() { return _measurement;}$/;"	f	class:g2o::BaseEdge
measurement	tags/before-github-sync/g2o/core/base_edge.h	/^      const Measurement& measurement() const { return _measurement;}$/;"	f	class:g2o::BaseEdge
rank	tags/before-github-sync/g2o/core/base_edge.h	/^      virtual int rank() const {return _dimension;}$/;"	f	class:g2o::BaseEdge
robustifyError	tags/before-github-sync/g2o/core/base_edge.h	/^      virtual void robustifyError()$/;"	f	class:g2o::BaseEdge
setInformation	tags/before-github-sync/g2o/core/base_edge.h	/^      void setInformation(const InformationType& information) { _information = information;}$/;"	f	class:g2o::BaseEdge
setInverseMeasurement	tags/before-github-sync/g2o/core/base_edge.h	/^      virtual void setInverseMeasurement(const Measurement& im) { _inverseMeasurement = im;}$/;"	f	class:g2o::BaseEdge
setMeasurement	tags/before-github-sync/g2o/core/base_edge.h	/^      virtual void setMeasurement(const Measurement& m) { _measurement = m;}$/;"	f	class:g2o::BaseEdge
~BaseEdge	tags/before-github-sync/g2o/core/base_edge.h	/^      virtual ~BaseEdge() {}$/;"	f	class:g2o::BaseEdge
BaseMultiEdge	tags/before-github-sync/g2o/core/base_multi_edge.h	/^      BaseMultiEdge() : BaseEdge<D,E>()$/;"	f	class:g2o::BaseMultiEdge
BaseMultiEdge	tags/before-github-sync/g2o/core/base_multi_edge.h	/^  class BaseMultiEdge : public BaseEdge<D,E>$/;"	c	namespace:g2o
Dimension	tags/before-github-sync/g2o/core/base_multi_edge.h	/^      static const int Dimension = BaseEdge<D,E>::Dimension;$/;"	m	class:g2o::BaseMultiEdge
Dimension	tags/before-github-sync/g2o/core/base_multi_edge.h	/^      static const int Dimension = BaseEdge<D,E>::Dimension;$/;"	m	class:g2o::BaseMultiEdge::E
ErrorVector	tags/before-github-sync/g2o/core/base_multi_edge.h	/^      typedef typename BaseEdge<D,E>::ErrorVector ErrorVector;$/;"	t	class:g2o::BaseMultiEdge
G2O_BASE_MULTI_EDGE_H	tags/before-github-sync/g2o/core/base_multi_edge.h	18;"	d
HessianBlockType	tags/before-github-sync/g2o/core/base_multi_edge.h	/^      typedef Map<MatrixXd, MatrixXd::Flags & AlignedBit ? Aligned : Unaligned > HessianBlockType;$/;"	t	class:g2o::BaseMultiEdge
HessianHelper	tags/before-github-sync/g2o/core/base_multi_edge.h	/^        HessianHelper() : matrix(0, 0, 0), transposed(false) {}$/;"	f	struct:g2o::BaseMultiEdge::HessianHelper
HessianHelper	tags/before-github-sync/g2o/core/base_multi_edge.h	/^      struct HessianHelper {$/;"	s	class:g2o::BaseMultiEdge
InformationType	tags/before-github-sync/g2o/core/base_multi_edge.h	/^      typedef typename BaseEdge<D,E>::InformationType InformationType;$/;"	t	class:g2o::BaseMultiEdge
JacobianType	tags/before-github-sync/g2o/core/base_multi_edge.h	/^      typedef MatrixXd JacobianType;$/;"	t	class:g2o::BaseMultiEdge
Measurement	tags/before-github-sync/g2o/core/base_multi_edge.h	/^      typedef typename BaseEdge<D,E>::Measurement Measurement;$/;"	t	class:g2o::BaseMultiEdge
_hessian	tags/before-github-sync/g2o/core/base_multi_edge.h	/^      std::vector<HessianHelper> _hessian;$/;"	m	class:g2o::BaseMultiEdge
_jacobianOplus	tags/before-github-sync/g2o/core/base_multi_edge.h	/^      std::vector<JacobianType> _jacobianOplus; \/\/\/< jacobians of the edge (w.r.t. oplus)$/;"	m	class:g2o::BaseMultiEdge
g2o	tags/before-github-sync/g2o/core/base_multi_edge.h	/^namespace g2o {$/;"	n
matrix	tags/before-github-sync/g2o/core/base_multi_edge.h	/^        Map<MatrixXd> matrix;     \/\/\/< the mapped memory$/;"	m	struct:g2o::BaseMultiEdge::HessianHelper
transposed	tags/before-github-sync/g2o/core/base_multi_edge.h	/^        bool transposed;          \/\/\/< the block has to be transposed$/;"	m	struct:g2o::BaseMultiEdge::HessianHelper
computeUpperTriangleIndex	tags/before-github-sync/g2o/core/base_multi_edge.hpp	/^  inline int computeUpperTriangleIndex(int i, int j)$/;"	f
constructQuadraticForm	tags/before-github-sync/g2o/core/base_multi_edge.hpp	/^void BaseMultiEdge<D, E>::constructQuadraticForm()$/;"	f	class:BaseMultiEdge
linearizeOplus	tags/before-github-sync/g2o/core/base_multi_edge.hpp	/^void BaseMultiEdge<D, E>::linearizeOplus()$/;"	f	class:BaseMultiEdge
mapHessianMemory	tags/before-github-sync/g2o/core/base_multi_edge.hpp	/^void BaseMultiEdge<D, E>::mapHessianMemory(double* d, int i, int j, bool rowMajor)$/;"	f	class:BaseMultiEdge
resize	tags/before-github-sync/g2o/core/base_multi_edge.hpp	/^void BaseMultiEdge<D, E>::resize(size_t size)$/;"	f	class:BaseMultiEdge
BaseUnaryEdge	tags/before-github-sync/g2o/core/base_unary_edge.h	/^      BaseUnaryEdge() : BaseEdge<D,E>()$/;"	f	class:g2o::BaseUnaryEdge
BaseUnaryEdge	tags/before-github-sync/g2o/core/base_unary_edge.h	/^  class BaseUnaryEdge : public BaseEdge<D,E>$/;"	c	namespace:g2o
Dimension	tags/before-github-sync/g2o/core/base_unary_edge.h	/^      static const int Dimension = BaseEdge<D, E>::Dimension;$/;"	m	class:g2o::BaseUnaryEdge
Dimension	tags/before-github-sync/g2o/core/base_unary_edge.h	/^      static const int Dimension = BaseEdge<D, E>::Dimension;$/;"	m	class:g2o::BaseUnaryEdge::E
ErrorVector	tags/before-github-sync/g2o/core/base_unary_edge.h	/^      typedef typename BaseEdge<D,E>::ErrorVector ErrorVector;$/;"	t	class:g2o::BaseUnaryEdge
G2O_BASE_UNARY_EDGE_H	tags/before-github-sync/g2o/core/base_unary_edge.h	18;"	d
InformationType	tags/before-github-sync/g2o/core/base_unary_edge.h	/^      typedef typename BaseEdge<D,E>::InformationType InformationType;$/;"	t	class:g2o::BaseUnaryEdge
JacobianXiOplusType	tags/before-github-sync/g2o/core/base_unary_edge.h	/^      typedef Matrix<double, D, VertexXiType::Dimension> JacobianXiOplusType;$/;"	t	class:g2o::BaseUnaryEdge
Measurement	tags/before-github-sync/g2o/core/base_unary_edge.h	/^      typedef typename BaseEdge<D,E>::Measurement Measurement;$/;"	t	class:g2o::BaseUnaryEdge
VertexXiType	tags/before-github-sync/g2o/core/base_unary_edge.h	/^      typedef VertexXi VertexXiType;$/;"	t	class:g2o::BaseUnaryEdge
_jacobianOplusXi	tags/before-github-sync/g2o/core/base_unary_edge.h	/^      JacobianXiOplusType _jacobianOplusXi;$/;"	m	class:g2o::BaseUnaryEdge
g2o	tags/before-github-sync/g2o/core/base_unary_edge.h	/^namespace g2o {$/;"	n
jacobianOplusXi	tags/before-github-sync/g2o/core/base_unary_edge.h	/^      const JacobianXiOplusType& jacobianOplusXi() const { return _jacobianOplusXi;}$/;"	f	class:g2o::BaseUnaryEdge
mapHessianMemory	tags/before-github-sync/g2o/core/base_unary_edge.h	/^      virtual void mapHessianMemory(double*, int, int, bool) {assert(0 && "BaseUnaryEdge does not map memory of the Hessian");}$/;"	f	class:g2o::BaseUnaryEdge
constructQuadraticForm	tags/before-github-sync/g2o/core/base_unary_edge.hpp	/^void BaseUnaryEdge<D, E, VertexXiType>::constructQuadraticForm()$/;"	f	class:BaseUnaryEdge
initialEstimate	tags/before-github-sync/g2o/core/base_unary_edge.hpp	/^void BaseUnaryEdge<D, E, VertexXiType>::initialEstimate(const OptimizableGraph::VertexSet&, OptimizableGraph::Vertex*)$/;"	f	class:BaseUnaryEdge
linearizeOplus	tags/before-github-sync/g2o/core/base_unary_edge.hpp	/^void BaseUnaryEdge<D, E, VertexXiType>::linearizeOplus()$/;"	f	class:BaseUnaryEdge
A	tags/before-github-sync/g2o/core/base_vertex.h	/^    HessianBlockType& A() { return _hessian;}$/;"	f	class:g2o::BaseVertex
A	tags/before-github-sync/g2o/core/base_vertex.h	/^    const HessianBlockType& A() const { return _hessian;}$/;"	f	class:g2o::BaseVertex
BackupStackType	tags/before-github-sync/g2o/core/base_vertex.h	/^    BackupStackType;$/;"	t	class:g2o::BaseVertex
BaseVertex	tags/before-github-sync/g2o/core/base_vertex.h	/^  class BaseVertex : public OptimizableGraph::Vertex {$/;"	c	namespace:g2o
Dimension	tags/before-github-sync/g2o/core/base_vertex.h	/^    static const int Dimension = D;           \/\/\/< dimension of the estimate (minimal) in the manifold space$/;"	m	class:g2o::BaseVertex
EstimateType	tags/before-github-sync/g2o/core/base_vertex.h	/^    typedef T EstimateType;$/;"	t	class:g2o::BaseVertex
G2O_BASE_VERTEX_H	tags/before-github-sync/g2o/core/base_vertex.h	18;"	d
HessianBlockType	tags/before-github-sync/g2o/core/base_vertex.h	/^    typedef Map<Matrix<double, D, D>, Matrix<double,D,D>::Flags & AlignedBit ? Aligned : Unaligned >  HessianBlockType;$/;"	t	class:g2o::BaseVertex
_b	tags/before-github-sync/g2o/core/base_vertex.h	/^    Matrix<double, D, 1> _b;$/;"	m	class:g2o::BaseVertex
_backup	tags/before-github-sync/g2o/core/base_vertex.h	/^    BackupStackType _backup;$/;"	m	class:g2o::BaseVertex
_estimate	tags/before-github-sync/g2o/core/base_vertex.h	/^    EstimateType _estimate;$/;"	m	class:g2o::BaseVertex
_hessian	tags/before-github-sync/g2o/core/base_vertex.h	/^    HessianBlockType _hessian;$/;"	m	class:g2o::BaseVertex
_uncertainty	tags/before-github-sync/g2o/core/base_vertex.h	/^    Matrix<double, D, D> _uncertainty;$/;"	m	class:g2o::BaseVertex
b	tags/before-github-sync/g2o/core/base_vertex.h	/^    Matrix<double, D, 1>& b() { return _b;}$/;"	f	class:g2o::BaseVertex
b	tags/before-github-sync/g2o/core/base_vertex.h	/^    const Matrix<double, D, 1>& b() const { return _b;}$/;"	f	class:g2o::BaseVertex
b	tags/before-github-sync/g2o/core/base_vertex.h	/^    virtual const double& b(int i) const { assert(i < D); return _b(i);}$/;"	f	class:g2o::BaseVertex
b	tags/before-github-sync/g2o/core/base_vertex.h	/^    virtual double& b(int i) { assert(i < D); return _b(i);}$/;"	f	class:g2o::BaseVertex
bData	tags/before-github-sync/g2o/core/base_vertex.h	/^    virtual double* bData() { return _b.data();}$/;"	f	class:g2o::BaseVertex
copyB	tags/before-github-sync/g2o/core/base_vertex.h	/^    virtual int copyB(double* b_) const {$/;"	f	class:g2o::BaseVertex
discardTop	tags/before-github-sync/g2o/core/base_vertex.h	/^    virtual void discardTop() { assert(!_backup.empty()); _backup.pop();}$/;"	f	class:g2o::BaseVertex
estimate	tags/before-github-sync/g2o/core/base_vertex.h	/^    EstimateType& estimate() { return _estimate;}$/;"	f	class:g2o::BaseVertex
estimate	tags/before-github-sync/g2o/core/base_vertex.h	/^    const EstimateType& estimate() const { return _estimate;}$/;"	f	class:g2o::BaseVertex
g2o	tags/before-github-sync/g2o/core/base_vertex.h	/^namespace g2o {$/;"	n
hessian	tags/before-github-sync/g2o/core/base_vertex.h	/^    virtual const double& hessian(int i, int j) const { assert(i<D && j<D); return _hessian(i,j);}$/;"	f	class:g2o::BaseVertex
hessian	tags/before-github-sync/g2o/core/base_vertex.h	/^    virtual double& hessian(int i, int j)  { assert(i<D && j<D); return _hessian(i,j);}$/;"	f	class:g2o::BaseVertex
hessianData	tags/before-github-sync/g2o/core/base_vertex.h	/^    virtual double* hessianData() { return const_cast<double*>(_hessian.data());}$/;"	f	class:g2o::BaseVertex
hessianDeterminant	tags/before-github-sync/g2o/core/base_vertex.h	/^    virtual double hessianDeterminant() const {return _hessian.determinant();}$/;"	f	class:g2o::BaseVertex
pop	tags/before-github-sync/g2o/core/base_vertex.h	/^    virtual void pop() { assert(!_backup.empty()); _estimate = _backup.top(); _backup.pop();}$/;"	f	class:g2o::BaseVertex
push	tags/before-github-sync/g2o/core/base_vertex.h	/^    virtual void push() { _backup.push(_estimate);}$/;"	f	class:g2o::BaseVertex
setEstimate	tags/before-github-sync/g2o/core/base_vertex.h	/^    void setEstimate(const EstimateType& et) { _estimate = et;}$/;"	f	class:g2o::BaseVertex
setUncertainty	tags/before-github-sync/g2o/core/base_vertex.h	/^    void setUncertainty(const Matrix<double, D, D>& uncertainty) { _uncertainty = uncertainty;}$/;"	f	class:g2o::BaseVertex
stackSize	tags/before-github-sync/g2o/core/base_vertex.h	/^    virtual int stackSize() const {return _backup.size();}$/;"	f	class:g2o::BaseVertex
uncertainty	tags/before-github-sync/g2o/core/base_vertex.h	/^    const Matrix<double, D, D>& uncertainty() const { return _uncertainty;}$/;"	f	class:g2o::BaseVertex
uncertaintyData	tags/before-github-sync/g2o/core/base_vertex.h	/^    virtual double* uncertaintyData() { return _uncertainty.data();}$/;"	f	class:g2o::BaseVertex
BaseVertex	tags/before-github-sync/g2o/core/base_vertex.hpp	/^BaseVertex<D, T>::BaseVertex() :$/;"	f	class:BaseVertex
clearQuadraticForm	tags/before-github-sync/g2o/core/base_vertex.hpp	/^void BaseVertex<D, T>::clearQuadraticForm() {$/;"	f	class:BaseVertex
mapHessianMemory	tags/before-github-sync/g2o/core/base_vertex.hpp	/^void BaseVertex<D, T>::mapHessianMemory(double* d)$/;"	f	class:BaseVertex
setUncertainty	tags/before-github-sync/g2o/core/base_vertex.hpp	/^void BaseVertex<D, T>::setUncertainty(double* d) {$/;"	f	class:BaseVertex
solveDirect	tags/before-github-sync/g2o/core/base_vertex.hpp	/^double BaseVertex<D, T>::solveDirect(double lambda) {$/;"	f	class:BaseVertex
G2OBatchStatistics	tags/before-github-sync/g2o/core/batch_stats.cpp	/^  G2OBatchStatistics::G2OBatchStatistics(){$/;"	f	class:g2o::G2OBatchStatistics
PTHING	tags/before-github-sync/g2o/core/batch_stats.cpp	26;"	d	file:
g2o	tags/before-github-sync/g2o/core/batch_stats.cpp	/^namespace g2o {$/;"	n	file:
globalStats	tags/before-github-sync/g2o/core/batch_stats.cpp	/^  G2OBatchStatistics * globalStats=0;$/;"	v
operator <<	tags/before-github-sync/g2o/core/batch_stats.cpp	/^  std::ostream& operator << (std::ostream& os , const G2OBatchStatistics& st)$/;"	f	namespace:g2o
G2OBatchStatistics	tags/before-github-sync/g2o/core/batch_stats.h	/^  struct G2OBatchStatistics {$/;"	s	namespace:g2o
G2O__BATCH_STATS_H_	tags/before-github-sync/g2o/core/batch_stats.h	18;"	d
chi2	tags/before-github-sync/g2o/core/batch_stats.h	/^    double chi2;                      \/\/\/< total chi2$/;"	m	struct:g2o::G2OBatchStatistics
choleskyNNZ	tags/before-github-sync/g2o/core/batch_stats.h	/^    size_t choleskyNNZ;               \/\/\/< number of non-zeros in the cholesky factor$/;"	m	struct:g2o::G2OBatchStatistics
g2o	tags/before-github-sync/g2o/core/batch_stats.h	/^namespace g2o {$/;"	n
hessianDimension	tags/before-github-sync/g2o/core/batch_stats.h	/^    size_t hessianDimension;          \/\/\/< rows \/ cols of the Hessian$/;"	m	struct:g2o::G2OBatchStatistics
hessianLandmarkDimension	tags/before-github-sync/g2o/core/batch_stats.h	/^    size_t hessianLandmarkDimension;  \/\/\/< dimension of the landmark matrix in Schur$/;"	m	struct:g2o::G2OBatchStatistics
hessianPoseDimension	tags/before-github-sync/g2o/core/batch_stats.h	/^    size_t hessianPoseDimension;      \/\/\/< dimension of the pose matrix in Schur$/;"	m	struct:g2o::G2OBatchStatistics
iteration	tags/before-github-sync/g2o/core/batch_stats.h	/^    int iteration;                    \/\/\/< which iteration$/;"	m	struct:g2o::G2OBatchStatistics
iterationsLinearSolver	tags/before-github-sync/g2o/core/batch_stats.h	/^    int    iterationsLinearSolver;    \/\/\/< iterations of PCG, (0 if not used, i.e., Cholesky)$/;"	m	struct:g2o::G2OBatchStatistics
levenbergIterations	tags/before-github-sync/g2o/core/batch_stats.h	/^    int levenbergIterations;          \/\/\/< number of iterations performed by LM$/;"	m	struct:g2o::G2OBatchStatistics
numEdges	tags/before-github-sync/g2o/core/batch_stats.h	/^    int numEdges;                     \/\/\/< how many edges$/;"	m	struct:g2o::G2OBatchStatistics
numVertices	tags/before-github-sync/g2o/core/batch_stats.h	/^    int numVertices;                  \/\/\/< how many vertices are involved$/;"	m	struct:g2o::G2OBatchStatistics
timeIteration	tags/before-github-sync/g2o/core/batch_stats.h	/^    double timeIteration;             \/\/\/< total time;$/;"	m	struct:g2o::G2OBatchStatistics
timeLinearSolution	tags/before-github-sync/g2o/core/batch_stats.h	/^    double timeLinearSolution;        \/\/\/< total time for solving Ax=b (including detup for schur)$/;"	m	struct:g2o::G2OBatchStatistics
timeLinearSolver	tags/before-github-sync/g2o/core/batch_stats.h	/^    double timeLinearSolver;          \/\/\/< time for solving, excluding Schur setup$/;"	m	struct:g2o::G2OBatchStatistics
timeLinearize	tags/before-github-sync/g2o/core/batch_stats.h	/^    double timeLinearize;             \/\/\/< jacobians$/;"	m	struct:g2o::G2OBatchStatistics
timeMarginals	tags/before-github-sync/g2o/core/batch_stats.h	/^    double timeMarginals;             \/\/\/< computing the inverse elements (solve blocks) and thus the marginal covariances$/;"	m	struct:g2o::G2OBatchStatistics
timeNumericDecomposition	tags/before-github-sync/g2o/core/batch_stats.h	/^    double timeNumericDecomposition;  \/\/\/< numeric decomposition  (0 if not done)$/;"	m	struct:g2o::G2OBatchStatistics
timeQuadraticForm	tags/before-github-sync/g2o/core/batch_stats.h	/^    double timeQuadraticForm;         \/\/\/< construct the quadratic form in the graph$/;"	m	struct:g2o::G2OBatchStatistics
timeResiduals	tags/before-github-sync/g2o/core/batch_stats.h	/^    double timeResiduals;             \/\/\/< residuals$/;"	m	struct:g2o::G2OBatchStatistics
timeSchurrComplement	tags/before-github-sync/g2o/core/batch_stats.h	/^    double timeSchurrComplement;      \/\/\/< compute schurr complement (0 if not done)$/;"	m	struct:g2o::G2OBatchStatistics
timeSymbolicDecomposition	tags/before-github-sync/g2o/core/batch_stats.h	/^    double timeSymbolicDecomposition; \/\/\/< symbolic decomposition (0 if not done)$/;"	m	struct:g2o::G2OBatchStatistics
timeUpdate	tags/before-github-sync/g2o/core/batch_stats.h	/^    double timeUpdate;                \/\/\/< time to apply the update$/;"	m	struct:g2o::G2OBatchStatistics
BlockSolver	tags/before-github-sync/g2o/core/block_solver.h	/^  class BlockSolver: public Solver {$/;"	c	namespace:g2o
BlockSolverTraits	tags/before-github-sync/g2o/core/block_solver.h	/^  struct BlockSolverTraits$/;"	s	namespace:g2o
BlockSolverTraits	tags/before-github-sync/g2o/core/block_solver.h	/^  struct BlockSolverTraits<-1, -1>$/;"	s	namespace:g2o
BlockSolverX	tags/before-github-sync/g2o/core/block_solver.h	/^  typedef BlockSolver< BlockSolverTraits<-1, -1> > BlockSolverX;$/;"	t	namespace:g2o
BlockSolver_3_2	tags/before-github-sync/g2o/core/block_solver.h	/^  typedef BlockSolver< BlockSolverTraits<3, 2> > BlockSolver_3_2;$/;"	t	namespace:g2o
BlockSolver_6_3	tags/before-github-sync/g2o/core/block_solver.h	/^  typedef BlockSolver< BlockSolverTraits<6, 3> > BlockSolver_6_3;  $/;"	t	namespace:g2o
BlockSolver_7_3	tags/before-github-sync/g2o/core/block_solver.h	/^  typedef BlockSolver< BlockSolverTraits<7, 3> > BlockSolver_7_3;  $/;"	t	namespace:g2o
G2O_BLOCK_SOLVER_H	tags/before-github-sync/g2o/core/block_solver.h	18;"	d
LandmarkDim	tags/before-github-sync/g2o/core/block_solver.h	/^      static const int LandmarkDim = Traits::LandmarkDim;$/;"	m	class:g2o::BlockSolver
LandmarkDim	tags/before-github-sync/g2o/core/block_solver.h	/^    static const int LandmarkDim = -1;$/;"	m	struct:g2o::BlockSolverTraits
LandmarkDim	tags/before-github-sync/g2o/core/block_solver.h	/^    static const int LandmarkDim = _LandmarkDim;$/;"	m	struct:g2o::BlockSolverTraits
LandmarkHessianType	tags/before-github-sync/g2o/core/block_solver.h	/^      typedef typename Traits::LandmarkHessianType LandmarkHessianType;$/;"	t	class:g2o::BlockSolver
LandmarkHessianType	tags/before-github-sync/g2o/core/block_solver.h	/^    typedef SparseBlockMatrix<LandmarkMatrixType> LandmarkHessianType;$/;"	t	struct:g2o::BlockSolverTraits
LandmarkMatrixType	tags/before-github-sync/g2o/core/block_solver.h	/^      typedef typename Traits::LandmarkMatrixType LandmarkMatrixType; $/;"	t	class:g2o::BlockSolver
LandmarkMatrixType	tags/before-github-sync/g2o/core/block_solver.h	/^    typedef Matrix<double, LandmarkDim, LandmarkDim> LandmarkMatrixType;$/;"	t	struct:g2o::BlockSolverTraits
LandmarkMatrixType	tags/before-github-sync/g2o/core/block_solver.h	/^    typedef MatrixXd LandmarkMatrixType;$/;"	t	struct:g2o::BlockSolverTraits
LandmarkVectorType	tags/before-github-sync/g2o/core/block_solver.h	/^      typedef typename Traits::LandmarkVectorType LandmarkVectorType;$/;"	t	class:g2o::BlockSolver
LandmarkVectorType	tags/before-github-sync/g2o/core/block_solver.h	/^    typedef Matrix<double, LandmarkDim, 1> LandmarkVectorType;$/;"	t	struct:g2o::BlockSolverTraits
LandmarkVectorType	tags/before-github-sync/g2o/core/block_solver.h	/^    typedef VectorXd LandmarkVectorType;$/;"	t	struct:g2o::BlockSolverTraits
LinearSolverType	tags/before-github-sync/g2o/core/block_solver.h	/^      typedef typename Traits::LinearSolverType LinearSolverType;$/;"	t	class:g2o::BlockSolver
LinearSolverType	tags/before-github-sync/g2o/core/block_solver.h	/^    typedef LinearSolver<PoseMatrixType> LinearSolverType;$/;"	t	struct:g2o::BlockSolverTraits
PoseDim	tags/before-github-sync/g2o/core/block_solver.h	/^      static const int PoseDim = Traits::PoseDim;$/;"	m	class:g2o::BlockSolver
PoseDim	tags/before-github-sync/g2o/core/block_solver.h	/^    static const int PoseDim = -1;$/;"	m	struct:g2o::BlockSolverTraits
PoseDim	tags/before-github-sync/g2o/core/block_solver.h	/^    static const int PoseDim = _PoseDim;$/;"	m	struct:g2o::BlockSolverTraits
PoseHessianType	tags/before-github-sync/g2o/core/block_solver.h	/^      typedef typename Traits::PoseHessianType PoseHessianType;$/;"	t	class:g2o::BlockSolver
PoseHessianType	tags/before-github-sync/g2o/core/block_solver.h	/^    typedef SparseBlockMatrix<PoseMatrixType> PoseHessianType;$/;"	t	struct:g2o::BlockSolverTraits
PoseLandmarkHessianType	tags/before-github-sync/g2o/core/block_solver.h	/^      typedef typename Traits::PoseLandmarkHessianType PoseLandmarkHessianType;$/;"	t	class:g2o::BlockSolver
PoseLandmarkHessianType	tags/before-github-sync/g2o/core/block_solver.h	/^    typedef SparseBlockMatrix<PoseLandmarkMatrixType> PoseLandmarkHessianType;$/;"	t	struct:g2o::BlockSolverTraits
PoseLandmarkMatrixType	tags/before-github-sync/g2o/core/block_solver.h	/^      typedef typename Traits::PoseLandmarkMatrixType PoseLandmarkMatrixType;$/;"	t	class:g2o::BlockSolver
PoseLandmarkMatrixType	tags/before-github-sync/g2o/core/block_solver.h	/^    typedef Matrix<double, PoseDim, LandmarkDim> PoseLandmarkMatrixType;$/;"	t	struct:g2o::BlockSolverTraits
PoseLandmarkMatrixType	tags/before-github-sync/g2o/core/block_solver.h	/^    typedef MatrixXd PoseLandmarkMatrixType;$/;"	t	struct:g2o::BlockSolverTraits
PoseMatrixType	tags/before-github-sync/g2o/core/block_solver.h	/^      typedef typename Traits::PoseMatrixType PoseMatrixType;$/;"	t	class:g2o::BlockSolver
PoseMatrixType	tags/before-github-sync/g2o/core/block_solver.h	/^    typedef Matrix<double, PoseDim, PoseDim> PoseMatrixType;$/;"	t	struct:g2o::BlockSolverTraits
PoseMatrixType	tags/before-github-sync/g2o/core/block_solver.h	/^    typedef MatrixXd PoseMatrixType;$/;"	t	struct:g2o::BlockSolverTraits
PoseVectorType	tags/before-github-sync/g2o/core/block_solver.h	/^      typedef typename Traits::PoseVectorType PoseVectorType;$/;"	t	class:g2o::BlockSolver
PoseVectorType	tags/before-github-sync/g2o/core/block_solver.h	/^    typedef Matrix<double, PoseDim, 1> PoseVectorType;$/;"	t	struct:g2o::BlockSolverTraits
PoseVectorType	tags/before-github-sync/g2o/core/block_solver.h	/^    typedef VectorXd PoseVectorType;$/;"	t	struct:g2o::BlockSolverTraits
_DInvSchur	tags/before-github-sync/g2o/core/block_solver.h	/^      SparseBlockMatrix<LandmarkMatrixType>* _DInvSchur;$/;"	m	class:g2o::BlockSolver
_Hll	tags/before-github-sync/g2o/core/block_solver.h	/^      SparseBlockMatrix<LandmarkMatrixType>* _Hll;$/;"	m	class:g2o::BlockSolver
_Hpl	tags/before-github-sync/g2o/core/block_solver.h	/^      SparseBlockMatrix<PoseLandmarkMatrixType>* _Hpl;$/;"	m	class:g2o::BlockSolver
_Hpp	tags/before-github-sync/g2o/core/block_solver.h	/^      SparseBlockMatrix<PoseMatrixType>* _Hpp;$/;"	m	class:g2o::BlockSolver
_Hschur	tags/before-github-sync/g2o/core/block_solver.h	/^      SparseBlockMatrix<PoseMatrixType>* _Hschur;$/;"	m	class:g2o::BlockSolver
_bschur	tags/before-github-sync/g2o/core/block_solver.h	/^      double* _bschur;$/;"	m	class:g2o::BlockSolver
_coefficients	tags/before-github-sync/g2o/core/block_solver.h	/^      double* _coefficients;$/;"	m	class:g2o::BlockSolver
_doSchur	tags/before-github-sync/g2o/core/block_solver.h	/^      bool _doSchur;$/;"	m	class:g2o::BlockSolver
_linearSolver	tags/before-github-sync/g2o/core/block_solver.h	/^      LinearSolver<PoseMatrixType>* _linearSolver;$/;"	m	class:g2o::BlockSolver
_numLandmarks	tags/before-github-sync/g2o/core/block_solver.h	/^      int _numPoses, _numLandmarks;$/;"	m	class:g2o::BlockSolver
_numPoses	tags/before-github-sync/g2o/core/block_solver.h	/^      int _numPoses, _numLandmarks;$/;"	m	class:g2o::BlockSolver
_sizeLandmarks	tags/before-github-sync/g2o/core/block_solver.h	/^      int _sizePoses, _sizeLandmarks;$/;"	m	class:g2o::BlockSolver
_sizePoses	tags/before-github-sync/g2o/core/block_solver.h	/^      int _sizePoses, _sizeLandmarks;$/;"	m	class:g2o::BlockSolver
g2o	tags/before-github-sync/g2o/core/block_solver.h	/^namespace g2o {$/;"	n
linearSolver	tags/before-github-sync/g2o/core/block_solver.h	/^      LinearSolver<PoseMatrixType>* linearSolver() const { return _linearSolver;}$/;"	f	class:g2o::BlockSolver
schur	tags/before-github-sync/g2o/core/block_solver.h	/^      virtual bool schur() { return _doSchur;}$/;"	f	class:g2o::BlockSolver
setSchur	tags/before-github-sync/g2o/core/block_solver.h	/^      virtual void setSchur(bool s) { _doSchur = s;}$/;"	f	class:g2o::BlockSolver
supportsSchur	tags/before-github-sync/g2o/core/block_solver.h	/^      virtual bool supportsSchur() {return true;}$/;"	f	class:g2o::BlockSolver
BlockSolver	tags/before-github-sync/g2o/core/block_solver.hpp	/^BlockSolver<Traits>::BlockSolver(SparseOptimizer* optimizer, LinearSolverType* linearSolver) :$/;"	f	class:g2o::BlockSolver
buildStructure	tags/before-github-sync/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::buildStructure(bool zeroBlocks)$/;"	f	class:g2o::BlockSolver
buildSystem	tags/before-github-sync/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::buildSystem()$/;"	f	class:g2o::BlockSolver
computeMarginals	tags/before-github-sync/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::computeMarginals()$/;"	f	class:g2o::BlockSolver
computeMarginals	tags/before-github-sync/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::computeMarginals(SparseBlockMatrix<MatrixXd>& spinv, const std::vector<std::pair<int, int> >& blockIndices)$/;"	f	class:g2o::BlockSolver
g2o	tags/before-github-sync/g2o/core/block_solver.hpp	/^namespace g2o {$/;"	n
init	tags/before-github-sync/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::init(bool online)$/;"	f	class:g2o::BlockSolver
resize	tags/before-github-sync/g2o/core/block_solver.hpp	/^void BlockSolver<Traits>::resize(int* blockPoseIndices, int numPoseBlocks, $/;"	f	class:g2o::BlockSolver
setLambda	tags/before-github-sync/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::setLambda(double lambda)$/;"	f	class:g2o::BlockSolver
solve	tags/before-github-sync/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::solve(){$/;"	f	class:g2o::BlockSolver
updateStructure	tags/before-github-sync/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::updateStructure(const std::vector<HyperGraph::Vertex*>& vset, const HyperGraph::EdgeSet& edges)$/;"	f	class:g2o::BlockSolver
~BlockSolver	tags/before-github-sync/g2o/core/block_solver.hpp	/^BlockSolver<Traits>::~BlockSolver()$/;"	f	class:g2o::BlockSolver
AbstractHyperGraphElementCreator	tags/before-github-sync/g2o/core/creators.h	/^  class AbstractHyperGraphElementCreator$/;"	c	namespace:g2o
G2O_CREATORS_H	tags/before-github-sync/g2o/core/creators.h	18;"	d
HyperGraphElementCreator	tags/before-github-sync/g2o/core/creators.h	/^      HyperGraphElementCreator() : _name(typeid(T).name()) {}$/;"	f	class:g2o::HyperGraphElementCreator
HyperGraphElementCreator	tags/before-github-sync/g2o/core/creators.h	/^  class HyperGraphElementCreator : public AbstractHyperGraphElementCreator$/;"	c	namespace:g2o
_name	tags/before-github-sync/g2o/core/creators.h	/^      std::string _name;$/;"	m	class:g2o::HyperGraphElementCreator
construct	tags/before-github-sync/g2o/core/creators.h	/^      HyperGraph::HyperGraphElement* construct() { return new T;}$/;"	f	class:g2o::HyperGraphElementCreator
g2o	tags/before-github-sync/g2o/core/creators.h	/^namespace g2o$/;"	n
name	tags/before-github-sync/g2o/core/creators.h	/^      const std::string& name() const { return _name;}$/;"	f	class:g2o::HyperGraphElementCreator
AdjacencyMapEntry	tags/before-github-sync/g2o/core/estimate_propagator.cpp	/^  EstimatePropagator::AdjacencyMapEntry::AdjacencyMapEntry()$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
EstimatePropagator	tags/before-github-sync/g2o/core/estimate_propagator.cpp	/^  EstimatePropagator::EstimatePropagator(OptimizableGraph* g): _graph(g)$/;"	f	class:g2o::EstimatePropagator
FrontierLevelCmp	tags/before-github-sync/g2o/core/estimate_propagator.cpp	/^  struct FrontierLevelCmp {$/;"	s	namespace:g2o	file:
g2o	tags/before-github-sync/g2o/core/estimate_propagator.cpp	/^namespace g2o {$/;"	n	file:
operator ()	tags/before-github-sync/g2o/core/estimate_propagator.cpp	/^    bool operator()(EstimatePropagator::AdjacencyMapEntry* e1, EstimatePropagator::AdjacencyMapEntry* e2) const$/;"	f	struct:g2o::FrontierLevelCmp
pop	tags/before-github-sync/g2o/core/estimate_propagator.cpp	/^  EstimatePropagator::AdjacencyMapEntry* EstimatePropagator::PriorityQueue::pop()$/;"	f	class:g2o::EstimatePropagator::PriorityQueue
propagate	tags/before-github-sync/g2o/core/estimate_propagator.cpp	/^  void EstimatePropagator::propagate(OptimizableGraph::Vertex* v, $/;"	f	class:g2o::EstimatePropagator
propagate	tags/before-github-sync/g2o/core/estimate_propagator.cpp	/^  void EstimatePropagator::propagate(OptimizableGraph::VertexSet& vset, $/;"	f	class:g2o::EstimatePropagator
push	tags/before-github-sync/g2o/core/estimate_propagator.cpp	/^  void EstimatePropagator::PriorityQueue::push(AdjacencyMapEntry* entry)$/;"	f	class:g2o::EstimatePropagator::PriorityQueue
reset	tags/before-github-sync/g2o/core/estimate_propagator.cpp	/^  void EstimatePropagator::AdjacencyMapEntry::reset()$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
reset	tags/before-github-sync/g2o/core/estimate_propagator.cpp	/^  void EstimatePropagator::reset()$/;"	f	class:g2o::EstimatePropagator
AdjacencyMap	tags/before-github-sync/g2o/core/estimate_propagator.h	/^      typedef std::tr1::unordered_map<OptimizableGraph::Vertex*, AdjacencyMapEntry, VertexIDHashFunction> AdjacencyMap;$/;"	t	class:g2o::EstimatePropagator
AdjacencyMapEntry	tags/before-github-sync/g2o/core/estimate_propagator.h	/^      class AdjacencyMapEntry {$/;"	c	class:g2o::EstimatePropagator
EstimatePropagator	tags/before-github-sync/g2o/core/estimate_propagator.h	/^  class EstimatePropagator {$/;"	c	namespace:g2o
G2O_G2O_ESTIMATE_PROPAGATOR_H	tags/before-github-sync/g2o/core/estimate_propagator.h	18;"	d
PriorityQueue	tags/before-github-sync/g2o/core/estimate_propagator.h	/^      class PriorityQueue : public std::multimap<double, AdjacencyMapEntry*> {$/;"	c	class:g2o::EstimatePropagator
PropagateAction	tags/before-github-sync/g2o/core/estimate_propagator.h	/^      struct PropagateAction {$/;"	s	class:g2o::EstimatePropagator
PropagateCost	tags/before-github-sync/g2o/core/estimate_propagator.h	/^          PropagateCost(SparseOptimizer* graph) : _graph(graph) {}$/;"	f	class:g2o::EstimatePropagator::PropagateCost
PropagateCost	tags/before-github-sync/g2o/core/estimate_propagator.h	/^      class PropagateCost {$/;"	c	class:g2o::EstimatePropagator
VertexIDHashFunction	tags/before-github-sync/g2o/core/estimate_propagator.h	/^      class VertexIDHashFunction {$/;"	c	class:g2o::EstimatePropagator
_adjacencyMap	tags/before-github-sync/g2o/core/estimate_propagator.h	/^      AdjacencyMap _adjacencyMap;$/;"	m	class:g2o::EstimatePropagator
_child	tags/before-github-sync/g2o/core/estimate_propagator.h	/^          OptimizableGraph::Vertex* _child;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
_distance	tags/before-github-sync/g2o/core/estimate_propagator.h	/^          double _distance;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
_edge	tags/before-github-sync/g2o/core/estimate_propagator.h	/^          OptimizableGraph::Edge* _edge;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
_frontierLevel	tags/before-github-sync/g2o/core/estimate_propagator.h	/^          int _frontierLevel;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
_graph	tags/before-github-sync/g2o/core/estimate_propagator.h	/^          SparseOptimizer* _graph;$/;"	m	class:g2o::EstimatePropagator::PropagateCost
_graph	tags/before-github-sync/g2o/core/estimate_propagator.h	/^      OptimizableGraph* _graph;$/;"	m	class:g2o::EstimatePropagator
_parent	tags/before-github-sync/g2o/core/estimate_propagator.h	/^          OptimizableGraph::VertexSet _parent;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
_visited	tags/before-github-sync/g2o/core/estimate_propagator.h	/^      OptimizableGraph::VertexSet _visited;$/;"	m	class:g2o::EstimatePropagator
adjacencyMap	tags/before-github-sync/g2o/core/estimate_propagator.h	/^      AdjacencyMap& adjacencyMap() {return _adjacencyMap; }$/;"	f	class:g2o::EstimatePropagator
child	tags/before-github-sync/g2o/core/estimate_propagator.h	/^          OptimizableGraph::Vertex* child() const {return _child;}$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
distance	tags/before-github-sync/g2o/core/estimate_propagator.h	/^          double distance() const {return _distance;}$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
edge	tags/before-github-sync/g2o/core/estimate_propagator.h	/^          OptimizableGraph::Edge* edge() const {return _edge;}$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
frontierLevel	tags/before-github-sync/g2o/core/estimate_propagator.h	/^          int frontierLevel() const { return _frontierLevel;}$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
g2o	tags/before-github-sync/g2o/core/estimate_propagator.h	/^namespace g2o {$/;"	n
graph	tags/before-github-sync/g2o/core/estimate_propagator.h	/^      OptimizableGraph* graph() {return _graph;} $/;"	f	class:g2o::EstimatePropagator
inQueue	tags/before-github-sync/g2o/core/estimate_propagator.h	/^          bool inQueue;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
operator ()	tags/before-github-sync/g2o/core/estimate_propagator.h	/^          size_t operator ()(const OptimizableGraph::Vertex* v) const { return v->id();}$/;"	f	class:g2o::EstimatePropagator::VertexIDHashFunction
operator ()	tags/before-github-sync/g2o/core/estimate_propagator.h	/^          virtual double operator()(OptimizableGraph::Edge* edge, const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to_) const$/;"	f	class:g2o::EstimatePropagator::PropagateCost
operator ()	tags/before-github-sync/g2o/core/estimate_propagator.h	/^        virtual void operator()(OptimizableGraph::Edge* e, const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to) const$/;"	f	struct:g2o::EstimatePropagator::PropagateAction
parent	tags/before-github-sync/g2o/core/estimate_propagator.h	/^          const OptimizableGraph::VertexSet& parent() const {return _parent;}$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
queueIt	tags/before-github-sync/g2o/core/estimate_propagator.h	/^          PriorityQueue::iterator queueIt;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
visited	tags/before-github-sync/g2o/core/estimate_propagator.h	/^      OptimizableGraph::VertexSet& visited() {return _visited; }$/;"	f	class:g2o::EstimatePropagator
Factory	tags/before-github-sync/g2o/core/factory.cpp	/^Factory::Factory()$/;"	f	class:g2o::Factory
construct	tags/before-github-sync/g2o/core/factory.cpp	/^HyperGraph::HyperGraphElement* Factory::construct(const std::string& tag)$/;"	f	class:g2o::Factory
destroy	tags/before-github-sync/g2o/core/factory.cpp	/^void Factory::destroy()$/;"	f	class:g2o::Factory
factoryInstance	tags/before-github-sync/g2o/core/factory.cpp	/^Factory* Factory::factoryInstance = 0;$/;"	m	class:g2o::Factory	file:
fillKnownTypes	tags/before-github-sync/g2o/core/factory.cpp	/^void Factory::fillKnownTypes(std::vector<std::string>& types)$/;"	f	class:g2o::Factory
g2o	tags/before-github-sync/g2o/core/factory.cpp	/^namespace g2o {$/;"	n	file:
instance	tags/before-github-sync/g2o/core/factory.cpp	/^Factory* Factory::instance()$/;"	f	class:g2o::Factory
knowsTag	tags/before-github-sync/g2o/core/factory.cpp	/^bool Factory::knowsTag(const std::string& tag)$/;"	f	class:g2o::Factory
printRegisteredTypes	tags/before-github-sync/g2o/core/factory.cpp	/^void Factory::printRegisteredTypes(std::ostream& os, bool comment)$/;"	f	class:g2o::Factory
registerType	tags/before-github-sync/g2o/core/factory.cpp	/^void Factory::registerType(const std::string& tag, AbstractHyperGraphElementCreator* c)$/;"	f	class:g2o::Factory
tag	tags/before-github-sync/g2o/core/factory.cpp	/^const std::string& Factory::tag(HyperGraph::HyperGraphElement* e)$/;"	f	class:g2o::Factory
~Factory	tags/before-github-sync/g2o/core/factory.cpp	/^Factory::~Factory()$/;"	f	class:g2o::Factory
CreatorMap	tags/before-github-sync/g2o/core/factory.h	/^      typedef std::map<std::string, AbstractHyperGraphElementCreator*>      CreatorMap;$/;"	t	class:g2o::Factory
Factory	tags/before-github-sync/g2o/core/factory.h	/^  class Factory$/;"	c	namespace:g2o
G2O_FACTORY_H	tags/before-github-sync/g2o/core/factory.h	18;"	d
TagLookup	tags/before-github-sync/g2o/core/factory.h	/^      typedef std::map<std::string, std::string>                            TagLookup;$/;"	t	class:g2o::Factory
creator	tags/before-github-sync/g2o/core/factory.h	/^      CreatorMap creator;     \/\/\/< look-up map for the existing creators$/;"	m	class:g2o::Factory
factoryInstance	tags/before-github-sync/g2o/core/factory.h	/^      static Factory* factoryInstance;$/;"	m	class:g2o::Factory
g2o	tags/before-github-sync/g2o/core/factory.h	/^namespace g2o {$/;"	n
tagLookup	tags/before-github-sync/g2o/core/factory.h	/^      TagLookup tagLookup;    \/\/\/< reverse look-up, class name to tag$/;"	m	class:g2o::Factory
SparseOptimizer	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  SparseOptimizer::SparseOptimizer(){$/;"	f	class:g2o::SparseOptimizer
activeChi2	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  double SparseOptimizer::activeChi2( ) const$/;"	f	class:g2o::SparseOptimizer
addComputeErrorAction	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  bool SparseOptimizer::addComputeErrorAction(HyperGraphAction* action)$/;"	f	class:g2o::SparseOptimizer
buildIndexMapping	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  bool SparseOptimizer::buildIndexMapping(SparseOptimizer::VertexContainer& vlist){$/;"	f	class:g2o::SparseOptimizer
clear	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  void SparseOptimizer::clear() {$/;"	f	class:g2o::SparseOptimizer
clearIndexMapping	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  void SparseOptimizer::clearIndexMapping(){$/;"	f	class:g2o::SparseOptimizer
computeActiveErrors	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  void SparseOptimizer::computeActiveErrors()$/;"	f	class:g2o::SparseOptimizer
computeInitialGuess	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  void SparseOptimizer::computeInitialGuess()$/;"	f	class:g2o::SparseOptimizer
computeLambdaInit	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  double SparseOptimizer::computeLambdaInit() {$/;"	f	class:g2o::SparseOptimizer
computeMarginals	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  bool SparseOptimizer::computeMarginals()$/;"	f	class:g2o::SparseOptimizer
computeMarginals	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  bool SparseOptimizer::computeMarginals(SparseBlockMatrix<MatrixXd>& spinv, const std::vector<std::pair<int, int> >& blockIndices){$/;"	f	class:g2o::SparseOptimizer
computeScale	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  double SparseOptimizer::computeScale(double currentLMLambda, Solver* solver) {$/;"	f	class:g2o::SparseOptimizer
discardTop	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  void SparseOptimizer::discardTop(SparseOptimizer::VertexContainer& vlist)$/;"	f	class:g2o::SparseOptimizer
findActiveEdge	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  SparseOptimizer::EdgeContainer::const_iterator SparseOptimizer::findActiveEdge(OptimizableGraph::Edge* e) const$/;"	f	class:g2o::SparseOptimizer
findActiveVertex	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  SparseOptimizer::VertexContainer::const_iterator SparseOptimizer::findActiveVertex(OptimizableGraph::Vertex* v) const$/;"	f	class:g2o::SparseOptimizer
findGauge	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  OptimizableGraph::Vertex* SparseOptimizer::findGauge(){$/;"	f	class:g2o::SparseOptimizer
g2o	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^namespace g2o{$/;"	n	file:
gaugeFreedom	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  bool SparseOptimizer::gaugeFreedom()$/;"	f	class:g2o::SparseOptimizer
initializeOptimization	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  bool SparseOptimizer::initializeOptimization(HyperGraph::EdgeSet& eset){$/;"	f	class:g2o::SparseOptimizer
initializeOptimization	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  bool SparseOptimizer::initializeOptimization(HyperGraph::VertexSet& vset, int level){$/;"	f	class:g2o::SparseOptimizer
initializeOptimization	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  bool SparseOptimizer::initializeOptimization(int level){$/;"	f	class:g2o::SparseOptimizer
linearizeSystem	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  void SparseOptimizer::linearizeSystem()$/;"	f	class:g2o::SparseOptimizer
optimize	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  int SparseOptimizer::optimize(int iterations, bool online)$/;"	f	class:g2o::SparseOptimizer
pop	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  void SparseOptimizer::pop(HyperGraph::VertexSet& vlist)$/;"	f	class:g2o::SparseOptimizer
pop	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  void SparseOptimizer::pop(SparseOptimizer::VertexContainer& vlist)$/;"	f	class:g2o::SparseOptimizer
push	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  void SparseOptimizer::push(HyperGraph::VertexSet& vlist)$/;"	f	class:g2o::SparseOptimizer
push	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  void SparseOptimizer::push(SparseOptimizer::VertexContainer& vlist)$/;"	f	class:g2o::SparseOptimizer
removeComputeErrorAction	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  bool SparseOptimizer::removeComputeErrorAction(HyperGraphAction* action)$/;"	f	class:g2o::SparseOptimizer
removeVertex	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  bool SparseOptimizer::removeVertex(Vertex* v)$/;"	f	class:g2o::SparseOptimizer
setForceStopFlag	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  void SparseOptimizer::setForceStopFlag(bool* flag)$/;"	f	class:g2o::SparseOptimizer
setMaxTrialsAfterFailure	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  void SparseOptimizer::setMaxTrialsAfterFailure(int max_trials)$/;"	f	class:g2o::SparseOptimizer
setMethod	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  void SparseOptimizer::setMethod(SparseOptimizer::Method method)$/;"	f	class:g2o::SparseOptimizer
setSolver	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  void SparseOptimizer::setSolver(Solver* solver)$/;"	f	class:g2o::SparseOptimizer
setUserLambdaInit	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  void SparseOptimizer::setUserLambdaInit(double lambda)$/;"	f	class:g2o::SparseOptimizer
setVerbose	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  void SparseOptimizer::setVerbose(bool verbose)$/;"	f	class:g2o::SparseOptimizer
sortVectorContainers	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  void SparseOptimizer::sortVectorContainers()$/;"	f	class:g2o::SparseOptimizer
update	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  void SparseOptimizer::update(double* update)$/;"	f	class:g2o::SparseOptimizer
updateInitialization	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  bool SparseOptimizer::updateInitialization(HyperGraph::VertexSet& vset, HyperGraph::EdgeSet& eset)$/;"	f	class:g2o::SparseOptimizer
~SparseOptimizer	tags/before-github-sync/g2o/core/graph_optimizer_sparse.cpp	/^  SparseOptimizer::~SparseOptimizer(){$/;"	f	class:g2o::SparseOptimizer
AT_COMPUTEACTIVERROR	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^      AT_COMPUTEACTIVERROR = OptimizableGraph::AT_NUM_ELEMENTS,$/;"	e	enum:g2o::SparseOptimizer::<anonymous>
AT_NUM_ELEMENTS	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^      AT_NUM_ELEMENTS, \/\/ keep as last element$/;"	e	enum:g2o::SparseOptimizer::<anonymous>
G2O__GRAPH_OPTIMIZER_CHOL_H_	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	18;"	d
GaussNewton	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    enum Method{GaussNewton, LevenbergMarquardt};$/;"	e	enum:g2o::SparseOptimizer::Method
LevenbergMarquardt	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    enum Method{GaussNewton, LevenbergMarquardt};$/;"	e	enum:g2o::SparseOptimizer::Method
Method	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    enum Method{GaussNewton, LevenbergMarquardt};$/;"	g	struct:g2o::SparseOptimizer
SparseOptimizer	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^  struct SparseOptimizer : public OptimizableGraph {$/;"	s	namespace:g2o
_activeEdges	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    EdgeContainer _activeEdges;        \/\/\/< sorted according to EdgeIDCompare$/;"	m	struct:g2o::SparseOptimizer
_activeVertices	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    VertexContainer _activeVertices;   \/\/\/< sorted according to VertexIDCompare$/;"	m	struct:g2o::SparseOptimizer
_currentLambda	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    double _currentLambda;$/;"	m	struct:g2o::SparseOptimizer
_forceStopFlag	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    bool* _forceStopFlag;$/;"	m	struct:g2o::SparseOptimizer
_goodStepLowerScale	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    double _goodStepLowerScale; \/\/\/< lower bound for lambda decrease if a good LM step$/;"	m	struct:g2o::SparseOptimizer
_goodStepUpperScale	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    double _goodStepUpperScale; \/\/\/< upper bound for lambda decrease if a good LM step$/;"	m	struct:g2o::SparseOptimizer
_ivMap	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    VertexContainer _ivMap;$/;"	m	struct:g2o::SparseOptimizer
_maxTrialsAfterFailure	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    int _maxTrialsAfterFailure;$/;"	m	struct:g2o::SparseOptimizer
_method	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    Method _method;$/;"	m	struct:g2o::SparseOptimizer
_solver	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    Solver* _solver;$/;"	m	struct:g2o::SparseOptimizer
_statistics	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    G2OBatchStatistics* _statistics;   \/\/\/< global statistics of the optimizer, e.g., timing, num-non-zeros$/;"	m	struct:g2o::SparseOptimizer
_tau	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    double _tau;$/;"	m	struct:g2o::SparseOptimizer
_userLambdaInit	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    double _userLambdaInit;$/;"	m	struct:g2o::SparseOptimizer
_verbose	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    bool _verbose;$/;"	m	struct:g2o::SparseOptimizer
activeEdges	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    const EdgeContainer& activeEdges() const { return _activeEdges;}$/;"	f	struct:g2o::SparseOptimizer
activeVertices	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    const VertexContainer& activeVertices() const { return _activeVertices;}$/;"	f	struct:g2o::SparseOptimizer
currentLambda	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    double currentLambda() const { return _currentLambda;}$/;"	f	struct:g2o::SparseOptimizer
g2o	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^namespace g2o {$/;"	n
indexMapping	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    const VertexContainer& indexMapping() const {return _ivMap;}$/;"	f	struct:g2o::SparseOptimizer
maxTrialsAfterFailure	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    int maxTrialsAfterFailure() const { return _maxTrialsAfterFailure;}$/;"	f	struct:g2o::SparseOptimizer
method	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    Method method() const { return _method;}$/;"	f	struct:g2o::SparseOptimizer
solver	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    Solver* solver() { return _solver;}$/;"	f	struct:g2o::SparseOptimizer
solver	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    const Solver* solver() const { return _solver;}$/;"	f	struct:g2o::SparseOptimizer
terminate	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    bool terminate() {return _forceStopFlag ? (*_forceStopFlag) : false; }$/;"	f	struct:g2o::SparseOptimizer
userLambdaInit	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    double userLambdaInit() {return _userLambdaInit;}$/;"	f	struct:g2o::SparseOptimizer
verbose	tags/before-github-sync/g2o/core/graph_optimizer_sparse.h	/^    bool verbose()  const {return _verbose;}$/;"	f	struct:g2o::SparseOptimizer
AdjacencyMapEntry	tags/before-github-sync/g2o/core/hyper_dijkstra.cpp	/^  HyperDijkstra::AdjacencyMapEntry::AdjacencyMapEntry(HyperGraph::Vertex* child_, HyperGraph::Vertex* parent_, $/;"	f	class:g2o::HyperDijkstra::AdjacencyMapEntry
HyperDijkstra	tags/before-github-sync/g2o/core/hyper_dijkstra.cpp	/^  HyperDijkstra::HyperDijkstra(HyperGraph* g): _graph(g)$/;"	f	class:g2o::HyperDijkstra
computeTree	tags/before-github-sync/g2o/core/hyper_dijkstra.cpp	/^  void HyperDijkstra::computeTree(AdjacencyMap& amap)$/;"	f	class:g2o::HyperDijkstra
connectedSubset	tags/before-github-sync/g2o/core/hyper_dijkstra.cpp	/^  void connectedSubset(HyperGraph::VertexSet& connected, HyperGraph::VertexSet& visited, $/;"	f	namespace:g2o
g2o	tags/before-github-sync/g2o/core/hyper_dijkstra.cpp	/^namespace g2o{$/;"	n	file:
operator ()	tags/before-github-sync/g2o/core/hyper_dijkstra.cpp	/^  double UniformCostFunction::operator () (HyperGraph::Edge* \/*edge*\/, HyperGraph::Vertex* \/*from*\/, HyperGraph::Vertex* \/*to*\/)$/;"	f	class:g2o::UniformCostFunction
operator <	tags/before-github-sync/g2o/core/hyper_dijkstra.cpp	/^  bool operator<(const HyperDijkstra::AdjacencyMapEntry& a, const HyperDijkstra::AdjacencyMapEntry& b)$/;"	f	namespace:g2o
perform	tags/before-github-sync/g2o/core/hyper_dijkstra.cpp	/^  double HyperDijkstra::TreeAction::perform(HyperGraph::Vertex* v, HyperGraph::Vertex* vParent, HyperGraph::Edge* e){$/;"	f	class:g2o::HyperDijkstra::TreeAction
perform	tags/before-github-sync/g2o/core/hyper_dijkstra.cpp	/^  double HyperDijkstra::TreeAction::perform(HyperGraph::Vertex* v, HyperGraph::Vertex* vParent, HyperGraph::Edge* e, double distance){$/;"	f	class:g2o::HyperDijkstra::TreeAction
reset	tags/before-github-sync/g2o/core/hyper_dijkstra.cpp	/^  void HyperDijkstra::reset()$/;"	f	class:g2o::HyperDijkstra
shortestPaths	tags/before-github-sync/g2o/core/hyper_dijkstra.cpp	/^  void HyperDijkstra::shortestPaths(HyperGraph::Vertex* v, HyperDijkstra::CostFunction* cost, double maxDistance, $/;"	f	class:g2o::HyperDijkstra
shortestPaths	tags/before-github-sync/g2o/core/hyper_dijkstra.cpp	/^  void HyperDijkstra::shortestPaths(HyperGraph::VertexSet& vset, HyperDijkstra::CostFunction* cost, $/;"	f	class:g2o::HyperDijkstra
visitAdjacencyMap	tags/before-github-sync/g2o/core/hyper_dijkstra.cpp	/^  void HyperDijkstra::visitAdjacencyMap(AdjacencyMap& amap, TreeAction* action, bool useDistance)$/;"	f	class:g2o::HyperDijkstra
AdjacencyMap	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^    typedef std::map<HyperGraph::Vertex*, AdjacencyMapEntry> AdjacencyMap;$/;"	t	struct:g2o::HyperDijkstra
AdjacencyMapEntry	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^    struct AdjacencyMapEntry{$/;"	s	struct:g2o::HyperDijkstra
CostFunction	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^    struct CostFunction {$/;"	s	struct:g2o::HyperDijkstra
G2O__AIS_GENERAL_DIJKSTRA_HH	tags/before-github-sync/g2o/core/hyper_dijkstra.h	18;"	d
HyperDijkstra	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^  struct HyperDijkstra{$/;"	s	namespace:g2o
TreeAction	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^    struct TreeAction {$/;"	s	struct:g2o::HyperDijkstra
UniformCostFunction	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^  struct UniformCostFunction: public HyperDijkstra::CostFunction {$/;"	s	namespace:g2o
_adjacencyMap	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^    AdjacencyMap _adjacencyMap;$/;"	m	struct:g2o::HyperDijkstra
_child	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^      HyperGraph::Vertex* _child;$/;"	m	struct:g2o::HyperDijkstra::AdjacencyMapEntry
_children	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^      HyperGraph::VertexSet _children;$/;"	m	struct:g2o::HyperDijkstra::AdjacencyMapEntry
_distance	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^      double _distance;$/;"	m	struct:g2o::HyperDijkstra::AdjacencyMapEntry
_edge	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^      HyperGraph::Edge* _edge;$/;"	m	struct:g2o::HyperDijkstra::AdjacencyMapEntry
_graph	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^    HyperGraph* _graph;$/;"	m	struct:g2o::HyperDijkstra
_parent	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^      HyperGraph::Vertex* _parent;$/;"	m	struct:g2o::HyperDijkstra::AdjacencyMapEntry
_visited	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^    HyperGraph::VertexSet _visited;$/;"	m	struct:g2o::HyperDijkstra
adjacencyMap	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^    AdjacencyMap& adjacencyMap() {return _adjacencyMap; }$/;"	f	struct:g2o::HyperDijkstra
child	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^      HyperGraph::Vertex* child() const {return _child;}$/;"	f	struct:g2o::HyperDijkstra::AdjacencyMapEntry
children	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^      HyperGraph::VertexSet& children() {return _children;}$/;"	f	struct:g2o::HyperDijkstra::AdjacencyMapEntry
children	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^      const HyperGraph::VertexSet& children() const {return _children;}$/;"	f	struct:g2o::HyperDijkstra::AdjacencyMapEntry
distance	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^      double distance() const {return _distance;}$/;"	f	struct:g2o::HyperDijkstra::AdjacencyMapEntry
edge	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^      HyperGraph::Edge* edge() const {return _edge;}$/;"	f	struct:g2o::HyperDijkstra::AdjacencyMapEntry
g2o	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^namespace g2o{$/;"	n
graph	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^    HyperGraph* graph() {return _graph;} $/;"	f	struct:g2o::HyperDijkstra
parent	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^      HyperGraph::Vertex* parent() const {return _parent;}$/;"	f	struct:g2o::HyperDijkstra::AdjacencyMapEntry
visited	tags/before-github-sync/g2o/core/hyper_dijkstra.h	/^    HyperGraph::VertexSet& visited() {return _visited; }$/;"	f	struct:g2o::HyperDijkstra
Edge	tags/before-github-sync/g2o/core/hyper_graph.cpp	/^  HyperGraph::Edge::Edge(int id) : _id(id)$/;"	f	class:g2o::HyperGraph::Edge
HyperGraph	tags/before-github-sync/g2o/core/hyper_graph.cpp	/^  HyperGraph::HyperGraph()$/;"	f	class:g2o::HyperGraph
Vertex	tags/before-github-sync/g2o/core/hyper_graph.cpp	/^  HyperGraph::Vertex::Vertex(int id) : _id(id)$/;"	f	class:g2o::HyperGraph::Vertex
addEdge	tags/before-github-sync/g2o/core/hyper_graph.cpp	/^  HyperGraph::Edge* HyperGraph::addEdge(Edge* e)$/;"	f	class:g2o::HyperGraph
addVertex	tags/before-github-sync/g2o/core/hyper_graph.cpp	/^  HyperGraph::Vertex* HyperGraph::addVertex(Vertex* v)$/;"	f	class:g2o::HyperGraph
clear	tags/before-github-sync/g2o/core/hyper_graph.cpp	/^  void HyperGraph::clear()$/;"	f	class:g2o::HyperGraph
g2o	tags/before-github-sync/g2o/core/hyper_graph.cpp	/^namespace g2o {$/;"	n	file:
removeEdge	tags/before-github-sync/g2o/core/hyper_graph.cpp	/^  bool HyperGraph::removeEdge(Edge* e)$/;"	f	class:g2o::HyperGraph
removeVertex	tags/before-github-sync/g2o/core/hyper_graph.cpp	/^  bool HyperGraph::removeVertex(Vertex* v)$/;"	f	class:g2o::HyperGraph
resize	tags/before-github-sync/g2o/core/hyper_graph.cpp	/^  void HyperGraph::Edge::resize(size_t size)$/;"	f	class:g2o::HyperGraph::Edge
setId	tags/before-github-sync/g2o/core/hyper_graph.cpp	/^  void HyperGraph::Edge::setId(int id)$/;"	f	class:g2o::HyperGraph::Edge
vertex	tags/before-github-sync/g2o/core/hyper_graph.cpp	/^  HyperGraph::Vertex* HyperGraph::vertex(int id)$/;"	f	class:g2o::HyperGraph
vertex	tags/before-github-sync/g2o/core/hyper_graph.cpp	/^  const HyperGraph::Vertex* HyperGraph::vertex(int id) const$/;"	f	class:g2o::HyperGraph
~Edge	tags/before-github-sync/g2o/core/hyper_graph.cpp	/^  HyperGraph::Edge::~Edge()$/;"	f	class:g2o::HyperGraph::Edge
~HyperGraph	tags/before-github-sync/g2o/core/hyper_graph.cpp	/^  HyperGraph::~HyperGraph()$/;"	f	class:g2o::HyperGraph
~Vertex	tags/before-github-sync/g2o/core/hyper_graph.cpp	/^  HyperGraph::Vertex::~Vertex()$/;"	f	class:g2o::HyperGraph::Vertex
Edge	tags/before-github-sync/g2o/core/hyper_graph.h	/^      class Edge : public HyperGraphElement {$/;"	c	class:g2o::HyperGraph
EdgeSet	tags/before-github-sync/g2o/core/hyper_graph.h	/^      typedef std::set<Edge*>                           EdgeSet;$/;"	t	class:g2o::HyperGraph
G2O__AIS_HYPER_GRAPH_HH	tags/before-github-sync/g2o/core/hyper_graph.h	18;"	d
HyperGraph	tags/before-github-sync/g2o/core/hyper_graph.h	/^  class HyperGraph$/;"	c	namespace:g2o
HyperGraphElement	tags/before-github-sync/g2o/core/hyper_graph.h	/^      struct HyperGraphElement {$/;"	s	class:g2o::HyperGraph
Vertex	tags/before-github-sync/g2o/core/hyper_graph.h	/^      class Vertex : public HyperGraphElement {$/;"	c	class:g2o::HyperGraph
VertexIDMap	tags/before-github-sync/g2o/core/hyper_graph.h	/^      typedef std::tr1::unordered_map<int, Vertex*>     VertexIDMap;$/;"	t	class:g2o::HyperGraph
VertexSet	tags/before-github-sync/g2o/core/hyper_graph.h	/^      typedef std::set<Vertex*>                         VertexSet;$/;"	t	class:g2o::HyperGraph
VertexVector	tags/before-github-sync/g2o/core/hyper_graph.h	/^      typedef std::vector<Vertex*>                      VertexVector;$/;"	t	class:g2o::HyperGraph
_edges	tags/before-github-sync/g2o/core/hyper_graph.h	/^          EdgeSet _edges;$/;"	m	class:g2o::HyperGraph::Vertex
_edges	tags/before-github-sync/g2o/core/hyper_graph.h	/^      EdgeSet _edges;$/;"	m	class:g2o::HyperGraph
_id	tags/before-github-sync/g2o/core/hyper_graph.h	/^          int _id; \/\/ unique id$/;"	m	class:g2o::HyperGraph::Edge
_id	tags/before-github-sync/g2o/core/hyper_graph.h	/^          int _id;$/;"	m	class:g2o::HyperGraph::Vertex
_vertices	tags/before-github-sync/g2o/core/hyper_graph.h	/^          VertexVector _vertices;$/;"	m	class:g2o::HyperGraph::Edge
_vertices	tags/before-github-sync/g2o/core/hyper_graph.h	/^      VertexIDMap _vertices;$/;"	m	class:g2o::HyperGraph
edges	tags/before-github-sync/g2o/core/hyper_graph.h	/^          EdgeSet& edges() {return _edges;}$/;"	f	class:g2o::HyperGraph::Vertex
edges	tags/before-github-sync/g2o/core/hyper_graph.h	/^          const EdgeSet& edges() const {return _edges;}$/;"	f	class:g2o::HyperGraph::Vertex
edges	tags/before-github-sync/g2o/core/hyper_graph.h	/^      EdgeSet& edges() {return _edges;}$/;"	f	class:g2o::HyperGraph
edges	tags/before-github-sync/g2o/core/hyper_graph.h	/^      const EdgeSet& edges() const {return _edges;}$/;"	f	class:g2o::HyperGraph
g2o	tags/before-github-sync/g2o/core/hyper_graph.h	/^namespace g2o {$/;"	n
id	tags/before-github-sync/g2o/core/hyper_graph.h	/^          int id() const {return _id;}$/;"	f	class:g2o::HyperGraph::Edge
id	tags/before-github-sync/g2o/core/hyper_graph.h	/^          int id() const {return _id;}$/;"	f	class:g2o::HyperGraph::Vertex
vertices	tags/before-github-sync/g2o/core/hyper_graph.h	/^          VertexVector& vertices() { return _vertices;}$/;"	f	class:g2o::HyperGraph::Edge
vertices	tags/before-github-sync/g2o/core/hyper_graph.h	/^          const VertexVector& vertices() const { return _vertices;}$/;"	f	class:g2o::HyperGraph::Edge
vertices	tags/before-github-sync/g2o/core/hyper_graph.h	/^      VertexIDMap& vertices() {return _vertices;}$/;"	f	class:g2o::HyperGraph
vertices	tags/before-github-sync/g2o/core/hyper_graph.h	/^      const VertexIDMap& vertices() const {return _vertices;}$/;"	f	class:g2o::HyperGraph
~HyperGraphElement	tags/before-github-sync/g2o/core/hyper_graph.h	/^        virtual ~HyperGraphElement() {}$/;"	f	struct:g2o::HyperGraph::HyperGraphElement
DrawAction	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  DrawAction::DrawAction(const std::string& typeName_) $/;"	f	class:g2o::DrawAction
HyperGraphActionLibrary	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  HyperGraphActionLibrary::HyperGraphActionLibrary()$/;"	f	class:g2o::HyperGraphActionLibrary
HyperGraphElementAction	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction::HyperGraphElementAction(const std::string& typeName_)$/;"	f	class:g2o::HyperGraphElementAction
HyperGraphElementActionCollection	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementActionCollection::HyperGraphElementActionCollection(const std::string& name_)$/;"	f	class:g2o::HyperGraphElementActionCollection
ParametersIteration	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  HyperGraphAction::ParametersIteration::ParametersIteration(int iter) :$/;"	f	class:g2o::HyperGraphAction::ParametersIteration
WriteGnuplotAction	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  WriteGnuplotAction::WriteGnuplotAction(const std::string& typeName_)$/;"	f	class:g2o::WriteGnuplotAction
actionByName	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction* HyperGraphActionLibrary::actionByName(const std::string& name)$/;"	f	class:g2o::HyperGraphActionLibrary
actionLibInstance	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  HyperGraphActionLibrary* HyperGraphActionLibrary::actionLibInstance = 0;$/;"	m	class:g2o::HyperGraphActionLibrary	file:
applyAction	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  void applyAction(HyperGraph* graph, HyperGraphElementAction* action, HyperGraphElementAction::Parameters* params, const std::string& typeName)$/;"	f	namespace:g2o
destroy	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  void HyperGraphActionLibrary::destroy()$/;"	f	class:g2o::HyperGraphActionLibrary
g2o	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^namespace g2o {$/;"	n	file:
instance	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  HyperGraphActionLibrary* HyperGraphActionLibrary::instance()$/;"	f	class:g2o::HyperGraphActionLibrary
operator ()	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  HyperGraphAction* HyperGraphAction::operator()(const HyperGraph*, Parameters*)$/;"	f	class:g2o::HyperGraphAction
operator ()	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction* HyperGraphElementAction::operator()(HyperGraph::HyperGraphElement* , HyperGraphElementAction::Parameters* )$/;"	f	class:g2o::HyperGraphElementAction
operator ()	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction* HyperGraphElementAction::operator()(const HyperGraph::HyperGraphElement* , HyperGraphElementAction::Parameters* )$/;"	f	class:g2o::HyperGraphElementAction
operator ()	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction* HyperGraphElementActionCollection::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params)$/;"	f	class:g2o::HyperGraphElementActionCollection
operator ()	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction* HyperGraphElementActionCollection::operator()(const HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params)$/;"	f	class:g2o::HyperGraphElementActionCollection
registerAction	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  bool HyperGraphActionLibrary::registerAction(HyperGraphElementAction* action)$/;"	f	class:g2o::HyperGraphActionLibrary
registerAction	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  bool HyperGraphElementActionCollection::registerAction(HyperGraphElementAction* action)$/;"	f	class:g2o::HyperGraphElementActionCollection
~HyperGraphAction	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  HyperGraphAction::~HyperGraphAction()$/;"	f	class:g2o::HyperGraphAction
~HyperGraphActionLibrary	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  HyperGraphActionLibrary::~HyperGraphActionLibrary()$/;"	f	class:g2o::HyperGraphActionLibrary
~HyperGraphElementAction	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction::~HyperGraphElementAction()$/;"	f	class:g2o::HyperGraphElementAction
~HyperGraphElementActionCollection	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementActionCollection::~HyperGraphElementActionCollection()$/;"	f	class:g2o::HyperGraphElementActionCollection
~Parameters	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  HyperGraphAction::Parameters::~Parameters()$/;"	f	class:g2o::HyperGraphAction::Parameters
~Parameters	tags/before-github-sync/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction::Parameters::~Parameters()$/;"	f	class:g2o::HyperGraphElementAction::Parameters
ActionMap	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^      typedef std::map<std::string, HyperGraphElementAction*> ActionMap;$/;"	t	class:g2o::HyperGraphElementAction
DrawAction	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^  class DrawAction : public HyperGraphElementAction{$/;"	c	namespace:g2o
G2O_HYPER_GRAPH_ACTION_H	tags/before-github-sync/g2o/core/hyper_graph_action.h	18;"	d
HyperGraphAction	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^  class HyperGraphAction {$/;"	c	namespace:g2o
HyperGraphActionLibrary	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^  class HyperGraphActionLibrary{$/;"	c	namespace:g2o
HyperGraphElementAction	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^  class HyperGraphElementAction{$/;"	c	namespace:g2o
HyperGraphElementActionCollection	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^  class HyperGraphElementActionCollection: public HyperGraphElementAction{$/;"	c	namespace:g2o
Parameters	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^      class Parameters {$/;"	c	class:g2o::HyperGraphAction
Parameters	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^      struct Parameters: public HyperGraphElementAction::Parameters{$/;"	s	class:g2o::WriteGnuplotAction
Parameters	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^      struct Parameters{$/;"	s	class:g2o::HyperGraphElementAction
ParametersIteration	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^      class ParametersIteration : public Parameters {$/;"	c	class:g2o::HyperGraphAction
WriteGnuplotAction	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^  class WriteGnuplotAction: public HyperGraphElementAction{$/;"	c	namespace:g2o
_actionMap	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^      ActionMap _actionMap;$/;"	m	class:g2o::HyperGraphElementActionCollection
_actionMap	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^      HyperGraphElementAction::ActionMap _actionMap;$/;"	m	class:g2o::HyperGraphActionLibrary
_name	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^      std::string _name;$/;"	m	class:g2o::HyperGraphElementAction
_typeName	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^      std::string _typeName;$/;"	m	class:g2o::HyperGraphElementAction
actionLibInstance	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^      static HyperGraphActionLibrary* actionLibInstance;$/;"	m	class:g2o::HyperGraphActionLibrary
actionMap	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^      ActionMap& actionMap() {return _actionMap;}$/;"	f	class:g2o::HyperGraphElementActionCollection
actionMap	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^      inline HyperGraphElementAction::ActionMap& actionMap() {return _actionMap;}$/;"	f	class:g2o::HyperGraphActionLibrary
g2o	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^namespace g2o {$/;"	n
iteration	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^          int iteration;$/;"	m	class:g2o::HyperGraphAction::ParametersIteration
name	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^      const std::string& name() const{ return _name;}$/;"	f	class:g2o::HyperGraphElementAction
os	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^        std::ostream* os;$/;"	m	struct:g2o::WriteGnuplotAction::Parameters
typeName	tags/before-github-sync/g2o/core/hyper_graph_action.h	/^      const std::string& typeName() const { return _typeName;}$/;"	f	class:g2o::HyperGraphElementAction
G2O_LINEAR_SOLVER_H	tags/before-github-sync/g2o/core/linear_solver.h	18;"	d
LinearSolver	tags/before-github-sync/g2o/core/linear_solver.h	/^    LinearSolver() {};$/;"	f	class:g2o::LinearSolver
LinearSolver	tags/before-github-sync/g2o/core/linear_solver.h	/^class LinearSolver$/;"	c	namespace:g2o
g2o	tags/before-github-sync/g2o/core/linear_solver.h	/^namespace g2o {$/;"	n
solveBlocks	tags/before-github-sync/g2o/core/linear_solver.h	/^    virtual bool solveBlocks(double**&blocks, const SparseBlockMatrix<MatrixType>& A) { (void)blocks; (void) A; return false; }$/;"	f	class:g2o::LinearSolver
solvePattern	tags/before-github-sync/g2o/core/linear_solver.h	/^    virtual bool solvePattern(SparseBlockMatrix<MatrixXd>& spinv, const std::vector<std::pair<int, int> >& blockIndices, const SparseBlockMatrix<MatrixType>& A){$/;"	f	class:g2o::LinearSolver
~LinearSolver	tags/before-github-sync/g2o/core/linear_solver.h	/^    virtual ~LinearSolver() {}$/;"	f	class:g2o::LinearSolver
MarginalCovarianceCholesky	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.cpp	/^MarginalCovarianceCholesky::MarginalCovarianceCholesky() :$/;"	f	class:g2o::MarginalCovarianceCholesky
MatrixElem	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.cpp	/^  MatrixElem(int r_, int c_) : r(r_), c(c_) {}$/;"	f	struct:g2o::MatrixElem
MatrixElem	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.cpp	/^struct MatrixElem$/;"	s	namespace:g2o	file:
c	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.cpp	/^  int r, c;$/;"	m	struct:g2o::MatrixElem	file:
computeCovariance	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.cpp	/^  void MarginalCovarianceCholesky::computeCovariance(SparseBlockMatrix<MatrixXd>& spinv, const std::vector<int>& rowBlockIndices, const std::vector< std::pair<int, int> >& blockIndices)$/;"	f	class:g2o::MarginalCovarianceCholesky
computeCovariance	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.cpp	/^void MarginalCovarianceCholesky::computeCovariance(const std::vector<OptimizableGraph::Vertex*>& vertices)$/;"	f	class:g2o::MarginalCovarianceCholesky
computeCovariance	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.cpp	/^void MarginalCovarianceCholesky::computeCovariance(double** covBlocks, const std::vector<int>& blockIndices)$/;"	f	class:g2o::MarginalCovarianceCholesky
computeEntry	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.cpp	/^double MarginalCovarianceCholesky::computeEntry(int r, int c)$/;"	f	class:g2o::MarginalCovarianceCholesky
g2o	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.cpp	/^namespace g2o {$/;"	n	file:
operator <	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.cpp	/^  bool operator<(const MatrixElem& other) const$/;"	f	struct:g2o::MatrixElem
r	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.cpp	/^  int r, c;$/;"	m	struct:g2o::MatrixElem	file:
setCholeskyFactor	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.cpp	/^void MarginalCovarianceCholesky::setCholeskyFactor(int n, int* Lp, int* Li, double* Lx, int* permInv)$/;"	f	class:g2o::MarginalCovarianceCholesky
~MarginalCovarianceCholesky	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.cpp	/^MarginalCovarianceCholesky::~MarginalCovarianceCholesky()$/;"	f	class:g2o::MarginalCovarianceCholesky
G2O_MARGINAL_COVARIANCE_CHOLESKY_H	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.h	18;"	d
LookupMap	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.h	/^      typedef std::tr1::unordered_map<int, double>     LookupMap;$/;"	t	class:g2o::MarginalCovarianceCholesky
MarginalCovarianceCholesky	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.h	/^  class MarginalCovarianceCholesky {$/;"	c	namespace:g2o
_Ai	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.h	/^      int* _Ai;         \/\/\/< row indices of the CCS storage$/;"	m	class:g2o::MarginalCovarianceCholesky
_Ap	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.h	/^      int* _Ap;         \/\/\/< column pointer of the CCS storage$/;"	m	class:g2o::MarginalCovarianceCholesky
_Ax	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.h	/^      double* _Ax;      \/\/\/< values of the cholesky factor$/;"	m	class:g2o::MarginalCovarianceCholesky
_diag	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.h	/^      std::vector<double> _diag;  \/\/\/< cache 1 \/ H_ii to avoid recalculations$/;"	m	class:g2o::MarginalCovarianceCholesky
_map	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.h	/^      LookupMap _map;             \/\/\/< hash look up table for the already computed entries$/;"	m	class:g2o::MarginalCovarianceCholesky
_n	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.h	/^      int _n;           \/\/\/< L is an n X n matrix$/;"	m	class:g2o::MarginalCovarianceCholesky
_perm	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.h	/^      int* _perm;       \/\/\/< permutation of the cholesky factor. Variable re-ordering for better fill-in$/;"	m	class:g2o::MarginalCovarianceCholesky
computeIndex	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.h	/^      int computeIndex(int r, int c) const { \/*assert(r <= c);*\/ return r*_n + c;}$/;"	f	class:g2o::MarginalCovarianceCholesky
g2o	tags/before-github-sync/g2o/core/marginal_covariance_cholesky.h	/^namespace g2o {$/;"	n
ColSort	tags/before-github-sync/g2o/core/matrix_structure.cpp	/^struct ColSort$/;"	s	namespace:g2o	file:
MatrixStructure	tags/before-github-sync/g2o/core/matrix_structure.cpp	/^MatrixStructure::MatrixStructure() :$/;"	f	class:g2o::MatrixStructure
alloc	tags/before-github-sync/g2o/core/matrix_structure.cpp	/^void MatrixStructure::alloc(int n_, int nz)$/;"	f	class:g2o::MatrixStructure
free	tags/before-github-sync/g2o/core/matrix_structure.cpp	/^void MatrixStructure::free()$/;"	f	class:g2o::MatrixStructure
g2o	tags/before-github-sync/g2o/core/matrix_structure.cpp	/^namespace g2o {$/;"	n	file:
operator ()	tags/before-github-sync/g2o/core/matrix_structure.cpp	/^  bool operator()(const pair<int, int>& e1, const pair<int, int>& e2) const$/;"	f	struct:g2o::ColSort
write	tags/before-github-sync/g2o/core/matrix_structure.cpp	/^bool MatrixStructure::write(const char* filename) const$/;"	f	class:g2o::MatrixStructure
~MatrixStructure	tags/before-github-sync/g2o/core/matrix_structure.cpp	/^MatrixStructure::~MatrixStructure()$/;"	f	class:g2o::MatrixStructure
Aii	tags/before-github-sync/g2o/core/matrix_structure.h	/^    int* Aii; \/\/\/< row indices of A, of size nz = Ap [n]$/;"	m	class:g2o::MatrixStructure
Ap	tags/before-github-sync/g2o/core/matrix_structure.h	/^    int* Ap;  \/\/\/< column pointers for A, of size n+1$/;"	m	class:g2o::MatrixStructure
G2O_MATRIX_STRUCTURE_H	tags/before-github-sync/g2o/core/matrix_structure.h	18;"	d
MatrixStructure	tags/before-github-sync/g2o/core/matrix_structure.h	/^class MatrixStructure$/;"	c	namespace:g2o
g2o	tags/before-github-sync/g2o/core/matrix_structure.h	/^namespace g2o {$/;"	n
m	tags/before-github-sync/g2o/core/matrix_structure.h	/^    int m;    \/\/\/< A is m-by-n.  m must be >= 0.$/;"	m	class:g2o::MatrixStructure
maxN	tags/before-github-sync/g2o/core/matrix_structure.h	/^    int maxN;     \/\/\/< size of the allocated memory$/;"	m	class:g2o::MatrixStructure
maxNz	tags/before-github-sync/g2o/core/matrix_structure.h	/^    int maxNz;    \/\/\/< size of the allocated memory$/;"	m	class:g2o::MatrixStructure
n	tags/before-github-sync/g2o/core/matrix_structure.h	/^    int n;    \/\/\/< A is m-by-n.  n must be >= 0.$/;"	m	class:g2o::MatrixStructure
nzMax	tags/before-github-sync/g2o/core/matrix_structure.h	/^    int nzMax() const { return maxNz;}$/;"	f	class:g2o::MatrixStructure
G2O_OPENMP_MUTEX	tags/before-github-sync/g2o/core/openmp_mutex.h	18;"	d
OpenMPMutex	tags/before-github-sync/g2o/core/openmp_mutex.h	/^      OpenMPMutex() { omp_init_lock(&_lock); }$/;"	f	class:g2o::OpenMPMutex
OpenMPMutex	tags/before-github-sync/g2o/core/openmp_mutex.h	/^  class OpenMPMutex$/;"	c	namespace:g2o
_lock	tags/before-github-sync/g2o/core/openmp_mutex.h	/^      omp_lock_t _lock;$/;"	m	class:g2o::OpenMPMutex
g2o	tags/before-github-sync/g2o/core/openmp_mutex.h	/^namespace g2o {$/;"	n
lock	tags/before-github-sync/g2o/core/openmp_mutex.h	/^      void lock() { omp_set_lock(&_lock); }$/;"	f	class:g2o::OpenMPMutex
unlock	tags/before-github-sync/g2o/core/openmp_mutex.h	/^      void unlock() { omp_unset_lock(&_lock); }$/;"	f	class:g2o::OpenMPMutex
~OpenMPMutex	tags/before-github-sync/g2o/core/openmp_mutex.h	/^      ~OpenMPMutex() { omp_destroy_lock(&_lock); }$/;"	f	class:g2o::OpenMPMutex
Edge	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Edge::Edge() :$/;"	f	class:g2o::OptimizableGraph::Edge
OptimizableGraph	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::OptimizableGraph()$/;"	f	class:g2o::OptimizableGraph
Vertex	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Vertex::Vertex() :$/;"	f	class:g2o::OptimizableGraph::Vertex
addEdge	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::addEdge(OptimizableGraph::Edge* e)$/;"	f	class:g2o::OptimizableGraph
addGraph	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::addGraph(OptimizableGraph* g){$/;"	f	class:g2o::OptimizableGraph
addPostIterationAction	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::addPostIterationAction(HyperGraphAction* action)$/;"	f	class:g2o::OptimizableGraph
addPreIterationAction	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::addPreIterationAction(HyperGraphAction* action)$/;"	f	class:g2o::OptimizableGraph
addVertex	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::addVertex(Vertex* v, Data* userData)$/;"	f	class:g2o::OptimizableGraph
chi2	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^double OptimizableGraph::chi2() const$/;"	f	class:g2o::OptimizableGraph
clone	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Edge* OptimizableGraph::Edge::clone() const$/;"	f	class:g2o::OptimizableGraph::Edge
clone	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Vertex* OptimizableGraph::Vertex::clone() const$/;"	f	class:g2o::OptimizableGraph::Vertex
dimensions	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^std::set<int> OptimizableGraph::dimensions() const$/;"	f	class:g2o::OptimizableGraph
discardTop	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::discardTop()$/;"	f	class:g2o::OptimizableGraph
discardTop	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::discardTop(HyperGraph::VertexSet& vset)$/;"	f	class:g2o::OptimizableGraph
estimateDimension	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  int OptimizableGraph::Vertex::estimateDimension() const$/;"	f	class:g2o::OptimizableGraph::Vertex
g2o	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^namespace g2o {$/;"	n	file:
getEstimateData	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Vertex::getEstimateData(double *) const$/;"	f	class:g2o::OptimizableGraph::Vertex
getMeasurementData	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Edge::getMeasurementData(double *) const$/;"	f	class:g2o::OptimizableGraph::Edge
getMinimalEstimateData	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Vertex::getMinimalEstimateData(double *) const$/;"	f	class:g2o::OptimizableGraph::Vertex
isSolverSuitable	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::isSolverSuitable(const SolverProperty& solverProperty, const std::set<int>& vertDims_) const$/;"	f	class:g2o::OptimizableGraph
load	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::load(const char* filename, bool createEdges)$/;"	f	class:g2o::OptimizableGraph
load	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::load(istream& is, bool createEdges)$/;"	f	class:g2o::OptimizableGraph
maxDimension	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^int OptimizableGraph::maxDimension() const{$/;"	f	class:g2o::OptimizableGraph
measurementDimension	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  int OptimizableGraph::Edge::measurementDimension() const$/;"	f	class:g2o::OptimizableGraph::Edge
minimalEstimateDimension	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  int OptimizableGraph::Vertex::minimalEstimateDimension() const$/;"	f	class:g2o::OptimizableGraph::Vertex
optimize	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  int OptimizableGraph::optimize(int \/*iterations*\/, bool \/*online*\/) {return 0;}$/;"	f	class:g2o::OptimizableGraph
pop	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::pop()$/;"	f	class:g2o::OptimizableGraph
pop	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::pop(HyperGraph::VertexSet& vset)$/;"	f	class:g2o::OptimizableGraph
postIteration	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::postIteration(int iter)$/;"	f	class:g2o::OptimizableGraph
preIteration	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::preIteration(int iter)$/;"	f	class:g2o::OptimizableGraph
push	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::push()$/;"	f	class:g2o::OptimizableGraph
push	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::push(HyperGraph::VertexSet& vset)$/;"	f	class:g2o::OptimizableGraph
removePostIterationAction	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::removePostIterationAction(HyperGraphAction* action)$/;"	f	class:g2o::OptimizableGraph
removePreIterationAction	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::removePreIterationAction(HyperGraphAction* action)$/;"	f	class:g2o::OptimizableGraph
save	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::save(const char* filename, int level) const$/;"	f	class:g2o::OptimizableGraph
save	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::save(ostream& os, int level) const$/;"	f	class:g2o::OptimizableGraph
saveSubset	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::saveSubset(ostream& os, HyperGraph::EdgeSet& eset)$/;"	f	class:g2o::OptimizableGraph
saveSubset	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::saveSubset(ostream& os, HyperGraph::VertexSet& vset, int level)$/;"	f	class:g2o::OptimizableGraph
setEstimateData	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Vertex::setEstimateData(const double *)$/;"	f	class:g2o::OptimizableGraph::Vertex
setFixed	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  void OptimizableGraph::setFixed(HyperGraph::VertexSet& vset, bool fixed)$/;"	f	class:g2o::OptimizableGraph
setMeasurementData	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Edge::setMeasurementData(const double *)$/;"	f	class:g2o::OptimizableGraph::Edge
setMeasurementFromState	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Edge::setMeasurementFromState(){$/;"	f	class:g2o::OptimizableGraph::Edge
setMinimalEstimateData	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Vertex::setMinimalEstimateData(const double *)$/;"	f	class:g2o::OptimizableGraph::Vertex
setRenamedTypesFromString	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::setRenamedTypesFromString(const std::string& types)$/;"	f	class:g2o::OptimizableGraph
~OptimizableGraph	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::~OptimizableGraph()$/;"	f	class:g2o::OptimizableGraph
~Vertex	tags/before-github-sync/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Vertex::~Vertex()$/;"	f	class:g2o::OptimizableGraph::Vertex
AT_NUM_ELEMENTS	tags/before-github-sync/g2o/core/optimizable_graph.h	/^      AT_NUM_ELEMENTS, \/\/ keep as last element$/;"	e	enum:g2o::OptimizableGraph::ActionType
AT_POSTITERATION	tags/before-github-sync/g2o/core/optimizable_graph.h	/^      AT_PREITERATION, AT_POSTITERATION,$/;"	e	enum:g2o::OptimizableGraph::ActionType
AT_PREITERATION	tags/before-github-sync/g2o/core/optimizable_graph.h	/^      AT_PREITERATION, AT_POSTITERATION,$/;"	e	enum:g2o::OptimizableGraph::ActionType
ActionType	tags/before-github-sync/g2o/core/optimizable_graph.h	/^    enum ActionType {$/;"	g	struct:g2o::OptimizableGraph
Data	tags/before-github-sync/g2o/core/optimizable_graph.h	/^    struct Data : public HyperGraph::HyperGraphElement$/;"	s	struct:g2o::OptimizableGraph
Edge	tags/before-github-sync/g2o/core/optimizable_graph.h	/^    class Edge: public HyperGraph::Edge {$/;"	c	struct:g2o::OptimizableGraph
EdgeContainer	tags/before-github-sync/g2o/core/optimizable_graph.h	/^    typedef std::vector<OptimizableGraph::Edge*>        EdgeContainer;$/;"	t	struct:g2o::OptimizableGraph
EdgeIDCompare	tags/before-github-sync/g2o/core/optimizable_graph.h	/^    struct EdgeIDCompare {$/;"	s	struct:g2o::OptimizableGraph
G2O__AIS_OPTIMIZABLE_GRAPH_HH_	tags/before-github-sync/g2o/core/optimizable_graph.h	18;"	d
HyperGraphActionSet	tags/before-github-sync/g2o/core/optimizable_graph.h	/^    typedef std::set<HyperGraphAction*>    HyperGraphActionSet;$/;"	t	struct:g2o::OptimizableGraph
OptimizableGraph	tags/before-github-sync/g2o/core/optimizable_graph.h	/^  struct OptimizableGraph : public HyperGraph {$/;"	s	namespace:g2o
Vertex	tags/before-github-sync/g2o/core/optimizable_graph.h	/^    class Vertex : public HyperGraph::Vertex {$/;"	c	struct:g2o::OptimizableGraph
VertexContainer	tags/before-github-sync/g2o/core/optimizable_graph.h	/^    typedef std::vector<OptimizableGraph::Vertex*>      VertexContainer;$/;"	t	struct:g2o::OptimizableGraph
VertexIDCompare	tags/before-github-sync/g2o/core/optimizable_graph.h	/^    struct VertexIDCompare {$/;"	s	struct:g2o::OptimizableGraph
_colInHessian	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        int _colInHessian;$/;"	m	class:g2o::OptimizableGraph::Vertex
_dimension	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        int _dimension;$/;"	m	class:g2o::OptimizableGraph::Edge
_dimension	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        int _dimension;$/;"	m	class:g2o::OptimizableGraph::Vertex
_edge_has_id	tags/before-github-sync/g2o/core/optimizable_graph.h	/^      bool _edge_has_id;$/;"	m	struct:g2o::OptimizableGraph
_fixed	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        bool _fixed;$/;"	m	class:g2o::OptimizableGraph::Vertex
_graph	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        OptimizableGraph* _graph;$/;"	m	class:g2o::OptimizableGraph::Vertex
_graphActions	tags/before-github-sync/g2o/core/optimizable_graph.h	/^      std::vector<HyperGraphActionSet> _graphActions;$/;"	m	struct:g2o::OptimizableGraph
_huberWidth	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        double _huberWidth;$/;"	m	class:g2o::OptimizableGraph::Edge
_internalId	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        long long _internalId;$/;"	m	class:g2o::OptimizableGraph::Edge
_level	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        int _level;$/;"	m	class:g2o::OptimizableGraph::Edge
_lowerGraph	tags/before-github-sync/g2o/core/optimizable_graph.h	/^      OptimizableGraph* _upperGraph, *_lowerGraph;$/;"	m	struct:g2o::OptimizableGraph
_marginalized	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        bool _marginalized;$/;"	m	class:g2o::OptimizableGraph::Vertex
_nextEdgeId	tags/before-github-sync/g2o/core/optimizable_graph.h	/^      long long _nextEdgeId;$/;"	m	struct:g2o::OptimizableGraph
_partialList	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        _partialList; \/\/\/< this is the list of higher level vertices which need to be deleted.$/;"	m	struct:g2o::OptimizableGraph
_quadraticFormMutex	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        OpenMPMutex _quadraticFormMutex;$/;"	m	class:g2o::OptimizableGraph::Vertex
_renamedTypesLookup	tags/before-github-sync/g2o/core/optimizable_graph.h	/^      std::map<std::string, std::string> _renamedTypesLookup;$/;"	m	struct:g2o::OptimizableGraph
_robustKernel	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        bool _robustKernel;$/;"	m	class:g2o::OptimizableGraph::Edge
_taintedList	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        _taintedList, \/\/\/< this is the list of higher level vertices whose connectivity and information has to be recomputed$/;"	m	struct:g2o::OptimizableGraph
_tempIndex	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        int _tempIndex;$/;"	m	class:g2o::OptimizableGraph::Vertex
_upperGraph	tags/before-github-sync/g2o/core/optimizable_graph.h	/^      OptimizableGraph* _upperGraph, *_lowerGraph;$/;"	m	struct:g2o::OptimizableGraph
_userData	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        Data* _userData;$/;"	m	class:g2o::OptimizableGraph::Vertex
colInHessian	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        int colInHessian() const {return _colInHessian;}$/;"	f	class:g2o::OptimizableGraph::Vertex
createFrom	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        virtual Vertex* createFrom() {return 0;}$/;"	f	class:g2o::OptimizableGraph::Edge
createTo	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        virtual Vertex* createTo()   {return 0;}$/;"	f	class:g2o::OptimizableGraph::Edge
dimension	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        int dimension() const { return _dimension;}$/;"	f	class:g2o::OptimizableGraph::Edge
dimension	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        int dimension() const { return _dimension;}$/;"	f	class:g2o::OptimizableGraph::Vertex
fixed	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        bool fixed() const {return _fixed;}$/;"	f	class:g2o::OptimizableGraph::Vertex
g2o	tags/before-github-sync/g2o/core/optimizable_graph.h	/^namespace g2o {$/;"	n
graph	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        const OptimizableGraph* graph() const {return _graph;}$/;"	f	class:g2o::OptimizableGraph::Vertex
huberWidth	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        double huberWidth() const { return _huberWidth;}$/;"	f	class:g2o::OptimizableGraph::Edge
initialEstimatePossible	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to) { (void) from; (void) to; return -1.;}$/;"	f	class:g2o::OptimizableGraph::Edge
internalId	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        long long internalId() const { return _internalId;}$/;"	f	class:g2o::OptimizableGraph::Edge
level	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        int level() const { return _level;}$/;"	f	class:g2o::OptimizableGraph::Edge
lockQuadraticForm	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        void lockQuadraticForm() { _quadraticFormMutex.lock();}$/;"	f	class:g2o::OptimizableGraph::Vertex
marginalized	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        bool marginalized() const {return _marginalized;}$/;"	f	class:g2o::OptimizableGraph::Vertex
operator ()	tags/before-github-sync/g2o/core/optimizable_graph.h	/^      bool operator() (const Edge* e1, const Edge* e2) const$/;"	f	struct:g2o::OptimizableGraph::EdgeIDCompare
operator ()	tags/before-github-sync/g2o/core/optimizable_graph.h	/^      bool operator() (const Vertex* v1, const Vertex* v2) const$/;"	f	struct:g2o::OptimizableGraph::VertexIDCompare
robustKernel	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        bool robustKernel() const { return _robustKernel;}$/;"	f	class:g2o::OptimizableGraph::Edge
setColInHessian	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        void setColInHessian(int c) { _colInHessian = c;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setFixed	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        void setFixed(bool fixed) { _fixed = fixed;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setHuberWidth	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        void setHuberWidth(double hw) { _huberWidth = hw;}$/;"	f	class:g2o::OptimizableGraph::Edge
setId	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        void setId(int id) {_id = id;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setLevel	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        void setLevel(int l) { _level=l;}$/;"	f	class:g2o::OptimizableGraph::Edge
setMarginalized	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        void setMarginalized(bool marginalized) { _marginalized = marginalized;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setRobustKernel	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        void setRobustKernel(bool rk) { _robustKernel = rk;}$/;"	f	class:g2o::OptimizableGraph::Edge
setTempIndex	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        void setTempIndex(int ti) { _tempIndex = ti;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setUserData	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        void setUserData(Data* obs) { _userData = obs;}$/;"	f	class:g2o::OptimizableGraph::Vertex
sqrtOfHuberByNrm	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        inline double sqrtOfHuberByNrm(double delta, double b) const$/;"	f	class:g2o::OptimizableGraph::Edge
tempIndex	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        int tempIndex() const { return _tempIndex;}$/;"	f	class:g2o::OptimizableGraph::Vertex
unlockQuadraticForm	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        void unlockQuadraticForm() { _quadraticFormMutex.unlock();}$/;"	f	class:g2o::OptimizableGraph::Vertex
userData	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        Data* userData() { return _userData; }$/;"	f	class:g2o::OptimizableGraph::Vertex
userData	tags/before-github-sync/g2o/core/optimizable_graph.h	/^        const Data* userData() const { return _userData; }$/;"	f	class:g2o::OptimizableGraph::Vertex
vertex	tags/before-github-sync/g2o/core/optimizable_graph.h	/^    inline Vertex* vertex(int id) { return reinterpret_cast<Vertex*>(HyperGraph::vertex(id));}$/;"	f	struct:g2o::OptimizableGraph
vertex	tags/before-github-sync/g2o/core/optimizable_graph.h	/^    inline const Vertex* vertex (int id) const{ return reinterpret_cast<const Vertex*>(HyperGraph::vertex(id));}$/;"	f	struct:g2o::OptimizableGraph
~Data	tags/before-github-sync/g2o/core/optimizable_graph.h	/^      virtual ~Data() {};$/;"	f	struct:g2o::OptimizableGraph::Data
Solver	tags/before-github-sync/g2o/core/solver.cpp	/^Solver::Solver(SparseOptimizer* optimizer) :$/;"	f	class:g2o::Solver
g2o	tags/before-github-sync/g2o/core/solver.cpp	/^namespace g2o {$/;"	n	file:
resizeVector	tags/before-github-sync/g2o/core/solver.cpp	/^void Solver::resizeVector(size_t sx)$/;"	f	class:g2o::Solver
setAdditionalVectorSpace	tags/before-github-sync/g2o/core/solver.cpp	/^void Solver::setAdditionalVectorSpace(size_t s)$/;"	f	class:g2o::Solver
setLevenberg	tags/before-github-sync/g2o/core/solver.cpp	/^void Solver::setLevenberg(bool levenberg)$/;"	f	class:g2o::Solver
setOptimizer	tags/before-github-sync/g2o/core/solver.cpp	/^void Solver::setOptimizer(SparseOptimizer* optimizer)$/;"	f	class:g2o::Solver
~Solver	tags/before-github-sync/g2o/core/solver.cpp	/^Solver::~Solver()$/;"	f	class:g2o::Solver
G2O_SOLVER_H	tags/before-github-sync/g2o/core/solver.h	18;"	d
Solver	tags/before-github-sync/g2o/core/solver.h	/^  class Solver$/;"	c	namespace:g2o
_additionalVectorSpace	tags/before-github-sync/g2o/core/solver.h	/^      size_t _additionalVectorSpace;$/;"	m	class:g2o::Solver
_b	tags/before-github-sync/g2o/core/solver.h	/^      double* _b;$/;"	m	class:g2o::Solver
_isLevenberg	tags/before-github-sync/g2o/core/solver.h	/^      bool _isLevenberg; \/\/\/< the system we gonna solve is a Levenberg-Marquardt system$/;"	m	class:g2o::Solver
_maxXSize	tags/before-github-sync/g2o/core/solver.h	/^      size_t _xSize, _maxXSize;$/;"	m	class:g2o::Solver
_optimizer	tags/before-github-sync/g2o/core/solver.h	/^      SparseOptimizer* _optimizer;$/;"	m	class:g2o::Solver
_x	tags/before-github-sync/g2o/core/solver.h	/^      double* _x;$/;"	m	class:g2o::Solver
_xSize	tags/before-github-sync/g2o/core/solver.h	/^      size_t _xSize, _maxXSize;$/;"	m	class:g2o::Solver
additionalVectorSpace	tags/before-github-sync/g2o/core/solver.h	/^      size_t additionalVectorSpace() const { return _additionalVectorSpace;}$/;"	f	class:g2o::Solver
b	tags/before-github-sync/g2o/core/solver.h	/^      const double* b() const { return _b;}$/;"	f	class:g2o::Solver
b	tags/before-github-sync/g2o/core/solver.h	/^      double* b() { return _b;}$/;"	f	class:g2o::Solver
g2o	tags/before-github-sync/g2o/core/solver.h	/^namespace g2o {$/;"	n
levenberg	tags/before-github-sync/g2o/core/solver.h	/^      bool levenberg() const { return _isLevenberg;}$/;"	f	class:g2o::Solver
optimizer	tags/before-github-sync/g2o/core/solver.h	/^      SparseOptimizer* optimizer() const { return _optimizer;}$/;"	f	class:g2o::Solver
supportsSchur	tags/before-github-sync/g2o/core/solver.h	/^      virtual bool supportsSchur() {return false;}$/;"	f	class:g2o::Solver
vectorSize	tags/before-github-sync/g2o/core/solver.h	/^      size_t vectorSize() const { return _xSize;}$/;"	f	class:g2o::Solver
x	tags/before-github-sync/g2o/core/solver.h	/^      const double* x() const { return _x;}$/;"	f	class:g2o::Solver
x	tags/before-github-sync/g2o/core/solver.h	/^      double* x() { return _x;}$/;"	f	class:g2o::Solver
AbstractSolverCreator	tags/before-github-sync/g2o/core/solver_factory.cpp	/^  AbstractSolverCreator::AbstractSolverCreator(const SolverProperty& p) :$/;"	f	class:g2o::AbstractSolverCreator
SolverFactory	tags/before-github-sync/g2o/core/solver_factory.cpp	/^  SolverFactory::SolverFactory()$/;"	f	class:g2o::SolverFactory
construct	tags/before-github-sync/g2o/core/solver_factory.cpp	/^  Solver* SolverFactory::construct(const std::string& name, SparseOptimizer* optimizer, SolverProperty& solverProperty) const$/;"	f	class:g2o::SolverFactory
destroy	tags/before-github-sync/g2o/core/solver_factory.cpp	/^  void SolverFactory::destroy()$/;"	f	class:g2o::SolverFactory
factoryInstance	tags/before-github-sync/g2o/core/solver_factory.cpp	/^  SolverFactory* SolverFactory::factoryInstance = 0;$/;"	m	class:g2o::SolverFactory	file:
findSolver	tags/before-github-sync/g2o/core/solver_factory.cpp	/^  SolverFactory::CreatorList::const_iterator SolverFactory::findSolver(const std::string& name) const$/;"	f	class:g2o::SolverFactory
findSolver	tags/before-github-sync/g2o/core/solver_factory.cpp	/^  SolverFactory::CreatorList::iterator SolverFactory::findSolver(const std::string& name)$/;"	f	class:g2o::SolverFactory
g2o	tags/before-github-sync/g2o/core/solver_factory.cpp	/^namespace g2o {$/;"	n	file:
instance	tags/before-github-sync/g2o/core/solver_factory.cpp	/^  SolverFactory* SolverFactory::instance()$/;"	f	class:g2o::SolverFactory
listSolvers	tags/before-github-sync/g2o/core/solver_factory.cpp	/^  void SolverFactory::listSolvers(std::ostream& os) const$/;"	f	class:g2o::SolverFactory
registerSolver	tags/before-github-sync/g2o/core/solver_factory.cpp	/^  void SolverFactory::registerSolver(AbstractSolverCreator* c)$/;"	f	class:g2o::SolverFactory
~SolverFactory	tags/before-github-sync/g2o/core/solver_factory.cpp	/^  SolverFactory::~SolverFactory()$/;"	f	class:g2o::SolverFactory
AbstractSolverCreator	tags/before-github-sync/g2o/core/solver_factory.h	/^  class AbstractSolverCreator$/;"	c	namespace:g2o
CreatorList	tags/before-github-sync/g2o/core/solver_factory.h	/^      typedef std::list<AbstractSolverCreator*>      CreatorList;$/;"	t	class:g2o::SolverFactory
G2O_SOLVER_FACTORY_H	tags/before-github-sync/g2o/core/solver_factory.h	18;"	d
SolverFactory	tags/before-github-sync/g2o/core/solver_factory.h	/^  class SolverFactory$/;"	c	namespace:g2o
_creator	tags/before-github-sync/g2o/core/solver_factory.h	/^      CreatorList _creator;$/;"	m	class:g2o::SolverFactory
_property	tags/before-github-sync/g2o/core/solver_factory.h	/^      SolverProperty _property;$/;"	m	class:g2o::AbstractSolverCreator
creatorList	tags/before-github-sync/g2o/core/solver_factory.h	/^      const CreatorList& creatorList() const { return _creator;}$/;"	f	class:g2o::SolverFactory
factoryInstance	tags/before-github-sync/g2o/core/solver_factory.h	/^      static SolverFactory* factoryInstance;$/;"	m	class:g2o::SolverFactory
g2o	tags/before-github-sync/g2o/core/solver_factory.h	/^namespace g2o {$/;"	n
property	tags/before-github-sync/g2o/core/solver_factory.h	/^      const SolverProperty& property() const { return _property;}$/;"	f	class:g2o::AbstractSolverCreator
G2O_SOLVER_PROPERTY_H	tags/before-github-sync/g2o/core/solver_property.h	18;"	d
SolverProperty	tags/before-github-sync/g2o/core/solver_property.h	/^  SolverProperty() :$/;"	f	struct:g2o::SolverProperty
SolverProperty	tags/before-github-sync/g2o/core/solver_property.h	/^  SolverProperty(const std::string& name_, const std::string& desc_, const std::string& type_, bool requiresMarginalize_, int poseDim_, int landmarkDim_) :$/;"	f	struct:g2o::SolverProperty
SolverProperty	tags/before-github-sync/g2o/core/solver_property.h	/^struct SolverProperty$/;"	s	namespace:g2o
desc	tags/before-github-sync/g2o/core/solver_property.h	/^  std::string desc;           \/\/\/< short description of the solver$/;"	m	struct:g2o::SolverProperty
g2o	tags/before-github-sync/g2o/core/solver_property.h	/^namespace g2o {$/;"	n
landmarkDim	tags/before-github-sync/g2o/core/solver_property.h	/^  int landmarkDim;            \/\/\/< dimension of the landmar vertices (-1 if variable)$/;"	m	struct:g2o::SolverProperty
name	tags/before-github-sync/g2o/core/solver_property.h	/^  std::string name;           \/\/\/< name of the solver, e.g., var$/;"	m	struct:g2o::SolverProperty
poseDim	tags/before-github-sync/g2o/core/solver_property.h	/^  int poseDim;                \/\/\/< dimension of the pose vertices (-1 if variable)$/;"	m	struct:g2o::SolverProperty
requiresMarginalize	tags/before-github-sync/g2o/core/solver_property.h	/^  bool requiresMarginalize;   \/\/\/< whether the solver requires marginalization of landmarks$/;"	m	struct:g2o::SolverProperty
type	tags/before-github-sync/g2o/core/solver_property.h	/^  std::string type;           \/\/\/< type of solver, e.g., "CSparse Cholesky", "PCG"$/;"	m	struct:g2o::SolverProperty
G2O___SPARSE_BLOCK_MATRIX__	tags/before-github-sync/g2o/core/sparse_block_matrix.h	18;"	d
IntBlockMap	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^    typedef std::map<int, SparseMatrixBlock*> IntBlockMap;$/;"	t	class:g2o::SparseBlockMatrix
SparseBlockMatrix	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^class SparseBlockMatrix {$/;"	c	namespace:g2o
SparseBlockMatrixXd	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^  typedef SparseBlockMatrix<MatrixXd> SparseBlockMatrixXd;   $/;"	t	namespace:g2o
SparseMatrixBlock	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^    typedef MatrixType SparseMatrixBlock;$/;"	t	class:g2o::SparseBlockMatrix
_blockCols	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^    std::vector <IntBlockMap> _blockCols;$/;"	m	class:g2o::SparseBlockMatrix
_colBlockIndices	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^    std::vector<int> _colBlockIndices; \/\/\/< vector of the indices of the blocks along the cols$/;"	m	class:g2o::SparseBlockMatrix
_hasStorage	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^    bool _hasStorage;$/;"	m	class:g2o::SparseBlockMatrix
_rowBlockIndices	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^    std::vector<int> _rowBlockIndices; \/\/\/< vector of the indices of the blocks along the rows.$/;"	m	class:g2o::SparseBlockMatrix
blockCols	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^    const std::vector<IntBlockMap>& blockCols() const { return _blockCols;}$/;"	f	class:g2o::SparseBlockMatrix
blockCols	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^    std::vector<IntBlockMap>& blockCols() { return _blockCols;}$/;"	f	class:g2o::SparseBlockMatrix
colBaseOfBlock	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^    inline int colBaseOfBlock(int c) const { return c ? _colBlockIndices[c-1] : 0 ; }$/;"	f	class:g2o::SparseBlockMatrix
colBlockIndices	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^    const std::vector<int>& colBlockIndices() const { return _colBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrix
colBlockIndices	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^    std::vector<int>& colBlockIndices() { return _colBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrix
cols	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^    inline int cols() const {return _colBlockIndices.size() ? _colBlockIndices.back() : 0;}$/;"	f	class:g2o::SparseBlockMatrix
colsOfBlock	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^    inline int colsOfBlock(int c) const { return c ? _colBlockIndices[c] - _colBlockIndices[c-1] : _colBlockIndices[0]; }$/;"	f	class:g2o::SparseBlockMatrix
g2o	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^namespace g2o {$/;"	n
rowBaseOfBlock	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^    inline int rowBaseOfBlock(int r) const { return r ? _rowBlockIndices[r-1] : 0 ; }$/;"	f	class:g2o::SparseBlockMatrix
rowBlockIndices	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^    const std::vector<int>& rowBlockIndices() const { return _rowBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrix
rowBlockIndices	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^    std::vector<int>& rowBlockIndices() { return _rowBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrix
rows	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^    inline int rows() const {return _rowBlockIndices.size() ? _rowBlockIndices.back() : 0;}$/;"	f	class:g2o::SparseBlockMatrix
rowsOfBlock	tags/before-github-sync/g2o/core/sparse_block_matrix.h	/^    inline int rowsOfBlock(int r) const { return r ? _rowBlockIndices[r] - _rowBlockIndices[r-1] : _rowBlockIndices[0] ; }$/;"	f	class:g2o::SparseBlockMatrix
SparseBlockMatrix	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  SparseBlockMatrix<MatrixType>::SparseBlockMatrix( ):$/;"	f	class:g2o::SparseBlockMatrix
SparseBlockMatrix	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  SparseBlockMatrix<MatrixType>::SparseBlockMatrix( const int * rbi, const int* cbi, int rb, int cb, bool hasStorage):$/;"	f	class:g2o::SparseBlockMatrix
TripletColSort	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^    struct TripletColSort$/;"	s	namespace:g2o::<anonymous>
TripletEntry	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^      TripletEntry(int r_, int c_, double x_) : r(r_), c(c_), x(x_) {}$/;"	f	struct:g2o::<anonymous>::TripletEntry
TripletEntry	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^    struct TripletEntry$/;"	s	namespace:g2o::<anonymous>
add	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  bool SparseBlockMatrix<MatrixType>::add(SparseBlockMatrix*& dest) const {$/;"	f	class:g2o::SparseBlockMatrix
atxpy	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  inline void atxpy(const MatrixType& A, Map<const VectorXd>& x, int xoff, Map<VectorXd>& y, int yoff)$/;"	f	namespace:g2o
atxpy	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  inline void atxpy(const MatrixXd& A, Map<const VectorXd>& x, int xoff, Map<VectorXd>& y, int yoff)$/;"	f	namespace:g2o
axpy	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  inline void axpy(const MatrixType& A, const Map<VectorXd>& x, int xoff, Map<VectorXd>& y, int yoff)$/;"	f	namespace:g2o
axpy	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  inline void axpy(const MatrixXd& A, const Map<VectorXd>& x, int xoff, Map<VectorXd>& y, int yoff)$/;"	f	namespace:g2o
block	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  const typename SparseBlockMatrix<MatrixType>::SparseMatrixBlock* SparseBlockMatrix<MatrixType>::block(int r, int c) const {$/;"	f	class:g2o::SparseBlockMatrix
block	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  typename SparseBlockMatrix<MatrixType>::SparseMatrixBlock* SparseBlockMatrix<MatrixType>::block(int r, int c, bool alloc) {$/;"	f	class:g2o::SparseBlockMatrix
c	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^      int r, c;$/;"	m	struct:g2o::<anonymous>::TripletEntry
clear	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  void SparseBlockMatrix<MatrixType>::clear(bool dealloc) {$/;"	f	class:g2o::SparseBlockMatrix
clone	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  SparseBlockMatrix<MatrixType>* SparseBlockMatrix<MatrixType>::clone() const {$/;"	f	class:g2o::SparseBlockMatrix
fillBlockStructure	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  void SparseBlockMatrix<MatrixType>::fillBlockStructure(MatrixStructure& ms) const$/;"	f	class:g2o::SparseBlockMatrix
fillCCS	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  int SparseBlockMatrix<MatrixType>::fillCCS(double* Cx, bool upperTriangle) const$/;"	f	class:g2o::SparseBlockMatrix
fillCCS	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  int SparseBlockMatrix<MatrixType>::fillCCS(int* Cp, int* Ci, double* Cx, bool upperTriangle) const$/;"	f	class:g2o::SparseBlockMatrix
g2o	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^namespace g2o {$/;"	n
multiply	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  bool SparseBlockMatrix<MatrixType>::multiply(SparseBlockMatrix<MatrixResultType>*& dest, const SparseBlockMatrix<MatrixFactorType> * M) const {$/;"	f	class:g2o::SparseBlockMatrix
multiply	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  void SparseBlockMatrix<MatrixType>::multiply(double*& dest, const double* src) const {$/;"	f	class:g2o::SparseBlockMatrix
nonZeroBlocks	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  size_t SparseBlockMatrix<MatrixType>::nonZeroBlocks() const {$/;"	f	class:g2o::SparseBlockMatrix
nonZeros	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  size_t SparseBlockMatrix<MatrixType>::nonZeros() const{$/;"	f	class:g2o::SparseBlockMatrix
operator ()	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^      bool operator()(const TripletEntry& e1, const TripletEntry& e2) const$/;"	f	struct:g2o::<anonymous>::TripletColSort
operator <<	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  std::ostream& operator << (std::ostream& os, const SparseBlockMatrix<MatrixType>& m){$/;"	f	namespace:g2o
r	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^      int r, c;$/;"	m	struct:g2o::<anonymous>::TripletEntry
rightMultiply	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  void SparseBlockMatrix<MatrixType>::rightMultiply(double*& dest, const double* src) const {$/;"	f	class:g2o::SparseBlockMatrix
scale	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  void SparseBlockMatrix<MatrixType>::scale(double a_) {$/;"	f	class:g2o::SparseBlockMatrix
slice	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  SparseBlockMatrix<MatrixType>*  SparseBlockMatrix<MatrixType>::slice(int rmin, int rmax, int cmin, int cmax, bool alloc) const {$/;"	f	class:g2o::SparseBlockMatrix
symmPermutation	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  bool SparseBlockMatrix<MatrixType>::symmPermutation(SparseBlockMatrix<MatrixType>*& dest, const int* pinv, bool  upperTriangle) const{$/;"	f	class:g2o::SparseBlockMatrix
transpose	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  bool SparseBlockMatrix<MatrixType>::transpose(SparseBlockMatrix<MatrixTransposedType>*& dest) const {$/;"	f	class:g2o::SparseBlockMatrix
writeOctave	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  bool SparseBlockMatrix<MatrixType>::writeOctave(const char* filename, bool upperTriangle) const$/;"	f	class:g2o::SparseBlockMatrix
x	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^      double x;$/;"	m	struct:g2o::<anonymous>::TripletEntry
~SparseBlockMatrix	tags/before-github-sync/g2o/core/sparse_block_matrix.hpp	/^  SparseBlockMatrix<MatrixType>::~SparseBlockMatrix(){$/;"	f	class:g2o::SparseBlockMatrix
SparseBlockMatrixX	tags/before-github-sync/g2o/core/sparse_block_matrix_test.cpp	/^SparseBlockMatrixX;$/;"	t	file:
main	tags/before-github-sync/g2o/core/sparse_block_matrix_test.cpp	/^int main (int argc, char** argv){$/;"	f
operator <<	tags/before-github-sync/g2o/core/sparse_block_matrix_test.cpp	/^std::ostream& operator << (std::ostream& os, const SparseBlockMatrixX::SparseMatrixBlock& m) {$/;"	f
G2O_STRUCTURE_ONLY_SOLVER_H	tags/before-github-sync/g2o/core/structure_only_solver.h	18;"	d
StructureOnlySolver	tags/before-github-sync/g2o/core/structure_only_solver.h	/^  StructureOnlySolver()$/;"	f	class:g2o::StructureOnlySolver
StructureOnlySolver	tags/before-github-sync/g2o/core/structure_only_solver.h	/^class StructureOnlySolver$/;"	c	namespace:g2o
_verbose	tags/before-github-sync/g2o/core/structure_only_solver.h	/^  bool _verbose;$/;"	m	class:g2o::StructureOnlySolver
calc	tags/before-github-sync/g2o/core/structure_only_solver.h	/^  void calc(g2o::HyperGraph::VertexIDMap & vertices,$/;"	f	class:g2o::StructureOnlySolver
g2o	tags/before-github-sync/g2o/core/structure_only_solver.h	/^namespace g2o$/;"	n
setVerbose	tags/before-github-sync/g2o/core/structure_only_solver.h	/^  void setVerbose(bool verbose)$/;"	f	class:g2o::StructureOnlySolver
verbose	tags/before-github-sync/g2o/core/structure_only_solver.h	/^  bool verbose() const$/;"	f	class:g2o::StructureOnlySolver
Sample	tags/before-github-sync/g2o/examples/ba/ba_demo.cpp	/^class Sample$/;"	c	file:
gaussian	tags/before-github-sync/g2o/examples/ba/ba_demo.cpp	/^double Sample::gaussian(double sigma)$/;"	f	class:Sample
gen_int	tags/before-github-sync/g2o/examples/ba/ba_demo.cpp	/^  static tr1::mt19937 gen_int;$/;"	m	class:Sample	file:
gen_int	tags/before-github-sync/g2o/examples/ba/ba_demo.cpp	/^tr1::mt19937 Sample::gen_int;$/;"	m	class:Sample	file:
gen_real	tags/before-github-sync/g2o/examples/ba/ba_demo.cpp	/^  static tr1::ranlux_base_01 gen_real;$/;"	m	class:Sample	file:
gen_real	tags/before-github-sync/g2o/examples/ba/ba_demo.cpp	/^tr1::ranlux_base_01 Sample::gen_real;$/;"	m	class:Sample	file:
main	tags/before-github-sync/g2o/examples/ba/ba_demo.cpp	/^int main(int argc, const char* argv[])$/;"	f
uniform	tags/before-github-sync/g2o/examples/ba/ba_demo.cpp	/^double Sample::uniform()$/;"	f	class:Sample
uniform	tags/before-github-sync/g2o/examples/ba/ba_demo.cpp	/^int Sample::uniform(int from, int to)$/;"	f	class:Sample
Sample	tags/before-github-sync/g2o/examples/icp/gicp_demo.cpp	/^  class Sample$/;"	c	file:
gaussian	tags/before-github-sync/g2o/examples/icp/gicp_demo.cpp	/^  double Sample::gaussian(double sigma)$/;"	f	class:Sample
gen_int	tags/before-github-sync/g2o/examples/icp/gicp_demo.cpp	/^    static tr1::mt19937 gen_int;$/;"	m	class:Sample	file:
gen_int	tags/before-github-sync/g2o/examples/icp/gicp_demo.cpp	/^  tr1::mt19937 Sample::gen_int;$/;"	m	class:Sample	file:
gen_real	tags/before-github-sync/g2o/examples/icp/gicp_demo.cpp	/^    static tr1::ranlux_base_01 gen_real;$/;"	m	class:Sample	file:
gen_real	tags/before-github-sync/g2o/examples/icp/gicp_demo.cpp	/^ tr1::ranlux_base_01 Sample::gen_real;$/;"	m	class:Sample	file:
main	tags/before-github-sync/g2o/examples/icp/gicp_demo.cpp	/^int main()$/;"	f
uniform	tags/before-github-sync/g2o/examples/icp/gicp_demo.cpp	/^  double Sample::uniform()$/;"	f	class:Sample
uniform	tags/before-github-sync/g2o/examples/icp/gicp_demo.cpp	/^  int Sample::uniform(int from, int to)$/;"	f	class:Sample
Sample	tags/before-github-sync/g2o/examples/icp/gicp_sba_demo.cpp	/^  class Sample$/;"	c	file:
gaussian	tags/before-github-sync/g2o/examples/icp/gicp_sba_demo.cpp	/^  double Sample::gaussian(double sigma)$/;"	f	class:Sample
gen_int	tags/before-github-sync/g2o/examples/icp/gicp_sba_demo.cpp	/^    static tr1::mt19937 gen_int;$/;"	m	class:Sample	file:
gen_int	tags/before-github-sync/g2o/examples/icp/gicp_sba_demo.cpp	/^  tr1::mt19937 Sample::gen_int;$/;"	m	class:Sample	file:
gen_real	tags/before-github-sync/g2o/examples/icp/gicp_sba_demo.cpp	/^    static tr1::ranlux_base_01 gen_real;$/;"	m	class:Sample	file:
gen_real	tags/before-github-sync/g2o/examples/icp/gicp_sba_demo.cpp	/^ tr1::ranlux_base_01 Sample::gen_real;$/;"	m	class:Sample	file:
main	tags/before-github-sync/g2o/examples/icp/gicp_sba_demo.cpp	/^int main(int argc, char **argv)$/;"	f
uniform	tags/before-github-sync/g2o/examples/icp/gicp_sba_demo.cpp	/^  double Sample::uniform()$/;"	f	class:Sample
uniform	tags/before-github-sync/g2o/examples/icp/gicp_sba_demo.cpp	/^  int Sample::uniform(int from, int to)$/;"	f	class:Sample
Sample	tags/before-github-sync/g2o/examples/sba/sba_demo.cpp	/^class Sample$/;"	c	file:
gaussian	tags/before-github-sync/g2o/examples/sba/sba_demo.cpp	/^double Sample::gaussian(double sigma)$/;"	f	class:Sample
gen_int	tags/before-github-sync/g2o/examples/sba/sba_demo.cpp	/^  static tr1::mt19937 gen_int;$/;"	m	class:Sample	file:
gen_int	tags/before-github-sync/g2o/examples/sba/sba_demo.cpp	/^tr1::mt19937 Sample::gen_int;$/;"	m	class:Sample	file:
gen_real	tags/before-github-sync/g2o/examples/sba/sba_demo.cpp	/^  static tr1::ranlux_base_01 gen_real;$/;"	m	class:Sample	file:
gen_real	tags/before-github-sync/g2o/examples/sba/sba_demo.cpp	/^tr1::ranlux_base_01 Sample::gen_real;$/;"	m	class:Sample	file:
main	tags/before-github-sync/g2o/examples/sba/sba_demo.cpp	/^int main(int argc, const char* argv[])$/;"	f
uniform	tags/before-github-sync/g2o/examples/sba/sba_demo.cpp	/^double Sample::uniform()$/;"	f	class:Sample
uniform	tags/before-github-sync/g2o/examples/sba/sba_demo.cpp	/^int Sample::uniform(int from, int to)$/;"	f	class:Sample
GLUWrapper	tags/before-github-sync/g2o/examples/slam2d/draw_helpers.cpp	/^        GLUWrapper()$/;"	f	class:g2o::<anonymous>::GLUWrapper
GLUWrapper	tags/before-github-sync/g2o/examples/slam2d/draw_helpers.cpp	/^    class GLUWrapper$/;"	c	namespace:g2o::<anonymous>	file:
_quadratic	tags/before-github-sync/g2o/examples/slam2d/draw_helpers.cpp	/^        GLUquadricObj* _quadratic;;$/;"	m	class:g2o::<anonymous>::GLUWrapper	file:
drawCircle	tags/before-github-sync/g2o/examples/slam2d/draw_helpers.cpp	/^  void drawCircle(GLfloat radius, int segments)$/;"	f	namespace:g2o
drawDisk	tags/before-github-sync/g2o/examples/slam2d/draw_helpers.cpp	/^  void drawDisk(GLfloat radius)$/;"	f	namespace:g2o
g2o	tags/before-github-sync/g2o/examples/slam2d/draw_helpers.cpp	/^namespace g2o {$/;"	n	file:
getQuadradic	tags/before-github-sync/g2o/examples/slam2d/draw_helpers.cpp	/^        static GLUquadricObj* getQuadradic()$/;"	f	class:g2o::<anonymous>::GLUWrapper
~GLUWrapper	tags/before-github-sync/g2o/examples/slam2d/draw_helpers.cpp	/^        ~GLUWrapper()$/;"	f	class:g2o::<anonymous>::GLUWrapper
G2O_DRAW_HELPERS_H	tags/before-github-sync/g2o/examples/slam2d/draw_helpers.h	20;"	d
g2o	tags/before-github-sync/g2o/examples/slam2d/draw_helpers.h	/^namespace g2o {$/;"	n
MainWindow	tags/before-github-sync/g2o/examples/slam2d/main_window.cpp	/^MainWindow::MainWindow(QWidget * parent, Qt::WindowFlags flags) :$/;"	f	class:MainWindow
fixGraph	tags/before-github-sync/g2o/examples/slam2d/main_window.cpp	/^void MainWindow::fixGraph()$/;"	f	class:MainWindow
on_actionLoad_triggered	tags/before-github-sync/g2o/examples/slam2d/main_window.cpp	/^void MainWindow::on_actionLoad_triggered(bool)$/;"	f	class:MainWindow
on_actionQuit_triggered	tags/before-github-sync/g2o/examples/slam2d/main_window.cpp	/^void MainWindow::on_actionQuit_triggered(bool)$/;"	f	class:MainWindow
on_actionSave_triggered	tags/before-github-sync/g2o/examples/slam2d/main_window.cpp	/^void MainWindow::on_actionSave_triggered(bool)$/;"	f	class:MainWindow
on_btnInitialGuess_clicked	tags/before-github-sync/g2o/examples/slam2d/main_window.cpp	/^void MainWindow::on_btnInitialGuess_clicked()$/;"	f	class:MainWindow
on_btnOptimize_clicked	tags/before-github-sync/g2o/examples/slam2d/main_window.cpp	/^void MainWindow::on_btnOptimize_clicked()$/;"	f	class:MainWindow
~MainWindow	tags/before-github-sync/g2o/examples/slam2d/main_window.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow
G2O_MAIN_WINDOW_H	tags/before-github-sync/g2o/examples/slam2d/main_window.h	20;"	d
MainWindow	tags/before-github-sync/g2o/examples/slam2d/main_window.h	/^class MainWindow : public QMainWindow, public Ui::BaseMainWindow$/;"	c
main	tags/before-github-sync/g2o/examples/slam2d/slam2d_g2o.cpp	/^int main(int argc, char** argv)$/;"	f
Slam2DViewer	tags/before-github-sync/g2o/examples/slam2d/slam2d_viewer.cpp	/^Slam2DViewer::Slam2DViewer(QWidget* parent, const QGLWidget* shareWidget, Qt::WFlags flags) :$/;"	f	class:g2o::Slam2DViewer
StandardCamera	tags/before-github-sync/g2o/examples/slam2d/slam2d_viewer.cpp	/^      StandardCamera() : _standard(true) {};$/;"	f	class:g2o::<anonymous>::StandardCamera
StandardCamera	tags/before-github-sync/g2o/examples/slam2d/slam2d_viewer.cpp	/^  class StandardCamera : public qglviewer::Camera$/;"	c	namespace:g2o::<anonymous>	file:
_standard	tags/before-github-sync/g2o/examples/slam2d/slam2d_viewer.cpp	/^      bool _standard;$/;"	m	class:g2o::<anonymous>::StandardCamera	file:
draw	tags/before-github-sync/g2o/examples/slam2d/slam2d_viewer.cpp	/^void Slam2DViewer::draw()$/;"	f	class:g2o::Slam2DViewer
drawCov	tags/before-github-sync/g2o/examples/slam2d/slam2d_viewer.cpp	/^  void drawCov(const Eigen::Vector2d& p, const Eigen::MatrixBase<Derived>& cov)$/;"	f	namespace:g2o::<anonymous>
drawSE2	tags/before-github-sync/g2o/examples/slam2d/slam2d_viewer.cpp	/^  void drawSE2(const VertexSE2* v)$/;"	f	namespace:g2o::<anonymous>
g2o	tags/before-github-sync/g2o/examples/slam2d/slam2d_viewer.cpp	/^namespace g2o {$/;"	n	file:
init	tags/before-github-sync/g2o/examples/slam2d/slam2d_viewer.cpp	/^void Slam2DViewer::init()$/;"	f	class:g2o::Slam2DViewer
standard	tags/before-github-sync/g2o/examples/slam2d/slam2d_viewer.cpp	/^      bool& standard() {return _standard;}$/;"	f	class:g2o::<anonymous>::StandardCamera
standard	tags/before-github-sync/g2o/examples/slam2d/slam2d_viewer.cpp	/^      const bool& standard() const {return _standard;}$/;"	f	class:g2o::<anonymous>::StandardCamera
zFar	tags/before-github-sync/g2o/examples/slam2d/slam2d_viewer.cpp	/^      float zFar() const$/;"	f	class:g2o::<anonymous>::StandardCamera
zNear	tags/before-github-sync/g2o/examples/slam2d/slam2d_viewer.cpp	/^      float zNear() const {$/;"	f	class:g2o::<anonymous>::StandardCamera
~Slam2DViewer	tags/before-github-sync/g2o/examples/slam2d/slam2d_viewer.cpp	/^Slam2DViewer::~Slam2DViewer()$/;"	f	class:g2o::Slam2DViewer
G2O_QGL_GRAPH_VIEWER_H	tags/before-github-sync/g2o/examples/slam2d/slam2d_viewer.h	20;"	d
Slam2DViewer	tags/before-github-sync/g2o/examples/slam2d/slam2d_viewer.h	/^  class Slam2DViewer : public QGLViewer$/;"	c	namespace:g2o
drawCovariance	tags/before-github-sync/g2o/examples/slam2d/slam2d_viewer.h	/^      bool drawCovariance;$/;"	m	class:g2o::Slam2DViewer
g2o	tags/before-github-sync/g2o/examples/slam2d/slam2d_viewer.h	/^namespace g2o {$/;"	n
graph	tags/before-github-sync/g2o/examples/slam2d/slam2d_viewer.h	/^      SparseOptimizer* graph;$/;"	m	class:g2o::Slam2DViewer
EdgeSE2	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2.cpp	/^    EdgeSE2::EdgeSE2() :$/;"	f	class:g2o::tutorial::EdgeSE2
g2o	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2.cpp	/^namespace g2o {$/;"	n	file:
read	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2.cpp	/^    bool EdgeSE2::read(std::istream& is)$/;"	f	class:g2o::tutorial::EdgeSE2
tutorial	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2.cpp	/^  namespace tutorial {$/;"	n	namespace:g2o	file:
write	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2.cpp	/^    bool EdgeSE2::write(std::ostream& os) const$/;"	f	class:g2o::tutorial::EdgeSE2
EdgeSE2	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2.h	/^    class EdgeSE2 : public BaseBinaryEdge<3, SE2, VertexSE2, VertexSE2>$/;"	c	namespace:g2o::tutorial
G2O_TUTORIAL_EDGE_SE2_H	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2.h	18;"	d
computeError	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2.h	/^        void computeError()$/;"	f	class:g2o::tutorial::EdgeSE2
g2o	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2.h	/^namespace g2o {$/;"	n
tutorial	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2.h	/^  namespace tutorial {$/;"	n	namespace:g2o
EdgeSE2PointXY	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2_pointxy.cpp	/^    EdgeSE2PointXY::EdgeSE2PointXY() :$/;"	f	class:g2o::tutorial::EdgeSE2PointXY
g2o	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2_pointxy.cpp	/^namespace g2o {$/;"	n	file:
read	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2_pointxy.cpp	/^    bool EdgeSE2PointXY::read(std::istream& is)$/;"	f	class:g2o::tutorial::EdgeSE2PointXY
tutorial	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2_pointxy.cpp	/^  namespace tutorial {$/;"	n	namespace:g2o	file:
write	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2_pointxy.cpp	/^    bool EdgeSE2PointXY::write(std::ostream& os) const$/;"	f	class:g2o::tutorial::EdgeSE2PointXY
EdgeSE2PointXY	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2_pointxy.h	/^    class EdgeSE2PointXY : public BaseBinaryEdge<2, Eigen::Vector2d, VertexSE2, VertexPointXY>$/;"	c	namespace:g2o::tutorial
G2O_TUTORIAL_EDGE_SE2_POINT_XY_H	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2_pointxy.h	18;"	d
computeError	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2_pointxy.h	/^        void computeError()$/;"	f	class:g2o::tutorial::EdgeSE2PointXY
g2o	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2_pointxy.h	/^namespace g2o {$/;"	n
tutorial	tags/before-github-sync/g2o/examples/tutorial_slam2d/edge_se2_pointxy.h	/^  namespace tutorial {$/;"	n	namespace:g2o
G2O_RAND_HH	tags/before-github-sync/g2o/examples/tutorial_slam2d/rand.h	18;"	d
Rand	tags/before-github-sync/g2o/examples/tutorial_slam2d/rand.h	/^    class Rand$/;"	c	namespace:g2o::tutorial
g2o	tags/before-github-sync/g2o/examples/tutorial_slam2d/rand.h	/^namespace g2o {$/;"	n
gauss_rand	tags/before-github-sync/g2o/examples/tutorial_slam2d/rand.h	/^        static double gauss_rand(double mean, double sigma)$/;"	f	class:g2o::tutorial::Rand
seed_rand	tags/before-github-sync/g2o/examples/tutorial_slam2d/rand.h	/^        static void seed_rand()$/;"	f	class:g2o::tutorial::Rand
seed_rand	tags/before-github-sync/g2o/examples/tutorial_slam2d/rand.h	/^        static void seed_rand(unsigned int seed)$/;"	f	class:g2o::tutorial::Rand
tutorial	tags/before-github-sync/g2o/examples/tutorial_slam2d/rand.h	/^  namespace tutorial {$/;"	n	namespace:g2o
uniform_rand	tags/before-github-sync/g2o/examples/tutorial_slam2d/rand.h	/^        static double uniform_rand(double lowerBndr, double upperBndr)$/;"	f	class:g2o::tutorial::Rand
G2O_TUTORIAL_SE2_H	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	18;"	d
SE2	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	/^          SE2():_R(0),_t(0,0){}$/;"	f	class:g2o::tutorial::SE2
SE2	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	/^        SE2(double x, double y, double theta):_R(theta),_t(x,y){}$/;"	f	class:g2o::tutorial::SE2
SE2	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	/^    class SE2 {$/;"	c	namespace:g2o::tutorial
_R	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	/^        Rotation2Dd _R;$/;"	m	class:g2o::tutorial::SE2
_t	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	/^        Vector2d _t;$/;"	m	class:g2o::tutorial::SE2
fromVector	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	/^        void fromVector (const Vector3d& v){$/;"	f	class:g2o::tutorial::SE2
g2o	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	/^namespace g2o {$/;"	n
inverse	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	/^        SE2 inverse() const{$/;"	f	class:g2o::tutorial::SE2
operator *	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	/^        SE2 operator * (const SE2& tr2) const{$/;"	f	class:g2o::tutorial::SE2
operator *	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	/^        Vector2d operator * (const Vector2d& v) const {$/;"	f	class:g2o::tutorial::SE2
operator *=	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	/^        SE2& operator *= (const SE2& tr2){$/;"	f	class:g2o::tutorial::SE2
operator []	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	/^        double operator [](int i) const {$/;"	f	class:g2o::tutorial::SE2
operator []	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	/^        double& operator [](int i) {$/;"	f	class:g2o::tutorial::SE2
rotation	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	/^        Rotation2Dd& rotation() {return _R;}$/;"	f	class:g2o::tutorial::SE2
rotation	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	/^        const Rotation2Dd& rotation() const {return _R;}$/;"	f	class:g2o::tutorial::SE2
toVector	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	/^        Vector3d toVector() const {$/;"	f	class:g2o::tutorial::SE2
translation	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	/^        Vector2d& translation() {return _t;}$/;"	f	class:g2o::tutorial::SE2
translation	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	/^        const Vector2d& translation() const {return _t;}$/;"	f	class:g2o::tutorial::SE2
tutorial	tags/before-github-sync/g2o/examples/tutorial_slam2d/se2.h	/^  namespace tutorial {$/;"	n	namespace:g2o
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^  EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	struct:GridEdge	file:
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^  EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	struct:GridPose	file:
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^  EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	struct:Landmark	file:
GridEdge	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^struct GridEdge$/;"	s	file:
GridPose	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^struct GridPose$/;"	s	file:
Landmark	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^  Landmark() : id(-1) {}$/;"	f	struct:Landmark
Landmark	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^struct Landmark$/;"	s	file:
LandmarkGrid	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^typedef map<int, map<int, LandmarkVector> > LandmarkGrid;$/;"	t	file:
LandmarkVector	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^typedef vector<Landmark*> LandmarkVector;$/;"	t	file:
MO_LEFT	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^  MO_LEFT, MO_RIGHT,$/;"	e	enum:MotionType	file:
MO_NUM_ELEMS	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^  MO_NUM_ELEMS$/;"	e	enum:MotionType	file:
MO_RIGHT	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^  MO_LEFT, MO_RIGHT,$/;"	e	enum:MotionType	file:
MotionType	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^enum MotionType {$/;"	g	file:
PosesGrid	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^typedef map<int, map<int, PosesPtrVector> > PosesGrid;$/;"	t	file:
PosesPtrVector	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^typedef vector<const GridPose*> PosesPtrVector;$/;"	t	file:
PosesVector	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^typedef vector<GridPose, Eigen::aligned_allocator<GridPose> >  PosesVector;$/;"	t	file:
from	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^  int from;$/;"	m	struct:GridEdge	file:
generateNewPose	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^GridPose generateNewPose(const GridPose& prev, const SE2& trueMotion, const Vector2d& transNoise, double rotNoise)$/;"	f
getMotion	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^SE2 getMotion(int motionDirection, double stepLen)$/;"	f
id	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^  int id;$/;"	m	struct:GridPose	file:
id	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^  int id;$/;"	m	struct:Landmark	file:
landmarks	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^  LandmarkVector landmarks;      \/\/\/< the landmarks observed by this node$/;"	m	struct:GridPose	file:
main	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^int main()$/;"	f
sampleTransformation	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^SE2 sampleTransformation(const SE2& trueMotion_, const Vector2d& transNoise, double rotNoise)$/;"	f
seenBy	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^  vector<int> seenBy;$/;"	m	struct:Landmark	file:
simulatedPose	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^  Vector2d simulatedPose;$/;"	m	struct:Landmark	file:
simulatorPose	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^  SE2 simulatorPose;$/;"	m	struct:GridPose	file:
simulatorTransf	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^  SE2 simulatorTransf;$/;"	m	struct:GridEdge	file:
to	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^  int to;$/;"	m	struct:GridEdge	file:
truePose	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^  SE2 truePose;$/;"	m	struct:GridPose	file:
truePose	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^  Vector2d truePose;$/;"	m	struct:Landmark	file:
trueTransf	tags/before-github-sync/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^  SE2 trueTransf;$/;"	m	struct:GridEdge	file:
VertexPointXY	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_point_xy.cpp	/^    VertexPointXY::VertexPointXY() :$/;"	f	class:g2o::tutorial::VertexPointXY
g2o	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_point_xy.cpp	/^namespace g2o {$/;"	n	file:
read	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_point_xy.cpp	/^    bool VertexPointXY::read(std::istream& is)$/;"	f	class:g2o::tutorial::VertexPointXY
tutorial	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_point_xy.cpp	/^  namespace tutorial {$/;"	n	namespace:g2o	file:
write	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_point_xy.cpp	/^    bool VertexPointXY::write(std::ostream& os) const$/;"	f	class:g2o::tutorial::VertexPointXY
G2O_TUTORIAL_VERTEX_POINT_XY_H	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_point_xy.h	18;"	d
VertexPointXY	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_point_xy.h	/^    class VertexPointXY : public BaseVertex<2, Eigen::Vector2d>$/;"	c	namespace:g2o::tutorial
g2o	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_point_xy.h	/^namespace g2o {$/;"	n
oplus	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_point_xy.h	/^        virtual void oplus(double* update)$/;"	f	class:g2o::tutorial::VertexPointXY
setToOrigin	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_point_xy.h	/^        virtual void setToOrigin() {$/;"	f	class:g2o::tutorial::VertexPointXY
tutorial	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_point_xy.h	/^  namespace tutorial {$/;"	n	namespace:g2o
VertexSE2	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_se2.cpp	/^    VertexSE2::VertexSE2() :$/;"	f	class:g2o::tutorial::VertexSE2
g2o	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_se2.cpp	/^namespace g2o {$/;"	n	file:
read	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_se2.cpp	/^    bool VertexSE2::read(std::istream& is)$/;"	f	class:g2o::tutorial::VertexSE2
tutorial	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_se2.cpp	/^  namespace tutorial {$/;"	n	namespace:g2o	file:
write	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_se2.cpp	/^    bool VertexSE2::write(std::ostream& os) const$/;"	f	class:g2o::tutorial::VertexSE2
G2O_TUTORIAL_VERTEX_SE2_H	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_se2.h	18;"	d
VertexSE2	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_se2.h	/^    class VertexSE2 : public BaseVertex<3, SE2>$/;"	c	namespace:g2o::tutorial
g2o	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_se2.h	/^namespace g2o {$/;"	n
oplus	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_se2.h	/^        virtual void oplus(double* update)$/;"	f	class:g2o::tutorial::VertexSE2
setToOrigin	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_se2.h	/^        virtual void setToOrigin() {$/;"	f	class:g2o::tutorial::VertexSE2
tutorial	tags/before-github-sync/g2o/examples/tutorial_slam2d/vertex_se2.h	/^  namespace tutorial {$/;"	n	namespace:g2o
EdgeNormal	tags/before-github-sync/g2o/math_groups/sbacam.h	/^    EdgeNormal()$/;"	f	class:g2o::EdgeNormal
EdgeNormal	tags/before-github-sync/g2o/math_groups/sbacam.h	/^  class EdgeNormal$/;"	c	namespace:g2o
G2O__SBACam_	tags/before-github-sync/g2o/math_groups/sbacam.h	29;"	d
Kcam	tags/before-github-sync/g2o/math_groups/sbacam.h	/^    Matrix3d Kcam; $/;"	m	class:g2o::SBACam
R	tags/before-github-sync/g2o/math_groups/sbacam.h	/^    Matrix3d R; $/;"	m	class:g2o::EdgeNormal
SBACam	tags/before-github-sync/g2o/math_groups/sbacam.h	/^  SBACam()$/;"	f	class:g2o::SBACam
SBACam	tags/before-github-sync/g2o/math_groups/sbacam.h	/^  SBACam(const Quaterniond&  r_, const Vector3d& t_) : SE3Quat(r_, t_)$/;"	f	class:g2o::SBACam
SBACam	tags/before-github-sync/g2o/math_groups/sbacam.h	/^  SBACam(const SE3Quat& p) : SE3Quat(p) {$/;"	f	class:g2o::SBACam
SBACam	tags/before-github-sync/g2o/math_groups/sbacam.h	/^  class SBACam: public SE3Quat$/;"	c	namespace:g2o
Vector6d	tags/before-github-sync/g2o/math_groups/sbacam.h	/^  typedef  Matrix<double, 6, 1> Vector6d;$/;"	t	namespace:g2o
baseline	tags/before-github-sync/g2o/math_groups/sbacam.h	/^    double baseline;$/;"	m	class:g2o::SBACam
dRdx	tags/before-github-sync/g2o/math_groups/sbacam.h	/^    Matrix3d dRdx, dRdy, dRdz;$/;"	m	class:g2o::SBACam
dRdy	tags/before-github-sync/g2o/math_groups/sbacam.h	/^    Matrix3d dRdx, dRdy, dRdz;$/;"	m	class:g2o::SBACam
dRdz	tags/before-github-sync/g2o/math_groups/sbacam.h	/^    Matrix3d dRdx, dRdy, dRdz;$/;"	m	class:g2o::SBACam
g2o	tags/before-github-sync/g2o/math_groups/sbacam.h	/^namespace g2o {$/;"	n
makeRot	tags/before-github-sync/g2o/math_groups/sbacam.h	/^    void makeRot()$/;"	f	class:g2o::EdgeNormal
normal	tags/before-github-sync/g2o/math_groups/sbacam.h	/^    Vector3d normal;$/;"	m	class:g2o::EdgeNormal
operator <<	tags/before-github-sync/g2o/math_groups/sbacam.h	/^  inline std::ostream& operator <<(std::ostream& out_str,$/;"	f	namespace:g2o
pos	tags/before-github-sync/g2o/math_groups/sbacam.h	/^    Vector3d pos;$/;"	m	class:g2o::EdgeNormal
setDr	tags/before-github-sync/g2o/math_groups/sbacam.h	/^    void setDr()$/;"	f	class:g2o::SBACam
setKcam	tags/before-github-sync/g2o/math_groups/sbacam.h	/^    void setKcam(double fx, double fy, double cx, double cy, double tx)$/;"	f	class:g2o::SBACam
setProjection	tags/before-github-sync/g2o/math_groups/sbacam.h	/^    void setProjection() { w2i = Kcam * w2n; }$/;"	f	class:g2o::SBACam
setTransform	tags/before-github-sync/g2o/math_groups/sbacam.h	/^    void setTransform()  { transformW2F(w2n,_t,_r); }$/;"	f	class:g2o::SBACam
transformF2W	tags/before-github-sync/g2o/math_groups/sbacam.h	/^    static void transformF2W(Matrix<double,3,4> &m, $/;"	f	class:g2o::SBACam
transformW2F	tags/before-github-sync/g2o/math_groups/sbacam.h	/^    static void transformW2F(Matrix<double,3,4> &m, $/;"	f	class:g2o::SBACam
update	tags/before-github-sync/g2o/math_groups/sbacam.h	/^    void update(const Vector6d& update)$/;"	f	class:g2o::SBACam
w2i	tags/before-github-sync/g2o/math_groups/sbacam.h	/^    Matrix<double,3,4> w2i; \/\/ transform from world to image coordinates$/;"	m	class:g2o::SBACam
w2n	tags/before-github-sync/g2o/math_groups/sbacam.h	/^    Matrix<double,3,4> w2n; \/\/ transform from world to node coordinates$/;"	m	class:g2o::SBACam
G2O___SE2_H__	tags/before-github-sync/g2o/math_groups/se2.h	18;"	d
SE2	tags/before-github-sync/g2o/math_groups/se2.h	/^    SE2():_R(0),_t(0,0){}$/;"	f	class:g2o::SE2
SE2	tags/before-github-sync/g2o/math_groups/se2.h	/^    SE2(double x, double y, double theta):_R(theta),_t(x,y){}$/;"	f	class:g2o::SE2
SE2	tags/before-github-sync/g2o/math_groups/se2.h	/^  class SE2{$/;"	c	namespace:g2o
_R	tags/before-github-sync/g2o/math_groups/se2.h	/^    Rotation2Dd _R;$/;"	m	class:g2o::SE2
_t	tags/before-github-sync/g2o/math_groups/se2.h	/^    Vector2d _t;$/;"	m	class:g2o::SE2
fromVector	tags/before-github-sync/g2o/math_groups/se2.h	/^    inline void fromVector (const Vector3d& v){$/;"	f	class:g2o::SE2
g2o	tags/before-github-sync/g2o/math_groups/se2.h	/^namespace g2o {$/;"	n
inverse	tags/before-github-sync/g2o/math_groups/se2.h	/^    inline SE2 inverse() const{$/;"	f	class:g2o::SE2
operator *	tags/before-github-sync/g2o/math_groups/se2.h	/^    inline SE2 operator * (const SE2& tr2) const{$/;"	f	class:g2o::SE2
operator *	tags/before-github-sync/g2o/math_groups/se2.h	/^    inline Vector2d operator * (const Vector2d& v) const {$/;"	f	class:g2o::SE2
operator *=	tags/before-github-sync/g2o/math_groups/se2.h	/^    inline SE2& operator *= (const SE2& tr2){$/;"	f	class:g2o::SE2
operator []	tags/before-github-sync/g2o/math_groups/se2.h	/^    inline double operator [](int i) const {$/;"	f	class:g2o::SE2
operator []	tags/before-github-sync/g2o/math_groups/se2.h	/^    inline double& operator [](int i) {$/;"	f	class:g2o::SE2
rotation	tags/before-github-sync/g2o/math_groups/se2.h	/^    inline Rotation2Dd& rotation() {return _R;}$/;"	f	class:g2o::SE2
rotation	tags/before-github-sync/g2o/math_groups/se2.h	/^    inline const Rotation2Dd& rotation() const {return _R;}$/;"	f	class:g2o::SE2
toVector	tags/before-github-sync/g2o/math_groups/se2.h	/^    inline Vector3d toVector() const {$/;"	f	class:g2o::SE2
translation	tags/before-github-sync/g2o/math_groups/se2.h	/^    inline Vector2d& translation() {return _t;}$/;"	f	class:g2o::SE2
translation	tags/before-github-sync/g2o/math_groups/se2.h	/^    inline const Vector2d& translation() const {return _t;}$/;"	f	class:g2o::SE2
G2O_MATH_STUFF	tags/before-github-sync/g2o/math_groups/se3_ops.h	17;"	d
Vector4d	tags/before-github-sync/g2o/math_groups/se3_ops.h	/^  typedef Matrix<double,4,1> Vector4d;$/;"	t	namespace:g2o
g2o	tags/before-github-sync/g2o/math_groups/se3_ops.h	/^namespace g2o {$/;"	n
deltaR	tags/before-github-sync/g2o/math_groups/se3_ops.hpp	/^  Vector3d deltaR(const Matrix3d& R)$/;"	f
project	tags/before-github-sync/g2o/math_groups/se3_ops.hpp	/^  Vector2d project(const Vector3d& v)$/;"	f
project	tags/before-github-sync/g2o/math_groups/se3_ops.hpp	/^  Vector3d project(const Vector4d& v)$/;"	f
skew	tags/before-github-sync/g2o/math_groups/se3_ops.hpp	/^  Matrix3d skew(const Vector3d&v)$/;"	f
unproject	tags/before-github-sync/g2o/math_groups/se3_ops.hpp	/^  Vector3d unproject(const Vector2d& v)$/;"	f
unproject	tags/before-github-sync/g2o/math_groups/se3_ops.hpp	/^  Vector4d unproject(const Vector3d& v)$/;"	f
G2O___SE3QUAT_H__	tags/before-github-sync/g2o/math_groups/se3quat.h	18;"	d
SE3Quat	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    SE3Quat(){$/;"	f	class:g2o::SE3Quat
SE3Quat	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    SE3Quat(const Matrix3d& R, const Vector3d t):_r(Quaterniond(R)),_t(t){ $/;"	f	class:g2o::SE3Quat
SE3Quat	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    SE3Quat(const Quaterniond& q, const Vector3d t):_r(q),_t(t){$/;"	f	class:g2o::SE3Quat
SE3Quat	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    explicit SE3Quat(const MatrixBase<Derived>& v)$/;"	f	class:g2o::SE3Quat
SE3Quat	tags/before-github-sync/g2o/math_groups/se3quat.h	/^  class SE3Quat {$/;"	c	namespace:g2o
Vector6d	tags/before-github-sync/g2o/math_groups/se3quat.h	/^  typedef Matrix<double, 6, 1> Vector6d;$/;"	t	namespace:g2o
Vector7d	tags/before-github-sync/g2o/math_groups/se3quat.h	/^  typedef Matrix<double, 7, 1> Vector7d;$/;"	t	namespace:g2o
_r	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    Quaterniond _r;$/;"	m	class:g2o::SE3Quat
_t	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    Vector3d _t;$/;"	m	class:g2o::SE3Quat
adj	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    Matrix<double, 6, 6> adj() const$/;"	f	class:g2o::SE3Quat
exp	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    static SE3Quat exp(const Vector6d & update)$/;"	f	class:g2o::SE3Quat
fromMinimalVector	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    inline void fromMinimalVector(const Vector6d& v){$/;"	f	class:g2o::SE3Quat
fromVector	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    inline void fromVector(const Vector7d& v){$/;"	f	class:g2o::SE3Quat
g2o	tags/before-github-sync/g2o/math_groups/se3quat.h	/^namespace g2o {$/;"	n
inverse	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    inline SE3Quat inverse() const{$/;"	f	class:g2o::SE3Quat
log	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    Vector6d log() const {$/;"	f	class:g2o::SE3Quat
map	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    Vector3d map(const Vector3d & xyz) const$/;"	f	class:g2o::SE3Quat
normalizeRotation	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    void normalizeRotation(){$/;"	f	class:g2o::SE3Quat
operator *	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    inline SE3Quat operator * (const SE3Quat& tr2) const{$/;"	f	class:g2o::SE3Quat
operator *	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    inline Vector3d operator * (const Vector3d v) const {$/;"	f	class:g2o::SE3Quat
operator *=	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    inline SE3Quat& operator *= (const SE3Quat& tr2){$/;"	f	class:g2o::SE3Quat
operator <<	tags/before-github-sync/g2o/math_groups/se3quat.h	/^  inline std::ostream& operator <<(std::ostream& out_str,$/;"	f	namespace:g2o
operator []	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    inline double operator [](int i) const {$/;"	f	class:g2o::SE3Quat
operator []	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    inline double& operator [](int i) {$/;"	f	class:g2o::SE3Quat
rotation	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    inline Quaterniond& rotation() {return _r;}$/;"	f	class:g2o::SE3Quat
rotation	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    inline const Quaterniond& rotation() const {return _r;}$/;"	f	class:g2o::SE3Quat
toMinimalVector	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    inline Vector6d toMinimalVector() const{$/;"	f	class:g2o::SE3Quat
toVector	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    inline Vector7d toVector() const{$/;"	f	class:g2o::SE3Quat
to_homogenious_matrix	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    Matrix<double,4,4> to_homogenious_matrix() const$/;"	f	class:g2o::SE3Quat
translation	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    inline Vector3d& translation() {return _t;}$/;"	f	class:g2o::SE3Quat
translation	tags/before-github-sync/g2o/math_groups/se3quat.h	/^    inline const Vector3d& translation() const {return _t;}$/;"	f	class:g2o::SE3Quat
g2o	tags/before-github-sync/g2o/math_groups/se3quat_gradients.cpp	/^namespace g2o {$/;"	n	file:
jacobian_3d_qman	tags/before-github-sync/g2o/math_groups/se3quat_gradients.cpp	/^void  jacobian_3d_qman ( Matrix< double, 6 , 6> &  Ji , Matrix< double, 6 , 6> &  Jj,$/;"	f	namespace:g2o
G2O_SIM_3	tags/before-github-sync/g2o/math_groups/sim3.h	18;"	d
Matrix7d	tags/before-github-sync/g2o/math_groups/sim3.h	/^  typedef  Matrix <double, 7, 7> Matrix7d;$/;"	t	namespace:g2o
Sim3	tags/before-github-sync/g2o/math_groups/sim3.h	/^    Sim3()$/;"	f	struct:g2o::Sim3
Sim3	tags/before-github-sync/g2o/math_groups/sim3.h	/^    Sim3(const Matrix3d & R, const Vector3d & t, double s)$/;"	f	struct:g2o::Sim3
Sim3	tags/before-github-sync/g2o/math_groups/sim3.h	/^    Sim3(const Quaterniond & r, const Vector3d & t, double s)$/;"	f	struct:g2o::Sim3
Sim3	tags/before-github-sync/g2o/math_groups/sim3.h	/^    Sim3(const Vector7d & update)$/;"	f	struct:g2o::Sim3
Sim3	tags/before-github-sync/g2o/math_groups/sim3.h	/^  struct Sim3$/;"	s	namespace:g2o
Vector7d	tags/before-github-sync/g2o/math_groups/sim3.h	/^  typedef  Matrix <double, 7, 1> Vector7d;$/;"	t	namespace:g2o
g2o	tags/before-github-sync/g2o/math_groups/sim3.h	/^namespace g2o$/;"	n
inverse	tags/before-github-sync/g2o/math_groups/sim3.h	/^    Sim3 inverse() const$/;"	f	struct:g2o::Sim3
log	tags/before-github-sync/g2o/math_groups/sim3.h	/^    Vector7d log() const$/;"	f	struct:g2o::Sim3
map	tags/before-github-sync/g2o/math_groups/sim3.h	/^     Vector3d map (const Vector3d& xyz) const {$/;"	f	struct:g2o::Sim3
operator *	tags/before-github-sync/g2o/math_groups/sim3.h	/^    Sim3 operator *(const Sim3& other){$/;"	f	struct:g2o::Sim3
operator *=	tags/before-github-sync/g2o/math_groups/sim3.h	/^    Sim3& operator *=(const Sim3& other){$/;"	f	struct:g2o::Sim3
operator <<	tags/before-github-sync/g2o/math_groups/sim3.h	/^  inline std::ostream& operator <<(std::ostream& out_str,$/;"	f	namespace:g2o
operator []	tags/before-github-sync/g2o/math_groups/sim3.h	/^    double operator[](int i) const$/;"	f	struct:g2o::Sim3
operator []	tags/before-github-sync/g2o/math_groups/sim3.h	/^    double& operator[](int i)$/;"	f	struct:g2o::Sim3
r	tags/before-github-sync/g2o/math_groups/sim3.h	/^    Quaterniond r;$/;"	m	struct:g2o::Sim3
rotation	tags/before-github-sync/g2o/math_groups/sim3.h	/^    inline Quaterniond& rotation() {return r;}$/;"	f	struct:g2o::Sim3
rotation	tags/before-github-sync/g2o/math_groups/sim3.h	/^    inline const Quaterniond& rotation() const {return r;}$/;"	f	struct:g2o::Sim3
s	tags/before-github-sync/g2o/math_groups/sim3.h	/^    double s;$/;"	m	struct:g2o::Sim3
scale	tags/before-github-sync/g2o/math_groups/sim3.h	/^    inline const double& scale() const {return s;}$/;"	f	struct:g2o::Sim3
scale	tags/before-github-sync/g2o/math_groups/sim3.h	/^    inline double& scale() {return s;}$/;"	f	struct:g2o::Sim3
t	tags/before-github-sync/g2o/math_groups/sim3.h	/^    Vector3d t;$/;"	m	struct:g2o::Sim3
translation	tags/before-github-sync/g2o/math_groups/sim3.h	/^    inline Vector3d& translation() {return t;}$/;"	f	struct:g2o::Sim3
translation	tags/before-github-sync/g2o/math_groups/sim3.h	/^    inline const Vector3d& translation() const {return t;}$/;"	f	struct:g2o::Sim3
CholmodExt	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^  CholmodExt()$/;"	f	struct:g2o::CholmodExt
CholmodExt	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^struct CholmodExt : public cholmod_sparse$/;"	s	namespace:g2o
G2O_LINEAR_SOLVER_CHOLMOD	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	18;"	d
LinearSolverCholmod	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    LinearSolverCholmod() :$/;"	f	class:g2o::LinearSolverCholmod
LinearSolverCholmod	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^class LinearSolverCholmod : public LinearSolver<MatrixType>$/;"	c	namespace:g2o
_blockOrdering	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    bool _blockOrdering;$/;"	m	class:g2o::LinearSolverCholmod
_blockPermutation	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    VectorXi _scalarPermutation, _blockPermutation;$/;"	m	class:g2o::LinearSolverCholmod
_cholmodCommon	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    cholmod_common _cholmodCommon;$/;"	m	class:g2o::LinearSolverCholmod
_cholmodFactor	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    cholmod_factor* _cholmodFactor;$/;"	m	class:g2o::LinearSolverCholmod
_cholmodSparse	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    CholmodExt* _cholmodSparse;$/;"	m	class:g2o::LinearSolverCholmod
_matrixStructure	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    MatrixStructure _matrixStructure;$/;"	m	class:g2o::LinearSolverCholmod
_scalarPermutation	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    VectorXi _scalarPermutation, _blockPermutation;$/;"	m	class:g2o::LinearSolverCholmod
blockOrdering	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    bool blockOrdering() const { return _blockOrdering;}$/;"	f	class:g2o::LinearSolverCholmod
columnsAllocated	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^  size_t columnsAllocated;$/;"	m	struct:g2o::CholmodExt
computeSymbolicDecomposition	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    void computeSymbolicDecomposition(const SparseBlockMatrix<MatrixType>& A)$/;"	f	class:g2o::LinearSolverCholmod
fillCholmodExt	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    void fillCholmodExt(const SparseBlockMatrix<MatrixType>& A, bool onlyValues)$/;"	f	class:g2o::LinearSolverCholmod
g2o	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^namespace g2o {$/;"	n
init	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    virtual bool init()$/;"	f	class:g2o::LinearSolverCholmod
setBlockOrdering	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    void setBlockOrdering(bool blockOrdering) { _blockOrdering = blockOrdering;}$/;"	f	class:g2o::LinearSolverCholmod
solve	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    bool solve(const SparseBlockMatrix<MatrixType>& A, double* x, double* b)$/;"	f	class:g2o::LinearSolverCholmod
solveBlocks	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    bool solveBlocks(double**& blocks, const SparseBlockMatrix<MatrixType>& A)$/;"	f	class:g2o::LinearSolverCholmod
solvePattern	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    virtual bool solvePattern(SparseBlockMatrix<MatrixXd>& spinv, const std::vector<std::pair<int, int> >& blockIndices, const SparseBlockMatrix<MatrixType>& A)$/;"	f	class:g2o::LinearSolverCholmod
~CholmodExt	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^  ~CholmodExt()$/;"	f	struct:g2o::CholmodExt
~LinearSolverCholmod	tags/before-github-sync/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    virtual ~LinearSolverCholmod()$/;"	f	class:g2o::LinearSolverCholmod
ALLOC_CHOLMOD	tags/before-github-sync/g2o/solvers/cholmod/solver_cholmod.cpp	25;"	d	file:
CholmodSolverCreator	tags/before-github-sync/g2o/solvers/cholmod/solver_cholmod.cpp	/^      CholmodSolverCreator(const SolverProperty& p) : AbstractSolverCreator(p) {}$/;"	f	class:g2o::CholmodSolverCreator
CholmodSolverCreator	tags/before-github-sync/g2o/solvers/cholmod/solver_cholmod.cpp	/^  class CholmodSolverCreator : public AbstractSolverCreator$/;"	c	namespace:g2o	file:
DIM_TO_SOLVER	tags/before-github-sync/g2o/solvers/cholmod/solver_cholmod.cpp	23;"	d	file:
construct	tags/before-github-sync/g2o/solvers/cholmod/solver_cholmod.cpp	/^      virtual Solver* construct(SparseOptimizer* optimizer)$/;"	f	class:g2o::CholmodSolverCreator
createSolver	tags/before-github-sync/g2o/solvers/cholmod/solver_cholmod.cpp	/^  static Solver* createSolver(SparseOptimizer* opt, const std::string& solverName)$/;"	f	namespace:g2o	file:
g2o	tags/before-github-sync/g2o/solvers/cholmod/solver_cholmod.cpp	/^namespace g2o {$/;"	n	file:
init_solver_cholmod	tags/before-github-sync/g2o/solvers/cholmod/solver_cholmod.cpp	/^  void __attribute__ ((constructor)) init_solver_cholmod()$/;"	f	namespace:g2o
SparseMatrixEntry	tags/before-github-sync/g2o/solvers/csparse/csparse_helper.cpp	/^    SparseMatrixEntry(int r=-1, int c=-1, double x=0.) :$/;"	f	struct:g2o::SparseMatrixEntry
SparseMatrixEntry	tags/before-github-sync/g2o/solvers/csparse/csparse_helper.cpp	/^  struct SparseMatrixEntry{$/;"	s	namespace:g2o	file:
SparseMatrixEntryColSort	tags/before-github-sync/g2o/solvers/csparse/csparse_helper.cpp	/^  struct SparseMatrixEntryColSort$/;"	s	namespace:g2o	file:
_c	tags/before-github-sync/g2o/solvers/csparse/csparse_helper.cpp	/^    int _r,_c;$/;"	m	struct:g2o::SparseMatrixEntry	file:
_r	tags/before-github-sync/g2o/solvers/csparse/csparse_helper.cpp	/^    int _r,_c;$/;"	m	struct:g2o::SparseMatrixEntry	file:
_x	tags/before-github-sync/g2o/solvers/csparse/csparse_helper.cpp	/^    double _x;$/;"	m	struct:g2o::SparseMatrixEntry	file:
cs_chol_workspace	tags/before-github-sync/g2o/solvers/csparse/csparse_helper.cpp	/^  csn* cs_chol_workspace (const cs *A, const css *S, int* cin, double* xin)$/;"	f	namespace:g2o
cs_cholsolsymb	tags/before-github-sync/g2o/solvers/csparse/csparse_helper.cpp	/^  int cs_cholsolsymb(const cs *A, double *b, const css* S, double* x, int* work)$/;"	f	namespace:g2o
g2o	tags/before-github-sync/g2o/solvers/csparse/csparse_helper.cpp	/^namespace g2o {$/;"	n	file:
operator ()	tags/before-github-sync/g2o/solvers/csparse/csparse_helper.cpp	/^    bool operator()(const SparseMatrixEntry& e1, const SparseMatrixEntry& e2) const$/;"	f	struct:g2o::SparseMatrixEntryColSort
writeCs2Octave	tags/before-github-sync/g2o/solvers/csparse/csparse_helper.cpp	/^  bool writeCs2Octave(const char* filename, const cs* A, bool upperTriangular)$/;"	f	namespace:g2o
G2O_CSPARSE_HELPER_H	tags/before-github-sync/g2o/solvers/csparse/csparse_helper.h	18;"	d
NCOMPLEX	tags/before-github-sync/g2o/solvers/csparse/csparse_helper.h	21;"	d
g2o	tags/before-github-sync/g2o/solvers/csparse/csparse_helper.h	/^namespace g2o {$/;"	n
CSparseExt	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^  CSparseExt()$/;"	f	struct:g2o::CSparseExt
CSparseExt	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^struct CSparseExt : public cs$/;"	s	namespace:g2o
G2O_LINEAR_SOLVERCSPARSE_H	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	18;"	d
LinearSolverCSparse	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^    LinearSolverCSparse() :$/;"	f	class:g2o::LinearSolverCSparse
LinearSolverCSparse	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^class LinearSolverCSparse : public LinearSolver<MatrixType>$/;"	c	namespace:g2o
_blockOrdering	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^    bool _blockOrdering;$/;"	m	class:g2o::LinearSolverCSparse
_ccsA	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^    CSparseExt* _ccsA;$/;"	m	class:g2o::LinearSolverCSparse
_csIntWorkspace	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^    int* _csIntWorkspace;$/;"	m	class:g2o::LinearSolverCSparse
_csWorkspace	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^    double* _csWorkspace;$/;"	m	class:g2o::LinearSolverCSparse
_csWorkspaceSize	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^    int _csWorkspaceSize;$/;"	m	class:g2o::LinearSolverCSparse
_matrixStructure	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^    MatrixStructure _matrixStructure;$/;"	m	class:g2o::LinearSolverCSparse
_scalarPermutation	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^    VectorXi _scalarPermutation;$/;"	m	class:g2o::LinearSolverCSparse
_symbolicDecomposition	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^    css* _symbolicDecomposition;$/;"	m	class:g2o::LinearSolverCSparse
blockOrdering	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^    bool blockOrdering() const { return _blockOrdering;}$/;"	f	class:g2o::LinearSolverCSparse
columnsAllocated	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^  int columnsAllocated;$/;"	m	struct:g2o::CSparseExt
computeSymbolicDecomposition	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^    void computeSymbolicDecomposition(const SparseBlockMatrix<MatrixType>& A)$/;"	f	class:g2o::LinearSolverCSparse
fillCSparse	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^    void fillCSparse(const SparseBlockMatrix<MatrixType>& A, bool onlyValues)$/;"	f	class:g2o::LinearSolverCSparse
g2o	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^namespace g2o {$/;"	n
init	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^    virtual bool init()$/;"	f	class:g2o::LinearSolverCSparse
setBlockOrdering	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^    void setBlockOrdering(bool blockOrdering) { _blockOrdering = blockOrdering;}$/;"	f	class:g2o::LinearSolverCSparse
solve	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^    bool solve(const SparseBlockMatrix<MatrixType>& A, double* x, double* b)$/;"	f	class:g2o::LinearSolverCSparse
solveBlocks	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^    bool solveBlocks(double**& blocks, const SparseBlockMatrix<MatrixType>& A) {$/;"	f	class:g2o::LinearSolverCSparse
solvePattern	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^    virtual bool solvePattern(SparseBlockMatrix<MatrixXd>& spinv, const std::vector<std::pair<int, int> >& blockIndices, const SparseBlockMatrix<MatrixType>& A) {$/;"	f	class:g2o::LinearSolverCSparse
~CSparseExt	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^  ~CSparseExt()$/;"	f	struct:g2o::CSparseExt
~LinearSolverCSparse	tags/before-github-sync/g2o/solvers/csparse/linear_solver_csparse.h	/^    virtual ~LinearSolverCSparse()$/;"	f	class:g2o::LinearSolverCSparse
ALLOC_CSPARSE	tags/before-github-sync/g2o/solvers/csparse/solver_csparse.cpp	28;"	d	file:
CSparseSolverCreator	tags/before-github-sync/g2o/solvers/csparse/solver_csparse.cpp	/^      CSparseSolverCreator(const SolverProperty& p) : AbstractSolverCreator(p) {}$/;"	f	class:g2o::CSparseSolverCreator
CSparseSolverCreator	tags/before-github-sync/g2o/solvers/csparse/solver_csparse.cpp	/^  class CSparseSolverCreator : public AbstractSolverCreator$/;"	c	namespace:g2o	file:
DIM_TO_SOLVER	tags/before-github-sync/g2o/solvers/csparse/solver_csparse.cpp	26;"	d	file:
construct	tags/before-github-sync/g2o/solvers/csparse/solver_csparse.cpp	/^      virtual Solver* construct(SparseOptimizer* optimizer)$/;"	f	class:g2o::CSparseSolverCreator
createSolver	tags/before-github-sync/g2o/solvers/csparse/solver_csparse.cpp	/^  static Solver* createSolver(SparseOptimizer* opt, const std::string& solverName)$/;"	f	namespace:g2o	file:
g2o	tags/before-github-sync/g2o/solvers/csparse/solver_csparse.cpp	/^namespace g2o {$/;"	n	file:
init_solver_csparse	tags/before-github-sync/g2o/solvers/csparse/solver_csparse.cpp	/^  void G2O_ATTRIBUTE_CONSTRUCTOR init_solver_csparse()$/;"	f	namespace:g2o
G2O_LINEAR_SOLVER_DENSE_H	tags/before-github-sync/g2o/solvers/dense/linear_solver_dense.h	18;"	d
LinearSolverDense	tags/before-github-sync/g2o/solvers/dense/linear_solver_dense.h	/^      LinearSolverDense() :$/;"	f	class:g2o::LinearSolverDense
LinearSolverDense	tags/before-github-sync/g2o/solvers/dense/linear_solver_dense.h	/^  class LinearSolverDense : public LinearSolver<MatrixType>$/;"	c	namespace:g2o
g2o	tags/before-github-sync/g2o/solvers/dense/linear_solver_dense.h	/^namespace g2o {$/;"	n
init	tags/before-github-sync/g2o/solvers/dense/linear_solver_dense.h	/^      virtual bool init()$/;"	f	class:g2o::LinearSolverDense
solve	tags/before-github-sync/g2o/solvers/dense/linear_solver_dense.h	/^      bool solve(const SparseBlockMatrix<MatrixType>& A, double* x, double* b)$/;"	f	class:g2o::LinearSolverDense
~LinearSolverDense	tags/before-github-sync/g2o/solvers/dense/linear_solver_dense.h	/^      virtual ~LinearSolverDense()$/;"	f	class:g2o::LinearSolverDense
ALLOC_DENSE	tags/before-github-sync/g2o/solvers/dense/solver_dense.cpp	25;"	d	file:
DIM_TO_SOLVER	tags/before-github-sync/g2o/solvers/dense/solver_dense.cpp	23;"	d	file:
DenseSolverCreator	tags/before-github-sync/g2o/solvers/dense/solver_dense.cpp	/^      DenseSolverCreator(const SolverProperty& p) : AbstractSolverCreator(p) {}$/;"	f	class:g2o::DenseSolverCreator
DenseSolverCreator	tags/before-github-sync/g2o/solvers/dense/solver_dense.cpp	/^  class DenseSolverCreator : public AbstractSolverCreator$/;"	c	namespace:g2o	file:
construct	tags/before-github-sync/g2o/solvers/dense/solver_dense.cpp	/^      virtual Solver* construct(SparseOptimizer* optimizer)$/;"	f	class:g2o::DenseSolverCreator
createSolver	tags/before-github-sync/g2o/solvers/dense/solver_dense.cpp	/^  static Solver* createSolver(SparseOptimizer* opt, const std::string& solverName)$/;"	f	namespace:g2o	file:
g2o	tags/before-github-sync/g2o/solvers/dense/solver_dense.cpp	/^namespace g2o {$/;"	n	file:
init_solver_csparse	tags/before-github-sync/g2o/solvers/dense/solver_dense.cpp	/^  void __attribute__ ((constructor)) init_solver_csparse()$/;"	f	namespace:g2o
G2O_LINEAR_SOLVER_PCG_H	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	18;"	d
LinearSolverPCG	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      LinearSolverPCG() :$/;"	f	class:g2o::LinearSolverPCG
LinearSolverPCG	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^  class LinearSolverPCG : public LinearSolver<MatrixType>$/;"	c	namespace:g2o
MatrixPtrVector	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      typedef std::vector< const MatrixType* > MatrixPtrVector;$/;"	t	class:g2o::LinearSolverPCG
MatrixVector	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      typedef std::vector< MatrixType, Eigen::aligned_allocator<MatrixType> > MatrixVector;$/;"	t	class:g2o::LinearSolverPCG
_J	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      MatrixVector _J;$/;"	m	class:g2o::LinearSolverPCG
_absoluteTolerance	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      bool _absoluteTolerance;$/;"	m	class:g2o::LinearSolverPCG
_diag	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      MatrixPtrVector _diag;$/;"	m	class:g2o::LinearSolverPCG
_indices	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      std::vector<std::pair<int, int> > _indices;$/;"	m	class:g2o::LinearSolverPCG
_maxIter	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      int _maxIter;$/;"	m	class:g2o::LinearSolverPCG
_residual	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      double _residual;$/;"	m	class:g2o::LinearSolverPCG
_sparseMat	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      MatrixPtrVector _sparseMat;$/;"	m	class:g2o::LinearSolverPCG
_tolerance	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      double _tolerance;$/;"	m	class:g2o::LinearSolverPCG
_verbose	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      bool _verbose;$/;"	m	class:g2o::LinearSolverPCG
absoluteTolerance	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      bool absoluteTolerance() const { return _absoluteTolerance;}$/;"	f	class:g2o::LinearSolverPCG
g2o	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^namespace g2o {$/;"	n
init	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      virtual bool init()$/;"	f	class:g2o::LinearSolverPCG
maxIterations	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      int maxIterations() const { return _maxIter;}$/;"	f	class:g2o::LinearSolverPCG
setAbsoluteTolerance	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      void setAbsoluteTolerance(bool absoluteTolerance) { _absoluteTolerance = absoluteTolerance;}$/;"	f	class:g2o::LinearSolverPCG
setMaxIterations	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      void setMaxIterations(int maxIter) { _maxIter = maxIter;}$/;"	f	class:g2o::LinearSolverPCG
setTolerance	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      void setTolerance(double tolerance) { _tolerance = tolerance;}$/;"	f	class:g2o::LinearSolverPCG
setVerbose	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      void setVerbose(bool verbose) { _verbose = verbose;}$/;"	f	class:g2o::LinearSolverPCG
tolerance	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      double tolerance() const { return _tolerance;}$/;"	f	class:g2o::LinearSolverPCG
verbose	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      bool verbose() const { return _verbose;}$/;"	f	class:g2o::LinearSolverPCG
~LinearSolverPCG	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.h	/^      virtual ~LinearSolverPCG()$/;"	f	class:g2o::LinearSolverPCG
mult	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.hpp	/^void LinearSolverPCG<MatrixType>::mult(const std::vector<int>& colBlockIndices, const Eigen::VectorXd& src, Eigen::VectorXd& dest)$/;"	f	class:LinearSolverPCG
multDiag	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.hpp	/^void LinearSolverPCG<MatrixType>::multDiag(const std::vector<int>& colBlockIndices, MatrixPtrVector& A, const Eigen::VectorXd& src, Eigen::VectorXd& dest)$/;"	f	class:LinearSolverPCG
multDiag	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.hpp	/^void LinearSolverPCG<MatrixType>::multDiag(const std::vector<int>& colBlockIndices, MatrixVector& A, const Eigen::VectorXd& src, Eigen::VectorXd& dest)$/;"	f	class:LinearSolverPCG
pcg_atxpy	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.hpp	/^  inline void pcg_atxpy(const Eigen::MatrixXd& A, const Eigen::VectorXd& x, int xoff, Eigen::VectorXd& y, int yoff)$/;"	f
pcg_atxpy	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.hpp	/^  inline void pcg_atxpy(const MatrixType& A, const Eigen::VectorXd& x, int xoff, Eigen::VectorXd& y, int yoff)$/;"	f
pcg_axpy	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.hpp	/^  inline void pcg_axpy(const Eigen::MatrixXd& A, const Eigen::VectorXd& x, int xoff, Eigen::VectorXd& y, int yoff)$/;"	f
pcg_axpy	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.hpp	/^  inline void pcg_axpy(const MatrixType& A, const Eigen::VectorXd& x, int xoff, Eigen::VectorXd& y, int yoff)$/;"	f
pcg_axy	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.hpp	/^  inline void pcg_axy(const Eigen::MatrixXd& A, const Eigen::VectorXd& x, int xoff, Eigen::VectorXd& y, int yoff)$/;"	f
pcg_axy	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.hpp	/^  inline void pcg_axy(const MatrixType& A, const Eigen::VectorXd& x, int xoff, Eigen::VectorXd& y, int yoff)$/;"	f
solve	tags/before-github-sync/g2o/solvers/pcg/linear_solver_pcg.hpp	/^bool LinearSolverPCG<MatrixType>::solve(const SparseBlockMatrix<MatrixType>& A, double* x, double* b)$/;"	f	class:LinearSolverPCG
ALLOC_PCG	tags/before-github-sync/g2o/solvers/pcg/solver_pcg.cpp	25;"	d	file:
DIM_TO_SOLVER	tags/before-github-sync/g2o/solvers/pcg/solver_pcg.cpp	23;"	d	file:
PCGSolverCreator	tags/before-github-sync/g2o/solvers/pcg/solver_pcg.cpp	/^      PCGSolverCreator(const SolverProperty& p) : AbstractSolverCreator(p) {}$/;"	f	class:g2o::PCGSolverCreator
PCGSolverCreator	tags/before-github-sync/g2o/solvers/pcg/solver_pcg.cpp	/^  class PCGSolverCreator : public AbstractSolverCreator$/;"	c	namespace:g2o	file:
construct	tags/before-github-sync/g2o/solvers/pcg/solver_pcg.cpp	/^      virtual Solver* construct(SparseOptimizer* optimizer)$/;"	f	class:g2o::PCGSolverCreator
createSolver	tags/before-github-sync/g2o/solvers/pcg/solver_pcg.cpp	/^  static Solver* createSolver(SparseOptimizer* opt, const std::string& solverName)$/;"	f	namespace:g2o	file:
g2o	tags/before-github-sync/g2o/solvers/pcg/solver_pcg.cpp	/^namespace g2o {$/;"	n	file:
init_solver_csparse	tags/before-github-sync/g2o/solvers/pcg/solver_pcg.cpp	/^  void __attribute__ ((constructor)) init_solver_csparse()$/;"	f	namespace:g2o
BG_BLACK	tags/before-github-sync/g2o/stuff/color_macros.h	25;"	d
BG_BLUE	tags/before-github-sync/g2o/stuff/color_macros.h	31;"	d
BG_GREEN	tags/before-github-sync/g2o/stuff/color_macros.h	27;"	d
BG_LIGHTBLUE	tags/before-github-sync/g2o/stuff/color_macros.h	29;"	d
BG_MAGENTA	tags/before-github-sync/g2o/stuff/color_macros.h	30;"	d
BG_RED	tags/before-github-sync/g2o/stuff/color_macros.h	26;"	d
BG_WHITE	tags/before-github-sync/g2o/stuff/color_macros.h	32;"	d
BG_YELLOW	tags/before-github-sync/g2o/stuff/color_macros.h	28;"	d
CL_BLACK	tags/before-github-sync/g2o/stuff/color_macros.h	35;"	d
CL_BLUE	tags/before-github-sync/g2o/stuff/color_macros.h	41;"	d
CL_GREEN	tags/before-github-sync/g2o/stuff/color_macros.h	37;"	d
CL_LIGHTBLUE	tags/before-github-sync/g2o/stuff/color_macros.h	39;"	d
CL_MAGENTA	tags/before-github-sync/g2o/stuff/color_macros.h	40;"	d
CL_RED	tags/before-github-sync/g2o/stuff/color_macros.h	36;"	d
CL_WHITE	tags/before-github-sync/g2o/stuff/color_macros.h	42;"	d
CL_YELLOW	tags/before-github-sync/g2o/stuff/color_macros.h	38;"	d
FG_BLACK	tags/before-github-sync/g2o/stuff/color_macros.h	44;"	d
FG_BLUE	tags/before-github-sync/g2o/stuff/color_macros.h	50;"	d
FG_GREEN	tags/before-github-sync/g2o/stuff/color_macros.h	46;"	d
FG_LIGHTBLUE	tags/before-github-sync/g2o/stuff/color_macros.h	48;"	d
FG_MAGENTA	tags/before-github-sync/g2o/stuff/color_macros.h	49;"	d
FG_NORM	tags/before-github-sync/g2o/stuff/color_macros.h	53;"	d
FG_RED	tags/before-github-sync/g2o/stuff/color_macros.h	45;"	d
FG_WHITE	tags/before-github-sync/g2o/stuff/color_macros.h	51;"	d
FG_YELLOW	tags/before-github-sync/g2o/stuff/color_macros.h	47;"	d
FT_BOLD	tags/before-github-sync/g2o/stuff/color_macros.h	21;"	d
FT_UNDERLINE	tags/before-github-sync/g2o/stuff/color_macros.h	22;"	d
G2O_COLOR_MACROS_H	tags/before-github-sync/g2o/stuff/color_macros.h	18;"	d
CAT_BOOL	tags/before-github-sync/g2o/stuff/command_args.cpp	/^  CAT_DOUBLE, CAT_FLOAT, CAT_INT, CAT_STRING, CAT_BOOL$/;"	e	enum:g2o::CommandArgumentType	file:
CAT_DOUBLE	tags/before-github-sync/g2o/stuff/command_args.cpp	/^  CAT_DOUBLE, CAT_FLOAT, CAT_INT, CAT_STRING, CAT_BOOL$/;"	e	enum:g2o::CommandArgumentType	file:
CAT_FLOAT	tags/before-github-sync/g2o/stuff/command_args.cpp	/^  CAT_DOUBLE, CAT_FLOAT, CAT_INT, CAT_STRING, CAT_BOOL$/;"	e	enum:g2o::CommandArgumentType	file:
CAT_INT	tags/before-github-sync/g2o/stuff/command_args.cpp	/^  CAT_DOUBLE, CAT_FLOAT, CAT_INT, CAT_STRING, CAT_BOOL$/;"	e	enum:g2o::CommandArgumentType	file:
CAT_STRING	tags/before-github-sync/g2o/stuff/command_args.cpp	/^  CAT_DOUBLE, CAT_FLOAT, CAT_INT, CAT_STRING, CAT_BOOL$/;"	e	enum:g2o::CommandArgumentType	file:
CommandArgs	tags/before-github-sync/g2o/stuff/command_args.cpp	/^CommandArgs::CommandArgs()$/;"	f	class:g2o::CommandArgs
CommandArgumentType	tags/before-github-sync/g2o/stuff/command_args.cpp	/^enum CommandArgumentType$/;"	g	namespace:g2o	file:
arg2str	tags/before-github-sync/g2o/stuff/command_args.cpp	/^std::string CommandArgs::arg2str(const CommandArgument& ca) const$/;"	f	class:g2o::CommandArgs
g2o	tags/before-github-sync/g2o/stuff/command_args.cpp	/^namespace g2o {$/;"	n	file:
param	tags/before-github-sync/g2o/stuff/command_args.cpp	/^void CommandArgs::param(const std::string& name, bool& p, bool defValue, const std::string& desc)$/;"	f	class:g2o::CommandArgs
param	tags/before-github-sync/g2o/stuff/command_args.cpp	/^void CommandArgs::param(const std::string& name, double& p, double defValue, const std::string& desc)$/;"	f	class:g2o::CommandArgs
param	tags/before-github-sync/g2o/stuff/command_args.cpp	/^void CommandArgs::param(const std::string& name, float& p, float defValue, const std::string& desc)$/;"	f	class:g2o::CommandArgs
param	tags/before-github-sync/g2o/stuff/command_args.cpp	/^void CommandArgs::param(const std::string& name, int& p, int defValue, const std::string& desc)$/;"	f	class:g2o::CommandArgs
param	tags/before-github-sync/g2o/stuff/command_args.cpp	/^void CommandArgs::param(const std::string& name, std::string& p, const std::string& defValue, const std::string& desc)$/;"	f	class:g2o::CommandArgs
paramLeftOver	tags/before-github-sync/g2o/stuff/command_args.cpp	/^void CommandArgs::paramLeftOver(const std::string& name, std::string& p, const std::string& defValue, const std::string& desc, bool optional)$/;"	f	class:g2o::CommandArgs
parseArgs	tags/before-github-sync/g2o/stuff/command_args.cpp	/^bool CommandArgs::parseArgs(int argc, char** argv, bool exitOnError)$/;"	f	class:g2o::CommandArgs
printHelp	tags/before-github-sync/g2o/stuff/command_args.cpp	/^void CommandArgs::printHelp(std::ostream& os)$/;"	f	class:g2o::CommandArgs
setBanner	tags/before-github-sync/g2o/stuff/command_args.cpp	/^void CommandArgs::setBanner(const std::string& banner)$/;"	f	class:g2o::CommandArgs
str2arg	tags/before-github-sync/g2o/stuff/command_args.cpp	/^void CommandArgs::str2arg(const std::string& input, CommandArgument& ca) const$/;"	f	class:g2o::CommandArgs
trim	tags/before-github-sync/g2o/stuff/command_args.cpp	/^std::string CommandArgs::trim(const std::string& s) const$/;"	f	class:g2o::CommandArgs
type2str	tags/before-github-sync/g2o/stuff/command_args.cpp	/^const char* CommandArgs::type2str(int t) const$/;"	f	class:g2o::CommandArgs
~CommandArgs	tags/before-github-sync/g2o/stuff/command_args.cpp	/^CommandArgs::~CommandArgs()$/;"	f	class:g2o::CommandArgs
CmpPairFirst	tags/before-github-sync/g2o/stuff/command_args.h	/^    struct CmpPairFirst {$/;"	s	class:g2o::CommandArgs
CommandArgs	tags/before-github-sync/g2o/stuff/command_args.h	/^class CommandArgs$/;"	c	namespace:g2o
CommandArgument	tags/before-github-sync/g2o/stuff/command_args.h	/^      CommandArgument() : name(""), description(""), type(0), data(0), parsed(false), optional(false)$/;"	f	struct:g2o::CommandArgs::CommandArgument
CommandArgument	tags/before-github-sync/g2o/stuff/command_args.h	/^    struct CommandArgument$/;"	s	class:g2o::CommandArgs
G2O_COMMAND_ARGS_H	tags/before-github-sync/g2o/stuff/command_args.h	34;"	d
_args	tags/before-github-sync/g2o/stuff/command_args.h	/^    std::vector<CommandArgument> _args;$/;"	m	class:g2o::CommandArgs
_banner	tags/before-github-sync/g2o/stuff/command_args.h	/^    std::string _banner;$/;"	m	class:g2o::CommandArgs
_leftOvers	tags/before-github-sync/g2o/stuff/command_args.h	/^    std::vector<CommandArgument> _leftOvers;$/;"	m	class:g2o::CommandArgs
_leftOversOptional	tags/before-github-sync/g2o/stuff/command_args.h	/^    std::vector<CommandArgument> _leftOversOptional;$/;"	m	class:g2o::CommandArgs
_progName	tags/before-github-sync/g2o/stuff/command_args.h	/^    std::string _progName;$/;"	m	class:g2o::CommandArgs
convertString	tags/before-github-sync/g2o/stuff/command_args.h	/^    bool convertString(const std::string& s, T& x) const$/;"	f	class:g2o::CommandArgs
data	tags/before-github-sync/g2o/stuff/command_args.h	/^      void* data;$/;"	m	struct:g2o::CommandArgs::CommandArgument
description	tags/before-github-sync/g2o/stuff/command_args.h	/^      std::string description;$/;"	m	struct:g2o::CommandArgs::CommandArgument
g2o	tags/before-github-sync/g2o/stuff/command_args.h	/^namespace g2o {$/;"	n
getBanner	tags/before-github-sync/g2o/stuff/command_args.h	/^    const std::string& getBanner() const { return _banner; }$/;"	f	class:g2o::CommandArgs
name	tags/before-github-sync/g2o/stuff/command_args.h	/^      std::string name;$/;"	m	struct:g2o::CommandArgs::CommandArgument
operator ()	tags/before-github-sync/g2o/stuff/command_args.h	/^      bool operator()(const std::pair<T1,T2>& left, const std::pair<T1,T2>& right) {$/;"	f	struct:g2o::CommandArgs::CmpPairFirst
optional	tags/before-github-sync/g2o/stuff/command_args.h	/^      bool optional;$/;"	m	struct:g2o::CommandArgs::CommandArgument
parsed	tags/before-github-sync/g2o/stuff/command_args.h	/^      bool parsed;$/;"	m	struct:g2o::CommandArgs::CommandArgument
type	tags/before-github-sync/g2o/stuff/command_args.h	/^      int type;$/;"	m	struct:g2o::CommandArgs::CommandArgument
G2O_FAST_OUTPUT_H	tags/before-github-sync/g2o/stuff/fast_output.h	38;"	d
modp_dtoa	tags/before-github-sync/g2o/stuff/fast_output.h	/^inline int modp_dtoa(double value, char* str, int prec)$/;"	f
modp_itoa10	tags/before-github-sync/g2o/stuff/fast_output.h	/^inline int modp_itoa10(int32_t value, char* str)$/;"	f
modp_uitoa10	tags/before-github-sync/g2o/stuff/fast_output.h	/^inline int modp_uitoa10(uint32_t value, char* str)$/;"	f
strreverse	tags/before-github-sync/g2o/stuff/fast_output.h	/^inline void strreverse(char* begin, char* end)$/;"	f
changeFileExtension	tags/before-github-sync/g2o/stuff/filesys_tools.cpp	/^std::string changeFileExtension(const std::string& filename, const std::string& newExt, bool stripDot)$/;"	f	namespace:g2o
fileExists	tags/before-github-sync/g2o/stuff/filesys_tools.cpp	/^bool fileExists(const char* filename)$/;"	f	namespace:g2o
g2o	tags/before-github-sync/g2o/stuff/filesys_tools.cpp	/^namespace g2o {$/;"	n	file:
getBasename	tags/before-github-sync/g2o/stuff/filesys_tools.cpp	/^std::string getBasename(const std::string& filename)$/;"	f	namespace:g2o
getDirname	tags/before-github-sync/g2o/stuff/filesys_tools.cpp	/^std::string getDirname(const std::string& filename)$/;"	f	namespace:g2o
getFileExtension	tags/before-github-sync/g2o/stuff/filesys_tools.cpp	/^std::string getFileExtension(const std::string& filename)$/;"	f	namespace:g2o
getFilesByPattern	tags/before-github-sync/g2o/stuff/filesys_tools.cpp	/^std::vector<std::string> getFilesByPattern(const char* pattern)$/;"	f	namespace:g2o
getPureFilename	tags/before-github-sync/g2o/stuff/filesys_tools.cpp	/^std::string getPureFilename(const std::string& filename)$/;"	f	namespace:g2o
G2O_FILESYS_TOOLS_H	tags/before-github-sync/g2o/stuff/filesys_tools.h	26;"	d
g2o	tags/before-github-sync/g2o/stuff/filesys_tools.h	/^namespace g2o {$/;"	n
DEG2RAD	tags/before-github-sync/g2o/stuff/macros.h	24;"	d
FIXED	tags/before-github-sync/g2o/stuff/macros.h	67;"	d
G2O_ATTRIBUTE_CONSTRUCTOR	tags/before-github-sync/g2o/stuff/macros.h	32;"	d
G2O_ATTRIBUTE_CONSTRUCTOR	tags/before-github-sync/g2o/stuff/macros.h	40;"	d
G2O_ATTRIBUTE_FORMAT12	tags/before-github-sync/g2o/stuff/macros.h	34;"	d
G2O_ATTRIBUTE_FORMAT12	tags/before-github-sync/g2o/stuff/macros.h	42;"	d
G2O_ATTRIBUTE_FORMAT23	tags/before-github-sync/g2o/stuff/macros.h	35;"	d
G2O_ATTRIBUTE_FORMAT23	tags/before-github-sync/g2o/stuff/macros.h	43;"	d
G2O_ATTRIBUTE_UNUSED	tags/before-github-sync/g2o/stuff/macros.h	33;"	d
G2O_ATTRIBUTE_UNUSED	tags/before-github-sync/g2o/stuff/macros.h	41;"	d
G2O_FSKIP_LINE	tags/before-github-sync/g2o/stuff/macros.h	58;"	d
G2O_G2O_MACROS_H	tags/before-github-sync/g2o/stuff/macros.h	21;"	d
PVAR	tags/before-github-sync/g2o/stuff/macros.h	62;"	d
RAD2DEG	tags/before-github-sync/g2o/stuff/macros.h	28;"	d
__PRETTY_FUNCTION__	tags/before-github-sync/g2o/stuff/macros.h	38;"	d
g2o_isnan	tags/before-github-sync/g2o/stuff/macros.h	/^inline bool g2o_isnan(double x)$/;"	f
G2O_STUFF_MISC_H	tags/before-github-sync/g2o/stuff/misc.h	18;"	d
M_PI	tags/before-github-sync/g2o/stuff/misc.h	23;"	d
average_angle	tags/before-github-sync/g2o/stuff/misc.h	/^inline double average_angle(double theta1, double theta2)$/;"	f	namespace:g2o
clamp	tags/before-github-sync/g2o/stuff/misc.h	/^inline T clamp(T l, T x, T u) $/;"	f	namespace:g2o
deg2rad	tags/before-github-sync/g2o/stuff/misc.h	/^inline double deg2rad(double degree)$/;"	f	namespace:g2o
g2o	tags/before-github-sync/g2o/stuff/misc.h	/^namespace g2o {$/;"	n
hypot	tags/before-github-sync/g2o/stuff/misc.h	/^inline T hypot(T x, T y)$/;"	f	namespace:g2o
hypot_sqr	tags/before-github-sync/g2o/stuff/misc.h	/^inline T hypot_sqr(T x, T y)$/;"	f	namespace:g2o
inverse_theta	tags/before-github-sync/g2o/stuff/misc.h	/^inline double inverse_theta(double th)$/;"	f	namespace:g2o
normalize_theta	tags/before-github-sync/g2o/stuff/misc.h	/^inline double normalize_theta(double theta)$/;"	f	namespace:g2o
rad2deg	tags/before-github-sync/g2o/stuff/misc.h	/^inline double rad2deg(double rad)$/;"	f	namespace:g2o
sign	tags/before-github-sync/g2o/stuff/misc.h	/^inline int sign(T x)$/;"	f	namespace:g2o
square	tags/before-github-sync/g2o/stuff/misc.h	/^inline T square(T x)$/;"	f	namespace:g2o
wrap	tags/before-github-sync/g2o/stuff/misc.h	/^inline T wrap(T l, T x, T u) $/;"	f	namespace:g2o
vasprintf	tags/before-github-sync/g2o/stuff/os_specific.c	/^int vasprintf(char** strp, const char* fmt, va_list ap)$/;"	f
G2O__OS_SPECIFIC_HH_	tags/before-github-sync/g2o/stuff/os_specific.h	18;"	d
drand48	tags/before-github-sync/g2o/stuff/os_specific.h	27;"	d
RuntimeError	tags/before-github-sync/g2o/stuff/runtime_error.cpp	/^RuntimeError::RuntimeError(const char* fmt, ...) :$/;"	f	class:RuntimeError
~RuntimeError	tags/before-github-sync/g2o/stuff/runtime_error.cpp	/^RuntimeError::~RuntimeError() throw()$/;"	f	class:RuntimeError
G2O_ATTRIBUTE_FORMAT23	tags/before-github-sync/g2o/stuff/runtime_error.h	/^    explicit RuntimeError(const char* fmt, ...) G2O_ATTRIBUTE_FORMAT23;$/;"	m	class:RuntimeError
G2O_RUNTIME_ERROR_H	tags/before-github-sync/g2o/stuff/runtime_error.h	18;"	d
RuntimeError	tags/before-github-sync/g2o/stuff/runtime_error.h	/^class RuntimeError : public std::exception$/;"	c
_errorMsg	tags/before-github-sync/g2o/stuff/runtime_error.h	/^    std::string _errorMsg;$/;"	m	class:RuntimeError
what	tags/before-github-sync/g2o/stuff/runtime_error.h	/^    virtual const char* what() const throw() {return _errorMsg.c_str();}$/;"	f	class:RuntimeError
TripletColSort	tags/before-github-sync/g2o/stuff/sparse_helper.cpp	/^    struct TripletColSort$/;"	s	namespace:g2o::<anonymous>	file:
TripletEntry	tags/before-github-sync/g2o/stuff/sparse_helper.cpp	/^      TripletEntry(int r_, int c_, double x_) : r(r_), c(c_), x(x_) {}$/;"	f	struct:g2o::<anonymous>::TripletEntry
TripletEntry	tags/before-github-sync/g2o/stuff/sparse_helper.cpp	/^    struct TripletEntry$/;"	s	namespace:g2o::<anonymous>	file:
c	tags/before-github-sync/g2o/stuff/sparse_helper.cpp	/^      int r, c;$/;"	m	struct:g2o::<anonymous>::TripletEntry	file:
g2o	tags/before-github-sync/g2o/stuff/sparse_helper.cpp	/^namespace g2o {$/;"	n	file:
operator ()	tags/before-github-sync/g2o/stuff/sparse_helper.cpp	/^      bool operator()(const TripletEntry& e1, const TripletEntry& e2) const$/;"	f	struct:g2o::<anonymous>::TripletColSort
r	tags/before-github-sync/g2o/stuff/sparse_helper.cpp	/^      int r, c;$/;"	m	struct:g2o::<anonymous>::TripletEntry	file:
writeCCSMatrix	tags/before-github-sync/g2o/stuff/sparse_helper.cpp	/^  bool writeCCSMatrix(const char* filename, int rows, int cols, const int* Ap, const int* Ai, const double* Ax, bool upperTriangleSymmetric)$/;"	f	namespace:g2o
writeVector	tags/before-github-sync/g2o/stuff/sparse_helper.cpp	/^  bool writeVector(const char* filename, const double*v, int n)$/;"	f	namespace:g2o
x	tags/before-github-sync/g2o/stuff/sparse_helper.cpp	/^      double x;$/;"	m	struct:g2o::<anonymous>::TripletEntry	file:
G2O_G2O_SPARSE_HELPER_H	tags/before-github-sync/g2o/stuff/sparse_helper.h	18;"	d
g2o	tags/before-github-sync/g2o/stuff/sparse_helper.h	/^namespace g2o {$/;"	n
formatString	tags/before-github-sync/g2o/stuff/string_tools.cpp	/^std::string formatString(const char* fmt, ...)$/;"	f	namespace:g2o
g2o	tags/before-github-sync/g2o/stuff/string_tools.cpp	/^namespace g2o {$/;"	n	file:
readLine	tags/before-github-sync/g2o/stuff/string_tools.cpp	/^int readLine(std::istream& is, std::stringstream& currentLine)$/;"	f	namespace:g2o
strEndsWith	tags/before-github-sync/g2o/stuff/string_tools.cpp	/^bool strEndsWith(const std::string& s, const std::string& end)$/;"	f	namespace:g2o
strExpandFilename	tags/before-github-sync/g2o/stuff/string_tools.cpp	/^std::string strExpandFilename(const std::string& filename)$/;"	f	namespace:g2o
strPrintf	tags/before-github-sync/g2o/stuff/string_tools.cpp	/^int strPrintf(std::string& str, const char* fmt, ...)$/;"	f	namespace:g2o
strSplit	tags/before-github-sync/g2o/stuff/string_tools.cpp	/^std::vector<std::string> strSplit(const std::string& str, const std::string& delimiters)$/;"	f	namespace:g2o
strStartsWith	tags/before-github-sync/g2o/stuff/string_tools.cpp	/^bool strStartsWith(const std::string& s, const std::string& start)$/;"	f	namespace:g2o
strToLower	tags/before-github-sync/g2o/stuff/string_tools.cpp	/^std::string strToLower(const std::string& s)$/;"	f	namespace:g2o
strToUpper	tags/before-github-sync/g2o/stuff/string_tools.cpp	/^std::string strToUpper(const std::string& s)$/;"	f	namespace:g2o
trim	tags/before-github-sync/g2o/stuff/string_tools.cpp	/^std::string trim(const std::string& s)$/;"	f	namespace:g2o
trimLeft	tags/before-github-sync/g2o/stuff/string_tools.cpp	/^std::string trimLeft(const std::string& s)$/;"	f	namespace:g2o
trimRight	tags/before-github-sync/g2o/stuff/string_tools.cpp	/^std::string trimRight(const std::string& s)$/;"	f	namespace:g2o
G2O_STRING_TOOLS_H	tags/before-github-sync/g2o/stuff/string_tools.h	18;"	d
convertString	tags/before-github-sync/g2o/stuff/string_tools.h	/^void convertString(const std::string& s, T& x, bool failIfLeftoverChars = true)$/;"	f	namespace:g2o
g2o	tags/before-github-sync/g2o/stuff/string_tools.h	/^namespace g2o {$/;"	n
readFloats	tags/before-github-sync/g2o/stuff/string_tools.h	/^OutputIterator readFloats(const char* str, OutputIterator out)$/;"	f	namespace:g2o
readInts	tags/before-github-sync/g2o/stuff/string_tools.h	/^OutputIterator readInts(const char* str, OutputIterator out)$/;"	f	namespace:g2o
stringToType	tags/before-github-sync/g2o/stuff/string_tools.h	/^T stringToType(const std::string& s, bool failIfLeftoverChars = true)$/;"	f	namespace:g2o
DELTA_EPOCH_IN_MICROSECS	tags/before-github-sync/g2o/stuff/timeutil.cpp	29;"	d	file:
DELTA_EPOCH_IN_MICROSECS	tags/before-github-sync/g2o/stuff/timeutil.cpp	31;"	d	file:
ScopeTime	tags/before-github-sync/g2o/stuff/timeutil.cpp	/^ScopeTime::ScopeTime(const char* title) : _title(title), _startTime(get_time()) {}$/;"	f	class:g2o::ScopeTime
g2o	tags/before-github-sync/g2o/stuff/timeutil.cpp	/^namespace g2o {$/;"	n	file:
gettimeofday	tags/before-github-sync/g2o/stuff/timeutil.cpp	/^int gettimeofday(struct timeval *tv, struct timezone *tz)$/;"	f	namespace:g2o
timezone	tags/before-github-sync/g2o/stuff/timeutil.cpp	/^struct timezone$/;"	s	namespace:g2o	file:
tz_dsttime	tags/before-github-sync/g2o/stuff/timeutil.cpp	/^  int  tz_dsttime;     \/* type of dst correction *\/$/;"	m	struct:g2o::timezone	file:
tz_minuteswest	tags/before-github-sync/g2o/stuff/timeutil.cpp	/^  int  tz_minuteswest; \/* minutes W of Greenwich *\/$/;"	m	struct:g2o::timezone	file:
~ScopeTime	tags/before-github-sync/g2o/stuff/timeutil.cpp	/^ScopeTime::~ScopeTime() {$/;"	f	class:g2o::ScopeTime
DO_EVERY	tags/before-github-sync/g2o/stuff/timeutil.h	54;"	d
DO_EVERY_TS	tags/before-github-sync/g2o/stuff/timeutil.h	38;"	d
G2O_TIMEUTIL_H	tags/before-github-sync/g2o/stuff/timeutil.h	18;"	d
MEASURE_FUNCTION_TIME	tags/before-github-sync/g2o/stuff/timeutil.h	104;"	d
MEASURE_TIME	tags/before-github-sync/g2o/stuff/timeutil.h	58;"	d
ScopeTime	tags/before-github-sync/g2o/stuff/timeutil.h	/^class ScopeTime {$/;"	c	namespace:g2o
_startTime	tags/before-github-sync/g2o/stuff/timeutil.h	/^    double _startTime;$/;"	m	class:g2o::ScopeTime
_title	tags/before-github-sync/g2o/stuff/timeutil.h	/^    std::string _title;$/;"	m	class:g2o::ScopeTime
g2o	tags/before-github-sync/g2o/stuff/timeutil.h	/^namespace g2o {$/;"	n
get_time	tags/before-github-sync/g2o/stuff/timeutil.h	/^inline double get_time() $/;"	f	namespace:g2o
timeval	tags/before-github-sync/g2o/stuff/timeutil.h	/^typedef struct timeval {$/;"	s	namespace:g2o
timeval	tags/before-github-sync/g2o/stuff/timeutil.h	/^} timeval;$/;"	t	namespace:g2o
tv_sec	tags/before-github-sync/g2o/stuff/timeutil.h	/^  long tv_sec;$/;"	m	struct:g2o::timeval
tv_usec	tags/before-github-sync/g2o/stuff/timeutil.h	/^  long tv_usec;$/;"	m	struct:g2o::timeval
Edge_V_V_GICP	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  Edge_V_V_GICP::Edge_V_V_GICP(const Edge_V_V_GICP* e)$/;"	f	class:g2o::Edge_V_V_GICP
Edge_XYZ_VSC	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  Edge_XYZ_VSC::Edge_XYZ_VSC()$/;"	f	class:g2o::Edge_XYZ_VSC
Kcam	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  Matrix3d VertexSCam::Kcam;$/;"	m	class:g2o::VertexSCam	file:
Vector6d	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  typedef  Matrix<double, 6, 1> Vector6d;$/;"	t	namespace:g2o	file:
VertexSCam	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  VertexSCam::VertexSCam() :$/;"	f	class:g2o::VertexSCam
baseline	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  double VertexSCam::baseline;$/;"	m	class:g2o::VertexSCam	file:
dRidx	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  Matrix3d Edge_V_V_GICP::dRidx; \/\/ differential quat matrices$/;"	m	class:g2o::Edge_V_V_GICP	file:
dRidx	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  Matrix3d VertexSCam::dRidx; \/\/ differential quat matrices$/;"	m	class:g2o::VertexSCam	file:
dRidy	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  Matrix3d Edge_V_V_GICP::dRidy; \/\/ differential quat matrices$/;"	m	class:g2o::Edge_V_V_GICP	file:
dRidy	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  Matrix3d VertexSCam::dRidy; \/\/ differential quat matrices$/;"	m	class:g2o::VertexSCam	file:
dRidz	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  Matrix3d Edge_V_V_GICP::dRidz; \/\/ differential quat matrices$/;"	m	class:g2o::Edge_V_V_GICP	file:
dRidz	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  Matrix3d VertexSCam::dRidz; \/\/ differential quat matrices$/;"	m	class:g2o::VertexSCam	file:
g2o	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^namespace g2o {$/;"	n	file:
init_icp_types	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  void __attribute__ ((constructor)) init_icp_types(void)$/;"	f	namespace:g2o
linearizeOplus	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  void Edge_V_V_GICP::linearizeOplus()$/;"	f	class:g2o::Edge_V_V_GICP
linearizeOplus	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  void Edge_XYZ_VSC::linearizeOplus()$/;"	f	class:g2o::Edge_XYZ_VSC
read	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  bool Edge_V_V_GICP::read(std::istream& is)$/;"	f	class:g2o::Edge_V_V_GICP
read	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  bool Edge_XYZ_VSC::read(std::istream&)$/;"	f	class:g2o::Edge_XYZ_VSC
read	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  bool VertexSCam::read(std::istream&)$/;"	f	class:g2o::VertexSCam
write	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  bool Edge_V_V_GICP::write(std::ostream& os) const$/;"	f	class:g2o::Edge_V_V_GICP
write	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  bool Edge_XYZ_VSC::write(std::ostream&) const$/;"	f	class:g2o::Edge_XYZ_VSC
write	tags/before-github-sync/g2o/types/icp/types_icp.cpp	/^  bool VertexSCam::write(std::ostream&) const$/;"	f	class:g2o::VertexSCam
EdgeGICP	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    EdgeGICP()$/;"	f	class:g2o::EdgeGICP
EdgeGICP	tags/before-github-sync/g2o/types/icp/types_icp.h	/^  class EdgeGICP$/;"	c	namespace:g2o
Edge_V_V_GICP	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      Edge_V_V_GICP() : pl_pl(false) {};$/;"	f	class:g2o::Edge_V_V_GICP
Edge_V_V_GICP	tags/before-github-sync/g2o/types/icp/types_icp.h	/^  class Edge_V_V_GICP : public  BaseBinaryEdge<3, EdgeGICP, VertexSE3, VertexSE3>$/;"	c	namespace:g2o
Edge_XYZ_VSC	tags/before-github-sync/g2o/types/icp/types_icp.h	/^  class Edge_XYZ_VSC : public  BaseBinaryEdge<3, Vector3d, VertexPointXYZ, VertexSCam>$/;"	c	namespace:g2o
G2O_TYPES_ICP	tags/before-github-sync/g2o/types/icp/types_icp.h	18;"	d
GICP_ANALYTIC_JACOBIANS	tags/before-github-sync/g2o/types/icp/types_icp.h	20;"	d
Kcam	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      static Matrix3d Kcam;$/;"	m	class:g2o::VertexSCam
R0	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    Matrix3d R0,R1;$/;"	m	class:g2o::EdgeGICP
R1	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    Matrix3d R0,R1;$/;"	m	class:g2o::EdgeGICP
Vector6d	tags/before-github-sync/g2o/types/icp/types_icp.h	/^  typedef  Matrix<double, 6, 1> Vector6d;$/;"	t	namespace:g2o
VertexSCam	tags/before-github-sync/g2o/types/icp/types_icp.h	/^  class VertexSCam : public VertexSE3$/;"	c	namespace:g2o
baseline	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      static double baseline;$/;"	m	class:g2o::VertexSCam
computeError	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    void computeError()$/;"	f	class:g2o::Edge_V_V_GICP
computeError	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    void computeError()$/;"	f	class:g2o::Edge_XYZ_VSC
cov0	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    Matrix3d cov0(double e)$/;"	f	class:g2o::EdgeGICP
cov0	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    Matrix3d cov0, cov1;$/;"	m	class:g2o::Edge_V_V_GICP
cov1	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    Matrix3d cov0, cov1;$/;"	m	class:g2o::Edge_V_V_GICP
cov1	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    Matrix3d cov1(double e)$/;"	f	class:g2o::EdgeGICP
dRdx	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      Matrix3d dRdx, dRdy, dRdz;$/;"	m	class:g2o::VertexSCam
dRdy	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      Matrix3d dRdx, dRdy, dRdz;$/;"	m	class:g2o::VertexSCam
dRdz	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      Matrix3d dRdx, dRdy, dRdz;$/;"	m	class:g2o::VertexSCam
dRidx	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      static Matrix3d dRidx, dRidy, dRidz;$/;"	m	class:g2o::VertexSCam
dRidx	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    static Matrix3d dRidx, dRidy, dRidz; \/\/ differential quat matrices$/;"	m	class:g2o::Edge_V_V_GICP
dRidy	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      static Matrix3d dRidx, dRidy, dRidz;$/;"	m	class:g2o::VertexSCam
dRidy	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    static Matrix3d dRidx, dRidy, dRidz; \/\/ differential quat matrices$/;"	m	class:g2o::Edge_V_V_GICP
dRidz	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      static Matrix3d dRidx, dRidy, dRidz;$/;"	m	class:g2o::VertexSCam
dRidz	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    static Matrix3d dRidx, dRidy, dRidz; \/\/ differential quat matrices$/;"	m	class:g2o::Edge_V_V_GICP
g2o	tags/before-github-sync/g2o/types/icp/types_icp.h	/^namespace g2o {$/;"	n
makeRot0	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    void makeRot0()$/;"	f	class:g2o::EdgeGICP
makeRot1	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    void makeRot1()$/;"	f	class:g2o::EdgeGICP
mapPoint	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      void mapPoint(Vector3d &res, const Vector3d &pt3)$/;"	f	class:g2o::VertexSCam
normal0	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    Vector3d normal0, normal1;$/;"	m	class:g2o::EdgeGICP
normal1	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    Vector3d normal0, normal1;$/;"	m	class:g2o::EdgeGICP
oplus	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      virtual void oplus(double* update)$/;"	f	class:g2o::VertexSCam
pl_pl	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    bool pl_pl;$/;"	m	class:g2o::Edge_V_V_GICP
pos0	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    Vector3d pos0, pos1;$/;"	m	class:g2o::EdgeGICP
pos1	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    Vector3d pos0, pos1;$/;"	m	class:g2o::EdgeGICP
prec0	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    Matrix3d prec0(double e)$/;"	f	class:g2o::EdgeGICP
prec1	tags/before-github-sync/g2o/types/icp/types_icp.h	/^    Matrix3d prec1(double e)$/;"	f	class:g2o::EdgeGICP
setAll	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      void setAll()$/;"	f	class:g2o::VertexSCam
setDr	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      void setDr()$/;"	f	class:g2o::VertexSCam
setKcam	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      static void setKcam(double fx, double fy, double cx, double cy, double tx)$/;"	f	class:g2o::VertexSCam
setProjection	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      void setProjection() { w2i = Kcam * w2n; }$/;"	f	class:g2o::VertexSCam
setTransform	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      void setTransform()  { transformW2F(w2n,estimate().translation(),$/;"	f	class:g2o::VertexSCam
transformF2W	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      static void transformF2W(Matrix<double,3,4> &m,$/;"	f	class:g2o::VertexSCam
transformW2F	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      static void transformW2F(Matrix<double,3,4> &m,$/;"	f	class:g2o::VertexSCam
w2i	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      Matrix<double,3,4> w2i; \/\/ transform from world to image coordinates$/;"	m	class:g2o::VertexSCam
w2n	tags/before-github-sync/g2o/types/icp/types_icp.h	/^      Matrix<double,3,4> w2n; \/\/ transform from world to node coordinates$/;"	m	class:g2o::VertexSCam
EdgeProjectP2MC	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  EdgeProjectP2MC::EdgeProjectP2MC() :$/;"	f	class:g2o::EdgeProjectP2MC
EdgeProjectP2MC_Intrinsics	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  EdgeProjectP2MC_Intrinsics::EdgeProjectP2MC_Intrinsics() :$/;"	f	class:g2o::EdgeProjectP2MC_Intrinsics
EdgeProjectP2SC	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  EdgeProjectP2SC::EdgeProjectP2SC() :$/;"	f	class:g2o::EdgeProjectP2SC
EdgeSBACam	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  EdgeSBACam::EdgeSBACam() :$/;"	f	class:g2o::EdgeSBACam
EdgeSBAScale	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  EdgeSBAScale::EdgeSBAScale() :$/;"	f	class:g2o::EdgeSBAScale
VertexCam	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  VertexCam::VertexCam() $/;"	f	class:g2o::VertexCam
VertexIntrinsics	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  VertexIntrinsics::VertexIntrinsics() $/;"	f	class:g2o::VertexIntrinsics
VertexPointXYZ	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  VertexPointXYZ::VertexPointXYZ() : BaseVertex<3, Vector3d>()$/;"	f	class:g2o::VertexPointXYZ
g2o	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^namespace g2o {$/;"	n	file:
init_sba_types	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  void __attribute__ ((constructor)) init_sba_types(void)$/;"	f	namespace:g2o
initialEstimate	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  void EdgeSBACam::initialEstimate(const OptimizableGraph::VertexSet& from_, OptimizableGraph::Vertex* \/*to_*\/)$/;"	f	class:g2o::EdgeSBACam
initialEstimate	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  void EdgeSBAScale::initialEstimate(const OptimizableGraph::VertexSet& from_, OptimizableGraph::Vertex* \/*to_*\/)$/;"	f	class:g2o::EdgeSBAScale
linearizeOplus	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  void EdgeProjectP2MC::linearizeOplus()$/;"	f	class:g2o::EdgeProjectP2MC
linearizeOplus	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  void EdgeProjectP2MC_Intrinsics::linearizeOplus()$/;"	f	class:g2o::EdgeProjectP2MC_Intrinsics
linearizeOplus	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  void EdgeProjectP2SC::linearizeOplus()$/;"	f	class:g2o::EdgeProjectP2SC
read	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  bool EdgeProjectP2MC::read(std::istream& is)$/;"	f	class:g2o::EdgeProjectP2MC
read	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  bool EdgeProjectP2MC_Intrinsics::read(std::istream& is)$/;"	f	class:g2o::EdgeProjectP2MC_Intrinsics
read	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  bool EdgeProjectP2SC::read(std::istream& is)$/;"	f	class:g2o::EdgeProjectP2SC
read	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  bool EdgeSBACam::read(std::istream& is)$/;"	f	class:g2o::EdgeSBACam
read	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  bool EdgeSBAScale::read(std::istream& is)$/;"	f	class:g2o::EdgeSBAScale
read	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  bool VertexCam::read(std::istream& is)$/;"	f	class:g2o::VertexCam
read	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  bool VertexIntrinsics::read(std::istream& is)$/;"	f	class:g2o::VertexIntrinsics
read	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  bool VertexPointXYZ::read(std::istream& is)$/;"	f	class:g2o::VertexPointXYZ
write	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  bool EdgeProjectP2MC::write(std::ostream& os) const$/;"	f	class:g2o::EdgeProjectP2MC
write	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  bool EdgeProjectP2MC_Intrinsics::write(std::ostream& os) const$/;"	f	class:g2o::EdgeProjectP2MC_Intrinsics
write	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  bool EdgeProjectP2SC::write(std::ostream& os) const$/;"	f	class:g2o::EdgeProjectP2SC
write	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  bool EdgeSBACam::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSBACam
write	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  bool EdgeSBAScale::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSBAScale
write	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  bool VertexCam::write(std::ostream& os) const$/;"	f	class:g2o::VertexCam
write	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  bool VertexIntrinsics::write(std::ostream& os) const$/;"	f	class:g2o::VertexIntrinsics
write	tags/before-github-sync/g2o/types/sba/types_sba.cpp	/^  bool VertexPointXYZ::write(std::ostream& os) const$/;"	f	class:g2o::VertexPointXYZ
EdgeProjectP2MC	tags/before-github-sync/g2o/types/sba/types_sba.h	/^ class EdgeProjectP2MC : public  BaseBinaryEdge<2, Vector2d, VertexPointXYZ, VertexCam> $/;"	c	namespace:g2o
EdgeProjectP2MC_Intrinsics	tags/before-github-sync/g2o/types/sba/types_sba.h	/^ class EdgeProjectP2MC_Intrinsics : public  BaseMultiEdge<2, Vector2d> $/;"	c	namespace:g2o
EdgeProjectP2SC	tags/before-github-sync/g2o/types/sba/types_sba.h	/^ class EdgeProjectP2SC : public  BaseBinaryEdge<3, Vector3d, VertexPointXYZ, VertexCam>$/;"	c	namespace:g2o
EdgeSBACam	tags/before-github-sync/g2o/types/sba/types_sba.h	/^ class EdgeSBACam : public BaseBinaryEdge<6, SE3Quat, VertexCam, VertexCam>$/;"	c	namespace:g2o
EdgeSBAScale	tags/before-github-sync/g2o/types/sba/types_sba.h	/^ class EdgeSBAScale : public BaseBinaryEdge<1, double, VertexCam, VertexCam>$/;"	c	namespace:g2o
G2O_SBA_TYPES	tags/before-github-sync/g2o/types/sba/types_sba.h	18;"	d
VertexCam	tags/before-github-sync/g2o/types/sba/types_sba.h	/^  class VertexCam : public BaseVertex<6, SBACam>$/;"	c	namespace:g2o
VertexIntrinsics	tags/before-github-sync/g2o/types/sba/types_sba.h	/^class VertexIntrinsics : public BaseVertex<4, Matrix<double, 5, 1> >$/;"	c	namespace:g2o
VertexPointXYZ	tags/before-github-sync/g2o/types/sba/types_sba.h	/^ class VertexPointXYZ : public BaseVertex<3, Vector3d>$/;"	c	namespace:g2o
_intrinsics	tags/before-github-sync/g2o/types/sba/types_sba.h	/^    VertexIntrinsics* _intrinsics;$/;"	m	class:g2o::VertexCam
computeError	tags/before-github-sync/g2o/types/sba/types_sba.h	/^    void computeError()$/;"	f	class:g2o::EdgeProjectP2MC
computeError	tags/before-github-sync/g2o/types/sba/types_sba.h	/^    void computeError()$/;"	f	class:g2o::EdgeProjectP2MC_Intrinsics
computeError	tags/before-github-sync/g2o/types/sba/types_sba.h	/^    void computeError()$/;"	f	class:g2o::EdgeProjectP2SC
computeError	tags/before-github-sync/g2o/types/sba/types_sba.h	/^    void computeError()$/;"	f	class:g2o::EdgeSBACam
computeError	tags/before-github-sync/g2o/types/sba/types_sba.h	/^    void computeError()$/;"	f	class:g2o::EdgeSBAScale
g2o	tags/before-github-sync/g2o/types/sba/types_sba.h	/^namespace g2o {$/;"	n
initialEstimatePossible	tags/before-github-sync/g2o/types/sba/types_sba.h	/^    virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& , OptimizableGraph::Vertex* ) { return 1.;}$/;"	f	class:g2o::EdgeSBACam
initialEstimatePossible	tags/before-github-sync/g2o/types/sba/types_sba.h	/^    virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& , OptimizableGraph::Vertex* ) { return 1.;}$/;"	f	class:g2o::EdgeSBAScale
oplus	tags/before-github-sync/g2o/types/sba/types_sba.h	/^    virtual void oplus(double* update)$/;"	f	class:g2o::VertexCam
oplus	tags/before-github-sync/g2o/types/sba/types_sba.h	/^    virtual void oplus(double* update)$/;"	f	class:g2o::VertexIntrinsics
oplus	tags/before-github-sync/g2o/types/sba/types_sba.h	/^    virtual void oplus(double* update_)$/;"	f	class:g2o::VertexPointXYZ
setToOrigin	tags/before-github-sync/g2o/types/sba/types_sba.h	/^    virtual void setToOrigin() {$/;"	f	class:g2o::VertexCam
setToOrigin	tags/before-github-sync/g2o/types/sba/types_sba.h	/^    virtual void setToOrigin() {$/;"	f	class:g2o::VertexIntrinsics
setToOrigin	tags/before-github-sync/g2o/types/sba/types_sba.h	/^    virtual void setToOrigin() {$/;"	f	class:g2o::VertexPointXYZ
EdgeProjectXYZ2UV	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^  EdgeProjectXYZ2UV::EdgeProjectXYZ2UV() :$/;"	f	class:g2o::EdgeProjectXYZ2UV
EdgeProjectXYZ2UVQ	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^  EdgeProjectXYZ2UVQ::EdgeProjectXYZ2UVQ() :$/;"	f	class:g2o::EdgeProjectXYZ2UVQ
EdgeProjectXYZ2UVU	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^  EdgeProjectXYZ2UVU::EdgeProjectXYZ2UVU() :$/;"	f	class:g2o::EdgeProjectXYZ2UVU
EdgeSE3Expmap	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^  EdgeSE3Expmap::EdgeSE3Expmap() :$/;"	f	class:g2o::EdgeSE3Expmap
VertexSE3Expmap	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^  VertexSE3Expmap::VertexSE3Expmap() : BaseVertex<6, SE3Quat>()$/;"	f	class:g2o::VertexSE3Expmap
g2o	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^namespace g2o {$/;"	n	file:
init_six_dof_types	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^  void __attribute__ ((constructor)) init_six_dof_types(void)$/;"	f	namespace:g2o
linearizeOplus	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^  void EdgeProjectXYZ2UV::linearizeOplus()$/;"	f	class:g2o::EdgeProjectXYZ2UV
linearizeOplus	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^  void EdgeProjectXYZ2UVQ::linearizeOplus()$/;"	f	class:g2o::EdgeProjectXYZ2UVQ
linearizeOplus	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^  void EdgeSE3Expmap::linearizeOplus()$/;"	f	class:g2o::EdgeSE3Expmap
read	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^  bool EdgeProjectXYZ2UV::read(std::istream& is)$/;"	f	class:g2o::EdgeProjectXYZ2UV
read	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^  bool EdgeProjectXYZ2UVQ::read(std::istream& is)$/;"	f	class:g2o::EdgeProjectXYZ2UVQ
read	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^  bool EdgeProjectXYZ2UVU::read(std::istream& is)$/;"	f	class:g2o::EdgeProjectXYZ2UVU
read	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^  bool EdgeSE3Expmap::read(std::istream& is)$/;"	f	class:g2o::EdgeSE3Expmap
read	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^  bool VertexSE3Expmap::read(std::istream& is)$/;"	f	class:g2o::VertexSE3Expmap
write	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^  bool EdgeProjectXYZ2UV::write(std::ostream& os) const$/;"	f	class:g2o::EdgeProjectXYZ2UV
write	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^  bool EdgeProjectXYZ2UVQ::write(std::ostream& os) const$/;"	f	class:g2o::EdgeProjectXYZ2UVQ
write	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^  bool EdgeProjectXYZ2UVU::write(std::ostream& os) const$/;"	f	class:g2o::EdgeProjectXYZ2UVU
write	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^  bool EdgeSE3Expmap::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSE3Expmap
write	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.cpp	/^  bool VertexSE3Expmap::write(std::ostream& os) const$/;"	f	class:g2o::VertexSE3Expmap
EdgeProjectXYZ2UV	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	/^class EdgeProjectXYZ2UV : public  BaseBinaryEdge<2, Vector2d, VertexPointXYZ, VertexSE3Expmap>$/;"	c	namespace:g2o
EdgeProjectXYZ2UVQ	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	/^class EdgeProjectXYZ2UVQ : public  BaseBinaryEdge<3, Vector3d, VertexPointXYZ, VertexSE3Expmap>$/;"	c	namespace:g2o
EdgeProjectXYZ2UVU	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	/^class EdgeProjectXYZ2UVU : public  BaseBinaryEdge<3, Vector3d, VertexPointXYZ, VertexSE3Expmap>$/;"	c	namespace:g2o
EdgeSE3Expmap	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	/^class EdgeSE3Expmap : public BaseBinaryEdge<6, SE3Quat, VertexSE3Expmap, VertexSE3Expmap>$/;"	c	namespace:g2o
G2O_SIX_DOF_TYPES_EXPMAP	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	18;"	d
Matrix6d	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	/^  typedef Matrix<double, 6, 6> Matrix6d;$/;"	t	namespace:g2o
VertexSE3Expmap	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	/^  class VertexSE3Expmap : public BaseVertex<6, SE3Quat>$/;"	c	namespace:g2o
_baseline	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	/^      double _baseline;$/;"	m	class:g2o::VertexSE3Expmap
_focal_length	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	/^      Vector2d _focal_length;$/;"	m	class:g2o::VertexSE3Expmap
_principle_point	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	/^      Vector2d _principle_point;$/;"	m	class:g2o::VertexSE3Expmap
cam_map	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	/^      Vector2d cam_map(const Vector3d & trans_xyz) const$/;"	f	class:g2o::VertexSE3Expmap
computeError	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	/^    void computeError()$/;"	f	class:g2o::EdgeProjectXYZ2UV
computeError	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	/^    void computeError()$/;"	f	class:g2o::EdgeProjectXYZ2UVQ
computeError	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	/^    void computeError()$/;"	f	class:g2o::EdgeProjectXYZ2UVU
computeError	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	/^    void computeError()$/;"	f	class:g2o::EdgeSE3Expmap
g2o	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	/^namespace g2o {$/;"	n
oplus	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	/^      virtual void oplus(double* update_)$/;"	f	class:g2o::VertexSE3Expmap
setToOrigin	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	/^      virtual void setToOrigin() {$/;"	f	class:g2o::VertexSE3Expmap
stereocam_uvq_map	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	/^      Vector3d stereocam_uvq_map(const Vector3d & trans_xyz) const$/;"	f	class:g2o::VertexSE3Expmap
stereocam_uvu_map	tags/before-github-sync/g2o/types/sba/types_six_dof_expmap.h	/^      Vector3d stereocam_uvu_map(const Vector3d & trans_xyz) const$/;"	f	class:g2o::VertexSE3Expmap
EdgeSim3	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  EdgeSim3::EdgeSim3() :$/;"	f	class:g2o::EdgeSim3
EdgeSim3ProjectXYZ	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  EdgeSim3ProjectXYZ::EdgeSim3ProjectXYZ() :$/;"	f	class:g2o::EdgeSim3ProjectXYZ
VertexSim3Expmap	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  VertexSim3Expmap::VertexSim3Expmap() : BaseVertex<7, Sim3>()$/;"	f	class:g2o::VertexSim3Expmap
g2o	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.cpp	/^namespace g2o {$/;"	n	file:
init_seven_dof_types	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  void __attribute__ ((constructor)) init_seven_dof_types(void)$/;"	f	namespace:g2o
read	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  bool EdgeSim3::read(std::istream& is)$/;"	f	class:g2o::EdgeSim3
read	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  bool EdgeSim3ProjectXYZ::read(std::istream& is)$/;"	f	class:g2o::EdgeSim3ProjectXYZ
read	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  bool VertexSim3Expmap::read(std::istream& is)$/;"	f	class:g2o::VertexSim3Expmap
write	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  bool EdgeSim3::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSim3
write	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  bool EdgeSim3ProjectXYZ::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSim3ProjectXYZ
write	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  bool VertexSim3Expmap::write(std::ostream& os) const$/;"	f	class:g2o::VertexSim3Expmap
EdgeSim3	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.h	/^  class EdgeSim3 : public BaseBinaryEdge<7, Sim3, VertexSim3Expmap, VertexSim3Expmap>$/;"	c	namespace:g2o
EdgeSim3ProjectXYZ	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.h	/^class EdgeSim3ProjectXYZ : public  BaseBinaryEdge<2, Vector2d,  VertexPointXYZ, VertexSim3Expmap>$/;"	c	namespace:g2o
G2O_SEVEN_DOF_EXPMAP_TYPES	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.h	19;"	d
VertexSim3Expmap	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.h	/^  class VertexSim3Expmap : public BaseVertex<7, Sim3>$/;"	c	namespace:g2o
_fix_scale	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.h	/^    bool _fix_scale;$/;"	m	class:g2o::VertexSim3Expmap
_focal_length	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.h	/^    Vector2d _focal_length;$/;"	m	class:g2o::VertexSim3Expmap
_principle_point	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.h	/^    Vector2d _principle_point;$/;"	m	class:g2o::VertexSim3Expmap
cam_map	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.h	/^    Vector2d cam_map(const Vector2d & v) const$/;"	f	class:g2o::VertexSim3Expmap
computeError	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.h	/^    void computeError()$/;"	f	class:g2o::EdgeSim3
computeError	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.h	/^    void computeError()$/;"	f	class:g2o::EdgeSim3ProjectXYZ
g2o	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.h	/^namespace g2o {$/;"	n
initialEstimate	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.h	/^    virtual void initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/*to*\/)$/;"	f	class:g2o::EdgeSim3
initialEstimatePossible	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.h	/^    virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& , OptimizableGraph::Vertex* ) { return 1.;}$/;"	f	class:g2o::EdgeSim3
oplus	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.h	/^    virtual void oplus(double* update_)$/;"	f	class:g2o::VertexSim3Expmap
setToOrigin	tags/before-github-sync/g2o/types/sim3/types_seven_dof_expmap.h	/^    virtual void setToOrigin() {$/;"	f	class:g2o::VertexSim3Expmap
EdgeSE2	tags/before-github-sync/g2o/types/slam2d/edge_se2.cpp	/^  EdgeSE2::EdgeSE2() :$/;"	f	class:g2o::EdgeSE2
EdgeSE2DrawAction	tags/before-github-sync/g2o/types/slam2d/edge_se2.cpp	/^  EdgeSE2DrawAction::EdgeSE2DrawAction(): DrawAction(typeid(EdgeSE2).name()){}$/;"	f	class:g2o::EdgeSE2DrawAction
EdgeSE2WriteGnuplotAction	tags/before-github-sync/g2o/types/slam2d/edge_se2.cpp	/^  EdgeSE2WriteGnuplotAction::EdgeSE2WriteGnuplotAction(): WriteGnuplotAction(typeid(EdgeSE2).name()){}$/;"	f	class:g2o::EdgeSE2WriteGnuplotAction
g2o	tags/before-github-sync/g2o/types/slam2d/edge_se2.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	tags/before-github-sync/g2o/types/slam2d/edge_se2.cpp	/^  void EdgeSE2::initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/* to *\/)$/;"	f	class:g2o::EdgeSE2
linearizeOplus	tags/before-github-sync/g2o/types/slam2d/edge_se2.cpp	/^  void EdgeSE2::linearizeOplus()$/;"	f	class:g2o::EdgeSE2
operator ()	tags/before-github-sync/g2o/types/slam2d/edge_se2.cpp	/^  HyperGraphElementAction* EdgeSE2DrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::EdgeSE2DrawAction
operator ()	tags/before-github-sync/g2o/types/slam2d/edge_se2.cpp	/^  HyperGraphElementAction* EdgeSE2WriteGnuplotAction::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::EdgeSE2WriteGnuplotAction
read	tags/before-github-sync/g2o/types/slam2d/edge_se2.cpp	/^  bool EdgeSE2::read(std::istream& is)$/;"	f	class:g2o::EdgeSE2
write	tags/before-github-sync/g2o/types/slam2d/edge_se2.cpp	/^  bool EdgeSE2::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSE2
EdgeSE2	tags/before-github-sync/g2o/types/slam2d/edge_se2.h	/^  class EdgeSE2 : public BaseBinaryEdge<3, SE2, VertexSE2, VertexSE2>$/;"	c	namespace:g2o
EdgeSE2DrawAction	tags/before-github-sync/g2o/types/slam2d/edge_se2.h	/^  class EdgeSE2DrawAction: public DrawAction{$/;"	c	namespace:g2o
EdgeSE2WriteGnuplotAction	tags/before-github-sync/g2o/types/slam2d/edge_se2.h	/^  class EdgeSE2WriteGnuplotAction: public WriteGnuplotAction {$/;"	c	namespace:g2o
G2O_EDGE_SE2_H	tags/before-github-sync/g2o/types/slam2d/edge_se2.h	18;"	d
computeError	tags/before-github-sync/g2o/types/slam2d/edge_se2.h	/^      void computeError()$/;"	f	class:g2o::EdgeSE2
g2o	tags/before-github-sync/g2o/types/slam2d/edge_se2.h	/^namespace g2o {$/;"	n
getMeasurementData	tags/before-github-sync/g2o/types/slam2d/edge_se2.h	/^      virtual bool getMeasurementData(double* d) const {$/;"	f	class:g2o::EdgeSE2
initialEstimatePossible	tags/before-github-sync/g2o/types/slam2d/edge_se2.h	/^      virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& , OptimizableGraph::Vertex* ) { return 1.;}$/;"	f	class:g2o::EdgeSE2
measurementDimension	tags/before-github-sync/g2o/types/slam2d/edge_se2.h	/^      virtual int measurementDimension() const {return 3;}$/;"	f	class:g2o::EdgeSE2
setMeasurement	tags/before-github-sync/g2o/types/slam2d/edge_se2.h	/^      virtual void setMeasurement(const SE2& m){$/;"	f	class:g2o::EdgeSE2
setMeasurementData	tags/before-github-sync/g2o/types/slam2d/edge_se2.h	/^      virtual bool setMeasurementData(const double* d){$/;"	f	class:g2o::EdgeSE2
setMeasurementFromState	tags/before-github-sync/g2o/types/slam2d/edge_se2.h	/^      virtual bool setMeasurementFromState() {$/;"	f	class:g2o::EdgeSE2
EdgeSE2Multi	tags/before-github-sync/g2o/types/slam2d/edge_se2_multi.cpp	/^  EdgeSE2Multi::EdgeSE2Multi() :$/;"	f	class:g2o::EdgeSE2Multi
g2o	tags/before-github-sync/g2o/types/slam2d/edge_se2_multi.cpp	/^namespace g2o {$/;"	n	file:
read	tags/before-github-sync/g2o/types/slam2d/edge_se2_multi.cpp	/^  bool EdgeSE2Multi::read(std::istream& is)$/;"	f	class:g2o::EdgeSE2Multi
write	tags/before-github-sync/g2o/types/slam2d/edge_se2_multi.cpp	/^  bool EdgeSE2Multi::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSE2Multi
EdgeSE2Multi	tags/before-github-sync/g2o/types/slam2d/edge_se2_multi.h	/^  class EdgeSE2Multi: public BaseMultiEdge<3, SE2>$/;"	c	namespace:g2o
G2O_EDGE_SE2_MULTI_H	tags/before-github-sync/g2o/types/slam2d/edge_se2_multi.h	18;"	d
computeError	tags/before-github-sync/g2o/types/slam2d/edge_se2_multi.h	/^      void computeError()$/;"	f	class:g2o::EdgeSE2Multi
g2o	tags/before-github-sync/g2o/types/slam2d/edge_se2_multi.h	/^namespace g2o {$/;"	n
EdgeSE2PointXY	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.cpp	/^  EdgeSE2PointXY::EdgeSE2PointXY() :$/;"	f	class:g2o::EdgeSE2PointXY
EdgeSE2PointXYDrawAction	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.cpp	/^  EdgeSE2PointXYDrawAction::EdgeSE2PointXYDrawAction(): DrawAction(typeid(EdgeSE2PointXY).name()){}$/;"	f	class:g2o::EdgeSE2PointXYDrawAction
EdgeSE2PointXYWriteGnuplotAction	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.cpp	/^  EdgeSE2PointXYWriteGnuplotAction::EdgeSE2PointXYWriteGnuplotAction(): WriteGnuplotAction(typeid(EdgeSE2PointXY).name()){}$/;"	f	class:g2o::EdgeSE2PointXYWriteGnuplotAction
g2o	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.cpp	/^  void EdgeSE2PointXY::initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to)$/;"	f	class:g2o::EdgeSE2PointXY
linearizeOplus	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.cpp	/^  void EdgeSE2PointXY::linearizeOplus()$/;"	f	class:g2o::EdgeSE2PointXY
operator ()	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.cpp	/^  HyperGraphElementAction* EdgeSE2PointXYDrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::EdgeSE2PointXYDrawAction
operator ()	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.cpp	/^  HyperGraphElementAction* EdgeSE2PointXYWriteGnuplotAction::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::EdgeSE2PointXYWriteGnuplotAction
read	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.cpp	/^  bool EdgeSE2PointXY::read(std::istream& is)$/;"	f	class:g2o::EdgeSE2PointXY
write	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.cpp	/^  bool EdgeSE2PointXY::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSE2PointXY
EdgeSE2PointXY	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.h	/^  class EdgeSE2PointXY : public BaseBinaryEdge<2, Eigen::Vector2d, VertexSE2, VertexPointXY>$/;"	c	namespace:g2o
EdgeSE2PointXYDrawAction	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.h	/^  class EdgeSE2PointXYDrawAction: public DrawAction{$/;"	c	namespace:g2o
EdgeSE2PointXYWriteGnuplotAction	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.h	/^  class EdgeSE2PointXYWriteGnuplotAction: public WriteGnuplotAction {$/;"	c	namespace:g2o
G2O_EDGE_SE2_POINT_XY_H	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.h	18;"	d
computeError	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.h	/^      void computeError()$/;"	f	class:g2o::EdgeSE2PointXY
g2o	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.h	/^namespace g2o {$/;"	n
getMeasurementData	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.h	/^      virtual bool getMeasurementData(double* d) const{$/;"	f	class:g2o::EdgeSE2PointXY
initialEstimatePossible	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.h	/^      virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to) { (void) to; return (from.count(_vertices[0]) == 1 ? 1.0 : -1.0);}$/;"	f	class:g2o::EdgeSE2PointXY
measurementDimension	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.h	/^      virtual int measurementDimension() const {return 2;}$/;"	f	class:g2o::EdgeSE2PointXY
setMeasurementData	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.h	/^      virtual bool setMeasurementData(const double* d){$/;"	f	class:g2o::EdgeSE2PointXY
setMeasurementFromState	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy.h	/^      virtual bool setMeasurementFromState(){$/;"	f	class:g2o::EdgeSE2PointXY
EdgeSE2PointXYBearing	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.cpp	/^  EdgeSE2PointXYBearing::EdgeSE2PointXYBearing()$/;"	f	class:g2o::EdgeSE2PointXYBearing
EdgeSE2PointXYBearingDrawAction	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.cpp	/^  EdgeSE2PointXYBearingDrawAction::EdgeSE2PointXYBearingDrawAction(): DrawAction(typeid(EdgeSE2PointXYBearing).name()){}$/;"	f	class:g2o::EdgeSE2PointXYBearingDrawAction
EdgeSE2PointXYBearingWriteGnuplotAction	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.cpp	/^  EdgeSE2PointXYBearingWriteGnuplotAction::EdgeSE2PointXYBearingWriteGnuplotAction(): WriteGnuplotAction(typeid(EdgeSE2PointXYBearing).name()){}$/;"	f	class:g2o::EdgeSE2PointXYBearingWriteGnuplotAction
g2o	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.cpp	/^  void EdgeSE2PointXYBearing::initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/*to*\/)$/;"	f	class:g2o::EdgeSE2PointXYBearing
operator ()	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.cpp	/^  HyperGraphElementAction* EdgeSE2PointXYBearingDrawAction::operator()(HyperGraph::HyperGraphElement* element,  HyperGraphElementAction::Parameters* \/*params_*\/){$/;"	f	class:g2o::EdgeSE2PointXYBearingDrawAction
operator ()	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.cpp	/^  HyperGraphElementAction* EdgeSE2PointXYBearingWriteGnuplotAction::operator()(HyperGraph::HyperGraphElement* element,$/;"	f	class:g2o::EdgeSE2PointXYBearingWriteGnuplotAction
read	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.cpp	/^  bool EdgeSE2PointXYBearing::read(std::istream& is)$/;"	f	class:g2o::EdgeSE2PointXYBearing
write	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.cpp	/^  bool EdgeSE2PointXYBearing::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSE2PointXYBearing
EdgeSE2PointXYBearing	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^  class  EdgeSE2PointXYBearing: public BaseBinaryEdge<1, double, VertexSE2, VertexPointXY>$/;"	c	namespace:g2o
EdgeSE2PointXYBearingDrawAction	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^  class EdgeSE2PointXYBearingDrawAction: public DrawAction{$/;"	c	namespace:g2o
EdgeSE2PointXYBearingWriteGnuplotAction	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^  class EdgeSE2PointXYBearingWriteGnuplotAction: public WriteGnuplotAction {$/;"	c	namespace:g2o
G2O_EDGE_SE2_POINT_XY_BEARING_H	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.h	18;"	d
computeError	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^      void computeError()$/;"	f	class:g2o::EdgeSE2PointXYBearing
g2o	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^namespace g2o {$/;"	n
getMeasurementData	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^      virtual bool getMeasurementData(double* d) const {$/;"	f	class:g2o::EdgeSE2PointXYBearing
initialEstimatePossible	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^      virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to) { (void) to; return (from.count(_vertices[0]) == 1 ? 1.0 : -1.0);}$/;"	f	class:g2o::EdgeSE2PointXYBearing
measurementDimension	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^      int measurementDimension() const {return 1;}$/;"	f	class:g2o::EdgeSE2PointXYBearing
setMeasurementData	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^      virtual bool setMeasurementData(const double* d) {$/;"	f	class:g2o::EdgeSE2PointXYBearing
setMeasurementFromState	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^      virtual bool setMeasurementFromState(){$/;"	f	class:g2o::EdgeSE2PointXYBearing
EdgeSE2PointXYCalib	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_calib.cpp	/^  EdgeSE2PointXYCalib::EdgeSE2PointXYCalib() :$/;"	f	class:g2o::EdgeSE2PointXYCalib
g2o	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_calib.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_calib.cpp	/^  void EdgeSE2PointXYCalib::initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/*to*\/)$/;"	f	class:g2o::EdgeSE2PointXYCalib
read	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_calib.cpp	/^  bool EdgeSE2PointXYCalib::read(std::istream& is)$/;"	f	class:g2o::EdgeSE2PointXYCalib
write	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_calib.cpp	/^  bool EdgeSE2PointXYCalib::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSE2PointXYCalib
EdgeSE2PointXYCalib	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_calib.h	/^  class EdgeSE2PointXYCalib : public BaseMultiEdge<2, Eigen::Vector2d>$/;"	c	namespace:g2o
G2O_EDGE_SE2_XY_CALIB_H	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_calib.h	18;"	d
computeError	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_calib.h	/^      void computeError()$/;"	f	class:g2o::EdgeSE2PointXYCalib
g2o	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_calib.h	/^namespace g2o {$/;"	n
initialEstimatePossible	tags/before-github-sync/g2o/types/slam2d/edge_se2_pointxy_calib.h	/^      virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to) { (void) to; return (from.count(_vertices[0]) == 1 ? 1.0 : -1.0);}$/;"	f	class:g2o::EdgeSE2PointXYCalib
EdgeSE2Prior	tags/before-github-sync/g2o/types/slam2d/edge_se2_prior.cpp	/^  EdgeSE2Prior::EdgeSE2Prior() : BaseUnaryEdge<3, SE2, VertexSE2>()$/;"	f	class:g2o::EdgeSE2Prior
g2o	tags/before-github-sync/g2o/types/slam2d/edge_se2_prior.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	tags/before-github-sync/g2o/types/slam2d/edge_se2_prior.cpp	/^  void EdgeSE2Prior::initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to)$/;"	f	class:g2o::EdgeSE2Prior
read	tags/before-github-sync/g2o/types/slam2d/edge_se2_prior.cpp	/^  bool EdgeSE2Prior::read(std::istream& is)$/;"	f	class:g2o::EdgeSE2Prior
write	tags/before-github-sync/g2o/types/slam2d/edge_se2_prior.cpp	/^  bool EdgeSE2Prior::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSE2Prior
EdgeSE2Prior	tags/before-github-sync/g2o/types/slam2d/edge_se2_prior.h	/^  class EdgeSE2Prior : public BaseUnaryEdge<3, SE2, VertexSE2>$/;"	c	namespace:g2o
G2O_EDGE_SE2_PRIOR_H	tags/before-github-sync/g2o/types/slam2d/edge_se2_prior.h	18;"	d
computeError	tags/before-github-sync/g2o/types/slam2d/edge_se2_prior.h	/^      void computeError()$/;"	f	class:g2o::EdgeSE2Prior
g2o	tags/before-github-sync/g2o/types/slam2d/edge_se2_prior.h	/^namespace g2o {$/;"	n
getMeasurementData	tags/before-github-sync/g2o/types/slam2d/edge_se2_prior.h	/^      virtual bool getMeasurementData(double* d) const {$/;"	f	class:g2o::EdgeSE2Prior
initialEstimatePossible	tags/before-github-sync/g2o/types/slam2d/edge_se2_prior.h	/^      virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& , OptimizableGraph::Vertex* ) { return 1.;}$/;"	f	class:g2o::EdgeSE2Prior
measurementDimension	tags/before-github-sync/g2o/types/slam2d/edge_se2_prior.h	/^      int measurementDimension() const {return 3;}$/;"	f	class:g2o::EdgeSE2Prior
setMeasurementData	tags/before-github-sync/g2o/types/slam2d/edge_se2_prior.h	/^      virtual bool setMeasurementData(const double* d) {$/;"	f	class:g2o::EdgeSE2Prior
g2o	tags/before-github-sync/g2o/types/slam2d/types_slam2d.cpp	/^namespace g2o {$/;"	n	file:
init_types_slam2d	tags/before-github-sync/g2o/types/slam2d/types_slam2d.cpp	/^  void G2O_ATTRIBUTE_CONSTRUCTOR init_types_slam2d(void)$/;"	f	namespace:g2o
VertexPointXY	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.cpp	/^  VertexPointXY::VertexPointXY() :$/;"	f	class:g2o::VertexPointXY
VertexPointXYDrawAction	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.cpp	/^  VertexPointXYDrawAction::VertexPointXYDrawAction(): DrawAction(typeid(VertexPointXY).name()){}$/;"	f	class:g2o::VertexPointXYDrawAction
VertexPointXYWriteGnuplotAction	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.cpp	/^  VertexPointXYWriteGnuplotAction::VertexPointXYWriteGnuplotAction(): WriteGnuplotAction(typeid(VertexPointXY).name()){}$/;"	f	class:g2o::VertexPointXYWriteGnuplotAction
g2o	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.cpp	/^namespace g2o {$/;"	n	file:
operator ()	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.cpp	/^  HyperGraphElementAction* VertexPointXYDrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::VertexPointXYDrawAction
operator ()	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.cpp	/^  HyperGraphElementAction* VertexPointXYWriteGnuplotAction::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::VertexPointXYWriteGnuplotAction
read	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.cpp	/^  bool VertexPointXY::read(std::istream& is)$/;"	f	class:g2o::VertexPointXY
write	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.cpp	/^  bool VertexPointXY::write(std::ostream& os) const$/;"	f	class:g2o::VertexPointXY
G2O_VERTEX_POINT_XY_H	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.h	18;"	d
VertexPointXY	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.h	/^  class VertexPointXY : public BaseVertex<2, Eigen::Vector2d>$/;"	c	namespace:g2o
VertexPointXYDrawAction	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.h	/^  class VertexPointXYDrawAction: public DrawAction{$/;"	c	namespace:g2o
VertexPointXYWriteGnuplotAction	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.h	/^  class VertexPointXYWriteGnuplotAction: public WriteGnuplotAction {$/;"	c	namespace:g2o
estimateDimension	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.h	/^      virtual int estimateDimension() const { $/;"	f	class:g2o::VertexPointXY
g2o	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.h	/^namespace g2o {$/;"	n
getEstimateData	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.h	/^      virtual bool getEstimateData(double* est) const{$/;"	f	class:g2o::VertexPointXY
getMinimalEstimateData	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.h	/^      virtual bool getMinimalEstimateData(double* est) const{$/;"	f	class:g2o::VertexPointXY
minimalEstimateDimension	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.h	/^      virtual int minimalEstimateDimension() const { $/;"	f	class:g2o::VertexPointXY
oplus	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.h	/^      virtual void oplus(double* update)$/;"	f	class:g2o::VertexPointXY
setEstimateData	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.h	/^      virtual bool setEstimateData(const double* est){$/;"	f	class:g2o::VertexPointXY
setMinimalEstimateData	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.h	/^      virtual bool setMinimalEstimateData(const double* est){$/;"	f	class:g2o::VertexPointXY
setToOrigin	tags/before-github-sync/g2o/types/slam2d/vertex_point_xy.h	/^      virtual void setToOrigin() {$/;"	f	class:g2o::VertexPointXY
VertexSE2	tags/before-github-sync/g2o/types/slam2d/vertex_se2.cpp	/^  VertexSE2::VertexSE2() :$/;"	f	class:g2o::VertexSE2
VertexSE2DrawAction	tags/before-github-sync/g2o/types/slam2d/vertex_se2.cpp	/^  VertexSE2DrawAction::VertexSE2DrawAction(): DrawAction(typeid(VertexSE2).name()){}$/;"	f	class:g2o::VertexSE2DrawAction
VertexSE2WriteGnuplotAction	tags/before-github-sync/g2o/types/slam2d/vertex_se2.cpp	/^  VertexSE2WriteGnuplotAction::VertexSE2WriteGnuplotAction(): WriteGnuplotAction(typeid(VertexSE2).name()){}$/;"	f	class:g2o::VertexSE2WriteGnuplotAction
g2o	tags/before-github-sync/g2o/types/slam2d/vertex_se2.cpp	/^namespace g2o {$/;"	n	file:
operator ()	tags/before-github-sync/g2o/types/slam2d/vertex_se2.cpp	/^  HyperGraphElementAction* VertexSE2DrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::VertexSE2DrawAction
operator ()	tags/before-github-sync/g2o/types/slam2d/vertex_se2.cpp	/^  HyperGraphElementAction* VertexSE2WriteGnuplotAction::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::VertexSE2WriteGnuplotAction
read	tags/before-github-sync/g2o/types/slam2d/vertex_se2.cpp	/^  bool VertexSE2::read(std::istream& is)$/;"	f	class:g2o::VertexSE2
write	tags/before-github-sync/g2o/types/slam2d/vertex_se2.cpp	/^  bool VertexSE2::write(std::ostream& os) const$/;"	f	class:g2o::VertexSE2
G2O_VERTEX_SE2_H	tags/before-github-sync/g2o/types/slam2d/vertex_se2.h	18;"	d
VertexSE2	tags/before-github-sync/g2o/types/slam2d/vertex_se2.h	/^  class VertexSE2 : public BaseVertex<3, SE2>$/;"	c	namespace:g2o
VertexSE2DrawAction	tags/before-github-sync/g2o/types/slam2d/vertex_se2.h	/^  class VertexSE2DrawAction: public DrawAction{$/;"	c	namespace:g2o
VertexSE2WriteGnuplotAction	tags/before-github-sync/g2o/types/slam2d/vertex_se2.h	/^  class VertexSE2WriteGnuplotAction: public WriteGnuplotAction {$/;"	c	namespace:g2o
estimateDimension	tags/before-github-sync/g2o/types/slam2d/vertex_se2.h	/^      virtual int estimateDimension() const { return 3; }$/;"	f	class:g2o::VertexSE2
g2o	tags/before-github-sync/g2o/types/slam2d/vertex_se2.h	/^namespace g2o {$/;"	n
getEstimateData	tags/before-github-sync/g2o/types/slam2d/vertex_se2.h	/^      virtual bool getEstimateData(double* est) const {$/;"	f	class:g2o::VertexSE2
getMinimalEstimateData	tags/before-github-sync/g2o/types/slam2d/vertex_se2.h	/^      virtual bool getMinimalEstimateData(double* est) const {$/;"	f	class:g2o::VertexSE2
minimalEstimateDimension	tags/before-github-sync/g2o/types/slam2d/vertex_se2.h	/^      virtual int minimalEstimateDimension() const { return 3; }$/;"	f	class:g2o::VertexSE2
oplus	tags/before-github-sync/g2o/types/slam2d/vertex_se2.h	/^      virtual void oplus(double* update)$/;"	f	class:g2o::VertexSE2
setEstimateData	tags/before-github-sync/g2o/types/slam2d/vertex_se2.h	/^      virtual bool setEstimateData(const double* est){$/;"	f	class:g2o::VertexSE2
setMinimalEstimateData	tags/before-github-sync/g2o/types/slam2d/vertex_se2.h	/^      virtual bool setMinimalEstimateData(const double* est){$/;"	f	class:g2o::VertexSE2
setToOrigin	tags/before-github-sync/g2o/types/slam2d/vertex_se2.h	/^      virtual void setToOrigin() {$/;"	f	class:g2o::VertexSE2
EdgeSE3	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.cpp	/^  EdgeSE3::EdgeSE3() :$/;"	f	class:g2o::EdgeSE3
EdgeSE3DrawAction	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.cpp	/^  EdgeSE3DrawAction::EdgeSE3DrawAction(): DrawAction(typeid(EdgeSE3).name()){}$/;"	f	class:g2o::EdgeSE3DrawAction
EdgeSE3WriteGnuplotAction	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.cpp	/^  EdgeSE3WriteGnuplotAction::EdgeSE3WriteGnuplotAction(): WriteGnuplotAction(typeid(EdgeSE3).name()){}$/;"	f	class:g2o::EdgeSE3WriteGnuplotAction
g2o	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.cpp	/^  void EdgeSE3::initialEstimate(const OptimizableGraph::VertexSet& from_, OptimizableGraph::Vertex* \/*to_*\/)$/;"	f	class:g2o::EdgeSE3
linearizeOplus	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.cpp	/^  void EdgeSE3::linearizeOplus(){$/;"	f	class:g2o::EdgeSE3
operator ()	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.cpp	/^  HyperGraphElementAction* EdgeSE3DrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::EdgeSE3DrawAction
operator ()	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.cpp	/^  HyperGraphElementAction* EdgeSE3WriteGnuplotAction::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::EdgeSE3WriteGnuplotAction
read	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.cpp	/^  bool EdgeSE3::read(std::istream& is)$/;"	f	class:g2o::EdgeSE3
setMeasurementFromState	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.cpp	/^  bool EdgeSE3::setMeasurementFromState(){$/;"	f	class:g2o::EdgeSE3
write	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.cpp	/^  bool EdgeSE3::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSE3
EDGE_SE3_QUAT_ANALYTIC_JACOBIAN	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.h	26;"	d
EdgeSE3	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.h	/^ class EdgeSE3 : public BaseBinaryEdge<6, SE3Quat, VertexSE3, VertexSE3>$/;"	c	namespace:g2o
EdgeSE3DrawAction	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.h	/^  class EdgeSE3DrawAction: public DrawAction{$/;"	c	namespace:g2o
EdgeSE3WriteGnuplotAction	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.h	/^  class EdgeSE3WriteGnuplotAction: public WriteGnuplotAction {$/;"	c	namespace:g2o
G2O__EDGE_SE3_QUAT_	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.h	18;"	d
computeError	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.h	/^    void computeError()$/;"	f	class:g2o::EdgeSE3
g2o	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.h	/^namespace g2o {$/;"	n
getMeasurementData	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.h	/^    virtual bool getMeasurementData(double* d) const{$/;"	f	class:g2o::EdgeSE3
initialEstimatePossible	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.h	/^    virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& , OptimizableGraph::Vertex* ) { return 1.;}$/;"	f	class:g2o::EdgeSE3
measurementDimension	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.h	/^    virtual int measurementDimension() const {return 7;}$/;"	f	class:g2o::EdgeSE3
setMeasurement	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.h	/^    virtual void setMeasurement(const SE3Quat& m){$/;"	f	class:g2o::EdgeSE3
setMeasurementData	tags/before-github-sync/g2o/types/slam3d/edge_se3_quat.h	/^    virtual bool setMeasurementData(const double* d){$/;"	f	class:g2o::EdgeSE3
g2o	tags/before-github-sync/g2o/types/slam3d/types_six_dof_quat.cpp	/^namespace g2o {$/;"	n	file:
init_three_d_types	tags/before-github-sync/g2o/types/slam3d/types_six_dof_quat.cpp	/^  void __attribute__ ((constructor)) init_three_d_types(void)$/;"	f	namespace:g2o
G2O_THREE_D_TYPES	tags/before-github-sync/g2o/types/slam3d/types_six_dof_quat.h	18;"	d
THREE_D_TYPES_ANALYTIC_JACOBIAN	tags/before-github-sync/g2o/types/slam3d/types_six_dof_quat.h	26;"	d
VertexSE3	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.cpp	/^  VertexSE3::VertexSE3() :$/;"	f	class:g2o::VertexSE3
VertexSE3DrawAction	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.cpp	/^  VertexSE3DrawAction::VertexSE3DrawAction(): DrawAction(typeid(VertexSE3).name()){}$/;"	f	class:g2o::VertexSE3DrawAction
VertexSE3WriteGnuplotAction	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.cpp	/^  VertexSE3WriteGnuplotAction::VertexSE3WriteGnuplotAction(): WriteGnuplotAction(typeid(VertexSE3).name()){}$/;"	f	class:g2o::VertexSE3WriteGnuplotAction
g2o	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.cpp	/^namespace g2o {$/;"	n	file:
operator ()	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.cpp	/^  HyperGraphElementAction* VertexSE3DrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::VertexSE3DrawAction
operator ()	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.cpp	/^  HyperGraphElementAction* VertexSE3WriteGnuplotAction::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::VertexSE3WriteGnuplotAction
read	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.cpp	/^  bool VertexSE3::read(std::istream& is)$/;"	f	class:g2o::VertexSE3
write	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.cpp	/^  bool VertexSE3::write(std::ostream& os) const$/;"	f	class:g2o::VertexSE3
G2O__VERTEX_SE3_QUAT_	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.h	18;"	d
VertexSE3	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.h	/^class VertexSE3 : public BaseVertex<6, SE3Quat>$/;"	c	namespace:g2o
VertexSE3DrawAction	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.h	/^  class VertexSE3DrawAction: public DrawAction{$/;"	c	namespace:g2o
VertexSE3WriteGnuplotAction	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.h	/^  class VertexSE3WriteGnuplotAction: public WriteGnuplotAction {$/;"	c	namespace:g2o
estimateDimension	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.h	/^    virtual int estimateDimension() const {$/;"	f	class:g2o::VertexSE3
g2o	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.h	/^namespace g2o {$/;"	n
getEstimateData	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.h	/^    virtual bool getEstimateData(double* est) const{$/;"	f	class:g2o::VertexSE3
getMinimalEstimateData	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.h	/^    virtual bool getMinimalEstimateData(double* est) const{$/;"	f	class:g2o::VertexSE3
minimalEstimateDimension	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.h	/^    virtual int minimalEstimateDimension() const {$/;"	f	class:g2o::VertexSE3
oplus	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.h	/^    virtual void oplus(double* update)$/;"	f	class:g2o::VertexSE3
setEstimateData	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.h	/^    virtual bool setEstimateData(const double* est){$/;"	f	class:g2o::VertexSE3
setMinimalEstimateData	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.h	/^    virtual bool setMinimalEstimateData(const double* est){$/;"	f	class:g2o::VertexSE3
setToOrigin	tags/before-github-sync/g2o/types/slam3d/vertex_se3_quat.h	/^    virtual void setToOrigin() {$/;"	f	class:g2o::VertexSE3
ExampleSlamInterface	tags/before-github-sync/slam_parser/example/example_slam_interface.cpp	/^ExampleSlamInterface::ExampleSlamInterface()$/;"	f	class:ExampleSlamInterface
addEdge	tags/before-github-sync/slam_parser/example/example_slam_interface.cpp	/^bool ExampleSlamInterface::addEdge(const std::string& tag, int id, int dimension, int v1, int v2, const std::vector<double>& measurement, const std::vector<double>& information)$/;"	f	class:ExampleSlamInterface
addNode	tags/before-github-sync/slam_parser/example/example_slam_interface.cpp	/^bool ExampleSlamInterface::addNode(const std::string& tag, int id, int dimension, const std::vector<double>& values)$/;"	f	class:ExampleSlamInterface
fixNode	tags/before-github-sync/slam_parser/example/example_slam_interface.cpp	/^bool ExampleSlamInterface::fixNode(const std::vector<int>& nodes)$/;"	f	class:ExampleSlamInterface
queryState	tags/before-github-sync/slam_parser/example/example_slam_interface.cpp	/^bool ExampleSlamInterface::queryState(const std::vector<int>& nodes)$/;"	f	class:ExampleSlamInterface
solveState	tags/before-github-sync/slam_parser/example/example_slam_interface.cpp	/^bool ExampleSlamInterface::solveState()$/;"	f	class:ExampleSlamInterface
EXAMPLE_SLAM_INTERFACE_H	tags/before-github-sync/slam_parser/example/example_slam_interface.h	2;"	d
ExampleSlamInterface	tags/before-github-sync/slam_parser/example/example_slam_interface.h	/^class ExampleSlamInterface : public SlamParser::AbstractSlamInterface$/;"	c
_vertices	tags/before-github-sync/slam_parser/example/example_slam_interface.h	/^    std::map<int, std::pair<std::string, std::vector<double> > > _vertices; \/\/\/< the original value of the input (actually not needed if a real SLAM engine is running)$/;"	m	class:ExampleSlamInterface
main	tags/before-github-sync/slam_parser/example/test_slam_interface.cpp	/^int main()$/;"	f
ABSTRACT_SLAM_INTERFACE_H	tags/before-github-sync/slam_parser/interface/abstract_slam_interface.h	2;"	d
AbstractSlamInterface	tags/before-github-sync/slam_parser/interface/abstract_slam_interface.h	/^  class AbstractSlamInterface {$/;"	c	namespace:SlamParser
SlamParser	tags/before-github-sync/slam_parser/interface/abstract_slam_interface.h	/^namespace SlamParser {$/;"	n
ParserInterface	tags/before-github-sync/slam_parser/interface/parser_interface.cpp	/^  ParserInterface::ParserInterface(AbstractSlamInterface* slamInterface)$/;"	f	class:SlamParser::ParserInterface
SlamParser	tags/before-github-sync/slam_parser/interface/parser_interface.cpp	/^namespace SlamParser {$/;"	n	file:
parseCommand	tags/before-github-sync/slam_parser/interface/parser_interface.cpp	/^  bool ParserInterface::parseCommand(std::istream& input)$/;"	f	class:SlamParser::ParserInterface
~ParserInterface	tags/before-github-sync/slam_parser/interface/parser_interface.cpp	/^  ParserInterface::~ParserInterface()$/;"	f	class:SlamParser::ParserInterface
PARSER_INTERFACE_H	tags/before-github-sync/slam_parser/interface/parser_interface.h	2;"	d
ParserInterface	tags/before-github-sync/slam_parser/interface/parser_interface.h	/^  class ParserInterface$/;"	c	namespace:SlamParser
SlamParser	tags/before-github-sync/slam_parser/interface/parser_interface.h	/^namespace SlamParser {$/;"	n
_buffer	tags/before-github-sync/slam_parser/interface/parser_interface.h	/^      std::stringstream _buffer;$/;"	m	class:SlamParser::ParserInterface
_driver	tags/before-github-sync/slam_parser/interface/parser_interface.h	/^      Driver* _driver;$/;"	m	class:SlamParser::ParserInterface
_slamContextInterface	tags/before-github-sync/slam_parser/interface/parser_interface.h	/^      SlamContextInterface* _slamContextInterface;$/;"	m	class:SlamParser::ParserInterface
SlamContextInterface	tags/before-github-sync/slam_parser/interface/slam_context_interface.cpp	/^  SlamContextInterface::SlamContextInterface(AbstractSlamInterface* slam) :$/;"	f	class:SlamParser::SlamContextInterface
SlamParser	tags/before-github-sync/slam_parser/interface/slam_context_interface.cpp	/^namespace SlamParser {$/;"	n	file:
process	tags/before-github-sync/slam_parser/interface/slam_context_interface.cpp	/^  bool SlamContextInterface::process(CommandNode* commandNode)$/;"	f	class:SlamParser::SlamContextInterface
~SlamContextInterface	tags/before-github-sync/slam_parser/interface/slam_context_interface.cpp	/^  SlamContextInterface::~SlamContextInterface()$/;"	f	class:SlamParser::SlamContextInterface
SLAM_CONTEXT_INTERFACE_H	tags/before-github-sync/slam_parser/interface/slam_context_interface.h	2;"	d
SlamContextInterface	tags/before-github-sync/slam_parser/interface/slam_context_interface.h	/^  class SlamContextInterface : public SlamContext$/;"	c	namespace:SlamParser
SlamParser	tags/before-github-sync/slam_parser/interface/slam_context_interface.h	/^namespace SlamParser {$/;"	n
_slam	tags/before-github-sync/slam_parser/interface/slam_context_interface.h	/^      AbstractSlamInterface* _slam;$/;"	m	class:SlamParser::SlamContextInterface
FLEX_STD	tags/before-github-sync/slam_parser/parser/FlexLexer.h	53;"	d
FlexLexer	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^class FlexLexer {$/;"	c
YYLeng	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int YYLeng()	const	{ return yyleng; }$/;"	f	class:FlexLexer
YYText	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	const char* YYText() const	{ return yytext; }$/;"	f	class:FlexLexer
__FLEX_LEXER_H	tags/before-github-sync/slam_parser/parser/FlexLexer.h	49;"	d
debug	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int debug() const		{ return yy_flex_debug; }$/;"	f	class:FlexLexer
lineno	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int lineno() const		{ return yylineno; }$/;"	f	class:FlexLexer
set_debug	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	void set_debug( int flag )	{ yy_flex_debug = flag; }$/;"	f	class:FlexLexer
yyFlexLexer	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^class yyFlexLexer : public FlexLexer {$/;"	c
yyFlexLexerOnce	tags/before-github-sync/slam_parser/parser/FlexLexer.h	108;"	d
yy_buffer_stack	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	struct yy_buffer_state ** yy_buffer_stack; \/**< Stack as an array. *\/$/;"	m	class:yyFlexLexer
yy_buffer_stack_max	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	size_t yy_buffer_stack_max; \/**< capacity of stack. *\/$/;"	m	class:yyFlexLexer
yy_buffer_stack_top	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	size_t yy_buffer_stack_top; \/**< index of top of stack. *\/$/;"	m	class:yyFlexLexer
yy_c_buf_p	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	char* yy_c_buf_p;$/;"	m	class:yyFlexLexer
yy_did_buffer_switch_on_eof	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int yy_did_buffer_switch_on_eof;$/;"	m	class:yyFlexLexer
yy_flex_debug	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int yy_flex_debug;	\/\/ only has effect with -d or "%option debug"$/;"	m	class:FlexLexer
yy_full_lp	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int yy_full_lp;$/;"	m	class:yyFlexLexer
yy_full_match	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	char* yy_full_match;$/;"	m	class:yyFlexLexer
yy_full_state	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int* yy_full_state;$/;"	m	class:yyFlexLexer
yy_hold_char	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	char yy_hold_char;$/;"	m	class:yyFlexLexer
yy_init	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int yy_init;		\/\/ whether we need to initialize$/;"	m	class:yyFlexLexer
yy_last_accepting_cpos	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	char* yy_last_accepting_cpos;$/;"	m	class:yyFlexLexer
yy_last_accepting_state	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	yy_state_type yy_last_accepting_state;$/;"	m	class:yyFlexLexer
yy_looking_for_trail_begin	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int yy_looking_for_trail_begin;$/;"	m	class:yyFlexLexer
yy_lp	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int yy_lp;$/;"	m	class:yyFlexLexer
yy_more_flag	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int yy_more_flag;$/;"	m	class:yyFlexLexer
yy_more_len	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int yy_more_len;$/;"	m	class:yyFlexLexer
yy_more_offset	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int yy_more_offset;$/;"	m	class:yyFlexLexer
yy_n_chars	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int yy_n_chars;$/;"	m	class:yyFlexLexer
yy_prev_more_offset	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int yy_prev_more_offset;$/;"	m	class:yyFlexLexer
yy_start	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int yy_start;		\/\/ start state number$/;"	m	class:yyFlexLexer
yy_start_stack	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int* yy_start_stack;$/;"	m	class:yyFlexLexer
yy_start_stack_depth	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int yy_start_stack_depth;$/;"	m	class:yyFlexLexer
yy_start_stack_ptr	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int yy_start_stack_ptr;$/;"	m	class:yyFlexLexer
yy_state_buf	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	yy_state_type* yy_state_buf;$/;"	m	class:yyFlexLexer
yy_state_ptr	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	yy_state_type* yy_state_ptr;$/;"	m	class:yyFlexLexer
yy_state_type	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^typedef int yy_state_type;$/;"	t
yyin	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	FLEX_STD istream* yyin;	\/\/ input source for default LexerInput$/;"	m	class:yyFlexLexer
yyleng	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int yyleng;$/;"	m	class:FlexLexer
yylex	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int yylex( FLEX_STD istream* new_in, FLEX_STD ostream* new_out = 0 )$/;"	f	class:FlexLexer
yylineno	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	int yylineno;		\/\/ only maintained if you use %option yylineno$/;"	m	class:FlexLexer
yyout	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	FLEX_STD ostream* yyout;	\/\/ output sink for default LexerOutput$/;"	m	class:yyFlexLexer
yytext	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	char* yytext;$/;"	m	class:FlexLexer
~FlexLexer	tags/before-github-sync/slam_parser/parser/FlexLexer.h	/^	virtual ~FlexLexer()	{ }$/;"	f	class:FlexLexer
Parser	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::Parser (class Driver& driver_yyarg)$/;"	f	class:SlamParser::Parser
SlamParser	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^namespace SlamParser {$/;"	n	file:
YYABORT	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	135;"	d	file:
YYACCEPT	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	134;"	d	file:
YYCDEBUG	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	124;"	d	file:
YYCDEBUG	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	98;"	d	file:
YYERROR	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	136;"	d	file:
YYRECOVERING	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	137;"	d	file:
YYUSE	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	92;"	d	file:
YY_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	83;"	d	file:
YY_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	87;"	d	file:
YY_REDUCE_PRINT	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	110;"	d	file:
YY_REDUCE_PRINT	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	126;"	d	file:
YY_STACK_PRINT	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	116;"	d	file:
YY_STACK_PRINT	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	127;"	d	file:
YY_SYMBOL_PRINT	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	100;"	d	file:
YY_SYMBOL_PRINT	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	125;"	d	file:
debug_level	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::debug_level () const$/;"	f	class:SlamParser::Parser
debug_stream	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::debug_stream () const$/;"	f	class:SlamParser::Parser
error	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^void SlamParser::Parser::error(const Parser::location_type& l, const std::string& m)$/;"	f	class:SlamParser::Parser
parse	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::parse ()$/;"	f	class:SlamParser::Parser
set_debug_level	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::set_debug_level (debug_level_type l)$/;"	f	class:SlamParser::Parser
set_debug_stream	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::set_debug_stream (std::ostream& o)$/;"	f	class:SlamParser::Parser
yy_reduce_print_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yy_reduce_print_ (int yyrule)$/;"	f	class:SlamParser::Parser
yy_symbol_print_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yy_symbol_print_ (int yytype,$/;"	f	class:SlamParser::Parser
yy_symbol_value_print_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yy_symbol_value_print_ (int yytype,$/;"	f	class:SlamParser::Parser
yycheck_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yycheck_[] =$/;"	m	class:SlamParser::Parser	file:
yyclearin	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	132;"	d	file:
yydefact_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yydefact_[] =$/;"	m	class:SlamParser::Parser	file:
yydefgoto_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yydefgoto_[] =$/;"	m	class:SlamParser::Parser	file:
yydestruct_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yydestruct_ (const char* yymsg,$/;"	f	class:SlamParser::Parser
yyempty_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  const int Parser::yyempty_ = -2;$/;"	m	class:SlamParser::Parser	file:
yyeof_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  const int Parser::yyeof_ = 0;$/;"	m	class:SlamParser::Parser	file:
yyerrcode_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  const int Parser::yyerrcode_ = 256;$/;"	m	class:SlamParser::Parser	file:
yyerrok	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	131;"	d	file:
yyfinal_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  const int Parser::yyfinal_ = 2;$/;"	m	class:SlamParser::Parser	file:
yylast_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  const int Parser::yylast_ = 68;$/;"	m	class:SlamParser::Parser	file:
yylex	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	36;"	d	file:
yylex	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	71;"	d	file:
yylex	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	72;"	d	file:
yynnts_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  const int Parser::yynnts_ = 10;$/;"	m	class:SlamParser::Parser	file:
yyntokens_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  const int Parser::yyntokens_ = 16;$/;"	m	class:SlamParser::Parser	file:
yypact_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yypact_[] =$/;"	m	class:SlamParser::Parser	file:
yypact_ninf_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  const signed char Parser::yypact_ninf_ = -24;$/;"	m	class:SlamParser::Parser	file:
yypgoto_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yypgoto_[] =$/;"	m	class:SlamParser::Parser	file:
yypop_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yypop_ (unsigned int n)$/;"	f	class:SlamParser::Parser
yyprhs_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yyprhs_[] =$/;"	m	class:SlamParser::Parser	file:
yyr1_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yyr1_[] =$/;"	m	class:SlamParser::Parser	file:
yyr2_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yyr2_[] =$/;"	m	class:SlamParser::Parser	file:
yyrhs_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yyrhs_[] =$/;"	m	class:SlamParser::Parser	file:
yyrline_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yyrline_[] =$/;"	m	class:SlamParser::Parser	file:
yystack_print_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yystack_print_ ()$/;"	f	class:SlamParser::Parser
yystos_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yystos_[] =$/;"	m	class:SlamParser::Parser	file:
yysyntax_error_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yysyntax_error_ (int yystate, int tok)$/;"	f	class:SlamParser::Parser
yytable_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yytable_[] =$/;"	m	class:SlamParser::Parser	file:
yytable_ninf_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  const signed char Parser::yytable_ninf_ = -1;$/;"	m	class:SlamParser::Parser	file:
yyterror_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  const int Parser::yyterror_ = 1;$/;"	m	class:SlamParser::Parser	file:
yytname_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  const Parser::yytname_[] =$/;"	m	class:SlamParser::Parser	file:
yytnamerr_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yytnamerr_ (const char *yystr)$/;"	f	class:SlamParser::Parser
yytoken_number_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yytoken_number_[] =$/;"	m	class:SlamParser::Parser	file:
yytranslate_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::yytranslate_ (int t)$/;"	f	class:SlamParser::Parser
yyundef_token_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  const Parser::token_number_type Parser::yyundef_token_ = 2;$/;"	m	class:SlamParser::Parser	file:
yyuser_token_number_max_	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  const unsigned int Parser::yyuser_token_number_max_ = 269;$/;"	m	class:SlamParser::Parser	file:
~Parser	tags/before-github-sync/slam_parser/parser/bison_parser.cpp	/^  Parser::~Parser ()$/;"	f	class:SlamParser::Parser
ADD	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^     ADD = 262,$/;"	e	enum:SlamParser::Parser::token::yytokentype
DOUBLE	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^     DOUBLE = 260,$/;"	e	enum:SlamParser::Parser::token::yytokentype
END	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^     END = 0,$/;"	e	enum:SlamParser::Parser::token::yytokentype
EOL	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^     EOL = 258,$/;"	e	enum:SlamParser::Parser::token::yytokentype
E_SE2	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^     E_SE2 = 265,$/;"	e	enum:SlamParser::Parser::token::yytokentype
E_SE3	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^     E_SE3 = 266,$/;"	e	enum:SlamParser::Parser::token::yytokentype
FIX	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^     FIX = 267,$/;"	e	enum:SlamParser::Parser::token::yytokentype
INTEGER	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^     INTEGER = 259,$/;"	e	enum:SlamParser::Parser::token::yytokentype
PARSER_HEADER_H	tags/before-github-sync/slam_parser/parser/bison_parser.h	38;"	d
Parser	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^  class Parser$/;"	c	namespace:SlamParser
QUERY_STATE	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^     QUERY_STATE = 269$/;"	e	enum:SlamParser::Parser::token::yytokentype
SOLVE_STATE	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^     SOLVE_STATE = 268,$/;"	e	enum:SlamParser::Parser::token::yytokentype
STRING	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^     STRING = 261,$/;"	e	enum:SlamParser::Parser::token::yytokentype
SlamParser	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^namespace SlamParser {$/;"	n
V_SE2	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^     V_SE2 = 263,$/;"	e	enum:SlamParser::Parser::token::yytokentype
V_SE3	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^     V_SE3 = 264,$/;"	e	enum:SlamParser::Parser::token::yytokentype
YYDEBUG	tags/before-github-sync/slam_parser/parser/bison_parser.h	69;"	d
YYERROR_VERBOSE	tags/before-github-sync/slam_parser/parser/bison_parser.h	74;"	d
YYERROR_VERBOSE	tags/before-github-sync/slam_parser/parser/bison_parser.h	75;"	d
YYERROR_VERBOSE	tags/before-github-sync/slam_parser/parser/bison_parser.h	77;"	d
YYLLOC_DEFAULT	tags/before-github-sync/slam_parser/parser/bison_parser.h	90;"	d
YYTOKEN_TABLE	tags/before-github-sync/slam_parser/parser/bison_parser.h	82;"	d
commandNode	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    class CommandNode*		commandNode;$/;"	m	union:SlamParser::Parser::semantic_type
debug_level_type	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    typedef int debug_level_type;$/;"	t	class:SlamParser::Parser
doubleVal	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    double 			doubleVal;$/;"	m	union:SlamParser::Parser::semantic_type
driver	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    class Driver& driver;$/;"	m	class:SlamParser::Parser
intList	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    std::vector<int>*           intList;$/;"	m	union:SlamParser::Parser::semantic_type
integerVal	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    int  			integerVal;$/;"	m	union:SlamParser::Parser::semantic_type
location_stack_type	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    typedef stack<location_type> location_stack_type;$/;"	t	class:SlamParser::Parser
location_type	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    typedef location location_type;$/;"	t	class:SlamParser::Parser
rhs_number_type	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    typedef signed char rhs_number_type;$/;"	t	class:SlamParser::Parser
semantic_stack_type	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    typedef stack<semantic_type> semantic_stack_type;$/;"	t	class:SlamParser::Parser
semantic_type	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    union semantic_type$/;"	u	class:SlamParser::Parser
state_stack_type	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    typedef stack<state_type>    state_stack_type;$/;"	t	class:SlamParser::Parser
state_type	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    typedef int state_type;$/;"	t	class:SlamParser::Parser
stringVal	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    std::string*		stringVal;$/;"	m	union:SlamParser::Parser::semantic_type
token	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    struct token$/;"	s	class:SlamParser::Parser
token_number_type	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    typedef unsigned char token_number_type;$/;"	t	class:SlamParser::Parser
token_type	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    typedef token::yytokentype token_type;$/;"	t	class:SlamParser::Parser
yycdebug_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    std::ostream* yycdebug_;$/;"	m	class:SlamParser::Parser
yycheck_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const signed char yycheck_[];$/;"	m	class:SlamParser::Parser
yydebug_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    int yydebug_;$/;"	m	class:SlamParser::Parser
yydefact_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const unsigned char yydefact_[];$/;"	m	class:SlamParser::Parser
yydefgoto_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const signed char yydefgoto_[];$/;"	m	class:SlamParser::Parser
yyempty_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const int yyempty_;$/;"	m	class:SlamParser::Parser
yyeof_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const int yyeof_;$/;"	m	class:SlamParser::Parser
yyerrcode_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const int yyerrcode_;$/;"	m	class:SlamParser::Parser
yyfinal_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const int yyfinal_;$/;"	m	class:SlamParser::Parser
yylast_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const int yylast_;$/;"	m	class:SlamParser::Parser
yylocation_stack_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    location_stack_type yylocation_stack_;$/;"	m	class:SlamParser::Parser
yynnts_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const int yynnts_;$/;"	m	class:SlamParser::Parser
yyntokens_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const int yyntokens_;$/;"	m	class:SlamParser::Parser
yypact_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const signed char yypact_[];$/;"	m	class:SlamParser::Parser
yypact_ninf_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const signed char yypact_ninf_;$/;"	m	class:SlamParser::Parser
yypgoto_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const signed char yypgoto_[];$/;"	m	class:SlamParser::Parser
yyprhs_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const unsigned char yyprhs_[];$/;"	m	class:SlamParser::Parser
yyr1_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const unsigned char yyr1_[];$/;"	m	class:SlamParser::Parser
yyr2_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const unsigned char yyr2_[];$/;"	m	class:SlamParser::Parser
yyrhs_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const rhs_number_type yyrhs_[];$/;"	m	class:SlamParser::Parser
yyrline_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const unsigned char yyrline_[];$/;"	m	class:SlamParser::Parser
yysemantic_stack_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    semantic_stack_type yysemantic_stack_;$/;"	m	class:SlamParser::Parser
yystate_stack_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    state_stack_type yystate_stack_;$/;"	m	class:SlamParser::Parser
yystos_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const unsigned char yystos_[];$/;"	m	class:SlamParser::Parser
yytable_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const unsigned char yytable_[];$/;"	m	class:SlamParser::Parser
yytable_ninf_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const signed char yytable_ninf_;$/;"	m	class:SlamParser::Parser
yyterror_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const int yyterror_;$/;"	m	class:SlamParser::Parser
yytname_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const char* const yytname_[];$/;"	m	class:SlamParser::Parser
yytoken_number_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const unsigned short int yytoken_number_[];$/;"	m	class:SlamParser::Parser
yytokentype	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^   enum yytokentype {$/;"	g	struct:SlamParser::Parser::token
yyundef_token_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const token_number_type yyundef_token_;$/;"	m	class:SlamParser::Parser
yyuser_token_number_max_	tags/before-github-sync/slam_parser/parser/bison_parser.h	/^    static const unsigned int yyuser_token_number_max_;$/;"	m	class:SlamParser::Parser
AddEdge	tags/before-github-sync/slam_parser/parser/commands.h	/^      AddEdge(const std::string& tag, int id, int dimension, int id1, int id2, const std::vector<double>& values, const std::vector<double> information) :$/;"	f	class:SlamParser::AddEdge
AddEdge	tags/before-github-sync/slam_parser/parser/commands.h	/^  class AddEdge : public CommandNode$/;"	c	namespace:SlamParser
AddNode	tags/before-github-sync/slam_parser/parser/commands.h	/^      AddNode(const std::string& tag, int id, int dimension, const std::vector<double>& values = std::vector<double>()) :$/;"	f	class:SlamParser::AddNode
AddNode	tags/before-github-sync/slam_parser/parser/commands.h	/^  class AddNode : public CommandNode$/;"	c	namespace:SlamParser
COMMANDS_H	tags/before-github-sync/slam_parser/parser/commands.h	2;"	d
CT_ADD_EDGE	tags/before-github-sync/slam_parser/parser/commands.h	/^    CT_ADD_EDGE,$/;"	e	enum:SlamParser::CommandType
CT_ADD_NODE	tags/before-github-sync/slam_parser/parser/commands.h	/^    CT_ADD_NODE,$/;"	e	enum:SlamParser::CommandType
CT_FIX	tags/before-github-sync/slam_parser/parser/commands.h	/^    CT_FIX,$/;"	e	enum:SlamParser::CommandType
CT_QUERY_STATE	tags/before-github-sync/slam_parser/parser/commands.h	/^    CT_QUERY_STATE,$/;"	e	enum:SlamParser::CommandType
CT_SOLVE_STATE	tags/before-github-sync/slam_parser/parser/commands.h	/^    CT_SOLVE_STATE,$/;"	e	enum:SlamParser::CommandType
CommandNode	tags/before-github-sync/slam_parser/parser/commands.h	/^      CommandNode(CommandType commandType, const std::string& tag) : _commandType(commandType), _tag(tag) {}$/;"	f	class:SlamParser::CommandNode
CommandNode	tags/before-github-sync/slam_parser/parser/commands.h	/^  class CommandNode$/;"	c	namespace:SlamParser
CommandType	tags/before-github-sync/slam_parser/parser/commands.h	/^  enum CommandType$/;"	g	namespace:SlamParser
FixNode	tags/before-github-sync/slam_parser/parser/commands.h	/^      explicit FixNode(const std::string& tag, const std::vector<int>& ids) :$/;"	f	class:SlamParser::FixNode
FixNode	tags/before-github-sync/slam_parser/parser/commands.h	/^  class FixNode : public CommandNode$/;"	c	namespace:SlamParser
QueryState	tags/before-github-sync/slam_parser/parser/commands.h	/^      explicit QueryState(const std::string& tag, const std::vector<int>& ids = std::vector<int>()) :$/;"	f	class:SlamParser::QueryState
QueryState	tags/before-github-sync/slam_parser/parser/commands.h	/^  class QueryState : public CommandNode$/;"	c	namespace:SlamParser
SlamParser	tags/before-github-sync/slam_parser/parser/commands.h	/^namespace SlamParser {$/;"	n
SolveSate	tags/before-github-sync/slam_parser/parser/commands.h	/^      SolveSate(const std::string& tag) :$/;"	f	class:SlamParser::SolveSate
SolveSate	tags/before-github-sync/slam_parser/parser/commands.h	/^  class SolveSate : public CommandNode$/;"	c	namespace:SlamParser
_commandType	tags/before-github-sync/slam_parser/parser/commands.h	/^      CommandType _commandType;$/;"	m	class:SlamParser::CommandNode
_dimension	tags/before-github-sync/slam_parser/parser/commands.h	/^      int _dimension;$/;"	m	class:SlamParser::AddEdge
_dimension	tags/before-github-sync/slam_parser/parser/commands.h	/^      int _dimension;$/;"	m	class:SlamParser::AddNode
_id	tags/before-github-sync/slam_parser/parser/commands.h	/^      int _id;$/;"	m	class:SlamParser::AddEdge
_id	tags/before-github-sync/slam_parser/parser/commands.h	/^      int _id;$/;"	m	class:SlamParser::AddNode
_id1	tags/before-github-sync/slam_parser/parser/commands.h	/^      int _id1;$/;"	m	class:SlamParser::AddEdge
_id2	tags/before-github-sync/slam_parser/parser/commands.h	/^      int _id2;$/;"	m	class:SlamParser::AddEdge
_ids	tags/before-github-sync/slam_parser/parser/commands.h	/^      std::vector<int> _ids;$/;"	m	class:SlamParser::FixNode
_ids	tags/before-github-sync/slam_parser/parser/commands.h	/^      std::vector<int> _ids;$/;"	m	class:SlamParser::QueryState
_information	tags/before-github-sync/slam_parser/parser/commands.h	/^      std::vector<double> _information;$/;"	m	class:SlamParser::AddEdge
_tag	tags/before-github-sync/slam_parser/parser/commands.h	/^      std::string _tag;$/;"	m	class:SlamParser::CommandNode
_values	tags/before-github-sync/slam_parser/parser/commands.h	/^      std::vector<double> _values;$/;"	m	class:SlamParser::AddEdge
_values	tags/before-github-sync/slam_parser/parser/commands.h	/^      std::vector<double> _values;$/;"	m	class:SlamParser::AddNode
commandType	tags/before-github-sync/slam_parser/parser/commands.h	/^      CommandType commandType() const { return _commandType;}$/;"	f	class:SlamParser::CommandNode
dimension	tags/before-github-sync/slam_parser/parser/commands.h	/^      int dimension() const {return _dimension;}$/;"	f	class:SlamParser::AddEdge
dimension	tags/before-github-sync/slam_parser/parser/commands.h	/^      int dimension() const {return _dimension;}$/;"	f	class:SlamParser::AddNode
id	tags/before-github-sync/slam_parser/parser/commands.h	/^      int id() const {return _id;}$/;"	f	class:SlamParser::AddEdge
id	tags/before-github-sync/slam_parser/parser/commands.h	/^      int id() const {return _id;}$/;"	f	class:SlamParser::AddNode
id1	tags/before-github-sync/slam_parser/parser/commands.h	/^      int id1() const {return _id1;}$/;"	f	class:SlamParser::AddEdge
id2	tags/before-github-sync/slam_parser/parser/commands.h	/^      int id2() const {return _id2;}$/;"	f	class:SlamParser::AddEdge
ids	tags/before-github-sync/slam_parser/parser/commands.h	/^      const std::vector<int>& ids() { return _ids;}$/;"	f	class:SlamParser::FixNode
ids	tags/before-github-sync/slam_parser/parser/commands.h	/^      const std::vector<int>& ids() { return _ids;}$/;"	f	class:SlamParser::QueryState
information	tags/before-github-sync/slam_parser/parser/commands.h	/^      const std::vector<double>& information() { return _information;}$/;"	f	class:SlamParser::AddEdge
tag	tags/before-github-sync/slam_parser/parser/commands.h	/^      const std::string& tag() const { return _tag;}$/;"	f	class:SlamParser::CommandNode
values	tags/before-github-sync/slam_parser/parser/commands.h	/^      const std::vector<double>& values() { return _values;}$/;"	f	class:SlamParser::AddEdge
values	tags/before-github-sync/slam_parser/parser/commands.h	/^      const std::vector<double>& values() { return _values;}$/;"	f	class:SlamParser::AddNode
~CommandNode	tags/before-github-sync/slam_parser/parser/commands.h	/^      virtual ~CommandNode() {}$/;"	f	class:SlamParser::CommandNode
Driver	tags/before-github-sync/slam_parser/parser/driver.cpp	/^  Driver::Driver(class SlamContext& slamContext_) :$/;"	f	class:SlamParser::Driver
SlamParser	tags/before-github-sync/slam_parser/parser/driver.cpp	/^namespace SlamParser {$/;"	n	file:
error	tags/before-github-sync/slam_parser/parser/driver.cpp	/^  void Driver::error(const class location& l,$/;"	f	class:SlamParser::Driver
error	tags/before-github-sync/slam_parser/parser/driver.cpp	/^  void Driver::error(const std::string& m)$/;"	f	class:SlamParser::Driver
parse_file	tags/before-github-sync/slam_parser/parser/driver.cpp	/^  bool Driver::parse_file(const std::string &filename)$/;"	f	class:SlamParser::Driver
parse_stream	tags/before-github-sync/slam_parser/parser/driver.cpp	/^  bool Driver::parse_stream(std::istream& in, const std::string& sname)$/;"	f	class:SlamParser::Driver
parse_string	tags/before-github-sync/slam_parser/parser/driver.cpp	/^  bool Driver::parse_string(const std::string &input, const std::string& sname)$/;"	f	class:SlamParser::Driver
Driver	tags/before-github-sync/slam_parser/parser/driver.h	/^class Driver$/;"	c	namespace:SlamParser
SLAM_DRIVER_H	tags/before-github-sync/slam_parser/parser/driver.h	2;"	d
SlamParser	tags/before-github-sync/slam_parser/parser/driver.h	/^namespace SlamParser {$/;"	n
lexer	tags/before-github-sync/slam_parser/parser/driver.h	/^    class Scanner* lexer;$/;"	m	class:SlamParser::Driver
slamContext	tags/before-github-sync/slam_parser/parser/driver.h	/^    class SlamContext& slamContext;$/;"	m	class:SlamParser::Driver
streamname	tags/before-github-sync/slam_parser/parser/driver.h	/^    std::string streamname;$/;"	m	class:SlamParser::Driver
trace_parsing	tags/before-github-sync/slam_parser/parser/driver.h	/^    bool trace_parsing;$/;"	m	class:SlamParser::Driver
trace_scanning	tags/before-github-sync/slam_parser/parser/driver.h	/^    bool trace_scanning;$/;"	m	class:SlamParser::Driver
BEGIN	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	138;"	d	file:
ECHO	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	555;"	d	file:
EOB_ACT_CONTINUE_SCAN	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	179;"	d	file:
EOB_ACT_END_OF_FILE	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	180;"	d	file:
EOB_ACT_LAST_MATCH	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	181;"	d	file:
FLEXINT_H	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	34;"	d	file:
FLEX_BETA	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	14;"	d	file:
FLEX_SCANNER	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	9;"	d	file:
INITIAL	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	517;"	d	file:
INT16_MAX	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	76;"	d	file:
INT16_MIN	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	67;"	d	file:
INT32_MAX	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	79;"	d	file:
INT32_MIN	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	70;"	d	file:
INT8_MAX	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	73;"	d	file:
INT8_MIN	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	64;"	d	file:
LexerError	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^void yyFlexLexer::LexerError( yyconst char msg[] )$/;"	f	class:yyFlexLexer
LexerInput	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^int yyFlexLexer::LexerInput( char* buf, int \/* max_size *\/ )$/;"	f	class:yyFlexLexer
LexerOutput	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^void yyFlexLexer::LexerOutput( const char* buf, int size )$/;"	f	class:yyFlexLexer
REJECT	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	478;"	d	file:
Scanner	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^Scanner::Scanner(std::istream* in,$/;"	f	class:SlamParser::Scanner
SlamParser	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^namespace SlamParser {$/;"	n	file:
Slamalloc	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^void *Slamalloc (yy_size_t  size )$/;"	f
Slamfree	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^void Slamfree (void * ptr )$/;"	f
Slamrealloc	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^void *Slamrealloc  (void * ptr, yy_size_t  size )$/;"	f
UINT16_MAX	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	85;"	d	file:
UINT32_MAX	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	88;"	d	file:
UINT8_MAX	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	82;"	d	file:
YYSTATE	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	145;"	d	file:
YYTABLES_NAME	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	1729;"	d	file:
YY_AT_BOL	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	313;"	d	file:
YY_BREAK	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	606;"	d	file:
YY_BUFFER_EOF_PENDING	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	267;"	d	file:
YY_BUFFER_NEW	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	255;"	d	file:
YY_BUFFER_NORMAL	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	256;"	d	file:
YY_BUFFER_STATE	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	file:
YY_BUF_SIZE	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	162;"	d	file:
YY_BUF_SIZE	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	164;"	d	file:
YY_CHAR	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CURRENT_BUFFER	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	278;"	d	file:
YY_CURRENT_BUFFER_LVALUE	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	285;"	d	file:
YY_DECL	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	594;"	d	file:
YY_DECL_IS_OURS	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	593;"	d	file:
YY_DO_BEFORE_ACTION	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	326;"	d	file:
YY_END_OF_BUFFER	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	334;"	d	file:
YY_END_OF_BUFFER_CHAR	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	153;"	d	file:
YY_EXIT_FAILURE	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	1655;"	d	file:
YY_EXTRA_TYPE	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	528;"	d	file:
YY_FATAL_ERROR	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	584;"	d	file:
YY_FLEX_MAJOR_VERSION	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	10;"	d	file:
YY_FLEX_MINOR_VERSION	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	11;"	d	file:
YY_FLEX_SUBMINOR_VERSION	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	12;"	d	file:
YY_INPUT	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	562;"	d	file:
YY_INT_ALIGNED	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	5;"	d	file:
YY_LESS_LINENO	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	183;"	d	file:
YY_MORE_ADJ	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	480;"	d	file:
YY_NEW_FILE	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	151;"	d	file:
YY_NO_UNISTD_H	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	500;"	d	file:
YY_NULL	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	125;"	d	file:
YY_NUM_RULES	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	333;"	d	file:
YY_READ_BUF_SIZE	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	547;"	d	file:
YY_READ_BUF_SIZE	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	549;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	481;"	d	file:
YY_RULE_SETUP	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	609;"	d	file:
YY_SC_TO_UI	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	132;"	d	file:
YY_START	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	144;"	d	file:
YY_START_STACK_INCR	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	579;"	d	file:
YY_STATE_BUF_SIZE	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	170;"	d	file:
YY_STATE_EOF	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	148;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	207;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	173;"	d	file:
YY_TYPEDEF_YY_SIZE_T	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	202;"	d	file:
YY_USER_ACTION	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	514;"	d	file:
YY_USER_ACTION	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	601;"	d	file:
YY_USE_CONST	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	106;"	d	file:
YY_USE_CONST	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	113;"	d	file:
__STDC_LIMIT_MACROS	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	44;"	d	file:
flex_int16_t	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int32_t	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int8_t	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_uint16_t	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint32_t	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint8_t	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
set_debug	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^void Scanner::set_debug(bool b)$/;"	f	class:SlamParser::Scanner
switch_streams	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )$/;"	f	class:yyFlexLexer
token	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^typedef SlamParser::Parser::token token;$/;"	t	file:
token_type	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^typedef SlamParser::Parser::token_type token_type;$/;"	t	file:
unput	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	199;"	d	file:
yyFlexLexer	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )$/;"	f	class:yyFlexLexer
yyFlexLexer	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	23;"	d	file:
yy_accept	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^static yyconst flex_int16_t yy_accept[77] =$/;"	v	file:
yy_at_bol	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_base	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^static yyconst flex_int16_t yy_base[78] =$/;"	v	file:
yy_bs_column	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_state	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_ch_buf	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_chk	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^static yyconst flex_int16_t yy_chk[220] =$/;"	v	file:
yy_create_buffer	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )$/;"	f	class:yyFlexLexer
yy_def	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^static yyconst flex_int16_t yy_def[78] =$/;"	v	file:
yy_delete_buffer	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )$/;"	f	class:yyFlexLexer
yy_ec	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_fill_buffer	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_flex_strlen	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^static int yy_flex_strlen (yyconst char * s )$/;"	f	file:
yy_flex_strncpy	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )$/;"	f	file:
yy_flush_buffer	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )$/;"	f	class:yyFlexLexer
yy_get_next_buffer	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^int yyFlexLexer::yy_get_next_buffer()$/;"	f	class:yyFlexLexer
yy_get_previous_state	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^    yy_state_type yyFlexLexer::yy_get_previous_state()$/;"	f	class:yyFlexLexer
yy_init_buffer	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )$/;"	f	class:yyFlexLexer
yy_input_file	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^	std::istream* yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_load_buffer_state	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^    void yyFlexLexer::yy_load_buffer_state()$/;"	f	class:yyFlexLexer
yy_meta	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^static yyconst flex_int32_t yy_meta[47] =$/;"	v	file:
yy_n_chars	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^	int yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_new_buffer	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	291;"	d	file:
yy_nxt	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^static yyconst flex_int16_t yy_nxt[220] =$/;"	v	file:
yy_pop_state	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^    void yyFlexLexer::yy_pop_state()$/;"	f	class:yyFlexLexer
yy_push_state	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^    void yyFlexLexer::yy_push_state( int new_state )$/;"	f	class:yyFlexLexer
yy_set_bol	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	303;"	d	file:
yy_set_interactive	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	293;"	d	file:
yy_size_t	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^typedef size_t yy_size_t;$/;"	t	file:
yy_switch_to_buffer	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )$/;"	f	class:yyFlexLexer
yy_top_state	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^    int yyFlexLexer::yy_top_state()$/;"	f	class:yyFlexLexer
yy_trans_info	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )$/;"	f	class:yyFlexLexer
yy_verify	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yyconst	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	119;"	d	file:
yyconst	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	121;"	d	file:
yyensure_buffer_stack	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^void yyFlexLexer::yyensure_buffer_stack(void)$/;"	f	class:yyFlexLexer
yyinput	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^    int yyFlexLexer::yyinput()$/;"	f	class:yyFlexLexer
yyless	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	1666;"	d	file:
yyless	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	1667;"	d	file:
yyless	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	186;"	d	file:
yylex	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^int SlamFlexLexer::yylex()$/;"	f	class:SlamFlexLexer
yylex	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	1755;"	d	file:
yymore	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	479;"	d	file:
yypop_buffer_state	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^void yyFlexLexer::yypop_buffer_state (void)$/;"	f	class:yyFlexLexer
yypush_buffer_state	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)$/;"	f	class:yyFlexLexer
yyrestart	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^    void yyFlexLexer::yyrestart( std::istream* input_file )$/;"	f	class:yyFlexLexer
yyterminate	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	496;"	d	file:
yyterminate	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	574;"	d	file:
yytext_ptr	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	319;"	d	file:
yyunput	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^    void yyFlexLexer::yyunput( int c, register char* yy_bp)$/;"	f	class:yyFlexLexer
yywrap	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^int SlamFlexLexer::yywrap()$/;"	f	class:SlamFlexLexer
~Scanner	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^Scanner::~Scanner()$/;"	f	class:SlamParser::Scanner
~yyFlexLexer	tags/before-github-sync/slam_parser/parser/flex_scanner.cpp	/^yyFlexLexer::~yyFlexLexer()$/;"	f	class:yyFlexLexer
BISON_LOCATION_HH	tags/before-github-sync/slam_parser/parser/location.hh	40;"	d
SlamParser	tags/before-github-sync/slam_parser/parser/location.hh	/^namespace SlamParser {$/;"	n
begin	tags/before-github-sync/slam_parser/parser/location.hh	/^    position begin;$/;"	m	class:SlamParser::location
columns	tags/before-github-sync/slam_parser/parser/location.hh	/^    inline void columns (unsigned int count = 1)$/;"	f	class:SlamParser::location
end	tags/before-github-sync/slam_parser/parser/location.hh	/^    position end;$/;"	m	class:SlamParser::location
initialize	tags/before-github-sync/slam_parser/parser/location.hh	/^    inline void initialize (std::string* fn)$/;"	f	class:SlamParser::location
lines	tags/before-github-sync/slam_parser/parser/location.hh	/^    inline void lines (unsigned int count = 1)$/;"	f	class:SlamParser::location
location	tags/before-github-sync/slam_parser/parser/location.hh	/^    location ()$/;"	f	class:SlamParser::location
location	tags/before-github-sync/slam_parser/parser/location.hh	/^  class location$/;"	c	namespace:SlamParser
operator !=	tags/before-github-sync/slam_parser/parser/location.hh	/^  operator!= (const location& loc1, const location& loc2)$/;"	f	namespace:SlamParser
operator +	tags/before-github-sync/slam_parser/parser/location.hh	/^  inline const location operator+ (const location& begin, const location& end)$/;"	f	namespace:SlamParser
operator +	tags/before-github-sync/slam_parser/parser/location.hh	/^  inline const location operator+ (const location& begin, unsigned int width)$/;"	f	namespace:SlamParser
operator +=	tags/before-github-sync/slam_parser/parser/location.hh	/^  inline location& operator+= (location& res, unsigned int width)$/;"	f	namespace:SlamParser
operator <<	tags/before-github-sync/slam_parser/parser/location.hh	/^  inline std::ostream& operator<< (std::ostream& ostr, const location& loc)$/;"	f	namespace:SlamParser
operator ==	tags/before-github-sync/slam_parser/parser/location.hh	/^  operator== (const location& loc1, const location& loc2)$/;"	f	namespace:SlamParser
step	tags/before-github-sync/slam_parser/parser/location.hh	/^    inline void step ()$/;"	f	class:SlamParser::location
BISON_POSITION_HH	tags/before-github-sync/slam_parser/parser/position.hh	40;"	d
SlamParser	tags/before-github-sync/slam_parser/parser/position.hh	/^namespace SlamParser {$/;"	n
column	tags/before-github-sync/slam_parser/parser/position.hh	/^    unsigned int column;$/;"	m	class:SlamParser::position
columns	tags/before-github-sync/slam_parser/parser/position.hh	/^    inline void columns (int count = 1)$/;"	f	class:SlamParser::position
filename	tags/before-github-sync/slam_parser/parser/position.hh	/^    std::string* filename;$/;"	m	class:SlamParser::position
initialize	tags/before-github-sync/slam_parser/parser/position.hh	/^    inline void initialize (std::string* fn)$/;"	f	class:SlamParser::position
line	tags/before-github-sync/slam_parser/parser/position.hh	/^    unsigned int line;$/;"	m	class:SlamParser::position
lines	tags/before-github-sync/slam_parser/parser/position.hh	/^    inline void lines (int count = 1)$/;"	f	class:SlamParser::position
operator !=	tags/before-github-sync/slam_parser/parser/position.hh	/^  operator!= (const position& pos1, const position& pos2)$/;"	f	namespace:SlamParser
operator +	tags/before-github-sync/slam_parser/parser/position.hh	/^  operator+ (const position& begin, const int width)$/;"	f	namespace:SlamParser
operator +=	tags/before-github-sync/slam_parser/parser/position.hh	/^  operator+= (position& res, const int width)$/;"	f	namespace:SlamParser
operator -	tags/before-github-sync/slam_parser/parser/position.hh	/^  operator- (const position& begin, const int width)$/;"	f	namespace:SlamParser
operator -=	tags/before-github-sync/slam_parser/parser/position.hh	/^  operator-= (position& res, const int width)$/;"	f	namespace:SlamParser
operator <<	tags/before-github-sync/slam_parser/parser/position.hh	/^  operator<< (std::ostream& ostr, const position& pos)$/;"	f	namespace:SlamParser
operator ==	tags/before-github-sync/slam_parser/parser/position.hh	/^  operator== (const position& pos1, const position& pos2)$/;"	f	namespace:SlamParser
position	tags/before-github-sync/slam_parser/parser/position.hh	/^    position ()$/;"	f	class:SlamParser::position
position	tags/before-github-sync/slam_parser/parser/position.hh	/^  class position$/;"	c	namespace:SlamParser
SCANNER_H	tags/before-github-sync/slam_parser/parser/scanner.h	2;"	d
Scanner	tags/before-github-sync/slam_parser/parser/scanner.h	/^  class Scanner : public SlamFlexLexer$/;"	c	namespace:SlamParser
SlamParser	tags/before-github-sync/slam_parser/parser/scanner.h	/^namespace SlamParser {$/;"	n
YY_DECL	tags/before-github-sync/slam_parser/parser/scanner.h	6;"	d
yyFlexLexer	tags/before-github-sync/slam_parser/parser/scanner.h	15;"	d
yyFlexLexer	tags/before-github-sync/slam_parser/parser/scanner.h	17;"	d
SlamContext	tags/before-github-sync/slam_parser/parser/slam_context.cpp	/^SlamContext::SlamContext()$/;"	f	class:SlamParser::SlamContext
SlamParser	tags/before-github-sync/slam_parser/parser/slam_context.cpp	/^namespace SlamParser {$/;"	n	file:
process	tags/before-github-sync/slam_parser/parser/slam_context.cpp	/^bool SlamContext::process(CommandNode* commandNode)$/;"	f	class:SlamParser::SlamContext
~SlamContext	tags/before-github-sync/slam_parser/parser/slam_context.cpp	/^SlamContext::~SlamContext()$/;"	f	class:SlamParser::SlamContext
SLAM_CONTEXT_H	tags/before-github-sync/slam_parser/parser/slam_context.h	2;"	d
SlamContext	tags/before-github-sync/slam_parser/parser/slam_context.h	/^class SlamContext$/;"	c	namespace:SlamParser
SlamParser	tags/before-github-sync/slam_parser/parser/slam_context.h	/^namespace SlamParser {$/;"	n
BISON_STACK_HH	tags/before-github-sync/slam_parser/parser/stack.hh	36;"	d
SlamParser	tags/before-github-sync/slam_parser/parser/stack.hh	/^namespace SlamParser {$/;"	n
begin	tags/before-github-sync/slam_parser/parser/stack.hh	/^    inline const_iterator begin () const { return seq_.rbegin (); }$/;"	f	class:SlamParser::stack
const_iterator	tags/before-github-sync/slam_parser/parser/stack.hh	/^    typedef typename S::const_reverse_iterator const_iterator;$/;"	t	class:SlamParser::stack
end	tags/before-github-sync/slam_parser/parser/stack.hh	/^    inline const_iterator end () const { return seq_.rend (); }$/;"	f	class:SlamParser::stack
height	tags/before-github-sync/slam_parser/parser/stack.hh	/^    height () const$/;"	f	class:SlamParser::stack
iterator	tags/before-github-sync/slam_parser/parser/stack.hh	/^    typedef typename S::reverse_iterator iterator;$/;"	t	class:SlamParser::stack
operator []	tags/before-github-sync/slam_parser/parser/stack.hh	/^    operator [] (unsigned int i) const$/;"	f	class:SlamParser::slice
operator []	tags/before-github-sync/slam_parser/parser/stack.hh	/^    operator [] (unsigned int i) const$/;"	f	class:SlamParser::stack
operator []	tags/before-github-sync/slam_parser/parser/stack.hh	/^    operator [] (unsigned int i)$/;"	f	class:SlamParser::stack
pop	tags/before-github-sync/slam_parser/parser/stack.hh	/^    pop (unsigned int n = 1)$/;"	f	class:SlamParser::stack
push	tags/before-github-sync/slam_parser/parser/stack.hh	/^    push (const T& t)$/;"	f	class:SlamParser::stack
range_	tags/before-github-sync/slam_parser/parser/stack.hh	/^    unsigned int range_;$/;"	m	class:SlamParser::slice
seq_	tags/before-github-sync/slam_parser/parser/stack.hh	/^    S seq_;$/;"	m	class:SlamParser::stack
slice	tags/before-github-sync/slam_parser/parser/stack.hh	/^    slice (const S& stack,$/;"	f	class:SlamParser::slice
slice	tags/before-github-sync/slam_parser/parser/stack.hh	/^  class slice$/;"	c	namespace:SlamParser
stack	tags/before-github-sync/slam_parser/parser/stack.hh	/^    stack () : seq_ ()$/;"	f	class:SlamParser::stack
stack	tags/before-github-sync/slam_parser/parser/stack.hh	/^    stack (unsigned int n) : seq_ (n)$/;"	f	class:SlamParser::stack
stack	tags/before-github-sync/slam_parser/parser/stack.hh	/^  class stack$/;"	c	namespace:SlamParser
stack_	tags/before-github-sync/slam_parser/parser/stack.hh	/^    const S& stack_;$/;"	m	class:SlamParser::slice
main	tags/before-github-sync/slam_parser/parser/test_slam_parser.cpp	/^int main (int __attribute__((unused)) argc, char __attribute__((unused)) ** argv)$/;"	f
AutoDiff	trunk/EXTERNAL/ceres/autodiff.h	/^struct AutoDiff {$/;"	s	namespace:ceres::internal
CERES_MAKE_1ST_ORDER_PERTURBATION	trunk/EXTERNAL/ceres/autodiff.h	239;"	d
CERES_MAKE_1ST_ORDER_PERTURBATION	trunk/EXTERNAL/ceres/autodiff.h	256;"	d
CERES_PUBLIC_INTERNAL_AUTODIFF_H_	trunk/EXTERNAL/ceres/autodiff.h	141;"	d
CERES_TAKE_1ST_ORDER_PERTURBATION	trunk/EXTERNAL/ceres/autodiff.h	266;"	d
CERES_TAKE_1ST_ORDER_PERTURBATION	trunk/EXTERNAL/ceres/autodiff.h	286;"	d
Differentiate	trunk/EXTERNAL/ceres/autodiff.h	/^  static bool Differentiate(const Functor& functor,$/;"	f	struct:ceres::internal::AutoDiff
Make1stOrderPerturbation	trunk/EXTERNAL/ceres/autodiff.h	/^inline void Make1stOrderPerturbation(int offset, const T* src, JetT* dst) {$/;"	f	namespace:ceres::internal
Take0thOrderPart	trunk/EXTERNAL/ceres/autodiff.h	/^inline void Take0thOrderPart(int M, const JetT *src, T dst) {$/;"	f	namespace:ceres::internal
Take1stOrderPart	trunk/EXTERNAL/ceres/autodiff.h	/^inline void Take1stOrderPart(const int M, const JetT *src, T *dst) {$/;"	f	namespace:ceres::internal
ceres	trunk/EXTERNAL/ceres/autodiff.h	/^namespace ceres {$/;"	n
internal	trunk/EXTERNAL/ceres/autodiff.h	/^namespace internal {$/;"	n	namespace:ceres
CERES_INTERNAL_EIGEN_H_	trunk/EXTERNAL/ceres/eigen.h	32;"	d
ColMajorMatrix	trunk/EXTERNAL/ceres/eigen.h	/^                      Eigen::ColMajor> ColMajorMatrix;$/;"	t	namespace:ceres
ColMajorMatrixRef	trunk/EXTERNAL/ceres/eigen.h	/^                   Eigen::Stride<Eigen::Dynamic, 1> > ColMajorMatrixRef;$/;"	t	namespace:ceres
ConstColMajorMatrixRef	trunk/EXTERNAL/ceres/eigen.h	/^                   Eigen::Stride<Eigen::Dynamic, 1> > ConstColMajorMatrixRef;$/;"	t	namespace:ceres
ConstMatrixRef	trunk/EXTERNAL/ceres/eigen.h	/^  ConstMatrixRef;$/;"	t	struct:ceres::EigenTypes
ConstMatrixRef	trunk/EXTERNAL/ceres/eigen.h	/^typedef Eigen::Map<const Matrix> ConstMatrixRef;$/;"	t	namespace:ceres
ConstVectorRef	trunk/EXTERNAL/ceres/eigen.h	/^  ConstVectorRef;$/;"	t	struct:ceres::EigenTypes
ConstVectorRef	trunk/EXTERNAL/ceres/eigen.h	/^typedef Eigen::Map<const Vector> ConstVectorRef;$/;"	t	namespace:ceres
EigenTypes	trunk/EXTERNAL/ceres/eigen.h	/^struct EigenTypes {$/;"	s	namespace:ceres
Matrix	trunk/EXTERNAL/ceres/eigen.h	/^                      Eigen::RowMajor> Matrix;$/;"	t	namespace:ceres
Matrix	trunk/EXTERNAL/ceres/eigen.h	/^  Matrix;$/;"	t	struct:ceres::EigenTypes
MatrixRef	trunk/EXTERNAL/ceres/eigen.h	/^  MatrixRef;$/;"	t	struct:ceres::EigenTypes
MatrixRef	trunk/EXTERNAL/ceres/eigen.h	/^typedef Eigen::Map<Matrix> MatrixRef;$/;"	t	namespace:ceres
Vector	trunk/EXTERNAL/ceres/eigen.h	/^  Vector;$/;"	t	struct:ceres::EigenTypes
Vector	trunk/EXTERNAL/ceres/eigen.h	/^typedef Eigen::Matrix<double, Eigen::Dynamic, 1> Vector;$/;"	t	namespace:ceres
VectorRef	trunk/EXTERNAL/ceres/eigen.h	/^  VectorRef;$/;"	t	struct:ceres::EigenTypes
VectorRef	trunk/EXTERNAL/ceres/eigen.h	/^typedef Eigen::Map<Vector> VectorRef;$/;"	t	namespace:ceres
ceres	trunk/EXTERNAL/ceres/eigen.h	/^namespace ceres {$/;"	n
CERES_PUBLIC_INTERNAL_FIXED_ARRAY_H_	trunk/EXTERNAL/ceres/fixed_array.h	33;"	d
FixedArray	trunk/EXTERNAL/ceres/fixed_array.h	/^class FixedArray {$/;"	c	namespace:ceres::internal
FixedArray	trunk/EXTERNAL/ceres/fixed_array.h	/^inline FixedArray<T, S>::FixedArray(typename FixedArray<T, S>::size_type n)$/;"	f	class:ceres::internal::FixedArray
InnerContainer	trunk/EXTERNAL/ceres/fixed_array.h	/^  struct InnerContainer {$/;"	s	class:ceres::internal::FixedArray
S1	trunk/EXTERNAL/ceres/fixed_array.h	/^  static const size_type S1 = ((inline_elements < 0)$/;"	m	class:ceres::internal::FixedArray
S2	trunk/EXTERNAL/ceres/fixed_array.h	/^  static const size_type S2 = (S1 <= 0) ? 1 : S1;$/;"	m	class:ceres::internal::FixedArray
array_	trunk/EXTERNAL/ceres/fixed_array.h	/^  InnerContainer* const array_;$/;"	m	class:ceres::internal::FixedArray
begin	trunk/EXTERNAL/ceres/fixed_array.h	/^  inline const_iterator begin() const { return &array_[0].element; }$/;"	f	class:ceres::internal::FixedArray
begin	trunk/EXTERNAL/ceres/fixed_array.h	/^  inline iterator begin() { return &array_[0].element; }$/;"	f	class:ceres::internal::FixedArray
ceres	trunk/EXTERNAL/ceres/fixed_array.h	/^namespace ceres {$/;"	n
const_iterator	trunk/EXTERNAL/ceres/fixed_array.h	/^  typedef T const* const_iterator;$/;"	t	class:ceres::internal::FixedArray
const_reference	trunk/EXTERNAL/ceres/fixed_array.h	/^  typedef T const& const_reference;$/;"	t	class:ceres::internal::FixedArray
difference_type	trunk/EXTERNAL/ceres/fixed_array.h	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:ceres::internal::FixedArray
element	trunk/EXTERNAL/ceres/fixed_array.h	/^    T element;$/;"	m	struct:ceres::internal::FixedArray::InnerContainer
end	trunk/EXTERNAL/ceres/fixed_array.h	/^  inline const_iterator end() const { return &array_[size_].element; }$/;"	f	class:ceres::internal::FixedArray
end	trunk/EXTERNAL/ceres/fixed_array.h	/^  inline iterator end() { return &array_[size_].element; }$/;"	f	class:ceres::internal::FixedArray
get	trunk/EXTERNAL/ceres/fixed_array.h	/^  inline T* get() { return &array_[0].element; }$/;"	f	class:ceres::internal::FixedArray
get	trunk/EXTERNAL/ceres/fixed_array.h	/^  inline const T* get() const { return &array_[0].element; }$/;"	f	class:ceres::internal::FixedArray
inline_space_	trunk/EXTERNAL/ceres/fixed_array.h	/^  ManualConstructor<InnerContainer> inline_space_[kInlineElements];$/;"	m	class:ceres::internal::FixedArray
internal	trunk/EXTERNAL/ceres/fixed_array.h	/^namespace internal {$/;"	n	namespace:ceres
iterator	trunk/EXTERNAL/ceres/fixed_array.h	/^  typedef T* iterator;$/;"	t	class:ceres::internal::FixedArray
kInlineElements	trunk/EXTERNAL/ceres/fixed_array.h	/^  static const size_type kInlineElements = S2;$/;"	m	class:ceres::internal::FixedArray
memsize	trunk/EXTERNAL/ceres/fixed_array.h	/^  inline size_t memsize() const { return size_ * sizeof(T); }$/;"	f	class:ceres::internal::FixedArray
operator []	trunk/EXTERNAL/ceres/fixed_array.h	/^  inline T& operator[](size_type i) {$/;"	f	class:ceres::internal::FixedArray
operator []	trunk/EXTERNAL/ceres/fixed_array.h	/^  inline const T& operator[](size_type i) const {$/;"	f	class:ceres::internal::FixedArray
pointer	trunk/EXTERNAL/ceres/fixed_array.h	/^  typedef T* pointer;$/;"	t	class:ceres::internal::FixedArray
reference	trunk/EXTERNAL/ceres/fixed_array.h	/^  typedef T& reference;$/;"	t	class:ceres::internal::FixedArray
size	trunk/EXTERNAL/ceres/fixed_array.h	/^  inline size_type size() const { return size_; }$/;"	f	class:ceres::internal::FixedArray
size_	trunk/EXTERNAL/ceres/fixed_array.h	/^  size_type const       size_;$/;"	m	class:ceres::internal::FixedArray
size_type	trunk/EXTERNAL/ceres/fixed_array.h	/^  typedef size_t size_type;$/;"	t	class:ceres::internal::FixedArray
ssize_t	trunk/EXTERNAL/ceres/fixed_array.h	/^   typedef __int64      ssize_t;$/;"	t	namespace:ceres::internal
value_type	trunk/EXTERNAL/ceres/fixed_array.h	/^  typedef T value_type;$/;"	t	class:ceres::internal::FixedArray
~FixedArray	trunk/EXTERNAL/ceres/fixed_array.h	/^inline FixedArray<T, S>::~FixedArray() {$/;"	f	class:ceres::internal::FixedArray
CERES_PUBLIC_FPCLASSIFY_H_	trunk/EXTERNAL/ceres/fpclassify.h	38;"	d
IsFinite	trunk/EXTERNAL/ceres/fpclassify.h	/^inline bool IsFinite  (double x) { return _finite(x);                }$/;"	f	namespace:ceres
IsInfinite	trunk/EXTERNAL/ceres/fpclassify.h	/^inline bool IsInfinite(double x) { return !_finite(x) && !_isnan(x); }$/;"	f	namespace:ceres
IsNaN	trunk/EXTERNAL/ceres/fpclassify.h	/^inline bool IsNaN     (double x) { return _isnan(x);                 }$/;"	f	namespace:ceres
IsNormal	trunk/EXTERNAL/ceres/fpclassify.h	/^inline bool IsNormal  (double x) {$/;"	f	namespace:ceres
ceres	trunk/EXTERNAL/ceres/fpclassify.h	/^namespace ceres {$/;"	n
AddCost	trunk/EXTERNAL/ceres/jet.h	/^    AddCost = 1,$/;"	e	enum:Eigen::NumTraits::<anonymous>
CERES_DEFINE_JET_COMPARISON_OPERATOR	trunk/EXTERNAL/ceres/jet.h	381;"	d
CERES_DEFINE_JET_COMPARISON_OPERATOR	trunk/EXTERNAL/ceres/jet.h	400;"	d
CERES_PUBLIC_JET_H_	trunk/EXTERNAL/ceres/jet.h	157;"	d
DIMENSION	trunk/EXTERNAL/ceres/jet.h	/^  enum { DIMENSION = N };$/;"	e	enum:ceres::Jet::<anonymous>
Eigen	trunk/EXTERNAL/ceres/jet.h	/^namespace Eigen {$/;"	n
HasFloatingPoint	trunk/EXTERNAL/ceres/jet.h	/^    HasFloatingPoint = 1$/;"	e	enum:Eigen::NumTraits::<anonymous>
IsComplex	trunk/EXTERNAL/ceres/jet.h	/^    IsComplex = 0,$/;"	e	enum:Eigen::NumTraits::<anonymous>
IsFinite	trunk/EXTERNAL/ceres/jet.h	/^bool IsFinite(const Jet<T, N>& f) {$/;"	f	namespace:ceres
IsInfinite	trunk/EXTERNAL/ceres/jet.h	/^bool IsInfinite(const Jet<T, N>& f) {$/;"	f	namespace:ceres
IsInteger	trunk/EXTERNAL/ceres/jet.h	/^    IsInteger = 0,$/;"	e	enum:Eigen::NumTraits::<anonymous>
IsNaN	trunk/EXTERNAL/ceres/jet.h	/^bool IsNaN(const Jet<T, N>& f) {$/;"	f	namespace:ceres
IsNormal	trunk/EXTERNAL/ceres/jet.h	/^bool IsNormal(const Jet<T, N>& f) {$/;"	f	namespace:ceres
IsSigned	trunk/EXTERNAL/ceres/jet.h	/^    IsSigned,$/;"	e	enum:Eigen::NumTraits::<anonymous>
Jet	trunk/EXTERNAL/ceres/jet.h	/^  Jet() : a() {$/;"	f	struct:ceres::Jet
Jet	trunk/EXTERNAL/ceres/jet.h	/^  Jet(const T& value, int k) {$/;"	f	struct:ceres::Jet
Jet	trunk/EXTERNAL/ceres/jet.h	/^  explicit Jet(const T& value) {$/;"	f	struct:ceres::Jet
Jet	trunk/EXTERNAL/ceres/jet.h	/^struct Jet {$/;"	s	namespace:ceres
MulCost	trunk/EXTERNAL/ceres/jet.h	/^    MulCost = 3,$/;"	e	enum:Eigen::NumTraits::<anonymous>
Nested	trunk/EXTERNAL/ceres/jet.h	/^  typedef ceres::Jet<T, N> Nested;$/;"	t	struct:Eigen::NumTraits
NonInteger	trunk/EXTERNAL/ceres/jet.h	/^  typedef ceres::Jet<T, N> NonInteger;$/;"	t	struct:Eigen::NumTraits
NumTraits	trunk/EXTERNAL/ceres/jet.h	/^struct NumTraits<ceres::Jet<T, N> > {$/;"	s	namespace:Eigen
ReadCost	trunk/EXTERNAL/ceres/jet.h	/^    ReadCost = 1,$/;"	e	enum:Eigen::NumTraits::<anonymous>
Real	trunk/EXTERNAL/ceres/jet.h	/^  typedef ceres::Jet<T, N> Real;$/;"	t	struct:Eigen::NumTraits
a	trunk/EXTERNAL/ceres/jet.h	/^  T a;$/;"	m	struct:ceres::Jet
abs	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> abs(const Jet<T, N>& f) {$/;"	f	namespace:ceres
abs	trunk/EXTERNAL/ceres/jet.h	/^inline double abs     (double x) { return std::abs(x);      }$/;"	f	namespace:ceres
acos	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> acos(const Jet<T, N>& f) {$/;"	f	namespace:ceres
acos	trunk/EXTERNAL/ceres/jet.h	/^inline double acos    (double x) { return std::acos(x);     }$/;"	f	namespace:ceres
asin	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> asin(const Jet<T, N>& f) {$/;"	f	namespace:ceres
asin	trunk/EXTERNAL/ceres/jet.h	/^inline double asin    (double x) { return std::asin(x);     }$/;"	f	namespace:ceres
atan	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> atan(const Jet<T, N>& f) {$/;"	f	namespace:ceres
atan	trunk/EXTERNAL/ceres/jet.h	/^inline double atan    (double x) { return std::atan(x);     }$/;"	f	namespace:ceres
atan2	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> atan2(const Jet<T, N>& g, const Jet<T, N>& f) {$/;"	f	namespace:ceres
atan2	trunk/EXTERNAL/ceres/jet.h	/^inline double atan2(double y, double x) { return std::atan2(y, x); }$/;"	f	namespace:ceres
ceres	trunk/EXTERNAL/ceres/jet.h	/^namespace ceres {$/;"	n
cos	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> cos(const Jet<T, N>& f) {$/;"	f	namespace:ceres
cos	trunk/EXTERNAL/ceres/jet.h	/^inline double cos     (double x) { return std::cos(x);      }$/;"	f	namespace:ceres
cosh	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> cosh(const Jet<T, N>& f) {$/;"	f	namespace:ceres
cosh	trunk/EXTERNAL/ceres/jet.h	/^inline double cosh    (double x) { return std::cosh(x);     }$/;"	f	namespace:ceres
dummy_precision	trunk/EXTERNAL/ceres/jet.h	/^  static typename ceres::Jet<T, N> dummy_precision() {$/;"	f	struct:Eigen::NumTraits
ei_abs	trunk/EXTERNAL/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_abs (const Jet<T, N>& x) { return fabs(x);        }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_abs2	trunk/EXTERNAL/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_abs2(const Jet<T, N>& x) { return x * x;          }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_atan	trunk/EXTERNAL/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_atan(const Jet<T, N>& x) { return atan(x);        }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_conj	trunk/EXTERNAL/ceres/jet.h	/^template<typename T, int N> inline const Jet<T, N>& ei_conj(const Jet<T, N>& x) { return x;              }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_cos	trunk/EXTERNAL/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_cos (const Jet<T, N>& x) { return cos(x);         }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_cosh	trunk/EXTERNAL/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_cosh(const Jet<T, N>& x) { return cosh(x);        }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_exp	trunk/EXTERNAL/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_exp (const Jet<T, N>& x) { return exp(x);         }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_imag	trunk/EXTERNAL/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_imag(const Jet<T, N>&  ) { return Jet<T, N>(0.0); }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_log	trunk/EXTERNAL/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_log (const Jet<T, N>& x) { return log(x);         }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_pow	trunk/EXTERNAL/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_pow (const Jet<T, N>& x, Jet<T, N> y) { return pow(x, y); }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_real	trunk/EXTERNAL/ceres/jet.h	/^template<typename T, int N> inline const Jet<T, N>& ei_real(const Jet<T, N>& x) { return x;              }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_sin	trunk/EXTERNAL/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_sin (const Jet<T, N>& x) { return sin(x);         }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_sinh	trunk/EXTERNAL/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_sinh(const Jet<T, N>& x) { return sinh(x);        }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_sqrt	trunk/EXTERNAL/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_sqrt(const Jet<T, N>& x) { return sqrt(x);        }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_tan	trunk/EXTERNAL/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_tan (const Jet<T, N>& x) { return tan(x);         }  \/\/ NOLINT$/;"	f	namespace:ceres
ei_tanh	trunk/EXTERNAL/ceres/jet.h	/^template<typename T, int N> inline       Jet<T, N>  ei_tanh(const Jet<T, N>& x) { return tanh(x);        }  \/\/ NOLINT$/;"	f	namespace:ceres
exp	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> exp(const Jet<T, N>& f) {$/;"	f	namespace:ceres
exp	trunk/EXTERNAL/ceres/jet.h	/^inline double exp     (double x) { return std::exp(x);      }$/;"	f	namespace:ceres
log	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> log(const Jet<T, N>& f) {$/;"	f	namespace:ceres
log	trunk/EXTERNAL/ceres/jet.h	/^inline double log     (double x) { return std::log(x);      }$/;"	f	namespace:ceres
operator *	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> operator*(T s, const Jet<T, N>& f) {$/;"	f	namespace:ceres
operator *	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> operator*(const Jet<T, N>& f, T s) {$/;"	f	namespace:ceres
operator *	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> operator*(const Jet<T, N>& f,$/;"	f	namespace:ceres
operator *=	trunk/EXTERNAL/ceres/jet.h	/^  Jet<T, N>& operator*=(const Jet<T, N> &y) {$/;"	f	struct:ceres::Jet
operator +	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> const& operator+(const Jet<T, N>& f) {$/;"	f	namespace:ceres
operator +	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> operator+(T s, const Jet<T, N>& f) {$/;"	f	namespace:ceres
operator +	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> operator+(const Jet<T, N>& f, T s) {$/;"	f	namespace:ceres
operator +	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> operator+(const Jet<T, N>& f,$/;"	f	namespace:ceres
operator +=	trunk/EXTERNAL/ceres/jet.h	/^  Jet<T, N>& operator+=(const Jet<T, N> &y) {$/;"	f	struct:ceres::Jet
operator -	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> operator-(T s, const Jet<T, N>& f) {$/;"	f	namespace:ceres
operator -	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> operator-(const Jet<T, N>& f, T s) {$/;"	f	namespace:ceres
operator -	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> operator-(const Jet<T, N>& f,$/;"	f	namespace:ceres
operator -	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> operator-(const Jet<T, N>&f) {$/;"	f	namespace:ceres
operator -=	trunk/EXTERNAL/ceres/jet.h	/^  Jet<T, N>& operator-=(const Jet<T, N> &y) {$/;"	f	struct:ceres::Jet
operator /	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> operator\/(T s, const Jet<T, N>& g) {$/;"	f	namespace:ceres
operator /	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> operator\/(const Jet<T, N>& f, T s) {$/;"	f	namespace:ceres
operator /	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> operator\/(const Jet<T, N>& f,$/;"	f	namespace:ceres
operator /=	trunk/EXTERNAL/ceres/jet.h	/^  Jet<T, N>& operator\/=(const Jet<T, N> &y) {$/;"	f	struct:ceres::Jet
operator <<	trunk/EXTERNAL/ceres/jet.h	/^inline std::ostream &operator<<(std::ostream &s, const Jet<T, N>& z) {$/;"	f	namespace:ceres
pow	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> pow(const Jet<T, N>& f, const Jet<T, N>& g) {$/;"	f	namespace:ceres
pow	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> pow(const Jet<T, N>& f, double g) {$/;"	f	namespace:ceres
pow	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> pow(double f, const Jet<T, N>& g) {$/;"	f	namespace:ceres
pow	trunk/EXTERNAL/ceres/jet.h	/^inline double pow  (double x, double y) { return std::pow(x, y);   }$/;"	f	namespace:ceres
sin	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> sin(const Jet<T, N>& f) {$/;"	f	namespace:ceres
sin	trunk/EXTERNAL/ceres/jet.h	/^inline double sin     (double x) { return std::sin(x);      }$/;"	f	namespace:ceres
sinh	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> sinh(const Jet<T, N>& f) {$/;"	f	namespace:ceres
sinh	trunk/EXTERNAL/ceres/jet.h	/^inline double sinh    (double x) { return std::sinh(x);     }$/;"	f	namespace:ceres
sqrt	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> sqrt(const Jet<T, N>& f) {$/;"	f	namespace:ceres
sqrt	trunk/EXTERNAL/ceres/jet.h	/^inline double sqrt    (double x) { return std::sqrt(x);     }$/;"	f	namespace:ceres
tan	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> tan(const Jet<T, N>& f) {$/;"	f	namespace:ceres
tan	trunk/EXTERNAL/ceres/jet.h	/^inline double tan     (double x) { return std::tan(x);      }$/;"	f	namespace:ceres
tanh	trunk/EXTERNAL/ceres/jet.h	/^Jet<T, N> tanh(const Jet<T, N>& f) {$/;"	f	namespace:ceres
tanh	trunk/EXTERNAL/ceres/jet.h	/^inline double tanh    (double x) { return std::tanh(x);     }$/;"	f	namespace:ceres
v	trunk/EXTERNAL/ceres/jet.h	/^  Eigen::Matrix<T, N, 1, Eigen::DontAlign> v;$/;"	m	struct:ceres::Jet
CERES_ALIGN_ATTRIBUTE	trunk/EXTERNAL/ceres/macros.h	164;"	d
CERES_ALIGN_ATTRIBUTE	trunk/EXTERNAL/ceres/macros.h	167;"	d
CERES_ALIGN_OF	trunk/EXTERNAL/ceres/macros.h	165;"	d
CERES_ALIGN_OF	trunk/EXTERNAL/ceres/macros.h	168;"	d
CERES_ARRAYSIZE	trunk/EXTERNAL/ceres/macros.h	138;"	d
CERES_DISALLOW_COPY_AND_ASSIGN	trunk/EXTERNAL/ceres/macros.h	52;"	d
CERES_DISALLOW_IMPLICIT_CONSTRUCTORS	trunk/EXTERNAL/ceres/macros.h	62;"	d
CERES_PUBLIC_INTERNAL_MACROS_H_	trunk/EXTERNAL/ceres/macros.h	37;"	d
MUST_USE_RESULT	trunk/EXTERNAL/ceres/macros.h	148;"	d
MUST_USE_RESULT	trunk/EXTERNAL/ceres/macros.h	151;"	d
MUST_USE_RESULT	trunk/EXTERNAL/ceres/macros.h	153;"	d
arraysize	trunk/EXTERNAL/ceres/macros.h	91;"	d
AlignType	trunk/EXTERNAL/ceres/manual_constructor.h	/^template<int alignment, int size> struct AlignType { };$/;"	s	namespace:ceres::internal
AlignType	trunk/EXTERNAL/ceres/manual_constructor.h	/^template<int size> struct AlignType<0, size> { typedef char result[size]; };$/;"	s	namespace:ceres::internal
CERES_ALIGNED_CHAR_ARRAY	trunk/EXTERNAL/ceres/manual_constructor.h	203;"	d
CERES_ALIGNED_CHAR_ARRAY	trunk/EXTERNAL/ceres/manual_constructor.h	59;"	d
CERES_ALIGNED_CHAR_ARRAY	trunk/EXTERNAL/ceres/manual_constructor.h	85;"	d
CERES_ALIGN_TYPE_TEMPLATE	trunk/EXTERNAL/ceres/manual_constructor.h	62;"	d
CERES_ALIGN_TYPE_TEMPLATE	trunk/EXTERNAL/ceres/manual_constructor.h	83;"	d
CERES_PUBLIC_INTERNAL_MANUAL_CONSTRUCTOR_H_	trunk/EXTERNAL/ceres/manual_constructor.h	41;"	d
Destroy	trunk/EXTERNAL/ceres/manual_constructor.h	/^  inline void Destroy() {$/;"	f	class:ceres::internal::ManualConstructor
Init	trunk/EXTERNAL/ceres/manual_constructor.h	/^  inline void Init() {$/;"	f	class:ceres::internal::ManualConstructor
Init	trunk/EXTERNAL/ceres/manual_constructor.h	/^  inline void Init(const T1& p1) {$/;"	f	class:ceres::internal::ManualConstructor
Init	trunk/EXTERNAL/ceres/manual_constructor.h	/^  inline void Init(const T1& p1, const T2& p2) {$/;"	f	class:ceres::internal::ManualConstructor
Init	trunk/EXTERNAL/ceres/manual_constructor.h	/^  inline void Init(const T1& p1, const T2& p2, const T3& p3) {$/;"	f	class:ceres::internal::ManualConstructor
Init	trunk/EXTERNAL/ceres/manual_constructor.h	/^  inline void Init(const T1& p1, const T2& p2, const T3& p3, const T4& p4) {$/;"	f	class:ceres::internal::ManualConstructor
Init	trunk/EXTERNAL/ceres/manual_constructor.h	/^  inline void Init(const T1& p1, const T2& p2, const T3& p3, const T4& p4,$/;"	f	class:ceres::internal::ManualConstructor
ManualConstructor	trunk/EXTERNAL/ceres/manual_constructor.h	/^class ManualConstructor {$/;"	c	namespace:ceres::internal
ceres	trunk/EXTERNAL/ceres/manual_constructor.h	/^namespace ceres {$/;"	n
get	trunk/EXTERNAL/ceres/manual_constructor.h	/^  inline Type* get() {$/;"	f	class:ceres::internal::ManualConstructor
get	trunk/EXTERNAL/ceres/manual_constructor.h	/^  inline const Type* get() const  {$/;"	f	class:ceres::internal::ManualConstructor
internal	trunk/EXTERNAL/ceres/manual_constructor.h	/^namespace internal {$/;"	n	namespace:ceres
operator *	trunk/EXTERNAL/ceres/manual_constructor.h	/^  inline Type& operator*() { return *get(); }$/;"	f	class:ceres::internal::ManualConstructor
operator *	trunk/EXTERNAL/ceres/manual_constructor.h	/^  inline const Type& operator*() const { return *get(); }$/;"	f	class:ceres::internal::ManualConstructor
operator ->	trunk/EXTERNAL/ceres/manual_constructor.h	/^  inline Type* operator->() { return get(); }$/;"	f	class:ceres::internal::ManualConstructor
operator ->	trunk/EXTERNAL/ceres/manual_constructor.h	/^  inline const Type* operator->() const { return get(); }$/;"	f	class:ceres::internal::ManualConstructor
result	trunk/EXTERNAL/ceres/manual_constructor.h	/^template<int size> struct AlignType<0, size> { typedef char result[size]; };$/;"	t	struct:ceres::internal::AlignType
space	trunk/EXTERNAL/ceres/manual_constructor.h	/^  inline void* space() {$/;"	f	class:ceres::internal::ManualConstructor
space_	trunk/EXTERNAL/ceres/manual_constructor.h	/^  CERES_ALIGNED_CHAR_ARRAY(Type, 1) space_;$/;"	m	class:ceres::internal::ManualConstructor
CERES_PUBLIC_INTERNAL_VARIADIC_EVALUATE_H_	trunk/EXTERNAL/ceres/variadic_evaluate.h	33;"	d
Call	trunk/EXTERNAL/ceres/variadic_evaluate.h	/^  static bool Call(const Functor& functor, T const *const *input, T* output) {$/;"	f	struct:ceres::internal::VariadicEvaluate
VariadicEvaluate	trunk/EXTERNAL/ceres/variadic_evaluate.h	/^struct VariadicEvaluate {$/;"	s	namespace:ceres::internal
VariadicEvaluate	trunk/EXTERNAL/ceres/variadic_evaluate.h	/^struct VariadicEvaluate<Functor, T, N0, 0, 0, 0, 0, 0, 0, 0, 0, 0> {$/;"	s	namespace:ceres::internal
VariadicEvaluate	trunk/EXTERNAL/ceres/variadic_evaluate.h	/^struct VariadicEvaluate<Functor, T, N0, N1, 0, 0, 0, 0, 0, 0, 0, 0> {$/;"	s	namespace:ceres::internal
VariadicEvaluate	trunk/EXTERNAL/ceres/variadic_evaluate.h	/^struct VariadicEvaluate<Functor, T, N0, N1, N2, 0, 0, 0, 0, 0, 0, 0> {$/;"	s	namespace:ceres::internal
VariadicEvaluate	trunk/EXTERNAL/ceres/variadic_evaluate.h	/^struct VariadicEvaluate<Functor, T, N0, N1, N2, N3, 0, 0, 0, 0, 0, 0> {$/;"	s	namespace:ceres::internal
VariadicEvaluate	trunk/EXTERNAL/ceres/variadic_evaluate.h	/^struct VariadicEvaluate<Functor, T, N0, N1, N2, N3, N4, 0, 0, 0, 0, 0> {$/;"	s	namespace:ceres::internal
VariadicEvaluate	trunk/EXTERNAL/ceres/variadic_evaluate.h	/^struct VariadicEvaluate<Functor, T, N0, N1, N2, N3, N4, N5, 0, 0, 0, 0> {$/;"	s	namespace:ceres::internal
VariadicEvaluate	trunk/EXTERNAL/ceres/variadic_evaluate.h	/^struct VariadicEvaluate<Functor, T, N0, N1, N2, N3, N4, N5, N6, 0, 0, 0> {$/;"	s	namespace:ceres::internal
VariadicEvaluate	trunk/EXTERNAL/ceres/variadic_evaluate.h	/^struct VariadicEvaluate<Functor, T, N0, N1, N2, N3, N4, N5, N6, N7, 0, 0> {$/;"	s	namespace:ceres::internal
VariadicEvaluate	trunk/EXTERNAL/ceres/variadic_evaluate.h	/^struct VariadicEvaluate<Functor, T, N0, N1, N2, N3, N4, N5, N6, N7, N8, 0> {$/;"	s	namespace:ceres::internal
ceres	trunk/EXTERNAL/ceres/variadic_evaluate.h	/^namespace ceres {$/;"	n
internal	trunk/EXTERNAL/ceres/variadic_evaluate.h	/^namespace internal {$/;"	n	namespace:ceres
B	trunk/EXTERNAL/csparse/cs.h	/^    double *B ;     \/* beta [0..n-1] for QR *\/$/;"	m	struct:cs_numeric
CS_COPYRIGHT	trunk/EXTERNAL/csparse/cs.h	15;"	d
CS_CSC	trunk/EXTERNAL/csparse/cs.h	171;"	d
CS_DATE	trunk/EXTERNAL/csparse/cs.h	14;"	d
CS_FLIP	trunk/EXTERNAL/csparse/cs.h	167;"	d
CS_MARK	trunk/EXTERNAL/csparse/cs.h	170;"	d
CS_MARKED	trunk/EXTERNAL/csparse/cs.h	169;"	d
CS_MAX	trunk/EXTERNAL/csparse/cs.h	165;"	d
CS_MIN	trunk/EXTERNAL/csparse/cs.h	166;"	d
CS_SUBSUB	trunk/EXTERNAL/csparse/cs.h	13;"	d
CS_SUBVER	trunk/EXTERNAL/csparse/cs.h	12;"	d
CS_TRIPLET	trunk/EXTERNAL/csparse/cs.h	172;"	d
CS_UNFLIP	trunk/EXTERNAL/csparse/cs.h	168;"	d
CS_VER	trunk/EXTERNAL/csparse/cs.h	11;"	d
L	trunk/EXTERNAL/csparse/cs.h	/^    cs *L ;         \/* L for LU and Cholesky, V for QR *\/$/;"	m	struct:cs_numeric
U	trunk/EXTERNAL/csparse/cs.h	/^    cs *U ;         \/* U for LU, R for QR, not used for Cholesky *\/$/;"	m	struct:cs_numeric
_CS_H	trunk/EXTERNAL/csparse/cs.h	2;"	d
cc	trunk/EXTERNAL/csparse/cs.h	/^    csi cc [5] ;    \/* coarse column decomposition *\/$/;"	m	struct:cs_dmperm_results
cp	trunk/EXTERNAL/csparse/cs.h	/^    csi *cp ;       \/* column pointers for Cholesky, row counts for QR *\/$/;"	m	struct:cs_symbolic
cs	trunk/EXTERNAL/csparse/cs.h	/^} cs ;$/;"	t
cs_dmperm_results	trunk/EXTERNAL/csparse/cs.h	/^typedef struct cs_dmperm_results    \/* cs_dmperm or cs_scc output *\/$/;"	s
cs_numeric	trunk/EXTERNAL/csparse/cs.h	/^typedef struct cs_numeric   \/* numeric Cholesky, LU, or QR factorization *\/$/;"	s
cs_sparse	trunk/EXTERNAL/csparse/cs.h	/^typedef struct cs_sparse    \/* matrix in compressed-column or triplet form *\/$/;"	s
cs_symbolic	trunk/EXTERNAL/csparse/cs.h	/^typedef struct cs_symbolic  \/* symbolic Cholesky, LU, or QR analysis *\/$/;"	s
csd	trunk/EXTERNAL/csparse/cs.h	/^} csd ;$/;"	t
csi	trunk/EXTERNAL/csparse/cs.h	26;"	d
csi	trunk/EXTERNAL/csparse/cs.h	38;"	d
csi	trunk/EXTERNAL/csparse/cs.h	39;"	d
csi	trunk/EXTERNAL/csparse/cs.h	42;"	d
csn	trunk/EXTERNAL/csparse/cs.h	/^} csn ;$/;"	t
css	trunk/EXTERNAL/csparse/cs.h	/^} css ;$/;"	t
i	trunk/EXTERNAL/csparse/cs.h	/^    csi *i ;        \/* row indices, size nzmax *\/$/;"	m	struct:cs_sparse
leftmost	trunk/EXTERNAL/csparse/cs.h	/^    csi *leftmost ; \/* leftmost[i] = min(find(A(i,:))), for QR *\/$/;"	m	struct:cs_symbolic
lnz	trunk/EXTERNAL/csparse/cs.h	/^    double lnz ;    \/* # entries in L for LU or Cholesky; in V for QR *\/$/;"	m	struct:cs_symbolic
m	trunk/EXTERNAL/csparse/cs.h	/^    csi m ;         \/* number of rows *\/$/;"	m	struct:cs_sparse
m2	trunk/EXTERNAL/csparse/cs.h	/^    csi m2 ;        \/* # of rows for QR, after adding fictitious rows *\/$/;"	m	struct:cs_symbolic
n	trunk/EXTERNAL/csparse/cs.h	/^    csi n ;         \/* number of columns *\/$/;"	m	struct:cs_sparse
nb	trunk/EXTERNAL/csparse/cs.h	/^    csi nb ;        \/* # of blocks in fine dmperm decomposition *\/$/;"	m	struct:cs_dmperm_results
nz	trunk/EXTERNAL/csparse/cs.h	/^    csi nz ;        \/* # of entries in triplet matrix, -1 for compressed-col *\/$/;"	m	struct:cs_sparse
nzmax	trunk/EXTERNAL/csparse/cs.h	/^    csi nzmax ;     \/* maximum number of entries *\/$/;"	m	struct:cs_sparse
p	trunk/EXTERNAL/csparse/cs.h	/^    csi *p ;        \/* column pointers (size n+1) or col indices (size nzmax) *\/$/;"	m	struct:cs_sparse
p	trunk/EXTERNAL/csparse/cs.h	/^    csi *p ;        \/* size m, row permutation *\/$/;"	m	struct:cs_dmperm_results
parent	trunk/EXTERNAL/csparse/cs.h	/^    csi *parent ;   \/* elimination tree for Cholesky and QR *\/$/;"	m	struct:cs_symbolic
pinv	trunk/EXTERNAL/csparse/cs.h	/^    csi *pinv ;     \/* inverse row perm. for QR, fill red. perm for Chol *\/$/;"	m	struct:cs_symbolic
pinv	trunk/EXTERNAL/csparse/cs.h	/^    csi *pinv ;     \/* partial pivoting for LU *\/$/;"	m	struct:cs_numeric
q	trunk/EXTERNAL/csparse/cs.h	/^    csi *q ;        \/* fill-reducing column permutation for LU and QR *\/$/;"	m	struct:cs_symbolic
q	trunk/EXTERNAL/csparse/cs.h	/^    csi *q ;        \/* size n, column permutation *\/$/;"	m	struct:cs_dmperm_results
r	trunk/EXTERNAL/csparse/cs.h	/^    csi *r ;        \/* size nb+1, block k is rows r[k] to r[k+1]-1 in A(p,q) *\/$/;"	m	struct:cs_dmperm_results
rr	trunk/EXTERNAL/csparse/cs.h	/^    csi rr [5] ;    \/* coarse row decomposition *\/$/;"	m	struct:cs_dmperm_results
s	trunk/EXTERNAL/csparse/cs.h	/^    csi *s ;        \/* size nb+1, block k is cols s[k] to s[k+1]-1 in A(p,q) *\/$/;"	m	struct:cs_dmperm_results
unz	trunk/EXTERNAL/csparse/cs.h	/^    double unz ;    \/* # entries in U for LU; in R for QR *\/$/;"	m	struct:cs_symbolic
x	trunk/EXTERNAL/csparse/cs.h	/^    double *x ;     \/* numerical values, size nzmax *\/$/;"	m	struct:cs_sparse
cs_add	trunk/EXTERNAL/csparse/cs_add.c	/^cs *cs_add (const cs *A, const cs *B, double alpha, double beta)$/;"	f
cs_amd	trunk/EXTERNAL/csparse/cs_amd.c	/^csi *cs_amd (csi order, const cs *A)  \/* order 0:natural, 1:Chol, 2:LU, 3:QR *\/$/;"	f
cs_diag	trunk/EXTERNAL/csparse/cs_amd.c	/^static csi cs_diag (csi i, csi j, double aij, void *other) { return (i != j) ; }$/;"	f	file:
cs_wclear	trunk/EXTERNAL/csparse/cs_amd.c	/^static csi cs_wclear (csi mark, csi lemax, csi *w, csi n)$/;"	f	file:
G2O_CSPARSE_API	trunk/EXTERNAL/csparse/cs_api.h	36;"	d
G2O_CSPARSE_API	trunk/EXTERNAL/csparse/cs_api.h	38;"	d
G2O_CSPARSE_API	trunk/EXTERNAL/csparse/cs_api.h	41;"	d
G2O_CSPARSE_API	trunk/EXTERNAL/csparse/cs_api.h	46;"	d
G2O_CSPARSE_API_H	trunk/EXTERNAL/csparse/cs_api.h	27;"	d
cs_chol	trunk/EXTERNAL/csparse/cs_chol.c	/^csn *cs_chol (const cs *A, const css *S)$/;"	f
cs_cholsol	trunk/EXTERNAL/csparse/cs_cholsol.c	/^csi cs_cholsol (csi order, const cs *A, double *b)$/;"	f
cs_compress	trunk/EXTERNAL/csparse/cs_compress.c	/^cs *cs_compress (const cs *T)$/;"	f
HEAD	trunk/EXTERNAL/csparse/cs_counts.c	3;"	d	file:
NEXT	trunk/EXTERNAL/csparse/cs_counts.c	4;"	d	file:
cs_counts	trunk/EXTERNAL/csparse/cs_counts.c	/^csi *cs_counts (const cs *A, const csi *parent, const csi *post, csi ata)$/;"	f
init_ata	trunk/EXTERNAL/csparse/cs_counts.c	/^static void init_ata (cs *AT, const csi *post, csi *w, csi **head, csi **next)$/;"	f	file:
cs_cumsum	trunk/EXTERNAL/csparse/cs_cumsum.c	/^double cs_cumsum (csi *p, csi *c, csi n)$/;"	f
cs_dfs	trunk/EXTERNAL/csparse/cs_dfs.c	/^csi cs_dfs (csi j, cs *G, csi top, csi *xi, csi *pstack, const csi *pinv)$/;"	f
cs_bfs	trunk/EXTERNAL/csparse/cs_dmperm.c	/^static csi cs_bfs (const cs *A, csi n, csi *wi, csi *wj, csi *queue,$/;"	f	file:
cs_dmperm	trunk/EXTERNAL/csparse/cs_dmperm.c	/^csd *cs_dmperm (const cs *A, csi seed)$/;"	f
cs_matched	trunk/EXTERNAL/csparse/cs_dmperm.c	/^static void cs_matched (csi n, const csi *wj, const csi *imatch, csi *p, csi *q,$/;"	f	file:
cs_rprune	trunk/EXTERNAL/csparse/cs_dmperm.c	/^static csi cs_rprune (csi i, csi j, double aij, void *other)$/;"	f	file:
cs_unmatched	trunk/EXTERNAL/csparse/cs_dmperm.c	/^static void cs_unmatched (csi m, const csi *wi, csi *p, csi *rr, csi set)$/;"	f	file:
cs_droptol	trunk/EXTERNAL/csparse/cs_droptol.c	/^csi cs_droptol (cs *A, double tol)$/;"	f
cs_tol	trunk/EXTERNAL/csparse/cs_droptol.c	/^static csi cs_tol (csi i, csi j, double aij, void *tol)$/;"	f	file:
cs_dropzeros	trunk/EXTERNAL/csparse/cs_dropzeros.c	/^csi cs_dropzeros (cs *A)$/;"	f
cs_nonzero	trunk/EXTERNAL/csparse/cs_dropzeros.c	/^static csi cs_nonzero (csi i, csi j, double aij, void *other)$/;"	f	file:
cs_dupl	trunk/EXTERNAL/csparse/cs_dupl.c	/^csi cs_dupl (cs *A)$/;"	f
cs_entry	trunk/EXTERNAL/csparse/cs_entry.c	/^csi cs_entry (cs *T, csi i, csi j, double x)$/;"	f
cs_ereach	trunk/EXTERNAL/csparse/cs_ereach.c	/^csi cs_ereach (const cs *A, csi k, const csi *parent, csi *s, csi *w)$/;"	f
cs_etree	trunk/EXTERNAL/csparse/cs_etree.c	/^csi *cs_etree (const cs *A, csi ata)$/;"	f
cs_fkeep	trunk/EXTERNAL/csparse/cs_fkeep.c	/^csi cs_fkeep (cs *A, csi (*fkeep) (csi, csi, double, void *), void *other)$/;"	f
cs_gaxpy	trunk/EXTERNAL/csparse/cs_gaxpy.c	/^csi cs_gaxpy (const cs *A, const double *x, double *y)$/;"	f
cs_happly	trunk/EXTERNAL/csparse/cs_happly.c	/^csi cs_happly (const cs *V, csi i, double beta, double *x)$/;"	f
cs_house	trunk/EXTERNAL/csparse/cs_house.c	/^double cs_house (double *x, double *beta, csi n)$/;"	f
cs_ipvec	trunk/EXTERNAL/csparse/cs_ipvec.c	/^csi cs_ipvec (const csi *p, const double *b, double *x, csi n)$/;"	f
cs_leaf	trunk/EXTERNAL/csparse/cs_leaf.c	/^csi cs_leaf (csi i, csi j, const csi *first, csi *maxfirst, csi *prevleaf,$/;"	f
cs_load	trunk/EXTERNAL/csparse/cs_load.c	/^cs *cs_load (FILE *f)$/;"	f
cs_lsolve	trunk/EXTERNAL/csparse/cs_lsolve.c	/^csi cs_lsolve (const cs *L, double *x)$/;"	f
cs_ltsolve	trunk/EXTERNAL/csparse/cs_ltsolve.c	/^csi cs_ltsolve (const cs *L, double *x)$/;"	f
cs_lu	trunk/EXTERNAL/csparse/cs_lu.c	/^csn *cs_lu (const cs *A, const css *S, double tol)$/;"	f
cs_lusol	trunk/EXTERNAL/csparse/cs_lusol.c	/^csi cs_lusol (csi order, const cs *A, double *b, double tol)$/;"	f
calloc	trunk/EXTERNAL/csparse/cs_malloc.c	6;"	d	file:
cs_calloc	trunk/EXTERNAL/csparse/cs_malloc.c	/^void *cs_calloc (csi n, size_t size)$/;"	f
cs_free	trunk/EXTERNAL/csparse/cs_malloc.c	/^void *cs_free (void *p)$/;"	f
cs_malloc	trunk/EXTERNAL/csparse/cs_malloc.c	/^void *cs_malloc (csi n, size_t size)$/;"	f
cs_realloc	trunk/EXTERNAL/csparse/cs_malloc.c	/^void *cs_realloc (void *p, csi n, size_t size, csi *ok)$/;"	f
free	trunk/EXTERNAL/csparse/cs_malloc.c	4;"	d	file:
malloc	trunk/EXTERNAL/csparse/cs_malloc.c	3;"	d	file:
realloc	trunk/EXTERNAL/csparse/cs_malloc.c	5;"	d	file:
cs_augment	trunk/EXTERNAL/csparse/cs_maxtrans.c	/^static void cs_augment (csi k, const cs *A, csi *jmatch, csi *cheap, csi *w,$/;"	f	file:
cs_maxtrans	trunk/EXTERNAL/csparse/cs_maxtrans.c	/^csi *cs_maxtrans (const cs *A, csi seed)  \/*[jmatch [0..m-1]; imatch [0..n-1]]*\/$/;"	f
cs_multiply	trunk/EXTERNAL/csparse/cs_multiply.c	/^cs *cs_multiply (const cs *A, const cs *B)$/;"	f
cs_norm	trunk/EXTERNAL/csparse/cs_norm.c	/^double cs_norm (const cs *A)$/;"	f
cs_permute	trunk/EXTERNAL/csparse/cs_permute.c	/^cs *cs_permute (const cs *A, const csi *pinv, const csi *q, csi values)$/;"	f
cs_pinv	trunk/EXTERNAL/csparse/cs_pinv.c	/^csi *cs_pinv (csi const *p, csi n)$/;"	f
cs_post	trunk/EXTERNAL/csparse/cs_post.c	/^csi *cs_post (const csi *parent, csi n)$/;"	f
cs_print	trunk/EXTERNAL/csparse/cs_print.c	/^csi cs_print (const cs *A, csi brief)$/;"	f
cs_pvec	trunk/EXTERNAL/csparse/cs_pvec.c	/^csi cs_pvec (const csi *p, const double *b, double *x, csi n)$/;"	f
cs_qr	trunk/EXTERNAL/csparse/cs_qr.c	/^csn *cs_qr (const cs *A, const css *S)$/;"	f
cs_qrsol	trunk/EXTERNAL/csparse/cs_qrsol.c	/^csi cs_qrsol (csi order, const cs *A, double *b)$/;"	f
cs_randperm	trunk/EXTERNAL/csparse/cs_randperm.c	/^csi *cs_randperm (csi n, csi seed)$/;"	f
cs_reach	trunk/EXTERNAL/csparse/cs_reach.c	/^csi cs_reach (cs *G, const cs *B, csi k, csi *xi, const csi *pinv)$/;"	f
cs_scatter	trunk/EXTERNAL/csparse/cs_scatter.c	/^csi cs_scatter (const cs *A, csi j, double beta, csi *w, double *x, csi mark,$/;"	f
cs_scc	trunk/EXTERNAL/csparse/cs_scc.c	/^csd *cs_scc (cs *A)     \/* matrix A temporarily modified, then restored *\/$/;"	f
cs_schol	trunk/EXTERNAL/csparse/cs_schol.c	/^css *cs_schol (csi order, const cs *A)$/;"	f
cs_spsolve	trunk/EXTERNAL/csparse/cs_spsolve.c	/^csi cs_spsolve (cs *G, const cs *B, csi k, csi *xi, double *x, const csi *pinv,$/;"	f
cs_sqr	trunk/EXTERNAL/csparse/cs_sqr.c	/^css *cs_sqr (csi order, const cs *A, csi qr)$/;"	f
cs_vcount	trunk/EXTERNAL/csparse/cs_sqr.c	/^static csi cs_vcount (const cs *A, css *S)$/;"	f	file:
cs_symperm	trunk/EXTERNAL/csparse/cs_symperm.c	/^cs *cs_symperm (const cs *A, const csi *pinv, csi values)$/;"	f
cs_tdfs	trunk/EXTERNAL/csparse/cs_tdfs.c	/^csi cs_tdfs (csi j, csi k, csi *head, const csi *next, csi *post, csi *stack)$/;"	f
cs_transpose	trunk/EXTERNAL/csparse/cs_transpose.c	/^cs *cs_transpose (const cs *A, csi values)$/;"	f
cs_updown	trunk/EXTERNAL/csparse/cs_updown.c	/^csi cs_updown (cs *L, csi sigma, const cs *C, const csi *parent)$/;"	f
cs_usolve	trunk/EXTERNAL/csparse/cs_usolve.c	/^csi cs_usolve (const cs *U, double *x)$/;"	f
cs_dalloc	trunk/EXTERNAL/csparse/cs_util.c	/^csd *cs_dalloc (csi m, csi n)$/;"	f
cs_ddone	trunk/EXTERNAL/csparse/cs_util.c	/^csd *cs_ddone (csd *D, cs *C, void *w, csi ok)$/;"	f
cs_dfree	trunk/EXTERNAL/csparse/cs_util.c	/^csd *cs_dfree (csd *D)$/;"	f
cs_done	trunk/EXTERNAL/csparse/cs_util.c	/^cs *cs_done (cs *C, void *w, void *x, csi ok)$/;"	f
cs_idone	trunk/EXTERNAL/csparse/cs_util.c	/^csi *cs_idone (csi *p, cs *C, void *w, csi ok)$/;"	f
cs_ndone	trunk/EXTERNAL/csparse/cs_util.c	/^csn *cs_ndone (csn *N, cs *C, void *w, void *x, csi ok)$/;"	f
cs_nfree	trunk/EXTERNAL/csparse/cs_util.c	/^csn *cs_nfree (csn *N)$/;"	f
cs_sfree	trunk/EXTERNAL/csparse/cs_util.c	/^css *cs_sfree (css *S)$/;"	f
cs_spalloc	trunk/EXTERNAL/csparse/cs_util.c	/^cs *cs_spalloc (csi m, csi n, csi nzmax, csi values, csi triplet)$/;"	f
cs_spfree	trunk/EXTERNAL/csparse/cs_util.c	/^cs *cs_spfree (cs *A)$/;"	f
cs_sprealloc	trunk/EXTERNAL/csparse/cs_util.c	/^csi cs_sprealloc (cs *A, csi nzmax)$/;"	f
cs_utsolve	trunk/EXTERNAL/csparse/cs_utsolve.c	/^csi cs_utsolve (const cs *U, double *x)$/;"	f
fghStrokeByID	trunk/EXTERNAL/freeglut/freeglut_font.cpp	/^static SFG_StrokeFont* fghStrokeByID(FontID font )$/;"	f	namespace:freeglut_minimal	file:
freeglut_minimal	trunk/EXTERNAL/freeglut/freeglut_font.cpp	/^namespace freeglut_minimal {$/;"	n	file:
freeglut_return_if_fail	trunk/EXTERNAL/freeglut/freeglut_font.cpp	31;"	d	file:
freeglut_return_val_if_fail	trunk/EXTERNAL/freeglut/freeglut_font.cpp	34;"	d	file:
glutStrokeHeight	trunk/EXTERNAL/freeglut/freeglut_font.cpp	/^GLfloat glutStrokeHeight( FontID fontID )$/;"	f	namespace:freeglut_minimal
glutStrokeLength	trunk/EXTERNAL/freeglut/freeglut_font.cpp	/^int glutStrokeLength( FontID fontID, const char* string_ )$/;"	f	namespace:freeglut_minimal
glutStrokeString	trunk/EXTERNAL/freeglut/freeglut_font.cpp	/^void glutStrokeString(FontID fontID, const char *string_)$/;"	f	namespace:freeglut_minimal
Characters	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^    const SFG_StrokeChar** Characters;          \/* The characters mapping    *\/$/;"	m	struct:freeglut_minimal::tagSFG_StrokeFont
FontID	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^  enum FontID {$/;"	g	namespace:freeglut_minimal
G2O_FGAPI	trunk/EXTERNAL/freeglut/freeglut_minimal.h	36;"	d
G2O_FGAPI	trunk/EXTERNAL/freeglut/freeglut_minimal.h	38;"	d
G2O_FGAPI	trunk/EXTERNAL/freeglut/freeglut_minimal.h	41;"	d
GLUT_STROKE_MONO_ROMAN	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^    GLUT_STROKE_MONO_ROMAN$/;"	e	enum:freeglut_minimal::FontID
GLUT_STROKE_ROMAN	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^    GLUT_STROKE_ROMAN,$/;"	e	enum:freeglut_minimal::FontID
Height	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^    GLfloat         Height;                     \/* Height of the characters  *\/$/;"	m	struct:freeglut_minimal::tagSFG_StrokeFont
Name	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^    char*           Name;                       \/* The source font name      *\/$/;"	m	struct:freeglut_minimal::tagSFG_StrokeFont
Number	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^    int             Number;$/;"	m	struct:freeglut_minimal::tagSFG_StrokeChar
Number	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^    int             Number;$/;"	m	struct:freeglut_minimal::tagSFG_StrokeStrip
Quantity	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^    int             Quantity;                   \/* Number of chars in font   *\/$/;"	m	struct:freeglut_minimal::tagSFG_StrokeFont
Right	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^    GLfloat         Right;$/;"	m	struct:freeglut_minimal::tagSFG_StrokeChar
SFG_StrokeChar	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^  typedef struct tagSFG_StrokeChar SFG_StrokeChar;$/;"	t	namespace:freeglut_minimal
SFG_StrokeFont	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^  typedef struct tagSFG_StrokeFont SFG_StrokeFont;$/;"	t	namespace:freeglut_minimal
SFG_StrokeStrip	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^  typedef struct tagSFG_StrokeStrip SFG_StrokeStrip;$/;"	t	namespace:freeglut_minimal
SFG_StrokeVertex	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^  typedef struct tagSFG_StrokeVertex SFG_StrokeVertex;$/;"	t	namespace:freeglut_minimal
Strips	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^    const SFG_StrokeStrip* Strips;$/;"	m	struct:freeglut_minimal::tagSFG_StrokeChar
Vertices	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^    const SFG_StrokeVertex* Vertices;$/;"	m	struct:freeglut_minimal::tagSFG_StrokeStrip
X	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^    GLfloat         X, Y;$/;"	m	struct:freeglut_minimal::tagSFG_StrokeVertex
Y	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^    GLfloat         X, Y;$/;"	m	struct:freeglut_minimal::tagSFG_StrokeVertex
__FREEGLUT_EXT_H__	trunk/EXTERNAL/freeglut/freeglut_minimal.h	2;"	d
freeglut_minimal	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^namespace freeglut_minimal {$/;"	n
tagSFG_StrokeChar	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^  struct tagSFG_StrokeChar$/;"	s	namespace:freeglut_minimal
tagSFG_StrokeFont	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^  struct tagSFG_StrokeFont$/;"	s	namespace:freeglut_minimal
tagSFG_StrokeStrip	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^  struct tagSFG_StrokeStrip$/;"	s	namespace:freeglut_minimal
tagSFG_StrokeVertex	trunk/EXTERNAL/freeglut/freeglut_minimal.h	/^  struct tagSFG_StrokeVertex$/;"	s	namespace:freeglut_minimal
ch100	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch100 = {104.762f,2,ch100st};$/;"	v	file:
ch100st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch100st[] =$/;"	v	file:
ch100st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch100st0[] =$/;"	v	file:
ch100st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch100st1[] =$/;"	v	file:
ch101	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch101 = {104.762f,1,ch101st};$/;"	v	file:
ch101st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch101st[] =$/;"	v	file:
ch101st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch101st0[] =$/;"	v	file:
ch102	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch102 = {104.762f,2,ch102st};$/;"	v	file:
ch102st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch102st[] =$/;"	v	file:
ch102st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch102st0[] =$/;"	v	file:
ch102st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch102st1[] =$/;"	v	file:
ch103	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch103 = {104.762f,2,ch103st};$/;"	v	file:
ch103st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch103st[] =$/;"	v	file:
ch103st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch103st0[] =$/;"	v	file:
ch103st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch103st1[] =$/;"	v	file:
ch104	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch104 = {104.762f,2,ch104st};$/;"	v	file:
ch104st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch104st[] =$/;"	v	file:
ch104st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch104st0[] =$/;"	v	file:
ch104st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch104st1[] =$/;"	v	file:
ch105	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch105 = {104.762f,2,ch105st};$/;"	v	file:
ch105st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch105st[] =$/;"	v	file:
ch105st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch105st0[] =$/;"	v	file:
ch105st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch105st1[] =$/;"	v	file:
ch106	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch106 = {104.762f,2,ch106st};$/;"	v	file:
ch106st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch106st[] =$/;"	v	file:
ch106st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch106st0[] =$/;"	v	file:
ch106st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch106st1[] =$/;"	v	file:
ch107	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch107 = {104.762f,3,ch107st};$/;"	v	file:
ch107st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch107st[] =$/;"	v	file:
ch107st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch107st0[] =$/;"	v	file:
ch107st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch107st1[] =$/;"	v	file:
ch107st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch107st2[] =$/;"	v	file:
ch108	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch108 = {104.762f,1,ch108st};$/;"	v	file:
ch108st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch108st[] =$/;"	v	file:
ch108st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch108st0[] =$/;"	v	file:
ch109	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch109 = {104.762f,3,ch109st};$/;"	v	file:
ch109st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch109st[] =$/;"	v	file:
ch109st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch109st0[] =$/;"	v	file:
ch109st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch109st1[] =$/;"	v	file:
ch109st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch109st2[] =$/;"	v	file:
ch110	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch110 = {104.762f,2,ch110st};$/;"	v	file:
ch110st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch110st[] =$/;"	v	file:
ch110st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch110st0[] =$/;"	v	file:
ch110st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch110st1[] =$/;"	v	file:
ch111	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch111 = {104.762f,1,ch111st};$/;"	v	file:
ch111st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch111st[] =$/;"	v	file:
ch111st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch111st0[] =$/;"	v	file:
ch112	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch112 = {104.762f,2,ch112st};$/;"	v	file:
ch112st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch112st[] =$/;"	v	file:
ch112st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch112st0[] =$/;"	v	file:
ch112st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch112st1[] =$/;"	v	file:
ch113	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch113 = {104.762f,2,ch113st};$/;"	v	file:
ch113st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch113st[] =$/;"	v	file:
ch113st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch113st0[] =$/;"	v	file:
ch113st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch113st1[] =$/;"	v	file:
ch114	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch114 = {104.762f,2,ch114st};$/;"	v	file:
ch114st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch114st[] =$/;"	v	file:
ch114st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch114st0[] =$/;"	v	file:
ch114st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch114st1[] =$/;"	v	file:
ch115	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch115 = {104.762f,1,ch115st};$/;"	v	file:
ch115st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch115st[] =$/;"	v	file:
ch115st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch115st0[] =$/;"	v	file:
ch116	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch116 = {104.762f,2,ch116st};$/;"	v	file:
ch116st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch116st[] =$/;"	v	file:
ch116st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch116st0[] =$/;"	v	file:
ch116st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch116st1[] =$/;"	v	file:
ch117	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch117 = {104.762f,2,ch117st};$/;"	v	file:
ch117st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch117st[] =$/;"	v	file:
ch117st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch117st0[] =$/;"	v	file:
ch117st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch117st1[] =$/;"	v	file:
ch118	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch118 = {104.762f,2,ch118st};$/;"	v	file:
ch118st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch118st[] =$/;"	v	file:
ch118st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch118st0[] =$/;"	v	file:
ch118st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch118st1[] =$/;"	v	file:
ch119	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch119 = {104.762f,4,ch119st};$/;"	v	file:
ch119st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch119st[] =$/;"	v	file:
ch119st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch119st0[] =$/;"	v	file:
ch119st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch119st1[] =$/;"	v	file:
ch119st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch119st2[] =$/;"	v	file:
ch119st3	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch119st3[] =$/;"	v	file:
ch120	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch120 = {104.762f,2,ch120st};$/;"	v	file:
ch120st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch120st[] =$/;"	v	file:
ch120st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch120st0[] =$/;"	v	file:
ch120st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch120st1[] =$/;"	v	file:
ch121	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch121 = {104.762f,2,ch121st};$/;"	v	file:
ch121st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch121st[] =$/;"	v	file:
ch121st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch121st0[] =$/;"	v	file:
ch121st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch121st1[] =$/;"	v	file:
ch122	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch122 = {104.762f,3,ch122st};$/;"	v	file:
ch122st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch122st[] =$/;"	v	file:
ch122st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch122st0[] =$/;"	v	file:
ch122st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch122st1[] =$/;"	v	file:
ch122st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch122st2[] =$/;"	v	file:
ch123	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch123 = {104.762f,3,ch123st};$/;"	v	file:
ch123st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch123st[] =$/;"	v	file:
ch123st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch123st0[] =$/;"	v	file:
ch123st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch123st1[] =$/;"	v	file:
ch123st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch123st2[] =$/;"	v	file:
ch124	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch124 = {104.762f,1,ch124st};$/;"	v	file:
ch124st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch124st[] =$/;"	v	file:
ch124st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch124st0[] =$/;"	v	file:
ch125	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch125 = {104.762f,3,ch125st};$/;"	v	file:
ch125st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch125st[] =$/;"	v	file:
ch125st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch125st0[] =$/;"	v	file:
ch125st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch125st1[] =$/;"	v	file:
ch125st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch125st2[] =$/;"	v	file:
ch126	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch126 = {104.762f,2,ch126st};$/;"	v	file:
ch126st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch126st[] =$/;"	v	file:
ch126st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch126st0[] =$/;"	v	file:
ch126st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch126st1[] =$/;"	v	file:
ch127	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch127 = {104.762f,2,ch127st};$/;"	v	file:
ch127st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch127st[] =$/;"	v	file:
ch127st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch127st0[] =$/;"	v	file:
ch127st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch127st1[] =$/;"	v	file:
ch32	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch32 = {104.762f,0,ch32st};$/;"	v	file:
ch32st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch32st[] =$/;"	v	file:
ch33	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch33 = {104.762f,2,ch33st};$/;"	v	file:
ch33st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch33st[] =$/;"	v	file:
ch33st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch33st0[] =$/;"	v	file:
ch33st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch33st1[] =$/;"	v	file:
ch34	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch34 = {104.762f,2,ch34st};$/;"	v	file:
ch34st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch34st[] =$/;"	v	file:
ch34st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch34st0[] =$/;"	v	file:
ch34st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch34st1[] =$/;"	v	file:
ch35	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch35 = {104.762f,4,ch35st};$/;"	v	file:
ch35st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch35st[] =$/;"	v	file:
ch35st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch35st0[] =$/;"	v	file:
ch35st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch35st1[] =$/;"	v	file:
ch35st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch35st2[] =$/;"	v	file:
ch35st3	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch35st3[] =$/;"	v	file:
ch36	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch36 = {104.762f,3,ch36st};$/;"	v	file:
ch36st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch36st[] =$/;"	v	file:
ch36st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch36st0[] =$/;"	v	file:
ch36st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch36st1[] =$/;"	v	file:
ch36st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch36st2[] =$/;"	v	file:
ch37	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch37 = {104.762f,3,ch37st};$/;"	v	file:
ch37st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch37st[] =$/;"	v	file:
ch37st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch37st0[] =$/;"	v	file:
ch37st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch37st1[] =$/;"	v	file:
ch37st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch37st2[] =$/;"	v	file:
ch38	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch38 = {104.762f,1,ch38st};$/;"	v	file:
ch38st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch38st[] =$/;"	v	file:
ch38st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch38st0[] =$/;"	v	file:
ch39	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch39 = {104.762f,1,ch39st};$/;"	v	file:
ch39st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch39st[] =$/;"	v	file:
ch39st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch39st0[] =$/;"	v	file:
ch40	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch40 = {104.762f,1,ch40st};$/;"	v	file:
ch40st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch40st[] =$/;"	v	file:
ch40st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch40st0[] =$/;"	v	file:
ch41	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch41 = {104.762f,1,ch41st};$/;"	v	file:
ch41st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch41st[] =$/;"	v	file:
ch41st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch41st0[] =$/;"	v	file:
ch42	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch42 = {104.762f,3,ch42st};$/;"	v	file:
ch42st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch42st[] =$/;"	v	file:
ch42st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch42st0[] =$/;"	v	file:
ch42st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch42st1[] =$/;"	v	file:
ch42st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch42st2[] =$/;"	v	file:
ch43	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch43 = {104.762f,2,ch43st};$/;"	v	file:
ch43st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch43st[] =$/;"	v	file:
ch43st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch43st0[] =$/;"	v	file:
ch43st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch43st1[] =$/;"	v	file:
ch44	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch44 = {104.762f,1,ch44st};$/;"	v	file:
ch44st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch44st[] =$/;"	v	file:
ch44st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch44st0[] =$/;"	v	file:
ch45	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch45 = {104.762f,1,ch45st};$/;"	v	file:
ch45st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch45st[] =$/;"	v	file:
ch45st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch45st0[] =$/;"	v	file:
ch46	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch46 = {104.762f,1,ch46st};$/;"	v	file:
ch46st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch46st[] =$/;"	v	file:
ch46st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch46st0[] =$/;"	v	file:
ch47	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch47 = {104.762f,1,ch47st};$/;"	v	file:
ch47st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch47st[] =$/;"	v	file:
ch47st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch47st0[] =$/;"	v	file:
ch48	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch48 = {104.762f,1,ch48st};$/;"	v	file:
ch48st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch48st[] =$/;"	v	file:
ch48st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch48st0[] =$/;"	v	file:
ch49	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch49 = {104.762f,1,ch49st};$/;"	v	file:
ch49st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch49st[] =$/;"	v	file:
ch49st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch49st0[] =$/;"	v	file:
ch50	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch50 = {104.762f,1,ch50st};$/;"	v	file:
ch50st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch50st[] =$/;"	v	file:
ch50st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch50st0[] =$/;"	v	file:
ch51	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch51 = {104.762f,1,ch51st};$/;"	v	file:
ch51st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch51st[] =$/;"	v	file:
ch51st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch51st0[] =$/;"	v	file:
ch52	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch52 = {104.762f,2,ch52st};$/;"	v	file:
ch52st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch52st[] =$/;"	v	file:
ch52st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch52st0[] =$/;"	v	file:
ch52st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch52st1[] =$/;"	v	file:
ch53	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch53 = {104.762f,1,ch53st};$/;"	v	file:
ch53st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch53st[] =$/;"	v	file:
ch53st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch53st0[] =$/;"	v	file:
ch54	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch54 = {104.762f,1,ch54st};$/;"	v	file:
ch54st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch54st[] =$/;"	v	file:
ch54st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch54st0[] =$/;"	v	file:
ch55	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch55 = {104.762f,2,ch55st};$/;"	v	file:
ch55st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch55st[] =$/;"	v	file:
ch55st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch55st0[] =$/;"	v	file:
ch55st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch55st1[] =$/;"	v	file:
ch56	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch56 = {104.762f,1,ch56st};$/;"	v	file:
ch56st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch56st[] =$/;"	v	file:
ch56st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch56st0[] =$/;"	v	file:
ch57	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch57 = {104.762f,1,ch57st};$/;"	v	file:
ch57st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch57st[] =$/;"	v	file:
ch57st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch57st0[] =$/;"	v	file:
ch58	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch58 = {104.762f,2,ch58st};$/;"	v	file:
ch58st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch58st[] =$/;"	v	file:
ch58st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch58st0[] =$/;"	v	file:
ch58st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch58st1[] =$/;"	v	file:
ch59	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch59 = {104.762f,2,ch59st};$/;"	v	file:
ch59st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch59st[] =$/;"	v	file:
ch59st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch59st0[] =$/;"	v	file:
ch59st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch59st1[] =$/;"	v	file:
ch60	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch60 = {104.762f,1,ch60st};$/;"	v	file:
ch60st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch60st[] =$/;"	v	file:
ch60st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch60st0[] =$/;"	v	file:
ch61	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch61 = {104.762f,2,ch61st};$/;"	v	file:
ch61st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch61st[] =$/;"	v	file:
ch61st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch61st0[] =$/;"	v	file:
ch61st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch61st1[] =$/;"	v	file:
ch62	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch62 = {104.762f,1,ch62st};$/;"	v	file:
ch62st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch62st[] =$/;"	v	file:
ch62st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch62st0[] =$/;"	v	file:
ch63	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch63 = {104.762f,2,ch63st};$/;"	v	file:
ch63st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch63st[] =$/;"	v	file:
ch63st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch63st0[] =$/;"	v	file:
ch63st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch63st1[] =$/;"	v	file:
ch64	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch64 = {104.762f,2,ch64st};$/;"	v	file:
ch64st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch64st[] =$/;"	v	file:
ch64st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch64st0[] =$/;"	v	file:
ch64st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch64st1[] =$/;"	v	file:
ch65	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch65 = {104.762f,3,ch65st};$/;"	v	file:
ch65st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch65st[] =$/;"	v	file:
ch65st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch65st0[] =$/;"	v	file:
ch65st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch65st1[] =$/;"	v	file:
ch65st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch65st2[] =$/;"	v	file:
ch66	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch66 = {104.762f,3,ch66st};$/;"	v	file:
ch66st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch66st[] =$/;"	v	file:
ch66st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch66st0[] =$/;"	v	file:
ch66st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch66st1[] =$/;"	v	file:
ch66st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch66st2[] =$/;"	v	file:
ch67	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch67 = {104.762f,1,ch67st};$/;"	v	file:
ch67st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch67st[] =$/;"	v	file:
ch67st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch67st0[] =$/;"	v	file:
ch68	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch68 = {104.762f,2,ch68st};$/;"	v	file:
ch68st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch68st[] =$/;"	v	file:
ch68st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch68st0[] =$/;"	v	file:
ch68st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch68st1[] =$/;"	v	file:
ch69	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch69 = {104.762f,4,ch69st};$/;"	v	file:
ch69st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch69st[] =$/;"	v	file:
ch69st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch69st0[] =$/;"	v	file:
ch69st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch69st1[] =$/;"	v	file:
ch69st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch69st2[] =$/;"	v	file:
ch69st3	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch69st3[] =$/;"	v	file:
ch70	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch70 = {104.762f,3,ch70st};$/;"	v	file:
ch70st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch70st[] =$/;"	v	file:
ch70st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch70st0[] =$/;"	v	file:
ch70st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch70st1[] =$/;"	v	file:
ch70st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch70st2[] =$/;"	v	file:
ch71	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch71 = {104.762f,2,ch71st};$/;"	v	file:
ch71st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch71st[] =$/;"	v	file:
ch71st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch71st0[] =$/;"	v	file:
ch71st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch71st1[] =$/;"	v	file:
ch72	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch72 = {104.762f,3,ch72st};$/;"	v	file:
ch72st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch72st[] =$/;"	v	file:
ch72st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch72st0[] =$/;"	v	file:
ch72st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch72st1[] =$/;"	v	file:
ch72st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch72st2[] =$/;"	v	file:
ch73	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch73 = {104.762f,1,ch73st};$/;"	v	file:
ch73st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch73st[] =$/;"	v	file:
ch73st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch73st0[] =$/;"	v	file:
ch74	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch74 = {104.762f,1,ch74st};$/;"	v	file:
ch74st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch74st[] =$/;"	v	file:
ch74st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch74st0[] =$/;"	v	file:
ch75	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch75 = {104.762f,3,ch75st};$/;"	v	file:
ch75st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch75st[] =$/;"	v	file:
ch75st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch75st0[] =$/;"	v	file:
ch75st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch75st1[] =$/;"	v	file:
ch75st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch75st2[] =$/;"	v	file:
ch76	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch76 = {104.762f,2,ch76st};$/;"	v	file:
ch76st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch76st[] =$/;"	v	file:
ch76st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch76st0[] =$/;"	v	file:
ch76st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch76st1[] =$/;"	v	file:
ch77	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch77 = {104.762f,4,ch77st};$/;"	v	file:
ch77st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch77st[] =$/;"	v	file:
ch77st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch77st0[] =$/;"	v	file:
ch77st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch77st1[] =$/;"	v	file:
ch77st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch77st2[] =$/;"	v	file:
ch77st3	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch77st3[] =$/;"	v	file:
ch78	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch78 = {104.762f,3,ch78st};$/;"	v	file:
ch78st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch78st[] =$/;"	v	file:
ch78st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch78st0[] =$/;"	v	file:
ch78st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch78st1[] =$/;"	v	file:
ch78st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch78st2[] =$/;"	v	file:
ch79	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch79 = {104.762f,1,ch79st};$/;"	v	file:
ch79st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch79st[] =$/;"	v	file:
ch79st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch79st0[] =$/;"	v	file:
ch80	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch80 = {104.762f,2,ch80st};$/;"	v	file:
ch80st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch80st[] =$/;"	v	file:
ch80st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch80st0[] =$/;"	v	file:
ch80st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch80st1[] =$/;"	v	file:
ch81	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch81 = {104.762f,2,ch81st};$/;"	v	file:
ch81st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch81st[] =$/;"	v	file:
ch81st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch81st0[] =$/;"	v	file:
ch81st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch81st1[] =$/;"	v	file:
ch82	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch82 = {104.762f,3,ch82st};$/;"	v	file:
ch82st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch82st[] =$/;"	v	file:
ch82st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch82st0[] =$/;"	v	file:
ch82st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch82st1[] =$/;"	v	file:
ch82st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch82st2[] =$/;"	v	file:
ch83	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch83 = {104.762f,1,ch83st};$/;"	v	file:
ch83st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch83st[] =$/;"	v	file:
ch83st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch83st0[] =$/;"	v	file:
ch84	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch84 = {104.762f,2,ch84st};$/;"	v	file:
ch84st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch84st[] =$/;"	v	file:
ch84st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch84st0[] =$/;"	v	file:
ch84st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch84st1[] =$/;"	v	file:
ch85	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch85 = {104.762f,1,ch85st};$/;"	v	file:
ch85st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch85st[] =$/;"	v	file:
ch85st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch85st0[] =$/;"	v	file:
ch86	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch86 = {104.762f,2,ch86st};$/;"	v	file:
ch86st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch86st[] =$/;"	v	file:
ch86st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch86st0[] =$/;"	v	file:
ch86st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch86st1[] =$/;"	v	file:
ch87	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch87 = {104.762f,4,ch87st};$/;"	v	file:
ch87st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch87st[] =$/;"	v	file:
ch87st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch87st0[] =$/;"	v	file:
ch87st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch87st1[] =$/;"	v	file:
ch87st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch87st2[] =$/;"	v	file:
ch87st3	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch87st3[] =$/;"	v	file:
ch88	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch88 = {104.762f,2,ch88st};$/;"	v	file:
ch88st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch88st[] =$/;"	v	file:
ch88st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch88st0[] =$/;"	v	file:
ch88st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch88st1[] =$/;"	v	file:
ch89	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch89 = {104.762f,2,ch89st};$/;"	v	file:
ch89st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch89st[] =$/;"	v	file:
ch89st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch89st0[] =$/;"	v	file:
ch89st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch89st1[] =$/;"	v	file:
ch90	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch90 = {104.762f,3,ch90st};$/;"	v	file:
ch90st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch90st[] =$/;"	v	file:
ch90st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch90st0[] =$/;"	v	file:
ch90st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch90st1[] =$/;"	v	file:
ch90st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch90st2[] =$/;"	v	file:
ch91	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch91 = {104.762f,4,ch91st};$/;"	v	file:
ch91st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch91st[] =$/;"	v	file:
ch91st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch91st0[] =$/;"	v	file:
ch91st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch91st1[] =$/;"	v	file:
ch91st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch91st2[] =$/;"	v	file:
ch91st3	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch91st3[] =$/;"	v	file:
ch92	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch92 = {104.762f,1,ch92st};$/;"	v	file:
ch92st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch92st[] =$/;"	v	file:
ch92st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch92st0[] =$/;"	v	file:
ch93	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch93 = {104.762f,4,ch93st};$/;"	v	file:
ch93st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch93st[] =$/;"	v	file:
ch93st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch93st0[] =$/;"	v	file:
ch93st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch93st1[] =$/;"	v	file:
ch93st2	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch93st2[] =$/;"	v	file:
ch93st3	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch93st3[] =$/;"	v	file:
ch94	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch94 = {104.762f,2,ch94st};$/;"	v	file:
ch94st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch94st[] =$/;"	v	file:
ch94st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch94st0[] =$/;"	v	file:
ch94st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch94st1[] =$/;"	v	file:
ch95	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch95 = {104.762f,1,ch95st};$/;"	v	file:
ch95st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch95st[] =$/;"	v	file:
ch95st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch95st0[] =$/;"	v	file:
ch96	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch96 = {104.762f,2,ch96st};$/;"	v	file:
ch96st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch96st[] =$/;"	v	file:
ch96st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch96st0[] =$/;"	v	file:
ch96st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch96st1[] =$/;"	v	file:
ch97	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch97 = {104.762f,2,ch97st};$/;"	v	file:
ch97st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch97st[] =$/;"	v	file:
ch97st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch97st0[] =$/;"	v	file:
ch97st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch97st1[] =$/;"	v	file:
ch98	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch98 = {104.762f,2,ch98st};$/;"	v	file:
ch98st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch98st[] =$/;"	v	file:
ch98st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch98st0[] =$/;"	v	file:
ch98st1	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch98st1[] =$/;"	v	file:
ch99	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar ch99 = {104.762f,1,ch99st};$/;"	v	file:
ch99st	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeStrip ch99st[] =$/;"	v	file:
ch99st0	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeVertex ch99st0[] =$/;"	v	file:
chars	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^static const SFG_StrokeChar *chars[] =$/;"	v	file:
fgStrokeMonoRoman	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^const SFG_StrokeFont fgStrokeMonoRoman = {(char*)"MonoRoman",128,152.381f,chars};$/;"	v
freeglut_minimal	trunk/EXTERNAL/freeglut/freeglut_stroke_mono_roman.cpp	/^namespace freeglut_minimal {$/;"	n	file:
ch100	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch100 = {70.2629f,2,ch100st};$/;"	v	file:
ch100st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch100st[] =$/;"	v	file:
ch100st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch100st0[] =$/;"	v	file:
ch100st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch100st1[] =$/;"	v	file:
ch101	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch101 = {68.5229f,1,ch101st};$/;"	v	file:
ch101st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch101st[] =$/;"	v	file:
ch101st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch101st0[] =$/;"	v	file:
ch102	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch102 = {38.6552f,2,ch102st};$/;"	v	file:
ch102st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch102st[] =$/;"	v	file:
ch102st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch102st0[] =$/;"	v	file:
ch102st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch102st1[] =$/;"	v	file:
ch103	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch103 = {70.9829f,2,ch103st};$/;"	v	file:
ch103st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch103st[] =$/;"	v	file:
ch103st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch103st0[] =$/;"	v	file:
ch103st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch103st1[] =$/;"	v	file:
ch104	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch104 = {71.021f,2,ch104st};$/;"	v	file:
ch104st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch104st[] =$/;"	v	file:
ch104st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch104st0[] =$/;"	v	file:
ch104st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch104st1[] =$/;"	v	file:
ch105	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch105 = {28.8638f,2,ch105st};$/;"	v	file:
ch105st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch105st[] =$/;"	v	file:
ch105st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch105st0[] =$/;"	v	file:
ch105st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch105st1[] =$/;"	v	file:
ch106	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch106 = {36.2314f,2,ch106st};$/;"	v	file:
ch106st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch106st[] =$/;"	v	file:
ch106st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch106st0[] =$/;"	v	file:
ch106st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch106st1[] =$/;"	v	file:
ch107	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch107 = {62.521f,3,ch107st};$/;"	v	file:
ch107st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch107st[] =$/;"	v	file:
ch107st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch107st0[] =$/;"	v	file:
ch107st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch107st1[] =$/;"	v	file:
ch107st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch107st2[] =$/;"	v	file:
ch108	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch108 = {19.34f,1,ch108st};$/;"	v	file:
ch108st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch108st[] =$/;"	v	file:
ch108st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch108st0[] =$/;"	v	file:
ch109	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch109 = {123.962f,3,ch109st};$/;"	v	file:
ch109st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch109st[] =$/;"	v	file:
ch109st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch109st0[] =$/;"	v	file:
ch109st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch109st1[] =$/;"	v	file:
ch109st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch109st2[] =$/;"	v	file:
ch110	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch110 = {70.881f,2,ch110st};$/;"	v	file:
ch110st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch110st[] =$/;"	v	file:
ch110st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch110st0[] =$/;"	v	file:
ch110st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch110st1[] =$/;"	v	file:
ch111	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch111 = {71.7448f,1,ch111st};$/;"	v	file:
ch111st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch111st[] =$/;"	v	file:
ch111st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch111st0[] =$/;"	v	file:
ch112	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch112 = {70.8029f,2,ch112st};$/;"	v	file:
ch112st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch112st[] =$/;"	v	file:
ch112st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch112st0[] =$/;"	v	file:
ch112st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch112st1[] =$/;"	v	file:
ch113	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch113 = {70.7429f,2,ch113st};$/;"	v	file:
ch113st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch113st[] =$/;"	v	file:
ch113st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch113st0[] =$/;"	v	file:
ch113st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch113st1[] =$/;"	v	file:
ch114	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch114 = {49.4952f,2,ch114st};$/;"	v	file:
ch114st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch114st[] =$/;"	v	file:
ch114st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch114st0[] =$/;"	v	file:
ch114st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch114st1[] =$/;"	v	file:
ch115	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch115 = {62.321f,1,ch115st};$/;"	v	file:
ch115st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch115st[] =$/;"	v	file:
ch115st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch115st0[] =$/;"	v	file:
ch116	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch116 = {39.3152f,2,ch116st};$/;"	v	file:
ch116st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch116st[] =$/;"	v	file:
ch116st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch116st0[] =$/;"	v	file:
ch116st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch116st1[] =$/;"	v	file:
ch117	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch117 = {71.161f,2,ch117st};$/;"	v	file:
ch117st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch117st[] =$/;"	v	file:
ch117st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch117st0[] =$/;"	v	file:
ch117st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch117st1[] =$/;"	v	file:
ch118	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch118 = {60.6029f,2,ch118st};$/;"	v	file:
ch118st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch118st[] =$/;"	v	file:
ch118st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch118st0[] =$/;"	v	file:
ch118st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch118st1[] =$/;"	v	file:
ch119	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch119 = {80.4905f,4,ch119st};$/;"	v	file:
ch119st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch119st[] =$/;"	v	file:
ch119st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch119st0[] =$/;"	v	file:
ch119st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch119st1[] =$/;"	v	file:
ch119st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch119st2[] =$/;"	v	file:
ch119st3	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch119st3[] =$/;"	v	file:
ch120	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch120 = {56.401f,2,ch120st};$/;"	v	file:
ch120st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch120st[] =$/;"	v	file:
ch120st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch120st0[] =$/;"	v	file:
ch120st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch120st1[] =$/;"	v	file:
ch121	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch121 = {66.0648f,2,ch121st};$/;"	v	file:
ch121st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch121st[] =$/;"	v	file:
ch121st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch121st0[] =$/;"	v	file:
ch121st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch121st1[] =$/;"	v	file:
ch122	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch122 = {61.821f,3,ch122st};$/;"	v	file:
ch122st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch122st[] =$/;"	v	file:
ch122st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch122st0[] =$/;"	v	file:
ch122st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch122st1[] =$/;"	v	file:
ch122st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch122st2[] =$/;"	v	file:
ch123	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch123 = {41.6295f,3,ch123st};$/;"	v	file:
ch123st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch123st[] =$/;"	v	file:
ch123st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch123st0[] =$/;"	v	file:
ch123st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch123st1[] =$/;"	v	file:
ch123st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch123st2[] =$/;"	v	file:
ch124	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch124 = {23.78f,1,ch124st};$/;"	v	file:
ch124st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch124st[] =$/;"	v	file:
ch124st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch124st0[] =$/;"	v	file:
ch125	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch125 = {41.4695f,3,ch125st};$/;"	v	file:
ch125st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch125st[] =$/;"	v	file:
ch125st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch125st0[] =$/;"	v	file:
ch125st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch125st1[] =$/;"	v	file:
ch125st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch125st2[] =$/;"	v	file:
ch126	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch126 = {91.2743f,2,ch126st};$/;"	v	file:
ch126st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch126st[] =$/;"	v	file:
ch126st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch126st0[] =$/;"	v	file:
ch126st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch126st1[] =$/;"	v	file:
ch127	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch127 = {66.6667f,2,ch127st};$/;"	v	file:
ch127st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch127st[] =$/;"	v	file:
ch127st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch127st0[] =$/;"	v	file:
ch127st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch127st1[] =$/;"	v	file:
ch32	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch32 = {104.762f,0,ch32st};$/;"	v	file:
ch32st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch32st[] =$/;"	v	file:
ch33	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch33 = {26.6238f,2,ch33st};$/;"	v	file:
ch33st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch33st[] =$/;"	v	file:
ch33st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch33st0[] =$/;"	v	file:
ch33st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch33st1[] =$/;"	v	file:
ch34	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch34 = {51.4352f,2,ch34st};$/;"	v	file:
ch34st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch34st[] =$/;"	v	file:
ch34st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch34st0[] =$/;"	v	file:
ch34st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch34st1[] =$/;"	v	file:
ch35	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch35 = {79.4886f,4,ch35st};$/;"	v	file:
ch35st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch35st[] =$/;"	v	file:
ch35st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch35st0[] =$/;"	v	file:
ch35st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch35st1[] =$/;"	v	file:
ch35st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch35st2[] =$/;"	v	file:
ch35st3	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch35st3[] =$/;"	v	file:
ch36	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch36 = {76.2067f,3,ch36st};$/;"	v	file:
ch36st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch36st[] =$/;"	v	file:
ch36st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch36st0[] =$/;"	v	file:
ch36st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch36st1[] =$/;"	v	file:
ch36st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch36st2[] =$/;"	v	file:
ch37	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch37 = {96.5743f,3,ch37st};$/;"	v	file:
ch37st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch37st[] =$/;"	v	file:
ch37st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch37st0[] =$/;"	v	file:
ch37st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch37st1[] =$/;"	v	file:
ch37st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch37st2[] =$/;"	v	file:
ch38	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch38 = {101.758f,1,ch38st};$/;"	v	file:
ch38st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch38st[] =$/;"	v	file:
ch38st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch38st0[] =$/;"	v	file:
ch39	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch39 = {13.62f,1,ch39st};$/;"	v	file:
ch39st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch39st[] =$/;"	v	file:
ch39st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch39st0[] =$/;"	v	file:
ch40	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch40 = {47.1733f,1,ch40st};$/;"	v	file:
ch40st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch40st[] =$/;"	v	file:
ch40st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch40st0[] =$/;"	v	file:
ch41	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch41 = {47.5333f,1,ch41st};$/;"	v	file:
ch41st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch41st[] =$/;"	v	file:
ch41st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch41st0[] =$/;"	v	file:
ch42	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch42 = {59.439f,3,ch42st};$/;"	v	file:
ch42st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch42st[] =$/;"	v	file:
ch42st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch42st0[] =$/;"	v	file:
ch42st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch42st1[] =$/;"	v	file:
ch42st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch42st2[] =$/;"	v	file:
ch43	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch43 = {97.2543f,2,ch43st};$/;"	v	file:
ch43st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch43st[] =$/;"	v	file:
ch43st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch43st0[] =$/;"	v	file:
ch43st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch43st1[] =$/;"	v	file:
ch44	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch44 = {26.0638f,1,ch44st};$/;"	v	file:
ch44st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch44st[] =$/;"	v	file:
ch44st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch44st0[] =$/;"	v	file:
ch45	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch45 = {100.754f,1,ch45st};$/;"	v	file:
ch45st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch45st[] =$/;"	v	file:
ch45st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch45st0[] =$/;"	v	file:
ch46	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch46 = {26.4838f,1,ch46st};$/;"	v	file:
ch46st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch46st[] =$/;"	v	file:
ch46st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch46st0[] =$/;"	v	file:
ch47	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch47 = {82.1067f,1,ch47st};$/;"	v	file:
ch47st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch47st[] =$/;"	v	file:
ch47st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch47st0[] =$/;"	v	file:
ch48	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch48 = {77.0667f,1,ch48st};$/;"	v	file:
ch48st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch48st[] =$/;"	v	file:
ch48st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch48st0[] =$/;"	v	file:
ch49	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch49 = {66.5295f,1,ch49st};$/;"	v	file:
ch49st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch49st[] =$/;"	v	file:
ch49st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch49st0[] =$/;"	v	file:
ch50	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch50 = {77.6467f,1,ch50st};$/;"	v	file:
ch50st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch50st[] =$/;"	v	file:
ch50st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch50st0[] =$/;"	v	file:
ch51	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch51 = {77.0467f,1,ch51st};$/;"	v	file:
ch51st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch51st[] =$/;"	v	file:
ch51st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch51st0[] =$/;"	v	file:
ch52	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch52 = {80.1686f,2,ch52st};$/;"	v	file:
ch52st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch52st[] =$/;"	v	file:
ch52st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch52st0[] =$/;"	v	file:
ch52st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch52st1[] =$/;"	v	file:
ch53	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch53 = {77.6867f,1,ch53st};$/;"	v	file:
ch53st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch53st[] =$/;"	v	file:
ch53st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch53st0[] =$/;"	v	file:
ch54	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch54 = {73.8048f,1,ch54st};$/;"	v	file:
ch54st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch54st[] =$/;"	v	file:
ch54st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch54st0[] =$/;"	v	file:
ch55	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch55 = {77.2267f,2,ch55st};$/;"	v	file:
ch55st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch55st[] =$/;"	v	file:
ch55st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch55st0[] =$/;"	v	file:
ch55st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch55st1[] =$/;"	v	file:
ch56	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch56 = {77.6667f,1,ch56st};$/;"	v	file:
ch56st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch56st[] =$/;"	v	file:
ch56st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch56st0[] =$/;"	v	file:
ch57	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch57 = {74.0648f,1,ch57st};$/;"	v	file:
ch57st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch57st[] =$/;"	v	file:
ch57st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch57st0[] =$/;"	v	file:
ch58	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch58 = {26.2238f,2,ch58st};$/;"	v	file:
ch58st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch58st[] =$/;"	v	file:
ch58st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch58st0[] =$/;"	v	file:
ch58st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch58st1[] =$/;"	v	file:
ch59	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch59 = {26.3038f,2,ch59st};$/;"	v	file:
ch59st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch59st[] =$/;"	v	file:
ch59st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch59st0[] =$/;"	v	file:
ch59st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch59st1[] =$/;"	v	file:
ch60	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch60 = {81.6105f,1,ch60st};$/;"	v	file:
ch60st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch60st[] =$/;"	v	file:
ch60st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch60st0[] =$/;"	v	file:
ch61	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch61 = {97.2543f,2,ch61st};$/;"	v	file:
ch61st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch61st[] =$/;"	v	file:
ch61st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch61st0[] =$/;"	v	file:
ch61st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch61st1[] =$/;"	v	file:
ch62	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch62 = {81.6105f,1,ch62st};$/;"	v	file:
ch62st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch62st[] =$/;"	v	file:
ch62st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch62st0[] =$/;"	v	file:
ch63	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch63 = {73.9029f,2,ch63st};$/;"	v	file:
ch63st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch63st[] =$/;"	v	file:
ch63st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch63st0[] =$/;"	v	file:
ch63st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch63st1[] =$/;"	v	file:
ch64	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch64 = {74.3648f,2,ch64st};$/;"	v	file:
ch64st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch64st[] =$/;"	v	file:
ch64st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch64st0[] =$/;"	v	file:
ch64st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch64st1[] =$/;"	v	file:
ch65	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch65 = {80.4905f,3,ch65st};$/;"	v	file:
ch65st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch65st[] =$/;"	v	file:
ch65st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch65st0[] =$/;"	v	file:
ch65st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch65st1[] =$/;"	v	file:
ch65st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch65st2[] =$/;"	v	file:
ch66	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch66 = {83.6267f,3,ch66st};$/;"	v	file:
ch66st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch66st[] =$/;"	v	file:
ch66st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch66st0[] =$/;"	v	file:
ch66st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch66st1[] =$/;"	v	file:
ch66st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch66st2[] =$/;"	v	file:
ch67	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch67 = {84.4886f,1,ch67st};$/;"	v	file:
ch67st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch67st[] =$/;"	v	file:
ch67st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch67st0[] =$/;"	v	file:
ch68	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch68 = {85.2867f,2,ch68st};$/;"	v	file:
ch68st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch68st[] =$/;"	v	file:
ch68st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch68st0[] =$/;"	v	file:
ch68st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch68st1[] =$/;"	v	file:
ch69	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch69 = {78.1848f,4,ch69st};$/;"	v	file:
ch69st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch69st[] =$/;"	v	file:
ch69st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch69st0[] =$/;"	v	file:
ch69st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch69st1[] =$/;"	v	file:
ch69st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch69st2[] =$/;"	v	file:
ch69st3	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch69st3[] =$/;"	v	file:
ch70	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch70 = {78.7448f,3,ch70st};$/;"	v	file:
ch70st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch70st[] =$/;"	v	file:
ch70st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch70st0[] =$/;"	v	file:
ch70st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch70st1[] =$/;"	v	file:
ch70st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch70st2[] =$/;"	v	file:
ch71	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch71 = {89.7686f,2,ch71st};$/;"	v	file:
ch71st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch71st[] =$/;"	v	file:
ch71st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch71st0[] =$/;"	v	file:
ch71st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch71st1[] =$/;"	v	file:
ch72	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch72 = {89.0867f,3,ch72st};$/;"	v	file:
ch72st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch72st[] =$/;"	v	file:
ch72st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch72st0[] =$/;"	v	file:
ch72st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch72st1[] =$/;"	v	file:
ch72st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch72st2[] =$/;"	v	file:
ch73	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch73 = {21.3f,1,ch73st};$/;"	v	file:
ch73st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch73st[] =$/;"	v	file:
ch73st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch73st0[] =$/;"	v	file:
ch74	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch74 = {59.999f,1,ch74st};$/;"	v	file:
ch74st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch74st[] =$/;"	v	file:
ch74st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch74st0[] =$/;"	v	file:
ch75	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch75 = {79.3267f,3,ch75st};$/;"	v	file:
ch75st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch75st[] =$/;"	v	file:
ch75st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch75st0[] =$/;"	v	file:
ch75st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch75st1[] =$/;"	v	file:
ch75st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch75st2[] =$/;"	v	file:
ch76	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch76 = {71.3229f,2,ch76st};$/;"	v	file:
ch76st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch76st[] =$/;"	v	file:
ch76st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch76st0[] =$/;"	v	file:
ch76st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch76st1[] =$/;"	v	file:
ch77	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch77 = {97.2105f,4,ch77st};$/;"	v	file:
ch77st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch77st[] =$/;"	v	file:
ch77st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch77st0[] =$/;"	v	file:
ch77st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch77st1[] =$/;"	v	file:
ch77st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch77st2[] =$/;"	v	file:
ch77st3	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch77st3[] =$/;"	v	file:
ch78	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch78 = {88.8067f,3,ch78st};$/;"	v	file:
ch78st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch78st[] =$/;"	v	file:
ch78st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch78st0[] =$/;"	v	file:
ch78st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch78st1[] =$/;"	v	file:
ch78st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch78st2[] =$/;"	v	file:
ch79	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch79 = {88.8305f,1,ch79st};$/;"	v	file:
ch79st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch79st[] =$/;"	v	file:
ch79st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch79st0[] =$/;"	v	file:
ch80	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch80 = {85.6667f,2,ch80st};$/;"	v	file:
ch80st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch80st[] =$/;"	v	file:
ch80st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch80st0[] =$/;"	v	file:
ch80st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch80st1[] =$/;"	v	file:
ch81	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch81 = {88.0905f,2,ch81st};$/;"	v	file:
ch81st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch81st[] =$/;"	v	file:
ch81st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch81st0[] =$/;"	v	file:
ch81st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch81st1[] =$/;"	v	file:
ch82	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch82 = {82.3667f,3,ch82st};$/;"	v	file:
ch82st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch82st[] =$/;"	v	file:
ch82st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch82st0[] =$/;"	v	file:
ch82st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch82st1[] =$/;"	v	file:
ch82st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch82st2[] =$/;"	v	file:
ch83	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch83 = {80.8267f,1,ch83st};$/;"	v	file:
ch83st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch83st[] =$/;"	v	file:
ch83st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch83st0[] =$/;"	v	file:
ch84	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch84 = {71.9467f,2,ch84st};$/;"	v	file:
ch84st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch84st[] =$/;"	v	file:
ch84st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch84st0[] =$/;"	v	file:
ch84st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch84st1[] =$/;"	v	file:
ch85	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch85 = {89.4867f,1,ch85st};$/;"	v	file:
ch85st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch85st[] =$/;"	v	file:
ch85st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch85st0[] =$/;"	v	file:
ch86	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch86 = {81.6105f,2,ch86st};$/;"	v	file:
ch86st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch86st[] =$/;"	v	file:
ch86st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch86st0[] =$/;"	v	file:
ch86st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch86st1[] =$/;"	v	file:
ch87	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch87 = {100.518f,4,ch87st};$/;"	v	file:
ch87st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch87st[] =$/;"	v	file:
ch87st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch87st0[] =$/;"	v	file:
ch87st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch87st1[] =$/;"	v	file:
ch87st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch87st2[] =$/;"	v	file:
ch87st3	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch87st3[] =$/;"	v	file:
ch88	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch88 = {72.3667f,2,ch88st};$/;"	v	file:
ch88st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch88st[] =$/;"	v	file:
ch88st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch88st0[] =$/;"	v	file:
ch88st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch88st1[] =$/;"	v	file:
ch89	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch89 = {79.6505f,2,ch89st};$/;"	v	file:
ch89st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch89st[] =$/;"	v	file:
ch89st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch89st0[] =$/;"	v	file:
ch89st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch89st1[] =$/;"	v	file:
ch90	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch90 = {73.7467f,3,ch90st};$/;"	v	file:
ch90st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch90st[] =$/;"	v	file:
ch90st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch90st0[] =$/;"	v	file:
ch90st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch90st1[] =$/;"	v	file:
ch90st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch90st2[] =$/;"	v	file:
ch91	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch91 = {46.1133f,4,ch91st};$/;"	v	file:
ch91st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch91st[] =$/;"	v	file:
ch91st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch91st0[] =$/;"	v	file:
ch91st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch91st1[] =$/;"	v	file:
ch91st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch91st2[] =$/;"	v	file:
ch91st3	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch91st3[] =$/;"	v	file:
ch92	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch92 = {78.2067f,1,ch92st};$/;"	v	file:
ch92st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch92st[] =$/;"	v	file:
ch92st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch92st0[] =$/;"	v	file:
ch93	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch93 = {46.3933f,4,ch93st};$/;"	v	file:
ch93st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch93st[] =$/;"	v	file:
ch93st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch93st0[] =$/;"	v	file:
ch93st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch93st1[] =$/;"	v	file:
ch93st2	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch93st2[] =$/;"	v	file:
ch93st3	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch93st3[] =$/;"	v	file:
ch94	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch94 = {90.2305f,2,ch94st};$/;"	v	file:
ch94st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch94st[] =$/;"	v	file:
ch94st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch94st0[] =$/;"	v	file:
ch94st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch94st1[] =$/;"	v	file:
ch95	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch95 = {104.062f,1,ch95st};$/;"	v	file:
ch95st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch95st[] =$/;"	v	file:
ch95st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch95st0[] =$/;"	v	file:
ch96	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch96 = {83.5714f,2,ch96st};$/;"	v	file:
ch96st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch96st[] =$/;"	v	file:
ch96st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch96st0[] =$/;"	v	file:
ch96st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch96st1[] =$/;"	v	file:
ch97	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch97 = {66.6029f,2,ch97st};$/;"	v	file:
ch97st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch97st[] =$/;"	v	file:
ch97st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch97st0[] =$/;"	v	file:
ch97st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch97st1[] =$/;"	v	file:
ch98	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch98 = {70.4629f,2,ch98st};$/;"	v	file:
ch98st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch98st[] =$/;"	v	file:
ch98st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch98st0[] =$/;"	v	file:
ch98st1	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch98st1[] =$/;"	v	file:
ch99	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar ch99 = {68.9229f,1,ch99st};$/;"	v	file:
ch99st	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeStrip ch99st[] =$/;"	v	file:
ch99st0	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeVertex ch99st0[] =$/;"	v	file:
chars	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^static const SFG_StrokeChar *chars[] =$/;"	v	file:
fgStrokeRoman	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^const SFG_StrokeFont fgStrokeRoman = {(char*)"Roman",128,152.381f,chars};$/;"	v
freeglut_minimal	trunk/EXTERNAL/freeglut/freeglut_stroke_roman.cpp	/^namespace freeglut_minimal {$/;"	n	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	396;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	399;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	402;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	406;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	408;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	410;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	414;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	417;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	420;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	425;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	428;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	431;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	435;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	103;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	117;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	124;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	132;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	144;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	147;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	14;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	150;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	153;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	168;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	182;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	192;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	210;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	219;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	222;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	237;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	244;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	262;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	265;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	268;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	37;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	45;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	51;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	57;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	66;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	75;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	96;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	105;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	112;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	133;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	139;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	157;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	172;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	183;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	194;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	213;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	225;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	230;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	239;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	247;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	252;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	38;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	53;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	59;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	68;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	78;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	83;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	91;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	106;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	113;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	120;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	134;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	158;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	173;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	185;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	195;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	20;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	214;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	226;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	231;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	240;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	248;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	253;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	39;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	47;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	54;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	60;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	69;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	79;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	84;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	92;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	99;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	100;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	107;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	114;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	121;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	128;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	141;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	159;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	174;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	188;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	199;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	215;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	227;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	22;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	232;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	241;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	249;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	24;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	254;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	41;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	48;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	62;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	71;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	80;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	93;"	d	file:
COMPILER_VERSION_TWEAK	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	165;"	d	file:
COMPILER_VERSION_TWEAK	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	206;"	d	file:
COMPILER_VERSION_TWEAK	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
DEC	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	439;"	d	file:
HEX	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	450;"	d	file:
ID_VOID_MAIN	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	293;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	296;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	299;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	302;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	305;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	308;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	311;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	314;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	317;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	320;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	323;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	326;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	329;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	332;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	335;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	338;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	341;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	344;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	347;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	350;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	353;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	356;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	359;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	362;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	365;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	369;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	372;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	375;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	378;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	381;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	385;"	d	file:
SIMULATE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
SIMULATE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	16;"	d	file:
SIMULATE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
SIMULATE_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	162;"	d	file:
SIMULATE_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	177;"	d	file:
SIMULATE_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
SIMULATE_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	163;"	d	file:
SIMULATE_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	178;"	d	file:
SIMULATE_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	33;"	d	file:
STRINGIFY	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	289;"	d	file:
STRINGIFY_HELPER	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	288;"	d	file:
info_arch	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_version	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
main	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f
main	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
qnxnto	trunk/build/CMakeFiles/3.5.0/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	391;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	394;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	397;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	401;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	403;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	405;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	409;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	412;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	415;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	420;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	423;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	426;"	d	file:
ARCHITECTURE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	430;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	101;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	108;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	115;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	13;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	142;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	212;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	221;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	224;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	239;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	257;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	260;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	263;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	42;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	62;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	94;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	130;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	138;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	174;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	185;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	215;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	227;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	242;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	43;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
COMPILER_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	96;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	118;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	139;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	16;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	197;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	216;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	228;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	233;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	243;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	248;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	25;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	52;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	74;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	105;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	176;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	201;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	204;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	234;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	249;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_PATCH	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_TWEAK	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
COMPILER_VERSION_TWEAK	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
COMPILER_VERSION_TWEAK	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
DEC	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	434;"	d	file:
HEX	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	445;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	288;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	291;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	294;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	297;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	300;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	303;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	306;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	309;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	312;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	315;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	318;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	321;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	324;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	327;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	330;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	333;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	336;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	339;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	342;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	345;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	348;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	351;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	354;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	357;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	360;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	364;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	367;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	370;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	373;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	376;"	d	file:
PLATFORM_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	380;"	d	file:
SIMULATE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
SIMULATE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	172;"	d	file:
SIMULATE_ID	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
SIMULATE_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
SIMULATE_VERSION_MAJOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	37;"	d	file:
SIMULATE_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	165;"	d	file:
SIMULATE_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	180;"	d	file:
SIMULATE_VERSION_MINOR	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
STRINGIFY	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	284;"	d	file:
STRINGIFY_HELPER	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	283;"	d	file:
info_arch	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
main	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
qnxnto	trunk/build/CMakeFiles/3.5.0/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
features	trunk/build/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v
main	trunk/build/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
features	trunk/build/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v
main	trunk/build/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
CMAKE_BINARY_DIR	trunk/build/EXTERNAL/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/EXTERNAL/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/EXTERNAL/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/EXTERNAL/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/EXTERNAL/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/EXTERNAL/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/EXTERNAL/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/EXTERNAL/csparse/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/EXTERNAL/csparse/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/EXTERNAL/csparse/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/EXTERNAL/csparse/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/EXTERNAL/csparse/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/EXTERNAL/csparse/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/EXTERNAL/csparse/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/EXTERNAL/freeglut/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/EXTERNAL/freeglut/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/EXTERNAL/freeglut/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/EXTERNAL/freeglut/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/EXTERNAL/freeglut/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/EXTERNAL/freeglut/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/EXTERNAL/freeglut/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/apps/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/apps/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/apps/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/apps/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/apps/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/apps/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/apps/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/apps/g2o_cli/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/apps/g2o_cli/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/apps/g2o_cli/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/apps/g2o_cli/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/apps/g2o_cli/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/apps/g2o_cli/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/apps/g2o_cli/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/apps/g2o_simulator/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/apps/g2o_simulator/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/apps/g2o_simulator/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/apps/g2o_simulator/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/apps/g2o_simulator/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/apps/g2o_simulator/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/apps/g2o_simulator/Makefile	/^SUFFIXES =$/;"	m
G2O_CONFIG_H	trunk/build/g2o/config.h	2;"	d
G2O_CXX_COMPILER	trunk/build/g2o/config.h	14;"	d
G2O_HAVE_CSPARSE	trunk/build/g2o/config.h	12;"	d
G2O_HAVE_OPENGL	trunk/build/g2o/config.h	4;"	d
G2O_LGPL_SHARED_LIBS	trunk/build/g2o/config.h	8;"	d
G2O_OPENGL_FOUND	trunk/build/g2o/config.h	5;"	d
G2O_SHARED_LIBS	trunk/build/g2o/config.h	7;"	d
CMAKE_BINARY_DIR	trunk/build/g2o/core/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/core/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/core/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/core/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/core/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/core/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/core/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/examples/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/examples/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/examples/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/examples/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/examples/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/examples/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/examples/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/examples/bal/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/examples/bal/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/examples/bal/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/examples/bal/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/examples/bal/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/examples/bal/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/examples/bal/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/examples/calibration_odom_laser/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/examples/calibration_odom_laser/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/examples/calibration_odom_laser/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/examples/calibration_odom_laser/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/examples/calibration_odom_laser/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/examples/calibration_odom_laser/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/examples/calibration_odom_laser/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/examples/data_convert/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/examples/data_convert/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/examples/data_convert/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/examples/data_convert/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/examples/data_convert/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/examples/data_convert/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/examples/data_convert/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/examples/data_fitting/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/examples/data_fitting/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/examples/data_fitting/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/examples/data_fitting/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/examples/data_fitting/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/examples/data_fitting/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/examples/data_fitting/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/examples/icp/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/examples/icp/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/examples/icp/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/examples/icp/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/examples/icp/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/examples/icp/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/examples/icp/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/examples/interactive_slam/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/examples/interactive_slam/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/examples/interactive_slam/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/examples/interactive_slam/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/examples/interactive_slam/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/examples/interactive_slam/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/examples/interactive_slam/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/examples/interactive_slam/slam_parser/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/examples/interactive_slam/slam_parser/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/examples/interactive_slam/slam_parser/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/examples/interactive_slam/slam_parser/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/examples/interactive_slam/slam_parser/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/examples/interactive_slam/slam_parser/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/examples/interactive_slam/slam_parser/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/examples/interactive_slam/slam_parser/interface/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/examples/interactive_slam/slam_parser/interface/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/examples/interactive_slam/slam_parser/interface/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/examples/interactive_slam/slam_parser/interface/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/examples/interactive_slam/slam_parser/interface/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/examples/interactive_slam/slam_parser/interface/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/examples/interactive_slam/slam_parser/interface/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/examples/interactive_slam/slam_parser/parser/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/examples/interactive_slam/slam_parser/parser/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/examples/interactive_slam/slam_parser/parser/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/examples/interactive_slam/slam_parser/parser/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/examples/interactive_slam/slam_parser/parser/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/examples/interactive_slam/slam_parser/parser/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/examples/interactive_slam/slam_parser/parser/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/examples/sba/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/examples/sba/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/examples/sba/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/examples/sba/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/examples/sba/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/examples/sba/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/examples/sba/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/examples/simple_optimize/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/examples/simple_optimize/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/examples/simple_optimize/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/examples/simple_optimize/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/examples/simple_optimize/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/examples/simple_optimize/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/examples/simple_optimize/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/examples/sphere/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/examples/sphere/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/examples/sphere/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/examples/sphere/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/examples/sphere/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/examples/sphere/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/examples/sphere/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/examples/tutorial_slam2d/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/examples/tutorial_slam2d/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/examples/tutorial_slam2d/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/examples/tutorial_slam2d/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/examples/tutorial_slam2d/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/examples/tutorial_slam2d/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/examples/tutorial_slam2d/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/solvers/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/solvers/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/solvers/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/solvers/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/solvers/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/solvers/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/solvers/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/solvers/csparse/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/solvers/csparse/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/solvers/csparse/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/solvers/csparse/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/solvers/csparse/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/solvers/csparse/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/solvers/csparse/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/solvers/dense/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/solvers/dense/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/solvers/dense/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/solvers/dense/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/solvers/dense/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/solvers/dense/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/solvers/dense/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/solvers/pcg/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/solvers/pcg/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/solvers/pcg/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/solvers/pcg/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/solvers/pcg/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/solvers/pcg/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/solvers/pcg/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/solvers/slam2d_linear/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/solvers/slam2d_linear/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/solvers/slam2d_linear/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/solvers/slam2d_linear/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/solvers/slam2d_linear/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/solvers/slam2d_linear/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/solvers/slam2d_linear/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/solvers/structure_only/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/solvers/structure_only/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/solvers/structure_only/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/solvers/structure_only/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/solvers/structure_only/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/solvers/structure_only/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/solvers/structure_only/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/stuff/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/stuff/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/stuff/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/stuff/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/stuff/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/stuff/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/stuff/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/types/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/types/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/types/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/types/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/types/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/types/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/types/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/types/data/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/types/data/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/types/data/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/types/data/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/types/data/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/types/data/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/types/data/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/types/icp/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/types/icp/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/types/icp/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/types/icp/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/types/icp/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/types/icp/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/types/icp/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/types/sba/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/types/sba/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/types/sba/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/types/sba/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/types/sba/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/types/sba/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/types/sba/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/types/sclam2d/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/types/sclam2d/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/types/sclam2d/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/types/sclam2d/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/types/sclam2d/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/types/sclam2d/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/types/sclam2d/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/types/sim3/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/types/sim3/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/types/sim3/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/types/sim3/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/types/sim3/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/types/sim3/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/types/sim3/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/types/slam2d/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/types/slam2d/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/types/slam2d/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/types/slam2d/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/types/slam2d/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/types/slam2d/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/types/slam2d/Makefile	/^SUFFIXES =$/;"	m
CMAKE_BINARY_DIR	trunk/build/g2o/types/slam3d/Makefile	/^CMAKE_BINARY_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk\/build$/;"	m
CMAKE_COMMAND	trunk/build/g2o/types/slam3d/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	trunk/build/g2o/types/slam3d/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/Jason\/project\/slam\/slam\/G2O\/trunk$/;"	m
EQUALS	trunk/build/g2o/types/slam3d/Makefile	/^EQUALS = =$/;"	m
RM	trunk/build/g2o/types/slam3d/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.5.0\/bin\/cmake -E remove -f$/;"	m
SHELL	trunk/build/g2o/types/slam3d/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	trunk/build/g2o/types/slam3d/Makefile	/^SUFFIXES =$/;"	m
DlWrapper	trunk/g2o/apps/g2o_cli/dl_wrapper.cpp	/^DlWrapper::DlWrapper()$/;"	f	class:g2o::DlWrapper
SO_EXT	trunk/g2o/apps/g2o_cli/dl_wrapper.cpp	42;"	d	file:
SO_EXT	trunk/g2o/apps/g2o_cli/dl_wrapper.cpp	45;"	d	file:
SO_EXT	trunk/g2o/apps/g2o_cli/dl_wrapper.cpp	48;"	d	file:
SO_EXT_LEN	trunk/g2o/apps/g2o_cli/dl_wrapper.cpp	43;"	d	file:
SO_EXT_LEN	trunk/g2o/apps/g2o_cli/dl_wrapper.cpp	46;"	d	file:
SO_EXT_LEN	trunk/g2o/apps/g2o_cli/dl_wrapper.cpp	49;"	d	file:
clear	trunk/g2o/apps/g2o_cli/dl_wrapper.cpp	/^void DlWrapper::clear()$/;"	f	class:g2o::DlWrapper
g2o	trunk/g2o/apps/g2o_cli/dl_wrapper.cpp	/^namespace g2o {$/;"	n	file:
openLibraries	trunk/g2o/apps/g2o_cli/dl_wrapper.cpp	/^int DlWrapper::openLibraries(const std::string& directory, const std::string& pattern)$/;"	f	class:g2o::DlWrapper
openLibrary	trunk/g2o/apps/g2o_cli/dl_wrapper.cpp	/^bool DlWrapper::openLibrary(const std::string& filename)$/;"	f	class:g2o::DlWrapper
~DlWrapper	trunk/g2o/apps/g2o_cli/dl_wrapper.cpp	/^DlWrapper::~DlWrapper()$/;"	f	class:g2o::DlWrapper
DlWrapper	trunk/g2o/apps/g2o_cli/dl_wrapper.h	/^  class G2O_CLI_API DlWrapper$/;"	c	namespace:g2o
G2O_DL_WRAPPER_H	trunk/g2o/apps/g2o_cli/dl_wrapper.h	28;"	d
_filenames	trunk/g2o/apps/g2o_cli/dl_wrapper.h	/^      std::vector<std::string> _filenames;$/;"	m	class:g2o::DlWrapper
_handles	trunk/g2o/apps/g2o_cli/dl_wrapper.h	/^      std::vector<HMODULE> _handles;$/;"	m	class:g2o::DlWrapper
_handles	trunk/g2o/apps/g2o_cli/dl_wrapper.h	/^      std::vector<void*> _handles;$/;"	m	class:g2o::DlWrapper
g2o	trunk/g2o/apps/g2o_cli/dl_wrapper.h	/^namespace g2o {$/;"	n
IncrementalEdgesCompare	trunk/g2o/apps/g2o_cli/g2o.cpp	/^struct IncrementalEdgesCompare {$/;"	s	file:
hasToStop	trunk/g2o/apps/g2o_cli/g2o.cpp	/^static bool hasToStop=false;$/;"	v	file:
main	trunk/g2o/apps/g2o_cli/g2o.cpp	/^int main(int argc, char** argv)$/;"	f
operator ()	trunk/g2o/apps/g2o_cli/g2o.cpp	/^  bool operator()(SparseOptimizer::Edge* const & e1, SparseOptimizer::Edge* const & e2)$/;"	f	struct:IncrementalEdgesCompare
sigquit_handler	trunk/g2o/apps/g2o_cli/g2o.cpp	/^void sigquit_handler(int sig)$/;"	f
G2O_CLI_API	trunk/g2o/apps/g2o_cli/g2o_cli_api.h	19;"	d
G2O_CLI_API	trunk/g2o/apps/g2o_cli/g2o_cli_api.h	21;"	d
G2O_CLI_API	trunk/g2o/apps/g2o_cli/g2o_cli_api.h	24;"	d
G2O_CLI_API	trunk/g2o/apps/g2o_cli/g2o_cli_api.h	29;"	d
G2O_CLI_API_H	trunk/g2o/apps/g2o_cli/g2o_cli_api.h	11;"	d
G2O_LIBRARY_POSTFIX	trunk/g2o/apps/g2o_cli/g2o_common.cpp	78;"	d	file:
PATH_SEPARATOR	trunk/g2o/apps/g2o_cli/g2o_common.cpp	59;"	d	file:
PATH_SEPARATOR	trunk/g2o/apps/g2o_cli/g2o_common.cpp	61;"	d	file:
SOLVERS_PATTERN	trunk/g2o/apps/g2o_cli/g2o_common.cpp	/^static const string SOLVERS_PATTERN=string("*_solver_*")+string(G2O_LIBRARY_POSTFIX)+string(".")+string(SO_EXT);$/;"	v	file:
SO_EXT	trunk/g2o/apps/g2o_cli/g2o_common.cpp	42;"	d	file:
SO_EXT	trunk/g2o/apps/g2o_cli/g2o_common.cpp	44;"	d	file:
SO_EXT	trunk/g2o/apps/g2o_cli/g2o_common.cpp	46;"	d	file:
TYPES_PATTERN	trunk/g2o/apps/g2o_cli/g2o_common.cpp	/^static const string TYPES_PATTERN=string("*_types_*")+string(G2O_LIBRARY_POSTFIX)+string(".")+string(SO_EXT);$/;"	v	file:
_GNU_SOURCE	trunk/g2o/apps/g2o_cli/g2o_common.cpp	54;"	d	file:
fakeFunctionForWindows	trunk/g2o/apps/g2o_cli/g2o_common.cpp	/^static void fakeFunctionForWindows() {}$/;"	f	file:
findArguments	trunk/g2o/apps/g2o_cli/g2o_common.cpp	/^void findArguments(const std::string& option, vector<string>& args, int argc, char** argv)$/;"	f	namespace:g2o
g2o	trunk/g2o/apps/g2o_cli/g2o_common.cpp	/^namespace g2o {$/;"	n	file:
getMyInstance	trunk/g2o/apps/g2o_cli/g2o_common.cpp	/^HMODULE getMyInstance()$/;"	f
info	trunk/g2o/apps/g2o_cli/g2o_common.cpp	/^   static Dl_info info;$/;"	v	file:
loadStandardSolver	trunk/g2o/apps/g2o_cli/g2o_common.cpp	/^void loadStandardSolver(DlWrapper& dlSolverWrapper, int argc, char** argv)$/;"	f	namespace:g2o
loadStandardTypes	trunk/g2o/apps/g2o_cli/g2o_common.cpp	/^void loadStandardTypes(DlWrapper& dlTypesWrapper, int argc, char** argv)$/;"	f	namespace:g2o
G2O_COMMON_H	trunk/g2o/apps/g2o_cli/g2o_common.h	28;"	d
g2o	trunk/g2o/apps/g2o_cli/g2o_common.h	/^namespace g2o {$/;"	n
dumpEdges	trunk/g2o/apps/g2o_cli/output_helper.cpp	/^bool dumpEdges(std::ostream& os, const OptimizableGraph& optimizer)$/;"	f	namespace:g2o
edgeAllVertsSameDim	trunk/g2o/apps/g2o_cli/output_helper.cpp	/^bool edgeAllVertsSameDim(OptimizableGraph::Edge* e, int dim)$/;"	f	namespace:g2o
g2o	trunk/g2o/apps/g2o_cli/output_helper.cpp	/^namespace g2o {$/;"	n	file:
saveGnuplot	trunk/g2o/apps/g2o_cli/output_helper.cpp	/^bool saveGnuplot(const std::string& gnudump, const HyperGraph::VertexSet& vertices, const HyperGraph::EdgeSet& edges)$/;"	f	namespace:g2o
saveGnuplot	trunk/g2o/apps/g2o_cli/output_helper.cpp	/^bool saveGnuplot(const std::string& gnudump, const OptimizableGraph& optimizer)$/;"	f	namespace:g2o
G2O_OUTPUT_HELPER_H	trunk/g2o/apps/g2o_cli/output_helper.h	28;"	d
g2o	trunk/g2o/apps/g2o_cli/output_helper.h	/^namespace g2o {$/;"	n
IncrementalEdgesCompare	trunk/g2o/apps/g2o_simulator/converteSegmentLine.cpp	/^struct IncrementalEdgesCompare {$/;"	s	file:
LineInfo	trunk/g2o/apps/g2o_simulator/converteSegmentLine.cpp	/^  LineInfo(VertexSegment2D* s) {$/;"	f	struct:LineInfo
LineInfo	trunk/g2o/apps/g2o_simulator/converteSegmentLine.cpp	/^struct LineInfo {$/;"	s	file:
LineInfoMap	trunk/g2o/apps/g2o_simulator/converteSegmentLine.cpp	/^typedef std::map<int, LineInfo> LineInfoMap;$/;"	t	file:
hasToStop	trunk/g2o/apps/g2o_simulator/converteSegmentLine.cpp	/^static bool hasToStop=false;$/;"	v	file:
line	trunk/g2o/apps/g2o_simulator/converteSegmentLine.cpp	/^  VertexLine2D* line;$/;"	m	struct:LineInfo	file:
main	trunk/g2o/apps/g2o_simulator/converteSegmentLine.cpp	/^int main(int argc, char** argv)$/;"	f
operator ()	trunk/g2o/apps/g2o_simulator/converteSegmentLine.cpp	/^  bool operator()(SparseOptimizer::Edge* const & e1, SparseOptimizer::Edge* const & e2)$/;"	f	struct:IncrementalEdgesCompare
p1	trunk/g2o/apps/g2o_simulator/converteSegmentLine.cpp	/^  VertexPointXY* p1;$/;"	m	struct:LineInfo	file:
p2	trunk/g2o/apps/g2o_simulator/converteSegmentLine.cpp	/^  VertexPointXY* p2;$/;"	m	struct:LineInfo	file:
sigquit_handler	trunk/g2o/apps/g2o_simulator/converteSegmentLine.cpp	/^void sigquit_handler(int sig)$/;"	f
G2O_SIMULATOR_API	trunk/g2o/apps/g2o_simulator/g2o_simulator_api.h	19;"	d
G2O_SIMULATOR_API	trunk/g2o/apps/g2o_simulator/g2o_simulator_api.h	21;"	d
G2O_SIMULATOR_API	trunk/g2o/apps/g2o_simulator/g2o_simulator_api.h	24;"	d
G2O_SIMULATOR_API	trunk/g2o/apps/g2o_simulator/g2o_simulator_api.h	29;"	d
G2O_SIMULATOR_API_H	trunk/g2o/apps/g2o_simulator/g2o_simulator_api.h	11;"	d
PointSensorParameters	trunk/g2o/apps/g2o_simulator/pointsensorparameters.cpp	/^  PointSensorParameters::PointSensorParameters(){$/;"	f	class:g2o::PointSensorParameters
g2o	trunk/g2o/apps/g2o_simulator/pointsensorparameters.cpp	/^namespace g2o {$/;"	n	file:
G2O_POINTSENSORPARAMETERS_H_	trunk/g2o/apps/g2o_simulator/pointsensorparameters.h	28;"	d
PointSensorParameters	trunk/g2o/apps/g2o_simulator/pointsensorparameters.h	/^  class G2O_SIMULATOR_API PointSensorParameters{$/;"	c	namespace:g2o
_fov	trunk/g2o/apps/g2o_simulator/pointsensorparameters.h	/^    double _maxRange2, _minRange2, _fov,  _maxAngularDifference;$/;"	m	class:g2o::PointSensorParameters
_maxAngularDifference	trunk/g2o/apps/g2o_simulator/pointsensorparameters.h	/^    double _maxRange2, _minRange2, _fov,  _maxAngularDifference;$/;"	m	class:g2o::PointSensorParameters
_maxRange2	trunk/g2o/apps/g2o_simulator/pointsensorparameters.h	/^    double _maxRange2, _minRange2, _fov,  _maxAngularDifference;$/;"	m	class:g2o::PointSensorParameters
_minRange2	trunk/g2o/apps/g2o_simulator/pointsensorparameters.h	/^    double _maxRange2, _minRange2, _fov,  _maxAngularDifference;$/;"	m	class:g2o::PointSensorParameters
fov	trunk/g2o/apps/g2o_simulator/pointsensorparameters.h	/^    double fov() const {return _fov;}$/;"	f	class:g2o::PointSensorParameters
g2o	trunk/g2o/apps/g2o_simulator/pointsensorparameters.h	/^namespace g2o {$/;"	n
maxAngularDifference	trunk/g2o/apps/g2o_simulator/pointsensorparameters.h	/^    double maxAngularDifference() const { return _maxAngularDifference; }$/;"	f	class:g2o::PointSensorParameters
maxRange	trunk/g2o/apps/g2o_simulator/pointsensorparameters.h	/^    double maxRange() const {return sqrt(_maxRange2);}$/;"	f	class:g2o::PointSensorParameters
minRange	trunk/g2o/apps/g2o_simulator/pointsensorparameters.h	/^    double minRange() const {return sqrt(_minRange2);}$/;"	f	class:g2o::PointSensorParameters
setFov	trunk/g2o/apps/g2o_simulator/pointsensorparameters.h	/^    void setFov(double fov_)  {_fov = fov_;}$/;"	f	class:g2o::PointSensorParameters
setMaxAngularDifference	trunk/g2o/apps/g2o_simulator/pointsensorparameters.h	/^    void setMaxAngularDifference(double angularDifference) {_maxAngularDifference = angularDifference;}$/;"	f	class:g2o::PointSensorParameters
setMaxRange	trunk/g2o/apps/g2o_simulator/pointsensorparameters.h	/^    void setMaxRange(double maxRange_)  {_maxRange2 = maxRange_*maxRange_;}$/;"	f	class:g2o::PointSensorParameters
setMinRange	trunk/g2o/apps/g2o_simulator/pointsensorparameters.h	/^    void setMinRange(double minRange_)  {_minRange2 = minRange_*minRange_;}$/;"	f	class:g2o::PointSensorParameters
G2O_ODOMETRY_SENSOR_	trunk/g2o/apps/g2o_simulator/sensor_odometry.h	28;"	d
SensorOdometry	trunk/g2o/apps/g2o_simulator/sensor_odometry.h	/^  SensorOdometry(const std::string name_): BinarySensor<R, E, O> (name_){};$/;"	f	class:g2o::SensorOdometry
SensorOdometry	trunk/g2o/apps/g2o_simulator/sensor_odometry.h	/^  class SensorOdometry: public BinarySensor<R, E, O > {$/;"	c	namespace:g2o
g2o	trunk/g2o/apps/g2o_simulator/sensor_odometry.h	/^namespace g2o {$/;"	n
sense	trunk/g2o/apps/g2o_simulator/sensor_odometry.h	/^    virtual void sense(){$/;"	f	class:g2o::SensorOdometry
SensorOdometry2D	trunk/g2o/apps/g2o_simulator/sensor_odometry2d.cpp	/^  SensorOdometry2D::SensorOdometry2D(const std::string& name_):$/;"	f	class:g2o::SensorOdometry2D
addNoise	trunk/g2o/apps/g2o_simulator/sensor_odometry2d.cpp	/^  void SensorOdometry2D::addNoise(EdgeType* e){$/;"	f	class:g2o::SensorOdometry2D
g2o	trunk/g2o/apps/g2o_simulator/sensor_odometry2d.cpp	/^namespace g2o {$/;"	n	file:
sense	trunk/g2o/apps/g2o_simulator/sensor_odometry2d.cpp	/^  void SensorOdometry2D::sense(){$/;"	f	class:g2o::SensorOdometry2D
G2O_SENSOR_ODOMETRY2D_H_	trunk/g2o/apps/g2o_simulator/sensor_odometry2d.h	28;"	d
PoseObject	trunk/g2o/apps/g2o_simulator/sensor_odometry2d.h	/^    typedef Robot2D::PoseObject PoseObject;$/;"	t	class:g2o::SensorOdometry2D
SensorOdometry2D	trunk/g2o/apps/g2o_simulator/sensor_odometry2d.h	/^  class G2O_SIMULATOR_API SensorOdometry2D: public BinarySensor<Robot2D, EdgeSE2, WorldObjectSE2 > {$/;"	c	namespace:g2o
g2o	trunk/g2o/apps/g2o_simulator/sensor_odometry2d.h	/^namespace g2o {$/;"	n
SensorOdometry3D	trunk/g2o/apps/g2o_simulator/sensor_odometry3d.cpp	/^  SensorOdometry3D::SensorOdometry3D(const std::string& name_):$/;"	f	class:g2o::SensorOdometry3D
addNoise	trunk/g2o/apps/g2o_simulator/sensor_odometry3d.cpp	/^  void SensorOdometry3D::addNoise(EdgeType* e){$/;"	f	class:g2o::SensorOdometry3D
g2o	trunk/g2o/apps/g2o_simulator/sensor_odometry3d.cpp	/^namespace g2o {$/;"	n	file:
sense	trunk/g2o/apps/g2o_simulator/sensor_odometry3d.cpp	/^  void SensorOdometry3D::sense(){$/;"	f	class:g2o::SensorOdometry3D
G2O_SENSOR_ODOMETRY3D_H_	trunk/g2o/apps/g2o_simulator/sensor_odometry3d.h	28;"	d
SensorOdometry3D	trunk/g2o/apps/g2o_simulator/sensor_odometry3d.h	/^  class G2O_SIMULATOR_API SensorOdometry3D: public BinarySensor<Robot3D, EdgeSE3, WorldObjectSE3 > {$/;"	c	namespace:g2o
g2o	trunk/g2o/apps/g2o_simulator/sensor_odometry3d.h	/^namespace g2o {$/;"	n
SensorPointXY	trunk/g2o/apps/g2o_simulator/sensor_pointxy.cpp	/^  SensorPointXY::SensorPointXY(const std::string& name_): BinarySensor<Robot2D, EdgeSE2PointXY, WorldObjectPointXY>(name_) {}$/;"	f	class:g2o::SensorPointXY
addNoise	trunk/g2o/apps/g2o_simulator/sensor_pointxy.cpp	/^  void SensorPointXY::addNoise(EdgeType* e){$/;"	f	class:g2o::SensorPointXY
g2o	trunk/g2o/apps/g2o_simulator/sensor_pointxy.cpp	/^namespace g2o{$/;"	n	file:
isVisible	trunk/g2o/apps/g2o_simulator/sensor_pointxy.cpp	/^  bool SensorPointXY::isVisible(SensorPointXY::WorldObjectType* to){$/;"	f	class:g2o::SensorPointXY
sense	trunk/g2o/apps/g2o_simulator/sensor_pointxy.cpp	/^  void SensorPointXY::sense() {$/;"	f	class:g2o::SensorPointXY
G2O_SENSOR_POINTXY_H_	trunk/g2o/apps/g2o_simulator/sensor_pointxy.h	28;"	d
SensorPointXY	trunk/g2o/apps/g2o_simulator/sensor_pointxy.h	/^  class G2O_SIMULATOR_API SensorPointXY: public PointSensorParameters, public BinarySensor<Robot2D, EdgeSE2PointXY, WorldObjectPointXY>{ $/;"	c	namespace:g2o
g2o	trunk/g2o/apps/g2o_simulator/sensor_pointxy.h	/^namespace g2o {$/;"	n
SensorPointXYBearing	trunk/g2o/apps/g2o_simulator/sensor_pointxy_bearing.cpp	/^  SensorPointXYBearing::SensorPointXYBearing(const std::string& name_): BinarySensor<Robot2D, EdgeSE2PointXYBearing, WorldObjectPointXY>(name_) {$/;"	f	class:g2o::SensorPointXYBearing
addNoise	trunk/g2o/apps/g2o_simulator/sensor_pointxy_bearing.cpp	/^  void SensorPointXYBearing::addNoise(EdgeType* e){$/;"	f	class:g2o::SensorPointXYBearing
g2o	trunk/g2o/apps/g2o_simulator/sensor_pointxy_bearing.cpp	/^namespace g2o {$/;"	n	file:
isVisible	trunk/g2o/apps/g2o_simulator/sensor_pointxy_bearing.cpp	/^  bool SensorPointXYBearing::isVisible(SensorPointXYBearing::WorldObjectType* to){$/;"	f	class:g2o::SensorPointXYBearing
sense	trunk/g2o/apps/g2o_simulator/sensor_pointxy_bearing.cpp	/^  void SensorPointXYBearing::sense() {$/;"	f	class:g2o::SensorPointXYBearing
G2O_SENSOR_POINTXY_BEARING_H_	trunk/g2o/apps/g2o_simulator/sensor_pointxy_bearing.h	28;"	d
SensorPointXYBearing	trunk/g2o/apps/g2o_simulator/sensor_pointxy_bearing.h	/^  class G2O_SIMULATOR_API SensorPointXYBearing: public PointSensorParameters, public BinarySensor<Robot2D, EdgeSE2PointXYBearing, WorldObjectPointXY>{ $/;"	c	namespace:g2o
g2o	trunk/g2o/apps/g2o_simulator/sensor_pointxy_bearing.h	/^namespace g2o {$/;"	n
SensorPointXYOffset	trunk/g2o/apps/g2o_simulator/sensor_pointxy_offset.cpp	/^  SensorPointXYOffset::SensorPointXYOffset(const std::string& name_): BinarySensor<Robot2D, EdgeSE2PointXYOffset, WorldObjectPointXY>(name_) {$/;"	f	class:g2o::SensorPointXYOffset
addNoise	trunk/g2o/apps/g2o_simulator/sensor_pointxy_offset.cpp	/^  void SensorPointXYOffset::addNoise(EdgeType* e){$/;"	f	class:g2o::SensorPointXYOffset
addParameters	trunk/g2o/apps/g2o_simulator/sensor_pointxy_offset.cpp	/^  void SensorPointXYOffset::addParameters(){$/;"	f	class:g2o::SensorPointXYOffset
g2o	trunk/g2o/apps/g2o_simulator/sensor_pointxy_offset.cpp	/^namespace g2o {$/;"	n	file:
isVisible	trunk/g2o/apps/g2o_simulator/sensor_pointxy_offset.cpp	/^  bool SensorPointXYOffset::isVisible(SensorPointXYOffset::WorldObjectType* to){$/;"	f	class:g2o::SensorPointXYOffset
sense	trunk/g2o/apps/g2o_simulator/sensor_pointxy_offset.cpp	/^  void SensorPointXYOffset::sense() {$/;"	f	class:g2o::SensorPointXYOffset
G2O_SENSOR_POINTXY_OFFSET_H_	trunk/g2o/apps/g2o_simulator/sensor_pointxy_offset.h	28;"	d
RobotPoseType	trunk/g2o/apps/g2o_simulator/sensor_pointxy_offset.h	/^    typedef PoseVertexType::EstimateType RobotPoseType;$/;"	t	class:g2o::SensorPointXYOffset
SensorPointXYOffset	trunk/g2o/apps/g2o_simulator/sensor_pointxy_offset.h	/^  class G2O_SIMULATOR_API SensorPointXYOffset: public PointSensorParameters, public BinarySensor<Robot2D, EdgeSE2PointXYOffset, WorldObjectPointXY>{ $/;"	c	namespace:g2o
_offsetParam	trunk/g2o/apps/g2o_simulator/sensor_pointxy_offset.h	/^    ParameterSE2Offset* _offsetParam;$/;"	m	class:g2o::SensorPointXYOffset
_sensorPose	trunk/g2o/apps/g2o_simulator/sensor_pointxy_offset.h	/^    RobotPoseType _sensorPose;$/;"	m	class:g2o::SensorPointXYOffset
g2o	trunk/g2o/apps/g2o_simulator/sensor_pointxy_offset.h	/^namespace g2o {$/;"	n
SensorPointXYZ	trunk/g2o/apps/g2o_simulator/sensor_pointxyz.cpp	/^  SensorPointXYZ::SensorPointXYZ(const std::string& name_): BinarySensor<Robot3D, EdgeSE3PointXYZ, WorldObjectTrackXYZ>(name_) {$/;"	f	class:g2o::SensorPointXYZ
addNoise	trunk/g2o/apps/g2o_simulator/sensor_pointxyz.cpp	/^  void SensorPointXYZ::addNoise(EdgeType* e){$/;"	f	class:g2o::SensorPointXYZ
addParameters	trunk/g2o/apps/g2o_simulator/sensor_pointxyz.cpp	/^  void SensorPointXYZ::addParameters(){$/;"	f	class:g2o::SensorPointXYZ
g2o	trunk/g2o/apps/g2o_simulator/sensor_pointxyz.cpp	/^namespace g2o {$/;"	n	file:
isVisible	trunk/g2o/apps/g2o_simulator/sensor_pointxyz.cpp	/^  bool SensorPointXYZ::isVisible(SensorPointXYZ::WorldObjectType* to){$/;"	f	class:g2o::SensorPointXYZ
sense	trunk/g2o/apps/g2o_simulator/sensor_pointxyz.cpp	/^  void SensorPointXYZ::sense() {$/;"	f	class:g2o::SensorPointXYZ
G2O_SENSOR_POINTXYZ_H_	trunk/g2o/apps/g2o_simulator/sensor_pointxyz.h	28;"	d
RobotPoseType	trunk/g2o/apps/g2o_simulator/sensor_pointxyz.h	/^    typedef PoseVertexType::EstimateType RobotPoseType;$/;"	t	class:g2o::SensorPointXYZ
SensorPointXYZ	trunk/g2o/apps/g2o_simulator/sensor_pointxyz.h	/^  class G2O_SIMULATOR_API SensorPointXYZ: public PointSensorParameters, public BinarySensor<Robot3D, EdgeSE3PointXYZ, WorldObjectTrackXYZ>{$/;"	c	namespace:g2o
_offsetParam	trunk/g2o/apps/g2o_simulator/sensor_pointxyz.h	/^    ParameterSE3Offset* _offsetParam;$/;"	m	class:g2o::SensorPointXYZ
_sensorPose	trunk/g2o/apps/g2o_simulator/sensor_pointxyz.h	/^    RobotPoseType _sensorPose;$/;"	m	class:g2o::SensorPointXYZ
g2o	trunk/g2o/apps/g2o_simulator/sensor_pointxyz.h	/^namespace g2o {$/;"	n
offsetParam	trunk/g2o/apps/g2o_simulator/sensor_pointxyz.h	/^    ParameterSE3Offset* offsetParam() {return _offsetParam;};$/;"	f	class:g2o::SensorPointXYZ
SensorPointXYZDepth	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_depth.cpp	/^  SensorPointXYZDepth::SensorPointXYZDepth(const std::string& name_): BinarySensor<Robot3D, EdgeSE3PointXYZDepth, WorldObjectTrackXYZ>(name_) {$/;"	f	class:g2o::SensorPointXYZDepth
addNoise	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_depth.cpp	/^  void SensorPointXYZDepth::addNoise(EdgeType* e){$/;"	f	class:g2o::SensorPointXYZDepth
addParameters	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_depth.cpp	/^  void SensorPointXYZDepth::addParameters(){$/;"	f	class:g2o::SensorPointXYZDepth
g2o	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_depth.cpp	/^namespace g2o {$/;"	n	file:
isVisible	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_depth.cpp	/^  bool SensorPointXYZDepth::isVisible(SensorPointXYZDepth::WorldObjectType* to){$/;"	f	class:g2o::SensorPointXYZDepth
sense	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_depth.cpp	/^  void SensorPointXYZDepth::sense() {$/;"	f	class:g2o::SensorPointXYZDepth
G2O_SENSOR_POINTXYZ_DEPTH_H_	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_depth.h	28;"	d
RobotPoseType	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_depth.h	/^    typedef PoseVertexType::EstimateType RobotPoseType;$/;"	t	class:g2o::SensorPointXYZDepth
SensorPointXYZDepth	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_depth.h	/^  class G2O_SIMULATOR_API SensorPointXYZDepth: public PointSensorParameters, public BinarySensor<Robot3D, EdgeSE3PointXYZDepth, WorldObjectTrackXYZ>{$/;"	c	namespace:g2o
_offsetParam	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_depth.h	/^    ParameterSE3Offset* _offsetParam;$/;"	m	class:g2o::SensorPointXYZDepth
_sensorPose	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_depth.h	/^    RobotPoseType _sensorPose;$/;"	m	class:g2o::SensorPointXYZDepth
g2o	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_depth.h	/^namespace g2o {$/;"	n
offsetParam	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_depth.h	/^    ParameterSE3Offset* offsetParam() {return _offsetParam;};$/;"	f	class:g2o::SensorPointXYZDepth
SensorPointXYZDisparity	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_disparity.cpp	/^  SensorPointXYZDisparity::SensorPointXYZDisparity(const std::string& name_): BinarySensor<Robot3D, EdgeSE3PointXYZDisparity, WorldObjectTrackXYZ>(name_) {$/;"	f	class:g2o::SensorPointXYZDisparity
addNoise	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_disparity.cpp	/^  void SensorPointXYZDisparity::addNoise(EdgeType* e){$/;"	f	class:g2o::SensorPointXYZDisparity
addParameters	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_disparity.cpp	/^  void SensorPointXYZDisparity::addParameters(){$/;"	f	class:g2o::SensorPointXYZDisparity
g2o	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_disparity.cpp	/^namespace g2o {$/;"	n	file:
isVisible	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_disparity.cpp	/^  bool SensorPointXYZDisparity::isVisible(SensorPointXYZDisparity::WorldObjectType* to){$/;"	f	class:g2o::SensorPointXYZDisparity
sense	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_disparity.cpp	/^  void SensorPointXYZDisparity::sense() {$/;"	f	class:g2o::SensorPointXYZDisparity
G2O_SENSOR_POINTXYZ_DISPARITY_H_	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_disparity.h	28;"	d
RobotPoseType	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_disparity.h	/^    typedef PoseVertexType::EstimateType RobotPoseType;$/;"	t	class:g2o::SensorPointXYZDisparity
SensorPointXYZDisparity	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_disparity.h	/^  class G2O_SIMULATOR_API SensorPointXYZDisparity: public PointSensorParameters, public BinarySensor<Robot3D, EdgeSE3PointXYZDisparity, WorldObjectTrackXYZ>{$/;"	c	namespace:g2o
_offsetParam	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_disparity.h	/^    ParameterSE3Offset* _offsetParam;$/;"	m	class:g2o::SensorPointXYZDisparity
_sensorPose	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_disparity.h	/^    RobotPoseType _sensorPose;$/;"	m	class:g2o::SensorPointXYZDisparity
g2o	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_disparity.h	/^namespace g2o {$/;"	n
offsetParam	trunk/g2o/apps/g2o_simulator/sensor_pointxyz_disparity.h	/^    ParameterSE3Offset* offsetParam() {return _offsetParam;};$/;"	f	class:g2o::SensorPointXYZDisparity
SensorPose2D	trunk/g2o/apps/g2o_simulator/sensor_pose2d.cpp	/^  SensorPose2D::SensorPose2D(const std::string& name_):$/;"	f	class:g2o::SensorPose2D
addNoise	trunk/g2o/apps/g2o_simulator/sensor_pose2d.cpp	/^  void SensorPose2D::addNoise(EdgeType* e){$/;"	f	class:g2o::SensorPose2D
g2o	trunk/g2o/apps/g2o_simulator/sensor_pose2d.cpp	/^namespace g2o{$/;"	n	file:
isVisible	trunk/g2o/apps/g2o_simulator/sensor_pose2d.cpp	/^  bool SensorPose2D::isVisible(SensorPose2D::WorldObjectType* to){$/;"	f	class:g2o::SensorPose2D
sense	trunk/g2o/apps/g2o_simulator/sensor_pose2d.cpp	/^  void SensorPose2D::sense() {$/;"	f	class:g2o::SensorPose2D
G2O_SENSOR_POSE2D_H_	trunk/g2o/apps/g2o_simulator/sensor_pose2d.h	28;"	d
SensorPose2D	trunk/g2o/apps/g2o_simulator/sensor_pose2d.h	/^  class G2O_SIMULATOR_API SensorPose2D : public PointSensorParameters, public BinarySensor<Robot2D, EdgeSE2, WorldObjectSE2>  { $/;"	c	namespace:g2o
_posesToIgnore	trunk/g2o/apps/g2o_simulator/sensor_pose2d.h	/^    std::set<PoseObject*> _posesToIgnore;$/;"	m	class:g2o::SensorPose2D
_stepsToIgnore	trunk/g2o/apps/g2o_simulator/sensor_pose2d.h	/^    int _stepsToIgnore;$/;"	m	class:g2o::SensorPose2D
g2o	trunk/g2o/apps/g2o_simulator/sensor_pose2d.h	/^namespace g2o {$/;"	n
setStepsToIgnore	trunk/g2o/apps/g2o_simulator/sensor_pose2d.h	/^    void setStepsToIgnore(int stepsToIgnore_) {_stepsToIgnore = stepsToIgnore_;}$/;"	f	class:g2o::SensorPose2D
stepsToIgnore	trunk/g2o/apps/g2o_simulator/sensor_pose2d.h	/^    int stepsToIgnore() const {return _stepsToIgnore;}$/;"	f	class:g2o::SensorPose2D
SensorPose3D	trunk/g2o/apps/g2o_simulator/sensor_pose3d.cpp	/^  SensorPose3D::SensorPose3D(const std::string& name_): BinarySensor<Robot3D, EdgeSE3, WorldObjectSE3>(name_){  $/;"	f	class:g2o::SensorPose3D
addNoise	trunk/g2o/apps/g2o_simulator/sensor_pose3d.cpp	/^  void SensorPose3D::addNoise(EdgeType* e){$/;"	f	class:g2o::SensorPose3D
g2o	trunk/g2o/apps/g2o_simulator/sensor_pose3d.cpp	/^namespace g2o {$/;"	n	file:
isVisible	trunk/g2o/apps/g2o_simulator/sensor_pose3d.cpp	/^  bool SensorPose3D::isVisible(SensorPose3D::WorldObjectType* to){$/;"	f	class:g2o::SensorPose3D
sense	trunk/g2o/apps/g2o_simulator/sensor_pose3d.cpp	/^  void SensorPose3D::sense() {$/;"	f	class:g2o::SensorPose3D
G2O_SENSOR_POSE3D_H_	trunk/g2o/apps/g2o_simulator/sensor_pose3d.h	28;"	d
SensorPose3D	trunk/g2o/apps/g2o_simulator/sensor_pose3d.h	/^  class G2O_SIMULATOR_API SensorPose3D : public PointSensorParameters, public BinarySensor<Robot3D, EdgeSE3, WorldObjectSE3>  { $/;"	c	namespace:g2o
_posesToIgnore	trunk/g2o/apps/g2o_simulator/sensor_pose3d.h	/^    std::set<PoseObject*> _posesToIgnore;$/;"	m	class:g2o::SensorPose3D
_stepsToIgnore	trunk/g2o/apps/g2o_simulator/sensor_pose3d.h	/^    int _stepsToIgnore;$/;"	m	class:g2o::SensorPose3D
g2o	trunk/g2o/apps/g2o_simulator/sensor_pose3d.h	/^namespace g2o {$/;"	n
setStepsToIgnore	trunk/g2o/apps/g2o_simulator/sensor_pose3d.h	/^    void setStepsToIgnore(int stepsToIgnore_) {_stepsToIgnore = stepsToIgnore_;}$/;"	f	class:g2o::SensorPose3D
stepsToIgnore	trunk/g2o/apps/g2o_simulator/sensor_pose3d.h	/^    int stepsToIgnore() const {return _stepsToIgnore;}$/;"	f	class:g2o::SensorPose3D
SensorPose3DOffset	trunk/g2o/apps/g2o_simulator/sensor_pose3d_offset.cpp	/^  SensorPose3DOffset::SensorPose3DOffset(const std::string& name_): $/;"	f	class:g2o::SensorPose3DOffset
addNoise	trunk/g2o/apps/g2o_simulator/sensor_pose3d_offset.cpp	/^  void SensorPose3DOffset::addNoise(EdgeType* e){$/;"	f	class:g2o::SensorPose3DOffset
addParameters	trunk/g2o/apps/g2o_simulator/sensor_pose3d_offset.cpp	/^  void SensorPose3DOffset::addParameters(){$/;"	f	class:g2o::SensorPose3DOffset
g2o	trunk/g2o/apps/g2o_simulator/sensor_pose3d_offset.cpp	/^namespace g2o {$/;"	n	file:
isVisible	trunk/g2o/apps/g2o_simulator/sensor_pose3d_offset.cpp	/^  bool SensorPose3DOffset::isVisible(SensorPose3DOffset::WorldObjectType* to){$/;"	f	class:g2o::SensorPose3DOffset
sense	trunk/g2o/apps/g2o_simulator/sensor_pose3d_offset.cpp	/^  void SensorPose3DOffset::sense() {$/;"	f	class:g2o::SensorPose3DOffset
G2O_SENSOR_POSE3D_OFFSET_H_	trunk/g2o/apps/g2o_simulator/sensor_pose3d_offset.h	28;"	d
SensorPose3DOffset	trunk/g2o/apps/g2o_simulator/sensor_pose3d_offset.h	/^  class SensorPose3DOffset : public PointSensorParameters, public BinarySensor<Robot3D, EdgeSE3Offset, WorldObjectSE3>  { $/;"	c	namespace:g2o
_offsetParam1	trunk/g2o/apps/g2o_simulator/sensor_pose3d_offset.h	/^    ParameterSE3Offset* _offsetParam1, *_offsetParam2;$/;"	m	class:g2o::SensorPose3DOffset
_offsetParam2	trunk/g2o/apps/g2o_simulator/sensor_pose3d_offset.h	/^    ParameterSE3Offset* _offsetParam1, *_offsetParam2;$/;"	m	class:g2o::SensorPose3DOffset
_posesToIgnore	trunk/g2o/apps/g2o_simulator/sensor_pose3d_offset.h	/^    std::set<PoseObject*> _posesToIgnore;$/;"	m	class:g2o::SensorPose3DOffset
_stepsToIgnore	trunk/g2o/apps/g2o_simulator/sensor_pose3d_offset.h	/^    int _stepsToIgnore;$/;"	m	class:g2o::SensorPose3DOffset
g2o	trunk/g2o/apps/g2o_simulator/sensor_pose3d_offset.h	/^namespace g2o {$/;"	n
offsetParam1	trunk/g2o/apps/g2o_simulator/sensor_pose3d_offset.h	/^    ParameterSE3Offset* offsetParam1() {return _offsetParam1;};$/;"	f	class:g2o::SensorPose3DOffset
offsetParam2	trunk/g2o/apps/g2o_simulator/sensor_pose3d_offset.h	/^    ParameterSE3Offset* offsetParam2() {return _offsetParam2;};$/;"	f	class:g2o::SensorPose3DOffset
setStepsToIgnore	trunk/g2o/apps/g2o_simulator/sensor_pose3d_offset.h	/^    void setStepsToIgnore(int stepsToIgnore_) {_stepsToIgnore = stepsToIgnore_;}$/;"	f	class:g2o::SensorPose3DOffset
stepsToIgnore	trunk/g2o/apps/g2o_simulator/sensor_pose3d_offset.h	/^    int stepsToIgnore() const {return _stepsToIgnore;}$/;"	f	class:g2o::SensorPose3DOffset
SensorSE3Prior	trunk/g2o/apps/g2o_simulator/sensor_se3_prior.cpp	/^  SensorSE3Prior::SensorSE3Prior(const std::string& name_): UnarySensor<Robot3D, EdgeSE3Prior>(name_) {$/;"	f	class:g2o::SensorSE3Prior
addNoise	trunk/g2o/apps/g2o_simulator/sensor_se3_prior.cpp	/^  void SensorSE3Prior::addNoise(EdgeType* e){$/;"	f	class:g2o::SensorSE3Prior
addParameters	trunk/g2o/apps/g2o_simulator/sensor_se3_prior.cpp	/^  void SensorSE3Prior::addParameters(){$/;"	f	class:g2o::SensorSE3Prior
g2o	trunk/g2o/apps/g2o_simulator/sensor_se3_prior.cpp	/^namespace g2o {$/;"	n	file:
sense	trunk/g2o/apps/g2o_simulator/sensor_se3_prior.cpp	/^  void SensorSE3Prior::sense() {$/;"	f	class:g2o::SensorSE3Prior
G2O_SENSOR_SE3_PRIOR_H_	trunk/g2o/apps/g2o_simulator/sensor_se3_prior.h	28;"	d
RobotPoseType	trunk/g2o/apps/g2o_simulator/sensor_se3_prior.h	/^    typedef PoseVertexType::EstimateType RobotPoseType;$/;"	t	class:g2o::SensorSE3Prior
SensorSE3Prior	trunk/g2o/apps/g2o_simulator/sensor_se3_prior.h	/^  class G2O_SIMULATOR_API SensorSE3Prior: public PointSensorParameters, public UnarySensor<Robot3D, EdgeSE3Prior>{$/;"	c	namespace:g2o
_offsetParam	trunk/g2o/apps/g2o_simulator/sensor_se3_prior.h	/^    ParameterSE3Offset* _offsetParam;$/;"	m	class:g2o::SensorSE3Prior
_sensorPose	trunk/g2o/apps/g2o_simulator/sensor_se3_prior.h	/^    RobotPoseType _sensorPose;$/;"	m	class:g2o::SensorSE3Prior
g2o	trunk/g2o/apps/g2o_simulator/sensor_se3_prior.h	/^namespace g2o {$/;"	n
offsetParam	trunk/g2o/apps/g2o_simulator/sensor_se3_prior.h	/^    ParameterSE3Offset* offsetParam() {return _offsetParam;};$/;"	f	class:g2o::SensorSE3Prior
addParameter	trunk/g2o/apps/g2o_simulator/simulator.cpp	/^  bool World::addParameter(Parameter* param){$/;"	f	class:g2o::World
addRobot	trunk/g2o/apps/g2o_simulator/simulator.cpp	/^  bool World::addRobot(BaseRobot* robot){$/;"	f	class:g2o::World
addSensor	trunk/g2o/apps/g2o_simulator/simulator.cpp	/^  bool BaseRobot::addSensor(BaseSensor* sensor){$/;"	f	class:g2o::BaseRobot
addWorldObject	trunk/g2o/apps/g2o_simulator/simulator.cpp	/^  bool World::addWorldObject(BaseWorldObject* object){$/;"	f	class:g2o::World
g2o	trunk/g2o/apps/g2o_simulator/simulator.cpp	/^namespace g2o{$/;"	n	file:
graph	trunk/g2o/apps/g2o_simulator/simulator.cpp	/^  OptimizableGraph* BaseRobot::graph() {$/;"	f	class:g2o::BaseRobot
graph	trunk/g2o/apps/g2o_simulator/simulator.cpp	/^  OptimizableGraph* BaseSensor::graph() {$/;"	f	class:g2o::BaseSensor
graph	trunk/g2o/apps/g2o_simulator/simulator.cpp	/^  OptimizableGraph* BaseWorldObject::graph() {$/;"	f	class:g2o::BaseWorldObject
sense	trunk/g2o/apps/g2o_simulator/simulator.cpp	/^  void BaseRobot::sense() {$/;"	f	class:g2o::BaseRobot
setVertex	trunk/g2o/apps/g2o_simulator/simulator.cpp	/^  void BaseWorldObject::setVertex(OptimizableGraph::Vertex* vertex_){ $/;"	f	class:g2o::BaseWorldObject
world	trunk/g2o/apps/g2o_simulator/simulator.cpp	/^  World* BaseSensor::world() {$/;"	f	class:g2o::BaseSensor
~BaseWorldObject	trunk/g2o/apps/g2o_simulator/simulator.cpp	/^  BaseWorldObject::~BaseWorldObject() {}$/;"	f	class:g2o::BaseWorldObject
BaseRobot	trunk/g2o/apps/g2o_simulator/simulator.h	/^  BaseRobot(World* world_, const std::string& name_){_world = world_; _name = name_; }$/;"	f	class:g2o::BaseRobot
BaseRobot	trunk/g2o/apps/g2o_simulator/simulator.h	/^class G2O_SIMULATOR_API BaseRobot {$/;"	c	namespace:g2o
BaseSensor	trunk/g2o/apps/g2o_simulator/simulator.h	/^  BaseSensor(const std::string& name_){ _name = name_;}$/;"	f	class:g2o::BaseSensor
BaseSensor	trunk/g2o/apps/g2o_simulator/simulator.h	/^class G2O_SIMULATOR_API BaseSensor{$/;"	c	namespace:g2o
BaseWorldObject	trunk/g2o/apps/g2o_simulator/simulator.h	/^  BaseWorldObject(World* world_=0) {_world = world_; _vertex=0;}$/;"	f	class:g2o::BaseWorldObject
BaseWorldObject	trunk/g2o/apps/g2o_simulator/simulator.h	/^class G2O_SIMULATOR_API BaseWorldObject{$/;"	c	namespace:g2o
BinarySensor	trunk/g2o/apps/g2o_simulator/simulator.h	/^  BinarySensor(const std::string& name): BaseSensor(name) {$/;"	f	class:g2o::BinarySensor
BinarySensor	trunk/g2o/apps/g2o_simulator/simulator.h	/^class BinarySensor: public BaseSensor {$/;"	c	namespace:g2o
EdgeType	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef EdgeType_ EdgeType;$/;"	t	class:g2o::BinarySensor
EdgeType	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef EdgeType_ EdgeType;$/;"	t	class:g2o::UnarySensor
EstimateType	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef typename VertexType_::EstimateType EstimateType;$/;"	t	class:g2o::WorldObject
G2O_SIMULATOR_	trunk/g2o/apps/g2o_simulator/simulator.h	28;"	d
InformationType	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef typename EdgeType::InformationType InformationType;$/;"	t	class:g2o::BinarySensor
InformationType	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef typename EdgeType::InformationType InformationType;$/;"	t	class:g2o::UnarySensor
PoseObject	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef RobotPoseObject PoseObject;$/;"	t	class:g2o::Robot
PoseObject	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef typename RobotType::PoseObject PoseObject;$/;"	t	class:g2o::BinarySensor
PoseObject	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef typename RobotType::PoseObject PoseObject;$/;"	t	class:g2o::UnarySensor
PoseType	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef typename PoseObject::EstimateType PoseType;$/;"	t	class:g2o::Robot
PoseVertexType	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef typename RobotType::PoseObject::VertexType PoseVertexType;$/;"	t	class:g2o::BinarySensor
PoseVertexType	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef typename RobotType::PoseObject::VertexType PoseVertexType;$/;"	t	class:g2o::UnarySensor
Robot	trunk/g2o/apps/g2o_simulator/simulator.h	/^ Robot(World* world_, const std::string& name_): BaseRobot(world_, name_){}$/;"	f	class:g2o::Robot
Robot	trunk/g2o/apps/g2o_simulator/simulator.h	/^class Robot: public BaseRobot{$/;"	c	namespace:g2o
RobotType	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef RobotType_ RobotType;$/;"	t	class:g2o::BinarySensor
RobotType	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef RobotType_ RobotType;$/;"	t	class:g2o::UnarySensor
TrajectoryType	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef std::list<PoseObject*> TrajectoryType;$/;"	t	class:g2o::Robot
TrajectoryType	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef typename RobotType::TrajectoryType TrajectoryType;$/;"	t	class:g2o::BinarySensor
TrajectoryType	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef typename RobotType::TrajectoryType TrajectoryType;$/;"	t	class:g2o::UnarySensor
UnarySensor	trunk/g2o/apps/g2o_simulator/simulator.h	/^  UnarySensor(const std::string& name): BaseSensor(name) {$/;"	f	class:g2o::UnarySensor
UnarySensor	trunk/g2o/apps/g2o_simulator/simulator.h	/^class UnarySensor: public BaseSensor {$/;"	c	namespace:g2o
VertexType	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef VertexType_ VertexType;$/;"	t	class:g2o::WorldObject
VertexType	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef typename PoseObject::VertexType VertexType;$/;"	t	class:g2o::Robot
VertexType	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef typename WorldObjectType::VertexType VertexType;$/;"	t	class:g2o::BinarySensor
World	trunk/g2o/apps/g2o_simulator/simulator.h	/^  World(OptimizableGraph* graph_) {_graph = graph_; _runningId=0; _paramId=0;}$/;"	f	class:g2o::World
World	trunk/g2o/apps/g2o_simulator/simulator.h	/^class G2O_SIMULATOR_API World{$/;"	c	namespace:g2o
WorldObject	trunk/g2o/apps/g2o_simulator/simulator.h	/^  WorldObject(World* world_=0): BaseWorldObject(world_){$/;"	f	class:g2o::WorldObject
WorldObject	trunk/g2o/apps/g2o_simulator/simulator.h	/^class WorldObject: public BaseWorldObject, VertexType_{$/;"	c	namespace:g2o
WorldObjectType	trunk/g2o/apps/g2o_simulator/simulator.h	/^  typedef WorldObjectType_ WorldObjectType;$/;"	t	class:g2o::BinarySensor
_graph	trunk/g2o/apps/g2o_simulator/simulator.h	/^  OptimizableGraph* _graph;$/;"	m	class:g2o::BaseWorldObject
_graph	trunk/g2o/apps/g2o_simulator/simulator.h	/^  OptimizableGraph* _graph;$/;"	m	class:g2o::World
_information	trunk/g2o/apps/g2o_simulator/simulator.h	/^  InformationType _information;$/;"	m	class:g2o::BinarySensor
_information	trunk/g2o/apps/g2o_simulator/simulator.h	/^  InformationType _information;$/;"	m	class:g2o::UnarySensor
_name	trunk/g2o/apps/g2o_simulator/simulator.h	/^  std::string _name;$/;"	m	class:g2o::BaseRobot
_name	trunk/g2o/apps/g2o_simulator/simulator.h	/^  std::string _name;$/;"	m	class:g2o::BaseSensor
_objects	trunk/g2o/apps/g2o_simulator/simulator.h	/^  std::set<BaseWorldObject*> _objects;$/;"	m	class:g2o::World
_paramId	trunk/g2o/apps/g2o_simulator/simulator.h	/^  int _paramId;$/;"	m	class:g2o::World
_parameters	trunk/g2o/apps/g2o_simulator/simulator.h	/^  std::vector<Parameter*> _parameters;$/;"	m	class:g2o::BaseSensor
_pose	trunk/g2o/apps/g2o_simulator/simulator.h	/^  PoseType _pose;$/;"	m	class:g2o::Robot
_robot	trunk/g2o/apps/g2o_simulator/simulator.h	/^  BaseRobot* _robot;$/;"	m	class:g2o::BaseSensor
_robotPoseObject	trunk/g2o/apps/g2o_simulator/simulator.h	/^  PoseObject* _robotPoseObject;$/;"	m	class:g2o::BinarySensor
_robotPoseObject	trunk/g2o/apps/g2o_simulator/simulator.h	/^  PoseObject* _robotPoseObject;$/;"	m	class:g2o::UnarySensor
_robots	trunk/g2o/apps/g2o_simulator/simulator.h	/^  std::set<BaseRobot*> _robots;$/;"	m	class:g2o::World
_runningId	trunk/g2o/apps/g2o_simulator/simulator.h	/^  int _runningId;$/;"	m	class:g2o::World
_sampler	trunk/g2o/apps/g2o_simulator/simulator.h	/^  GaussianSampler<typename EdgeType::ErrorVector, InformationType> _sampler;$/;"	m	class:g2o::BinarySensor
_sampler	trunk/g2o/apps/g2o_simulator/simulator.h	/^  GaussianSampler<typename EdgeType::ErrorVector, InformationType> _sampler;$/;"	m	class:g2o::UnarySensor
_sensors	trunk/g2o/apps/g2o_simulator/simulator.h	/^  std::set<BaseSensor*> _sensors;$/;"	m	class:g2o::BaseRobot
_trajectory	trunk/g2o/apps/g2o_simulator/simulator.h	/^  TrajectoryType _trajectory;$/;"	m	class:g2o::Robot
_vertex	trunk/g2o/apps/g2o_simulator/simulator.h	/^  OptimizableGraph::Vertex* _vertex;$/;"	m	class:g2o::BaseWorldObject
_world	trunk/g2o/apps/g2o_simulator/simulator.h	/^  World* _world;$/;"	m	class:g2o::BaseRobot
_world	trunk/g2o/apps/g2o_simulator/simulator.h	/^  World* _world;$/;"	m	class:g2o::BaseWorldObject
addNoise	trunk/g2o/apps/g2o_simulator/simulator.h	/^  virtual void addNoise(EdgeType*){};$/;"	f	class:g2o::BinarySensor
addNoise	trunk/g2o/apps/g2o_simulator/simulator.h	/^  virtual void addNoise(EdgeType*){};$/;"	f	class:g2o::UnarySensor
addParameters	trunk/g2o/apps/g2o_simulator/simulator.h	/^  virtual void addParameters() {}$/;"	f	class:g2o::BaseSensor
g2o	trunk/g2o/apps/g2o_simulator/simulator.h	/^namespace g2o{$/;"	n
graph	trunk/g2o/apps/g2o_simulator/simulator.h	/^  OptimizableGraph* graph() {return _graph;}$/;"	f	class:g2o::World
information	trunk/g2o/apps/g2o_simulator/simulator.h	/^  const InformationType& information() {return _information; }$/;"	f	class:g2o::BinarySensor
information	trunk/g2o/apps/g2o_simulator/simulator.h	/^  const InformationType& information() {return _information; }$/;"	f	class:g2o::UnarySensor
mkEdge	trunk/g2o/apps/g2o_simulator/simulator.h	/^  EdgeType* mkEdge(){$/;"	f	class:g2o::UnarySensor
mkEdge	trunk/g2o/apps/g2o_simulator/simulator.h	/^  EdgeType* mkEdge(WorldObjectType* object){$/;"	f	class:g2o::BinarySensor
move	trunk/g2o/apps/g2o_simulator/simulator.h	/^  virtual void move(const PoseType& pose_) {$/;"	f	class:g2o::Robot
name	trunk/g2o/apps/g2o_simulator/simulator.h	/^  const std::string& name() const {return _name;}$/;"	f	class:g2o::BaseRobot
objects	trunk/g2o/apps/g2o_simulator/simulator.h	/^  std::set<BaseWorldObject*>& objects() {return _objects;}$/;"	f	class:g2o::World
parameters	trunk/g2o/apps/g2o_simulator/simulator.h	/^  std::vector<Parameter*> parameters() {return _parameters;}$/;"	f	class:g2o::BaseSensor
pose	trunk/g2o/apps/g2o_simulator/simulator.h	/^  const PoseType& pose() const {return _pose;}$/;"	f	class:g2o::Robot
relativeMove	trunk/g2o/apps/g2o_simulator/simulator.h	/^  virtual void relativeMove(const PoseType& movement_) {$/;"	f	class:g2o::Robot
robot	trunk/g2o/apps/g2o_simulator/simulator.h	/^  inline BaseRobot* robot() {return _robot;}$/;"	f	class:g2o::BaseSensor
robots	trunk/g2o/apps/g2o_simulator/simulator.h	/^  std::set<BaseRobot*>&  robots() {return _robots; }$/;"	f	class:g2o::World
sense	trunk/g2o/apps/g2o_simulator/simulator.h	/^  virtual void sense() {$/;"	f	class:g2o::BinarySensor
sense	trunk/g2o/apps/g2o_simulator/simulator.h	/^  virtual void sense() {$/;"	f	class:g2o::UnarySensor
sensors	trunk/g2o/apps/g2o_simulator/simulator.h	/^  const std::set<BaseSensor*> sensors() {return _sensors;}$/;"	f	class:g2o::BaseRobot
setInformation	trunk/g2o/apps/g2o_simulator/simulator.h	/^  void setInformation(const InformationType& information_ ) {$/;"	f	class:g2o::BinarySensor
setInformation	trunk/g2o/apps/g2o_simulator/simulator.h	/^  void setInformation(const InformationType& information_ ) {$/;"	f	class:g2o::UnarySensor
setRobot	trunk/g2o/apps/g2o_simulator/simulator.h	/^  inline void setRobot(BaseRobot* robot_) {_robot = robot_;}$/;"	f	class:g2o::BaseSensor
setVertex	trunk/g2o/apps/g2o_simulator/simulator.h	/^  virtual void setVertex(OptimizableGraph::Vertex* vertex_){$/;"	f	class:g2o::WorldObject
setWorld	trunk/g2o/apps/g2o_simulator/simulator.h	/^  void setWorld(World* world_) {_world = world_;}$/;"	f	class:g2o::BaseRobot
setWorld	trunk/g2o/apps/g2o_simulator/simulator.h	/^  void setWorld(World* world_) {_world = world_;}$/;"	f	class:g2o::BaseWorldObject
trajectory	trunk/g2o/apps/g2o_simulator/simulator.h	/^  TrajectoryType& trajectory() {return _trajectory;}$/;"	f	class:g2o::Robot
vertex	trunk/g2o/apps/g2o_simulator/simulator.h	/^  OptimizableGraph::Vertex* vertex() {return _vertex;}$/;"	f	class:g2o::BaseWorldObject
vertex	trunk/g2o/apps/g2o_simulator/simulator.h	/^  VertexType* vertex() {$/;"	f	class:g2o::WorldObject
world	trunk/g2o/apps/g2o_simulator/simulator.h	/^  World* world() {return _world;}$/;"	f	class:g2o::BaseRobot
world	trunk/g2o/apps/g2o_simulator/simulator.h	/^  World* world() {return _world;}$/;"	f	class:g2o::BaseWorldObject
G2O_SIMULATOR2D_	trunk/g2o/apps/g2o_simulator/simulator2d.h	28;"	d
G2O_SIMULATOR2D_BASE_H_	trunk/g2o/apps/g2o_simulator/simulator2d_base.h	28;"	d
Robot2D	trunk/g2o/apps/g2o_simulator/simulator2d_base.h	/^  typedef Robot<WorldObjectSE2>  Robot2D;$/;"	t	namespace:g2o
WorldObjectPointXY	trunk/g2o/apps/g2o_simulator/simulator2d_base.h	/^  typedef WorldObject<VertexPointXY> WorldObjectPointXY;$/;"	t	namespace:g2o
WorldObjectSE2	trunk/g2o/apps/g2o_simulator/simulator2d_base.h	/^  typedef WorldObject<VertexSE2> WorldObjectSE2;$/;"	t	namespace:g2o
g2o	trunk/g2o/apps/g2o_simulator/simulator2d_base.h	/^namespace g2o {$/;"	n
G2O_SIMULATOR3D_	trunk/g2o/apps/g2o_simulator/simulator3d.h	28;"	d
G2O_SIMULATOR3D_BASE_H_	trunk/g2o/apps/g2o_simulator/simulator3d_base.h	28;"	d
Robot3D	trunk/g2o/apps/g2o_simulator/simulator3d_base.h	/^  typedef Robot<WorldObjectSE3>  Robot3D;$/;"	t	namespace:g2o
WorldObjectSE3	trunk/g2o/apps/g2o_simulator/simulator3d_base.h	/^  typedef WorldObject<VertexSE3> WorldObjectSE3;$/;"	t	namespace:g2o
WorldObjectTrackXYZ	trunk/g2o/apps/g2o_simulator/simulator3d_base.h	/^  typedef WorldObject<VertexPointXYZ> WorldObjectTrackXYZ;$/;"	t	namespace:g2o
g2o	trunk/g2o/apps/g2o_simulator/simulator3d_base.h	/^namespace g2o {$/;"	n
clipSegmentCircle	trunk/g2o/apps/g2o_simulator/simutils.cpp	/^  int clipSegmentCircle(Vector2d& p1, Vector2d& p2, double r) {$/;"	f	namespace:g2o
clipSegmentFov	trunk/g2o/apps/g2o_simulator/simutils.cpp	/^  int clipSegmentFov(Vector2d& p1, Vector2d& p2, double min, double max){$/;"	f	namespace:g2o
clipSegmentLine	trunk/g2o/apps/g2o_simulator/simutils.cpp	/^  int clipSegmentLine(Vector2d& p1, Vector2d& p2, double a, double b, double c ){$/;"	f	namespace:g2o
computeLineParameters	trunk/g2o/apps/g2o_simulator/simutils.cpp	/^  Vector2d computeLineParameters(const Vector2d& p1, const Vector2d& p2){$/;"	f	namespace:g2o
g2o	trunk/g2o/apps/g2o_simulator/simutils.cpp	/^namespace g2o {$/;"	n	file:
G2O_SIMUTILS_H_	trunk/g2o/apps/g2o_simulator/simutils.h	28;"	d
g2o	trunk/g2o/apps/g2o_simulator/simutils.h	/^namespace g2o {$/;"	n
main	trunk/g2o/apps/g2o_simulator/test_simulator2d.cpp	/^int main(int argc, char** argv) {$/;"	f
main	trunk/g2o/apps/g2o_simulator/test_simulator3d.cpp	/^int main(int argc, char** argv) {$/;"	f
G2oQGLViewer	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^G2oQGLViewer::G2oQGLViewer(QWidget* parent, const QGLWidget* shareWidget, Qt::WFlags flags) :$/;"	f	class:g2o::G2oQGLViewer
StandardCamera	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^      StandardCamera() : _standard(true) {};$/;"	f	class:g2o::<anonymous>::StandardCamera
StandardCamera	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^  class StandardCamera : public qglviewer::Camera$/;"	c	namespace:g2o::<anonymous>	file:
_standard	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^      bool _standard;$/;"	m	class:g2o::<anonymous>::StandardCamera	file:
draw	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^void G2oQGLViewer::draw()$/;"	f	class:g2o::G2oQGLViewer
g2o	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^namespace g2o {$/;"	n	file:
init	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^void G2oQGLViewer::init()$/;"	f	class:g2o::G2oQGLViewer
setStandard	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^      void setStandard(bool s) { _standard = s;}$/;"	f	class:g2o::<anonymous>::StandardCamera
setUpdateDisplay	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^void G2oQGLViewer::setUpdateDisplay(bool updateDisplay)$/;"	f	class:g2o::G2oQGLViewer
standard	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^      bool standard() const {return _standard;}$/;"	f	class:g2o::<anonymous>::StandardCamera
zFar	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^      float zFar() const$/;"	f	class:g2o::<anonymous>::StandardCamera
zNear	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^      float zNear() const {$/;"	f	class:g2o::<anonymous>::StandardCamera
~G2oQGLViewer	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.cpp	/^G2oQGLViewer::~G2oQGLViewer()$/;"	f	class:g2o::G2oQGLViewer
G2O_QGL_GRAPH_VIEWER_H	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.h	20;"	d
G2oQGLViewer	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.h	/^  class G2O_VIEWER_API G2oQGLViewer : public QGLViewer$/;"	c	namespace:g2o
_drawActionParameters	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.h	/^      DrawAction::Parameters* _drawActionParameters;$/;"	m	class:g2o::G2oQGLViewer
_drawActions	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.h	/^      HyperGraphElementAction* _drawActions;$/;"	m	class:g2o::G2oQGLViewer
_drawList	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.h	/^      GLuint _drawList;$/;"	m	class:g2o::G2oQGLViewer
_updateDisplay	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.h	/^      bool _updateDisplay;$/;"	m	class:g2o::G2oQGLViewer
g2o	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.h	/^namespace g2o {$/;"	n
graph	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.h	/^      SparseOptimizer* graph;$/;"	m	class:g2o::G2oQGLViewer
parameters	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.h	/^      DrawAction::Parameters* parameters() { return _drawActionParameters;}$/;"	f	class:g2o::G2oQGLViewer
updateDisplay	trunk/g2o/apps/g2o_viewer/g2o_qglviewer.h	/^      bool updateDisplay() const { return _updateDisplay;}$/;"	f	class:g2o::G2oQGLViewer
main	trunk/g2o/apps/g2o_viewer/g2o_viewer.cpp	/^int main(int argc, char** argv)$/;"	f
G2O_VIEWER_API	trunk/g2o/apps/g2o_viewer/g2o_viewer_api.h	11;"	d
G2O_VIEWER_API	trunk/g2o/apps/g2o_viewer/g2o_viewer_api.h	13;"	d
G2O_VIEWER_API	trunk/g2o/apps/g2o_viewer/g2o_viewer_api.h	16;"	d
G2O_VIEWER_API	trunk/g2o/apps/g2o_viewer/g2o_viewer_api.h	21;"	d
G2O_VIEWER_API_H	trunk/g2o/apps/g2o_viewer/g2o_viewer_api.h	2;"	d
GuiHyperGraphAction	trunk/g2o/apps/g2o_viewer/gui_hyper_graph_action.cpp	/^GuiHyperGraphAction::GuiHyperGraphAction() :$/;"	f	class:g2o::GuiHyperGraphAction
g2o	trunk/g2o/apps/g2o_viewer/gui_hyper_graph_action.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/apps/g2o_viewer/gui_hyper_graph_action.cpp	/^HyperGraphAction* GuiHyperGraphAction::operator()(const HyperGraph* graph, Parameters* parameters)$/;"	f	class:g2o::GuiHyperGraphAction
~GuiHyperGraphAction	trunk/g2o/apps/g2o_viewer/gui_hyper_graph_action.cpp	/^GuiHyperGraphAction::~GuiHyperGraphAction()$/;"	f	class:g2o::GuiHyperGraphAction
G2O_GUI_HYPER_GRAPH_ACTION_H	trunk/g2o/apps/g2o_viewer/gui_hyper_graph_action.h	20;"	d
GuiHyperGraphAction	trunk/g2o/apps/g2o_viewer/gui_hyper_graph_action.h	/^  class G2O_VIEWER_API GuiHyperGraphAction : public HyperGraphAction$/;"	c	namespace:g2o
dumpScreenshots	trunk/g2o/apps/g2o_viewer/gui_hyper_graph_action.h	/^      bool dumpScreenshots;$/;"	m	class:g2o::GuiHyperGraphAction
g2o	trunk/g2o/apps/g2o_viewer/gui_hyper_graph_action.h	/^namespace g2o {$/;"	n
viewer	trunk/g2o/apps/g2o_viewer/gui_hyper_graph_action.h	/^      G2oQGLViewer* viewer;   \/\/\/< the viewer which visualizes the graph$/;"	m	class:g2o::GuiHyperGraphAction
MainWindow	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^MainWindow::MainWindow(QWidget * parent, Qt::WindowFlags flags) :$/;"	f	class:MainWindow
allocateSolver	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^bool MainWindow::allocateSolver(bool& allocatedNewSolver)$/;"	f	class:MainWindow
fixGraph	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::fixGraph()$/;"	f	class:MainWindow
load	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^bool MainWindow::load(const QString& filename)$/;"	f	class:MainWindow
loadFromFile	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^bool MainWindow::loadFromFile(const QString& filename)$/;"	f	class:MainWindow
on_actionDefault_Background_triggered	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_actionDefault_Background_triggered(bool)$/;"	f	class:MainWindow
on_actionLoad_Viewer_State_triggered	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_actionLoad_Viewer_State_triggered(bool)$/;"	f	class:MainWindow
on_actionLoad_triggered	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_actionLoad_triggered(bool)$/;"	f	class:MainWindow
on_actionProperties_triggered	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_actionProperties_triggered(bool)$/;"	f	class:MainWindow
on_actionQuit_triggered	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_actionQuit_triggered(bool)$/;"	f	class:MainWindow
on_actionSave_Screenshot_triggered	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_actionSave_Screenshot_triggered(bool)$/;"	f	class:MainWindow
on_actionSave_Viewer_State_triggered	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_actionSave_Viewer_State_triggered(bool)$/;"	f	class:MainWindow
on_actionSave_triggered	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_actionSave_triggered(bool)$/;"	f	class:MainWindow
on_actionWhite_Background_triggered	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_actionWhite_Background_triggered(bool)$/;"	f	class:MainWindow
on_btnForceStop_clicked	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_btnForceStop_clicked()$/;"	f	class:MainWindow
on_btnInitialGuess_clicked	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_btnInitialGuess_clicked()$/;"	f	class:MainWindow
on_btnOptimize_clicked	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_btnOptimize_clicked()$/;"	f	class:MainWindow
on_btnOptimizerParamaters_clicked	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_btnOptimizerParamaters_clicked()$/;"	f	class:MainWindow
on_btnSetZero_clicked	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::on_btnSetZero_clicked()$/;"	f	class:MainWindow
prepare	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^bool MainWindow::prepare()$/;"	f	class:MainWindow
setRobustKernel	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::setRobustKernel()$/;"	f	class:MainWindow
updateDisplayedSolvers	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::updateDisplayedSolvers()$/;"	f	class:MainWindow
updateRobustKernels	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^void MainWindow::updateRobustKernels()$/;"	f	class:MainWindow
~MainWindow	trunk/g2o/apps/g2o_viewer/main_window.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow
G2O_MAIN_WINDOW_H	trunk/g2o/apps/g2o_viewer/main_window.h	20;"	d
MainWindow	trunk/g2o/apps/g2o_viewer/main_window.h	/^class G2O_VIEWER_API MainWindow : public QMainWindow, public Ui::BaseMainWindow$/;"	c
_currentOptimizationAlgorithmProperty	trunk/g2o/apps/g2o_viewer/main_window.h	/^    g2o::OptimizationAlgorithmProperty _currentOptimizationAlgorithmProperty;$/;"	m	class:MainWindow
_currentSolver	trunk/g2o/apps/g2o_viewer/main_window.h	/^    g2o::OptimizationAlgorithm* _currentSolver;$/;"	m	class:MainWindow
_forceStopFlag	trunk/g2o/apps/g2o_viewer/main_window.h	/^    bool _forceStopFlag;$/;"	m	class:MainWindow
_knownSolvers	trunk/g2o/apps/g2o_viewer/main_window.h	/^    std::vector<g2o::OptimizationAlgorithmProperty> _knownSolvers;$/;"	m	class:MainWindow
_lastSolver	trunk/g2o/apps/g2o_viewer/main_window.h	/^    int _lastSolver;$/;"	m	class:MainWindow
_optimizerPropertiesWidget	trunk/g2o/apps/g2o_viewer/main_window.h	/^    PropertiesWidget* _optimizerPropertiesWidget;$/;"	m	class:MainWindow
_viewerPropertiesWidget	trunk/g2o/apps/g2o_viewer/main_window.h	/^    ViewerPropertiesWidget* _viewerPropertiesWidget;$/;"	m	class:MainWindow
g2o	trunk/g2o/apps/g2o_viewer/main_window.h	/^namespace g2o {$/;"	n
PropertiesWidget	trunk/g2o/apps/g2o_viewer/properties_widget.cpp	/^PropertiesWidget::PropertiesWidget(QWidget * parent, Qt::WindowFlags f) :$/;"	f	class:PropertiesWidget
applyProperties	trunk/g2o/apps/g2o_viewer/properties_widget.cpp	/^void PropertiesWidget::applyProperties()$/;"	f	class:PropertiesWidget
humanReadablePropName	trunk/g2o/apps/g2o_viewer/properties_widget.cpp	/^std::string PropertiesWidget::humanReadablePropName(const std::string& propertyName) const$/;"	f	class:PropertiesWidget
on_btnApply_clicked	trunk/g2o/apps/g2o_viewer/properties_widget.cpp	/^void PropertiesWidget::on_btnApply_clicked()$/;"	f	class:PropertiesWidget
on_btnOK_clicked	trunk/g2o/apps/g2o_viewer/properties_widget.cpp	/^void PropertiesWidget::on_btnOK_clicked()$/;"	f	class:PropertiesWidget
setProperties	trunk/g2o/apps/g2o_viewer/properties_widget.cpp	/^void PropertiesWidget::setProperties(PropertyMap* properties)$/;"	f	class:PropertiesWidget
updateDisplayedProperties	trunk/g2o/apps/g2o_viewer/properties_widget.cpp	/^void PropertiesWidget::updateDisplayedProperties()$/;"	f	class:PropertiesWidget
~PropertiesWidget	trunk/g2o/apps/g2o_viewer/properties_widget.cpp	/^PropertiesWidget::~PropertiesWidget()$/;"	f	class:PropertiesWidget
G2O_PROPERTIES_WINDOW_H	trunk/g2o/apps/g2o_viewer/properties_widget.h	20;"	d
PropertiesWidget	trunk/g2o/apps/g2o_viewer/properties_widget.h	/^class G2O_VIEWER_API PropertiesWidget : public QDialog, public Ui::BasePropertiesWidget$/;"	c
_propNames	trunk/g2o/apps/g2o_viewer/properties_widget.h	/^    std::vector<std::string> _propNames;$/;"	m	class:PropertiesWidget
_properties	trunk/g2o/apps/g2o_viewer/properties_widget.h	/^    g2o::PropertyMap* _properties;$/;"	m	class:PropertiesWidget
g2o	trunk/g2o/apps/g2o_viewer/properties_widget.h	/^namespace g2o$/;"	n
SleepThread	trunk/g2o/apps/g2o_viewer/run_g2o_viewer.cpp	/^class SleepThread : public QThread$/;"	c	namespace:g2o	file:
g2o	trunk/g2o/apps/g2o_viewer/run_g2o_viewer.cpp	/^namespace g2o {$/;"	n	file:
run	trunk/g2o/apps/g2o_viewer/run_g2o_viewer.cpp	/^int RunG2OViewer::run(int argc, char** argv, CommandArgs& arg)$/;"	f	class:g2o::RunG2OViewer
RunG2OViewer	trunk/g2o/apps/g2o_viewer/run_g2o_viewer.h	/^  class G2O_VIEWER_API RunG2OViewer$/;"	c	namespace:g2o
g2o	trunk/g2o/apps/g2o_viewer/run_g2o_viewer.h	/^namespace g2o {$/;"	n
StreamRedirect	trunk/g2o/apps/g2o_viewer/stream_redirect.cpp	/^StreamRedirect::StreamRedirect(std::ostream &stream, QPlainTextEdit* te):$/;"	f	class:StreamRedirect
overflow	trunk/g2o/apps/g2o_viewer/stream_redirect.cpp	/^std::char_traits<char>::int_type StreamRedirect::overflow(int_type v)$/;"	f	class:StreamRedirect
xsputn	trunk/g2o/apps/g2o_viewer/stream_redirect.cpp	/^std::streamsize StreamRedirect::xsputn(const char *p, std::streamsize n)$/;"	f	class:StreamRedirect
~StreamRedirect	trunk/g2o/apps/g2o_viewer/stream_redirect.cpp	/^StreamRedirect::~StreamRedirect()$/;"	f	class:StreamRedirect
G2O_STREAM_REDIRECT_H	trunk/g2o/apps/g2o_viewer/stream_redirect.h	18;"	d
StreamRedirect	trunk/g2o/apps/g2o_viewer/stream_redirect.h	/^class G2O_VIEWER_API StreamRedirect : public std::basic_streambuf<char>$/;"	c
_buffer	trunk/g2o/apps/g2o_viewer/stream_redirect.h	/^    std::string _buffer;$/;"	m	class:StreamRedirect
_mutex	trunk/g2o/apps/g2o_viewer/stream_redirect.h	/^    QMutex _mutex;$/;"	m	class:StreamRedirect
_old_buf	trunk/g2o/apps/g2o_viewer/stream_redirect.h	/^    std::streambuf* _old_buf;$/;"	m	class:StreamRedirect
_stream	trunk/g2o/apps/g2o_viewer/stream_redirect.h	/^    std::ostream& _stream;$/;"	m	class:StreamRedirect
_te	trunk/g2o/apps/g2o_viewer/stream_redirect.h	/^    QPlainTextEdit* _te;$/;"	m	class:StreamRedirect
int_type	trunk/g2o/apps/g2o_viewer/stream_redirect.h	/^    typedef std::char_traits<char>::int_type int_type;$/;"	t	class:StreamRedirect
ViewerPropertiesWidget	trunk/g2o/apps/g2o_viewer/viewer_properties_widget.cpp	/^ViewerPropertiesWidget::ViewerPropertiesWidget(QWidget * parent, Qt::WindowFlags f) :$/;"	f	class:ViewerPropertiesWidget
applyProperties	trunk/g2o/apps/g2o_viewer/viewer_properties_widget.cpp	/^void ViewerPropertiesWidget::applyProperties()$/;"	f	class:ViewerPropertiesWidget
demangleName	trunk/g2o/apps/g2o_viewer/viewer_properties_widget.cpp	/^static std::string demangleName(const std::string& fullPropName)$/;"	f	file:
humanReadablePropName	trunk/g2o/apps/g2o_viewer/viewer_properties_widget.cpp	/^std::string ViewerPropertiesWidget::humanReadablePropName(const std::string& propertyName) const$/;"	f	class:ViewerPropertiesWidget
setViewer	trunk/g2o/apps/g2o_viewer/viewer_properties_widget.cpp	/^void ViewerPropertiesWidget::setViewer(g2o::G2oQGLViewer* viewer)$/;"	f	class:ViewerPropertiesWidget
~ViewerPropertiesWidget	trunk/g2o/apps/g2o_viewer/viewer_properties_widget.cpp	/^ViewerPropertiesWidget::~ViewerPropertiesWidget()$/;"	f	class:ViewerPropertiesWidget
G2O_VIEWER_PROPERTIES_WIDGET_H	trunk/g2o/apps/g2o_viewer/viewer_properties_widget.h	20;"	d
ViewerPropertiesWidget	trunk/g2o/apps/g2o_viewer/viewer_properties_widget.h	/^class G2O_VIEWER_API ViewerPropertiesWidget : public PropertiesWidget$/;"	c
_viewer	trunk/g2o/apps/g2o_viewer/viewer_properties_widget.h	/^    g2o::G2oQGLViewer* _viewer;$/;"	m	class:ViewerPropertiesWidget
g2o	trunk/g2o/apps/g2o_viewer/viewer_properties_widget.h	/^namespace g2o$/;"	n
BaseBinaryEdge	trunk/g2o/core/base_binary_edge.h	/^      BaseBinaryEdge() : BaseEdge<D,E>(),$/;"	f	class:g2o::BaseBinaryEdge
BaseBinaryEdge	trunk/g2o/core/base_binary_edge.h	/^  class BaseBinaryEdge : public BaseEdge<D, E>$/;"	c	namespace:g2o
Di	trunk/g2o/core/base_binary_edge.h	/^      static const int Di = VertexXiType::Dimension;$/;"	m	class:g2o::BaseBinaryEdge
Dimension	trunk/g2o/core/base_binary_edge.h	/^      static const int Dimension = BaseEdge<D, E>::Dimension;$/;"	m	class:g2o::BaseBinaryEdge
Dimension	trunk/g2o/core/base_binary_edge.h	/^      static const int Dimension = BaseEdge<D, E>::Dimension;$/;"	m	class:g2o::BaseBinaryEdge::E
Dj	trunk/g2o/core/base_binary_edge.h	/^      static const int Dj = VertexXjType::Dimension;$/;"	m	class:g2o::BaseBinaryEdge
ErrorVector	trunk/g2o/core/base_binary_edge.h	/^      typedef typename BaseEdge<D,E>::ErrorVector ErrorVector;$/;"	t	class:g2o::BaseBinaryEdge
G2O_BASE_BINARY_EDGE_H	trunk/g2o/core/base_binary_edge.h	28;"	d
HessianBlockTransposedType	trunk/g2o/core/base_binary_edge.h	/^      typedef Map<Matrix<double, Dj, Di>, Matrix<double, Dj, Di>::Flags & AlignedBit ? Aligned : Unaligned > HessianBlockTransposedType;$/;"	t	class:g2o::BaseBinaryEdge
HessianBlockType	trunk/g2o/core/base_binary_edge.h	/^      typedef Map<Matrix<double, Di, Dj>, Matrix<double, Di, Dj>::Flags & AlignedBit ? Aligned : Unaligned > HessianBlockType;$/;"	t	class:g2o::BaseBinaryEdge
InformationType	trunk/g2o/core/base_binary_edge.h	/^      typedef typename BaseEdge<D,E>::InformationType InformationType;$/;"	t	class:g2o::BaseBinaryEdge
JacobianXiOplusType	trunk/g2o/core/base_binary_edge.h	/^      typedef typename Matrix<double, D, Di>::AlignedMapType JacobianXiOplusType;$/;"	t	class:g2o::BaseBinaryEdge
JacobianXjOplusType	trunk/g2o/core/base_binary_edge.h	/^      typedef typename Matrix<double, D, Dj>::AlignedMapType JacobianXjOplusType;$/;"	t	class:g2o::BaseBinaryEdge
Measurement	trunk/g2o/core/base_binary_edge.h	/^      typedef typename BaseEdge<D,E>::Measurement Measurement;$/;"	t	class:g2o::BaseBinaryEdge
VertexXiType	trunk/g2o/core/base_binary_edge.h	/^      typedef VertexXi VertexXiType;$/;"	t	class:g2o::BaseBinaryEdge
VertexXjType	trunk/g2o/core/base_binary_edge.h	/^      typedef VertexXj VertexXjType;$/;"	t	class:g2o::BaseBinaryEdge
_hessian	trunk/g2o/core/base_binary_edge.h	/^      HessianBlockType _hessian;$/;"	m	class:g2o::BaseBinaryEdge
_hessianRowMajor	trunk/g2o/core/base_binary_edge.h	/^      bool _hessianRowMajor;$/;"	m	class:g2o::BaseBinaryEdge
_hessianTransposed	trunk/g2o/core/base_binary_edge.h	/^      HessianBlockTransposedType _hessianTransposed;$/;"	m	class:g2o::BaseBinaryEdge
_jacobianOplusXi	trunk/g2o/core/base_binary_edge.h	/^      JacobianXiOplusType _jacobianOplusXi;$/;"	m	class:g2o::BaseBinaryEdge
_jacobianOplusXj	trunk/g2o/core/base_binary_edge.h	/^      JacobianXjOplusType _jacobianOplusXj;$/;"	m	class:g2o::BaseBinaryEdge
g2o	trunk/g2o/core/base_binary_edge.h	/^namespace g2o {$/;"	n
jacobianOplusXi	trunk/g2o/core/base_binary_edge.h	/^      const JacobianXiOplusType& jacobianOplusXi() const { return _jacobianOplusXi;}$/;"	f	class:g2o::BaseBinaryEdge
jacobianOplusXj	trunk/g2o/core/base_binary_edge.h	/^      const JacobianXjOplusType& jacobianOplusXj() const { return _jacobianOplusXj;}$/;"	f	class:g2o::BaseBinaryEdge
allVerticesFixed	trunk/g2o/core/base_binary_edge.hpp	/^bool BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::allVerticesFixed() const$/;"	f	class:BaseBinaryEdge
constructQuadraticForm	trunk/g2o/core/base_binary_edge.hpp	/^void BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::constructQuadraticForm()$/;"	f	class:BaseBinaryEdge
createFrom	trunk/g2o/core/base_binary_edge.hpp	/^OptimizableGraph::Vertex* BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::createFrom(){$/;"	f	class:BaseBinaryEdge
createTo	trunk/g2o/core/base_binary_edge.hpp	/^OptimizableGraph::Vertex* BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::createTo(){$/;"	f	class:BaseBinaryEdge
linearizeOplus	trunk/g2o/core/base_binary_edge.hpp	/^void BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::linearizeOplus()$/;"	f	class:BaseBinaryEdge
linearizeOplus	trunk/g2o/core/base_binary_edge.hpp	/^void BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::linearizeOplus(JacobianWorkspace& jacobianWorkspace)$/;"	f	class:BaseBinaryEdge
mapHessianMemory	trunk/g2o/core/base_binary_edge.hpp	/^void BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::mapHessianMemory(double* d, int i, int j, bool rowMajor)$/;"	f	class:BaseBinaryEdge
resize	trunk/g2o/core/base_binary_edge.hpp	/^void BaseBinaryEdge<D, E, VertexXiType, VertexXjType>::resize(size_t size)$/;"	f	class:BaseBinaryEdge
BaseEdge	trunk/g2o/core/base_edge.h	/^      BaseEdge() : OptimizableGraph::Edge()$/;"	f	class:g2o::BaseEdge
BaseEdge	trunk/g2o/core/base_edge.h	/^  class BaseEdge : public OptimizableGraph::Edge$/;"	c	namespace:g2o
Dimension	trunk/g2o/core/base_edge.h	/^      static const int Dimension = D;$/;"	m	class:g2o::BaseEdge
ErrorVector	trunk/g2o/core/base_edge.h	/^      typedef Matrix<double, D, 1> ErrorVector;$/;"	t	class:g2o::BaseEdge
G2O_BASE_EDGE_H	trunk/g2o/core/base_edge.h	28;"	d
InformationType	trunk/g2o/core/base_edge.h	/^      typedef Matrix<double, D, D> InformationType;$/;"	t	class:g2o::BaseEdge
Measurement	trunk/g2o/core/base_edge.h	/^      typedef E Measurement;$/;"	t	class:g2o::BaseEdge
_error	trunk/g2o/core/base_edge.h	/^      ErrorVector _error;$/;"	m	class:g2o::BaseEdge
_information	trunk/g2o/core/base_edge.h	/^      InformationType _information;$/;"	m	class:g2o::BaseEdge
_measurement	trunk/g2o/core/base_edge.h	/^      Measurement _measurement;$/;"	m	class:g2o::BaseEdge
chi2	trunk/g2o/core/base_edge.h	/^      virtual double chi2() const $/;"	f	class:g2o::BaseEdge
error	trunk/g2o/core/base_edge.h	/^      ErrorVector& error() { return _error;}$/;"	f	class:g2o::BaseEdge
error	trunk/g2o/core/base_edge.h	/^      const ErrorVector& error() const { return _error;}$/;"	f	class:g2o::BaseEdge
errorData	trunk/g2o/core/base_edge.h	/^      virtual const double* errorData() const { return _error.data();}$/;"	f	class:g2o::BaseEdge
errorData	trunk/g2o/core/base_edge.h	/^      virtual double* errorData() { return _error.data();}$/;"	f	class:g2o::BaseEdge
g2o	trunk/g2o/core/base_edge.h	/^namespace g2o {$/;"	n
information	trunk/g2o/core/base_edge.h	/^      InformationType& information() { return _information;}$/;"	f	class:g2o::BaseEdge
information	trunk/g2o/core/base_edge.h	/^      const InformationType& information() const { return _information;}$/;"	f	class:g2o::BaseEdge
informationData	trunk/g2o/core/base_edge.h	/^      virtual const double* informationData() const { return _information.data();}$/;"	f	class:g2o::BaseEdge
informationData	trunk/g2o/core/base_edge.h	/^      virtual double* informationData() { return _information.data();}$/;"	f	class:g2o::BaseEdge
initialEstimate	trunk/g2o/core/base_edge.h	/^      virtual void initialEstimate(const OptimizableGraph::VertexSet&, OptimizableGraph::Vertex*)$/;"	f	class:g2o::BaseEdge
measurement	trunk/g2o/core/base_edge.h	/^      const Measurement& measurement() const { return _measurement;}$/;"	f	class:g2o::BaseEdge
rank	trunk/g2o/core/base_edge.h	/^      virtual int rank() const {return _dimension;}$/;"	f	class:g2o::BaseEdge
robustInformation	trunk/g2o/core/base_edge.h	/^      InformationType robustInformation(const Eigen::Vector3d& rho)$/;"	f	class:g2o::BaseEdge
setInformation	trunk/g2o/core/base_edge.h	/^      void setInformation(const InformationType& information) { _information = information;}$/;"	f	class:g2o::BaseEdge
setMeasurement	trunk/g2o/core/base_edge.h	/^      virtual void setMeasurement(const Measurement& m) { _measurement = m;}$/;"	f	class:g2o::BaseEdge
~BaseEdge	trunk/g2o/core/base_edge.h	/^      virtual ~BaseEdge() {}$/;"	f	class:g2o::BaseEdge
BaseMultiEdge	trunk/g2o/core/base_multi_edge.h	/^      BaseMultiEdge() : BaseEdge<D,E>()$/;"	f	class:g2o::BaseMultiEdge
BaseMultiEdge	trunk/g2o/core/base_multi_edge.h	/^  class BaseMultiEdge : public BaseEdge<D,E>$/;"	c	namespace:g2o
Dimension	trunk/g2o/core/base_multi_edge.h	/^      static const int Dimension = BaseEdge<D,E>::Dimension;$/;"	m	class:g2o::BaseMultiEdge
Dimension	trunk/g2o/core/base_multi_edge.h	/^      static const int Dimension = BaseEdge<D,E>::Dimension;$/;"	m	class:g2o::BaseMultiEdge::E
ErrorVector	trunk/g2o/core/base_multi_edge.h	/^      typedef typename BaseEdge<D,E>::ErrorVector ErrorVector;$/;"	t	class:g2o::BaseMultiEdge
G2O_BASE_MULTI_EDGE_H	trunk/g2o/core/base_multi_edge.h	28;"	d
HessianBlockType	trunk/g2o/core/base_multi_edge.h	/^      typedef Map<MatrixXd, MatrixXd::Flags & AlignedBit ? Aligned : Unaligned > HessianBlockType;$/;"	t	class:g2o::BaseMultiEdge
HessianHelper	trunk/g2o/core/base_multi_edge.h	/^        HessianHelper() : matrix(0, 0, 0), transposed(false) {}$/;"	f	struct:g2o::BaseMultiEdge::HessianHelper
HessianHelper	trunk/g2o/core/base_multi_edge.h	/^      struct HessianHelper {$/;"	s	class:g2o::BaseMultiEdge
InformationType	trunk/g2o/core/base_multi_edge.h	/^      typedef typename BaseEdge<D,E>::InformationType InformationType;$/;"	t	class:g2o::BaseMultiEdge
JacobianType	trunk/g2o/core/base_multi_edge.h	/^      typedef MatrixXd::MapType JacobianType;$/;"	t	class:g2o::BaseMultiEdge
Measurement	trunk/g2o/core/base_multi_edge.h	/^      typedef typename BaseEdge<D,E>::Measurement Measurement;$/;"	t	class:g2o::BaseMultiEdge
_hessian	trunk/g2o/core/base_multi_edge.h	/^      std::vector<HessianHelper> _hessian;$/;"	m	class:g2o::BaseMultiEdge
_jacobianOplus	trunk/g2o/core/base_multi_edge.h	/^      std::vector<JacobianType, aligned_allocator<JacobianType> > _jacobianOplus; \/\/\/< jacobians of the edge (w.r.t. oplus)$/;"	m	class:g2o::BaseMultiEdge
g2o	trunk/g2o/core/base_multi_edge.h	/^namespace g2o {$/;"	n
matrix	trunk/g2o/core/base_multi_edge.h	/^        Map<MatrixXd> matrix;     \/\/\/< the mapped memory$/;"	m	struct:g2o::BaseMultiEdge::HessianHelper
transposed	trunk/g2o/core/base_multi_edge.h	/^        bool transposed;          \/\/\/< the block has to be transposed$/;"	m	struct:g2o::BaseMultiEdge::HessianHelper
allVerticesFixed	trunk/g2o/core/base_multi_edge.hpp	/^bool BaseMultiEdge<D, E>::allVerticesFixed() const$/;"	f	class:BaseMultiEdge
computeQuadraticForm	trunk/g2o/core/base_multi_edge.hpp	/^void BaseMultiEdge<D, E>::computeQuadraticForm(const InformationType& omega, const ErrorVector& weightedError)$/;"	f	class:BaseMultiEdge
computeUpperTriangleIndex	trunk/g2o/core/base_multi_edge.hpp	/^  inline int computeUpperTriangleIndex(int i, int j)$/;"	f	namespace:internal
constructQuadraticForm	trunk/g2o/core/base_multi_edge.hpp	/^void BaseMultiEdge<D, E>::constructQuadraticForm()$/;"	f	class:BaseMultiEdge
internal	trunk/g2o/core/base_multi_edge.hpp	/^namespace internal {$/;"	n
linearizeOplus	trunk/g2o/core/base_multi_edge.hpp	/^void BaseMultiEdge<D, E>::linearizeOplus()$/;"	f	class:BaseMultiEdge
linearizeOplus	trunk/g2o/core/base_multi_edge.hpp	/^void BaseMultiEdge<D, E>::linearizeOplus(JacobianWorkspace& jacobianWorkspace)$/;"	f	class:BaseMultiEdge
mapHessianMemory	trunk/g2o/core/base_multi_edge.hpp	/^void BaseMultiEdge<D, E>::mapHessianMemory(double* d, int i, int j, bool rowMajor)$/;"	f	class:BaseMultiEdge
resize	trunk/g2o/core/base_multi_edge.hpp	/^void BaseMultiEdge<D, E>::resize(size_t size)$/;"	f	class:BaseMultiEdge
BaseUnaryEdge	trunk/g2o/core/base_unary_edge.h	/^      BaseUnaryEdge() : BaseEdge<D,E>(),$/;"	f	class:g2o::BaseUnaryEdge
BaseUnaryEdge	trunk/g2o/core/base_unary_edge.h	/^  class BaseUnaryEdge : public BaseEdge<D,E>$/;"	c	namespace:g2o
Dimension	trunk/g2o/core/base_unary_edge.h	/^      static const int Dimension = BaseEdge<D, E>::Dimension;$/;"	m	class:g2o::BaseUnaryEdge
Dimension	trunk/g2o/core/base_unary_edge.h	/^      static const int Dimension = BaseEdge<D, E>::Dimension;$/;"	m	class:g2o::BaseUnaryEdge::E
ErrorVector	trunk/g2o/core/base_unary_edge.h	/^      typedef typename BaseEdge<D,E>::ErrorVector ErrorVector;$/;"	t	class:g2o::BaseUnaryEdge
G2O_BASE_UNARY_EDGE_H	trunk/g2o/core/base_unary_edge.h	28;"	d
InformationType	trunk/g2o/core/base_unary_edge.h	/^      typedef typename BaseEdge<D,E>::InformationType InformationType;$/;"	t	class:g2o::BaseUnaryEdge
JacobianXiOplusType	trunk/g2o/core/base_unary_edge.h	/^      typedef typename Matrix<double, D, VertexXiType::Dimension>::AlignedMapType JacobianXiOplusType;$/;"	t	class:g2o::BaseUnaryEdge
Measurement	trunk/g2o/core/base_unary_edge.h	/^      typedef typename BaseEdge<D,E>::Measurement Measurement;$/;"	t	class:g2o::BaseUnaryEdge
VertexXiType	trunk/g2o/core/base_unary_edge.h	/^      typedef VertexXi VertexXiType;$/;"	t	class:g2o::BaseUnaryEdge
_jacobianOplusXi	trunk/g2o/core/base_unary_edge.h	/^      JacobianXiOplusType _jacobianOplusXi;$/;"	m	class:g2o::BaseUnaryEdge
g2o	trunk/g2o/core/base_unary_edge.h	/^namespace g2o {$/;"	n
jacobianOplusXi	trunk/g2o/core/base_unary_edge.h	/^      const JacobianXiOplusType& jacobianOplusXi() const { return _jacobianOplusXi;}$/;"	f	class:g2o::BaseUnaryEdge
mapHessianMemory	trunk/g2o/core/base_unary_edge.h	/^      virtual void mapHessianMemory(double*, int, int, bool) {assert(0 && "BaseUnaryEdge does not map memory of the Hessian");}$/;"	f	class:g2o::BaseUnaryEdge
allVerticesFixed	trunk/g2o/core/base_unary_edge.hpp	/^bool BaseUnaryEdge<D, E, VertexXiType>::allVerticesFixed() const$/;"	f	class:BaseUnaryEdge
constructQuadraticForm	trunk/g2o/core/base_unary_edge.hpp	/^void BaseUnaryEdge<D, E, VertexXiType>::constructQuadraticForm()$/;"	f	class:BaseUnaryEdge
initialEstimate	trunk/g2o/core/base_unary_edge.hpp	/^void BaseUnaryEdge<D, E, VertexXiType>::initialEstimate(const OptimizableGraph::VertexSet&, OptimizableGraph::Vertex*)$/;"	f	class:BaseUnaryEdge
linearizeOplus	trunk/g2o/core/base_unary_edge.hpp	/^void BaseUnaryEdge<D, E, VertexXiType>::linearizeOplus()$/;"	f	class:BaseUnaryEdge
linearizeOplus	trunk/g2o/core/base_unary_edge.hpp	/^void BaseUnaryEdge<D, E, VertexXiType>::linearizeOplus(JacobianWorkspace& jacobianWorkspace)$/;"	f	class:BaseUnaryEdge
resize	trunk/g2o/core/base_unary_edge.hpp	/^void BaseUnaryEdge<D, E, VertexXiType>::resize(size_t size)$/;"	f	class:BaseUnaryEdge
A	trunk/g2o/core/base_vertex.h	/^    HessianBlockType& A() { return _hessian;}$/;"	f	class:g2o::BaseVertex
A	trunk/g2o/core/base_vertex.h	/^    const HessianBlockType& A() const { return _hessian;}$/;"	f	class:g2o::BaseVertex
BackupStackType	trunk/g2o/core/base_vertex.h	/^    BackupStackType;$/;"	t	class:g2o::BaseVertex
BaseVertex	trunk/g2o/core/base_vertex.h	/^  class BaseVertex : public OptimizableGraph::Vertex {$/;"	c	namespace:g2o
Dimension	trunk/g2o/core/base_vertex.h	/^    static const int Dimension = D;           \/\/\/< dimension of the estimate (minimal) in the manifold space$/;"	m	class:g2o::BaseVertex
EstimateType	trunk/g2o/core/base_vertex.h	/^    typedef T EstimateType;$/;"	t	class:g2o::BaseVertex
G2O_BASE_VERTEX_H	trunk/g2o/core/base_vertex.h	28;"	d
HessianBlockType	trunk/g2o/core/base_vertex.h	/^    typedef Map<Matrix<double, D, D>, Matrix<double,D,D>::Flags & AlignedBit ? Aligned : Unaligned >  HessianBlockType;$/;"	t	class:g2o::BaseVertex
_b	trunk/g2o/core/base_vertex.h	/^    Matrix<double, D, 1> _b;$/;"	m	class:g2o::BaseVertex
_backup	trunk/g2o/core/base_vertex.h	/^    BackupStackType _backup;$/;"	m	class:g2o::BaseVertex
_estimate	trunk/g2o/core/base_vertex.h	/^    EstimateType _estimate;$/;"	m	class:g2o::BaseVertex
_hessian	trunk/g2o/core/base_vertex.h	/^    HessianBlockType _hessian;$/;"	m	class:g2o::BaseVertex
b	trunk/g2o/core/base_vertex.h	/^    Matrix<double, D, 1>& b() { return _b;}$/;"	f	class:g2o::BaseVertex
b	trunk/g2o/core/base_vertex.h	/^    const Matrix<double, D, 1>& b() const { return _b;}$/;"	f	class:g2o::BaseVertex
b	trunk/g2o/core/base_vertex.h	/^    virtual const double& b(int i) const { assert(i < D); return _b(i);}$/;"	f	class:g2o::BaseVertex
b	trunk/g2o/core/base_vertex.h	/^    virtual double& b(int i) { assert(i < D); return _b(i);}$/;"	f	class:g2o::BaseVertex
bData	trunk/g2o/core/base_vertex.h	/^    virtual double* bData() { return _b.data();}$/;"	f	class:g2o::BaseVertex
copyB	trunk/g2o/core/base_vertex.h	/^    virtual int copyB(double* b_) const {$/;"	f	class:g2o::BaseVertex
discardTop	trunk/g2o/core/base_vertex.h	/^    virtual void discardTop() { assert(!_backup.empty()); _backup.pop();}$/;"	f	class:g2o::BaseVertex
estimate	trunk/g2o/core/base_vertex.h	/^    const EstimateType& estimate() const { return _estimate;}$/;"	f	class:g2o::BaseVertex
g2o	trunk/g2o/core/base_vertex.h	/^namespace g2o {$/;"	n
hessian	trunk/g2o/core/base_vertex.h	/^    virtual const double& hessian(int i, int j) const { assert(i<D && j<D); return _hessian(i,j);}$/;"	f	class:g2o::BaseVertex
hessian	trunk/g2o/core/base_vertex.h	/^    virtual double& hessian(int i, int j)  { assert(i<D && j<D); return _hessian(i,j);}$/;"	f	class:g2o::BaseVertex
hessianData	trunk/g2o/core/base_vertex.h	/^    virtual double* hessianData() { return const_cast<double*>(_hessian.data());}$/;"	f	class:g2o::BaseVertex
hessianDeterminant	trunk/g2o/core/base_vertex.h	/^    virtual double hessianDeterminant() const {return _hessian.determinant();}$/;"	f	class:g2o::BaseVertex
pop	trunk/g2o/core/base_vertex.h	/^    virtual void pop() { assert(!_backup.empty()); _estimate = _backup.top(); _backup.pop(); updateCache();}$/;"	f	class:g2o::BaseVertex
push	trunk/g2o/core/base_vertex.h	/^    virtual void push() { _backup.push(_estimate);}$/;"	f	class:g2o::BaseVertex
setEstimate	trunk/g2o/core/base_vertex.h	/^    void setEstimate(const EstimateType& et) { _estimate = et; updateCache();}$/;"	f	class:g2o::BaseVertex
stackSize	trunk/g2o/core/base_vertex.h	/^    virtual int stackSize() const {return _backup.size();}$/;"	f	class:g2o::BaseVertex
BaseVertex	trunk/g2o/core/base_vertex.hpp	/^BaseVertex<D, T>::BaseVertex() :$/;"	f	class:BaseVertex
clearQuadraticForm	trunk/g2o/core/base_vertex.hpp	/^void BaseVertex<D, T>::clearQuadraticForm() {$/;"	f	class:BaseVertex
mapHessianMemory	trunk/g2o/core/base_vertex.hpp	/^void BaseVertex<D, T>::mapHessianMemory(double* d)$/;"	f	class:BaseVertex
solveDirect	trunk/g2o/core/base_vertex.hpp	/^double BaseVertex<D, T>::solveDirect(double lambda) {$/;"	f	class:BaseVertex
G2OBatchStatistics	trunk/g2o/core/batch_stats.cpp	/^  G2OBatchStatistics::G2OBatchStatistics(){$/;"	f	class:g2o::G2OBatchStatistics
PTHING	trunk/g2o/core/batch_stats.cpp	36;"	d	file:
_globalStats	trunk/g2o/core/batch_stats.cpp	/^  G2OBatchStatistics* G2OBatchStatistics::_globalStats=0;$/;"	m	class:g2o::G2OBatchStatistics	file:
g2o	trunk/g2o/core/batch_stats.cpp	/^namespace g2o {$/;"	n	file:
operator <<	trunk/g2o/core/batch_stats.cpp	/^  std::ostream& operator << (std::ostream& os , const G2OBatchStatistics& st)$/;"	f	namespace:g2o
setGlobalStats	trunk/g2o/core/batch_stats.cpp	/^  void G2OBatchStatistics::setGlobalStats(G2OBatchStatistics* b)$/;"	f	class:g2o::G2OBatchStatistics
BatchStatisticsContainer	trunk/g2o/core/batch_stats.h	/^  typedef std::vector<G2OBatchStatistics> BatchStatisticsContainer;$/;"	t	namespace:g2o
G2OBatchStatistics	trunk/g2o/core/batch_stats.h	/^  struct G2O_CORE_API G2OBatchStatistics {$/;"	s	namespace:g2o
G2O_BATCH_STATS_H_	trunk/g2o/core/batch_stats.h	28;"	d
_globalStats	trunk/g2o/core/batch_stats.h	/^    static G2OBatchStatistics* _globalStats;$/;"	m	struct:g2o::G2OBatchStatistics
chi2	trunk/g2o/core/batch_stats.h	/^    double chi2;                      \/\/\/< total chi2$/;"	m	struct:g2o::G2OBatchStatistics
choleskyNNZ	trunk/g2o/core/batch_stats.h	/^    size_t choleskyNNZ;               \/\/\/< number of non-zeros in the cholesky factor$/;"	m	struct:g2o::G2OBatchStatistics
g2o	trunk/g2o/core/batch_stats.h	/^namespace g2o {$/;"	n
globalStats	trunk/g2o/core/batch_stats.h	/^    static G2OBatchStatistics* globalStats() {return _globalStats;}$/;"	f	struct:g2o::G2OBatchStatistics
hessianDimension	trunk/g2o/core/batch_stats.h	/^    size_t hessianDimension;          \/\/\/< rows \/ cols of the Hessian$/;"	m	struct:g2o::G2OBatchStatistics
hessianLandmarkDimension	trunk/g2o/core/batch_stats.h	/^    size_t hessianLandmarkDimension;  \/\/\/< dimension of the landmark matrix in Schur$/;"	m	struct:g2o::G2OBatchStatistics
hessianPoseDimension	trunk/g2o/core/batch_stats.h	/^    size_t hessianPoseDimension;      \/\/\/< dimension of the pose matrix in Schur$/;"	m	struct:g2o::G2OBatchStatistics
iteration	trunk/g2o/core/batch_stats.h	/^    int iteration;                    \/\/\/< which iteration$/;"	m	struct:g2o::G2OBatchStatistics
iterationsLinearSolver	trunk/g2o/core/batch_stats.h	/^    int    iterationsLinearSolver;    \/\/\/< iterations of PCG, (0 if not used, i.e., Cholesky)$/;"	m	struct:g2o::G2OBatchStatistics
levenbergIterations	trunk/g2o/core/batch_stats.h	/^    int levenbergIterations;          \/\/\/< number of iterations performed by LM$/;"	m	struct:g2o::G2OBatchStatistics
numEdges	trunk/g2o/core/batch_stats.h	/^    int numEdges;                     \/\/\/< how many edges$/;"	m	struct:g2o::G2OBatchStatistics
numVertices	trunk/g2o/core/batch_stats.h	/^    int numVertices;                  \/\/\/< how many vertices are involved$/;"	m	struct:g2o::G2OBatchStatistics
timeIteration	trunk/g2o/core/batch_stats.h	/^    double timeIteration;             \/\/\/< total time;$/;"	m	struct:g2o::G2OBatchStatistics
timeLinearSolution	trunk/g2o/core/batch_stats.h	/^    double timeLinearSolution;        \/\/\/< total time for solving Ax=b (including detup for schur)$/;"	m	struct:g2o::G2OBatchStatistics
timeLinearSolver	trunk/g2o/core/batch_stats.h	/^    double timeLinearSolver;          \/\/\/< time for solving, excluding Schur setup$/;"	m	struct:g2o::G2OBatchStatistics
timeLinearize	trunk/g2o/core/batch_stats.h	/^    double timeLinearize;             \/\/\/< jacobians$/;"	m	struct:g2o::G2OBatchStatistics
timeMarginals	trunk/g2o/core/batch_stats.h	/^    double timeMarginals;             \/\/\/< computing the inverse elements (solve blocks) and thus the marginal covariances$/;"	m	struct:g2o::G2OBatchStatistics
timeNumericDecomposition	trunk/g2o/core/batch_stats.h	/^    double timeNumericDecomposition;  \/\/\/< numeric decomposition  (0 if not done)$/;"	m	struct:g2o::G2OBatchStatistics
timeQuadraticForm	trunk/g2o/core/batch_stats.h	/^    double timeQuadraticForm;         \/\/\/< construct the quadratic form in the graph$/;"	m	struct:g2o::G2OBatchStatistics
timeResiduals	trunk/g2o/core/batch_stats.h	/^    double timeResiduals;             \/\/\/< residuals$/;"	m	struct:g2o::G2OBatchStatistics
timeSchurComplement	trunk/g2o/core/batch_stats.h	/^    double timeSchurComplement;      \/\/\/< compute schur complement (0 if not done)$/;"	m	struct:g2o::G2OBatchStatistics
timeSymbolicDecomposition	trunk/g2o/core/batch_stats.h	/^    double timeSymbolicDecomposition; \/\/\/< symbolic decomposition (0 if not done)$/;"	m	struct:g2o::G2OBatchStatistics
timeUpdate	trunk/g2o/core/batch_stats.h	/^    double timeUpdate;                \/\/\/< time to apply the update$/;"	m	struct:g2o::G2OBatchStatistics
BlockSolver	trunk/g2o/core/block_solver.h	/^  class BlockSolver: public BlockSolverBase {$/;"	c	namespace:g2o
BlockSolverBase	trunk/g2o/core/block_solver.h	/^  class BlockSolverBase : public Solver$/;"	c	namespace:g2o
BlockSolverTraits	trunk/g2o/core/block_solver.h	/^  struct BlockSolverTraits$/;"	s	namespace:g2o
BlockSolverTraits	trunk/g2o/core/block_solver.h	/^  struct BlockSolverTraits<Eigen::Dynamic, Eigen::Dynamic>$/;"	s	namespace:g2o
BlockSolverX	trunk/g2o/core/block_solver.h	/^  typedef BlockSolver< BlockSolverTraits<Eigen::Dynamic, Eigen::Dynamic> > BlockSolverX;$/;"	t	namespace:g2o
BlockSolver_3_2	trunk/g2o/core/block_solver.h	/^  typedef BlockSolver< BlockSolverTraits<3, 2> > BlockSolver_3_2;$/;"	t	namespace:g2o
BlockSolver_6_3	trunk/g2o/core/block_solver.h	/^  typedef BlockSolver< BlockSolverTraits<6, 3> > BlockSolver_6_3;  $/;"	t	namespace:g2o
BlockSolver_7_3	trunk/g2o/core/block_solver.h	/^  typedef BlockSolver< BlockSolverTraits<7, 3> > BlockSolver_7_3;  $/;"	t	namespace:g2o
G2O_BLOCK_SOLVER_H	trunk/g2o/core/block_solver.h	28;"	d
LandmarkDim	trunk/g2o/core/block_solver.h	/^      static const int LandmarkDim = Traits::LandmarkDim;$/;"	m	class:g2o::BlockSolver
LandmarkDim	trunk/g2o/core/block_solver.h	/^    static const int LandmarkDim = Eigen::Dynamic;$/;"	m	struct:g2o::BlockSolverTraits
LandmarkDim	trunk/g2o/core/block_solver.h	/^    static const int LandmarkDim = _LandmarkDim;$/;"	m	struct:g2o::BlockSolverTraits
LandmarkHessianType	trunk/g2o/core/block_solver.h	/^      typedef typename Traits::LandmarkHessianType LandmarkHessianType;$/;"	t	class:g2o::BlockSolver
LandmarkHessianType	trunk/g2o/core/block_solver.h	/^    typedef SparseBlockMatrix<LandmarkMatrixType> LandmarkHessianType;$/;"	t	struct:g2o::BlockSolverTraits
LandmarkMatrixType	trunk/g2o/core/block_solver.h	/^      typedef typename Traits::LandmarkMatrixType LandmarkMatrixType; $/;"	t	class:g2o::BlockSolver
LandmarkMatrixType	trunk/g2o/core/block_solver.h	/^    typedef Matrix<double, LandmarkDim, LandmarkDim> LandmarkMatrixType;$/;"	t	struct:g2o::BlockSolverTraits
LandmarkMatrixType	trunk/g2o/core/block_solver.h	/^    typedef MatrixXd LandmarkMatrixType;$/;"	t	struct:g2o::BlockSolverTraits
LandmarkVectorType	trunk/g2o/core/block_solver.h	/^      typedef typename Traits::LandmarkVectorType LandmarkVectorType;$/;"	t	class:g2o::BlockSolver
LandmarkVectorType	trunk/g2o/core/block_solver.h	/^    typedef Matrix<double, LandmarkDim, 1> LandmarkVectorType;$/;"	t	struct:g2o::BlockSolverTraits
LandmarkVectorType	trunk/g2o/core/block_solver.h	/^    typedef VectorXd LandmarkVectorType;$/;"	t	struct:g2o::BlockSolverTraits
LinearSolverType	trunk/g2o/core/block_solver.h	/^      typedef typename Traits::LinearSolverType LinearSolverType;$/;"	t	class:g2o::BlockSolver
LinearSolverType	trunk/g2o/core/block_solver.h	/^    typedef LinearSolver<PoseMatrixType> LinearSolverType;$/;"	t	struct:g2o::BlockSolverTraits
PoseDim	trunk/g2o/core/block_solver.h	/^      static const int PoseDim = Traits::PoseDim;$/;"	m	class:g2o::BlockSolver
PoseDim	trunk/g2o/core/block_solver.h	/^    static const int PoseDim = Eigen::Dynamic;$/;"	m	struct:g2o::BlockSolverTraits
PoseDim	trunk/g2o/core/block_solver.h	/^    static const int PoseDim = _PoseDim;$/;"	m	struct:g2o::BlockSolverTraits
PoseHessianType	trunk/g2o/core/block_solver.h	/^      typedef typename Traits::PoseHessianType PoseHessianType;$/;"	t	class:g2o::BlockSolver
PoseHessianType	trunk/g2o/core/block_solver.h	/^    typedef SparseBlockMatrix<PoseMatrixType> PoseHessianType;$/;"	t	struct:g2o::BlockSolverTraits
PoseLandmarkHessianType	trunk/g2o/core/block_solver.h	/^      typedef typename Traits::PoseLandmarkHessianType PoseLandmarkHessianType;$/;"	t	class:g2o::BlockSolver
PoseLandmarkHessianType	trunk/g2o/core/block_solver.h	/^    typedef SparseBlockMatrix<PoseLandmarkMatrixType> PoseLandmarkHessianType;$/;"	t	struct:g2o::BlockSolverTraits
PoseLandmarkMatrixType	trunk/g2o/core/block_solver.h	/^      typedef typename Traits::PoseLandmarkMatrixType PoseLandmarkMatrixType;$/;"	t	class:g2o::BlockSolver
PoseLandmarkMatrixType	trunk/g2o/core/block_solver.h	/^    typedef Matrix<double, PoseDim, LandmarkDim> PoseLandmarkMatrixType;$/;"	t	struct:g2o::BlockSolverTraits
PoseLandmarkMatrixType	trunk/g2o/core/block_solver.h	/^    typedef MatrixXd PoseLandmarkMatrixType;$/;"	t	struct:g2o::BlockSolverTraits
PoseMatrixType	trunk/g2o/core/block_solver.h	/^      typedef typename Traits::PoseMatrixType PoseMatrixType;$/;"	t	class:g2o::BlockSolver
PoseMatrixType	trunk/g2o/core/block_solver.h	/^    typedef Matrix<double, PoseDim, PoseDim> PoseMatrixType;$/;"	t	struct:g2o::BlockSolverTraits
PoseMatrixType	trunk/g2o/core/block_solver.h	/^    typedef MatrixXd PoseMatrixType;$/;"	t	struct:g2o::BlockSolverTraits
PoseVectorType	trunk/g2o/core/block_solver.h	/^      typedef typename Traits::PoseVectorType PoseVectorType;$/;"	t	class:g2o::BlockSolver
PoseVectorType	trunk/g2o/core/block_solver.h	/^    typedef Matrix<double, PoseDim, 1> PoseVectorType;$/;"	t	struct:g2o::BlockSolverTraits
PoseVectorType	trunk/g2o/core/block_solver.h	/^    typedef VectorXd PoseVectorType;$/;"	t	struct:g2o::BlockSolverTraits
_DInvSchur	trunk/g2o/core/block_solver.h	/^      SparseBlockMatrixDiagonal<LandmarkMatrixType>* _DInvSchur;$/;"	m	class:g2o::BlockSolver
_Hll	trunk/g2o/core/block_solver.h	/^      SparseBlockMatrix<LandmarkMatrixType>* _Hll;$/;"	m	class:g2o::BlockSolver
_Hpl	trunk/g2o/core/block_solver.h	/^      SparseBlockMatrix<PoseLandmarkMatrixType>* _Hpl;$/;"	m	class:g2o::BlockSolver
_HplCCS	trunk/g2o/core/block_solver.h	/^      SparseBlockMatrixCCS<PoseLandmarkMatrixType>* _HplCCS;$/;"	m	class:g2o::BlockSolver
_Hpp	trunk/g2o/core/block_solver.h	/^      SparseBlockMatrix<PoseMatrixType>* _Hpp;$/;"	m	class:g2o::BlockSolver
_Hschur	trunk/g2o/core/block_solver.h	/^      SparseBlockMatrix<PoseMatrixType>* _Hschur;$/;"	m	class:g2o::BlockSolver
_HschurTransposedCCS	trunk/g2o/core/block_solver.h	/^      SparseBlockMatrixCCS<PoseMatrixType>* _HschurTransposedCCS;$/;"	m	class:g2o::BlockSolver
_bschur	trunk/g2o/core/block_solver.h	/^      double* _bschur;$/;"	m	class:g2o::BlockSolver
_coefficients	trunk/g2o/core/block_solver.h	/^      double* _coefficients;$/;"	m	class:g2o::BlockSolver
_coefficientsMutex	trunk/g2o/core/block_solver.h	/^      std::vector<OpenMPMutex> _coefficientsMutex;$/;"	m	class:g2o::BlockSolver
_diagonalBackupLandmark	trunk/g2o/core/block_solver.h	/^      std::vector<LandmarkVectorType, Eigen::aligned_allocator<LandmarkVectorType> > _diagonalBackupLandmark;$/;"	m	class:g2o::BlockSolver
_diagonalBackupPose	trunk/g2o/core/block_solver.h	/^      std::vector<PoseVectorType, Eigen::aligned_allocator<PoseVectorType> > _diagonalBackupPose;$/;"	m	class:g2o::BlockSolver
_doSchur	trunk/g2o/core/block_solver.h	/^      bool _doSchur;$/;"	m	class:g2o::BlockSolver
_linearSolver	trunk/g2o/core/block_solver.h	/^      LinearSolver<PoseMatrixType>* _linearSolver;$/;"	m	class:g2o::BlockSolver
_numLandmarks	trunk/g2o/core/block_solver.h	/^      int _numPoses, _numLandmarks;$/;"	m	class:g2o::BlockSolver
_numPoses	trunk/g2o/core/block_solver.h	/^      int _numPoses, _numLandmarks;$/;"	m	class:g2o::BlockSolver
_sizeLandmarks	trunk/g2o/core/block_solver.h	/^      int _sizePoses, _sizeLandmarks;$/;"	m	class:g2o::BlockSolver
_sizePoses	trunk/g2o/core/block_solver.h	/^      int _sizePoses, _sizeLandmarks;$/;"	m	class:g2o::BlockSolver
g2o	trunk/g2o/core/block_solver.h	/^namespace g2o {$/;"	n
linearSolver	trunk/g2o/core/block_solver.h	/^      LinearSolver<PoseMatrixType>* linearSolver() const { return _linearSolver;}$/;"	f	class:g2o::BlockSolver
multiplyHessian	trunk/g2o/core/block_solver.h	/^      virtual void multiplyHessian(double* dest, const double* src) const { _Hpp->multiplySymmetricUpperTriangle(dest, src);}$/;"	f	class:g2o::BlockSolver
schur	trunk/g2o/core/block_solver.h	/^      virtual bool schur() { return _doSchur;}$/;"	f	class:g2o::BlockSolver
setSchur	trunk/g2o/core/block_solver.h	/^      virtual void setSchur(bool s) { _doSchur = s;}$/;"	f	class:g2o::BlockSolver
supportsSchur	trunk/g2o/core/block_solver.h	/^      virtual bool supportsSchur() {return true;}$/;"	f	class:g2o::BlockSolver
writeDebug	trunk/g2o/core/block_solver.h	/^      virtual bool writeDebug() const {return _linearSolver->writeDebug();}$/;"	f	class:g2o::BlockSolver
~BlockSolverBase	trunk/g2o/core/block_solver.h	/^      virtual ~BlockSolverBase() {}$/;"	f	class:g2o::BlockSolverBase
BlockSolver	trunk/g2o/core/block_solver.hpp	/^BlockSolver<Traits>::BlockSolver(LinearSolverType* linearSolver) :$/;"	f	class:g2o::BlockSolver
buildStructure	trunk/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::buildStructure(bool zeroBlocks)$/;"	f	class:g2o::BlockSolver
buildSystem	trunk/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::buildSystem()$/;"	f	class:g2o::BlockSolver
computeMarginals	trunk/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::computeMarginals(SparseBlockMatrix<MatrixXd>& spinv, const std::vector<std::pair<int, int> >& blockIndices)$/;"	f	class:g2o::BlockSolver
deallocate	trunk/g2o/core/block_solver.hpp	/^void BlockSolver<Traits>::deallocate()$/;"	f	class:g2o::BlockSolver
g2o	trunk/g2o/core/block_solver.hpp	/^namespace g2o {$/;"	n
init	trunk/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::init(SparseOptimizer* optimizer, bool online)$/;"	f	class:g2o::BlockSolver
resize	trunk/g2o/core/block_solver.hpp	/^void BlockSolver<Traits>::resize(int* blockPoseIndices, int numPoseBlocks, $/;"	f	class:g2o::BlockSolver
restoreDiagonal	trunk/g2o/core/block_solver.hpp	/^void BlockSolver<Traits>::restoreDiagonal()$/;"	f	class:g2o::BlockSolver
saveHessian	trunk/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::saveHessian(const std::string& fileName) const$/;"	f	class:g2o::BlockSolver
setLambda	trunk/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::setLambda(double lambda, bool backup)$/;"	f	class:g2o::BlockSolver
setWriteDebug	trunk/g2o/core/block_solver.hpp	/^void BlockSolver<Traits>::setWriteDebug(bool writeDebug)$/;"	f	class:g2o::BlockSolver
solve	trunk/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::solve(){$/;"	f	class:g2o::BlockSolver
updateStructure	trunk/g2o/core/block_solver.hpp	/^bool BlockSolver<Traits>::updateStructure(const std::vector<HyperGraph::Vertex*>& vset, const HyperGraph::EdgeSet& edges)$/;"	f	class:g2o::BlockSolver
~BlockSolver	trunk/g2o/core/block_solver.hpp	/^BlockSolver<Traits>::~BlockSolver()$/;"	f	class:g2o::BlockSolver
Cache	trunk/g2o/core/cache.cpp	/^  Cache::Cache(CacheContainer* container_, const ParameterVector& parameters_) :$/;"	f	class:g2o::Cache
CacheContainer	trunk/g2o/core/cache.cpp	/^  CacheContainer::CacheContainer(OptimizableGraph::Vertex* vertex_) {$/;"	f	class:g2o::CacheContainer
CacheKey	trunk/g2o/core/cache.cpp	/^  Cache::CacheKey::CacheKey() :$/;"	f	class:g2o::Cache::CacheKey
CacheKey	trunk/g2o/core/cache.cpp	/^  Cache::CacheKey::CacheKey(const std::string& type_, const ParameterVector& parameters_) :$/;"	f	class:g2o::Cache::CacheKey
container	trunk/g2o/core/cache.cpp	/^  CacheContainer* Cache::container() {$/;"	f	class:g2o::Cache
createCache	trunk/g2o/core/cache.cpp	/^  Cache* CacheContainer::createCache(const Cache::CacheKey& key){$/;"	f	class:g2o::CacheContainer
findCache	trunk/g2o/core/cache.cpp	/^  Cache* CacheContainer::findCache(const Cache::CacheKey& key) {$/;"	f	class:g2o::CacheContainer
g2o	trunk/g2o/core/cache.cpp	/^namespace g2o {$/;"	n	file:
graph	trunk/g2o/core/cache.cpp	/^  OptimizableGraph* Cache::graph() {$/;"	f	class:g2o::Cache
graph	trunk/g2o/core/cache.cpp	/^  OptimizableGraph* CacheContainer::graph(){$/;"	f	class:g2o::CacheContainer
installDependency	trunk/g2o/core/cache.cpp	/^  Cache* Cache::installDependency(const std::string& type_, const std::vector<int>& parameterIndices){$/;"	f	class:g2o::Cache
key	trunk/g2o/core/cache.cpp	/^  Cache::CacheKey Cache::key() const {$/;"	f	class:g2o::Cache
operator <	trunk/g2o/core/cache.cpp	/^  bool Cache::CacheKey::operator<(const Cache::CacheKey& c) const{$/;"	f	class:g2o::Cache::CacheKey
parameters	trunk/g2o/core/cache.cpp	/^  ParameterVector& Cache::parameters() {$/;"	f	class:g2o::Cache
resolveDependancies	trunk/g2o/core/cache.cpp	/^  bool Cache::resolveDependancies(){$/;"	f	class:g2o::Cache
setUpdateNeeded	trunk/g2o/core/cache.cpp	/^  void CacheContainer::setUpdateNeeded(bool needUpdate) {$/;"	f	class:g2o::CacheContainer
update	trunk/g2o/core/cache.cpp	/^  void Cache::update(){$/;"	f	class:g2o::Cache
update	trunk/g2o/core/cache.cpp	/^  void CacheContainer::update() {$/;"	f	class:g2o::CacheContainer
vertex	trunk/g2o/core/cache.cpp	/^  OptimizableGraph::Vertex* Cache::vertex() { $/;"	f	class:g2o::Cache
vertex	trunk/g2o/core/cache.cpp	/^  OptimizableGraph::Vertex* CacheContainer::vertex() {$/;"	f	class:g2o::CacheContainer
~CacheContainer	trunk/g2o/core/cache.cpp	/^  CacheContainer::~CacheContainer(){$/;"	f	class:g2o::CacheContainer
Cache	trunk/g2o/core/cache.h	/^  class G2O_CORE_API Cache: public HyperGraph::HyperGraphElement$/;"	c	namespace:g2o
CacheContainer	trunk/g2o/core/cache.h	/^  class G2O_CORE_API CacheContainer: public std::map<Cache::CacheKey, Cache*>$/;"	c	namespace:g2o
CacheKey	trunk/g2o/core/cache.h	/^      class G2O_CORE_API CacheKey$/;"	c	class:g2o::Cache
G2O_CACHE_HH_	trunk/g2o/core/cache.h	28;"	d
_container	trunk/g2o/core/cache.h	/^      CacheContainer* _container;$/;"	m	class:g2o::Cache
_parameters	trunk/g2o/core/cache.h	/^          ParameterVector _parameters;$/;"	m	class:g2o::Cache::CacheKey
_parameters	trunk/g2o/core/cache.h	/^      ParameterVector _parameters;$/;"	m	class:g2o::Cache
_parentCaches	trunk/g2o/core/cache.h	/^      std::vector<Cache*> _parentCaches;$/;"	m	class:g2o::Cache
_type	trunk/g2o/core/cache.h	/^          std::string _type;$/;"	m	class:g2o::Cache::CacheKey
_updateNeeded	trunk/g2o/core/cache.h	/^      bool _updateNeeded;$/;"	m	class:g2o::Cache
_updateNeeded	trunk/g2o/core/cache.h	/^      bool _updateNeeded;$/;"	m	class:g2o::CacheContainer
_vertex	trunk/g2o/core/cache.h	/^      OptimizableGraph::Vertex* _vertex;$/;"	m	class:g2o::CacheContainer
elementType	trunk/g2o/core/cache.h	/^      virtual HyperGraph::HyperGraphElementType elementType() const { return HyperGraph::HGET_CACHE;}$/;"	f	class:g2o::Cache
g2o	trunk/g2o/core/cache.h	/^namespace g2o {$/;"	n
parameters	trunk/g2o/core/cache.h	/^          const ParameterVector& parameters() const { return _parameters;}$/;"	f	class:g2o::Cache::CacheKey
resolveCache	trunk/g2o/core/cache.h	/^  void OptimizableGraph::Edge::resolveCache(CacheType*& cache, $/;"	f	class:g2o::OptimizableGraph::Edge
type	trunk/g2o/core/cache.h	/^          const std::string& type() const { return _type;}$/;"	f	class:g2o::Cache::CacheKey
AbstractHyperGraphElementCreator	trunk/g2o/core/creators.h	/^  class G2O_CORE_API AbstractHyperGraphElementCreator$/;"	c	namespace:g2o
G2O_CREATORS_H	trunk/g2o/core/creators.h	28;"	d
HyperGraphElementCreator	trunk/g2o/core/creators.h	/^      HyperGraphElementCreator() : _name(typeid(T).name()) {}$/;"	f	class:g2o::HyperGraphElementCreator
HyperGraphElementCreator	trunk/g2o/core/creators.h	/^  class HyperGraphElementCreator : public AbstractHyperGraphElementCreator$/;"	c	namespace:g2o
_name	trunk/g2o/core/creators.h	/^      std::string _name;$/;"	m	class:g2o::HyperGraphElementCreator
construct	trunk/g2o/core/creators.h	/^      HyperGraph::HyperGraphElement* construct() { return new T;}$/;"	f	class:g2o::HyperGraphElementCreator
g2o	trunk/g2o/core/creators.h	/^namespace g2o$/;"	n
name	trunk/g2o/core/creators.h	/^      virtual const std::string& name() const { return _name;}$/;"	f	class:g2o::HyperGraphElementCreator
~AbstractHyperGraphElementCreator	trunk/g2o/core/creators.h	/^      virtual ~AbstractHyperGraphElementCreator() { }$/;"	f	class:g2o::AbstractHyperGraphElementCreator
AdjacencyMapEntry	trunk/g2o/core/estimate_propagator.cpp	/^  EstimatePropagator::AdjacencyMapEntry::AdjacencyMapEntry()$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
EstimatePropagator	trunk/g2o/core/estimate_propagator.cpp	/^  EstimatePropagator::EstimatePropagator(OptimizableGraph* g): _graph(g)$/;"	f	class:g2o::EstimatePropagator
EstimatePropagatorCost	trunk/g2o/core/estimate_propagator.cpp	/^  EstimatePropagatorCost::EstimatePropagatorCost (SparseOptimizer* graph) :$/;"	f	class:g2o::EstimatePropagatorCost
EstimatePropagatorCostOdometry	trunk/g2o/core/estimate_propagator.cpp	/^  EstimatePropagatorCostOdometry::EstimatePropagatorCostOdometry(SparseOptimizer* graph) :$/;"	f	class:g2o::EstimatePropagatorCostOdometry
FrontierLevelCmp	trunk/g2o/core/estimate_propagator.cpp	/^  struct FrontierLevelCmp {$/;"	s	namespace:g2o	file:
g2o	trunk/g2o/core/estimate_propagator.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/core/estimate_propagator.cpp	/^    bool operator()(EstimatePropagator::AdjacencyMapEntry* e1, EstimatePropagator::AdjacencyMapEntry* e2) const$/;"	f	struct:g2o::FrontierLevelCmp
operator ()	trunk/g2o/core/estimate_propagator.cpp	/^  double EstimatePropagatorCost::operator()(OptimizableGraph::Edge* edge, const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to_) const$/;"	f	class:g2o::EstimatePropagatorCost
operator ()	trunk/g2o/core/estimate_propagator.cpp	/^  double EstimatePropagatorCostOdometry::operator()(OptimizableGraph::Edge* edge, const OptimizableGraph::VertexSet& from_, OptimizableGraph::Vertex* to_) const$/;"	f	class:g2o::EstimatePropagatorCostOdometry
pop	trunk/g2o/core/estimate_propagator.cpp	/^  EstimatePropagator::AdjacencyMapEntry* EstimatePropagator::PriorityQueue::pop()$/;"	f	class:g2o::EstimatePropagator::PriorityQueue
propagate	trunk/g2o/core/estimate_propagator.cpp	/^  void EstimatePropagator::propagate(OptimizableGraph::Vertex* v, $/;"	f	class:g2o::EstimatePropagator
propagate	trunk/g2o/core/estimate_propagator.cpp	/^  void EstimatePropagator::propagate(OptimizableGraph::VertexSet& vset, $/;"	f	class:g2o::EstimatePropagator
push	trunk/g2o/core/estimate_propagator.cpp	/^  void EstimatePropagator::PriorityQueue::push(AdjacencyMapEntry* entry)$/;"	f	class:g2o::EstimatePropagator::PriorityQueue
reset	trunk/g2o/core/estimate_propagator.cpp	/^  void EstimatePropagator::AdjacencyMapEntry::reset()$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
reset	trunk/g2o/core/estimate_propagator.cpp	/^  void EstimatePropagator::reset()$/;"	f	class:g2o::EstimatePropagator
AdjacencyMap	trunk/g2o/core/estimate_propagator.h	/^      typedef std::tr1::unordered_map<OptimizableGraph::Vertex*, AdjacencyMapEntry, VertexIDHashFunction> AdjacencyMap;$/;"	t	class:g2o::EstimatePropagator
AdjacencyMapEntry	trunk/g2o/core/estimate_propagator.h	/^      class AdjacencyMapEntry {$/;"	c	class:g2o::EstimatePropagator
EstimatePropagator	trunk/g2o/core/estimate_propagator.h	/^  class G2O_CORE_API EstimatePropagator {$/;"	c	namespace:g2o
EstimatePropagatorCost	trunk/g2o/core/estimate_propagator.h	/^  class G2O_CORE_API EstimatePropagatorCost {$/;"	c	namespace:g2o
EstimatePropagatorCostOdometry	trunk/g2o/core/estimate_propagator.h	/^  class G2O_CORE_API EstimatePropagatorCostOdometry : public EstimatePropagatorCost {$/;"	c	namespace:g2o
G2O_ESTIMATE_PROPAGATOR_H	trunk/g2o/core/estimate_propagator.h	28;"	d
PriorityQueue	trunk/g2o/core/estimate_propagator.h	/^      class PriorityQueue : public std::multimap<double, AdjacencyMapEntry*> {$/;"	c	class:g2o::EstimatePropagator
PropagateAction	trunk/g2o/core/estimate_propagator.h	/^      struct PropagateAction {$/;"	s	class:g2o::EstimatePropagator
PropagateCost	trunk/g2o/core/estimate_propagator.h	/^      typedef EstimatePropagatorCost PropagateCost;$/;"	t	class:g2o::EstimatePropagator
VertexIDHashFunction	trunk/g2o/core/estimate_propagator.h	/^      class VertexIDHashFunction {$/;"	c	class:g2o::EstimatePropagator
_adjacencyMap	trunk/g2o/core/estimate_propagator.h	/^      AdjacencyMap _adjacencyMap;$/;"	m	class:g2o::EstimatePropagator
_child	trunk/g2o/core/estimate_propagator.h	/^          OptimizableGraph::Vertex* _child;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
_distance	trunk/g2o/core/estimate_propagator.h	/^          double _distance;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
_edge	trunk/g2o/core/estimate_propagator.h	/^          OptimizableGraph::Edge* _edge;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
_frontierLevel	trunk/g2o/core/estimate_propagator.h	/^          int _frontierLevel;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
_graph	trunk/g2o/core/estimate_propagator.h	/^      OptimizableGraph* _graph;$/;"	m	class:g2o::EstimatePropagator
_graph	trunk/g2o/core/estimate_propagator.h	/^      SparseOptimizer* _graph;$/;"	m	class:g2o::EstimatePropagatorCost
_parent	trunk/g2o/core/estimate_propagator.h	/^          OptimizableGraph::VertexSet _parent;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
_visited	trunk/g2o/core/estimate_propagator.h	/^      OptimizableGraph::VertexSet _visited;$/;"	m	class:g2o::EstimatePropagator
adjacencyMap	trunk/g2o/core/estimate_propagator.h	/^      AdjacencyMap& adjacencyMap() {return _adjacencyMap; }$/;"	f	class:g2o::EstimatePropagator
child	trunk/g2o/core/estimate_propagator.h	/^          OptimizableGraph::Vertex* child() const {return _child;}$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
distance	trunk/g2o/core/estimate_propagator.h	/^          double distance() const {return _distance;}$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
edge	trunk/g2o/core/estimate_propagator.h	/^          OptimizableGraph::Edge* edge() const {return _edge;}$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
frontierLevel	trunk/g2o/core/estimate_propagator.h	/^          int frontierLevel() const { return _frontierLevel;}$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
g2o	trunk/g2o/core/estimate_propagator.h	/^namespace g2o {$/;"	n
graph	trunk/g2o/core/estimate_propagator.h	/^      OptimizableGraph* graph() {return _graph;} $/;"	f	class:g2o::EstimatePropagator
inQueue	trunk/g2o/core/estimate_propagator.h	/^          bool inQueue;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
name	trunk/g2o/core/estimate_propagator.h	/^      virtual const char* name() const { return "odometry";}$/;"	f	class:g2o::EstimatePropagatorCostOdometry
name	trunk/g2o/core/estimate_propagator.h	/^      virtual const char* name() const { return "spanning tree";}$/;"	f	class:g2o::EstimatePropagatorCost
operator ()	trunk/g2o/core/estimate_propagator.h	/^          size_t operator ()(const OptimizableGraph::Vertex* v) const { return v->id();}$/;"	f	class:g2o::EstimatePropagator::VertexIDHashFunction
operator ()	trunk/g2o/core/estimate_propagator.h	/^        virtual void operator()(OptimizableGraph::Edge* e, const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to) const$/;"	f	struct:g2o::EstimatePropagator::PropagateAction
parent	trunk/g2o/core/estimate_propagator.h	/^          const OptimizableGraph::VertexSet& parent() const {return _parent;}$/;"	f	class:g2o::EstimatePropagator::AdjacencyMapEntry
queueIt	trunk/g2o/core/estimate_propagator.h	/^          PriorityQueue::iterator queueIt;$/;"	m	class:g2o::EstimatePropagator::AdjacencyMapEntry
visited	trunk/g2o/core/estimate_propagator.h	/^      OptimizableGraph::VertexSet& visited() {return _visited; }$/;"	f	class:g2o::EstimatePropagator
Factory	trunk/g2o/core/factory.cpp	/^Factory::Factory()$/;"	f	class:g2o::Factory
construct	trunk/g2o/core/factory.cpp	/^HyperGraph::HyperGraphElement* Factory::construct(const std::string& tag) const$/;"	f	class:g2o::Factory
construct	trunk/g2o/core/factory.cpp	/^HyperGraph::HyperGraphElement* Factory::construct(const std::string& tag, const HyperGraph::GraphElemBitset& elemsToConstruct) const$/;"	f	class:g2o::Factory
destroy	trunk/g2o/core/factory.cpp	/^void Factory::destroy()$/;"	f	class:g2o::Factory
factoryInstance	trunk/g2o/core/factory.cpp	/^Factory* Factory::factoryInstance = 0;$/;"	m	class:g2o::Factory	file:
fillKnownTypes	trunk/g2o/core/factory.cpp	/^void Factory::fillKnownTypes(std::vector<std::string>& types) const$/;"	f	class:g2o::Factory
g2o	trunk/g2o/core/factory.cpp	/^namespace g2o {$/;"	n	file:
instance	trunk/g2o/core/factory.cpp	/^Factory* Factory::instance()$/;"	f	class:g2o::Factory
knowsTag	trunk/g2o/core/factory.cpp	/^bool Factory::knowsTag(const std::string& tag, int* elementType) const$/;"	f	class:g2o::Factory
printRegisteredTypes	trunk/g2o/core/factory.cpp	/^void Factory::printRegisteredTypes(std::ostream& os, bool comment) const$/;"	f	class:g2o::Factory
registerType	trunk/g2o/core/factory.cpp	/^void Factory::registerType(const std::string& tag, AbstractHyperGraphElementCreator* c)$/;"	f	class:g2o::Factory
tag	trunk/g2o/core/factory.cpp	/^const std::string& Factory::tag(const HyperGraph::HyperGraphElement* e) const$/;"	f	class:g2o::Factory
unregisterType	trunk/g2o/core/factory.cpp	/^  void Factory::unregisterType(const std::string& tag)$/;"	f	class:g2o::Factory
~Factory	trunk/g2o/core/factory.cpp	/^Factory::~Factory()$/;"	f	class:g2o::Factory
CreatorInformation	trunk/g2o/core/factory.h	/^          CreatorInformation()$/;"	f	class:g2o::Factory::CreatorInformation
CreatorInformation	trunk/g2o/core/factory.h	/^      class CreatorInformation$/;"	c	class:g2o::Factory
CreatorMap	trunk/g2o/core/factory.h	/^      typedef std::map<std::string, CreatorInformation*>               CreatorMap;$/;"	t	class:g2o::Factory
Factory	trunk/g2o/core/factory.h	/^  class G2O_CORE_API Factory$/;"	c	namespace:g2o
G2O_FACTORY_EXPORT	trunk/g2o/core/factory.h	155;"	d
G2O_FACTORY_EXPORT	trunk/g2o/core/factory.h	158;"	d
G2O_FACTORY_H	trunk/g2o/core/factory.h	28;"	d
G2O_FACTORY_IMPORT	trunk/g2o/core/factory.h	156;"	d
G2O_FACTORY_IMPORT	trunk/g2o/core/factory.h	159;"	d
G2O_REGISTER_TYPE	trunk/g2o/core/factory.h	163;"	d
G2O_REGISTER_TYPE_GROUP	trunk/g2o/core/factory.h	171;"	d
G2O_USE_TYPE_BY_CLASS_NAME	trunk/g2o/core/factory.h	167;"	d
G2O_USE_TYPE_GROUP	trunk/g2o/core/factory.h	174;"	d
RegisterTypeProxy	trunk/g2o/core/factory.h	/^      RegisterTypeProxy(const std::string& name) : _name(name)$/;"	f	class:g2o::RegisterTypeProxy
RegisterTypeProxy	trunk/g2o/core/factory.h	/^  class RegisterTypeProxy$/;"	c	namespace:g2o
TagLookup	trunk/g2o/core/factory.h	/^      typedef std::map<std::string, std::string>                      TagLookup;$/;"	t	class:g2o::Factory
_creator	trunk/g2o/core/factory.h	/^      CreatorMap _creator;     \/\/\/< look-up map for the existing creators$/;"	m	class:g2o::Factory
_name	trunk/g2o/core/factory.h	/^      std::string _name;$/;"	m	class:g2o::RegisterTypeProxy
_tagLookup	trunk/g2o/core/factory.h	/^      TagLookup _tagLookup;    \/\/\/< reverse look-up, class name to tag$/;"	m	class:g2o::Factory
creator	trunk/g2o/core/factory.h	/^          AbstractHyperGraphElementCreator* creator;$/;"	m	class:g2o::Factory::CreatorInformation
elementTypeBit	trunk/g2o/core/factory.h	/^          int elementTypeBit;$/;"	m	class:g2o::Factory::CreatorInformation
factoryInstance	trunk/g2o/core/factory.h	/^      static Factory* factoryInstance;$/;"	m	class:g2o::Factory
g2o	trunk/g2o/core/factory.h	/^namespace g2o {$/;"	n
~CreatorInformation	trunk/g2o/core/factory.h	/^          ~CreatorInformation()$/;"	f	class:g2o::Factory::CreatorInformation
~RegisterTypeProxy	trunk/g2o/core/factory.h	/^      ~RegisterTypeProxy()$/;"	f	class:g2o::RegisterTypeProxy
G2O_CORE_API	trunk/g2o/core/g2o_core_api.h	19;"	d
G2O_CORE_API	trunk/g2o/core/g2o_core_api.h	21;"	d
G2O_CORE_API	trunk/g2o/core/g2o_core_api.h	24;"	d
G2O_CORE_API	trunk/g2o/core/g2o_core_api.h	29;"	d
G2O_CORE_API_H	trunk/g2o/core/g2o_core_api.h	11;"	d
AdjacencyMapEntry	trunk/g2o/core/hyper_dijkstra.cpp	/^  HyperDijkstra::AdjacencyMapEntry::AdjacencyMapEntry(HyperGraph::Vertex* child_, HyperGraph::Vertex* parent_, $/;"	f	class:g2o::HyperDijkstra::AdjacencyMapEntry
HyperDijkstra	trunk/g2o/core/hyper_dijkstra.cpp	/^  HyperDijkstra::HyperDijkstra(HyperGraph* g): _graph(g)$/;"	f	class:g2o::HyperDijkstra
computeTree	trunk/g2o/core/hyper_dijkstra.cpp	/^  void HyperDijkstra::computeTree(AdjacencyMap& amap)$/;"	f	class:g2o::HyperDijkstra
connectedSubset	trunk/g2o/core/hyper_dijkstra.cpp	/^  void HyperDijkstra::connectedSubset(HyperGraph::VertexSet& connected, HyperGraph::VertexSet& visited, $/;"	f	class:g2o::HyperDijkstra
g2o	trunk/g2o/core/hyper_dijkstra.cpp	/^namespace g2o{$/;"	n	file:
operator ()	trunk/g2o/core/hyper_dijkstra.cpp	/^  double UniformCostFunction::operator () (HyperGraph::Edge* \/*edge*\/, HyperGraph::Vertex* \/*from*\/, HyperGraph::Vertex* \/*to*\/)$/;"	f	class:g2o::UniformCostFunction
operator <	trunk/g2o/core/hyper_dijkstra.cpp	/^  bool operator<(const HyperDijkstra::AdjacencyMapEntry& a, const HyperDijkstra::AdjacencyMapEntry& b)$/;"	f	namespace:g2o
perform	trunk/g2o/core/hyper_dijkstra.cpp	/^  double HyperDijkstra::TreeAction::perform(HyperGraph::Vertex* v, HyperGraph::Vertex* vParent, HyperGraph::Edge* e){$/;"	f	class:g2o::HyperDijkstra::TreeAction
perform	trunk/g2o/core/hyper_dijkstra.cpp	/^  double HyperDijkstra::TreeAction::perform(HyperGraph::Vertex* v, HyperGraph::Vertex* vParent, HyperGraph::Edge* e, double distance){$/;"	f	class:g2o::HyperDijkstra::TreeAction
reset	trunk/g2o/core/hyper_dijkstra.cpp	/^  void HyperDijkstra::reset()$/;"	f	class:g2o::HyperDijkstra
shortestPaths	trunk/g2o/core/hyper_dijkstra.cpp	/^  void HyperDijkstra::shortestPaths(HyperGraph::Vertex* v, HyperDijkstra::CostFunction* cost, double maxDistance, $/;"	f	class:g2o::HyperDijkstra
shortestPaths	trunk/g2o/core/hyper_dijkstra.cpp	/^  void HyperDijkstra::shortestPaths(HyperGraph::VertexSet& vset, HyperDijkstra::CostFunction* cost, $/;"	f	class:g2o::HyperDijkstra
visitAdjacencyMap	trunk/g2o/core/hyper_dijkstra.cpp	/^  void HyperDijkstra::visitAdjacencyMap(AdjacencyMap& amap, TreeAction* action, bool useDistance)$/;"	f	class:g2o::HyperDijkstra
AdjacencyMap	trunk/g2o/core/hyper_dijkstra.h	/^    typedef std::map<HyperGraph::Vertex*, AdjacencyMapEntry> AdjacencyMap;$/;"	t	struct:g2o::HyperDijkstra
AdjacencyMapEntry	trunk/g2o/core/hyper_dijkstra.h	/^    struct G2O_CORE_API AdjacencyMapEntry{$/;"	s	struct:g2o::HyperDijkstra
CostFunction	trunk/g2o/core/hyper_dijkstra.h	/^    struct G2O_CORE_API CostFunction {$/;"	s	struct:g2o::HyperDijkstra
G2O_AIS_GENERAL_DIJKSTRA_HH	trunk/g2o/core/hyper_dijkstra.h	28;"	d
HyperDijkstra	trunk/g2o/core/hyper_dijkstra.h	/^  struct G2O_CORE_API HyperDijkstra{$/;"	s	namespace:g2o
TreeAction	trunk/g2o/core/hyper_dijkstra.h	/^    struct G2O_CORE_API TreeAction {$/;"	s	struct:g2o::HyperDijkstra
UniformCostFunction	trunk/g2o/core/hyper_dijkstra.h	/^  struct G2O_CORE_API UniformCostFunction: public HyperDijkstra::CostFunction {$/;"	s	namespace:g2o
_adjacencyMap	trunk/g2o/core/hyper_dijkstra.h	/^    AdjacencyMap _adjacencyMap;$/;"	m	struct:g2o::HyperDijkstra
_child	trunk/g2o/core/hyper_dijkstra.h	/^      HyperGraph::Vertex* _child;$/;"	m	struct:g2o::HyperDijkstra::AdjacencyMapEntry
_children	trunk/g2o/core/hyper_dijkstra.h	/^      HyperGraph::VertexSet _children;$/;"	m	struct:g2o::HyperDijkstra::AdjacencyMapEntry
_distance	trunk/g2o/core/hyper_dijkstra.h	/^      double _distance;$/;"	m	struct:g2o::HyperDijkstra::AdjacencyMapEntry
_edge	trunk/g2o/core/hyper_dijkstra.h	/^      HyperGraph::Edge* _edge;$/;"	m	struct:g2o::HyperDijkstra::AdjacencyMapEntry
_graph	trunk/g2o/core/hyper_dijkstra.h	/^    HyperGraph* _graph;$/;"	m	struct:g2o::HyperDijkstra
_parent	trunk/g2o/core/hyper_dijkstra.h	/^      HyperGraph::Vertex* _parent;$/;"	m	struct:g2o::HyperDijkstra::AdjacencyMapEntry
_visited	trunk/g2o/core/hyper_dijkstra.h	/^    HyperGraph::VertexSet _visited;$/;"	m	struct:g2o::HyperDijkstra
adjacencyMap	trunk/g2o/core/hyper_dijkstra.h	/^    AdjacencyMap& adjacencyMap() {return _adjacencyMap; }$/;"	f	struct:g2o::HyperDijkstra
child	trunk/g2o/core/hyper_dijkstra.h	/^      HyperGraph::Vertex* child() const {return _child;}$/;"	f	struct:g2o::HyperDijkstra::AdjacencyMapEntry
children	trunk/g2o/core/hyper_dijkstra.h	/^      HyperGraph::VertexSet& children() {return _children;}$/;"	f	struct:g2o::HyperDijkstra::AdjacencyMapEntry
children	trunk/g2o/core/hyper_dijkstra.h	/^      const HyperGraph::VertexSet& children() const {return _children;}$/;"	f	struct:g2o::HyperDijkstra::AdjacencyMapEntry
distance	trunk/g2o/core/hyper_dijkstra.h	/^      double distance() const {return _distance;}$/;"	f	struct:g2o::HyperDijkstra::AdjacencyMapEntry
edge	trunk/g2o/core/hyper_dijkstra.h	/^      HyperGraph::Edge* edge() const {return _edge;}$/;"	f	struct:g2o::HyperDijkstra::AdjacencyMapEntry
g2o	trunk/g2o/core/hyper_dijkstra.h	/^namespace g2o{$/;"	n
graph	trunk/g2o/core/hyper_dijkstra.h	/^    HyperGraph* graph() {return _graph;} $/;"	f	struct:g2o::HyperDijkstra
parent	trunk/g2o/core/hyper_dijkstra.h	/^      HyperGraph::Vertex* parent() const {return _parent;}$/;"	f	struct:g2o::HyperDijkstra::AdjacencyMapEntry
visited	trunk/g2o/core/hyper_dijkstra.h	/^    HyperGraph::VertexSet& visited() {return _visited; }$/;"	f	struct:g2o::HyperDijkstra
~CostFunction	trunk/g2o/core/hyper_dijkstra.h	/^      virtual ~CostFunction() { }$/;"	f	struct:g2o::HyperDijkstra::CostFunction
Edge	trunk/g2o/core/hyper_graph.cpp	/^  HyperGraph::Edge::Edge(int id) : _id(id)$/;"	f	class:g2o::HyperGraph::Edge
HyperGraph	trunk/g2o/core/hyper_graph.cpp	/^  HyperGraph::HyperGraph()$/;"	f	class:g2o::HyperGraph
Vertex	trunk/g2o/core/hyper_graph.cpp	/^  HyperGraph::Vertex::Vertex(int id) : _id(id)$/;"	f	class:g2o::HyperGraph::Vertex
addEdge	trunk/g2o/core/hyper_graph.cpp	/^  bool HyperGraph::addEdge(Edge* e)$/;"	f	class:g2o::HyperGraph
addVertex	trunk/g2o/core/hyper_graph.cpp	/^  bool HyperGraph::addVertex(Vertex* v)$/;"	f	class:g2o::HyperGraph
changeId	trunk/g2o/core/hyper_graph.cpp	/^  bool HyperGraph::changeId(Vertex* v, int newId){$/;"	f	class:g2o::HyperGraph
clear	trunk/g2o/core/hyper_graph.cpp	/^  void HyperGraph::clear()$/;"	f	class:g2o::HyperGraph
g2o	trunk/g2o/core/hyper_graph.cpp	/^namespace g2o {$/;"	n	file:
removeEdge	trunk/g2o/core/hyper_graph.cpp	/^  bool HyperGraph::removeEdge(Edge* e)$/;"	f	class:g2o::HyperGraph
removeVertex	trunk/g2o/core/hyper_graph.cpp	/^  bool HyperGraph::removeVertex(Vertex* v)$/;"	f	class:g2o::HyperGraph
resize	trunk/g2o/core/hyper_graph.cpp	/^  void HyperGraph::Edge::resize(size_t size)$/;"	f	class:g2o::HyperGraph::Edge
setId	trunk/g2o/core/hyper_graph.cpp	/^  void HyperGraph::Edge::setId(int id)$/;"	f	class:g2o::HyperGraph::Edge
vertex	trunk/g2o/core/hyper_graph.cpp	/^  HyperGraph::Vertex* HyperGraph::vertex(int id)$/;"	f	class:g2o::HyperGraph
vertex	trunk/g2o/core/hyper_graph.cpp	/^  const HyperGraph::Vertex* HyperGraph::vertex(int id) const$/;"	f	class:g2o::HyperGraph
~Edge	trunk/g2o/core/hyper_graph.cpp	/^  HyperGraph::Edge::~Edge()$/;"	f	class:g2o::HyperGraph::Edge
~HyperGraph	trunk/g2o/core/hyper_graph.cpp	/^  HyperGraph::~HyperGraph()$/;"	f	class:g2o::HyperGraph
~Vertex	trunk/g2o/core/hyper_graph.cpp	/^  HyperGraph::Vertex::~Vertex()$/;"	f	class:g2o::HyperGraph::Vertex
Edge	trunk/g2o/core/hyper_graph.h	/^      class G2O_CORE_API Edge : public HyperGraphElement {$/;"	c	class:g2o::HyperGraph
Edge	trunk/g2o/core/hyper_graph.h	/^      class G2O_CORE_API Edge;$/;"	m	class:g2o::HyperGraph
EdgeSet	trunk/g2o/core/hyper_graph.h	/^      typedef std::set<Edge*>                           EdgeSet;$/;"	t	class:g2o::HyperGraph
G2O_AIS_HYPER_GRAPH_HH	trunk/g2o/core/hyper_graph.h	28;"	d
GraphElemBitset	trunk/g2o/core/hyper_graph.h	/^      typedef std::bitset<HyperGraph::HGET_NUM_ELEMS> GraphElemBitset;$/;"	t	class:g2o::HyperGraph
HGET_CACHE	trunk/g2o/core/hyper_graph.h	/^        HGET_CACHE,$/;"	e	enum:g2o::HyperGraph::HyperGraphElementType
HGET_DATA	trunk/g2o/core/hyper_graph.h	/^        HGET_DATA,$/;"	e	enum:g2o::HyperGraph::HyperGraphElementType
HGET_EDGE	trunk/g2o/core/hyper_graph.h	/^        HGET_EDGE,$/;"	e	enum:g2o::HyperGraph::HyperGraphElementType
HGET_NUM_ELEMS	trunk/g2o/core/hyper_graph.h	/^        HGET_NUM_ELEMS \/\/ keep as last elem$/;"	e	enum:g2o::HyperGraph::HyperGraphElementType
HGET_PARAMETER	trunk/g2o/core/hyper_graph.h	/^        HGET_PARAMETER,$/;"	e	enum:g2o::HyperGraph::HyperGraphElementType
HGET_VERTEX	trunk/g2o/core/hyper_graph.h	/^        HGET_VERTEX,$/;"	e	enum:g2o::HyperGraph::HyperGraphElementType
HyperGraph	trunk/g2o/core/hyper_graph.h	/^      HyperGraph(const HyperGraph&) { }$/;"	f	class:g2o::HyperGraph
HyperGraph	trunk/g2o/core/hyper_graph.h	/^  class G2O_CORE_API HyperGraph$/;"	c	namespace:g2o
HyperGraphElement	trunk/g2o/core/hyper_graph.h	/^      struct G2O_CORE_API HyperGraphElement {$/;"	s	class:g2o::HyperGraph
HyperGraphElementType	trunk/g2o/core/hyper_graph.h	/^      enum G2O_CORE_API HyperGraphElementType {$/;"	g	class:g2o::HyperGraph
Vertex	trunk/g2o/core/hyper_graph.h	/^      class G2O_CORE_API Vertex : public HyperGraphElement {$/;"	c	class:g2o::HyperGraph
Vertex	trunk/g2o/core/hyper_graph.h	/^      class G2O_CORE_API Vertex;$/;"	m	class:g2o::HyperGraph
VertexContainer	trunk/g2o/core/hyper_graph.h	/^      typedef std::vector<Vertex*>                      VertexContainer;$/;"	t	class:g2o::HyperGraph
VertexIDMap	trunk/g2o/core/hyper_graph.h	/^      typedef std::tr1::unordered_map<int, Vertex*>     VertexIDMap;$/;"	t	class:g2o::HyperGraph
VertexSet	trunk/g2o/core/hyper_graph.h	/^      typedef std::set<Vertex*>                         VertexSet;$/;"	t	class:g2o::HyperGraph
_edges	trunk/g2o/core/hyper_graph.h	/^          EdgeSet _edges;$/;"	m	class:g2o::HyperGraph::Vertex
_edges	trunk/g2o/core/hyper_graph.h	/^      EdgeSet _edges;$/;"	m	class:g2o::HyperGraph
_id	trunk/g2o/core/hyper_graph.h	/^          int _id; \/\/\/< unique id$/;"	m	class:g2o::HyperGraph::Edge
_id	trunk/g2o/core/hyper_graph.h	/^          int _id;$/;"	m	class:g2o::HyperGraph::Vertex
_vertices	trunk/g2o/core/hyper_graph.h	/^          VertexContainer _vertices;$/;"	m	class:g2o::HyperGraph::Edge
_vertices	trunk/g2o/core/hyper_graph.h	/^      VertexIDMap _vertices;$/;"	m	class:g2o::HyperGraph
edges	trunk/g2o/core/hyper_graph.h	/^          EdgeSet& edges() {return _edges;}$/;"	f	class:g2o::HyperGraph::Vertex
edges	trunk/g2o/core/hyper_graph.h	/^          const EdgeSet& edges() const {return _edges;}$/;"	f	class:g2o::HyperGraph::Vertex
edges	trunk/g2o/core/hyper_graph.h	/^      EdgeSet& edges() {return _edges;}$/;"	f	class:g2o::HyperGraph
edges	trunk/g2o/core/hyper_graph.h	/^      const EdgeSet& edges() const {return _edges;}$/;"	f	class:g2o::HyperGraph
elementType	trunk/g2o/core/hyper_graph.h	/^          virtual HyperGraphElementType elementType() const { return HGET_EDGE;}$/;"	f	class:g2o::HyperGraph::Edge
elementType	trunk/g2o/core/hyper_graph.h	/^          virtual HyperGraphElementType elementType() const { return HGET_VERTEX;}$/;"	f	class:g2o::HyperGraph::Vertex
g2o	trunk/g2o/core/hyper_graph.h	/^namespace g2o {$/;"	n
id	trunk/g2o/core/hyper_graph.h	/^          int id() const {return _id;}$/;"	f	class:g2o::HyperGraph::Edge
id	trunk/g2o/core/hyper_graph.h	/^          int id() const {return _id;}$/;"	f	class:g2o::HyperGraph::Vertex
operator =	trunk/g2o/core/hyper_graph.h	/^      HyperGraph& operator= (const HyperGraph&) { return *this; }$/;"	f	class:g2o::HyperGraph
setId	trunk/g2o/core/hyper_graph.h	/^	  virtual void setId( int newId) { _id=newId; }$/;"	f	class:g2o::HyperGraph::Vertex
setVertex	trunk/g2o/core/hyper_graph.h	/^          void setVertex(size_t i, Vertex* v) { assert(i < _vertices.size() && "index out of bounds"); _vertices[i]=v;}$/;"	f	class:g2o::HyperGraph::Edge
vertex	trunk/g2o/core/hyper_graph.h	/^          Vertex* vertex(size_t i) { assert(i < _vertices.size() && "index out of bounds"); return _vertices[i];}$/;"	f	class:g2o::HyperGraph::Edge
vertex	trunk/g2o/core/hyper_graph.h	/^          const Vertex* vertex(size_t i) const { assert(i < _vertices.size() && "index out of bounds"); return _vertices[i];}$/;"	f	class:g2o::HyperGraph::Edge
vertices	trunk/g2o/core/hyper_graph.h	/^          VertexContainer& vertices() { return _vertices;}$/;"	f	class:g2o::HyperGraph::Edge
vertices	trunk/g2o/core/hyper_graph.h	/^          const VertexContainer& vertices() const { return _vertices;}$/;"	f	class:g2o::HyperGraph::Edge
vertices	trunk/g2o/core/hyper_graph.h	/^      VertexIDMap& vertices() {return _vertices;}$/;"	f	class:g2o::HyperGraph
vertices	trunk/g2o/core/hyper_graph.h	/^      const VertexIDMap& vertices() const {return _vertices;}$/;"	f	class:g2o::HyperGraph
~HyperGraphElement	trunk/g2o/core/hyper_graph.h	/^        virtual ~HyperGraphElement() {}$/;"	f	struct:g2o::HyperGraph::HyperGraphElement
DrawAction	trunk/g2o/core/hyper_graph_action.cpp	/^  DrawAction::DrawAction(const std::string& typeName_) $/;"	f	class:g2o::DrawAction
HyperGraphActionLibrary	trunk/g2o/core/hyper_graph_action.cpp	/^  HyperGraphActionLibrary::HyperGraphActionLibrary()$/;"	f	class:g2o::HyperGraphActionLibrary
HyperGraphElementAction	trunk/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction::HyperGraphElementAction(const std::string& typeName_)$/;"	f	class:g2o::HyperGraphElementAction
HyperGraphElementActionCollection	trunk/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementActionCollection::HyperGraphElementActionCollection(const std::string& name_)$/;"	f	class:g2o::HyperGraphElementActionCollection
Parameters	trunk/g2o/core/hyper_graph_action.cpp	/^  DrawAction::Parameters::Parameters(){$/;"	f	class:g2o::DrawAction::Parameters
ParametersIteration	trunk/g2o/core/hyper_graph_action.cpp	/^  HyperGraphAction::ParametersIteration::ParametersIteration(int iter) :$/;"	f	class:g2o::HyperGraphAction::ParametersIteration
WriteGnuplotAction	trunk/g2o/core/hyper_graph_action.cpp	/^  WriteGnuplotAction::WriteGnuplotAction(const std::string& typeName_)$/;"	f	class:g2o::WriteGnuplotAction
actionByName	trunk/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction* HyperGraphActionLibrary::actionByName(const std::string& name)$/;"	f	class:g2o::HyperGraphActionLibrary
actionLibInstance	trunk/g2o/core/hyper_graph_action.cpp	/^  HyperGraphActionLibrary* HyperGraphActionLibrary::actionLibInstance = 0;$/;"	m	class:g2o::HyperGraphActionLibrary	file:
applyAction	trunk/g2o/core/hyper_graph_action.cpp	/^  void applyAction(HyperGraph* graph, HyperGraphElementAction* action, HyperGraphElementAction::Parameters* params, const std::string& typeName)$/;"	f	namespace:g2o
destroy	trunk/g2o/core/hyper_graph_action.cpp	/^  void HyperGraphActionLibrary::destroy()$/;"	f	class:g2o::HyperGraphActionLibrary
g2o	trunk/g2o/core/hyper_graph_action.cpp	/^namespace g2o {$/;"	n	file:
instance	trunk/g2o/core/hyper_graph_action.cpp	/^  HyperGraphActionLibrary* HyperGraphActionLibrary::instance()$/;"	f	class:g2o::HyperGraphActionLibrary
operator ()	trunk/g2o/core/hyper_graph_action.cpp	/^  HyperGraphAction* HyperGraphAction::operator()(const HyperGraph*, Parameters*)$/;"	f	class:g2o::HyperGraphAction
operator ()	trunk/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction* HyperGraphElementAction::operator()(HyperGraph::HyperGraphElement* , HyperGraphElementAction::Parameters* )$/;"	f	class:g2o::HyperGraphElementAction
operator ()	trunk/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction* HyperGraphElementAction::operator()(const HyperGraph::HyperGraphElement* , HyperGraphElementAction::Parameters* )$/;"	f	class:g2o::HyperGraphElementAction
operator ()	trunk/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction* HyperGraphElementActionCollection::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params)$/;"	f	class:g2o::HyperGraphElementActionCollection
operator ()	trunk/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction* HyperGraphElementActionCollection::operator()(const HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params)$/;"	f	class:g2o::HyperGraphElementActionCollection
refreshPropertyPtrs	trunk/g2o/core/hyper_graph_action.cpp	/^  bool DrawAction::refreshPropertyPtrs(HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::DrawAction
registerAction	trunk/g2o/core/hyper_graph_action.cpp	/^  bool HyperGraphActionLibrary::registerAction(HyperGraphElementAction* action)$/;"	f	class:g2o::HyperGraphActionLibrary
registerAction	trunk/g2o/core/hyper_graph_action.cpp	/^  bool HyperGraphElementActionCollection::registerAction(HyperGraphElementAction* action)$/;"	f	class:g2o::HyperGraphElementActionCollection
setTypeName	trunk/g2o/core/hyper_graph_action.cpp	/^  void HyperGraphElementAction::setTypeName(const std::string& typeName_)$/;"	f	class:g2o::HyperGraphElementAction
unregisterAction	trunk/g2o/core/hyper_graph_action.cpp	/^  bool HyperGraphActionLibrary::unregisterAction(HyperGraphElementAction* action)$/;"	f	class:g2o::HyperGraphActionLibrary
unregisterAction	trunk/g2o/core/hyper_graph_action.cpp	/^  bool HyperGraphElementActionCollection::unregisterAction(HyperGraphElementAction* action)$/;"	f	class:g2o::HyperGraphElementActionCollection
~HyperGraphAction	trunk/g2o/core/hyper_graph_action.cpp	/^  HyperGraphAction::~HyperGraphAction()$/;"	f	class:g2o::HyperGraphAction
~HyperGraphActionLibrary	trunk/g2o/core/hyper_graph_action.cpp	/^  HyperGraphActionLibrary::~HyperGraphActionLibrary()$/;"	f	class:g2o::HyperGraphActionLibrary
~HyperGraphElementAction	trunk/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction::~HyperGraphElementAction()$/;"	f	class:g2o::HyperGraphElementAction
~HyperGraphElementActionCollection	trunk/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementActionCollection::~HyperGraphElementActionCollection()$/;"	f	class:g2o::HyperGraphElementActionCollection
~Parameters	trunk/g2o/core/hyper_graph_action.cpp	/^  HyperGraphAction::Parameters::~Parameters()$/;"	f	class:g2o::HyperGraphAction::Parameters
~Parameters	trunk/g2o/core/hyper_graph_action.cpp	/^  HyperGraphElementAction::Parameters::~Parameters()$/;"	f	class:g2o::HyperGraphElementAction::Parameters
ActionMap	trunk/g2o/core/hyper_graph_action.h	/^      typedef std::map<std::string, HyperGraphElementAction*> ActionMap;$/;"	t	class:g2o::HyperGraphElementAction
DrawAction	trunk/g2o/core/hyper_graph_action.h	/^  class G2O_CORE_API DrawAction : public HyperGraphElementAction{$/;"	c	namespace:g2o
G2O_HYPER_GRAPH_ACTION_H	trunk/g2o/core/hyper_graph_action.h	28;"	d
G2O_REGISTER_ACTION	trunk/g2o/core/hyper_graph_action.h	218;"	d
HyperGraphAction	trunk/g2o/core/hyper_graph_action.h	/^  class G2O_CORE_API HyperGraphAction {$/;"	c	namespace:g2o
HyperGraphActionLibrary	trunk/g2o/core/hyper_graph_action.h	/^  class G2O_CORE_API HyperGraphActionLibrary{$/;"	c	namespace:g2o
HyperGraphElementAction	trunk/g2o/core/hyper_graph_action.h	/^  class G2O_CORE_API HyperGraphElementAction{$/;"	c	namespace:g2o
HyperGraphElementActionCollection	trunk/g2o/core/hyper_graph_action.h	/^  class G2O_CORE_API HyperGraphElementActionCollection: public HyperGraphElementAction{$/;"	c	namespace:g2o
Parameters	trunk/g2o/core/hyper_graph_action.h	/^      class G2O_CORE_API Parameters {$/;"	c	class:g2o::HyperGraphAction
Parameters	trunk/g2o/core/hyper_graph_action.h	/^      struct G2O_CORE_API Parameters: public HyperGraphElementAction::Parameters{$/;"	s	class:g2o::WriteGnuplotAction
Parameters	trunk/g2o/core/hyper_graph_action.h	/^      struct G2O_CORE_API Parameters{$/;"	s	class:g2o::HyperGraphElementAction
Parameters	trunk/g2o/core/hyper_graph_action.h	/^    class G2O_CORE_API Parameters: public HyperGraphElementAction::Parameters,  public PropertyMap{$/;"	c	class:g2o::DrawAction
ParametersIteration	trunk/g2o/core/hyper_graph_action.h	/^      class G2O_CORE_API ParametersIteration : public Parameters {$/;"	c	class:g2o::HyperGraphAction
RegisterActionProxy	trunk/g2o/core/hyper_graph_action.h	/^      RegisterActionProxy()$/;"	f	class:g2o::RegisterActionProxy
RegisterActionProxy	trunk/g2o/core/hyper_graph_action.h	/^  template<typename T> class RegisterActionProxy$/;"	c	namespace:g2o
WriteGnuplotAction	trunk/g2o/core/hyper_graph_action.h	/^  class G2O_CORE_API WriteGnuplotAction: public HyperGraphElementAction{$/;"	c	namespace:g2o
_action	trunk/g2o/core/hyper_graph_action.h	/^        HyperGraphElementAction* _action;$/;"	m	class:g2o::RegisterActionProxy
_actionMap	trunk/g2o/core/hyper_graph_action.h	/^      ActionMap _actionMap;$/;"	m	class:g2o::HyperGraphElementActionCollection
_actionMap	trunk/g2o/core/hyper_graph_action.h	/^      HyperGraphElementAction::ActionMap _actionMap;$/;"	m	class:g2o::HyperGraphActionLibrary
_name	trunk/g2o/core/hyper_graph_action.h	/^      std::string _name;$/;"	m	class:g2o::HyperGraphElementAction
_previousParams	trunk/g2o/core/hyper_graph_action.h	/^    Parameters* _previousParams;$/;"	m	class:g2o::DrawAction
_show	trunk/g2o/core/hyper_graph_action.h	/^    BoolProperty* _show;$/;"	m	class:g2o::DrawAction
_showId	trunk/g2o/core/hyper_graph_action.h	/^    BoolProperty* _showId;$/;"	m	class:g2o::DrawAction
_typeName	trunk/g2o/core/hyper_graph_action.h	/^      std::string _typeName;$/;"	m	class:g2o::HyperGraphElementAction
actionLibInstance	trunk/g2o/core/hyper_graph_action.h	/^      static HyperGraphActionLibrary* actionLibInstance;$/;"	m	class:g2o::HyperGraphActionLibrary
actionMap	trunk/g2o/core/hyper_graph_action.h	/^      ActionMap& actionMap() {return _actionMap;}$/;"	f	class:g2o::HyperGraphElementActionCollection
actionMap	trunk/g2o/core/hyper_graph_action.h	/^      inline HyperGraphElementAction::ActionMap& actionMap() {return _actionMap;}$/;"	f	class:g2o::HyperGraphActionLibrary
g2o	trunk/g2o/core/hyper_graph_action.h	/^namespace g2o {$/;"	n
iteration	trunk/g2o/core/hyper_graph_action.h	/^          int iteration;$/;"	m	class:g2o::HyperGraphAction::ParametersIteration
name	trunk/g2o/core/hyper_graph_action.h	/^      const std::string& name() const{ return _name;}$/;"	f	class:g2o::HyperGraphElementAction
os	trunk/g2o/core/hyper_graph_action.h	/^        std::ostream* os;$/;"	m	struct:g2o::WriteGnuplotAction::Parameters
typeName	trunk/g2o/core/hyper_graph_action.h	/^      const std::string& typeName() const { return _typeName;}$/;"	f	class:g2o::HyperGraphElementAction
~RegisterActionProxy	trunk/g2o/core/hyper_graph_action.h	/^        ~RegisterActionProxy()$/;"	f	class:g2o::RegisterActionProxy
JacobianWorkspace	trunk/g2o/core/jacobian_workspace.cpp	/^JacobianWorkspace::JacobianWorkspace() :$/;"	f	class:g2o::JacobianWorkspace
allocate	trunk/g2o/core/jacobian_workspace.cpp	/^bool JacobianWorkspace::allocate()$/;"	f	class:g2o::JacobianWorkspace
g2o	trunk/g2o/core/jacobian_workspace.cpp	/^namespace g2o {$/;"	n	file:
updateSize	trunk/g2o/core/jacobian_workspace.cpp	/^void JacobianWorkspace::updateSize(const HyperGraph::Edge* e_)$/;"	f	class:g2o::JacobianWorkspace
updateSize	trunk/g2o/core/jacobian_workspace.cpp	/^void JacobianWorkspace::updateSize(const OptimizableGraph& graph)$/;"	f	class:g2o::JacobianWorkspace
updateSize	trunk/g2o/core/jacobian_workspace.cpp	/^void JacobianWorkspace::updateSize(int numVertices, int dimension)$/;"	f	class:g2o::JacobianWorkspace
~JacobianWorkspace	trunk/g2o/core/jacobian_workspace.cpp	/^JacobianWorkspace::~JacobianWorkspace()$/;"	f	class:g2o::JacobianWorkspace
JACOBIAN_WORKSPACE_H	trunk/g2o/core/jacobian_workspace.h	28;"	d
JacobianWorkspace	trunk/g2o/core/jacobian_workspace.h	/^  class G2O_CORE_API JacobianWorkspace$/;"	c	namespace:g2o
WorkspaceVector	trunk/g2o/core/jacobian_workspace.h	/^      typedef std::vector<Eigen::VectorXd, Eigen::aligned_allocator<Eigen::VectorXd> >      WorkspaceVector;$/;"	t	class:g2o::JacobianWorkspace
_maxDimension	trunk/g2o/core/jacobian_workspace.h	/^      int _maxDimension;            \/\/\/< the maximum dimension (number of elements) for a Jacobian$/;"	m	class:g2o::JacobianWorkspace
_maxNumVertices	trunk/g2o/core/jacobian_workspace.h	/^      int _maxNumVertices;          \/\/\/< the maximum number of vertices connected by a hyper-edge$/;"	m	class:g2o::JacobianWorkspace
_workspace	trunk/g2o/core/jacobian_workspace.h	/^      WorkspaceVector _workspace;   \/\/\/< the memory pre-allocated for computing the Jacobians$/;"	m	class:g2o::JacobianWorkspace
g2o	trunk/g2o/core/jacobian_workspace.h	/^namespace g2o {$/;"	n
workspaceForVertex	trunk/g2o/core/jacobian_workspace.h	/^      double* workspaceForVertex(int vertexIndex)$/;"	f	class:g2o::JacobianWorkspace
G2O_LINEAR_SOLVER_H	trunk/g2o/core/linear_solver.h	28;"	d
LinearSolver	trunk/g2o/core/linear_solver.h	/^    LinearSolver() {};$/;"	f	class:g2o::LinearSolver
LinearSolver	trunk/g2o/core/linear_solver.h	/^class LinearSolver$/;"	c	namespace:g2o
LinearSolverCCS	trunk/g2o/core/linear_solver.h	/^    LinearSolverCCS() : LinearSolver<MatrixType>(), _ccsMatrix(0) {}$/;"	f	class:g2o::LinearSolverCCS
LinearSolverCCS	trunk/g2o/core/linear_solver.h	/^class LinearSolverCCS : public LinearSolver<MatrixType>$/;"	c	namespace:g2o
_ccsMatrix	trunk/g2o/core/linear_solver.h	/^    SparseBlockMatrixCCS<MatrixType>* _ccsMatrix;$/;"	m	class:g2o::LinearSolverCCS
g2o	trunk/g2o/core/linear_solver.h	/^namespace g2o {$/;"	n
initMatrixStructure	trunk/g2o/core/linear_solver.h	/^    void initMatrixStructure(const SparseBlockMatrix<MatrixType>& A)$/;"	f	class:g2o::LinearSolverCCS
setWriteDebug	trunk/g2o/core/linear_solver.h	/^    virtual void setWriteDebug(bool) {}$/;"	f	class:g2o::LinearSolver
solveBlocks	trunk/g2o/core/linear_solver.h	/^    virtual bool solveBlocks(double**&blocks, const SparseBlockMatrix<MatrixType>& A) { (void)blocks; (void) A; return false; }$/;"	f	class:g2o::LinearSolver
solvePattern	trunk/g2o/core/linear_solver.h	/^    virtual bool solvePattern(SparseBlockMatrix<MatrixXd>& spinv, const std::vector<std::pair<int, int> >& blockIndices, const SparseBlockMatrix<MatrixType>& A){$/;"	f	class:g2o::LinearSolver
writeDebug	trunk/g2o/core/linear_solver.h	/^    virtual bool writeDebug() const { return false;}$/;"	f	class:g2o::LinearSolver
~LinearSolver	trunk/g2o/core/linear_solver.h	/^    virtual ~LinearSolver() {}$/;"	f	class:g2o::LinearSolver
~LinearSolverCCS	trunk/g2o/core/linear_solver.h	/^    ~LinearSolverCCS()$/;"	f	class:g2o::LinearSolverCCS
MarginalCovarianceCholesky	trunk/g2o/core/marginal_covariance_cholesky.cpp	/^MarginalCovarianceCholesky::MarginalCovarianceCholesky() :$/;"	f	class:g2o::MarginalCovarianceCholesky
MatrixElem	trunk/g2o/core/marginal_covariance_cholesky.cpp	/^  MatrixElem(int r_, int c_) : r(r_), c(c_) {}$/;"	f	struct:g2o::MatrixElem
MatrixElem	trunk/g2o/core/marginal_covariance_cholesky.cpp	/^struct MatrixElem$/;"	s	namespace:g2o	file:
c	trunk/g2o/core/marginal_covariance_cholesky.cpp	/^  int r, c;$/;"	m	struct:g2o::MatrixElem	file:
computeCovariance	trunk/g2o/core/marginal_covariance_cholesky.cpp	/^void MarginalCovarianceCholesky::computeCovariance(SparseBlockMatrix<MatrixXd>& spinv, const std::vector<int>& rowBlockIndices, const std::vector< std::pair<int, int> >& blockIndices)$/;"	f	class:g2o::MarginalCovarianceCholesky
computeCovariance	trunk/g2o/core/marginal_covariance_cholesky.cpp	/^void MarginalCovarianceCholesky::computeCovariance(double** covBlocks, const std::vector<int>& blockIndices)$/;"	f	class:g2o::MarginalCovarianceCholesky
computeEntry	trunk/g2o/core/marginal_covariance_cholesky.cpp	/^double MarginalCovarianceCholesky::computeEntry(int r, int c)$/;"	f	class:g2o::MarginalCovarianceCholesky
g2o	trunk/g2o/core/marginal_covariance_cholesky.cpp	/^namespace g2o {$/;"	n	file:
operator <	trunk/g2o/core/marginal_covariance_cholesky.cpp	/^  bool operator<(const MatrixElem& other) const$/;"	f	struct:g2o::MatrixElem
r	trunk/g2o/core/marginal_covariance_cholesky.cpp	/^  int r, c;$/;"	m	struct:g2o::MatrixElem	file:
setCholeskyFactor	trunk/g2o/core/marginal_covariance_cholesky.cpp	/^void MarginalCovarianceCholesky::setCholeskyFactor(int n, int* Lp, int* Li, double* Lx, int* permInv)$/;"	f	class:g2o::MarginalCovarianceCholesky
~MarginalCovarianceCholesky	trunk/g2o/core/marginal_covariance_cholesky.cpp	/^MarginalCovarianceCholesky::~MarginalCovarianceCholesky()$/;"	f	class:g2o::MarginalCovarianceCholesky
G2O_MARGINAL_COVARIANCE_CHOLESKY_H	trunk/g2o/core/marginal_covariance_cholesky.h	28;"	d
LookupMap	trunk/g2o/core/marginal_covariance_cholesky.h	/^      typedef std::tr1::unordered_map<int, double>     LookupMap;$/;"	t	class:g2o::MarginalCovarianceCholesky
MarginalCovarianceCholesky	trunk/g2o/core/marginal_covariance_cholesky.h	/^  class G2O_CORE_API MarginalCovarianceCholesky {$/;"	c	namespace:g2o
_Ai	trunk/g2o/core/marginal_covariance_cholesky.h	/^      int* _Ai;         \/\/\/< row indices of the CCS storage$/;"	m	class:g2o::MarginalCovarianceCholesky
_Ap	trunk/g2o/core/marginal_covariance_cholesky.h	/^      int* _Ap;         \/\/\/< column pointer of the CCS storage$/;"	m	class:g2o::MarginalCovarianceCholesky
_Ax	trunk/g2o/core/marginal_covariance_cholesky.h	/^      double* _Ax;      \/\/\/< values of the cholesky factor$/;"	m	class:g2o::MarginalCovarianceCholesky
_diag	trunk/g2o/core/marginal_covariance_cholesky.h	/^      std::vector<double> _diag;  \/\/\/< cache 1 \/ H_ii to avoid recalculations$/;"	m	class:g2o::MarginalCovarianceCholesky
_map	trunk/g2o/core/marginal_covariance_cholesky.h	/^      LookupMap _map;             \/\/\/< hash look up table for the already computed entries$/;"	m	class:g2o::MarginalCovarianceCholesky
_n	trunk/g2o/core/marginal_covariance_cholesky.h	/^      int _n;           \/\/\/< L is an n X n matrix$/;"	m	class:g2o::MarginalCovarianceCholesky
_perm	trunk/g2o/core/marginal_covariance_cholesky.h	/^      int* _perm;       \/\/\/< permutation of the cholesky factor. Variable re-ordering for better fill-in$/;"	m	class:g2o::MarginalCovarianceCholesky
computeIndex	trunk/g2o/core/marginal_covariance_cholesky.h	/^      int computeIndex(int r, int c) const { \/*assert(r <= c);*\/ return r*_n + c;}$/;"	f	class:g2o::MarginalCovarianceCholesky
g2o	trunk/g2o/core/marginal_covariance_cholesky.h	/^namespace g2o {$/;"	n
G2O_CORE_MATRIX_OPERATIONS_H	trunk/g2o/core/matrix_operations.h	28;"	d
atxpy	trunk/g2o/core/matrix_operations.h	/^    inline void atxpy(const Eigen::Matrix<double, Eigen::Dynamic, t>& A, const Eigen::Map<const Eigen::VectorXd>& x, int xoff, Eigen::Map<Eigen::VectorXd>& y, int yoff)$/;"	f	namespace:g2o::internal
atxpy	trunk/g2o/core/matrix_operations.h	/^    inline void atxpy(const Eigen::MatrixXd& A, const Eigen::Map<const Eigen::VectorXd>& x, int xoff, Eigen::Map<Eigen::VectorXd>& y, int yoff)$/;"	f	namespace:g2o::internal
atxpy	trunk/g2o/core/matrix_operations.h	/^    inline void atxpy(const MatrixType& A, const Eigen::Map<const Eigen::VectorXd>& x, int xoff, Eigen::Map<Eigen::VectorXd>& y, int yoff)$/;"	f	namespace:g2o::internal
axpy	trunk/g2o/core/matrix_operations.h	/^    inline void axpy(const Eigen::Matrix<double, Eigen::Dynamic, t>& A, const Eigen::Map<const Eigen::VectorXd>& x, int xoff, Eigen::Map<Eigen::VectorXd>& y, int yoff)$/;"	f	namespace:g2o::internal
axpy	trunk/g2o/core/matrix_operations.h	/^    inline void axpy(const Eigen::MatrixXd& A, const Eigen::Map<const Eigen::VectorXd>& x, int xoff, Eigen::Map<Eigen::VectorXd>& y, int yoff)$/;"	f	namespace:g2o::internal
axpy	trunk/g2o/core/matrix_operations.h	/^    inline void axpy(const MatrixType& A, const Eigen::Map<const Eigen::VectorXd>& x, int xoff, Eigen::Map<Eigen::VectorXd>& y, int yoff)$/;"	f	namespace:g2o::internal
g2o	trunk/g2o/core/matrix_operations.h	/^namespace g2o {$/;"	n
internal	trunk/g2o/core/matrix_operations.h	/^  namespace internal {$/;"	n	namespace:g2o
ColSort	trunk/g2o/core/matrix_structure.cpp	/^struct ColSort$/;"	s	namespace:g2o	file:
MatrixStructure	trunk/g2o/core/matrix_structure.cpp	/^MatrixStructure::MatrixStructure() :$/;"	f	class:g2o::MatrixStructure
alloc	trunk/g2o/core/matrix_structure.cpp	/^void MatrixStructure::alloc(int n_, int nz)$/;"	f	class:g2o::MatrixStructure
free	trunk/g2o/core/matrix_structure.cpp	/^void MatrixStructure::free()$/;"	f	class:g2o::MatrixStructure
g2o	trunk/g2o/core/matrix_structure.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/core/matrix_structure.cpp	/^  bool operator()(const pair<int, int>& e1, const pair<int, int>& e2) const$/;"	f	struct:g2o::ColSort
write	trunk/g2o/core/matrix_structure.cpp	/^bool MatrixStructure::write(const char* filename) const$/;"	f	class:g2o::MatrixStructure
~MatrixStructure	trunk/g2o/core/matrix_structure.cpp	/^MatrixStructure::~MatrixStructure()$/;"	f	class:g2o::MatrixStructure
Aii	trunk/g2o/core/matrix_structure.h	/^    int* Aii; \/\/\/< row indices of A, of size nz = Ap [n]$/;"	m	class:g2o::MatrixStructure
Ap	trunk/g2o/core/matrix_structure.h	/^    int* Ap;  \/\/\/< column pointers for A, of size n+1$/;"	m	class:g2o::MatrixStructure
G2O_MATRIX_STRUCTURE_H	trunk/g2o/core/matrix_structure.h	28;"	d
MatrixStructure	trunk/g2o/core/matrix_structure.h	/^class G2O_CORE_API MatrixStructure$/;"	c	namespace:g2o
g2o	trunk/g2o/core/matrix_structure.h	/^namespace g2o {$/;"	n
m	trunk/g2o/core/matrix_structure.h	/^    int m;    \/\/\/< A is m-by-n.  m must be >= 0.$/;"	m	class:g2o::MatrixStructure
maxN	trunk/g2o/core/matrix_structure.h	/^    int maxN;     \/\/\/< size of the allocated memory$/;"	m	class:g2o::MatrixStructure
maxNz	trunk/g2o/core/matrix_structure.h	/^    int maxNz;    \/\/\/< size of the allocated memory$/;"	m	class:g2o::MatrixStructure
n	trunk/g2o/core/matrix_structure.h	/^    int n;    \/\/\/< A is m-by-n.  n must be >= 0.$/;"	m	class:g2o::MatrixStructure
nzMax	trunk/g2o/core/matrix_structure.h	/^    int nzMax() const { return maxNz;}$/;"	f	class:g2o::MatrixStructure
G2O_OPENMP_MUTEX	trunk/g2o/core/openmp_mutex.h	28;"	d
OpenMPMutex	trunk/g2o/core/openmp_mutex.h	/^      OpenMPMutex() { omp_init_lock(&_lock); }$/;"	f	class:g2o::OpenMPMutex
OpenMPMutex	trunk/g2o/core/openmp_mutex.h	/^  class OpenMPMutex$/;"	c	namespace:g2o
ScopedOpenMPMutex	trunk/g2o/core/openmp_mutex.h	/^      explicit ScopedOpenMPMutex(OpenMPMutex* mutex) : _mutex(mutex) { _mutex->lock(); }$/;"	f	class:g2o::ScopedOpenMPMutex
ScopedOpenMPMutex	trunk/g2o/core/openmp_mutex.h	/^  class ScopedOpenMPMutex$/;"	c	namespace:g2o
_lock	trunk/g2o/core/openmp_mutex.h	/^      omp_lock_t _lock;$/;"	m	class:g2o::OpenMPMutex
_mutex	trunk/g2o/core/openmp_mutex.h	/^      OpenMPMutex* const _mutex;$/;"	m	class:g2o::ScopedOpenMPMutex
g2o	trunk/g2o/core/openmp_mutex.h	/^namespace g2o {$/;"	n
lock	trunk/g2o/core/openmp_mutex.h	/^      void lock() { omp_set_lock(&_lock); }$/;"	f	class:g2o::OpenMPMutex
unlock	trunk/g2o/core/openmp_mutex.h	/^      void unlock() { omp_unset_lock(&_lock); }$/;"	f	class:g2o::OpenMPMutex
~OpenMPMutex	trunk/g2o/core/openmp_mutex.h	/^      ~OpenMPMutex() { omp_destroy_lock(&_lock); }$/;"	f	class:g2o::OpenMPMutex
~ScopedOpenMPMutex	trunk/g2o/core/openmp_mutex.h	/^      ~ScopedOpenMPMutex() { _mutex->unlock(); }$/;"	f	class:g2o::ScopedOpenMPMutex
Data	trunk/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Data::Data(){$/;"	f	class:g2o::OptimizableGraph::Data
Edge	trunk/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Edge::Edge() :$/;"	f	class:g2o::OptimizableGraph::Edge
OptimizableGraph	trunk/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::OptimizableGraph()$/;"	f	class:g2o::OptimizableGraph
Vertex	trunk/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Vertex::Vertex() :$/;"	f	class:g2o::OptimizableGraph::Vertex
addEdge	trunk/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::addEdge(HyperGraph::Edge* e_)$/;"	f	class:g2o::OptimizableGraph
addGraph	trunk/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::addGraph(OptimizableGraph* g){$/;"	f	class:g2o::OptimizableGraph
addPostIterationAction	trunk/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::addPostIterationAction(HyperGraphAction* action)$/;"	f	class:g2o::OptimizableGraph
addPreIterationAction	trunk/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::addPreIterationAction(HyperGraphAction* action)$/;"	f	class:g2o::OptimizableGraph
addVertex	trunk/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::addVertex(HyperGraph::Vertex* v, Data* userData)$/;"	f	class:g2o::OptimizableGraph
cacheContainer	trunk/g2o/core/optimizable_graph.cpp	/^  CacheContainer* OptimizableGraph::Vertex::cacheContainer(){$/;"	f	class:g2o::OptimizableGraph::Vertex
chi2	trunk/g2o/core/optimizable_graph.cpp	/^double OptimizableGraph::chi2() const$/;"	f	class:g2o::OptimizableGraph
clearParameters	trunk/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::clearParameters()$/;"	f	class:g2o::OptimizableGraph
clone	trunk/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Edge* OptimizableGraph::Edge::clone() const$/;"	f	class:g2o::OptimizableGraph::Edge
clone	trunk/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Vertex* OptimizableGraph::Vertex::clone() const$/;"	f	class:g2o::OptimizableGraph::Vertex
dimensions	trunk/g2o/core/optimizable_graph.cpp	/^std::set<int> OptimizableGraph::dimensions() const$/;"	f	class:g2o::OptimizableGraph
discardTop	trunk/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::discardTop()$/;"	f	class:g2o::OptimizableGraph
discardTop	trunk/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::discardTop(HyperGraph::VertexSet& vset)$/;"	f	class:g2o::OptimizableGraph
estimateDimension	trunk/g2o/core/optimizable_graph.cpp	/^  int OptimizableGraph::Vertex::estimateDimension() const$/;"	f	class:g2o::OptimizableGraph::Vertex
g2o	trunk/g2o/core/optimizable_graph.cpp	/^namespace g2o {$/;"	n	file:
getEstimateData	trunk/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Vertex::getEstimateData(double *) const$/;"	f	class:g2o::OptimizableGraph::Vertex
getMeasurementData	trunk/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Edge::getMeasurementData(double *) const$/;"	f	class:g2o::OptimizableGraph::Edge
getMinimalEstimateData	trunk/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Vertex::getMinimalEstimateData(double *) const$/;"	f	class:g2o::OptimizableGraph::Vertex
graph	trunk/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph* OptimizableGraph::Edge::graph(){$/;"	f	class:g2o::OptimizableGraph::Edge
graph	trunk/g2o/core/optimizable_graph.cpp	/^  const OptimizableGraph* OptimizableGraph::Edge::graph() const{$/;"	f	class:g2o::OptimizableGraph::Edge
initMultiThreading	trunk/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::initMultiThreading()$/;"	f	class:g2o::OptimizableGraph
isSolverSuitable	trunk/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::isSolverSuitable(const OptimizationAlgorithmProperty& solverProperty, const std::set<int>& vertDims_) const$/;"	f	class:g2o::OptimizableGraph
load	trunk/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::load(const char* filename, bool createEdges)$/;"	f	class:g2o::OptimizableGraph
load	trunk/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::load(istream& is, bool createEdges)$/;"	f	class:g2o::OptimizableGraph
maxDimension	trunk/g2o/core/optimizable_graph.cpp	/^int OptimizableGraph::maxDimension() const{$/;"	f	class:g2o::OptimizableGraph
measurementDimension	trunk/g2o/core/optimizable_graph.cpp	/^  int OptimizableGraph::Edge::measurementDimension() const$/;"	f	class:g2o::OptimizableGraph::Edge
minimalEstimateDimension	trunk/g2o/core/optimizable_graph.cpp	/^  int OptimizableGraph::Vertex::minimalEstimateDimension() const$/;"	f	class:g2o::OptimizableGraph::Vertex
optimize	trunk/g2o/core/optimizable_graph.cpp	/^  int OptimizableGraph::optimize(int \/*iterations*\/, bool \/*online*\/) {return 0;}$/;"	f	class:g2o::OptimizableGraph
pop	trunk/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::pop()$/;"	f	class:g2o::OptimizableGraph
pop	trunk/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::pop(HyperGraph::VertexSet& vset)$/;"	f	class:g2o::OptimizableGraph
postIteration	trunk/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::postIteration(int iter)$/;"	f	class:g2o::OptimizableGraph
preIteration	trunk/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::preIteration(int iter)$/;"	f	class:g2o::OptimizableGraph
push	trunk/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::push()$/;"	f	class:g2o::OptimizableGraph
push	trunk/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::push(HyperGraph::VertexSet& vset)$/;"	f	class:g2o::OptimizableGraph
removePostIterationAction	trunk/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::removePostIterationAction(HyperGraphAction* action)$/;"	f	class:g2o::OptimizableGraph
removePreIterationAction	trunk/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::removePreIterationAction(HyperGraphAction* action)$/;"	f	class:g2o::OptimizableGraph
resolveCaches	trunk/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Edge::resolveCaches() {$/;"	f	class:g2o::OptimizableGraph::Edge
resolveParameters	trunk/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Edge::resolveParameters() {$/;"	f	class:g2o::OptimizableGraph::Edge
save	trunk/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::save(const char* filename, int level) const$/;"	f	class:g2o::OptimizableGraph
save	trunk/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::save(ostream& os, int level) const$/;"	f	class:g2o::OptimizableGraph
saveEdge	trunk/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::saveEdge(std::ostream& os, OptimizableGraph::Edge* e) const$/;"	f	class:g2o::OptimizableGraph
saveSubset	trunk/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::saveSubset(ostream& os, HyperGraph::EdgeSet& eset)$/;"	f	class:g2o::OptimizableGraph
saveSubset	trunk/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::saveSubset(ostream& os, HyperGraph::VertexSet& vset, int level)$/;"	f	class:g2o::OptimizableGraph
saveVertex	trunk/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::saveVertex(std::ostream& os, OptimizableGraph::Vertex* v) const$/;"	f	class:g2o::OptimizableGraph
setEstimateData	trunk/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Vertex::setEstimateData(const double* v)$/;"	f	class:g2o::OptimizableGraph::Vertex
setFixed	trunk/g2o/core/optimizable_graph.cpp	/^  void OptimizableGraph::setFixed(HyperGraph::VertexSet& vset, bool fixed)$/;"	f	class:g2o::OptimizableGraph
setMeasurementData	trunk/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Edge::setMeasurementData(const double *)$/;"	f	class:g2o::OptimizableGraph::Edge
setMeasurementFromState	trunk/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Edge::setMeasurementFromState(){$/;"	f	class:g2o::OptimizableGraph::Edge
setMinimalEstimateData	trunk/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Vertex::setMinimalEstimateData(const double* v)$/;"	f	class:g2o::OptimizableGraph::Vertex
setParameterId	trunk/g2o/core/optimizable_graph.cpp	/^  bool OptimizableGraph::Edge::setParameterId(int argNum, int paramId){$/;"	f	class:g2o::OptimizableGraph::Edge
setRenamedTypesFromString	trunk/g2o/core/optimizable_graph.cpp	/^void OptimizableGraph::setRenamedTypesFromString(const std::string& types)$/;"	f	class:g2o::OptimizableGraph
setRobustKernel	trunk/g2o/core/optimizable_graph.cpp	/^  void OptimizableGraph::Edge::setRobustKernel(RobustKernel* ptr)$/;"	f	class:g2o::OptimizableGraph::Edge
updateCache	trunk/g2o/core/optimizable_graph.cpp	/^  void OptimizableGraph::Vertex::updateCache(){$/;"	f	class:g2o::OptimizableGraph::Vertex
verifyInformationMatrices	trunk/g2o/core/optimizable_graph.cpp	/^bool OptimizableGraph::verifyInformationMatrices(bool verbose) const$/;"	f	class:g2o::OptimizableGraph
~Data	trunk/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Data::~Data(){$/;"	f	class:g2o::OptimizableGraph::Data
~Edge	trunk/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Edge::~Edge()$/;"	f	class:g2o::OptimizableGraph::Edge
~OptimizableGraph	trunk/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::~OptimizableGraph()$/;"	f	class:g2o::OptimizableGraph
~Vertex	trunk/g2o/core/optimizable_graph.cpp	/^  OptimizableGraph::Vertex::~Vertex()$/;"	f	class:g2o::OptimizableGraph::Vertex
AT_NUM_ELEMENTS	trunk/g2o/core/optimizable_graph.h	/^      AT_NUM_ELEMENTS, \/\/ keep as last element$/;"	e	enum:g2o::OptimizableGraph::ActionType
AT_POSTITERATION	trunk/g2o/core/optimizable_graph.h	/^      AT_PREITERATION, AT_POSTITERATION,$/;"	e	enum:g2o::OptimizableGraph::ActionType
AT_PREITERATION	trunk/g2o/core/optimizable_graph.h	/^      AT_PREITERATION, AT_POSTITERATION,$/;"	e	enum:g2o::OptimizableGraph::ActionType
ActionType	trunk/g2o/core/optimizable_graph.h	/^    enum ActionType {$/;"	g	struct:g2o::OptimizableGraph
Data	trunk/g2o/core/optimizable_graph.h	/^    class G2O_CORE_API Data : public HyperGraph::HyperGraphElement$/;"	c	struct:g2o::OptimizableGraph
Edge	trunk/g2o/core/optimizable_graph.h	/^    class G2O_CORE_API Edge: public HyperGraph::Edge {$/;"	c	struct:g2o::OptimizableGraph
Edge	trunk/g2o/core/optimizable_graph.h	/^    class G2O_CORE_API Edge;$/;"	m	struct:g2o::OptimizableGraph
EdgeContainer	trunk/g2o/core/optimizable_graph.h	/^    typedef std::vector<OptimizableGraph::Edge*>        EdgeContainer;$/;"	t	struct:g2o::OptimizableGraph
EdgeIDCompare	trunk/g2o/core/optimizable_graph.h	/^    struct G2O_CORE_API EdgeIDCompare {$/;"	s	struct:g2o::OptimizableGraph
G2O_AIS_OPTIMIZABLE_GRAPH_HH_	trunk/g2o/core/optimizable_graph.h	28;"	d
HyperGraphActionSet	trunk/g2o/core/optimizable_graph.h	/^    typedef std::set<HyperGraphAction*>    HyperGraphActionSet;$/;"	t	struct:g2o::OptimizableGraph
OptimizableGraph	trunk/g2o/core/optimizable_graph.h	/^  struct G2O_CORE_API OptimizableGraph : public HyperGraph {$/;"	s	namespace:g2o
Vertex	trunk/g2o/core/optimizable_graph.h	/^    class G2O_CORE_API Vertex : public HyperGraph::Vertex {$/;"	c	struct:g2o::OptimizableGraph
Vertex	trunk/g2o/core/optimizable_graph.h	/^    class G2O_CORE_API Vertex;$/;"	m	struct:g2o::OptimizableGraph
VertexContainer	trunk/g2o/core/optimizable_graph.h	/^    typedef std::vector<OptimizableGraph::Vertex*>      VertexContainer;$/;"	t	struct:g2o::OptimizableGraph
VertexIDCompare	trunk/g2o/core/optimizable_graph.h	/^    struct G2O_CORE_API VertexIDCompare {$/;"	s	struct:g2o::OptimizableGraph
_cacheContainer	trunk/g2o/core/optimizable_graph.h	/^        CacheContainer* _cacheContainer;$/;"	m	class:g2o::OptimizableGraph::Vertex
_cacheIds	trunk/g2o/core/optimizable_graph.h	/^        std::vector<int> _cacheIds;$/;"	m	class:g2o::OptimizableGraph::Edge
_colInHessian	trunk/g2o/core/optimizable_graph.h	/^        int _colInHessian;$/;"	m	class:g2o::OptimizableGraph::Vertex
_dimension	trunk/g2o/core/optimizable_graph.h	/^        int _dimension;$/;"	m	class:g2o::OptimizableGraph::Edge
_dimension	trunk/g2o/core/optimizable_graph.h	/^        int _dimension;$/;"	m	class:g2o::OptimizableGraph::Vertex
_edge_has_id	trunk/g2o/core/optimizable_graph.h	/^    bool _edge_has_id;$/;"	m	struct:g2o::OptimizableGraph
_fixed	trunk/g2o/core/optimizable_graph.h	/^        bool _fixed;$/;"	m	class:g2o::OptimizableGraph::Vertex
_graph	trunk/g2o/core/optimizable_graph.h	/^        OptimizableGraph* _graph;$/;"	m	class:g2o::OptimizableGraph::Vertex
_graphActions	trunk/g2o/core/optimizable_graph.h	/^    std::vector<HyperGraphActionSet> _graphActions;$/;"	m	struct:g2o::OptimizableGraph
_hessianIndex	trunk/g2o/core/optimizable_graph.h	/^        int _hessianIndex;$/;"	m	class:g2o::OptimizableGraph::Vertex
_internalId	trunk/g2o/core/optimizable_graph.h	/^        long long _internalId;$/;"	m	class:g2o::OptimizableGraph::Edge
_jacobianWorkspace	trunk/g2o/core/optimizable_graph.h	/^    JacobianWorkspace _jacobianWorkspace;$/;"	m	struct:g2o::OptimizableGraph
_level	trunk/g2o/core/optimizable_graph.h	/^        int _level;$/;"	m	class:g2o::OptimizableGraph::Edge
_marginalized	trunk/g2o/core/optimizable_graph.h	/^        bool _marginalized;$/;"	m	class:g2o::OptimizableGraph::Vertex
_next	trunk/g2o/core/optimizable_graph.h	/^        Data* _next; \/\/ linked list of multiple data;$/;"	m	class:g2o::OptimizableGraph::Data
_nextEdgeId	trunk/g2o/core/optimizable_graph.h	/^    long long _nextEdgeId;$/;"	m	struct:g2o::OptimizableGraph
_parameterIds	trunk/g2o/core/optimizable_graph.h	/^        std::vector<int> _parameterIds;$/;"	m	class:g2o::OptimizableGraph::Edge
_parameterTypes	trunk/g2o/core/optimizable_graph.h	/^        std::vector<std::string> _parameterTypes;$/;"	m	class:g2o::OptimizableGraph::Edge
_parameters	trunk/g2o/core/optimizable_graph.h	/^        std::vector<Parameter**> _parameters;$/;"	m	class:g2o::OptimizableGraph::Edge
_parameters	trunk/g2o/core/optimizable_graph.h	/^    ParameterContainer _parameters;$/;"	m	struct:g2o::OptimizableGraph
_quadraticFormMutex	trunk/g2o/core/optimizable_graph.h	/^        OpenMPMutex _quadraticFormMutex;$/;"	m	class:g2o::OptimizableGraph::Vertex
_renamedTypesLookup	trunk/g2o/core/optimizable_graph.h	/^    std::map<std::string, std::string> _renamedTypesLookup;$/;"	m	struct:g2o::OptimizableGraph
_robustKernel	trunk/g2o/core/optimizable_graph.h	/^        RobustKernel* _robustKernel;$/;"	m	class:g2o::OptimizableGraph::Edge
_userData	trunk/g2o/core/optimizable_graph.h	/^        Data* _userData;$/;"	m	class:g2o::OptimizableGraph::Vertex
addParameter	trunk/g2o/core/optimizable_graph.h	/^    bool addParameter(Parameter* p) {$/;"	f	struct:g2o::OptimizableGraph
addUserData	trunk/g2o/core/optimizable_graph.h	/^	void addUserData(Data* obs) { $/;"	f	class:g2o::OptimizableGraph::Vertex
addVertex	trunk/g2o/core/optimizable_graph.h	/^    virtual bool addVertex(HyperGraph::Vertex* v) { return addVertex(v, 0);}$/;"	f	struct:g2o::OptimizableGraph
colInHessian	trunk/g2o/core/optimizable_graph.h	/^        int colInHessian() const {return _colInHessian;}$/;"	f	class:g2o::OptimizableGraph::Vertex
createFrom	trunk/g2o/core/optimizable_graph.h	/^        virtual Vertex* createFrom() {return 0;}$/;"	f	class:g2o::OptimizableGraph::Edge
createTo	trunk/g2o/core/optimizable_graph.h	/^        virtual Vertex* createTo()   {return 0;}$/;"	f	class:g2o::OptimizableGraph::Edge
dimension	trunk/g2o/core/optimizable_graph.h	/^        int dimension() const { return _dimension;}$/;"	f	class:g2o::OptimizableGraph::Edge
dimension	trunk/g2o/core/optimizable_graph.h	/^        int dimension() const { return _dimension;}$/;"	f	class:g2o::OptimizableGraph::Vertex
elementType	trunk/g2o/core/optimizable_graph.h	/^        virtual HyperGraph::HyperGraphElementType elementType() const { return HyperGraph::HGET_DATA;}$/;"	f	class:g2o::OptimizableGraph::Data
fixed	trunk/g2o/core/optimizable_graph.h	/^        bool fixed() const {return _fixed;}$/;"	f	class:g2o::OptimizableGraph::Vertex
g2o	trunk/g2o/core/optimizable_graph.h	/^namespace g2o {$/;"	n
getEstimateData	trunk/g2o/core/optimizable_graph.h	/^        virtual bool getEstimateData(std::vector<double>& estimate) const {$/;"	f	class:g2o::OptimizableGraph::Vertex
getMinimalEstimateData	trunk/g2o/core/optimizable_graph.h	/^        virtual bool getMinimalEstimateData(std::vector<double>& estimate) const {$/;"	f	class:g2o::OptimizableGraph::Vertex
graph	trunk/g2o/core/optimizable_graph.h	/^        OptimizableGraph* graph() {return _graph;}$/;"	f	class:g2o::OptimizableGraph::Vertex
graph	trunk/g2o/core/optimizable_graph.h	/^        const OptimizableGraph* graph() const {return _graph;}$/;"	f	class:g2o::OptimizableGraph::Vertex
hessianIndex	trunk/g2o/core/optimizable_graph.h	/^        int hessianIndex() const { return _hessianIndex;}$/;"	f	class:g2o::OptimizableGraph::Vertex
initialEstimatePossible	trunk/g2o/core/optimizable_graph.h	/^        virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to) { (void) from; (void) to; return -1.;}$/;"	f	class:g2o::OptimizableGraph::Edge
installParameter	trunk/g2o/core/optimizable_graph.h	/^          bool installParameter(ParameterType*& p, size_t argNo, int paramId=-1){$/;"	f	class:g2o::OptimizableGraph::Edge
internalId	trunk/g2o/core/optimizable_graph.h	/^        long long internalId() const { return _internalId;}$/;"	f	class:g2o::OptimizableGraph::Edge
jacobianWorkspace	trunk/g2o/core/optimizable_graph.h	/^    JacobianWorkspace& jacobianWorkspace() { return _jacobianWorkspace;}$/;"	f	struct:g2o::OptimizableGraph
jacobianWorkspace	trunk/g2o/core/optimizable_graph.h	/^    const JacobianWorkspace& jacobianWorkspace() const { return _jacobianWorkspace;}$/;"	f	struct:g2o::OptimizableGraph
level	trunk/g2o/core/optimizable_graph.h	/^        int level() const { return _level;}$/;"	f	class:g2o::OptimizableGraph::Edge
lockQuadraticForm	trunk/g2o/core/optimizable_graph.h	/^        void lockQuadraticForm() { _quadraticFormMutex.lock();}$/;"	f	class:g2o::OptimizableGraph::Vertex
marginalized	trunk/g2o/core/optimizable_graph.h	/^        bool marginalized() const {return _marginalized;}$/;"	f	class:g2o::OptimizableGraph::Vertex
next	trunk/g2o/core/optimizable_graph.h	/^        Data* next() {return _next;}$/;"	f	class:g2o::OptimizableGraph::Data
next	trunk/g2o/core/optimizable_graph.h	/^        const Data* next() const {return _next;}$/;"	f	class:g2o::OptimizableGraph::Data
numParameters	trunk/g2o/core/optimizable_graph.h	/^        inline size_t numParameters() const {return _parameters.size();}$/;"	f	class:g2o::OptimizableGraph::Edge
operator ()	trunk/g2o/core/optimizable_graph.h	/^      bool operator() (const Edge* e1, const Edge* e2) const$/;"	f	struct:g2o::OptimizableGraph::EdgeIDCompare
operator ()	trunk/g2o/core/optimizable_graph.h	/^      bool operator() (const Vertex* v1, const Vertex* v2) const$/;"	f	struct:g2o::OptimizableGraph::VertexIDCompare
oplus	trunk/g2o/core/optimizable_graph.h	/^        void oplus(const double* v)$/;"	f	class:g2o::OptimizableGraph::Vertex
parameter	trunk/g2o/core/optimizable_graph.h	/^        inline const Parameter* parameter(int argNo) const {return *_parameters.at(argNo);}$/;"	f	class:g2o::OptimizableGraph::Edge
parameter	trunk/g2o/core/optimizable_graph.h	/^    Parameter* parameter(int id) {$/;"	f	struct:g2o::OptimizableGraph
resizeParameters	trunk/g2o/core/optimizable_graph.h	/^        inline void resizeParameters(size_t newSize) {$/;"	f	class:g2o::OptimizableGraph::Edge
robustKernel	trunk/g2o/core/optimizable_graph.h	/^        RobustKernel* robustKernel() const { return _robustKernel;}$/;"	f	class:g2o::OptimizableGraph::Edge
setColInHessian	trunk/g2o/core/optimizable_graph.h	/^        void setColInHessian(int c) { _colInHessian = c;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setEstimateData	trunk/g2o/core/optimizable_graph.h	/^        bool setEstimateData(const std::vector<double>& estimate) { $/;"	f	class:g2o::OptimizableGraph::Vertex
setEstimateDataImpl	trunk/g2o/core/optimizable_graph.h	/^        virtual bool setEstimateDataImpl(const double* ) { return false;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setFixed	trunk/g2o/core/optimizable_graph.h	/^        void setFixed(bool fixed) { _fixed = fixed;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setHessianIndex	trunk/g2o/core/optimizable_graph.h	/^        void setHessianIndex(int ti) { _hessianIndex = ti;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setId	trunk/g2o/core/optimizable_graph.h	/^        virtual void setId(int id) {_id = id;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setLevel	trunk/g2o/core/optimizable_graph.h	/^        void setLevel(int l) { _level=l;}$/;"	f	class:g2o::OptimizableGraph::Edge
setMarginalized	trunk/g2o/core/optimizable_graph.h	/^        void setMarginalized(bool marginalized) { _marginalized = marginalized;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setMinimalEstimateData	trunk/g2o/core/optimizable_graph.h	/^        bool setMinimalEstimateData(const std::vector<double>& estimate) {$/;"	f	class:g2o::OptimizableGraph::Vertex
setMinimalEstimateDataImpl	trunk/g2o/core/optimizable_graph.h	/^        virtual bool setMinimalEstimateDataImpl(const double* ) { return false;}$/;"	f	class:g2o::OptimizableGraph::Vertex
setNext	trunk/g2o/core/optimizable_graph.h	/^        void setNext(Data* next_) { _next = next_; }$/;"	f	class:g2o::OptimizableGraph::Data
setTempIndex	trunk/g2o/core/optimizable_graph.h	/^        void G2O_ATTRIBUTE_DEPRECATED(setTempIndex(int ti)) { setHessianIndex(ti);}$/;"	f	class:g2o::OptimizableGraph::Vertex
setToOrigin	trunk/g2o/core/optimizable_graph.h	/^        void setToOrigin() { setToOriginImpl(); updateCache();}$/;"	f	class:g2o::OptimizableGraph::Vertex
setUserData	trunk/g2o/core/optimizable_graph.h	/^        void setUserData(Data* obs) { _userData = obs;}$/;"	f	class:g2o::OptimizableGraph::Vertex
tempIndex	trunk/g2o/core/optimizable_graph.h	/^        int G2O_ATTRIBUTE_DEPRECATED(tempIndex() const) { return hessianIndex();}$/;"	f	class:g2o::OptimizableGraph::Vertex
unlockQuadraticForm	trunk/g2o/core/optimizable_graph.h	/^        void unlockQuadraticForm() { _quadraticFormMutex.unlock();}$/;"	f	class:g2o::OptimizableGraph::Vertex
userData	trunk/g2o/core/optimizable_graph.h	/^        Data* userData() { return _userData; }$/;"	f	class:g2o::OptimizableGraph::Vertex
userData	trunk/g2o/core/optimizable_graph.h	/^        const Data* userData() const { return _userData; }$/;"	f	class:g2o::OptimizableGraph::Vertex
vertex	trunk/g2o/core/optimizable_graph.h	/^    inline Vertex* vertex(int id) { return reinterpret_cast<Vertex*>(HyperGraph::vertex(id));}$/;"	f	struct:g2o::OptimizableGraph
vertex	trunk/g2o/core/optimizable_graph.h	/^    inline const Vertex* vertex (int id) const{ return reinterpret_cast<const Vertex*>(HyperGraph::vertex(id));}$/;"	f	struct:g2o::OptimizableGraph
OptimizationAlgorithm	trunk/g2o/core/optimization_algorithm.cpp	/^OptimizationAlgorithm::OptimizationAlgorithm() :$/;"	f	class:g2o::OptimizationAlgorithm
g2o	trunk/g2o/core/optimization_algorithm.cpp	/^namespace g2o {$/;"	n	file:
printProperties	trunk/g2o/core/optimization_algorithm.cpp	/^void OptimizationAlgorithm::printProperties(std::ostream& os) const$/;"	f	class:g2o::OptimizationAlgorithm
setOptimizer	trunk/g2o/core/optimization_algorithm.cpp	/^void OptimizationAlgorithm::setOptimizer(SparseOptimizer* optimizer)$/;"	f	class:g2o::OptimizationAlgorithm
updatePropertiesFromString	trunk/g2o/core/optimization_algorithm.cpp	/^bool OptimizationAlgorithm::updatePropertiesFromString(const std::string& propString)$/;"	f	class:g2o::OptimizationAlgorithm
~OptimizationAlgorithm	trunk/g2o/core/optimization_algorithm.cpp	/^OptimizationAlgorithm::~OptimizationAlgorithm()$/;"	f	class:g2o::OptimizationAlgorithm
Fail	trunk/g2o/core/optimization_algorithm.h	/^      enum G2O_CORE_API SolverResult {Terminate=2, OK=1, Fail=-1};$/;"	e	enum:g2o::OptimizationAlgorithm::SolverResult
G2O_OPTIMIZATION_ALGORITHM_H	trunk/g2o/core/optimization_algorithm.h	28;"	d
OK	trunk/g2o/core/optimization_algorithm.h	/^      enum G2O_CORE_API SolverResult {Terminate=2, OK=1, Fail=-1};$/;"	e	enum:g2o::OptimizationAlgorithm::SolverResult
OptimizationAlgorithm	trunk/g2o/core/optimization_algorithm.h	/^      OptimizationAlgorithm(const OptimizationAlgorithm&) { }$/;"	f	class:g2o::OptimizationAlgorithm
OptimizationAlgorithm	trunk/g2o/core/optimization_algorithm.h	/^  class G2O_CORE_API OptimizationAlgorithm$/;"	c	namespace:g2o
SolverResult	trunk/g2o/core/optimization_algorithm.h	/^      enum G2O_CORE_API SolverResult {Terminate=2, OK=1, Fail=-1};$/;"	g	class:g2o::OptimizationAlgorithm
Terminate	trunk/g2o/core/optimization_algorithm.h	/^      enum G2O_CORE_API SolverResult {Terminate=2, OK=1, Fail=-1};$/;"	e	enum:g2o::OptimizationAlgorithm::SolverResult
_optimizer	trunk/g2o/core/optimization_algorithm.h	/^      SparseOptimizer* _optimizer;   \/\/\/< the optimizer the solver is working on$/;"	m	class:g2o::OptimizationAlgorithm
_properties	trunk/g2o/core/optimization_algorithm.h	/^      PropertyMap _properties;       \/\/\/< the properties of your solver, use this to store the parameters of your solver$/;"	m	class:g2o::OptimizationAlgorithm
g2o	trunk/g2o/core/optimization_algorithm.h	/^namespace g2o {$/;"	n
operator =	trunk/g2o/core/optimization_algorithm.h	/^      OptimizationAlgorithm& operator= (const OptimizationAlgorithm&) { return *this; }$/;"	f	class:g2o::OptimizationAlgorithm
optimizer	trunk/g2o/core/optimization_algorithm.h	/^      SparseOptimizer* optimizer() { return _optimizer;}$/;"	f	class:g2o::OptimizationAlgorithm
optimizer	trunk/g2o/core/optimization_algorithm.h	/^      const SparseOptimizer* optimizer() const { return _optimizer;}$/;"	f	class:g2o::OptimizationAlgorithm
printVerbose	trunk/g2o/core/optimization_algorithm.h	/^      virtual void printVerbose(std::ostream& os) const {(void) os;};$/;"	f	class:g2o::OptimizationAlgorithm
properties	trunk/g2o/core/optimization_algorithm.h	/^      const PropertyMap& properties() const { return _properties;}$/;"	f	class:g2o::OptimizationAlgorithm
OptimizationAlgorithmDogleg	trunk/g2o/core/optimization_algorithm_dogleg.cpp	/^  OptimizationAlgorithmDogleg::OptimizationAlgorithmDogleg(BlockSolverBase* solver) :$/;"	f	class:g2o::OptimizationAlgorithmDogleg
g2o	trunk/g2o/core/optimization_algorithm_dogleg.cpp	/^namespace g2o {$/;"	n	file:
printVerbose	trunk/g2o/core/optimization_algorithm_dogleg.cpp	/^  void OptimizationAlgorithmDogleg::printVerbose(std::ostream& os) const$/;"	f	class:g2o::OptimizationAlgorithmDogleg
solve	trunk/g2o/core/optimization_algorithm_dogleg.cpp	/^  OptimizationAlgorithm::SolverResult OptimizationAlgorithmDogleg::solve(int iteration, bool online)$/;"	f	class:g2o::OptimizationAlgorithmDogleg
stepType2Str	trunk/g2o/core/optimization_algorithm_dogleg.cpp	/^  const char* OptimizationAlgorithmDogleg::stepType2Str(int stepType)$/;"	f	class:g2o::OptimizationAlgorithmDogleg
~OptimizationAlgorithmDogleg	trunk/g2o/core/optimization_algorithm_dogleg.cpp	/^  OptimizationAlgorithmDogleg::~OptimizationAlgorithmDogleg()$/;"	f	class:g2o::OptimizationAlgorithmDogleg
G2O_OPTIMIZATION_ALGORITHM_DOGLEG_H	trunk/g2o/core/optimization_algorithm_dogleg.h	28;"	d
OptimizationAlgorithmDogleg	trunk/g2o/core/optimization_algorithm_dogleg.h	/^  class G2O_CORE_API OptimizationAlgorithmDogleg : public OptimizationAlgorithmWithHessian$/;"	c	namespace:g2o
STEP_DL	trunk/g2o/core/optimization_algorithm_dogleg.h	/^        STEP_SD, STEP_GN, STEP_DL$/;"	e	enum:g2o::OptimizationAlgorithmDogleg::<anonymous>
STEP_GN	trunk/g2o/core/optimization_algorithm_dogleg.h	/^        STEP_SD, STEP_GN, STEP_DL$/;"	e	enum:g2o::OptimizationAlgorithmDogleg::<anonymous>
STEP_SD	trunk/g2o/core/optimization_algorithm_dogleg.h	/^        STEP_SD, STEP_GN, STEP_DL$/;"	e	enum:g2o::OptimizationAlgorithmDogleg::<anonymous>
STEP_UNDEFINED	trunk/g2o/core/optimization_algorithm_dogleg.h	/^        STEP_UNDEFINED,$/;"	e	enum:g2o::OptimizationAlgorithmDogleg::<anonymous>
_auxVector	trunk/g2o/core/optimization_algorithm_dogleg.h	/^      Eigen::VectorXd _auxVector;   \/\/\/< auxilary vector used to perform multiplications or other stuff$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_currentLambda	trunk/g2o/core/optimization_algorithm_dogleg.h	/^      double _currentLambda;        \/\/\/< the damping factor to force positive definite matrix$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_delta	trunk/g2o/core/optimization_algorithm_dogleg.h	/^      double _delta;                \/\/\/< trust region$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_hdl	trunk/g2o/core/optimization_algorithm_dogleg.h	/^      Eigen::VectorXd _hdl;         \/\/\/< final dogleg step$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_hsd	trunk/g2o/core/optimization_algorithm_dogleg.h	/^      Eigen::VectorXd _hsd;         \/\/\/< steepest decent step$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_initialLambda	trunk/g2o/core/optimization_algorithm_dogleg.h	/^      Property<double>* _initialLambda;$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_lamdbaFactor	trunk/g2o/core/optimization_algorithm_dogleg.h	/^      Property<double>* _lamdbaFactor;$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_lastNumTries	trunk/g2o/core/optimization_algorithm_dogleg.h	/^      int _lastNumTries;$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_lastStep	trunk/g2o/core/optimization_algorithm_dogleg.h	/^      int _lastStep;                \/\/\/< type of the step taken by the algorithm$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_maxTrialsAfterFailure	trunk/g2o/core/optimization_algorithm_dogleg.h	/^      Property<int>* _maxTrialsAfterFailure;$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_userDeltaInit	trunk/g2o/core/optimization_algorithm_dogleg.h	/^      Property<double>* _userDeltaInit;$/;"	m	class:g2o::OptimizationAlgorithmDogleg
_wasPDInAllIterations	trunk/g2o/core/optimization_algorithm_dogleg.h	/^      bool _wasPDInAllIterations;   \/\/\/< the matrix we solve was positive definite in all iterations -> if not apply damping$/;"	m	class:g2o::OptimizationAlgorithmDogleg
g2o	trunk/g2o/core/optimization_algorithm_dogleg.h	/^namespace g2o {$/;"	n
lastStep	trunk/g2o/core/optimization_algorithm_dogleg.h	/^      int lastStep() const { return _lastStep;}$/;"	f	class:g2o::OptimizationAlgorithmDogleg
trustRegion	trunk/g2o/core/optimization_algorithm_dogleg.h	/^      double trustRegion() const { return _delta;}$/;"	f	class:g2o::OptimizationAlgorithmDogleg
AbstractOptimizationAlgorithmCreator	trunk/g2o/core/optimization_algorithm_factory.cpp	/^  AbstractOptimizationAlgorithmCreator::AbstractOptimizationAlgorithmCreator(const OptimizationAlgorithmProperty& p) :$/;"	f	class:g2o::AbstractOptimizationAlgorithmCreator
OptimizationAlgorithmFactory	trunk/g2o/core/optimization_algorithm_factory.cpp	/^  OptimizationAlgorithmFactory::OptimizationAlgorithmFactory()$/;"	f	class:g2o::OptimizationAlgorithmFactory
construct	trunk/g2o/core/optimization_algorithm_factory.cpp	/^  OptimizationAlgorithm* OptimizationAlgorithmFactory::construct(const std::string& name, OptimizationAlgorithmProperty& solverProperty) const$/;"	f	class:g2o::OptimizationAlgorithmFactory
destroy	trunk/g2o/core/optimization_algorithm_factory.cpp	/^  void OptimizationAlgorithmFactory::destroy()$/;"	f	class:g2o::OptimizationAlgorithmFactory
factoryInstance	trunk/g2o/core/optimization_algorithm_factory.cpp	/^  OptimizationAlgorithmFactory* OptimizationAlgorithmFactory::factoryInstance = 0;$/;"	m	class:g2o::OptimizationAlgorithmFactory	file:
findSolver	trunk/g2o/core/optimization_algorithm_factory.cpp	/^  OptimizationAlgorithmFactory::CreatorList::const_iterator OptimizationAlgorithmFactory::findSolver(const std::string& name) const$/;"	f	class:g2o::OptimizationAlgorithmFactory
findSolver	trunk/g2o/core/optimization_algorithm_factory.cpp	/^  OptimizationAlgorithmFactory::CreatorList::iterator OptimizationAlgorithmFactory::findSolver(const std::string& name)$/;"	f	class:g2o::OptimizationAlgorithmFactory
g2o	trunk/g2o/core/optimization_algorithm_factory.cpp	/^namespace g2o {$/;"	n	file:
instance	trunk/g2o/core/optimization_algorithm_factory.cpp	/^  OptimizationAlgorithmFactory* OptimizationAlgorithmFactory::instance()$/;"	f	class:g2o::OptimizationAlgorithmFactory
listSolvers	trunk/g2o/core/optimization_algorithm_factory.cpp	/^  void OptimizationAlgorithmFactory::listSolvers(std::ostream& os) const$/;"	f	class:g2o::OptimizationAlgorithmFactory
registerSolver	trunk/g2o/core/optimization_algorithm_factory.cpp	/^  void OptimizationAlgorithmFactory::registerSolver(AbstractOptimizationAlgorithmCreator* c)$/;"	f	class:g2o::OptimizationAlgorithmFactory
unregisterSolver	trunk/g2o/core/optimization_algorithm_factory.cpp	/^  void OptimizationAlgorithmFactory::unregisterSolver(AbstractOptimizationAlgorithmCreator* c)$/;"	f	class:g2o::OptimizationAlgorithmFactory
~OptimizationAlgorithmFactory	trunk/g2o/core/optimization_algorithm_factory.cpp	/^  OptimizationAlgorithmFactory::~OptimizationAlgorithmFactory()$/;"	f	class:g2o::OptimizationAlgorithmFactory
AbstractOptimizationAlgorithmCreator	trunk/g2o/core/optimization_algorithm_factory.h	/^  class G2O_CORE_API AbstractOptimizationAlgorithmCreator$/;"	c	namespace:g2o
CreatorList	trunk/g2o/core/optimization_algorithm_factory.h	/^      typedef std::list<AbstractOptimizationAlgorithmCreator*>      CreatorList;$/;"	t	class:g2o::OptimizationAlgorithmFactory
G2O_OAF_EXPORT	trunk/g2o/core/optimization_algorithm_factory.h	146;"	d
G2O_OAF_EXPORT	trunk/g2o/core/optimization_algorithm_factory.h	149;"	d
G2O_OAF_IMPORT	trunk/g2o/core/optimization_algorithm_factory.h	147;"	d
G2O_OAF_IMPORT	trunk/g2o/core/optimization_algorithm_factory.h	150;"	d
G2O_OPTMIZATION_ALGORITHM_PROPERTY_H	trunk/g2o/core/optimization_algorithm_factory.h	28;"	d
G2O_REGISTER_OPTIMIZATION_ALGORITHM	trunk/g2o/core/optimization_algorithm_factory.h	160;"	d
G2O_REGISTER_OPTIMIZATION_LIBRARY	trunk/g2o/core/optimization_algorithm_factory.h	153;"	d
G2O_USE_OPTIMIZATION_ALGORITHM	trunk/g2o/core/optimization_algorithm_factory.h	164;"	d
G2O_USE_OPTIMIZATION_LIBRARY	trunk/g2o/core/optimization_algorithm_factory.h	156;"	d
OptimizationAlgorithm	trunk/g2o/core/optimization_algorithm_factory.h	/^  class G2O_CORE_API OptimizationAlgorithm;$/;"	v
OptimizationAlgorithmFactory	trunk/g2o/core/optimization_algorithm_factory.h	/^  class G2O_CORE_API OptimizationAlgorithmFactory$/;"	c	namespace:g2o
RegisterOptimizationAlgorithmProxy	trunk/g2o/core/optimization_algorithm_factory.h	/^      RegisterOptimizationAlgorithmProxy(AbstractOptimizationAlgorithmCreator* c)$/;"	f	class:g2o::RegisterOptimizationAlgorithmProxy
RegisterOptimizationAlgorithmProxy	trunk/g2o/core/optimization_algorithm_factory.h	/^  class RegisterOptimizationAlgorithmProxy$/;"	c	namespace:g2o
SparseOptimizer	trunk/g2o/core/optimization_algorithm_factory.h	/^  class G2O_CORE_API SparseOptimizer;$/;"	v
_creator	trunk/g2o/core/optimization_algorithm_factory.h	/^      AbstractOptimizationAlgorithmCreator* _creator;$/;"	m	class:g2o::RegisterOptimizationAlgorithmProxy
_creator	trunk/g2o/core/optimization_algorithm_factory.h	/^      CreatorList _creator;$/;"	m	class:g2o::OptimizationAlgorithmFactory
_property	trunk/g2o/core/optimization_algorithm_factory.h	/^      OptimizationAlgorithmProperty _property;$/;"	m	class:g2o::AbstractOptimizationAlgorithmCreator
creatorList	trunk/g2o/core/optimization_algorithm_factory.h	/^      const CreatorList& creatorList() const { return _creator;}$/;"	f	class:g2o::OptimizationAlgorithmFactory
factoryInstance	trunk/g2o/core/optimization_algorithm_factory.h	/^      static OptimizationAlgorithmFactory* factoryInstance;$/;"	m	class:g2o::OptimizationAlgorithmFactory
g2o	trunk/g2o/core/optimization_algorithm_factory.h	/^namespace g2o {$/;"	n
property	trunk/g2o/core/optimization_algorithm_factory.h	/^      const OptimizationAlgorithmProperty& property() const { return _property;}$/;"	f	class:g2o::AbstractOptimizationAlgorithmCreator
~AbstractOptimizationAlgorithmCreator	trunk/g2o/core/optimization_algorithm_factory.h	/^      virtual ~AbstractOptimizationAlgorithmCreator() { }$/;"	f	class:g2o::AbstractOptimizationAlgorithmCreator
~RegisterOptimizationAlgorithmProxy	trunk/g2o/core/optimization_algorithm_factory.h	/^      ~RegisterOptimizationAlgorithmProxy()$/;"	f	class:g2o::RegisterOptimizationAlgorithmProxy
OptimizationAlgorithmGaussNewton	trunk/g2o/core/optimization_algorithm_gauss_newton.cpp	/^  OptimizationAlgorithmGaussNewton::OptimizationAlgorithmGaussNewton(Solver* solver) :$/;"	f	class:g2o::OptimizationAlgorithmGaussNewton
g2o	trunk/g2o/core/optimization_algorithm_gauss_newton.cpp	/^namespace g2o {$/;"	n	file:
printVerbose	trunk/g2o/core/optimization_algorithm_gauss_newton.cpp	/^  void OptimizationAlgorithmGaussNewton::printVerbose(std::ostream& os) const$/;"	f	class:g2o::OptimizationAlgorithmGaussNewton
solve	trunk/g2o/core/optimization_algorithm_gauss_newton.cpp	/^  OptimizationAlgorithm::SolverResult OptimizationAlgorithmGaussNewton::solve(int iteration, bool online)$/;"	f	class:g2o::OptimizationAlgorithmGaussNewton
~OptimizationAlgorithmGaussNewton	trunk/g2o/core/optimization_algorithm_gauss_newton.cpp	/^  OptimizationAlgorithmGaussNewton::~OptimizationAlgorithmGaussNewton()$/;"	f	class:g2o::OptimizationAlgorithmGaussNewton
G2O_OPTIMIZATION_ALGORITHM_GAUSS_NEWTON_H	trunk/g2o/core/optimization_algorithm_gauss_newton.h	28;"	d
OptimizationAlgorithmGaussNewton	trunk/g2o/core/optimization_algorithm_gauss_newton.h	/^  class G2O_CORE_API OptimizationAlgorithmGaussNewton : public OptimizationAlgorithmWithHessian$/;"	c	namespace:g2o
g2o	trunk/g2o/core/optimization_algorithm_gauss_newton.h	/^namespace g2o {$/;"	n
OptimizationAlgorithmLevenberg	trunk/g2o/core/optimization_algorithm_levenberg.cpp	/^  OptimizationAlgorithmLevenberg::OptimizationAlgorithmLevenberg(Solver* solver) :$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
computeLambdaInit	trunk/g2o/core/optimization_algorithm_levenberg.cpp	/^  double OptimizationAlgorithmLevenberg::computeLambdaInit() const$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
computeScale	trunk/g2o/core/optimization_algorithm_levenberg.cpp	/^  double OptimizationAlgorithmLevenberg::computeScale() const$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
g2o	trunk/g2o/core/optimization_algorithm_levenberg.cpp	/^namespace g2o {$/;"	n	file:
printVerbose	trunk/g2o/core/optimization_algorithm_levenberg.cpp	/^  void OptimizationAlgorithmLevenberg::printVerbose(std::ostream& os) const$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
setMaxTrialsAfterFailure	trunk/g2o/core/optimization_algorithm_levenberg.cpp	/^  void OptimizationAlgorithmLevenberg::setMaxTrialsAfterFailure(int max_trials)$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
setUserLambdaInit	trunk/g2o/core/optimization_algorithm_levenberg.cpp	/^  void OptimizationAlgorithmLevenberg::setUserLambdaInit(double lambda)$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
solve	trunk/g2o/core/optimization_algorithm_levenberg.cpp	/^  OptimizationAlgorithm::SolverResult OptimizationAlgorithmLevenberg::solve(int iteration, bool online)$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
~OptimizationAlgorithmLevenberg	trunk/g2o/core/optimization_algorithm_levenberg.cpp	/^  OptimizationAlgorithmLevenberg::~OptimizationAlgorithmLevenberg()$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
G2O_SOLVER_LEVENBERG_H	trunk/g2o/core/optimization_algorithm_levenberg.h	28;"	d
OptimizationAlgorithmLevenberg	trunk/g2o/core/optimization_algorithm_levenberg.h	/^  class G2O_CORE_API OptimizationAlgorithmLevenberg : public OptimizationAlgorithmWithHessian$/;"	c	namespace:g2o
_currentLambda	trunk/g2o/core/optimization_algorithm_levenberg.h	/^      double _currentLambda;$/;"	m	class:g2o::OptimizationAlgorithmLevenberg
_goodStepLowerScale	trunk/g2o/core/optimization_algorithm_levenberg.h	/^      double _goodStepLowerScale; \/\/\/< lower bound for lambda decrease if a good LM step$/;"	m	class:g2o::OptimizationAlgorithmLevenberg
_goodStepUpperScale	trunk/g2o/core/optimization_algorithm_levenberg.h	/^      double _goodStepUpperScale; \/\/\/< upper bound for lambda decrease if a good LM step$/;"	m	class:g2o::OptimizationAlgorithmLevenberg
_levenbergIterations	trunk/g2o/core/optimization_algorithm_levenberg.h	/^      int _levenbergIterations;   \/\/\/< the numer of levenberg iterations performed to accept the last step$/;"	m	class:g2o::OptimizationAlgorithmLevenberg
_maxTrialsAfterFailure	trunk/g2o/core/optimization_algorithm_levenberg.h	/^      Property<int>* _maxTrialsAfterFailure;$/;"	m	class:g2o::OptimizationAlgorithmLevenberg
_ni	trunk/g2o/core/optimization_algorithm_levenberg.h	/^      double _ni;$/;"	m	class:g2o::OptimizationAlgorithmLevenberg
_tau	trunk/g2o/core/optimization_algorithm_levenberg.h	/^      double _tau;$/;"	m	class:g2o::OptimizationAlgorithmLevenberg
_userLambdaInit	trunk/g2o/core/optimization_algorithm_levenberg.h	/^      Property<double>* _userLambdaInit;$/;"	m	class:g2o::OptimizationAlgorithmLevenberg
currentLambda	trunk/g2o/core/optimization_algorithm_levenberg.h	/^      double currentLambda() const { return _currentLambda;}$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
g2o	trunk/g2o/core/optimization_algorithm_levenberg.h	/^namespace g2o {$/;"	n
levenbergIteration	trunk/g2o/core/optimization_algorithm_levenberg.h	/^      int levenbergIteration() { return _levenbergIterations;}$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
maxTrialsAfterFailure	trunk/g2o/core/optimization_algorithm_levenberg.h	/^      int maxTrialsAfterFailure() const { return _maxTrialsAfterFailure->value();}$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
userLambdaInit	trunk/g2o/core/optimization_algorithm_levenberg.h	/^      double userLambdaInit() {return _userLambdaInit->value();}$/;"	f	class:g2o::OptimizationAlgorithmLevenberg
G2O_OPTIMIZATION_ALGORITHM_PROPERTY_H	trunk/g2o/core/optimization_algorithm_property.h	28;"	d
OptimizationAlgorithmProperty	trunk/g2o/core/optimization_algorithm_property.h	/^  OptimizationAlgorithmProperty() :$/;"	f	struct:g2o::OptimizationAlgorithmProperty
OptimizationAlgorithmProperty	trunk/g2o/core/optimization_algorithm_property.h	/^  OptimizationAlgorithmProperty(const std::string& name_, const std::string& desc_, const std::string& type_, bool requiresMarginalize_, int poseDim_, int landmarkDim_) :$/;"	f	struct:g2o::OptimizationAlgorithmProperty
OptimizationAlgorithmProperty	trunk/g2o/core/optimization_algorithm_property.h	/^struct G2O_CORE_API OptimizationAlgorithmProperty$/;"	s	namespace:g2o
desc	trunk/g2o/core/optimization_algorithm_property.h	/^  std::string desc;           \/\/\/< short description of the solver$/;"	m	struct:g2o::OptimizationAlgorithmProperty
g2o	trunk/g2o/core/optimization_algorithm_property.h	/^namespace g2o {$/;"	n
landmarkDim	trunk/g2o/core/optimization_algorithm_property.h	/^  int landmarkDim;            \/\/\/< dimension of the landmar vertices (-1 if variable)$/;"	m	struct:g2o::OptimizationAlgorithmProperty
name	trunk/g2o/core/optimization_algorithm_property.h	/^  std::string name;           \/\/\/< name of the solver, e.g., var$/;"	m	struct:g2o::OptimizationAlgorithmProperty
poseDim	trunk/g2o/core/optimization_algorithm_property.h	/^  int poseDim;                \/\/\/< dimension of the pose vertices (-1 if variable)$/;"	m	struct:g2o::OptimizationAlgorithmProperty
requiresMarginalize	trunk/g2o/core/optimization_algorithm_property.h	/^  bool requiresMarginalize;   \/\/\/< whether the solver requires marginalization of landmarks$/;"	m	struct:g2o::OptimizationAlgorithmProperty
type	trunk/g2o/core/optimization_algorithm_property.h	/^  std::string type;           \/\/\/< type of solver, e.g., "CSparse Cholesky", "PCG"$/;"	m	struct:g2o::OptimizationAlgorithmProperty
OptimizationAlgorithmWithHessian	trunk/g2o/core/optimization_algorithm_with_hessian.cpp	/^  OptimizationAlgorithmWithHessian::OptimizationAlgorithmWithHessian(Solver* solver) :$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
buildLinearStructure	trunk/g2o/core/optimization_algorithm_with_hessian.cpp	/^  bool OptimizationAlgorithmWithHessian::buildLinearStructure()$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
computeMarginals	trunk/g2o/core/optimization_algorithm_with_hessian.cpp	/^  bool OptimizationAlgorithmWithHessian::computeMarginals(SparseBlockMatrix<MatrixXd>& spinv, const std::vector<std::pair<int, int> >& blockIndices)$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
g2o	trunk/g2o/core/optimization_algorithm_with_hessian.cpp	/^namespace g2o {$/;"	n	file:
init	trunk/g2o/core/optimization_algorithm_with_hessian.cpp	/^  bool OptimizationAlgorithmWithHessian::init(bool online)$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
setWriteDebug	trunk/g2o/core/optimization_algorithm_with_hessian.cpp	/^  void OptimizationAlgorithmWithHessian::setWriteDebug(bool writeDebug)$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
updateLinearSystem	trunk/g2o/core/optimization_algorithm_with_hessian.cpp	/^  void OptimizationAlgorithmWithHessian::updateLinearSystem()$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
updateStructure	trunk/g2o/core/optimization_algorithm_with_hessian.cpp	/^  bool OptimizationAlgorithmWithHessian::updateStructure(const std::vector<HyperGraph::Vertex*>& vset, const HyperGraph::EdgeSet& edges)$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
~OptimizationAlgorithmWithHessian	trunk/g2o/core/optimization_algorithm_with_hessian.cpp	/^  OptimizationAlgorithmWithHessian::~OptimizationAlgorithmWithHessian()$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
G2O_OPTIMIZATION_ALGORITHM_WITH_HESSIAN_H	trunk/g2o/core/optimization_algorithm_with_hessian.h	28;"	d
OptimizationAlgorithmWithHessian	trunk/g2o/core/optimization_algorithm_with_hessian.h	/^  class G2O_CORE_API OptimizationAlgorithmWithHessian : public OptimizationAlgorithm$/;"	c	namespace:g2o
_solver	trunk/g2o/core/optimization_algorithm_with_hessian.h	/^      Solver* _solver;$/;"	m	class:g2o::OptimizationAlgorithmWithHessian
_writeDebug	trunk/g2o/core/optimization_algorithm_with_hessian.h	/^      Property<bool>* _writeDebug;$/;"	m	class:g2o::OptimizationAlgorithmWithHessian
g2o	trunk/g2o/core/optimization_algorithm_with_hessian.h	/^namespace g2o {$/;"	n
solver	trunk/g2o/core/optimization_algorithm_with_hessian.h	/^      Solver* solver() { return _solver;}$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
writeDebug	trunk/g2o/core/optimization_algorithm_with_hessian.h	/^      virtual bool writeDebug() const { return _writeDebug->value();}$/;"	f	class:g2o::OptimizationAlgorithmWithHessian
Parameter	trunk/g2o/core/parameter.cpp	/^  Parameter::Parameter() : _id(-1)$/;"	f	class:g2o::Parameter
g2o	trunk/g2o/core/parameter.cpp	/^namespace g2o {$/;"	n	file:
setId	trunk/g2o/core/parameter.cpp	/^  void Parameter::setId(int id_)$/;"	f	class:g2o::Parameter
G2O_GRAPH_PARAMETER_HH_	trunk/g2o/core/parameter.h	28;"	d
Parameter	trunk/g2o/core/parameter.h	/^    class G2O_CORE_API Parameter : public HyperGraph::HyperGraphElement$/;"	c	namespace:g2o
ParameterVector	trunk/g2o/core/parameter.h	/^    typedef std::vector<Parameter*> ParameterVector;$/;"	t	namespace:g2o
_id	trunk/g2o/core/parameter.h	/^        int _id;$/;"	m	class:g2o::Parameter
elementType	trunk/g2o/core/parameter.h	/^        virtual HyperGraph::HyperGraphElementType elementType() const { return HyperGraph::HGET_PARAMETER;}$/;"	f	class:g2o::Parameter
g2o	trunk/g2o/core/parameter.h	/^namespace g2o {$/;"	n
id	trunk/g2o/core/parameter.h	/^        int id() const {return _id;}$/;"	f	class:g2o::Parameter
~Parameter	trunk/g2o/core/parameter.h	/^        virtual ~Parameter() {};$/;"	f	class:g2o::Parameter
ParameterContainer	trunk/g2o/core/parameter_container.cpp	/^  ParameterContainer::ParameterContainer(bool isMainStorage_) :$/;"	f	class:g2o::ParameterContainer
addParameter	trunk/g2o/core/parameter_container.cpp	/^  bool ParameterContainer::addParameter(Parameter* p){$/;"	f	class:g2o::ParameterContainer
clear	trunk/g2o/core/parameter_container.cpp	/^  void ParameterContainer::clear() {$/;"	f	class:g2o::ParameterContainer
detachParameter	trunk/g2o/core/parameter_container.cpp	/^  Parameter* ParameterContainer::detachParameter(int id){$/;"	f	class:g2o::ParameterContainer
g2o	trunk/g2o/core/parameter_container.cpp	/^namespace g2o {$/;"	n	file:
getParameter	trunk/g2o/core/parameter_container.cpp	/^  Parameter* ParameterContainer::getParameter(int id) {$/;"	f	class:g2o::ParameterContainer
read	trunk/g2o/core/parameter_container.cpp	/^  bool ParameterContainer::read(std::istream& is, const std::map<std::string, std::string>* _renamedTypesLookup){$/;"	f	class:g2o::ParameterContainer
write	trunk/g2o/core/parameter_container.cpp	/^  bool ParameterContainer::write(std::ostream& os) const{$/;"	f	class:g2o::ParameterContainer
~ParameterContainer	trunk/g2o/core/parameter_container.cpp	/^  ParameterContainer::~ParameterContainer(){$/;"	f	class:g2o::ParameterContainer
BaseClass	trunk/g2o/core/parameter_container.h	/^      typedef std::map<int, Parameter*> BaseClass;$/;"	t	class:g2o::ParameterContainer
G2O_GRAPH_PARAMETER_CONTAINER_HH_	trunk/g2o/core/parameter_container.h	28;"	d
ParameterContainer	trunk/g2o/core/parameter_container.h	/^    class ParameterContainer : protected std::map<int, Parameter*> $/;"	c	namespace:g2o
_isMainStorage	trunk/g2o/core/parameter_container.h	/^      bool _isMainStorage;$/;"	m	class:g2o::ParameterContainer
g2o	trunk/g2o/core/parameter_container.h	/^namespace g2o {$/;"	n
isMainStorage	trunk/g2o/core/parameter_container.h	/^      bool isMainStorage() const {return _isMainStorage;}$/;"	f	class:g2o::ParameterContainer
RobustKernel	trunk/g2o/core/robust_kernel.cpp	/^RobustKernel::RobustKernel() :$/;"	f	class:g2o::RobustKernel
RobustKernel	trunk/g2o/core/robust_kernel.cpp	/^RobustKernel::RobustKernel(double delta) :$/;"	f	class:g2o::RobustKernel
g2o	trunk/g2o/core/robust_kernel.cpp	/^namespace g2o {$/;"	n	file:
setDelta	trunk/g2o/core/robust_kernel.cpp	/^void RobustKernel::setDelta(double delta)$/;"	f	class:g2o::RobustKernel
G2O_ROBUST_KERNEL_H	trunk/g2o/core/robust_kernel.h	28;"	d
RobustKernel	trunk/g2o/core/robust_kernel.h	/^  class G2O_CORE_API RobustKernel$/;"	c	namespace:g2o
RobustKernelPtr	trunk/g2o/core/robust_kernel.h	/^  typedef std::tr1::shared_ptr<RobustKernel> RobustKernelPtr;$/;"	t	namespace:g2o
_delta	trunk/g2o/core/robust_kernel.h	/^      double _delta;$/;"	m	class:g2o::RobustKernel
delta	trunk/g2o/core/robust_kernel.h	/^      double delta() const { return _delta;}$/;"	f	class:g2o::RobustKernel
g2o	trunk/g2o/core/robust_kernel.h	/^namespace g2o {$/;"	n
~RobustKernel	trunk/g2o/core/robust_kernel.h	/^      virtual ~RobustKernel() {}$/;"	f	class:g2o::RobustKernel
RobustKernelFactory	trunk/g2o/core/robust_kernel_factory.cpp	/^RobustKernelFactory::RobustKernelFactory()$/;"	f	class:g2o::RobustKernelFactory
construct	trunk/g2o/core/robust_kernel_factory.cpp	/^RobustKernel* RobustKernelFactory::construct(const std::string& tag) const$/;"	f	class:g2o::RobustKernelFactory
creator	trunk/g2o/core/robust_kernel_factory.cpp	/^AbstractRobustKernelCreator* RobustKernelFactory::creator(const std::string& tag) const$/;"	f	class:g2o::RobustKernelFactory
destroy	trunk/g2o/core/robust_kernel_factory.cpp	/^void RobustKernelFactory::destroy()$/;"	f	class:g2o::RobustKernelFactory
factoryInstance	trunk/g2o/core/robust_kernel_factory.cpp	/^RobustKernelFactory* RobustKernelFactory::factoryInstance = 0;$/;"	m	class:g2o::RobustKernelFactory	file:
fillKnownKernels	trunk/g2o/core/robust_kernel_factory.cpp	/^void RobustKernelFactory::fillKnownKernels(std::vector<std::string>& types) const$/;"	f	class:g2o::RobustKernelFactory
g2o	trunk/g2o/core/robust_kernel_factory.cpp	/^namespace g2o {$/;"	n	file:
instance	trunk/g2o/core/robust_kernel_factory.cpp	/^RobustKernelFactory* RobustKernelFactory::instance()$/;"	f	class:g2o::RobustKernelFactory
registerRobustKernel	trunk/g2o/core/robust_kernel_factory.cpp	/^void RobustKernelFactory::registerRobustKernel(const std::string& tag, AbstractRobustKernelCreator* c)$/;"	f	class:g2o::RobustKernelFactory
unregisterType	trunk/g2o/core/robust_kernel_factory.cpp	/^void RobustKernelFactory::unregisterType(const std::string& tag)$/;"	f	class:g2o::RobustKernelFactory
~RobustKernelFactory	trunk/g2o/core/robust_kernel_factory.cpp	/^RobustKernelFactory::~RobustKernelFactory()$/;"	f	class:g2o::RobustKernelFactory
AbstractRobustKernelCreator	trunk/g2o/core/robust_kernel_factory.h	/^  class G2O_CORE_API AbstractRobustKernelCreator$/;"	c	namespace:g2o
CreatorMap	trunk/g2o/core/robust_kernel_factory.h	/^      typedef std::map<std::string, AbstractRobustKernelCreator*>              CreatorMap;$/;"	t	class:g2o::RobustKernelFactory
G2O_REGISTER_ROBUST_KERNEL	trunk/g2o/core/robust_kernel_factory.h	142;"	d
G2O_ROBUST_KERNEL_FACTORY_EXPORT	trunk/g2o/core/robust_kernel_factory.h	134;"	d
G2O_ROBUST_KERNEL_FACTORY_EXPORT	trunk/g2o/core/robust_kernel_factory.h	137;"	d
G2O_ROBUST_KERNEL_FACTORY_H	trunk/g2o/core/robust_kernel_factory.h	28;"	d
G2O_ROBUST_KERNEL_FACTORY_IMPORT	trunk/g2o/core/robust_kernel_factory.h	135;"	d
G2O_ROBUST_KERNEL_FACTORY_IMPORT	trunk/g2o/core/robust_kernel_factory.h	138;"	d
G2O_USE_ROBUST_KERNEL	trunk/g2o/core/robust_kernel_factory.h	146;"	d
RegisterRobustKernelProxy	trunk/g2o/core/robust_kernel_factory.h	/^      RegisterRobustKernelProxy(const std::string& name) : _name(name)$/;"	f	class:g2o::RegisterRobustKernelProxy
RegisterRobustKernelProxy	trunk/g2o/core/robust_kernel_factory.h	/^  class RegisterRobustKernelProxy$/;"	c	namespace:g2o
RobustKernelCreator	trunk/g2o/core/robust_kernel_factory.h	/^  class RobustKernelCreator : public AbstractRobustKernelCreator$/;"	c	namespace:g2o
RobustKernelFactory	trunk/g2o/core/robust_kernel_factory.h	/^  class G2O_CORE_API RobustKernelFactory$/;"	c	namespace:g2o
_creator	trunk/g2o/core/robust_kernel_factory.h	/^      CreatorMap _creator;     \/\/\/< look-up map for the existing creators$/;"	m	class:g2o::RobustKernelFactory
_name	trunk/g2o/core/robust_kernel_factory.h	/^      std::string _name;$/;"	m	class:g2o::RegisterRobustKernelProxy
construct	trunk/g2o/core/robust_kernel_factory.h	/^      RobustKernel* construct() { return new T;}$/;"	f	class:g2o::RobustKernelCreator
factoryInstance	trunk/g2o/core/robust_kernel_factory.h	/^      static RobustKernelFactory* factoryInstance;$/;"	m	class:g2o::RobustKernelFactory
g2o	trunk/g2o/core/robust_kernel_factory.h	/^namespace g2o {$/;"	n
~AbstractRobustKernelCreator	trunk/g2o/core/robust_kernel_factory.h	/^      virtual ~AbstractRobustKernelCreator() { }$/;"	f	class:g2o::AbstractRobustKernelCreator
~RegisterRobustKernelProxy	trunk/g2o/core/robust_kernel_factory.h	/^      ~RegisterRobustKernelProxy()$/;"	f	class:g2o::RegisterRobustKernelProxy
RobustKernelScaleDelta	trunk/g2o/core/robust_kernel_impl.cpp	/^RobustKernelScaleDelta::RobustKernelScaleDelta(const RobustKernelPtr& kernel, double delta) :$/;"	f	class:g2o::RobustKernelScaleDelta
RobustKernelScaleDelta	trunk/g2o/core/robust_kernel_impl.cpp	/^RobustKernelScaleDelta::RobustKernelScaleDelta(double delta) :$/;"	f	class:g2o::RobustKernelScaleDelta
g2o	trunk/g2o/core/robust_kernel_impl.cpp	/^namespace g2o {$/;"	n	file:
robustify	trunk/g2o/core/robust_kernel_impl.cpp	/^void RobustKernelCauchy::robustify(double e2, Eigen::Vector3d& rho) const$/;"	f	class:g2o::RobustKernelCauchy
robustify	trunk/g2o/core/robust_kernel_impl.cpp	/^void RobustKernelDCS::robustify(double e2, Eigen::Vector3d& rho) const$/;"	f	class:g2o::RobustKernelDCS
robustify	trunk/g2o/core/robust_kernel_impl.cpp	/^void RobustKernelHuber::robustify(double e, Eigen::Vector3d& rho) const$/;"	f	class:g2o::RobustKernelHuber
robustify	trunk/g2o/core/robust_kernel_impl.cpp	/^void RobustKernelPseudoHuber::robustify(double e2, Eigen::Vector3d& rho) const$/;"	f	class:g2o::RobustKernelPseudoHuber
robustify	trunk/g2o/core/robust_kernel_impl.cpp	/^void RobustKernelSaturated::robustify(double e2, Eigen::Vector3d& rho) const$/;"	f	class:g2o::RobustKernelSaturated
robustify	trunk/g2o/core/robust_kernel_impl.cpp	/^void RobustKernelScaleDelta::robustify(double error, Eigen::Vector3d& rho) const$/;"	f	class:g2o::RobustKernelScaleDelta
setKernel	trunk/g2o/core/robust_kernel_impl.cpp	/^void RobustKernelScaleDelta::setKernel(const RobustKernelPtr& ptr)$/;"	f	class:g2o::RobustKernelScaleDelta
G2O_ROBUST_KERNEL_IMPL_H	trunk/g2o/core/robust_kernel_impl.h	28;"	d
RobustKernelCauchy	trunk/g2o/core/robust_kernel_impl.h	/^  class G2O_CORE_API RobustKernelCauchy : public RobustKernel$/;"	c	namespace:g2o
RobustKernelDCS	trunk/g2o/core/robust_kernel_impl.h	/^  class G2O_CORE_API RobustKernelDCS : public RobustKernel$/;"	c	namespace:g2o
RobustKernelHuber	trunk/g2o/core/robust_kernel_impl.h	/^  class G2O_CORE_API RobustKernelHuber : public RobustKernel$/;"	c	namespace:g2o
RobustKernelPseudoHuber	trunk/g2o/core/robust_kernel_impl.h	/^  class G2O_CORE_API RobustKernelPseudoHuber : public RobustKernel$/;"	c	namespace:g2o
RobustKernelSaturated	trunk/g2o/core/robust_kernel_impl.h	/^  class G2O_CORE_API RobustKernelSaturated : public RobustKernel$/;"	c	namespace:g2o
RobustKernelScaleDelta	trunk/g2o/core/robust_kernel_impl.h	/^  class G2O_CORE_API RobustKernelScaleDelta : public RobustKernel$/;"	c	namespace:g2o
_kernel	trunk/g2o/core/robust_kernel_impl.h	/^      RobustKernelPtr _kernel;$/;"	m	class:g2o::RobustKernelScaleDelta
g2o	trunk/g2o/core/robust_kernel_impl.h	/^namespace g2o {$/;"	n
kernel	trunk/g2o/core/robust_kernel_impl.h	/^      const RobustKernelPtr kernel() const { return _kernel;}$/;"	f	class:g2o::RobustKernelScaleDelta
Solver	trunk/g2o/core/solver.cpp	/^Solver::Solver() :$/;"	f	class:g2o::Solver
g2o	trunk/g2o/core/solver.cpp	/^namespace g2o {$/;"	n	file:
resizeVector	trunk/g2o/core/solver.cpp	/^void Solver::resizeVector(size_t sx)$/;"	f	class:g2o::Solver
setAdditionalVectorSpace	trunk/g2o/core/solver.cpp	/^void Solver::setAdditionalVectorSpace(size_t s)$/;"	f	class:g2o::Solver
setLevenberg	trunk/g2o/core/solver.cpp	/^void Solver::setLevenberg(bool levenberg)$/;"	f	class:g2o::Solver
setOptimizer	trunk/g2o/core/solver.cpp	/^void Solver::setOptimizer(SparseOptimizer* optimizer)$/;"	f	class:g2o::Solver
~Solver	trunk/g2o/core/solver.cpp	/^Solver::~Solver()$/;"	f	class:g2o::Solver
G2O_SOLVER_H	trunk/g2o/core/solver.h	28;"	d
Solver	trunk/g2o/core/solver.h	/^      Solver(const Solver&) { }$/;"	f	class:g2o::Solver
Solver	trunk/g2o/core/solver.h	/^  class G2O_CORE_API Solver$/;"	c	namespace:g2o
_additionalVectorSpace	trunk/g2o/core/solver.h	/^      size_t _additionalVectorSpace;$/;"	m	class:g2o::Solver
_b	trunk/g2o/core/solver.h	/^      double* _b;$/;"	m	class:g2o::Solver
_isLevenberg	trunk/g2o/core/solver.h	/^      bool _isLevenberg; \/\/\/< the system we gonna solve is a Levenberg-Marquardt system$/;"	m	class:g2o::Solver
_maxXSize	trunk/g2o/core/solver.h	/^      size_t _xSize, _maxXSize;$/;"	m	class:g2o::Solver
_optimizer	trunk/g2o/core/solver.h	/^      SparseOptimizer* _optimizer;$/;"	m	class:g2o::Solver
_x	trunk/g2o/core/solver.h	/^      double* _x;$/;"	m	class:g2o::Solver
_xSize	trunk/g2o/core/solver.h	/^      size_t _xSize, _maxXSize;$/;"	m	class:g2o::Solver
additionalVectorSpace	trunk/g2o/core/solver.h	/^      size_t additionalVectorSpace() const { return _additionalVectorSpace;}$/;"	f	class:g2o::Solver
b	trunk/g2o/core/solver.h	/^      const double* b() const { return _b;}$/;"	f	class:g2o::Solver
b	trunk/g2o/core/solver.h	/^      double* b() { return _b;}$/;"	f	class:g2o::Solver
g2o	trunk/g2o/core/solver.h	/^namespace g2o {$/;"	n
levenberg	trunk/g2o/core/solver.h	/^      bool levenberg() const { return _isLevenberg;}$/;"	f	class:g2o::Solver
operator =	trunk/g2o/core/solver.h	/^      Solver& operator= (const Solver&) { return *this; }$/;"	f	class:g2o::Solver
optimizer	trunk/g2o/core/solver.h	/^      SparseOptimizer* optimizer() const { return _optimizer;}$/;"	f	class:g2o::Solver
supportsSchur	trunk/g2o/core/solver.h	/^      virtual bool supportsSchur() {return false;}$/;"	f	class:g2o::Solver
vectorSize	trunk/g2o/core/solver.h	/^      size_t vectorSize() const { return _xSize;}$/;"	f	class:g2o::Solver
x	trunk/g2o/core/solver.h	/^      const double* x() const { return _x;}$/;"	f	class:g2o::Solver
x	trunk/g2o/core/solver.h	/^      double* x() { return _x;}$/;"	f	class:g2o::Solver
G2O_SPARSE_BLOCK_MATRIX_	trunk/g2o/core/sparse_block_matrix.h	28;"	d
IntBlockMap	trunk/g2o/core/sparse_block_matrix.h	/^    typedef std::map<int, SparseMatrixBlock*> IntBlockMap;$/;"	t	class:g2o::SparseBlockMatrix
SparseBlockMatrix	trunk/g2o/core/sparse_block_matrix.h	/^class SparseBlockMatrix {$/;"	c	namespace:g2o
SparseBlockMatrixXd	trunk/g2o/core/sparse_block_matrix.h	/^  typedef SparseBlockMatrix<MatrixXd> SparseBlockMatrixXd;   $/;"	t	namespace:g2o
SparseMatrixBlock	trunk/g2o/core/sparse_block_matrix.h	/^    typedef MatrixType SparseMatrixBlock;$/;"	t	class:g2o::SparseBlockMatrix
_blockCols	trunk/g2o/core/sparse_block_matrix.h	/^    std::vector <IntBlockMap> _blockCols;$/;"	m	class:g2o::SparseBlockMatrix
_colBlockIndices	trunk/g2o/core/sparse_block_matrix.h	/^    std::vector<int> _colBlockIndices; \/\/\/< vector of the indices of the blocks along the cols$/;"	m	class:g2o::SparseBlockMatrix
_hasStorage	trunk/g2o/core/sparse_block_matrix.h	/^    bool _hasStorage;$/;"	m	class:g2o::SparseBlockMatrix
_rowBlockIndices	trunk/g2o/core/sparse_block_matrix.h	/^    std::vector<int> _rowBlockIndices; \/\/\/< vector of the indices of the blocks along the rows.$/;"	m	class:g2o::SparseBlockMatrix
blockCols	trunk/g2o/core/sparse_block_matrix.h	/^    const std::vector<IntBlockMap>& blockCols() const { return _blockCols;}$/;"	f	class:g2o::SparseBlockMatrix
blockCols	trunk/g2o/core/sparse_block_matrix.h	/^    std::vector<IntBlockMap>& blockCols() { return _blockCols;}$/;"	f	class:g2o::SparseBlockMatrix
colBaseOfBlock	trunk/g2o/core/sparse_block_matrix.h	/^    inline int colBaseOfBlock(int c) const { return c ? _colBlockIndices[c-1] : 0 ; }$/;"	f	class:g2o::SparseBlockMatrix
colBlockIndices	trunk/g2o/core/sparse_block_matrix.h	/^    const std::vector<int>& colBlockIndices() const { return _colBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrix
colBlockIndices	trunk/g2o/core/sparse_block_matrix.h	/^    std::vector<int>& colBlockIndices() { return _colBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrix
cols	trunk/g2o/core/sparse_block_matrix.h	/^    inline int cols() const {return _colBlockIndices.size() ? _colBlockIndices.back() : 0;}$/;"	f	class:g2o::SparseBlockMatrix
colsOfBlock	trunk/g2o/core/sparse_block_matrix.h	/^    inline int colsOfBlock(int c) const { return c ? _colBlockIndices[c] - _colBlockIndices[c-1] : _colBlockIndices[0]; }$/;"	f	class:g2o::SparseBlockMatrix
g2o	trunk/g2o/core/sparse_block_matrix.h	/^namespace g2o {$/;"	n
rowBaseOfBlock	trunk/g2o/core/sparse_block_matrix.h	/^    inline int rowBaseOfBlock(int r) const { return r ? _rowBlockIndices[r-1] : 0 ; }$/;"	f	class:g2o::SparseBlockMatrix
rowBlockIndices	trunk/g2o/core/sparse_block_matrix.h	/^    const std::vector<int>& rowBlockIndices() const { return _rowBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrix
rowBlockIndices	trunk/g2o/core/sparse_block_matrix.h	/^    std::vector<int>& rowBlockIndices() { return _rowBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrix
rows	trunk/g2o/core/sparse_block_matrix.h	/^    inline int rows() const {return _rowBlockIndices.size() ? _rowBlockIndices.back() : 0;}$/;"	f	class:g2o::SparseBlockMatrix
rowsOfBlock	trunk/g2o/core/sparse_block_matrix.h	/^    inline int rowsOfBlock(int r) const { return r ? _rowBlockIndices[r] - _rowBlockIndices[r-1] : _rowBlockIndices[0] ; }$/;"	f	class:g2o::SparseBlockMatrix
CmpPairFirst	trunk/g2o/core/sparse_block_matrix.hpp	/^    struct CmpPairFirst {$/;"	s	namespace:g2o::<anonymous>
SparseBlockMatrix	trunk/g2o/core/sparse_block_matrix.hpp	/^  SparseBlockMatrix<MatrixType>::SparseBlockMatrix( ):$/;"	f	class:g2o::SparseBlockMatrix
SparseBlockMatrix	trunk/g2o/core/sparse_block_matrix.hpp	/^  SparseBlockMatrix<MatrixType>::SparseBlockMatrix( const int * rbi, const int* cbi, int rb, int cb, bool hasStorage):$/;"	f	class:g2o::SparseBlockMatrix
TripletColSort	trunk/g2o/core/sparse_block_matrix.hpp	/^    struct TripletColSort$/;"	s	namespace:g2o::<anonymous>
TripletEntry	trunk/g2o/core/sparse_block_matrix.hpp	/^      TripletEntry(int r_, int c_, double x_) : r(r_), c(c_), x(x_) {}$/;"	f	struct:g2o::<anonymous>::TripletEntry
TripletEntry	trunk/g2o/core/sparse_block_matrix.hpp	/^    struct TripletEntry$/;"	s	namespace:g2o::<anonymous>
add	trunk/g2o/core/sparse_block_matrix.hpp	/^  bool SparseBlockMatrix<MatrixType>::add(SparseBlockMatrix*& dest) const {$/;"	f	class:g2o::SparseBlockMatrix
block	trunk/g2o/core/sparse_block_matrix.hpp	/^  const typename SparseBlockMatrix<MatrixType>::SparseMatrixBlock* SparseBlockMatrix<MatrixType>::block(int r, int c) const {$/;"	f	class:g2o::SparseBlockMatrix
block	trunk/g2o/core/sparse_block_matrix.hpp	/^  typename SparseBlockMatrix<MatrixType>::SparseMatrixBlock* SparseBlockMatrix<MatrixType>::block(int r, int c, bool alloc) {$/;"	f	class:g2o::SparseBlockMatrix
c	trunk/g2o/core/sparse_block_matrix.hpp	/^      int r, c;$/;"	m	struct:g2o::<anonymous>::TripletEntry
clear	trunk/g2o/core/sparse_block_matrix.hpp	/^  void SparseBlockMatrix<MatrixType>::clear(bool dealloc) {$/;"	f	class:g2o::SparseBlockMatrix
clone	trunk/g2o/core/sparse_block_matrix.hpp	/^  SparseBlockMatrix<MatrixType>* SparseBlockMatrix<MatrixType>::clone() const {$/;"	f	class:g2o::SparseBlockMatrix
fillBlockStructure	trunk/g2o/core/sparse_block_matrix.hpp	/^  void SparseBlockMatrix<MatrixType>::fillBlockStructure(MatrixStructure& ms) const$/;"	f	class:g2o::SparseBlockMatrix
fillCCS	trunk/g2o/core/sparse_block_matrix.hpp	/^  int SparseBlockMatrix<MatrixType>::fillCCS(double* Cx, bool upperTriangle) const$/;"	f	class:g2o::SparseBlockMatrix
fillCCS	trunk/g2o/core/sparse_block_matrix.hpp	/^  int SparseBlockMatrix<MatrixType>::fillCCS(int* Cp, int* Ci, double* Cx, bool upperTriangle) const$/;"	f	class:g2o::SparseBlockMatrix
fillSparseBlockMatrixCCS	trunk/g2o/core/sparse_block_matrix.hpp	/^  int SparseBlockMatrix<MatrixType>::fillSparseBlockMatrixCCS(SparseBlockMatrixCCS<MatrixType>& blockCCS) const$/;"	f	class:g2o::SparseBlockMatrix
fillSparseBlockMatrixCCSTransposed	trunk/g2o/core/sparse_block_matrix.hpp	/^  int SparseBlockMatrix<MatrixType>::fillSparseBlockMatrixCCSTransposed(SparseBlockMatrixCCS<MatrixType>& blockCCS) const$/;"	f	class:g2o::SparseBlockMatrix
g2o	trunk/g2o/core/sparse_block_matrix.hpp	/^namespace g2o {$/;"	n
multiply	trunk/g2o/core/sparse_block_matrix.hpp	/^  bool SparseBlockMatrix<MatrixType>::multiply(SparseBlockMatrix<MatrixResultType>*& dest, const SparseBlockMatrix<MatrixFactorType> * M) const {$/;"	f	class:g2o::SparseBlockMatrix
multiply	trunk/g2o/core/sparse_block_matrix.hpp	/^  void SparseBlockMatrix<MatrixType>::multiply(double*& dest, const double* src) const {$/;"	f	class:g2o::SparseBlockMatrix
multiplySymmetricUpperTriangle	trunk/g2o/core/sparse_block_matrix.hpp	/^  void SparseBlockMatrix<MatrixType>::multiplySymmetricUpperTriangle(double*& dest, const double* src) const$/;"	f	class:g2o::SparseBlockMatrix
nonZeroBlocks	trunk/g2o/core/sparse_block_matrix.hpp	/^  size_t SparseBlockMatrix<MatrixType>::nonZeroBlocks() const {$/;"	f	class:g2o::SparseBlockMatrix
nonZeros	trunk/g2o/core/sparse_block_matrix.hpp	/^  size_t SparseBlockMatrix<MatrixType>::nonZeros() const{$/;"	f	class:g2o::SparseBlockMatrix
operator ()	trunk/g2o/core/sparse_block_matrix.hpp	/^      bool operator()(const TripletEntry& e1, const TripletEntry& e2) const$/;"	f	struct:g2o::<anonymous>::TripletColSort
operator ()	trunk/g2o/core/sparse_block_matrix.hpp	/^      bool operator()(const std::pair<T1,T2>& left, const std::pair<T1,T2>& right) {$/;"	f	struct:g2o::<anonymous>::CmpPairFirst
operator <<	trunk/g2o/core/sparse_block_matrix.hpp	/^  std::ostream& operator << (std::ostream& os, const SparseBlockMatrix<MatrixType>& m){$/;"	f	namespace:g2o
r	trunk/g2o/core/sparse_block_matrix.hpp	/^      int r, c;$/;"	m	struct:g2o::<anonymous>::TripletEntry
rightMultiply	trunk/g2o/core/sparse_block_matrix.hpp	/^  void SparseBlockMatrix<MatrixType>::rightMultiply(double*& dest, const double* src) const {$/;"	f	class:g2o::SparseBlockMatrix
scale	trunk/g2o/core/sparse_block_matrix.hpp	/^  void SparseBlockMatrix<MatrixType>::scale(double a_) {$/;"	f	class:g2o::SparseBlockMatrix
slice	trunk/g2o/core/sparse_block_matrix.hpp	/^  SparseBlockMatrix<MatrixType>*  SparseBlockMatrix<MatrixType>::slice(int rmin, int rmax, int cmin, int cmax, bool alloc) const {$/;"	f	class:g2o::SparseBlockMatrix
symmPermutation	trunk/g2o/core/sparse_block_matrix.hpp	/^  bool SparseBlockMatrix<MatrixType>::symmPermutation(SparseBlockMatrix<MatrixType>*& dest, const int* pinv, bool  upperTriangle) const{$/;"	f	class:g2o::SparseBlockMatrix
takePatternFromHash	trunk/g2o/core/sparse_block_matrix.hpp	/^  void SparseBlockMatrix<MatrixType>::takePatternFromHash(SparseBlockMatrixHashMap<MatrixType>& hashMatrix)$/;"	f	class:g2o::SparseBlockMatrix
transpose	trunk/g2o/core/sparse_block_matrix.hpp	/^  bool SparseBlockMatrix<MatrixType>::transpose(SparseBlockMatrix<MatrixTransposedType>*& dest) const {$/;"	f	class:g2o::SparseBlockMatrix
writeOctave	trunk/g2o/core/sparse_block_matrix.hpp	/^  bool SparseBlockMatrix<MatrixType>::writeOctave(const char* filename, bool upperTriangle) const$/;"	f	class:g2o::SparseBlockMatrix
x	trunk/g2o/core/sparse_block_matrix.hpp	/^      double x;$/;"	m	struct:g2o::<anonymous>::TripletEntry
~SparseBlockMatrix	trunk/g2o/core/sparse_block_matrix.hpp	/^  SparseBlockMatrix<MatrixType>::~SparseBlockMatrix(){$/;"	f	class:g2o::SparseBlockMatrix
G2O_SPARSE_BLOCK_MATRIX_CCS_H	trunk/g2o/core/sparse_block_matrix_ccs.h	28;"	d
RowBlock	trunk/g2o/core/sparse_block_matrix_ccs.h	/^        RowBlock() : row(-1), block(0) {}$/;"	f	struct:g2o::SparseBlockMatrixCCS::RowBlock
RowBlock	trunk/g2o/core/sparse_block_matrix_ccs.h	/^        RowBlock(int r, MatrixType* b) : row(r), block(b) {}$/;"	f	struct:g2o::SparseBlockMatrixCCS::RowBlock
RowBlock	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      struct RowBlock$/;"	s	class:g2o::SparseBlockMatrixCCS
SparseBlockMatrixCCS	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      SparseBlockMatrixCCS(const std::vector<int>& rowIndices, const std::vector<int>& colIndices) :$/;"	f	class:g2o::SparseBlockMatrixCCS
SparseBlockMatrixCCS	trunk/g2o/core/sparse_block_matrix_ccs.h	/^  class SparseBlockMatrixCCS$/;"	c	namespace:g2o
SparseBlockMatrixHashMap	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      SparseBlockMatrixHashMap(const std::vector<int>& rowIndices, const std::vector<int>& colIndices) :$/;"	f	class:g2o::SparseBlockMatrixHashMap
SparseBlockMatrixHashMap	trunk/g2o/core/sparse_block_matrix_ccs.h	/^  class SparseBlockMatrixHashMap$/;"	c	namespace:g2o
SparseColumn	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      typedef std::tr1::unordered_map<int, MatrixType*> SparseColumn;$/;"	t	class:g2o::SparseBlockMatrixHashMap
SparseColumn	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      typedef std::vector<RowBlock>      SparseColumn;$/;"	t	class:g2o::SparseBlockMatrixCCS
SparseMatrixBlock	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      typedef MatrixType SparseMatrixBlock;$/;"	t	class:g2o::SparseBlockMatrixCCS
SparseMatrixBlock	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      typedef MatrixType SparseMatrixBlock;$/;"	t	class:g2o::SparseBlockMatrixHashMap
_blockCols	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      std::vector<SparseColumn> _blockCols;     \/\/\/< the matrices stored in CCS order$/;"	m	class:g2o::SparseBlockMatrixCCS
_blockCols	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      std::vector<SparseColumn> _blockCols;     \/\/\/< the matrices stored in CCS order$/;"	m	class:g2o::SparseBlockMatrixHashMap
_colBlockIndices	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<int>& _colBlockIndices; \/\/\/< vector of the indices of the blocks along the cols$/;"	m	class:g2o::SparseBlockMatrixCCS
_colBlockIndices	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<int>& _colBlockIndices; \/\/\/< vector of the indices of the blocks along the cols$/;"	m	class:g2o::SparseBlockMatrixHashMap
_rowBlockIndices	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<int>& _rowBlockIndices; \/\/\/< vector of the indices of the blocks along the rows.$/;"	m	class:g2o::SparseBlockMatrixCCS
_rowBlockIndices	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<int>& _rowBlockIndices; \/\/\/< vector of the indices of the blocks along the rows.$/;"	m	class:g2o::SparseBlockMatrixHashMap
addBlock	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      MatrixType* addBlock(int r, int c, bool zeroBlock = false)$/;"	f	class:g2o::SparseBlockMatrixHashMap
block	trunk/g2o/core/sparse_block_matrix_ccs.h	/^        MatrixType* block;    \/\/\/< matrix pointer for the block$/;"	m	struct:g2o::SparseBlockMatrixCCS::RowBlock
blockCols	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<SparseColumn>& blockCols() const { return _blockCols;}$/;"	f	class:g2o::SparseBlockMatrixCCS
blockCols	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<SparseColumn>& blockCols() const { return _blockCols;}$/;"	f	class:g2o::SparseBlockMatrixHashMap
blockCols	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      std::vector<SparseColumn>& blockCols() { return _blockCols;}$/;"	f	class:g2o::SparseBlockMatrixCCS
blockCols	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      std::vector<SparseColumn>& blockCols() { return _blockCols;}$/;"	f	class:g2o::SparseBlockMatrixHashMap
colBaseOfBlock	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      int colBaseOfBlock(int c) const { return c ? _colBlockIndices[c-1] : 0 ; }$/;"	f	class:g2o::SparseBlockMatrixCCS
colBaseOfBlock	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      int colBaseOfBlock(int c) const { return c ? _colBlockIndices[c-1] : 0 ; }$/;"	f	class:g2o::SparseBlockMatrixHashMap
colBlockIndices	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<int>& colBlockIndices() const { return _colBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrixCCS
colBlockIndices	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<int>& colBlockIndices() const { return _colBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrixHashMap
cols	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      int cols() const {return _colBlockIndices.size() ? _colBlockIndices.back() : 0;}$/;"	f	class:g2o::SparseBlockMatrixCCS
cols	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      int cols() const {return _colBlockIndices.size() ? _colBlockIndices.back() : 0;}$/;"	f	class:g2o::SparseBlockMatrixHashMap
colsOfBlock	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      int colsOfBlock(int c) const { return c ? _colBlockIndices[c] - _colBlockIndices[c-1] : _colBlockIndices[0]; }$/;"	f	class:g2o::SparseBlockMatrixCCS
colsOfBlock	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      int colsOfBlock(int c) const { return c ? _colBlockIndices[c] - _colBlockIndices[c-1] : _colBlockIndices[0]; }$/;"	f	class:g2o::SparseBlockMatrixHashMap
fillCCS	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      int fillCCS(double* Cx, bool upperTriangle = false) const$/;"	f	class:g2o::SparseBlockMatrixCCS
fillCCS	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      int fillCCS(int* Cp, int* Ci, double* Cx, bool upperTriangle = false) const$/;"	f	class:g2o::SparseBlockMatrixCCS
g2o	trunk/g2o/core/sparse_block_matrix_ccs.h	/^namespace g2o {$/;"	n
operator <	trunk/g2o/core/sparse_block_matrix_ccs.h	/^        bool operator<(const RowBlock& other) const { return row < other.row;}$/;"	f	struct:g2o::SparseBlockMatrixCCS::RowBlock
rightMultiply	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      void rightMultiply(double*& dest, const double* src) const$/;"	f	class:g2o::SparseBlockMatrixCCS
row	trunk/g2o/core/sparse_block_matrix_ccs.h	/^        int row;              \/\/\/< row of the block$/;"	m	struct:g2o::SparseBlockMatrixCCS::RowBlock
rowBaseOfBlock	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      int rowBaseOfBlock(int r) const { return r ? _rowBlockIndices[r-1] : 0 ; }$/;"	f	class:g2o::SparseBlockMatrixCCS
rowBaseOfBlock	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      int rowBaseOfBlock(int r) const { return r ? _rowBlockIndices[r-1] : 0 ; }$/;"	f	class:g2o::SparseBlockMatrixHashMap
rowBlockIndices	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<int>& rowBlockIndices() const { return _rowBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrixCCS
rowBlockIndices	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      const std::vector<int>& rowBlockIndices() const { return _rowBlockIndices;}$/;"	f	class:g2o::SparseBlockMatrixHashMap
rows	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      int rows() const {return _rowBlockIndices.size() ? _rowBlockIndices.back() : 0;}$/;"	f	class:g2o::SparseBlockMatrixCCS
rows	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      int rows() const {return _rowBlockIndices.size() ? _rowBlockIndices.back() : 0;}$/;"	f	class:g2o::SparseBlockMatrixHashMap
rowsOfBlock	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      int rowsOfBlock(int r) const { return r ? _rowBlockIndices[r] - _rowBlockIndices[r-1] : _rowBlockIndices[0] ; }$/;"	f	class:g2o::SparseBlockMatrixCCS
rowsOfBlock	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      int rowsOfBlock(int r) const { return r ? _rowBlockIndices[r] - _rowBlockIndices[r-1] : _rowBlockIndices[0] ; }$/;"	f	class:g2o::SparseBlockMatrixHashMap
sortColumns	trunk/g2o/core/sparse_block_matrix_ccs.h	/^      void sortColumns()$/;"	f	class:g2o::SparseBlockMatrixCCS
DiagonalVector	trunk/g2o/core/sparse_block_matrix_diagonal.h	/^      typedef std::vector<MatrixType, Eigen::aligned_allocator<MatrixType> >      DiagonalVector;$/;"	t	class:g2o::SparseBlockMatrixDiagonal
G2O_SPARSE_BLOCK_MATRIX_DIAGONAL_H	trunk/g2o/core/sparse_block_matrix_diagonal.h	28;"	d
SparseBlockMatrixDiagonal	trunk/g2o/core/sparse_block_matrix_diagonal.h	/^      SparseBlockMatrixDiagonal(const std::vector<int>& blockIndices) :$/;"	f	class:g2o::SparseBlockMatrixDiagonal
SparseBlockMatrixDiagonal	trunk/g2o/core/sparse_block_matrix_diagonal.h	/^  class SparseBlockMatrixDiagonal$/;"	c	namespace:g2o
SparseMatrixBlock	trunk/g2o/core/sparse_block_matrix_diagonal.h	/^      typedef MatrixType SparseMatrixBlock;$/;"	t	class:g2o::SparseBlockMatrixDiagonal
_blockIndices	trunk/g2o/core/sparse_block_matrix_diagonal.h	/^      const std::vector<int>& _blockIndices; \/\/\/< vector of the indices of the blocks along the diagonal$/;"	m	class:g2o::SparseBlockMatrixDiagonal
_diagonal	trunk/g2o/core/sparse_block_matrix_diagonal.h	/^      DiagonalVector _diagonal;$/;"	m	class:g2o::SparseBlockMatrixDiagonal
baseOfBlock	trunk/g2o/core/sparse_block_matrix_diagonal.h	/^      inline int baseOfBlock(int r) const { return r ? _blockIndices[r-1] : 0 ; }$/;"	f	class:g2o::SparseBlockMatrixDiagonal
blockIndices	trunk/g2o/core/sparse_block_matrix_diagonal.h	/^      const std::vector<int>& blockIndices() const { return _blockIndices;}$/;"	f	class:g2o::SparseBlockMatrixDiagonal
cols	trunk/g2o/core/sparse_block_matrix_diagonal.h	/^      int cols() const {return _blockIndices.size() ? _blockIndices.back() : 0;}$/;"	f	class:g2o::SparseBlockMatrixDiagonal
diagonal	trunk/g2o/core/sparse_block_matrix_diagonal.h	/^      DiagonalVector& diagonal() { return _diagonal;}$/;"	f	class:g2o::SparseBlockMatrixDiagonal
diagonal	trunk/g2o/core/sparse_block_matrix_diagonal.h	/^      const DiagonalVector& diagonal() const { return _diagonal;}$/;"	f	class:g2o::SparseBlockMatrixDiagonal
dimOfBlock	trunk/g2o/core/sparse_block_matrix_diagonal.h	/^      inline int dimOfBlock(int r) const { return r ? _blockIndices[r] - _blockIndices[r-1] : _blockIndices[0] ; }$/;"	f	class:g2o::SparseBlockMatrixDiagonal
g2o	trunk/g2o/core/sparse_block_matrix_diagonal.h	/^namespace g2o {$/;"	n
multiply	trunk/g2o/core/sparse_block_matrix_diagonal.h	/^      void multiply(double*& dest, const double* src) const$/;"	f	class:g2o::SparseBlockMatrixDiagonal
rows	trunk/g2o/core/sparse_block_matrix_diagonal.h	/^      int rows() const {return _blockIndices.size() ? _blockIndices.back() : 0;}$/;"	f	class:g2o::SparseBlockMatrixDiagonal
SparseBlockMatrixX	trunk/g2o/core/sparse_block_matrix_test.cpp	/^SparseBlockMatrixX;$/;"	t	file:
main	trunk/g2o/core/sparse_block_matrix_test.cpp	/^int main (int argc, char** argv){$/;"	f
operator <<	trunk/g2o/core/sparse_block_matrix_test.cpp	/^std::ostream& operator << (std::ostream& os, const SparseBlockMatrixX::SparseMatrixBlock& m) {$/;"	f
SparseOptimizer	trunk/g2o/core/sparse_optimizer.cpp	/^  SparseOptimizer::SparseOptimizer() :$/;"	f	class:g2o::SparseOptimizer
activeChi2	trunk/g2o/core/sparse_optimizer.cpp	/^  double SparseOptimizer::activeChi2( ) const$/;"	f	class:g2o::SparseOptimizer
activeRobustChi2	trunk/g2o/core/sparse_optimizer.cpp	/^  double SparseOptimizer::activeRobustChi2() const$/;"	f	class:g2o::SparseOptimizer
addComputeErrorAction	trunk/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::addComputeErrorAction(HyperGraphAction* action)$/;"	f	class:g2o::SparseOptimizer
buildIndexMapping	trunk/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::buildIndexMapping(SparseOptimizer::VertexContainer& vlist){$/;"	f	class:g2o::SparseOptimizer
clear	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::clear() {$/;"	f	class:g2o::SparseOptimizer
clearIndexMapping	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::clearIndexMapping(){$/;"	f	class:g2o::SparseOptimizer
computeActiveErrors	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::computeActiveErrors()$/;"	f	class:g2o::SparseOptimizer
computeInitialGuess	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::computeInitialGuess()$/;"	f	class:g2o::SparseOptimizer
computeInitialGuess	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::computeInitialGuess(EstimatePropagatorCost& costFunction)$/;"	f	class:g2o::SparseOptimizer
computeMarginals	trunk/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::computeMarginals(SparseBlockMatrix<MatrixXd>& spinv, const std::vector<std::pair<int, int> >& blockIndices){$/;"	f	class:g2o::SparseOptimizer
discardTop	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::discardTop()$/;"	f	class:g2o::SparseOptimizer
discardTop	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::discardTop(SparseOptimizer::VertexContainer& vlist)$/;"	f	class:g2o::SparseOptimizer
findActiveEdge	trunk/g2o/core/sparse_optimizer.cpp	/^  SparseOptimizer::EdgeContainer::const_iterator SparseOptimizer::findActiveEdge(const OptimizableGraph::Edge* e) const$/;"	f	class:g2o::SparseOptimizer
findActiveVertex	trunk/g2o/core/sparse_optimizer.cpp	/^  SparseOptimizer::VertexContainer::const_iterator SparseOptimizer::findActiveVertex(const OptimizableGraph::Vertex* v) const$/;"	f	class:g2o::SparseOptimizer
findGauge	trunk/g2o/core/sparse_optimizer.cpp	/^  OptimizableGraph::Vertex* SparseOptimizer::findGauge(){$/;"	f	class:g2o::SparseOptimizer
g2o	trunk/g2o/core/sparse_optimizer.cpp	/^namespace g2o{$/;"	n	file:
gaugeFreedom	trunk/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::gaugeFreedom()$/;"	f	class:g2o::SparseOptimizer
initializeOptimization	trunk/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::initializeOptimization(HyperGraph::EdgeSet& eset){$/;"	f	class:g2o::SparseOptimizer
initializeOptimization	trunk/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::initializeOptimization(HyperGraph::VertexSet& vset, int level){$/;"	f	class:g2o::SparseOptimizer
initializeOptimization	trunk/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::initializeOptimization(int level){$/;"	f	class:g2o::SparseOptimizer
optimize	trunk/g2o/core/sparse_optimizer.cpp	/^  int SparseOptimizer::optimize(int iterations, bool online)$/;"	f	class:g2o::SparseOptimizer
pop	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::pop()$/;"	f	class:g2o::SparseOptimizer
pop	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::pop(HyperGraph::VertexSet& vlist)$/;"	f	class:g2o::SparseOptimizer
pop	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::pop(SparseOptimizer::VertexContainer& vlist)$/;"	f	class:g2o::SparseOptimizer
push	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::push()$/;"	f	class:g2o::SparseOptimizer
push	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::push(HyperGraph::VertexSet& vlist)$/;"	f	class:g2o::SparseOptimizer
push	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::push(SparseOptimizer::VertexContainer& vlist)$/;"	f	class:g2o::SparseOptimizer
removeComputeErrorAction	trunk/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::removeComputeErrorAction(HyperGraphAction* action)$/;"	f	class:g2o::SparseOptimizer
removeVertex	trunk/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::removeVertex(HyperGraph::Vertex* v)$/;"	f	class:g2o::SparseOptimizer
setAlgorithm	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::setAlgorithm(OptimizationAlgorithm* algorithm)$/;"	f	class:g2o::SparseOptimizer
setComputeBatchStatistics	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::setComputeBatchStatistics(bool computeBatchStatistics)$/;"	f	class:g2o::SparseOptimizer
setForceStopFlag	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::setForceStopFlag(bool* flag)$/;"	f	class:g2o::SparseOptimizer
setToOrigin	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::setToOrigin(){$/;"	f	class:g2o::SparseOptimizer
setVerbose	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::setVerbose(bool verbose)$/;"	f	class:g2o::SparseOptimizer
sortVectorContainers	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::sortVectorContainers()$/;"	f	class:g2o::SparseOptimizer
update	trunk/g2o/core/sparse_optimizer.cpp	/^  void SparseOptimizer::update(const double* update)$/;"	f	class:g2o::SparseOptimizer
updateInitialization	trunk/g2o/core/sparse_optimizer.cpp	/^  bool SparseOptimizer::updateInitialization(HyperGraph::VertexSet& vset, HyperGraph::EdgeSet& eset)$/;"	f	class:g2o::SparseOptimizer
~SparseOptimizer	trunk/g2o/core/sparse_optimizer.cpp	/^  SparseOptimizer::~SparseOptimizer(){$/;"	f	class:g2o::SparseOptimizer
AT_COMPUTEACTIVERROR	trunk/g2o/core/sparse_optimizer.h	/^      AT_COMPUTEACTIVERROR = OptimizableGraph::AT_NUM_ELEMENTS,$/;"	e	enum:g2o::SparseOptimizer::<anonymous>
AT_NUM_ELEMENTS	trunk/g2o/core/sparse_optimizer.h	/^      AT_NUM_ELEMENTS, \/\/ keep as last element$/;"	e	enum:g2o::SparseOptimizer::<anonymous>
G2O_ATTRIBUTE_DEPRECATED	trunk/g2o/core/sparse_optimizer.h	/^    G2O_ATTRIBUTE_DEPRECATED(void linearizeSystem())$/;"	f	class:g2o::SparseOptimizer
G2O_GRAPH_OPTIMIZER_CHOL_H_	trunk/g2o/core/sparse_optimizer.h	28;"	d
SparseOptimizer	trunk/g2o/core/sparse_optimizer.h	/^  class G2O_CORE_API SparseOptimizer : public OptimizableGraph {$/;"	c	namespace:g2o
_activeEdges	trunk/g2o/core/sparse_optimizer.h	/^    EdgeContainer _activeEdges;        \/\/\/< sorted according to EdgeIDCompare$/;"	m	class:g2o::SparseOptimizer
_activeVertices	trunk/g2o/core/sparse_optimizer.h	/^    VertexContainer _activeVertices;   \/\/\/< sorted according to VertexIDCompare$/;"	m	class:g2o::SparseOptimizer
_algorithm	trunk/g2o/core/sparse_optimizer.h	/^    OptimizationAlgorithm* _algorithm;$/;"	m	class:g2o::SparseOptimizer
_batchStatistics	trunk/g2o/core/sparse_optimizer.h	/^    BatchStatisticsContainer _batchStatistics;   \/\/\/< global statistics of the optimizer, e.g., timing, num-non-zeros$/;"	m	class:g2o::SparseOptimizer
_computeBatchStatistics	trunk/g2o/core/sparse_optimizer.h	/^    bool _computeBatchStatistics;$/;"	m	class:g2o::SparseOptimizer
_forceStopFlag	trunk/g2o/core/sparse_optimizer.h	/^    bool* _forceStopFlag;$/;"	m	class:g2o::SparseOptimizer
_ivMap	trunk/g2o/core/sparse_optimizer.h	/^    VertexContainer _ivMap;$/;"	m	class:g2o::SparseOptimizer
_verbose	trunk/g2o/core/sparse_optimizer.h	/^    bool _verbose;$/;"	m	class:g2o::SparseOptimizer
activeEdges	trunk/g2o/core/sparse_optimizer.h	/^    const EdgeContainer& activeEdges() const { return _activeEdges;}$/;"	f	class:g2o::SparseOptimizer
activeVertices	trunk/g2o/core/sparse_optimizer.h	/^    const VertexContainer& activeVertices() const { return _activeVertices;}$/;"	f	class:g2o::SparseOptimizer
algorithm	trunk/g2o/core/sparse_optimizer.h	/^    const OptimizationAlgorithm* algorithm() const { return _algorithm;}$/;"	f	class:g2o::SparseOptimizer
batchStatistics	trunk/g2o/core/sparse_optimizer.h	/^    BatchStatisticsContainer& batchStatistics() { return _batchStatistics;}$/;"	f	class:g2o::SparseOptimizer
batchStatistics	trunk/g2o/core/sparse_optimizer.h	/^    const BatchStatisticsContainer& batchStatistics() const { return _batchStatistics;}$/;"	f	class:g2o::SparseOptimizer
computeBatchStatistics	trunk/g2o/core/sparse_optimizer.h	/^    bool computeBatchStatistics() const { return _computeBatchStatistics;}$/;"	f	class:g2o::SparseOptimizer
computeMarginals	trunk/g2o/core/sparse_optimizer.h	/^    bool computeMarginals(SparseBlockMatrix<MatrixXd>& spinv, const Vertex* vertex) {$/;"	f	class:g2o::SparseOptimizer
computeMarginals	trunk/g2o/core/sparse_optimizer.h	/^    bool computeMarginals(SparseBlockMatrix<MatrixXd>& spinv, const VertexContainer& vertices) {$/;"	f	class:g2o::SparseOptimizer
forceStopFlag	trunk/g2o/core/sparse_optimizer.h	/^    bool* forceStopFlag() const { return _forceStopFlag;};$/;"	f	class:g2o::SparseOptimizer
g2o	trunk/g2o/core/sparse_optimizer.h	/^namespace g2o {$/;"	n
indexMapping	trunk/g2o/core/sparse_optimizer.h	/^    const VertexContainer& indexMapping() const {return _ivMap;}$/;"	f	class:g2o::SparseOptimizer
solver	trunk/g2o/core/sparse_optimizer.h	/^    OptimizationAlgorithm* solver() { return _algorithm;}$/;"	f	class:g2o::SparseOptimizer
terminate	trunk/g2o/core/sparse_optimizer.h	/^    bool terminate() {return _forceStopFlag ? (*_forceStopFlag) : false; }$/;"	f	class:g2o::SparseOptimizer
verbose	trunk/g2o/core/sparse_optimizer.h	/^    bool verbose()  const {return _verbose;}$/;"	f	class:g2o::SparseOptimizer
SparseOptimizerTerminateAction	trunk/g2o/core/sparse_optimizer_terminate_action.cpp	/^  SparseOptimizerTerminateAction::SparseOptimizerTerminateAction() :$/;"	f	class:g2o::SparseOptimizerTerminateAction
g2o	trunk/g2o/core/sparse_optimizer_terminate_action.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/core/sparse_optimizer_terminate_action.cpp	/^  HyperGraphAction* SparseOptimizerTerminateAction::operator()(const HyperGraph* graph, Parameters* parameters)$/;"	f	class:g2o::SparseOptimizerTerminateAction
setGainThreshold	trunk/g2o/core/sparse_optimizer_terminate_action.cpp	/^  void SparseOptimizerTerminateAction::setGainThreshold(double gainThreshold)$/;"	f	class:g2o::SparseOptimizerTerminateAction
setMaxIterations	trunk/g2o/core/sparse_optimizer_terminate_action.cpp	/^  void SparseOptimizerTerminateAction::setMaxIterations(int maxit)$/;"	f	class:g2o::SparseOptimizerTerminateAction
SPARSE_OPTIMIZER_TERMINATE_ACTION_H	trunk/g2o/core/sparse_optimizer_terminate_action.h	2;"	d
SparseOptimizerTerminateAction	trunk/g2o/core/sparse_optimizer_terminate_action.h	/^  class G2O_CORE_API SparseOptimizerTerminateAction : public HyperGraphAction$/;"	c	namespace:g2o
_auxTerminateFlag	trunk/g2o/core/sparse_optimizer_terminate_action.h	/^      bool _auxTerminateFlag;$/;"	m	class:g2o::SparseOptimizerTerminateAction
_gainThreshold	trunk/g2o/core/sparse_optimizer_terminate_action.h	/^      double _gainThreshold;$/;"	m	class:g2o::SparseOptimizerTerminateAction
_lastChi	trunk/g2o/core/sparse_optimizer_terminate_action.h	/^      double _lastChi;$/;"	m	class:g2o::SparseOptimizerTerminateAction
_maxIterations	trunk/g2o/core/sparse_optimizer_terminate_action.h	/^      int _maxIterations;$/;"	m	class:g2o::SparseOptimizerTerminateAction
g2o	trunk/g2o/core/sparse_optimizer_terminate_action.h	/^namespace g2o {$/;"	n
gainThreshold	trunk/g2o/core/sparse_optimizer_terminate_action.h	/^      double gainThreshold() const { return _gainThreshold;}$/;"	f	class:g2o::SparseOptimizerTerminateAction
maxIterations	trunk/g2o/core/sparse_optimizer_terminate_action.h	/^      int maxIterations() const { return _maxIterations;}$/;"	f	class:g2o::SparseOptimizerTerminateAction
Sample	trunk/g2o/examples/ba/ba_demo.cpp	/^class Sample {$/;"	c	file:
gauss_rand	trunk/g2o/examples/ba/ba_demo.cpp	/^static double gauss_rand(double mean, double sigma){$/;"	f	file:
gaussian	trunk/g2o/examples/ba/ba_demo.cpp	/^double Sample::gaussian(double sigma){$/;"	f	class:Sample
main	trunk/g2o/examples/ba/ba_demo.cpp	/^int main(int argc, const char* argv[]){$/;"	f
uniform	trunk/g2o/examples/ba/ba_demo.cpp	/^double Sample::uniform(){$/;"	f	class:Sample
uniform	trunk/g2o/examples/ba/ba_demo.cpp	/^int Sample::uniform(int from, int to){$/;"	f	class:Sample
uniform_rand	trunk/g2o/examples/ba/ba_demo.cpp	/^static double uniform_rand(double lowerBndr, double upperBndr){$/;"	f	file:
Sample	trunk/g2o/examples/ba_anchored_inverse_depth/ba_anchored_inverse_depth_demo.cpp	/^class Sample{$/;"	c	file:
gauss_rand	trunk/g2o/examples/ba_anchored_inverse_depth/ba_anchored_inverse_depth_demo.cpp	/^static double gauss_rand(double mean, double sigma){$/;"	f	file:
gaussian	trunk/g2o/examples/ba_anchored_inverse_depth/ba_anchored_inverse_depth_demo.cpp	/^double Sample::gaussian(double sigma){$/;"	f	class:Sample
invert_depth	trunk/g2o/examples/ba_anchored_inverse_depth/ba_anchored_inverse_depth_demo.cpp	/^inline Vector3d invert_depth(const Vector3d & x){$/;"	f
main	trunk/g2o/examples/ba_anchored_inverse_depth/ba_anchored_inverse_depth_demo.cpp	/^int main(int argc, const char* argv[]){$/;"	f
project2d	trunk/g2o/examples/ba_anchored_inverse_depth/ba_anchored_inverse_depth_demo.cpp	/^Vector2d project2d(const Vector3d& v){$/;"	f
uniform	trunk/g2o/examples/ba_anchored_inverse_depth/ba_anchored_inverse_depth_demo.cpp	/^double Sample::uniform(){$/;"	f	class:Sample
uniform	trunk/g2o/examples/ba_anchored_inverse_depth/ba_anchored_inverse_depth_demo.cpp	/^int Sample::uniform(int from, int to){$/;"	f	class:Sample
uniform_rand	trunk/g2o/examples/ba_anchored_inverse_depth/ba_anchored_inverse_depth_demo.cpp	/^static double uniform_rand(double lowerBndr, double upperBndr){$/;"	f	file:
unproject2d	trunk/g2o/examples/ba_anchored_inverse_depth/ba_anchored_inverse_depth_demo.cpp	/^Vector3d unproject2d(const Vector2d& v){$/;"	f
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/bal/bal_example.cpp	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:EdgeObservationBAL	file:
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/bal/bal_example.cpp	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:VertexCameraBAL	file:
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/bal/bal_example.cpp	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:VertexPointBAL	file:
EdgeObservationBAL	trunk/g2o/examples/bal/bal_example.cpp	/^    EdgeObservationBAL()$/;"	f	class:EdgeObservationBAL
EdgeObservationBAL	trunk/g2o/examples/bal/bal_example.cpp	/^class EdgeObservationBAL : public BaseBinaryEdge<2, Vector2d, VertexCameraBAL, VertexPointBAL>$/;"	c	file:
VertexCameraBAL	trunk/g2o/examples/bal/bal_example.cpp	/^    VertexCameraBAL()$/;"	f	class:VertexCameraBAL
VertexCameraBAL	trunk/g2o/examples/bal/bal_example.cpp	/^class VertexCameraBAL : public BaseVertex<9, Eigen::VectorXd>$/;"	c	file:
VertexPointBAL	trunk/g2o/examples/bal/bal_example.cpp	/^    VertexPointBAL()$/;"	f	class:VertexPointBAL
VertexPointBAL	trunk/g2o/examples/bal/bal_example.cpp	/^class VertexPointBAL : public BaseVertex<3, Eigen::Vector3d>$/;"	c	file:
computeError	trunk/g2o/examples/bal/bal_example.cpp	/^    void computeError()$/;"	f	class:EdgeObservationBAL
cross	trunk/g2o/examples/bal/bal_example.cpp	/^    inline void cross(const T x[3], const T y[3], T result[3]) const$/;"	f	class:EdgeObservationBAL
dot	trunk/g2o/examples/bal/bal_example.cpp	/^    inline T dot(const T x[3], const T y[3]) const { return (x[0] * y[0] + x[1] * y[1] + x[2] * y[2]);}$/;"	f	class:EdgeObservationBAL
linearizeOplus	trunk/g2o/examples/bal/bal_example.cpp	/^    void linearizeOplus()$/;"	f	class:EdgeObservationBAL
main	trunk/g2o/examples/bal/bal_example.cpp	/^int main(int argc, char** argv)$/;"	f
operator ()	trunk/g2o/examples/bal/bal_example.cpp	/^    bool operator()(const T* camera, const T* point, T* error) const$/;"	f	class:EdgeObservationBAL
oplusImpl	trunk/g2o/examples/bal/bal_example.cpp	/^    virtual void oplusImpl(const double* update)$/;"	f	class:VertexCameraBAL
oplusImpl	trunk/g2o/examples/bal/bal_example.cpp	/^    virtual void oplusImpl(const double* update)$/;"	f	class:VertexPointBAL
read	trunk/g2o/examples/bal/bal_example.cpp	/^    virtual bool read(std::istream& \/*is*\/)$/;"	f	class:EdgeObservationBAL
read	trunk/g2o/examples/bal/bal_example.cpp	/^    virtual bool read(std::istream& \/*is*\/)$/;"	f	class:VertexCameraBAL
read	trunk/g2o/examples/bal/bal_example.cpp	/^    virtual bool read(std::istream& \/*is*\/)$/;"	f	class:VertexPointBAL
setToOriginImpl	trunk/g2o/examples/bal/bal_example.cpp	/^    virtual void setToOriginImpl()$/;"	f	class:VertexCameraBAL
setToOriginImpl	trunk/g2o/examples/bal/bal_example.cpp	/^    virtual void setToOriginImpl()$/;"	f	class:VertexPointBAL
squaredNorm	trunk/g2o/examples/bal/bal_example.cpp	/^    inline T squaredNorm(const T x[3]) const { return dot<T>(x, x);}$/;"	f	class:EdgeObservationBAL
write	trunk/g2o/examples/bal/bal_example.cpp	/^    virtual bool write(std::ostream& \/*os*\/) const$/;"	f	class:EdgeObservationBAL
write	trunk/g2o/examples/bal/bal_example.cpp	/^    virtual bool write(std::ostream& \/*os*\/) const$/;"	f	class:VertexCameraBAL
write	trunk/g2o/examples/bal/bal_example.cpp	/^    virtual bool write(std::ostream& \/*os*\/) const$/;"	f	class:VertexPointBAL
CUBE	trunk/g2o/examples/calibration_odom_laser/closed_form_calibration.cpp	37;"	d	file:
SQR	trunk/g2o/examples/calibration_odom_laser/closed_form_calibration.cpp	36;"	d	file:
calibrate	trunk/g2o/examples/calibration_odom_laser/closed_form_calibration.cpp	/^bool ClosedFormCalibration::calibrate(const MotionInformationVector& measurements, SE2& laserOffset, Eigen::Vector3d& odomParams)$/;"	f	class:g2o::ClosedFormCalibration
g2o	trunk/g2o/examples/calibration_odom_laser/closed_form_calibration.cpp	/^namespace g2o {$/;"	n	file:
solveLagrange	trunk/g2o/examples/calibration_odom_laser/closed_form_calibration.cpp	/^Eigen::VectorXd ClosedFormCalibration::solveLagrange(const Eigen::Matrix<double,5,5>& M, double lambda)$/;"	f	class:g2o::ClosedFormCalibration
ClosedFormCalibration	trunk/g2o/examples/calibration_odom_laser/closed_form_calibration.h	/^  class G2O_CALIBRATION_ODOM_LASER_API ClosedFormCalibration$/;"	c	namespace:g2o
G2O_CLOSED_FORM_CALIBRATION_H	trunk/g2o/examples/calibration_odom_laser/closed_form_calibration.h	28;"	d
g2o	trunk/g2o/examples/calibration_odom_laser/closed_form_calibration.h	/^namespace g2o {$/;"	n
EdgeSE2PureCalib	trunk/g2o/examples/calibration_odom_laser/edge_se2_pure_calib.cpp	/^EdgeSE2PureCalib::EdgeSE2PureCalib()$/;"	f	class:g2o::EdgeSE2PureCalib
computeError	trunk/g2o/examples/calibration_odom_laser/edge_se2_pure_calib.cpp	/^void EdgeSE2PureCalib::computeError()$/;"	f	class:g2o::EdgeSE2PureCalib
g2o	trunk/g2o/examples/calibration_odom_laser/edge_se2_pure_calib.cpp	/^namespace g2o {$/;"	n	file:
read	trunk/g2o/examples/calibration_odom_laser/edge_se2_pure_calib.cpp	/^bool EdgeSE2PureCalib::read(std::istream& is)$/;"	f	class:g2o::EdgeSE2PureCalib
write	trunk/g2o/examples/calibration_odom_laser/edge_se2_pure_calib.cpp	/^bool EdgeSE2PureCalib::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSE2PureCalib
EDGE_SE2_PURE_CALIB_H	trunk/g2o/examples/calibration_odom_laser/edge_se2_pure_calib.h	28;"	d
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/calibration_odom_laser/edge_se2_pure_calib.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::EdgeSE2PureCalib
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/calibration_odom_laser/edge_se2_pure_calib.h	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	struct:g2o::OdomAndLaserMotion
EdgeSE2PureCalib	trunk/g2o/examples/calibration_odom_laser/edge_se2_pure_calib.h	/^  class G2O_CALIBRATION_ODOM_LASER_API EdgeSE2PureCalib : public BaseBinaryEdge<3, OdomAndLaserMotion, VertexSE2, VertexOdomDifferentialParams>$/;"	c	namespace:g2o
OdomAndLaserMotion	trunk/g2o/examples/calibration_odom_laser/edge_se2_pure_calib.h	/^  struct G2O_CALIBRATION_ODOM_LASER_API OdomAndLaserMotion$/;"	s	namespace:g2o
g2o	trunk/g2o/examples/calibration_odom_laser/edge_se2_pure_calib.h	/^namespace g2o {$/;"	n
laserMotion	trunk/g2o/examples/calibration_odom_laser/edge_se2_pure_calib.h	/^    SE2 laserMotion;$/;"	m	struct:g2o::OdomAndLaserMotion
velocityMeasurement	trunk/g2o/examples/calibration_odom_laser/edge_se2_pure_calib.h	/^    VelocityMeasurement velocityMeasurement;$/;"	m	struct:g2o::OdomAndLaserMotion
G2O_CALIBRATION_ODOM_LASER_API	trunk/g2o/examples/calibration_odom_laser/g2o_calibration_odom_laser_api.h	19;"	d
G2O_CALIBRATION_ODOM_LASER_API	trunk/g2o/examples/calibration_odom_laser/g2o_calibration_odom_laser_api.h	21;"	d
G2O_CALIBRATION_ODOM_LASER_API	trunk/g2o/examples/calibration_odom_laser/g2o_calibration_odom_laser_api.h	24;"	d
G2O_CALIBRATION_ODOM_LASER_API	trunk/g2o/examples/calibration_odom_laser/g2o_calibration_odom_laser_api.h	29;"	d
G2O_CALIBRATION_ODOM_LASER_API_H	trunk/g2o/examples/calibration_odom_laser/g2o_calibration_odom_laser_api.h	11;"	d
ID_LASERPOSE	trunk/g2o/examples/calibration_odom_laser/gm2dl_io.cpp	/^  const int Gm2dlIO::ID_LASERPOSE  = numeric_limits<int>::max();$/;"	m	class:g2o::Gm2dlIO	file:
ID_ODOMCALIB	trunk/g2o/examples/calibration_odom_laser/gm2dl_io.cpp	/^  const int Gm2dlIO::ID_ODOMCALIB  = numeric_limits<int>::max() - 1;$/;"	m	class:g2o::Gm2dlIO	file:
g2o	trunk/g2o/examples/calibration_odom_laser/gm2dl_io.cpp	/^namespace g2o {$/;"	n	file:
readGm2dl	trunk/g2o/examples/calibration_odom_laser/gm2dl_io.cpp	/^  bool Gm2dlIO::readGm2dl(const std::string& filename, SparseOptimizer& optimizer, bool overrideCovariances)$/;"	f	class:g2o::Gm2dlIO
readRobotLaser	trunk/g2o/examples/calibration_odom_laser/gm2dl_io.cpp	/^  int Gm2dlIO::readRobotLaser(const std::string& filename, DataQueue& queue)$/;"	f	class:g2o::Gm2dlIO
updateLaserData	trunk/g2o/examples/calibration_odom_laser/gm2dl_io.cpp	/^  bool Gm2dlIO::updateLaserData(SparseOptimizer& optimizer)$/;"	f	class:g2o::Gm2dlIO
writeGm2dl	trunk/g2o/examples/calibration_odom_laser/gm2dl_io.cpp	/^  bool Gm2dlIO::writeGm2dl(const std::string& filename, const SparseOptimizer& optimizer)$/;"	f	class:g2o::Gm2dlIO
Gm2dlIO	trunk/g2o/examples/calibration_odom_laser/gm2dl_io.h	/^  class G2O_CALIBRATION_ODOM_LASER_API Gm2dlIO$/;"	c	namespace:g2o
ID_LASERPOSE	trunk/g2o/examples/calibration_odom_laser/gm2dl_io.h	/^      static const int ID_LASERPOSE;$/;"	m	class:g2o::Gm2dlIO
ID_ODOMCALIB	trunk/g2o/examples/calibration_odom_laser/gm2dl_io.h	/^      static const int ID_ODOMCALIB;$/;"	m	class:g2o::Gm2dlIO
g2o	trunk/g2o/examples/calibration_odom_laser/gm2dl_io.h	/^namespace g2o {$/;"	n
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/calibration_odom_laser/motion_information.h	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	struct:g2o::MotionInformation
G2O_MOTION_INFORMATION_H	trunk/g2o/examples/calibration_odom_laser/motion_information.h	28;"	d
MotionInformation	trunk/g2o/examples/calibration_odom_laser/motion_information.h	/^  struct G2O_CALIBRATION_ODOM_LASER_API MotionInformation$/;"	s	namespace:g2o
MotionInformationVector	trunk/g2o/examples/calibration_odom_laser/motion_information.h	/^  typedef std::vector<MotionInformation, Eigen::aligned_allocator<MotionInformation> >     MotionInformationVector;$/;"	t	namespace:g2o
g2o	trunk/g2o/examples/calibration_odom_laser/motion_information.h	/^namespace g2o {$/;"	n
laserMotion	trunk/g2o/examples/calibration_odom_laser/motion_information.h	/^    SE2 laserMotion;$/;"	m	struct:g2o::MotionInformation
odomMotion	trunk/g2o/examples/calibration_odom_laser/motion_information.h	/^    SE2 odomMotion;$/;"	m	struct:g2o::MotionInformation
timeInterval	trunk/g2o/examples/calibration_odom_laser/motion_information.h	/^    double timeInterval;$/;"	m	struct:g2o::MotionInformation
INFORMATION_SCALING_ODOMETRY	trunk/g2o/examples/calibration_odom_laser/sclam_helpers.cpp	/^  static const double INFORMATION_SCALING_ODOMETRY = 100;$/;"	v	file:
addOdometryCalibLinksDifferential	trunk/g2o/examples/calibration_odom_laser/sclam_helpers.cpp	/^  void addOdometryCalibLinksDifferential(SparseOptimizer& optimizer, const DataQueue& odomData)$/;"	f	namespace:g2o
allocateSolverForSclam	trunk/g2o/examples/calibration_odom_laser/sclam_helpers.cpp	/^  void allocateSolverForSclam(SparseOptimizer& optimizer, bool levenberg)$/;"	f	namespace:g2o
g2o	trunk/g2o/examples/calibration_odom_laser/sclam_helpers.cpp	/^namespace g2o {$/;"	n	file:
G2O_SCLAM_HELPERS_H	trunk/g2o/examples/calibration_odom_laser/sclam_helpers.h	28;"	d
g2o	trunk/g2o/examples/calibration_odom_laser/sclam_helpers.h	/^namespace g2o {$/;"	n
csparse	trunk/g2o/examples/calibration_odom_laser/sclam_laser_calib.cpp	/^G2O_USE_OPTIMIZATION_LIBRARY(csparse);$/;"	v
hasToStop	trunk/g2o/examples/calibration_odom_laser/sclam_laser_calib.cpp	/^static bool hasToStop = false;$/;"	v	file:
main	trunk/g2o/examples/calibration_odom_laser/sclam_laser_calib.cpp	/^int main(int argc, char** argv)$/;"	f
sigquit_handler	trunk/g2o/examples/calibration_odom_laser/sclam_laser_calib.cpp	/^void sigquit_handler(int sig)$/;"	f
slam2d	trunk/g2o/examples/calibration_odom_laser/sclam_laser_calib.cpp	/^G2O_USE_TYPE_GROUP(slam2d);$/;"	v
hasToStop	trunk/g2o/examples/calibration_odom_laser/sclam_odom_laser.cpp	/^static bool hasToStop = false;$/;"	v	file:
main	trunk/g2o/examples/calibration_odom_laser/sclam_odom_laser.cpp	/^int main(int argc, char** argv)$/;"	f
sigquit_handler	trunk/g2o/examples/calibration_odom_laser/sclam_odom_laser.cpp	/^void sigquit_handler(int sig)$/;"	f
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/calibration_odom_laser/sclam_pure_calibration.cpp	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:EdgeCalib	file:
EdgeCalib	trunk/g2o/examples/calibration_odom_laser/sclam_pure_calibration.cpp	/^    EdgeCalib() {}$/;"	f	class:EdgeCalib
EdgeCalib	trunk/g2o/examples/calibration_odom_laser/sclam_pure_calibration.cpp	/^class EdgeCalib : public BaseBinaryEdge<3, OdomAndLaserMotion, VertexSE2, VertexBaseline>$/;"	c	file:
VertexBaseline	trunk/g2o/examples/calibration_odom_laser/sclam_pure_calibration.cpp	/^    VertexBaseline() {}$/;"	f	class:VertexBaseline
VertexBaseline	trunk/g2o/examples/calibration_odom_laser/sclam_pure_calibration.cpp	/^class VertexBaseline : public BaseVertex<1, double>$/;"	c	file:
computeError	trunk/g2o/examples/calibration_odom_laser/sclam_pure_calibration.cpp	/^    void computeError()$/;"	f	class:EdgeCalib
linearSolution	trunk/g2o/examples/calibration_odom_laser/sclam_pure_calibration.cpp	/^static Eigen::Vector2d linearSolution;$/;"	v	file:
main	trunk/g2o/examples/calibration_odom_laser/sclam_pure_calibration.cpp	/^int main(int argc, char** argv)$/;"	f
oplusImpl	trunk/g2o/examples/calibration_odom_laser/sclam_pure_calibration.cpp	/^    virtual void oplusImpl(const double* update) { _estimate += update[0];}$/;"	f	class:VertexBaseline
read	trunk/g2o/examples/calibration_odom_laser/sclam_pure_calibration.cpp	/^    virtual bool read(std::istream&) { return false;}$/;"	f	class:EdgeCalib
read	trunk/g2o/examples/calibration_odom_laser/sclam_pure_calibration.cpp	/^    virtual bool read(std::istream&) { return false;}$/;"	f	class:VertexBaseline
setToOriginImpl	trunk/g2o/examples/calibration_odom_laser/sclam_pure_calibration.cpp	/^    virtual void setToOriginImpl() { _estimate = 1.;}$/;"	f	class:VertexBaseline
write	trunk/g2o/examples/calibration_odom_laser/sclam_pure_calibration.cpp	/^    virtual bool write(std::ostream&) const { return false;}$/;"	f	class:EdgeCalib
write	trunk/g2o/examples/calibration_odom_laser/sclam_pure_calibration.cpp	/^    virtual bool write(std::ostream&) const { return false;}$/;"	f	class:VertexBaseline
main	trunk/g2o/examples/data_convert/convert_sba_slam3d.cpp	/^int main(int argc, char** argv)$/;"	f
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/data_fitting/circle_fit.cpp	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:VertexCircle	file:
EdgePointOnCircle	trunk/g2o/examples/data_fitting/circle_fit.cpp	/^    EdgePointOnCircle()$/;"	f	class:EdgePointOnCircle
EdgePointOnCircle	trunk/g2o/examples/data_fitting/circle_fit.cpp	/^class EdgePointOnCircle : public g2o::BaseUnaryEdge<1, Eigen::Vector2d, VertexCircle>$/;"	c	file:
VertexCircle	trunk/g2o/examples/data_fitting/circle_fit.cpp	/^    VertexCircle()$/;"	f	class:VertexCircle
VertexCircle	trunk/g2o/examples/data_fitting/circle_fit.cpp	/^class VertexCircle : public g2o::BaseVertex<3, Eigen::Vector3d>$/;"	c	file:
computeError	trunk/g2o/examples/data_fitting/circle_fit.cpp	/^    void computeError()$/;"	f	class:EdgePointOnCircle
errorOfSolution	trunk/g2o/examples/data_fitting/circle_fit.cpp	/^double errorOfSolution(int numPoints, Eigen::Vector2d* points, const Eigen::Vector3d& circle)$/;"	f
main	trunk/g2o/examples/data_fitting/circle_fit.cpp	/^int main(int argc, char** argv)$/;"	f
oplusImpl	trunk/g2o/examples/data_fitting/circle_fit.cpp	/^    virtual void oplusImpl(const double* update)$/;"	f	class:VertexCircle
read	trunk/g2o/examples/data_fitting/circle_fit.cpp	/^    virtual bool read(std::istream& \/*is*\/)$/;"	f	class:EdgePointOnCircle
read	trunk/g2o/examples/data_fitting/circle_fit.cpp	/^    virtual bool read(std::istream& \/*is*\/)$/;"	f	class:VertexCircle
setToOriginImpl	trunk/g2o/examples/data_fitting/circle_fit.cpp	/^    virtual void setToOriginImpl()$/;"	f	class:VertexCircle
write	trunk/g2o/examples/data_fitting/circle_fit.cpp	/^    virtual bool write(std::ostream& \/*os*\/) const$/;"	f	class:EdgePointOnCircle
write	trunk/g2o/examples/data_fitting/circle_fit.cpp	/^    virtual bool write(std::ostream& \/*os*\/) const$/;"	f	class:VertexCircle
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/data_fitting/curve_fit.cpp	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:VertexParams	file:
EdgePointOnCurve	trunk/g2o/examples/data_fitting/curve_fit.cpp	/^    EdgePointOnCurve()$/;"	f	class:EdgePointOnCurve
EdgePointOnCurve	trunk/g2o/examples/data_fitting/curve_fit.cpp	/^class EdgePointOnCurve : public g2o::BaseUnaryEdge<1, Eigen::Vector2d, VertexParams>$/;"	c	file:
VertexParams	trunk/g2o/examples/data_fitting/curve_fit.cpp	/^    VertexParams()$/;"	f	class:VertexParams
VertexParams	trunk/g2o/examples/data_fitting/curve_fit.cpp	/^class VertexParams : public g2o::BaseVertex<3, Eigen::Vector3d>$/;"	c	file:
computeError	trunk/g2o/examples/data_fitting/curve_fit.cpp	/^    void computeError()$/;"	f	class:EdgePointOnCurve
main	trunk/g2o/examples/data_fitting/curve_fit.cpp	/^int main(int argc, char** argv)$/;"	f
oplusImpl	trunk/g2o/examples/data_fitting/curve_fit.cpp	/^    virtual void oplusImpl(const double* update)$/;"	f	class:VertexParams
read	trunk/g2o/examples/data_fitting/curve_fit.cpp	/^    virtual bool read(std::istream& \/*is*\/)$/;"	f	class:EdgePointOnCurve
read	trunk/g2o/examples/data_fitting/curve_fit.cpp	/^    virtual bool read(std::istream& \/*is*\/)$/;"	f	class:VertexParams
setToOriginImpl	trunk/g2o/examples/data_fitting/curve_fit.cpp	/^    virtual void setToOriginImpl()$/;"	f	class:VertexParams
write	trunk/g2o/examples/data_fitting/curve_fit.cpp	/^    virtual bool write(std::ostream& \/*os*\/) const$/;"	f	class:EdgePointOnCurve
write	trunk/g2o/examples/data_fitting/curve_fit.cpp	/^    virtual bool write(std::ostream& \/*os*\/) const$/;"	f	class:VertexParams
IncrementalEdgesCompare	trunk/g2o/examples/g2o_unfold/g2o-unfold.cpp	/^struct IncrementalEdgesCompare {$/;"	s	file:
InvChi2CostFunction	trunk/g2o/examples/g2o_unfold/g2o-unfold.cpp	/^struct InvChi2CostFunction: public HyperDijkstra::CostFunction {$/;"	s	file:
allocateLinearSolver	trunk/g2o/examples/g2o_unfold/g2o-unfold.cpp	/^typename T::LinearSolverType* allocateLinearSolver(bool useCholmod)$/;"	f
gnudump_edges	trunk/g2o/examples/g2o_unfold/g2o-unfold.cpp	/^void gnudump_edges(string gnudump, $/;"	f
gnudump_features	trunk/g2o/examples/g2o_unfold/g2o-unfold.cpp	/^void gnudump_features(string gnudump, $/;"	f
hasToStop	trunk/g2o/examples/g2o_unfold/g2o-unfold.cpp	/^bool hasToStop=false;$/;"	v
main	trunk/g2o/examples/g2o_unfold/g2o-unfold.cpp	/^int main(int argc, char** argv)$/;"	f
operator ()	trunk/g2o/examples/g2o_unfold/g2o-unfold.cpp	/^  bool operator()(SparseOptimizer::Edge* const & e1, SparseOptimizer::Edge* const & e2)$/;"	f	struct:IncrementalEdgesCompare
operator ()	trunk/g2o/examples/g2o_unfold/g2o-unfold.cpp	/^double InvChi2CostFunction::operator () (HyperGraph::Edge* edge,$/;"	f	class:InvChi2CostFunction
sigquit_handler	trunk/g2o/examples/g2o_unfold/g2o-unfold.cpp	/^void sigquit_handler(int q __attribute__((unused))){$/;"	f
str2method	trunk/g2o/examples/g2o_unfold/g2o-unfold.cpp	/^SparseOptimizer::Method str2method(const std::string& strMethod){$/;"	f
str2solver	trunk/g2o/examples/g2o_unfold/g2o-unfold.cpp	/^Solver* str2solver(const std::string& strSolver_, SparseOptimizer* opt)$/;"	f
updateDisplay	trunk/g2o/examples/g2o_unfold/g2o-unfold.cpp	/^void updateDisplay(ostream& os, const SparseOptimizer& optimizer)$/;"	f
findConnectedEdgesWithCostLimit	trunk/g2o/examples/g2o_unfold/tools.cpp	/^  void findConnectedEdgesWithCostLimit(HyperGraph::EdgeSet& selected,$/;"	f	namespace:g2o
g2o	trunk/g2o/examples/g2o_unfold/tools.cpp	/^namespace g2o{$/;"	n	file:
G2O_AIS_GRAPH_TOOLS_HH	trunk/g2o/examples/g2o_unfold/tools.h	2;"	d
g2o	trunk/g2o/examples/g2o_unfold/tools.h	/^namespace g2o{$/;"	n
Sample	trunk/g2o/examples/icp/gicp_demo.cpp	/^  class Sample$/;"	c	file:
gaussian	trunk/g2o/examples/icp/gicp_demo.cpp	/^  double Sample::gaussian(double sigma)$/;"	f	class:Sample
gen_int	trunk/g2o/examples/icp/gicp_demo.cpp	/^    static tr1::mt19937 gen_int;$/;"	m	class:Sample	file:
gen_int	trunk/g2o/examples/icp/gicp_demo.cpp	/^  tr1::mt19937 Sample::gen_int;$/;"	m	class:Sample	file:
gen_real	trunk/g2o/examples/icp/gicp_demo.cpp	/^    static tr1::ranlux_base_01 gen_real;$/;"	m	class:Sample	file:
gen_real	trunk/g2o/examples/icp/gicp_demo.cpp	/^ tr1::ranlux_base_01 Sample::gen_real;$/;"	m	class:Sample	file:
main	trunk/g2o/examples/icp/gicp_demo.cpp	/^int main()$/;"	f
uniform	trunk/g2o/examples/icp/gicp_demo.cpp	/^  double Sample::uniform()$/;"	f	class:Sample
uniform	trunk/g2o/examples/icp/gicp_demo.cpp	/^  int Sample::uniform(int from, int to)$/;"	f	class:Sample
Sample	trunk/g2o/examples/icp/gicp_sba_demo.cpp	/^  class Sample$/;"	c	file:
gaussian	trunk/g2o/examples/icp/gicp_sba_demo.cpp	/^  double Sample::gaussian(double sigma)$/;"	f	class:Sample
gen_int	trunk/g2o/examples/icp/gicp_sba_demo.cpp	/^    static tr1::mt19937 gen_int;$/;"	m	class:Sample	file:
gen_int	trunk/g2o/examples/icp/gicp_sba_demo.cpp	/^  tr1::mt19937 Sample::gen_int;$/;"	m	class:Sample	file:
gen_real	trunk/g2o/examples/icp/gicp_sba_demo.cpp	/^    static tr1::ranlux_base_01 gen_real;$/;"	m	class:Sample	file:
gen_real	trunk/g2o/examples/icp/gicp_sba_demo.cpp	/^ tr1::ranlux_base_01 Sample::gen_real;$/;"	m	class:Sample	file:
main	trunk/g2o/examples/icp/gicp_sba_demo.cpp	/^int main(int argc, char **argv)$/;"	f
uniform	trunk/g2o/examples/icp/gicp_sba_demo.cpp	/^  double Sample::uniform()$/;"	f	class:Sample
uniform	trunk/g2o/examples/icp/gicp_sba_demo.cpp	/^  int Sample::uniform(int from, int to)$/;"	f	class:Sample
EdgeInformation	trunk/g2o/examples/interactive_slam/g2o_incremental/g2o_incremental.cpp	/^struct EdgeInformation$/;"	s	file:
IncrementalEdgesCompare	trunk/g2o/examples/interactive_slam/g2o_incremental/g2o_incremental.cpp	/^struct IncrementalEdgesCompare$/;"	s	file:
fromId	trunk/g2o/examples/interactive_slam/g2o_incremental/g2o_incremental.cpp	/^  int fromId;$/;"	m	struct:EdgeInformation	file:
hasToStop	trunk/g2o/examples/interactive_slam/g2o_incremental/g2o_incremental.cpp	/^static bool hasToStop=false;$/;"	v	file:
information	trunk/g2o/examples/interactive_slam/g2o_incremental/g2o_incremental.cpp	/^  std::vector<double> information;$/;"	m	struct:EdgeInformation	file:
main	trunk/g2o/examples/interactive_slam/g2o_incremental/g2o_incremental.cpp	/^int main(int argc, char** argv)$/;"	f
measurement	trunk/g2o/examples/interactive_slam/g2o_incremental/g2o_incremental.cpp	/^  std::vector<double> measurement;$/;"	m	struct:EdgeInformation	file:
operator ()	trunk/g2o/examples/interactive_slam/g2o_incremental/g2o_incremental.cpp	/^  bool operator()(const EdgeInformation& e1, const EdgeInformation& e2)$/;"	f	struct:IncrementalEdgesCompare
sigquit_handler	trunk/g2o/examples/interactive_slam/g2o_incremental/g2o_incremental.cpp	/^void sigquit_handler(int sig)$/;"	f
toId	trunk/g2o/examples/interactive_slam/g2o_incremental/g2o_incremental.cpp	/^  int toId;$/;"	m	struct:EdgeInformation	file:
G2O_INCREMENTAL_API	trunk/g2o/examples/interactive_slam/g2o_incremental/g2o_incremental_api.h	10;"	d
G2O_INCREMENTAL_API	trunk/g2o/examples/interactive_slam/g2o_incremental/g2o_incremental_api.h	12;"	d
G2O_INCREMENTAL_API	trunk/g2o/examples/interactive_slam/g2o_incremental/g2o_incremental_api.h	15;"	d
G2O_INCREMENTAL_API	trunk/g2o/examples/interactive_slam/g2o_incremental/g2o_incremental_api.h	20;"	d
G2O_INCREMENTAL_API_H	trunk/g2o/examples/interactive_slam/g2o_incremental/g2o_incremental_api.h	2;"	d
ALLOC_CHOLMOD	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.cpp	29;"	d	file:
DIM_TO_SOLVER	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.cpp	27;"	d	file:
SparseOptimizerIncremental	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^  SparseOptimizerIncremental::SparseOptimizerIncremental()$/;"	f	class:g2o::SparseOptimizerIncremental
VertexBackup	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^    struct VertexBackup$/;"	s	namespace:g2o::<anonymous>	file:
computeCholeskyUpdate	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^  bool SparseOptimizerIncremental::computeCholeskyUpdate()$/;"	f	class:g2o::SparseOptimizerIncremental
convertTripletUpdateToSparse	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^  void SparseOptimizerIncremental::convertTripletUpdateToSparse()$/;"	f	class:g2o::SparseOptimizerIncremental
createSolver	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^  static OptimizationAlgorithm* createSolver(const std::string& solverName)$/;"	f	namespace:g2o	file:
g2o	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^namespace g2o {$/;"	n	file:
hessianData	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^      double* hessianData;$/;"	m	struct:g2o::<anonymous>::VertexBackup	file:
hessianIndex	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^      int hessianIndex;$/;"	m	struct:g2o::<anonymous>::VertexBackup	file:
initSolver	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^  bool SparseOptimizerIncremental::initSolver(int dimension, int batchEveryN)$/;"	f	class:g2o::SparseOptimizerIncremental
operator <	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^      bool operator<(const VertexBackup& other) const$/;"	f	struct:g2o::<anonymous>::VertexBackup
optimize	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^  int SparseOptimizerIncremental::optimize(int iterations, bool online)$/;"	f	class:g2o::SparseOptimizerIncremental
updateInitialization	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^  bool SparseOptimizerIncremental::updateInitialization(HyperGraph::VertexSet& vset, HyperGraph::EdgeSet& eset)$/;"	f	class:g2o::SparseOptimizerIncremental
vertex	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^      OptimizableGraph::Vertex* vertex;$/;"	m	struct:g2o::<anonymous>::VertexBackup	file:
~SparseOptimizerIncremental	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.cpp	/^  SparseOptimizerIncremental::~SparseOptimizerIncremental()$/;"	f	class:g2o::SparseOptimizerIncremental
G2O_GRAPH_OPTIMIZER_SPARSE_INCREMENTAL_H	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.h	18;"	d
SparseOptimizerIncremental	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.h	/^  class G2O_INCREMENTAL_API SparseOptimizerIncremental : public SparseOptimizerOnline$/;"	c	namespace:g2o
_L	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      cholmod_factor* _L;$/;"	m	class:g2o::SparseOptimizerIncremental
_cholmodCommon	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      cholmod_common _cholmodCommon;$/;"	m	class:g2o::SparseOptimizerIncremental
_cholmodFactor	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      cholmod_factor* _cholmodFactor;$/;"	m	class:g2o::SparseOptimizerIncremental
_cholmodSparse	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      CholmodExt* _cholmodSparse;$/;"	m	class:g2o::SparseOptimizerIncremental
_cmember	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      Eigen::VectorXi _cmember;$/;"	m	class:g2o::SparseOptimizerIncremental
_perm	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      Eigen::VectorXi _perm;$/;"	m	class:g2o::SparseOptimizerIncremental
_permutedUpdate	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      cholmod_triplet* _permutedUpdate;$/;"	m	class:g2o::SparseOptimizerIncremental
_permutedUpdateAsSparse	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      CholmodExt* _permutedUpdateAsSparse;$/;"	m	class:g2o::SparseOptimizerIncremental
_solverInterface	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      LinearSolverCholmodOnlineInterface* _solverInterface;$/;"	m	class:g2o::SparseOptimizerIncremental
_touchedVertices	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      HyperGraph::VertexSet _touchedVertices;$/;"	m	class:g2o::SparseOptimizerIncremental
_tripletWorkspace	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      Eigen::VectorXi _tripletWorkspace;$/;"	m	class:g2o::SparseOptimizerIncremental
_updateMat	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.h	/^      SparseBlockMatrix<MatrixXd> _updateMat;$/;"	m	class:g2o::SparseOptimizerIncremental
g2o	trunk/g2o/examples/interactive_slam/g2o_incremental/graph_optimizer_sparse_incremental.h	/^namespace g2o {$/;"	n
G2O_LINEAR_SOLVER_CHOLMOD_ONLINE	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	18;"	d
L	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    cholmod_factor* L() const { return _cholmodFactor;}$/;"	f	class:g2o::LinearSolverCholmodOnline
LinearSolverCholmodOnline	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    LinearSolverCholmodOnline() :$/;"	f	class:g2o::LinearSolverCholmodOnline
LinearSolverCholmodOnline	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^class LinearSolverCholmodOnline : public LinearSolver<MatrixType>, public LinearSolverCholmodOnlineInterface$/;"	c	namespace:g2o
LinearSolverCholmodOnlineInterface	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    LinearSolverCholmodOnlineInterface() : cmember(0), batchEveryN(100) {}$/;"	f	class:g2o::LinearSolverCholmodOnlineInterface
LinearSolverCholmodOnlineInterface	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^class G2O_INCREMENTAL_API LinearSolverCholmodOnlineInterface$/;"	c	namespace:g2o
_blockOrdering	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    bool _blockOrdering;$/;"	m	class:g2o::LinearSolverCholmodOnline
_blockPermutation	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    VectorXi _scalarPermutation, _blockPermutation;$/;"	m	class:g2o::LinearSolverCholmodOnline
_cholmodCommon	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    cholmod_common _cholmodCommon;$/;"	m	class:g2o::LinearSolverCholmodOnline
_cholmodFactor	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    cholmod_factor* _cholmodFactor;$/;"	m	class:g2o::LinearSolverCholmodOnline
_cholmodSparse	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    CholmodExt* _cholmodSparse;$/;"	m	class:g2o::LinearSolverCholmodOnline
_matrixStructure	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    MatrixStructure _matrixStructure;$/;"	m	class:g2o::LinearSolverCholmodOnline
_scalarPermutation	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    VectorXi _scalarPermutation, _blockPermutation;$/;"	m	class:g2o::LinearSolverCholmodOnline
batchEveryN	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    int batchEveryN;$/;"	m	class:g2o::LinearSolverCholmodOnlineInterface
blockOrdering	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    bool blockOrdering() const { return true;}$/;"	f	class:g2o::LinearSolverCholmodOnline
choleskyUpdate	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    int choleskyUpdate(cholmod_sparse* update)$/;"	f	class:g2o::LinearSolverCholmodOnline
cmember	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    VectorXi* cmember;$/;"	m	class:g2o::LinearSolverCholmodOnlineInterface
computeSymbolicDecomposition	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    void computeSymbolicDecomposition(const SparseBlockMatrix<MatrixType>& A)$/;"	f	class:g2o::LinearSolverCholmodOnline
fillCholmodExt	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    void fillCholmodExt(const SparseBlockMatrix<MatrixType>& A, bool onlyValues)$/;"	f	class:g2o::LinearSolverCholmodOnline
g2o	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^namespace g2o {$/;"	n
init	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    virtual bool init()$/;"	f	class:g2o::LinearSolverCholmodOnline
nonZerosInL	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    size_t nonZerosInL() const {$/;"	f	class:g2o::LinearSolverCholmodOnline
solve	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    bool solve(const SparseBlockMatrix<MatrixType>& A, double* x, double* b)$/;"	f	class:g2o::LinearSolverCholmodOnline
solve	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    bool solve(double* x, double* b)$/;"	f	class:g2o::LinearSolverCholmodOnline
~LinearSolverCholmodOnline	trunk/g2o/examples/interactive_slam/g2o_incremental/linear_solver_cholmod_online.h	/^    virtual ~LinearSolverCholmodOnline()$/;"	f	class:g2o::LinearSolverCholmodOnline
G2O_FAST_OUTPUT_H	trunk/g2o/examples/interactive_slam/g2o_interactive/fast_output.h	38;"	d
modp_dtoa	trunk/g2o/examples/interactive_slam/g2o_interactive/fast_output.h	/^inline int modp_dtoa(double value, char* str, int prec)$/;"	f
modp_itoa10	trunk/g2o/examples/interactive_slam/g2o_interactive/fast_output.h	/^inline int modp_itoa10(int32_t value, char* str)$/;"	f
modp_uitoa10	trunk/g2o/examples/interactive_slam/g2o_interactive/fast_output.h	/^inline int modp_uitoa10(uint32_t value, char* str)$/;"	f
strreverse	trunk/g2o/examples/interactive_slam/g2o_interactive/fast_output.h	/^inline void strreverse(char* begin, char* end)$/;"	f
G2O_INTERACTIVE_API	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_interactive_api.h	10;"	d
G2O_INTERACTIVE_API	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_interactive_api.h	12;"	d
G2O_INTERACTIVE_API	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_interactive_api.h	15;"	d
G2O_INTERACTIVE_API	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_interactive_api.h	20;"	d
G2O_INTERACTIVE_API_H	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_interactive_api.h	2;"	d
hasToStop	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_online.cpp	/^static bool hasToStop=false;$/;"	v	file:
main	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_online.cpp	/^int main(int argc, char** argv)$/;"	f
sigquit_handler	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_online.cpp	/^void sigquit_handler(int sig)$/;"	f
G2oSlamInterface	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.cpp	/^G2oSlamInterface::G2oSlamInterface(SparseOptimizerOnline* optimizer) :$/;"	f	class:g2o::G2oSlamInterface
addEdge	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.cpp	/^bool G2oSlamInterface::addEdge(const std::string& tag, int id, int dimension, int v1Id, int v2Id, const std::vector<double>& measurement, const std::vector<double>& information)$/;"	f	class:g2o::G2oSlamInterface
addNode	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.cpp	/^bool G2oSlamInterface::addNode(const std::string& tag, int id, int dimension, const std::vector<double>& values)$/;"	f	class:g2o::G2oSlamInterface
addVertex	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.cpp	/^OptimizableGraph::Vertex* G2oSlamInterface::addVertex(int dimension, int id)$/;"	f	class:g2o::G2oSlamInterface
fixNode	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.cpp	/^bool G2oSlamInterface::fixNode(const std::vector<int>& nodes)$/;"	f	class:g2o::G2oSlamInterface
g2o	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.cpp	/^namespace g2o {$/;"	n	file:
jac_quat3_euler3	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.cpp	/^    void jac_quat3_euler3(Eigen::Matrix<double, 6, 6>& J, const SE3Quat& t)$/;"	f	namespace:g2o::<anonymous>
printVertex	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.cpp	/^bool G2oSlamInterface::printVertex(OptimizableGraph::Vertex* v)$/;"	f	class:g2o::G2oSlamInterface
quat_to_euler	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.cpp	/^    void quat_to_euler(const Eigen::Quaterniond& q, double& yaw, double& pitch, double& roll)$/;"	f	namespace:g2o::<anonymous>
queryState	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.cpp	/^bool G2oSlamInterface::queryState(const std::vector<int>& nodes)$/;"	f	class:g2o::G2oSlamInterface
setBatchSolveEachN	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.cpp	/^void G2oSlamInterface::setBatchSolveEachN(int n)$/;"	f	class:g2o::G2oSlamInterface
setUpdateGraphEachN	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.cpp	/^void G2oSlamInterface::setUpdateGraphEachN(int n)$/;"	f	class:g2o::G2oSlamInterface
solve	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.cpp	/^G2oSlamInterface::SolveResult G2oSlamInterface::solve()$/;"	f	class:g2o::G2oSlamInterface
solveState	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.cpp	/^bool G2oSlamInterface::solveState()$/;"	f	class:g2o::G2oSlamInterface
ERROR	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	/^      enum SolveResult { SOLVED, SOLVED_BATCH, NOOP, ERROR };$/;"	e	enum:g2o::G2oSlamInterface::SolveResult
G2O_SLAM_INTERFACE_H	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	28;"	d
G2oSlamInterface	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	/^  class G2O_INTERACTIVE_API G2oSlamInterface : public SlamParser::AbstractSlamInterface$/;"	c	namespace:g2o
NOOP	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	/^      enum SolveResult { SOLVED, SOLVED_BATCH, NOOP, ERROR };$/;"	e	enum:g2o::G2oSlamInterface::SolveResult
SOLVED	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	/^      enum SolveResult { SOLVED, SOLVED_BATCH, NOOP, ERROR };$/;"	e	enum:g2o::G2oSlamInterface::SolveResult
SOLVED_BATCH	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	/^      enum SolveResult { SOLVED, SOLVED_BATCH, NOOP, ERROR };$/;"	e	enum:g2o::G2oSlamInterface::SolveResult
SolveResult	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	/^      enum SolveResult { SOLVED, SOLVED_BATCH, NOOP, ERROR };$/;"	g	class:g2o::G2oSlamInterface
_batchEveryN	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	/^      int _batchEveryN;$/;"	m	class:g2o::G2oSlamInterface
_edgesAdded	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	/^      HyperGraph::EdgeSet _edgesAdded;$/;"	m	class:g2o::G2oSlamInterface
_firstOptimization	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	/^      bool _firstOptimization;$/;"	m	class:g2o::G2oSlamInterface
_incIterations	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	/^      int _incIterations;$/;"	m	class:g2o::G2oSlamInterface
_initSolverDone	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	/^      bool _initSolverDone;$/;"	m	class:g2o::G2oSlamInterface
_lastBatchStep	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	/^      int _lastBatchStep;$/;"	m	class:g2o::G2oSlamInterface
_nodesAdded	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	/^      int _nodesAdded;$/;"	m	class:g2o::G2oSlamInterface
_optimizer	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	/^      SparseOptimizerOnline* _optimizer;$/;"	m	class:g2o::G2oSlamInterface
_updateGraphEachN	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	/^      int _updateGraphEachN;$/;"	m	class:g2o::G2oSlamInterface
_verticesAdded	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	/^      HyperGraph::VertexSet _verticesAdded;$/;"	m	class:g2o::G2oSlamInterface
batchSolveEachN	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	/^      int batchSolveEachN() const { return _batchEveryN;}$/;"	f	class:g2o::G2oSlamInterface
g2o	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	/^namespace g2o {$/;"	n
updatedGraphEachN	trunk/g2o/examples/interactive_slam/g2o_interactive/g2o_slam_interface.h	/^      int updatedGraphEachN() const { return _updateGraphEachN;}$/;"	f	class:g2o::G2oSlamInterface
IncrementalEdgesCompare	trunk/g2o/examples/interactive_slam/g2o_interactive/generate_commands.cpp	/^struct IncrementalEdgesCompare {$/;"	s	file:
hasToStop	trunk/g2o/examples/interactive_slam/g2o_interactive/generate_commands.cpp	/^static bool hasToStop=false;$/;"	v	file:
main	trunk/g2o/examples/interactive_slam/g2o_interactive/generate_commands.cpp	/^int main(int argc, char** argv)$/;"	f
operator ()	trunk/g2o/examples/interactive_slam/g2o_interactive/generate_commands.cpp	/^  bool operator()(SparseOptimizer::Edge* const & e1, SparseOptimizer::Edge* const & e2)$/;"	f	struct:IncrementalEdgesCompare
sigquit_handler	trunk/g2o/examples/interactive_slam/g2o_interactive/generate_commands.cpp	/^void sigquit_handler(int sig)$/;"	f
str2method	trunk/g2o/examples/interactive_slam/g2o_interactive/generate_commands.cpp	/^SparseOptimizer::Method str2method(const std::string& strMethod_){$/;"	f
ALLOC_PCG	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.cpp	48;"	d	file:
DIM_TO_SOLVER	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.cpp	46;"	d	file:
SparseOptimizerOnline	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.cpp	/^SparseOptimizerOnline::SparseOptimizerOnline(bool pcg) :$/;"	f	class:g2o::SparseOptimizerOnline
cholmod	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.cpp	/^  G2O_USE_OPTIMIZATION_LIBRARY(cholmod);$/;"	v
createSolver	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.cpp	/^static Solver* createSolver(const std::string& solverName)$/;"	f	namespace:g2o	file:
g2o	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.cpp	/^namespace g2o {$/;"	n	file:
gnuplotVisualization	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.cpp	/^void SparseOptimizerOnline::gnuplotVisualization()$/;"	f	class:g2o::SparseOptimizerOnline
initSolver	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.cpp	/^bool SparseOptimizerOnline::initSolver(int dimension, int \/*batchEveryN*\/)$/;"	f	class:g2o::SparseOptimizerOnline
optimize	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.cpp	/^int SparseOptimizerOnline::optimize(int iterations, bool online)$/;"	f	class:g2o::SparseOptimizerOnline
update	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.cpp	/^void SparseOptimizerOnline::update(double* update)$/;"	f	class:g2o::SparseOptimizerOnline
updateInitialization	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.cpp	/^bool SparseOptimizerOnline::updateInitialization(HyperGraph::VertexSet& vset, HyperGraph::EdgeSet& eset)$/;"	f	class:g2o::SparseOptimizerOnline
~SparseOptimizerOnline	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.cpp	/^SparseOptimizerOnline::~SparseOptimizerOnline()$/;"	f	class:g2o::SparseOptimizerOnline
G2O_GRAPH_OPTIMIZER_SPARSE_ONLINE_H	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.h	28;"	d
SparseOptimizerOnline	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.h	/^  class G2O_INTERACTIVE_API SparseOptimizerOnline : public SparseOptimizer$/;"	c	namespace:g2o
_gnuplot	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.h	/^      FILE* _gnuplot;$/;"	m	class:g2o::SparseOptimizerOnline
_underlyingSolver	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.h	/^      Solver* _underlyingSolver;$/;"	m	class:g2o::SparseOptimizerOnline
_usePcg	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.h	/^      bool _usePcg;$/;"	m	class:g2o::SparseOptimizerOnline
batchStep	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.h	/^      bool batchStep;$/;"	m	class:g2o::SparseOptimizerOnline
g2o	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.h	/^namespace g2o {$/;"	n
newEdges	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.h	/^      HyperGraph::EdgeSet* newEdges;$/;"	m	class:g2o::SparseOptimizerOnline
slamDimension	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.h	/^      int slamDimension;$/;"	m	class:g2o::SparseOptimizerOnline
vizWithGnuplot	trunk/g2o/examples/interactive_slam/g2o_interactive/graph_optimizer_sparse_online.h	/^      bool vizWithGnuplot;$/;"	m	class:g2o::SparseOptimizerOnline
G2O_ATTRIBUTE_CONSTRUCTOR	trunk/g2o/examples/interactive_slam/g2o_interactive/types_online.cpp	/^  G2O_ATTRIBUTE_CONSTRUCTOR(init_types_interactive_online)$/;"	f	namespace:g2o
g2o	trunk/g2o/examples/interactive_slam/g2o_interactive/types_online.cpp	/^namespace g2o {$/;"	n	file:
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam2d_online.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::OnlineEdgeSE2
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam2d_online.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::OnlineVertexSE2
G2O_TYPES_SLAM2D_ONLINE_H	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam2d_online.h	28;"	d
OnlineEdgeSE2	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam2d_online.h	/^      OnlineEdgeSE2() : EdgeSE2() {}$/;"	f	class:g2o::OnlineEdgeSE2
OnlineEdgeSE2	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam2d_online.h	/^  class G2O_INTERACTIVE_API OnlineEdgeSE2 : public EdgeSE2$/;"	c	namespace:g2o
OnlineVertexSE2	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam2d_online.h	/^      OnlineVertexSE2() : VertexSE2() {}$/;"	f	class:g2o::OnlineVertexSE2
OnlineVertexSE2	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam2d_online.h	/^  class G2O_INTERACTIVE_API OnlineVertexSE2 : public VertexSE2$/;"	c	namespace:g2o
chi2	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam2d_online.h	/^      double chi2() const$/;"	f	class:g2o::OnlineEdgeSE2
g2o	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam2d_online.h	/^namespace g2o {$/;"	n
initialEstimate	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam2d_online.h	/^      void initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/* to *\/)$/;"	f	class:g2o::OnlineEdgeSE2
oplusImpl	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam2d_online.h	/^      virtual void oplusImpl(const double* update)$/;"	f	class:g2o::OnlineVertexSE2
oplusUpdatedEstimate	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam2d_online.h	/^      void oplusUpdatedEstimate(double* update)$/;"	f	class:g2o::OnlineVertexSE2
updatedEstimate	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam2d_online.h	/^      VertexSE2::EstimateType updatedEstimate;$/;"	m	class:g2o::OnlineVertexSE2
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam3d_online.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::OnlineEdgeSE3
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam3d_online.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::OnlineVertexSE3
G2O_TYPES_SLAM3D_ONLINE_H	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam3d_online.h	28;"	d
OnlineEdgeSE3	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam3d_online.h	/^      OnlineEdgeSE3() : EdgeSE3() {}$/;"	f	class:g2o::OnlineEdgeSE3
OnlineEdgeSE3	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam3d_online.h	/^  class G2O_INTERACTIVE_API OnlineEdgeSE3 : public EdgeSE3$/;"	c	namespace:g2o
OnlineVertexSE3	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam3d_online.h	/^      OnlineVertexSE3() : VertexSE3(), updatedEstimate(Eigen::Isometry3d::Identity()) {}$/;"	f	class:g2o::OnlineVertexSE3
OnlineVertexSE3	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam3d_online.h	/^  class G2O_INTERACTIVE_API OnlineVertexSE3 : public VertexSE3$/;"	c	namespace:g2o
chi2	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam3d_online.h	/^      double chi2() const$/;"	f	class:g2o::OnlineEdgeSE3
g2o	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam3d_online.h	/^namespace g2o {$/;"	n
initialEstimate	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam3d_online.h	/^      void initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/* to *\/)$/;"	f	class:g2o::OnlineEdgeSE3
oplusImpl	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam3d_online.h	/^      virtual void oplusImpl(const double* update)$/;"	f	class:g2o::OnlineVertexSE3
oplusUpdatedEstimate	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam3d_online.h	/^      void oplusUpdatedEstimate(double* update)$/;"	f	class:g2o::OnlineVertexSE3
updatedEstimate	trunk/g2o/examples/interactive_slam/g2o_interactive/types_slam3d_online.h	/^      VertexSE3::EstimateType updatedEstimate;$/;"	m	class:g2o::OnlineVertexSE3
ExampleSlamInterface	trunk/g2o/examples/interactive_slam/slam_parser/example/example_slam_interface.cpp	/^ExampleSlamInterface::ExampleSlamInterface()$/;"	f	class:ExampleSlamInterface
addEdge	trunk/g2o/examples/interactive_slam/slam_parser/example/example_slam_interface.cpp	/^bool ExampleSlamInterface::addEdge(const std::string& tag, int id, int dimension, int v1, int v2, const std::vector<double>& measurement, const std::vector<double>& information)$/;"	f	class:ExampleSlamInterface
addNode	trunk/g2o/examples/interactive_slam/slam_parser/example/example_slam_interface.cpp	/^bool ExampleSlamInterface::addNode(const std::string& tag, int id, int dimension, const std::vector<double>& values)$/;"	f	class:ExampleSlamInterface
fixNode	trunk/g2o/examples/interactive_slam/slam_parser/example/example_slam_interface.cpp	/^bool ExampleSlamInterface::fixNode(const std::vector<int>& nodes)$/;"	f	class:ExampleSlamInterface
queryState	trunk/g2o/examples/interactive_slam/slam_parser/example/example_slam_interface.cpp	/^bool ExampleSlamInterface::queryState(const std::vector<int>& nodes)$/;"	f	class:ExampleSlamInterface
solveState	trunk/g2o/examples/interactive_slam/slam_parser/example/example_slam_interface.cpp	/^bool ExampleSlamInterface::solveState()$/;"	f	class:ExampleSlamInterface
EXAMPLE_SLAM_INTERFACE_H	trunk/g2o/examples/interactive_slam/slam_parser/example/example_slam_interface.h	28;"	d
ExampleSlamInterface	trunk/g2o/examples/interactive_slam/slam_parser/example/example_slam_interface.h	/^class ExampleSlamInterface : public SlamParser::AbstractSlamInterface$/;"	c
_vertices	trunk/g2o/examples/interactive_slam/slam_parser/example/example_slam_interface.h	/^    std::map<int, std::pair<std::string, std::vector<double> > > _vertices; \/\/\/< the original value of the input (actually not needed if a real SLAM engine is running)$/;"	m	class:ExampleSlamInterface
main	trunk/g2o/examples/interactive_slam/slam_parser/example/test_slam_interface.cpp	/^int main()$/;"	f
ABSTRACT_SLAM_INTERFACE_H	trunk/g2o/examples/interactive_slam/slam_parser/interface/abstract_slam_interface.h	28;"	d
AbstractSlamInterface	trunk/g2o/examples/interactive_slam/slam_parser/interface/abstract_slam_interface.h	/^  class AbstractSlamInterface {$/;"	c	namespace:SlamParser
SlamParser	trunk/g2o/examples/interactive_slam/slam_parser/interface/abstract_slam_interface.h	/^namespace SlamParser {$/;"	n
ParserInterface	trunk/g2o/examples/interactive_slam/slam_parser/interface/parser_interface.cpp	/^  ParserInterface::ParserInterface(AbstractSlamInterface* slamInterface)$/;"	f	class:SlamParser::ParserInterface
SlamParser	trunk/g2o/examples/interactive_slam/slam_parser/interface/parser_interface.cpp	/^namespace SlamParser {$/;"	n	file:
parseCommand	trunk/g2o/examples/interactive_slam/slam_parser/interface/parser_interface.cpp	/^  bool ParserInterface::parseCommand(std::istream& input)$/;"	f	class:SlamParser::ParserInterface
~ParserInterface	trunk/g2o/examples/interactive_slam/slam_parser/interface/parser_interface.cpp	/^  ParserInterface::~ParserInterface()$/;"	f	class:SlamParser::ParserInterface
PARSER_INTERFACE_H	trunk/g2o/examples/interactive_slam/slam_parser/interface/parser_interface.h	28;"	d
ParserInterface	trunk/g2o/examples/interactive_slam/slam_parser/interface/parser_interface.h	/^  class ParserInterface$/;"	c	namespace:SlamParser
SlamParser	trunk/g2o/examples/interactive_slam/slam_parser/interface/parser_interface.h	/^namespace SlamParser {$/;"	n
_buffer	trunk/g2o/examples/interactive_slam/slam_parser/interface/parser_interface.h	/^      std::stringstream _buffer;$/;"	m	class:SlamParser::ParserInterface
_driver	trunk/g2o/examples/interactive_slam/slam_parser/interface/parser_interface.h	/^      Driver* _driver;$/;"	m	class:SlamParser::ParserInterface
_slamContextInterface	trunk/g2o/examples/interactive_slam/slam_parser/interface/parser_interface.h	/^      SlamContextInterface* _slamContextInterface;$/;"	m	class:SlamParser::ParserInterface
SlamContextInterface	trunk/g2o/examples/interactive_slam/slam_parser/interface/slam_context_interface.cpp	/^  SlamContextInterface::SlamContextInterface(AbstractSlamInterface* slam) :$/;"	f	class:SlamParser::SlamContextInterface
SlamParser	trunk/g2o/examples/interactive_slam/slam_parser/interface/slam_context_interface.cpp	/^namespace SlamParser {$/;"	n	file:
process	trunk/g2o/examples/interactive_slam/slam_parser/interface/slam_context_interface.cpp	/^  bool SlamContextInterface::process(CommandNode* commandNode)$/;"	f	class:SlamParser::SlamContextInterface
~SlamContextInterface	trunk/g2o/examples/interactive_slam/slam_parser/interface/slam_context_interface.cpp	/^  SlamContextInterface::~SlamContextInterface()$/;"	f	class:SlamParser::SlamContextInterface
SLAM_CONTEXT_INTERFACE_H	trunk/g2o/examples/interactive_slam/slam_parser/interface/slam_context_interface.h	28;"	d
SlamContextInterface	trunk/g2o/examples/interactive_slam/slam_parser/interface/slam_context_interface.h	/^  class SlamContextInterface : public SlamContext$/;"	c	namespace:SlamParser
SlamParser	trunk/g2o/examples/interactive_slam/slam_parser/interface/slam_context_interface.h	/^namespace SlamParser {$/;"	n
_slam	trunk/g2o/examples/interactive_slam/slam_parser/interface/slam_context_interface.h	/^      AbstractSlamInterface* _slam;$/;"	m	class:SlamParser::SlamContextInterface
FLEX_STD	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	53;"	d
FlexLexer	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^class FlexLexer {$/;"	c
YYLeng	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int YYLeng()  const  { return yyleng; }$/;"	f	class:FlexLexer
YYText	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  const char* YYText() const  { return yytext; }$/;"	f	class:FlexLexer
__FLEX_LEXER_H	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	49;"	d
debug	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int debug() const    { return yy_flex_debug; }$/;"	f	class:FlexLexer
lineno	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int lineno() const    { return yylineno; }$/;"	f	class:FlexLexer
set_debug	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  void set_debug( int flag )  { yy_flex_debug = flag; }$/;"	f	class:FlexLexer
yyFlexLexer	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^class yyFlexLexer : public FlexLexer {$/;"	c
yyFlexLexerOnce	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	108;"	d
yy_buffer_stack	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  struct yy_buffer_state ** yy_buffer_stack; \/**< Stack as an array. *\/$/;"	m	class:yyFlexLexer
yy_buffer_stack_max	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  size_t yy_buffer_stack_max; \/**< capacity of stack. *\/$/;"	m	class:yyFlexLexer
yy_buffer_stack_top	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  size_t yy_buffer_stack_top; \/**< index of top of stack. *\/$/;"	m	class:yyFlexLexer
yy_c_buf_p	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  char* yy_c_buf_p;$/;"	m	class:yyFlexLexer
yy_did_buffer_switch_on_eof	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int yy_did_buffer_switch_on_eof;$/;"	m	class:yyFlexLexer
yy_flex_debug	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int yy_flex_debug;  \/\/ only has effect with -d or "%option debug"$/;"	m	class:FlexLexer
yy_full_lp	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int yy_full_lp;$/;"	m	class:yyFlexLexer
yy_full_match	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  char* yy_full_match;$/;"	m	class:yyFlexLexer
yy_full_state	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int* yy_full_state;$/;"	m	class:yyFlexLexer
yy_hold_char	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  char yy_hold_char;$/;"	m	class:yyFlexLexer
yy_init	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int yy_init;    \/\/ whether we need to initialize$/;"	m	class:yyFlexLexer
yy_last_accepting_cpos	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  char* yy_last_accepting_cpos;$/;"	m	class:yyFlexLexer
yy_last_accepting_state	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  yy_state_type yy_last_accepting_state;$/;"	m	class:yyFlexLexer
yy_looking_for_trail_begin	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int yy_looking_for_trail_begin;$/;"	m	class:yyFlexLexer
yy_lp	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int yy_lp;$/;"	m	class:yyFlexLexer
yy_more_flag	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int yy_more_flag;$/;"	m	class:yyFlexLexer
yy_more_len	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int yy_more_len;$/;"	m	class:yyFlexLexer
yy_more_offset	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int yy_more_offset;$/;"	m	class:yyFlexLexer
yy_n_chars	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int yy_n_chars;$/;"	m	class:yyFlexLexer
yy_prev_more_offset	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int yy_prev_more_offset;$/;"	m	class:yyFlexLexer
yy_start	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int yy_start;    \/\/ start state number$/;"	m	class:yyFlexLexer
yy_start_stack	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int* yy_start_stack;$/;"	m	class:yyFlexLexer
yy_start_stack_depth	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int yy_start_stack_depth;$/;"	m	class:yyFlexLexer
yy_start_stack_ptr	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int yy_start_stack_ptr;$/;"	m	class:yyFlexLexer
yy_state_buf	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  yy_state_type* yy_state_buf;$/;"	m	class:yyFlexLexer
yy_state_ptr	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  yy_state_type* yy_state_ptr;$/;"	m	class:yyFlexLexer
yy_state_type	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^typedef int yy_state_type;$/;"	t
yyin	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  FLEX_STD istream* yyin;  \/\/ input source for default LexerInput$/;"	m	class:yyFlexLexer
yyleng	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int yyleng;$/;"	m	class:FlexLexer
yylex	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int yylex( FLEX_STD istream* new_in, FLEX_STD ostream* new_out = 0 )$/;"	f	class:FlexLexer
yylineno	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  int yylineno;    \/\/ only maintained if you use %option yylineno$/;"	m	class:FlexLexer
yyout	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  FLEX_STD ostream* yyout;  \/\/ output sink for default LexerOutput$/;"	m	class:yyFlexLexer
yytext	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  char* yytext;$/;"	m	class:FlexLexer
~FlexLexer	trunk/g2o/examples/interactive_slam/slam_parser/parser/FlexLexer.h	/^  virtual ~FlexLexer()  { }$/;"	f	class:FlexLexer
Parser	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::Parser (class Driver& driver_yyarg)$/;"	f	class:SlamParser::Parser
SlamParser	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^namespace SlamParser {$/;"	n	file:
YYABORT	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	135;"	d	file:
YYACCEPT	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	134;"	d	file:
YYCDEBUG	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	124;"	d	file:
YYCDEBUG	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	98;"	d	file:
YYERROR	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	136;"	d	file:
YYRECOVERING	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	137;"	d	file:
YYUSE	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	92;"	d	file:
YY_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	83;"	d	file:
YY_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	87;"	d	file:
YY_REDUCE_PRINT	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	110;"	d	file:
YY_REDUCE_PRINT	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	126;"	d	file:
YY_STACK_PRINT	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	116;"	d	file:
YY_STACK_PRINT	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	127;"	d	file:
YY_SYMBOL_PRINT	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	100;"	d	file:
YY_SYMBOL_PRINT	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	125;"	d	file:
debug_level	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::debug_level () const$/;"	f	class:SlamParser::Parser
debug_stream	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::debug_stream () const$/;"	f	class:SlamParser::Parser
error	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^void SlamParser::Parser::error(const Parser::location_type& l, const std::string& m)$/;"	f	class:SlamParser::Parser
parse	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::parse ()$/;"	f	class:SlamParser::Parser
set_debug_level	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::set_debug_level (debug_level_type l)$/;"	f	class:SlamParser::Parser
set_debug_stream	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::set_debug_stream (std::ostream& o)$/;"	f	class:SlamParser::Parser
yy_reduce_print_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yy_reduce_print_ (int yyrule)$/;"	f	class:SlamParser::Parser
yy_symbol_print_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yy_symbol_print_ (int yytype,$/;"	f	class:SlamParser::Parser
yy_symbol_value_print_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yy_symbol_value_print_ (int yytype,$/;"	f	class:SlamParser::Parser
yycheck_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yycheck_[] =$/;"	m	class:SlamParser::Parser	file:
yyclearin	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	132;"	d	file:
yydefact_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yydefact_[] =$/;"	m	class:SlamParser::Parser	file:
yydefgoto_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yydefgoto_[] =$/;"	m	class:SlamParser::Parser	file:
yydestruct_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yydestruct_ (const char* yymsg,$/;"	f	class:SlamParser::Parser
yyempty_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  const int Parser::yyempty_ = -2;$/;"	m	class:SlamParser::Parser	file:
yyeof_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  const int Parser::yyeof_ = 0;$/;"	m	class:SlamParser::Parser	file:
yyerrcode_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  const int Parser::yyerrcode_ = 256;$/;"	m	class:SlamParser::Parser	file:
yyerrok	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	131;"	d	file:
yyfinal_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  const int Parser::yyfinal_ = 2;$/;"	m	class:SlamParser::Parser	file:
yylast_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  const int Parser::yylast_ = 68;$/;"	m	class:SlamParser::Parser	file:
yylex	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	36;"	d	file:
yylex	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	71;"	d	file:
yylex	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	72;"	d	file:
yynnts_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  const int Parser::yynnts_ = 10;$/;"	m	class:SlamParser::Parser	file:
yyntokens_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  const int Parser::yyntokens_ = 16;$/;"	m	class:SlamParser::Parser	file:
yypact_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yypact_[] =$/;"	m	class:SlamParser::Parser	file:
yypact_ninf_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  const signed char Parser::yypact_ninf_ = -24;$/;"	m	class:SlamParser::Parser	file:
yypgoto_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yypgoto_[] =$/;"	m	class:SlamParser::Parser	file:
yypop_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yypop_ (unsigned int n)$/;"	f	class:SlamParser::Parser
yyprhs_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yyprhs_[] =$/;"	m	class:SlamParser::Parser	file:
yyr1_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yyr1_[] =$/;"	m	class:SlamParser::Parser	file:
yyr2_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yyr2_[] =$/;"	m	class:SlamParser::Parser	file:
yyrhs_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yyrhs_[] =$/;"	m	class:SlamParser::Parser	file:
yyrline_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yyrline_[] =$/;"	m	class:SlamParser::Parser	file:
yystack_print_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yystack_print_ ()$/;"	f	class:SlamParser::Parser
yystos_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yystos_[] =$/;"	m	class:SlamParser::Parser	file:
yysyntax_error_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yysyntax_error_ (int yystate, int tok)$/;"	f	class:SlamParser::Parser
yytable_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yytable_[] =$/;"	m	class:SlamParser::Parser	file:
yytable_ninf_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  const signed char Parser::yytable_ninf_ = -1;$/;"	m	class:SlamParser::Parser	file:
yyterror_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  const int Parser::yyterror_ = 1;$/;"	m	class:SlamParser::Parser	file:
yytname_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  const Parser::yytname_[] =$/;"	m	class:SlamParser::Parser	file:
yytnamerr_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yytnamerr_ (const char *yystr)$/;"	f	class:SlamParser::Parser
yytoken_number_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yytoken_number_[] =$/;"	m	class:SlamParser::Parser	file:
yytranslate_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::yytranslate_ (int t)$/;"	f	class:SlamParser::Parser
yyundef_token_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  const Parser::token_number_type Parser::yyundef_token_ = 2;$/;"	m	class:SlamParser::Parser	file:
yyuser_token_number_max_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  const unsigned int Parser::yyuser_token_number_max_ = 269;$/;"	m	class:SlamParser::Parser	file:
~Parser	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.cpp	/^  Parser::~Parser ()$/;"	f	class:SlamParser::Parser
ADD	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^     ADD = 262,$/;"	e	enum:SlamParser::Parser::token::yytokentype
DOUBLE	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^     DOUBLE = 260,$/;"	e	enum:SlamParser::Parser::token::yytokentype
END	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^     END = 0,$/;"	e	enum:SlamParser::Parser::token::yytokentype
EOL	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^     EOL = 258,$/;"	e	enum:SlamParser::Parser::token::yytokentype
E_SE2	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^     E_SE2 = 265,$/;"	e	enum:SlamParser::Parser::token::yytokentype
E_SE3	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^     E_SE3 = 266,$/;"	e	enum:SlamParser::Parser::token::yytokentype
FIX	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^     FIX = 267,$/;"	e	enum:SlamParser::Parser::token::yytokentype
INTEGER	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^     INTEGER = 259,$/;"	e	enum:SlamParser::Parser::token::yytokentype
PARSER_HEADER_H	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	38;"	d
Parser	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^  class Parser$/;"	c	namespace:SlamParser
QUERY_STATE	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^     QUERY_STATE = 269$/;"	e	enum:SlamParser::Parser::token::yytokentype
SOLVE_STATE	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^     SOLVE_STATE = 268,$/;"	e	enum:SlamParser::Parser::token::yytokentype
STRING	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^     STRING = 261,$/;"	e	enum:SlamParser::Parser::token::yytokentype
SlamParser	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^namespace SlamParser {$/;"	n
V_SE2	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^     V_SE2 = 263,$/;"	e	enum:SlamParser::Parser::token::yytokentype
V_SE3	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^     V_SE3 = 264,$/;"	e	enum:SlamParser::Parser::token::yytokentype
YYDEBUG	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	69;"	d
YYERROR_VERBOSE	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	74;"	d
YYERROR_VERBOSE	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	75;"	d
YYERROR_VERBOSE	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	77;"	d
YYLLOC_DEFAULT	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	90;"	d
YYTOKEN_TABLE	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	82;"	d
commandNode	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    class CommandNode*    commandNode;$/;"	m	union:SlamParser::Parser::semantic_type
debug_level_type	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    typedef int debug_level_type;$/;"	t	class:SlamParser::Parser
doubleVal	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    double       doubleVal;$/;"	m	union:SlamParser::Parser::semantic_type
driver	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    class Driver& driver;$/;"	m	class:SlamParser::Parser
intList	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    std::vector<int>*           intList;$/;"	m	union:SlamParser::Parser::semantic_type
integerVal	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    int        integerVal;$/;"	m	union:SlamParser::Parser::semantic_type
location_stack_type	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    typedef stack<location_type> location_stack_type;$/;"	t	class:SlamParser::Parser
location_type	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    typedef location location_type;$/;"	t	class:SlamParser::Parser
rhs_number_type	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    typedef signed char rhs_number_type;$/;"	t	class:SlamParser::Parser
semantic_stack_type	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    typedef stack<semantic_type> semantic_stack_type;$/;"	t	class:SlamParser::Parser
semantic_type	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    union semantic_type$/;"	u	class:SlamParser::Parser
state_stack_type	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    typedef stack<state_type>    state_stack_type;$/;"	t	class:SlamParser::Parser
state_type	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    typedef int state_type;$/;"	t	class:SlamParser::Parser
stringVal	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    std::string*    stringVal;$/;"	m	union:SlamParser::Parser::semantic_type
token	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    struct token$/;"	s	class:SlamParser::Parser
token_number_type	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    typedef unsigned char token_number_type;$/;"	t	class:SlamParser::Parser
token_type	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    typedef token::yytokentype token_type;$/;"	t	class:SlamParser::Parser
yycdebug_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    std::ostream* yycdebug_;$/;"	m	class:SlamParser::Parser
yycheck_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const signed char yycheck_[];$/;"	m	class:SlamParser::Parser
yydebug_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    int yydebug_;$/;"	m	class:SlamParser::Parser
yydefact_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const unsigned char yydefact_[];$/;"	m	class:SlamParser::Parser
yydefgoto_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const signed char yydefgoto_[];$/;"	m	class:SlamParser::Parser
yyempty_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const int yyempty_;$/;"	m	class:SlamParser::Parser
yyeof_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const int yyeof_;$/;"	m	class:SlamParser::Parser
yyerrcode_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const int yyerrcode_;$/;"	m	class:SlamParser::Parser
yyfinal_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const int yyfinal_;$/;"	m	class:SlamParser::Parser
yylast_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const int yylast_;$/;"	m	class:SlamParser::Parser
yylocation_stack_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    location_stack_type yylocation_stack_;$/;"	m	class:SlamParser::Parser
yynnts_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const int yynnts_;$/;"	m	class:SlamParser::Parser
yyntokens_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const int yyntokens_;$/;"	m	class:SlamParser::Parser
yypact_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const signed char yypact_[];$/;"	m	class:SlamParser::Parser
yypact_ninf_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const signed char yypact_ninf_;$/;"	m	class:SlamParser::Parser
yypgoto_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const signed char yypgoto_[];$/;"	m	class:SlamParser::Parser
yyprhs_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const unsigned char yyprhs_[];$/;"	m	class:SlamParser::Parser
yyr1_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const unsigned char yyr1_[];$/;"	m	class:SlamParser::Parser
yyr2_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const unsigned char yyr2_[];$/;"	m	class:SlamParser::Parser
yyrhs_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const rhs_number_type yyrhs_[];$/;"	m	class:SlamParser::Parser
yyrline_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const unsigned char yyrline_[];$/;"	m	class:SlamParser::Parser
yysemantic_stack_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    semantic_stack_type yysemantic_stack_;$/;"	m	class:SlamParser::Parser
yystate_stack_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    state_stack_type yystate_stack_;$/;"	m	class:SlamParser::Parser
yystos_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const unsigned char yystos_[];$/;"	m	class:SlamParser::Parser
yytable_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const unsigned char yytable_[];$/;"	m	class:SlamParser::Parser
yytable_ninf_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const signed char yytable_ninf_;$/;"	m	class:SlamParser::Parser
yyterror_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const int yyterror_;$/;"	m	class:SlamParser::Parser
yytname_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const char* const yytname_[];$/;"	m	class:SlamParser::Parser
yytoken_number_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const unsigned short int yytoken_number_[];$/;"	m	class:SlamParser::Parser
yytokentype	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^   enum yytokentype {$/;"	g	struct:SlamParser::Parser::token
yyundef_token_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const token_number_type yyundef_token_;$/;"	m	class:SlamParser::Parser
yyuser_token_number_max_	trunk/g2o/examples/interactive_slam/slam_parser/parser/bison_parser.h	/^    static const unsigned int yyuser_token_number_max_;$/;"	m	class:SlamParser::Parser
AddEdge	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      AddEdge(const std::string& tag, int id, int dimension, int id1, int id2, const std::vector<double>& values, const std::vector<double> information) :$/;"	f	class:SlamParser::AddEdge
AddEdge	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^  class AddEdge : public CommandNode$/;"	c	namespace:SlamParser
AddNode	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      AddNode(const std::string& tag, int id, int dimension, const std::vector<double>& values = std::vector<double>()) :$/;"	f	class:SlamParser::AddNode
AddNode	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^  class AddNode : public CommandNode$/;"	c	namespace:SlamParser
COMMANDS_H	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	28;"	d
CT_ADD_EDGE	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^    CT_ADD_EDGE,$/;"	e	enum:SlamParser::CommandType
CT_ADD_NODE	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^    CT_ADD_NODE,$/;"	e	enum:SlamParser::CommandType
CT_FIX	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^    CT_FIX,$/;"	e	enum:SlamParser::CommandType
CT_QUERY_STATE	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^    CT_QUERY_STATE,$/;"	e	enum:SlamParser::CommandType
CT_SOLVE_STATE	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^    CT_SOLVE_STATE,$/;"	e	enum:SlamParser::CommandType
CommandNode	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      CommandNode(CommandType commandType, const std::string& tag) : _commandType(commandType), _tag(tag) {}$/;"	f	class:SlamParser::CommandNode
CommandNode	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^  class CommandNode$/;"	c	namespace:SlamParser
CommandType	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^  enum CommandType$/;"	g	namespace:SlamParser
FixNode	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      explicit FixNode(const std::string& tag, const std::vector<int>& ids) :$/;"	f	class:SlamParser::FixNode
FixNode	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^  class FixNode : public CommandNode$/;"	c	namespace:SlamParser
QueryState	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      explicit QueryState(const std::string& tag, const std::vector<int>& ids = std::vector<int>()) :$/;"	f	class:SlamParser::QueryState
QueryState	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^  class QueryState : public CommandNode$/;"	c	namespace:SlamParser
SlamParser	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^namespace SlamParser {$/;"	n
SolveSate	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      SolveSate(const std::string& tag) :$/;"	f	class:SlamParser::SolveSate
SolveSate	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^  class SolveSate : public CommandNode$/;"	c	namespace:SlamParser
_commandType	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      CommandType _commandType;$/;"	m	class:SlamParser::CommandNode
_dimension	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      int _dimension;$/;"	m	class:SlamParser::AddEdge
_dimension	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      int _dimension;$/;"	m	class:SlamParser::AddNode
_id	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      int _id;$/;"	m	class:SlamParser::AddEdge
_id	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      int _id;$/;"	m	class:SlamParser::AddNode
_id1	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      int _id1;$/;"	m	class:SlamParser::AddEdge
_id2	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      int _id2;$/;"	m	class:SlamParser::AddEdge
_ids	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      std::vector<int> _ids;$/;"	m	class:SlamParser::FixNode
_ids	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      std::vector<int> _ids;$/;"	m	class:SlamParser::QueryState
_information	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      std::vector<double> _information;$/;"	m	class:SlamParser::AddEdge
_tag	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      std::string _tag;$/;"	m	class:SlamParser::CommandNode
_values	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      std::vector<double> _values;$/;"	m	class:SlamParser::AddEdge
_values	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      std::vector<double> _values;$/;"	m	class:SlamParser::AddNode
commandType	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      CommandType commandType() const { return _commandType;}$/;"	f	class:SlamParser::CommandNode
dimension	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      int dimension() const {return _dimension;}$/;"	f	class:SlamParser::AddEdge
dimension	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      int dimension() const {return _dimension;}$/;"	f	class:SlamParser::AddNode
id	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      int id() const {return _id;}$/;"	f	class:SlamParser::AddEdge
id	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      int id() const {return _id;}$/;"	f	class:SlamParser::AddNode
id1	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      int id1() const {return _id1;}$/;"	f	class:SlamParser::AddEdge
id2	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      int id2() const {return _id2;}$/;"	f	class:SlamParser::AddEdge
ids	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      const std::vector<int>& ids() { return _ids;}$/;"	f	class:SlamParser::FixNode
ids	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      const std::vector<int>& ids() { return _ids;}$/;"	f	class:SlamParser::QueryState
information	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      const std::vector<double>& information() { return _information;}$/;"	f	class:SlamParser::AddEdge
tag	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      const std::string& tag() const { return _tag;}$/;"	f	class:SlamParser::CommandNode
values	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      const std::vector<double>& values() { return _values;}$/;"	f	class:SlamParser::AddEdge
values	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      const std::vector<double>& values() { return _values;}$/;"	f	class:SlamParser::AddNode
~CommandNode	trunk/g2o/examples/interactive_slam/slam_parser/parser/commands.h	/^      virtual ~CommandNode() {}$/;"	f	class:SlamParser::CommandNode
Driver	trunk/g2o/examples/interactive_slam/slam_parser/parser/driver.cpp	/^  Driver::Driver(class SlamContext& slamContext_) :$/;"	f	class:SlamParser::Driver
SlamParser	trunk/g2o/examples/interactive_slam/slam_parser/parser/driver.cpp	/^namespace SlamParser {$/;"	n	file:
error	trunk/g2o/examples/interactive_slam/slam_parser/parser/driver.cpp	/^  void Driver::error(const class location& l,$/;"	f	class:SlamParser::Driver
error	trunk/g2o/examples/interactive_slam/slam_parser/parser/driver.cpp	/^  void Driver::error(const std::string& m)$/;"	f	class:SlamParser::Driver
parse_file	trunk/g2o/examples/interactive_slam/slam_parser/parser/driver.cpp	/^  bool Driver::parse_file(const std::string &filename)$/;"	f	class:SlamParser::Driver
parse_stream	trunk/g2o/examples/interactive_slam/slam_parser/parser/driver.cpp	/^  bool Driver::parse_stream(std::istream& in, const std::string& sname)$/;"	f	class:SlamParser::Driver
parse_string	trunk/g2o/examples/interactive_slam/slam_parser/parser/driver.cpp	/^  bool Driver::parse_string(const std::string &input, const std::string& sname)$/;"	f	class:SlamParser::Driver
Driver	trunk/g2o/examples/interactive_slam/slam_parser/parser/driver.h	/^class Driver$/;"	c	namespace:SlamParser
SLAM_DRIVER_H	trunk/g2o/examples/interactive_slam/slam_parser/parser/driver.h	28;"	d
SlamParser	trunk/g2o/examples/interactive_slam/slam_parser/parser/driver.h	/^namespace SlamParser {$/;"	n
lexer	trunk/g2o/examples/interactive_slam/slam_parser/parser/driver.h	/^    class Scanner* lexer;$/;"	m	class:SlamParser::Driver
slamContext	trunk/g2o/examples/interactive_slam/slam_parser/parser/driver.h	/^    class SlamContext& slamContext;$/;"	m	class:SlamParser::Driver
streamname	trunk/g2o/examples/interactive_slam/slam_parser/parser/driver.h	/^    std::string streamname;$/;"	m	class:SlamParser::Driver
trace_parsing	trunk/g2o/examples/interactive_slam/slam_parser/parser/driver.h	/^    bool trace_parsing;$/;"	m	class:SlamParser::Driver
trace_scanning	trunk/g2o/examples/interactive_slam/slam_parser/parser/driver.h	/^    bool trace_scanning;$/;"	m	class:SlamParser::Driver
BEGIN	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	138;"	d	file:
ECHO	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	555;"	d	file:
EOB_ACT_CONTINUE_SCAN	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	179;"	d	file:
EOB_ACT_END_OF_FILE	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	180;"	d	file:
EOB_ACT_LAST_MATCH	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	181;"	d	file:
FLEXINT_H	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	34;"	d	file:
FLEX_BETA	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	14;"	d	file:
FLEX_SCANNER	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	9;"	d	file:
INITIAL	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	517;"	d	file:
INT16_MAX	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	76;"	d	file:
INT16_MIN	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	67;"	d	file:
INT32_MAX	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	79;"	d	file:
INT32_MIN	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	70;"	d	file:
INT8_MAX	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	73;"	d	file:
INT8_MIN	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	64;"	d	file:
LexerError	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^void yyFlexLexer::LexerError( yyconst char msg[] )$/;"	f	class:yyFlexLexer
LexerInput	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^int yyFlexLexer::LexerInput( char* buf, int \/* max_size *\/ )$/;"	f	class:yyFlexLexer
LexerOutput	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^void yyFlexLexer::LexerOutput( const char* buf, int size )$/;"	f	class:yyFlexLexer
REJECT	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	478;"	d	file:
Scanner	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^Scanner::Scanner(std::istream* in,$/;"	f	class:SlamParser::Scanner
SlamParser	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^namespace SlamParser {$/;"	n	file:
Slamalloc	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^void *Slamalloc (yy_size_t  size )$/;"	f
Slamfree	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^void Slamfree (void * ptr )$/;"	f
Slamrealloc	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^void *Slamrealloc  (void * ptr, yy_size_t  size )$/;"	f
UINT16_MAX	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	85;"	d	file:
UINT32_MAX	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	88;"	d	file:
UINT8_MAX	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	82;"	d	file:
YYSTATE	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	145;"	d	file:
YYTABLES_NAME	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	1729;"	d	file:
YY_AT_BOL	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	313;"	d	file:
YY_BREAK	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	606;"	d	file:
YY_BUFFER_EOF_PENDING	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	267;"	d	file:
YY_BUFFER_NEW	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	255;"	d	file:
YY_BUFFER_NORMAL	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	256;"	d	file:
YY_BUFFER_STATE	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	file:
YY_BUF_SIZE	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	162;"	d	file:
YY_BUF_SIZE	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	164;"	d	file:
YY_CHAR	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CURRENT_BUFFER	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	278;"	d	file:
YY_CURRENT_BUFFER_LVALUE	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	285;"	d	file:
YY_DECL	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	594;"	d	file:
YY_DECL_IS_OURS	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	593;"	d	file:
YY_DO_BEFORE_ACTION	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	326;"	d	file:
YY_END_OF_BUFFER	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	334;"	d	file:
YY_END_OF_BUFFER_CHAR	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	153;"	d	file:
YY_EXIT_FAILURE	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	1655;"	d	file:
YY_EXTRA_TYPE	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	528;"	d	file:
YY_FATAL_ERROR	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	584;"	d	file:
YY_FLEX_MAJOR_VERSION	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	10;"	d	file:
YY_FLEX_MINOR_VERSION	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	11;"	d	file:
YY_FLEX_SUBMINOR_VERSION	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	12;"	d	file:
YY_INPUT	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	562;"	d	file:
YY_INT_ALIGNED	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	5;"	d	file:
YY_LESS_LINENO	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	183;"	d	file:
YY_MORE_ADJ	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	480;"	d	file:
YY_NEW_FILE	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	151;"	d	file:
YY_NO_UNISTD_H	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	500;"	d	file:
YY_NULL	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	125;"	d	file:
YY_NUM_RULES	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	333;"	d	file:
YY_READ_BUF_SIZE	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	547;"	d	file:
YY_READ_BUF_SIZE	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	549;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	481;"	d	file:
YY_RULE_SETUP	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	609;"	d	file:
YY_SC_TO_UI	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	132;"	d	file:
YY_START	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	144;"	d	file:
YY_START_STACK_INCR	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	579;"	d	file:
YY_STATE_BUF_SIZE	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	170;"	d	file:
YY_STATE_EOF	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	148;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	207;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	173;"	d	file:
YY_TYPEDEF_YY_SIZE_T	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	202;"	d	file:
YY_USER_ACTION	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	514;"	d	file:
YY_USER_ACTION	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	601;"	d	file:
YY_USE_CONST	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	106;"	d	file:
YY_USE_CONST	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	113;"	d	file:
__STDC_LIMIT_MACROS	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	44;"	d	file:
flex_int16_t	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int32_t	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int8_t	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_uint16_t	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint32_t	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint8_t	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
set_debug	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^void Scanner::set_debug(bool b)$/;"	f	class:SlamParser::Scanner
switch_streams	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )$/;"	f	class:yyFlexLexer
token	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^typedef SlamParser::Parser::token token;$/;"	t	file:
token_type	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^typedef SlamParser::Parser::token_type token_type;$/;"	t	file:
unput	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	199;"	d	file:
yyFlexLexer	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )$/;"	f	class:yyFlexLexer
yyFlexLexer	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	23;"	d	file:
yy_accept	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^static yyconst flex_int16_t yy_accept[77] =$/;"	v	file:
yy_at_bol	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^  int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_base	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^static yyconst flex_int16_t yy_base[78] =$/;"	v	file:
yy_bs_column	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^  char *yy_buf_pos;    \/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^  yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_state	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^  int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_ch_buf	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^  char *yy_ch_buf;    \/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_chk	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^static yyconst flex_int16_t yy_chk[220] =$/;"	v	file:
yy_create_buffer	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )$/;"	f	class:yyFlexLexer
yy_def	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^static yyconst flex_int16_t yy_def[78] =$/;"	v	file:
yy_delete_buffer	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )$/;"	f	class:yyFlexLexer
yy_ec	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_fill_buffer	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^  int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_flex_strlen	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^static int yy_flex_strlen (yyconst char * s )$/;"	f	file:
yy_flex_strncpy	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )$/;"	f	file:
yy_flush_buffer	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )$/;"	f	class:yyFlexLexer
yy_get_next_buffer	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^int yyFlexLexer::yy_get_next_buffer()$/;"	f	class:yyFlexLexer
yy_get_previous_state	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^    yy_state_type yyFlexLexer::yy_get_previous_state()$/;"	f	class:yyFlexLexer
yy_init_buffer	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )$/;"	f	class:yyFlexLexer
yy_input_file	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^  std::istream* yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^  int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^  int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_load_buffer_state	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^    void yyFlexLexer::yy_load_buffer_state()$/;"	f	class:yyFlexLexer
yy_meta	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^static yyconst flex_int32_t yy_meta[47] =$/;"	v	file:
yy_n_chars	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^  int yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_new_buffer	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	291;"	d	file:
yy_nxt	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^  flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^static yyconst flex_int16_t yy_nxt[220] =$/;"	v	file:
yy_pop_state	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^    void yyFlexLexer::yy_pop_state()$/;"	f	class:yyFlexLexer
yy_push_state	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^    void yyFlexLexer::yy_push_state( int new_state )$/;"	f	class:yyFlexLexer
yy_set_bol	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	303;"	d	file:
yy_set_interactive	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	293;"	d	file:
yy_size_t	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^typedef size_t yy_size_t;$/;"	t	file:
yy_switch_to_buffer	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )$/;"	f	class:yyFlexLexer
yy_top_state	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^    int yyFlexLexer::yy_top_state()$/;"	f	class:yyFlexLexer
yy_trans_info	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )$/;"	f	class:yyFlexLexer
yy_verify	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^  flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yyconst	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	119;"	d	file:
yyconst	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	121;"	d	file:
yyensure_buffer_stack	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^void yyFlexLexer::yyensure_buffer_stack(void)$/;"	f	class:yyFlexLexer
yyinput	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^    int yyFlexLexer::yyinput()$/;"	f	class:yyFlexLexer
yyless	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	1666;"	d	file:
yyless	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	1667;"	d	file:
yyless	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	186;"	d	file:
yylex	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^int SlamFlexLexer::yylex()$/;"	f	class:SlamFlexLexer
yylex	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	1755;"	d	file:
yymore	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	479;"	d	file:
yypop_buffer_state	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^void yyFlexLexer::yypop_buffer_state (void)$/;"	f	class:yyFlexLexer
yypush_buffer_state	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)$/;"	f	class:yyFlexLexer
yyrestart	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^    void yyFlexLexer::yyrestart( std::istream* input_file )$/;"	f	class:yyFlexLexer
yyterminate	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	496;"	d	file:
yyterminate	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	574;"	d	file:
yytext_ptr	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	319;"	d	file:
yyunput	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^    void yyFlexLexer::yyunput( int c, register char* yy_bp)$/;"	f	class:yyFlexLexer
yywrap	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^int SlamFlexLexer::yywrap()$/;"	f	class:SlamFlexLexer
~Scanner	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^Scanner::~Scanner()$/;"	f	class:SlamParser::Scanner
~yyFlexLexer	trunk/g2o/examples/interactive_slam/slam_parser/parser/flex_scanner.cpp	/^yyFlexLexer::~yyFlexLexer()$/;"	f	class:yyFlexLexer
BISON_LOCATION_HH	trunk/g2o/examples/interactive_slam/slam_parser/parser/location.hh	40;"	d
SlamParser	trunk/g2o/examples/interactive_slam/slam_parser/parser/location.hh	/^namespace SlamParser {$/;"	n
begin	trunk/g2o/examples/interactive_slam/slam_parser/parser/location.hh	/^    position begin;$/;"	m	class:SlamParser::location
columns	trunk/g2o/examples/interactive_slam/slam_parser/parser/location.hh	/^    inline void columns (unsigned int count = 1)$/;"	f	class:SlamParser::location
end	trunk/g2o/examples/interactive_slam/slam_parser/parser/location.hh	/^    position end;$/;"	m	class:SlamParser::location
initialize	trunk/g2o/examples/interactive_slam/slam_parser/parser/location.hh	/^    inline void initialize (std::string* fn)$/;"	f	class:SlamParser::location
lines	trunk/g2o/examples/interactive_slam/slam_parser/parser/location.hh	/^    inline void lines (unsigned int count = 1)$/;"	f	class:SlamParser::location
location	trunk/g2o/examples/interactive_slam/slam_parser/parser/location.hh	/^    location ()$/;"	f	class:SlamParser::location
location	trunk/g2o/examples/interactive_slam/slam_parser/parser/location.hh	/^  class location$/;"	c	namespace:SlamParser
operator !=	trunk/g2o/examples/interactive_slam/slam_parser/parser/location.hh	/^  operator!= (const location& loc1, const location& loc2)$/;"	f	namespace:SlamParser
operator +	trunk/g2o/examples/interactive_slam/slam_parser/parser/location.hh	/^  inline const location operator+ (const location& begin, const location& end)$/;"	f	namespace:SlamParser
operator +	trunk/g2o/examples/interactive_slam/slam_parser/parser/location.hh	/^  inline const location operator+ (const location& begin, unsigned int width)$/;"	f	namespace:SlamParser
operator +=	trunk/g2o/examples/interactive_slam/slam_parser/parser/location.hh	/^  inline location& operator+= (location& res, unsigned int width)$/;"	f	namespace:SlamParser
operator <<	trunk/g2o/examples/interactive_slam/slam_parser/parser/location.hh	/^  inline std::ostream& operator<< (std::ostream& ostr, const location& loc)$/;"	f	namespace:SlamParser
operator ==	trunk/g2o/examples/interactive_slam/slam_parser/parser/location.hh	/^  operator== (const location& loc1, const location& loc2)$/;"	f	namespace:SlamParser
step	trunk/g2o/examples/interactive_slam/slam_parser/parser/location.hh	/^    inline void step ()$/;"	f	class:SlamParser::location
BISON_POSITION_HH	trunk/g2o/examples/interactive_slam/slam_parser/parser/position.hh	40;"	d
SlamParser	trunk/g2o/examples/interactive_slam/slam_parser/parser/position.hh	/^namespace SlamParser {$/;"	n
column	trunk/g2o/examples/interactive_slam/slam_parser/parser/position.hh	/^    unsigned int column;$/;"	m	class:SlamParser::position
columns	trunk/g2o/examples/interactive_slam/slam_parser/parser/position.hh	/^    inline void columns (int count = 1)$/;"	f	class:SlamParser::position
filename	trunk/g2o/examples/interactive_slam/slam_parser/parser/position.hh	/^    std::string* filename;$/;"	m	class:SlamParser::position
initialize	trunk/g2o/examples/interactive_slam/slam_parser/parser/position.hh	/^    inline void initialize (std::string* fn)$/;"	f	class:SlamParser::position
line	trunk/g2o/examples/interactive_slam/slam_parser/parser/position.hh	/^    unsigned int line;$/;"	m	class:SlamParser::position
lines	trunk/g2o/examples/interactive_slam/slam_parser/parser/position.hh	/^    inline void lines (int count = 1)$/;"	f	class:SlamParser::position
operator !=	trunk/g2o/examples/interactive_slam/slam_parser/parser/position.hh	/^  operator!= (const position& pos1, const position& pos2)$/;"	f	namespace:SlamParser
operator +	trunk/g2o/examples/interactive_slam/slam_parser/parser/position.hh	/^  operator+ (const position& begin, const int width)$/;"	f	namespace:SlamParser
operator +=	trunk/g2o/examples/interactive_slam/slam_parser/parser/position.hh	/^  operator+= (position& res, const int width)$/;"	f	namespace:SlamParser
operator -	trunk/g2o/examples/interactive_slam/slam_parser/parser/position.hh	/^  operator- (const position& begin, const int width)$/;"	f	namespace:SlamParser
operator -=	trunk/g2o/examples/interactive_slam/slam_parser/parser/position.hh	/^  operator-= (position& res, const int width)$/;"	f	namespace:SlamParser
operator <<	trunk/g2o/examples/interactive_slam/slam_parser/parser/position.hh	/^  operator<< (std::ostream& ostr, const position& pos)$/;"	f	namespace:SlamParser
operator ==	trunk/g2o/examples/interactive_slam/slam_parser/parser/position.hh	/^  operator== (const position& pos1, const position& pos2)$/;"	f	namespace:SlamParser
position	trunk/g2o/examples/interactive_slam/slam_parser/parser/position.hh	/^    position ()$/;"	f	class:SlamParser::position
position	trunk/g2o/examples/interactive_slam/slam_parser/parser/position.hh	/^  class position$/;"	c	namespace:SlamParser
SCANNER_H	trunk/g2o/examples/interactive_slam/slam_parser/parser/scanner.h	2;"	d
Scanner	trunk/g2o/examples/interactive_slam/slam_parser/parser/scanner.h	/^  class Scanner : public SlamFlexLexer$/;"	c	namespace:SlamParser
SlamParser	trunk/g2o/examples/interactive_slam/slam_parser/parser/scanner.h	/^namespace SlamParser {$/;"	n
YY_DECL	trunk/g2o/examples/interactive_slam/slam_parser/parser/scanner.h	6;"	d
yyFlexLexer	trunk/g2o/examples/interactive_slam/slam_parser/parser/scanner.h	15;"	d
yyFlexLexer	trunk/g2o/examples/interactive_slam/slam_parser/parser/scanner.h	17;"	d
SlamContext	trunk/g2o/examples/interactive_slam/slam_parser/parser/slam_context.cpp	/^SlamContext::SlamContext()$/;"	f	class:SlamParser::SlamContext
SlamParser	trunk/g2o/examples/interactive_slam/slam_parser/parser/slam_context.cpp	/^namespace SlamParser {$/;"	n	file:
process	trunk/g2o/examples/interactive_slam/slam_parser/parser/slam_context.cpp	/^bool SlamContext::process(CommandNode* commandNode)$/;"	f	class:SlamParser::SlamContext
~SlamContext	trunk/g2o/examples/interactive_slam/slam_parser/parser/slam_context.cpp	/^SlamContext::~SlamContext()$/;"	f	class:SlamParser::SlamContext
SLAM_CONTEXT_H	trunk/g2o/examples/interactive_slam/slam_parser/parser/slam_context.h	28;"	d
SlamContext	trunk/g2o/examples/interactive_slam/slam_parser/parser/slam_context.h	/^class SlamContext$/;"	c	namespace:SlamParser
SlamParser	trunk/g2o/examples/interactive_slam/slam_parser/parser/slam_context.h	/^namespace SlamParser {$/;"	n
BISON_STACK_HH	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	36;"	d
SlamParser	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	/^namespace SlamParser {$/;"	n
begin	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	/^    inline const_iterator begin () const { return seq_.rbegin (); }$/;"	f	class:SlamParser::stack
const_iterator	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	/^    typedef typename S::const_reverse_iterator const_iterator;$/;"	t	class:SlamParser::stack
end	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	/^    inline const_iterator end () const { return seq_.rend (); }$/;"	f	class:SlamParser::stack
height	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	/^    height () const$/;"	f	class:SlamParser::stack
iterator	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	/^    typedef typename S::reverse_iterator iterator;$/;"	t	class:SlamParser::stack
operator []	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	/^    operator [] (unsigned int i) const$/;"	f	class:SlamParser::slice
operator []	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	/^    operator [] (unsigned int i) const$/;"	f	class:SlamParser::stack
operator []	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	/^    operator [] (unsigned int i)$/;"	f	class:SlamParser::stack
pop	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	/^    pop (unsigned int n = 1)$/;"	f	class:SlamParser::stack
push	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	/^    push (const T& t)$/;"	f	class:SlamParser::stack
range_	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	/^    unsigned int range_;$/;"	m	class:SlamParser::slice
seq_	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	/^    S seq_;$/;"	m	class:SlamParser::stack
slice	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	/^    slice (const S& stack,$/;"	f	class:SlamParser::slice
slice	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	/^  class slice$/;"	c	namespace:SlamParser
stack	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	/^    stack () : seq_ ()$/;"	f	class:SlamParser::stack
stack	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	/^    stack (unsigned int n) : seq_ (n)$/;"	f	class:SlamParser::stack
stack	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	/^  class stack$/;"	c	namespace:SlamParser
stack_	trunk/g2o/examples/interactive_slam/slam_parser/parser/stack.hh	/^    const S& stack_;$/;"	m	class:SlamParser::slice
main	trunk/g2o/examples/interactive_slam/slam_parser/parser/test_slam_parser.cpp	/^int main ()$/;"	f
Sample	trunk/g2o/examples/sba/sba_demo.cpp	/^class Sample$/;"	c	file:
gauss_rand	trunk/g2o/examples/sba/sba_demo.cpp	/^static double gauss_rand(double mean, double sigma)$/;"	f	file:
gaussian	trunk/g2o/examples/sba/sba_demo.cpp	/^double Sample::gaussian(double sigma)$/;"	f	class:Sample
main	trunk/g2o/examples/sba/sba_demo.cpp	/^int main(int argc, const char* argv[])$/;"	f
uniform	trunk/g2o/examples/sba/sba_demo.cpp	/^double Sample::uniform()$/;"	f	class:Sample
uniform	trunk/g2o/examples/sba/sba_demo.cpp	/^int Sample::uniform(int from, int to)$/;"	f	class:Sample
uniform_rand	trunk/g2o/examples/sba/sba_demo.cpp	/^static double uniform_rand(double lowerBndr, double upperBndr)$/;"	f	file:
main	trunk/g2o/examples/simple_optimize/simple_optimize.cpp	/^int main(int argc, char** argv)$/;"	f
slam2d	trunk/g2o/examples/simple_optimize/simple_optimize.cpp	/^G2O_USE_TYPE_GROUP(slam2d);$/;"	v
slam3d	trunk/g2o/examples/simple_optimize/simple_optimize.cpp	/^G2O_USE_TYPE_GROUP(slam3d);$/;"	v
GLUWrapper	trunk/g2o/examples/slam2d/draw_helpers.cpp	/^        GLUWrapper()$/;"	f	class:g2o::<anonymous>::GLUWrapper
GLUWrapper	trunk/g2o/examples/slam2d/draw_helpers.cpp	/^    class GLUWrapper$/;"	c	namespace:g2o::<anonymous>	file:
_quadratic	trunk/g2o/examples/slam2d/draw_helpers.cpp	/^        GLUquadricObj* _quadratic;;$/;"	m	class:g2o::<anonymous>::GLUWrapper	file:
drawCircle	trunk/g2o/examples/slam2d/draw_helpers.cpp	/^  void drawCircle(GLfloat radius, int segments)$/;"	f	namespace:g2o
drawDisk	trunk/g2o/examples/slam2d/draw_helpers.cpp	/^  void drawDisk(GLfloat radius)$/;"	f	namespace:g2o
g2o	trunk/g2o/examples/slam2d/draw_helpers.cpp	/^namespace g2o {$/;"	n	file:
getQuadradic	trunk/g2o/examples/slam2d/draw_helpers.cpp	/^        static GLUquadricObj* getQuadradic()$/;"	f	class:g2o::<anonymous>::GLUWrapper
~GLUWrapper	trunk/g2o/examples/slam2d/draw_helpers.cpp	/^        ~GLUWrapper()$/;"	f	class:g2o::<anonymous>::GLUWrapper
G2O_DRAW_HELPERS_H	trunk/g2o/examples/slam2d/draw_helpers.h	28;"	d
g2o	trunk/g2o/examples/slam2d/draw_helpers.h	/^namespace g2o {$/;"	n
MainWindow	trunk/g2o/examples/slam2d/main_window.cpp	/^MainWindow::MainWindow(QWidget * parent, Qt::WindowFlags flags) :$/;"	f	class:MainWindow
fixGraph	trunk/g2o/examples/slam2d/main_window.cpp	/^void MainWindow::fixGraph()$/;"	f	class:MainWindow
on_actionLoad_triggered	trunk/g2o/examples/slam2d/main_window.cpp	/^void MainWindow::on_actionLoad_triggered(bool)$/;"	f	class:MainWindow
on_actionQuit_triggered	trunk/g2o/examples/slam2d/main_window.cpp	/^void MainWindow::on_actionQuit_triggered(bool)$/;"	f	class:MainWindow
on_actionSave_triggered	trunk/g2o/examples/slam2d/main_window.cpp	/^void MainWindow::on_actionSave_triggered(bool)$/;"	f	class:MainWindow
on_btnInitialGuess_clicked	trunk/g2o/examples/slam2d/main_window.cpp	/^void MainWindow::on_btnInitialGuess_clicked()$/;"	f	class:MainWindow
on_btnOptimize_clicked	trunk/g2o/examples/slam2d/main_window.cpp	/^void MainWindow::on_btnOptimize_clicked()$/;"	f	class:MainWindow
~MainWindow	trunk/g2o/examples/slam2d/main_window.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow
G2O_MAIN_WINDOW_H	trunk/g2o/examples/slam2d/main_window.h	20;"	d
MainWindow	trunk/g2o/examples/slam2d/main_window.h	/^class MainWindow : public QMainWindow, public Ui::BaseMainWindow$/;"	c
g2o	trunk/g2o/examples/slam2d/main_window.h	/^namespace g2o {$/;"	n
solverGaussNewton	trunk/g2o/examples/slam2d/main_window.h	/^    g2o::OptimizationAlgorithm* solverGaussNewton;$/;"	m	class:MainWindow
solverLevenberg	trunk/g2o/examples/slam2d/main_window.h	/^    g2o::OptimizationAlgorithm* solverLevenberg;$/;"	m	class:MainWindow
main	trunk/g2o/examples/slam2d/slam2d_g2o.cpp	/^int main(int argc, char** argv)$/;"	f
slam2d	trunk/g2o/examples/slam2d/slam2d_g2o.cpp	/^G2O_USE_TYPE_GROUP(slam2d);$/;"	v
Slam2DViewer	trunk/g2o/examples/slam2d/slam2d_viewer.cpp	/^Slam2DViewer::Slam2DViewer(QWidget* parent, const QGLWidget* shareWidget, Qt::WFlags flags) :$/;"	f	class:g2o::Slam2DViewer
StandardCamera	trunk/g2o/examples/slam2d/slam2d_viewer.cpp	/^      StandardCamera() : _standard(true) {};$/;"	f	class:g2o::<anonymous>::StandardCamera
StandardCamera	trunk/g2o/examples/slam2d/slam2d_viewer.cpp	/^  class StandardCamera : public qglviewer::Camera$/;"	c	namespace:g2o::<anonymous>	file:
_standard	trunk/g2o/examples/slam2d/slam2d_viewer.cpp	/^      bool _standard;$/;"	m	class:g2o::<anonymous>::StandardCamera	file:
draw	trunk/g2o/examples/slam2d/slam2d_viewer.cpp	/^void Slam2DViewer::draw()$/;"	f	class:g2o::Slam2DViewer
drawCov	trunk/g2o/examples/slam2d/slam2d_viewer.cpp	/^  void drawCov(const Eigen::Vector2d& p, const Eigen::MatrixBase<Derived>& cov)$/;"	f	namespace:g2o::<anonymous>
drawSE2	trunk/g2o/examples/slam2d/slam2d_viewer.cpp	/^  void drawSE2(const VertexSE2* v)$/;"	f	namespace:g2o::<anonymous>
g2o	trunk/g2o/examples/slam2d/slam2d_viewer.cpp	/^namespace g2o {$/;"	n	file:
init	trunk/g2o/examples/slam2d/slam2d_viewer.cpp	/^void Slam2DViewer::init()$/;"	f	class:g2o::Slam2DViewer
standard	trunk/g2o/examples/slam2d/slam2d_viewer.cpp	/^      bool& standard() {return _standard;}$/;"	f	class:g2o::<anonymous>::StandardCamera
standard	trunk/g2o/examples/slam2d/slam2d_viewer.cpp	/^      const bool& standard() const {return _standard;}$/;"	f	class:g2o::<anonymous>::StandardCamera
zFar	trunk/g2o/examples/slam2d/slam2d_viewer.cpp	/^      float zFar() const$/;"	f	class:g2o::<anonymous>::StandardCamera
zNear	trunk/g2o/examples/slam2d/slam2d_viewer.cpp	/^      float zNear() const {$/;"	f	class:g2o::<anonymous>::StandardCamera
~Slam2DViewer	trunk/g2o/examples/slam2d/slam2d_viewer.cpp	/^Slam2DViewer::~Slam2DViewer()$/;"	f	class:g2o::Slam2DViewer
G2O_QGL_GRAPH_VIEWER_H	trunk/g2o/examples/slam2d/slam2d_viewer.h	20;"	d
Slam2DViewer	trunk/g2o/examples/slam2d/slam2d_viewer.h	/^  class Slam2DViewer : public QGLViewer$/;"	c	namespace:g2o
drawCovariance	trunk/g2o/examples/slam2d/slam2d_viewer.h	/^      bool drawCovariance;$/;"	m	class:g2o::Slam2DViewer
g2o	trunk/g2o/examples/slam2d/slam2d_viewer.h	/^namespace g2o {$/;"	n
graph	trunk/g2o/examples/slam2d/slam2d_viewer.h	/^      SparseOptimizer* graph;$/;"	m	class:g2o::Slam2DViewer
main	trunk/g2o/examples/sphere/create_sphere.cpp	/^int main (int argc, char** argv)$/;"	f
main	trunk/g2o/examples/target/constant_velocity_target.cpp	/^int main()$/;"	f
G2O_CONTINUOUS_TO_DISCRETE_H_	trunk/g2o/examples/target/continuous_to_discrete.h	2;"	d
continuousToDiscrete	trunk/g2o/examples/target/continuous_to_discrete.h	/^void continuousToDiscrete(MatrixType& Fd, MatrixType& Qd,$/;"	f
main	trunk/g2o/examples/target/static_target.cpp	/^int main()$/;"	f
G2O_TARGET_TYPES_3D_HPP_	trunk/g2o/examples/target/targetTypes3D.hpp	2;"	d
GPSObservationPosition3DEdge	trunk/g2o/examples/target/targetTypes3D.hpp	/^  GPSObservationPosition3DEdge()$/;"	f	class:GPSObservationPosition3DEdge
GPSObservationPosition3DEdge	trunk/g2o/examples/target/targetTypes3D.hpp	/^class GPSObservationPosition3DEdge : public g2o::BaseUnaryEdge<3, Eigen::Vector3d, VertexPosition3D>$/;"	c
VertexPosition3D	trunk/g2o/examples/target/targetTypes3D.hpp	/^  VertexPosition3D()$/;"	f	class:VertexPosition3D
VertexPosition3D	trunk/g2o/examples/target/targetTypes3D.hpp	/^class VertexPosition3D : public g2o::BaseVertex<3, Eigen::Vector3d>$/;"	c
VertexVelocity3D	trunk/g2o/examples/target/targetTypes3D.hpp	/^  VertexVelocity3D()$/;"	f	class:VertexVelocity3D
VertexVelocity3D	trunk/g2o/examples/target/targetTypes3D.hpp	/^class VertexVelocity3D : public g2o::BaseVertex<3, Eigen::Vector3d>$/;"	c
computeError	trunk/g2o/examples/target/targetTypes3D.hpp	/^  void computeError()$/;"	f	class:GPSObservationPosition3DEdge
oplusImpl	trunk/g2o/examples/target/targetTypes3D.hpp	/^  virtual void oplusImpl(const double* update)$/;"	f	class:VertexPosition3D
oplusImpl	trunk/g2o/examples/target/targetTypes3D.hpp	/^  virtual void oplusImpl(const double* update)$/;"	f	class:VertexVelocity3D
read	trunk/g2o/examples/target/targetTypes3D.hpp	/^  virtual bool read(std::istream& \/*is*\/)$/;"	f	class:GPSObservationPosition3DEdge
read	trunk/g2o/examples/target/targetTypes3D.hpp	/^  virtual bool read(std::istream& \/*is*\/)$/;"	f	class:VertexPosition3D
read	trunk/g2o/examples/target/targetTypes3D.hpp	/^  virtual bool read(std::istream& \/*is*\/)$/;"	f	class:VertexVelocity3D
setToOriginImpl	trunk/g2o/examples/target/targetTypes3D.hpp	/^  virtual void setToOriginImpl() {$/;"	f	class:VertexPosition3D
setToOriginImpl	trunk/g2o/examples/target/targetTypes3D.hpp	/^  virtual void setToOriginImpl() {$/;"	f	class:VertexVelocity3D
write	trunk/g2o/examples/target/targetTypes3D.hpp	/^  virtual bool write(std::ostream& \/*os*\/) const$/;"	f	class:GPSObservationPosition3DEdge
write	trunk/g2o/examples/target/targetTypes3D.hpp	/^  virtual bool write(std::ostream& \/*os*\/) const$/;"	f	class:VertexPosition3D
write	trunk/g2o/examples/target/targetTypes3D.hpp	/^  virtual bool write(std::ostream& \/*os*\/) const$/;"	f	class:VertexVelocity3D
G2O_TARGET_TYPES_6D_HPP_	trunk/g2o/examples/target/targetTypes6D.hpp	2;"	d
GPSObservationEdgePositionVelocity3D	trunk/g2o/examples/target/targetTypes6D.hpp	/^  GPSObservationEdgePositionVelocity3D(const Eigen::Vector3d& measurement, double noiseSigma)$/;"	f	class:GPSObservationEdgePositionVelocity3D
GPSObservationEdgePositionVelocity3D	trunk/g2o/examples/target/targetTypes6D.hpp	/^class GPSObservationEdgePositionVelocity3D : public g2o::BaseUnaryEdge<3, Eigen::Vector3d, VertexPositionVelocity3D>$/;"	c
Matrix6d	trunk/g2o/examples/target/targetTypes6D.hpp	/^typedef Eigen::Matrix<double,6,6> Matrix6d;$/;"	t
PositionVelocity3DEdge	trunk/g2o/examples/target/targetTypes6D.hpp	/^class PositionVelocity3DEdge$/;"	c
TargetOdometry3DEdge	trunk/g2o/examples/target/targetTypes6D.hpp	/^  TargetOdometry3DEdge(double dt, double noiseSigma)$/;"	f	class:TargetOdometry3DEdge
TargetOdometry3DEdge	trunk/g2o/examples/target/targetTypes6D.hpp	/^class TargetOdometry3DEdge : public g2o::BaseBinaryEdge<6, Eigen::Vector3d, VertexPositionVelocity3D, VertexPositionVelocity3D>$/;"	c
Vector6d	trunk/g2o/examples/target/targetTypes6D.hpp	/^typedef Eigen::Matrix<double,6,1> Vector6d;$/;"	t
VertexPosition3D	trunk/g2o/examples/target/targetTypes6D.hpp	/^  VertexPosition3D()$/;"	f	class:VertexPosition3D
VertexPosition3D	trunk/g2o/examples/target/targetTypes6D.hpp	/^class VertexPosition3D : public g2o::BaseVertex<3, Eigen::Vector3d>$/;"	c
VertexPositionVelocity3D	trunk/g2o/examples/target/targetTypes6D.hpp	/^  VertexPositionVelocity3D()$/;"	f	class:VertexPositionVelocity3D
VertexPositionVelocity3D	trunk/g2o/examples/target/targetTypes6D.hpp	/^class VertexPositionVelocity3D : public g2o::BaseVertex<6, Vector6d>$/;"	c
_dt	trunk/g2o/examples/target/targetTypes6D.hpp	/^  double _dt;$/;"	m	class:TargetOdometry3DEdge
computeError	trunk/g2o/examples/target/targetTypes6D.hpp	/^  void computeError()$/;"	f	class:GPSObservationEdgePositionVelocity3D
computeError	trunk/g2o/examples/target/targetTypes6D.hpp	/^  void computeError()$/;"	f	class:TargetOdometry3DEdge
initialEstimate	trunk/g2o/examples/target/targetTypes6D.hpp	/^  virtual void initialEstimate(const g2o::OptimizableGraph::VertexSet& from, g2o::OptimizableGraph::Vertex* to){$/;"	f	class:TargetOdometry3DEdge
initialEstimatePossible	trunk/g2o/examples/target/targetTypes6D.hpp	/^  virtual double initialEstimatePossible(const g2o::OptimizableGraph::VertexSet& from, g2o::OptimizableGraph::Vertex* to) {$/;"	f	class:TargetOdometry3DEdge
oplusImpl	trunk/g2o/examples/target/targetTypes6D.hpp	/^  virtual void oplusImpl(const double* update)$/;"	f	class:VertexPosition3D
oplusImpl	trunk/g2o/examples/target/targetTypes6D.hpp	/^  virtual void oplusImpl(const double* update)$/;"	f	class:VertexPositionVelocity3D
read	trunk/g2o/examples/target/targetTypes6D.hpp	/^  virtual bool read(std::istream& \/*is*\/)$/;"	f	class:GPSObservationEdgePositionVelocity3D
read	trunk/g2o/examples/target/targetTypes6D.hpp	/^  virtual bool read(std::istream& \/*is*\/)$/;"	f	class:TargetOdometry3DEdge
read	trunk/g2o/examples/target/targetTypes6D.hpp	/^  virtual bool read(std::istream& \/*is*\/)$/;"	f	class:VertexPosition3D
read	trunk/g2o/examples/target/targetTypes6D.hpp	/^  virtual bool read(std::istream& \/*is*\/)$/;"	f	class:VertexPositionVelocity3D
setToOriginImpl	trunk/g2o/examples/target/targetTypes6D.hpp	/^  virtual void setToOriginImpl() {$/;"	f	class:VertexPosition3D
setToOriginImpl	trunk/g2o/examples/target/targetTypes6D.hpp	/^  virtual void setToOriginImpl() {$/;"	f	class:VertexPositionVelocity3D
write	trunk/g2o/examples/target/targetTypes6D.hpp	/^  virtual bool write(std::ostream& \/*os*\/) const$/;"	f	class:GPSObservationEdgePositionVelocity3D
write	trunk/g2o/examples/target/targetTypes6D.hpp	/^  virtual bool write(std::ostream& \/*os*\/) const$/;"	f	class:TargetOdometry3DEdge
write	trunk/g2o/examples/target/targetTypes6D.hpp	/^  virtual bool write(std::ostream& \/*os*\/) const$/;"	f	class:VertexPosition3D
write	trunk/g2o/examples/target/targetTypes6D.hpp	/^  virtual bool write(std::ostream& \/*os*\/) const$/;"	f	class:VertexPositionVelocity3D
EdgeSE2	trunk/g2o/examples/tutorial_slam2d/edge_se2.cpp	/^    EdgeSE2::EdgeSE2() :$/;"	f	class:g2o::tutorial::EdgeSE2
g2o	trunk/g2o/examples/tutorial_slam2d/edge_se2.cpp	/^namespace g2o {$/;"	n	file:
read	trunk/g2o/examples/tutorial_slam2d/edge_se2.cpp	/^    bool EdgeSE2::read(std::istream& is)$/;"	f	class:g2o::tutorial::EdgeSE2
tutorial	trunk/g2o/examples/tutorial_slam2d/edge_se2.cpp	/^  namespace tutorial {$/;"	n	namespace:g2o	file:
write	trunk/g2o/examples/tutorial_slam2d/edge_se2.cpp	/^    bool EdgeSE2::write(std::ostream& os) const$/;"	f	class:g2o::tutorial::EdgeSE2
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/tutorial_slam2d/edge_se2.h	/^        EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::tutorial::EdgeSE2
EdgeSE2	trunk/g2o/examples/tutorial_slam2d/edge_se2.h	/^    class G2O_TUTORIAL_SLAM2D_API EdgeSE2 : public BaseBinaryEdge<3, SE2, VertexSE2, VertexSE2>$/;"	c	namespace:g2o::tutorial
G2O_TUTORIAL_EDGE_SE2_H	trunk/g2o/examples/tutorial_slam2d/edge_se2.h	28;"	d
_inverseMeasurement	trunk/g2o/examples/tutorial_slam2d/edge_se2.h	/^        SE2 _inverseMeasurement;$/;"	m	class:g2o::tutorial::EdgeSE2
computeError	trunk/g2o/examples/tutorial_slam2d/edge_se2.h	/^        void computeError()$/;"	f	class:g2o::tutorial::EdgeSE2
g2o	trunk/g2o/examples/tutorial_slam2d/edge_se2.h	/^namespace g2o {$/;"	n
setMeasurement	trunk/g2o/examples/tutorial_slam2d/edge_se2.h	/^        void setMeasurement(const SE2& m){$/;"	f	class:g2o::tutorial::EdgeSE2
tutorial	trunk/g2o/examples/tutorial_slam2d/edge_se2.h	/^  namespace tutorial {$/;"	n	namespace:g2o
EdgeSE2PointXY	trunk/g2o/examples/tutorial_slam2d/edge_se2_pointxy.cpp	/^    EdgeSE2PointXY::EdgeSE2PointXY() :$/;"	f	class:g2o::tutorial::EdgeSE2PointXY
computeError	trunk/g2o/examples/tutorial_slam2d/edge_se2_pointxy.cpp	/^    void EdgeSE2PointXY::computeError()$/;"	f	class:g2o::tutorial::EdgeSE2PointXY
g2o	trunk/g2o/examples/tutorial_slam2d/edge_se2_pointxy.cpp	/^namespace g2o {$/;"	n	file:
read	trunk/g2o/examples/tutorial_slam2d/edge_se2_pointxy.cpp	/^    bool EdgeSE2PointXY::read(std::istream& is)$/;"	f	class:g2o::tutorial::EdgeSE2PointXY
resolveCaches	trunk/g2o/examples/tutorial_slam2d/edge_se2_pointxy.cpp	/^    bool EdgeSE2PointXY::resolveCaches()$/;"	f	class:g2o::tutorial::EdgeSE2PointXY
tutorial	trunk/g2o/examples/tutorial_slam2d/edge_se2_pointxy.cpp	/^  namespace tutorial {$/;"	n	namespace:g2o	file:
write	trunk/g2o/examples/tutorial_slam2d/edge_se2_pointxy.cpp	/^    bool EdgeSE2PointXY::write(std::ostream& os) const$/;"	f	class:g2o::tutorial::EdgeSE2PointXY
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/tutorial_slam2d/edge_se2_pointxy.h	/^        EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::tutorial::EdgeSE2PointXY
EdgeSE2PointXY	trunk/g2o/examples/tutorial_slam2d/edge_se2_pointxy.h	/^    class G2O_TUTORIAL_SLAM2D_API EdgeSE2PointXY : public BaseBinaryEdge<2, Eigen::Vector2d, VertexSE2, VertexPointXY>$/;"	c	namespace:g2o::tutorial
G2O_TUTORIAL_EDGE_SE2_POINT_XY_H	trunk/g2o/examples/tutorial_slam2d/edge_se2_pointxy.h	28;"	d
_sensorCache	trunk/g2o/examples/tutorial_slam2d/edge_se2_pointxy.h	/^        CacheSE2Offset* _sensorCache;$/;"	m	class:g2o::tutorial::EdgeSE2PointXY
_sensorOffset	trunk/g2o/examples/tutorial_slam2d/edge_se2_pointxy.h	/^        ParameterSE2Offset* _sensorOffset;$/;"	m	class:g2o::tutorial::EdgeSE2PointXY
g2o	trunk/g2o/examples/tutorial_slam2d/edge_se2_pointxy.h	/^namespace g2o {$/;"	n
tutorial	trunk/g2o/examples/tutorial_slam2d/edge_se2_pointxy.h	/^  namespace tutorial {$/;"	n	namespace:g2o
G2O_TUTORIAL_SLAM2D_API	trunk/g2o/examples/tutorial_slam2d/g2o_tutorial_slam2d_api.h	19;"	d
G2O_TUTORIAL_SLAM2D_API	trunk/g2o/examples/tutorial_slam2d/g2o_tutorial_slam2d_api.h	21;"	d
G2O_TUTORIAL_SLAM2D_API	trunk/g2o/examples/tutorial_slam2d/g2o_tutorial_slam2d_api.h	24;"	d
G2O_TUTORIAL_SLAM2D_API	trunk/g2o/examples/tutorial_slam2d/g2o_tutorial_slam2d_api.h	29;"	d
G2O_TUTORIAL_SLAM2D_API_H	trunk/g2o/examples/tutorial_slam2d/g2o_tutorial_slam2d_api.h	11;"	d
ParameterSE2Offset	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.cpp	/^    ParameterSE2Offset::ParameterSE2Offset()$/;"	f	class:g2o::tutorial::ParameterSE2Offset
g2o	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.cpp	/^namespace g2o {$/;"	n	file:
read	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.cpp	/^    bool ParameterSE2Offset::read(std::istream& is)$/;"	f	class:g2o::tutorial::ParameterSE2Offset
resolveDependancies	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.cpp	/^    bool CacheSE2Offset::resolveDependancies()$/;"	f	class:g2o::tutorial::CacheSE2Offset
setOffset	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.cpp	/^    void ParameterSE2Offset::setOffset(const SE2& offset)$/;"	f	class:g2o::tutorial::ParameterSE2Offset
tutorial	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.cpp	/^  namespace tutorial {$/;"	n	namespace:g2o	file:
updateImpl	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.cpp	/^    void CacheSE2Offset::updateImpl()$/;"	f	class:g2o::tutorial::CacheSE2Offset
write	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.cpp	/^    bool ParameterSE2Offset::write(std::ostream& os) const$/;"	f	class:g2o::tutorial::ParameterSE2Offset
CacheSE2Offset	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.h	/^    class G2O_TUTORIAL_SLAM2D_API CacheSE2Offset: public Cache$/;"	c	namespace:g2o::tutorial
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.h	/^        EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::tutorial::CacheSE2Offset
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.h	/^        EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::tutorial::ParameterSE2Offset
G2O_TUTORIAL_PARAMETER_SE2_OFFSET_H	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.h	28;"	d
ParameterSE2Offset	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.h	/^    class G2O_TUTORIAL_SLAM2D_API ParameterSE2Offset: public Parameter$/;"	c	namespace:g2o::tutorial
_inverseOffset	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.h	/^        SE2 _inverseOffset;$/;"	m	class:g2o::tutorial::ParameterSE2Offset
_n2w	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.h	/^        SE2 _w2n, _n2w; $/;"	m	class:g2o::tutorial::CacheSE2Offset
_offset	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.h	/^        SE2 _offset;$/;"	m	class:g2o::tutorial::ParameterSE2Offset
_offsetParam	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.h	/^        ParameterSE2Offset* _offsetParam;$/;"	m	class:g2o::tutorial::CacheSE2Offset
_w2n	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.h	/^        SE2 _w2n, _n2w; $/;"	m	class:g2o::tutorial::CacheSE2Offset
g2o	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.h	/^namespace g2o {$/;"	n
inverseOffset	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.h	/^        const SE2& inverseOffset() const { return _inverseOffset;}$/;"	f	class:g2o::tutorial::ParameterSE2Offset
n2w	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.h	/^        const SE2& n2w() const { return _n2w;}$/;"	f	class:g2o::tutorial::CacheSE2Offset
offset	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.h	/^        const SE2& offset() const { return _offset;}$/;"	f	class:g2o::tutorial::ParameterSE2Offset
tutorial	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.h	/^  namespace tutorial {$/;"	n	namespace:g2o
w2n	trunk/g2o/examples/tutorial_slam2d/parameter_se2_offset.h	/^        const SE2& w2n() const { return _w2n;}$/;"	f	class:g2o::tutorial::CacheSE2Offset
G2O_RAND_HH	trunk/g2o/examples/tutorial_slam2d/rand.h	28;"	d
Rand	trunk/g2o/examples/tutorial_slam2d/rand.h	/^    class G2O_TUTORIAL_SLAM2D_API Rand$/;"	c	namespace:g2o::tutorial
g2o	trunk/g2o/examples/tutorial_slam2d/rand.h	/^namespace g2o {$/;"	n
gauss_rand	trunk/g2o/examples/tutorial_slam2d/rand.h	/^        static double gauss_rand(double mean, double sigma)$/;"	f	class:g2o::tutorial::Rand
seed_rand	trunk/g2o/examples/tutorial_slam2d/rand.h	/^        static void seed_rand()$/;"	f	class:g2o::tutorial::Rand
seed_rand	trunk/g2o/examples/tutorial_slam2d/rand.h	/^        static void seed_rand(unsigned int seed)$/;"	f	class:g2o::tutorial::Rand
tutorial	trunk/g2o/examples/tutorial_slam2d/rand.h	/^  namespace tutorial {$/;"	n	namespace:g2o
uniform_rand	trunk/g2o/examples/tutorial_slam2d/rand.h	/^        static double uniform_rand(double lowerBndr, double upperBndr)$/;"	f	class:g2o::tutorial::Rand
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/tutorial_slam2d/se2.h	/^        EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::tutorial::SE2
G2O_TUTORIAL_SE2_H	trunk/g2o/examples/tutorial_slam2d/se2.h	28;"	d
SE2	trunk/g2o/examples/tutorial_slam2d/se2.h	/^        SE2():_R(0),_t(0,0){}$/;"	f	class:g2o::tutorial::SE2
SE2	trunk/g2o/examples/tutorial_slam2d/se2.h	/^        SE2(double x, double y, double theta):_R(theta),_t(x,y){}$/;"	f	class:g2o::tutorial::SE2
SE2	trunk/g2o/examples/tutorial_slam2d/se2.h	/^    class G2O_TUTORIAL_SLAM2D_API SE2 {$/;"	c	namespace:g2o::tutorial
_R	trunk/g2o/examples/tutorial_slam2d/se2.h	/^        Rotation2Dd _R;$/;"	m	class:g2o::tutorial::SE2
_t	trunk/g2o/examples/tutorial_slam2d/se2.h	/^        Vector2d _t;$/;"	m	class:g2o::tutorial::SE2
fromVector	trunk/g2o/examples/tutorial_slam2d/se2.h	/^        void fromVector (const Vector3d& v){$/;"	f	class:g2o::tutorial::SE2
g2o	trunk/g2o/examples/tutorial_slam2d/se2.h	/^namespace g2o {$/;"	n
inverse	trunk/g2o/examples/tutorial_slam2d/se2.h	/^        SE2 inverse() const{$/;"	f	class:g2o::tutorial::SE2
operator *	trunk/g2o/examples/tutorial_slam2d/se2.h	/^        SE2 operator * (const SE2& tr2) const{$/;"	f	class:g2o::tutorial::SE2
operator *	trunk/g2o/examples/tutorial_slam2d/se2.h	/^        Vector2d operator * (const Vector2d& v) const {$/;"	f	class:g2o::tutorial::SE2
operator *=	trunk/g2o/examples/tutorial_slam2d/se2.h	/^        SE2& operator *= (const SE2& tr2){$/;"	f	class:g2o::tutorial::SE2
operator []	trunk/g2o/examples/tutorial_slam2d/se2.h	/^        double operator [](int i) const {$/;"	f	class:g2o::tutorial::SE2
operator []	trunk/g2o/examples/tutorial_slam2d/se2.h	/^        double& operator [](int i) {$/;"	f	class:g2o::tutorial::SE2
rotation	trunk/g2o/examples/tutorial_slam2d/se2.h	/^        Rotation2Dd& rotation() {return _R;}$/;"	f	class:g2o::tutorial::SE2
rotation	trunk/g2o/examples/tutorial_slam2d/se2.h	/^        const Rotation2Dd& rotation() const {return _R;}$/;"	f	class:g2o::tutorial::SE2
toVector	trunk/g2o/examples/tutorial_slam2d/se2.h	/^        Vector3d toVector() const {$/;"	f	class:g2o::tutorial::SE2
translation	trunk/g2o/examples/tutorial_slam2d/se2.h	/^        Vector2d& translation() {return _t;}$/;"	f	class:g2o::tutorial::SE2
translation	trunk/g2o/examples/tutorial_slam2d/se2.h	/^        const Vector2d& translation() const {return _t;}$/;"	f	class:g2o::tutorial::SE2
tutorial	trunk/g2o/examples/tutorial_slam2d/se2.h	/^  namespace tutorial {$/;"	n	namespace:g2o
LandmarkGrid	trunk/g2o/examples/tutorial_slam2d/simulator.cpp	/^    typedef std::map<int, std::map<int, Simulator::LandmarkPtrVector> > LandmarkGrid;$/;"	t	namespace:g2o::tutorial	file:
Simulator	trunk/g2o/examples/tutorial_slam2d/simulator.cpp	/^    Simulator::Simulator()$/;"	f	class:g2o::tutorial::Simulator
g2o	trunk/g2o/examples/tutorial_slam2d/simulator.cpp	/^namespace g2o {$/;"	n	file:
generateNewPose	trunk/g2o/examples/tutorial_slam2d/simulator.cpp	/^    Simulator::GridPose Simulator::generateNewPose(const Simulator::GridPose& prev, const SE2& trueMotion, const Vector2d& transNoise, double rotNoise)$/;"	f	class:g2o::tutorial::Simulator
getMotion	trunk/g2o/examples/tutorial_slam2d/simulator.cpp	/^    SE2 Simulator::getMotion(int motionDirection, double stepLen)$/;"	f	class:g2o::tutorial::Simulator
round	trunk/g2o/examples/tutorial_slam2d/simulator.cpp	/^    inline double round(double number)$/;"	f	namespace:g2o::tutorial
sampleTransformation	trunk/g2o/examples/tutorial_slam2d/simulator.cpp	/^    SE2 Simulator::sampleTransformation(const SE2& trueMotion_, const Vector2d& transNoise, double rotNoise)$/;"	f	class:g2o::tutorial::Simulator
simulate	trunk/g2o/examples/tutorial_slam2d/simulator.cpp	/^    void Simulator::simulate(int numNodes, const SE2& sensorOffset)$/;"	f	class:g2o::tutorial::Simulator
tutorial	trunk/g2o/examples/tutorial_slam2d/simulator.cpp	/^  namespace tutorial {$/;"	n	namespace:g2o	file:
~Simulator	trunk/g2o/examples/tutorial_slam2d/simulator.cpp	/^    Simulator::~Simulator()$/;"	f	class:g2o::tutorial::Simulator
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	struct:g2o::tutorial::Simulator::GridEdge
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	struct:g2o::tutorial::Simulator::GridPose
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	struct:g2o::tutorial::Simulator::Landmark
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	struct:g2o::tutorial::Simulator::LandmarkEdge
G2O_SIMULATOR_H	trunk/g2o/examples/tutorial_slam2d/simulator.h	28;"	d
GridEdge	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^        struct G2O_TUTORIAL_SLAM2D_API GridEdge$/;"	s	class:g2o::tutorial::Simulator
GridEdgeVector	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^        typedef std::vector<GridEdge, Eigen::aligned_allocator<GridEdge> >  GridEdgeVector;$/;"	t	class:g2o::tutorial::Simulator
GridPose	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^        struct G2O_TUTORIAL_SLAM2D_API GridPose$/;"	s	class:g2o::tutorial::Simulator
Landmark	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          Landmark() : id(-1) {}$/;"	f	struct:g2o::tutorial::Simulator::Landmark
Landmark	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^        struct G2O_TUTORIAL_SLAM2D_API Landmark$/;"	s	class:g2o::tutorial::Simulator
LandmarkEdge	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^        struct G2O_TUTORIAL_SLAM2D_API LandmarkEdge$/;"	s	class:g2o::tutorial::Simulator
LandmarkEdgeVector	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^        typedef std::vector<LandmarkEdge, Eigen::aligned_allocator<LandmarkEdge> >  LandmarkEdgeVector;$/;"	t	class:g2o::tutorial::Simulator
LandmarkPtrVector	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^        typedef std::vector<Landmark*> LandmarkPtrVector;$/;"	t	class:g2o::tutorial::Simulator
LandmarkVector	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^        typedef std::vector<Landmark, Eigen::aligned_allocator<Landmark> > LandmarkVector;$/;"	t	class:g2o::tutorial::Simulator
MO_LEFT	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          MO_LEFT, MO_RIGHT,$/;"	e	enum:g2o::tutorial::Simulator::MotionType
MO_NUM_ELEMS	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          MO_NUM_ELEMS$/;"	e	enum:g2o::tutorial::Simulator::MotionType
MO_RIGHT	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          MO_LEFT, MO_RIGHT,$/;"	e	enum:g2o::tutorial::Simulator::MotionType
MotionType	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^        enum G2O_TUTORIAL_SLAM2D_API MotionType {$/;"	g	class:g2o::tutorial::Simulator
PosesVector	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^        typedef std::vector<GridPose, Eigen::aligned_allocator<GridPose> >  PosesVector;$/;"	t	class:g2o::tutorial::Simulator
Simulator	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^    class G2O_TUTORIAL_SLAM2D_API Simulator {$/;"	c	namespace:g2o::tutorial
_landmarkObservations	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^        LandmarkEdgeVector _landmarkObservations;$/;"	m	class:g2o::tutorial::Simulator
_landmarks	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^        LandmarkVector _landmarks;$/;"	m	class:g2o::tutorial::Simulator
_odometry	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^        GridEdgeVector _odometry;$/;"	m	class:g2o::tutorial::Simulator
_poses	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^        PosesVector _poses;$/;"	m	class:g2o::tutorial::Simulator
from	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          int from;$/;"	m	struct:g2o::tutorial::Simulator::GridEdge
from	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          int from;$/;"	m	struct:g2o::tutorial::Simulator::LandmarkEdge
g2o	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^namespace g2o {$/;"	n
id	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          int id;$/;"	m	struct:g2o::tutorial::Simulator::GridPose
id	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          int id;$/;"	m	struct:g2o::tutorial::Simulator::Landmark
information	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          Matrix2d information;$/;"	m	struct:g2o::tutorial::Simulator::LandmarkEdge
information	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          Matrix3d information;$/;"	m	struct:g2o::tutorial::Simulator::GridEdge
landmarkObservations	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^        const LandmarkEdgeVector& landmarkObservations() const { return _landmarkObservations;}$/;"	f	class:g2o::tutorial::Simulator
landmarks	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          LandmarkPtrVector landmarks;      \/\/\/< the landmarks observed by this node$/;"	m	struct:g2o::tutorial::Simulator::GridPose
landmarks	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^        const LandmarkVector& landmarks() const { return _landmarks;}$/;"	f	class:g2o::tutorial::Simulator
odometry	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^        const GridEdgeVector& odometry() const { return _odometry;}$/;"	f	class:g2o::tutorial::Simulator
poses	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^        const PosesVector& poses() const { return _poses;}$/;"	f	class:g2o::tutorial::Simulator
seenBy	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          std::vector<int> seenBy;$/;"	m	struct:g2o::tutorial::Simulator::Landmark
simulatedPose	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          Vector2d simulatedPose;$/;"	m	struct:g2o::tutorial::Simulator::Landmark
simulatorMeas	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          Vector2d simulatorMeas;$/;"	m	struct:g2o::tutorial::Simulator::LandmarkEdge
simulatorPose	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          SE2 simulatorPose;$/;"	m	struct:g2o::tutorial::Simulator::GridPose
simulatorTransf	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          SE2 simulatorTransf;$/;"	m	struct:g2o::tutorial::Simulator::GridEdge
to	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          int to;$/;"	m	struct:g2o::tutorial::Simulator::GridEdge
to	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          int to;$/;"	m	struct:g2o::tutorial::Simulator::LandmarkEdge
trueMeas	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          Vector2d trueMeas;$/;"	m	struct:g2o::tutorial::Simulator::LandmarkEdge
truePose	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          SE2 truePose;$/;"	m	struct:g2o::tutorial::Simulator::GridPose
truePose	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          Vector2d truePose;$/;"	m	struct:g2o::tutorial::Simulator::Landmark
trueTransf	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^          SE2 trueTransf;$/;"	m	struct:g2o::tutorial::Simulator::GridEdge
tutorial	trunk/g2o/examples/tutorial_slam2d/simulator.h	/^  namespace tutorial {$/;"	n	namespace:g2o
main	trunk/g2o/examples/tutorial_slam2d/tutorial_slam2d.cpp	/^int main()$/;"	f
g2o	trunk/g2o/examples/tutorial_slam2d/types_tutorial_slam2d.cpp	/^namespace g2o {$/;"	n	file:
init_tutorial_slam2d_types	trunk/g2o/examples/tutorial_slam2d/types_tutorial_slam2d.cpp	/^  bool init_tutorial_slam2d_types()$/;"	f	namespace:g2o
G2O_TYPES_TUTORIAL_SLAM2D_	trunk/g2o/examples/tutorial_slam2d/types_tutorial_slam2d.h	28;"	d
g2o	trunk/g2o/examples/tutorial_slam2d/types_tutorial_slam2d.h	/^namespace g2o {$/;"	n
VertexPointXY	trunk/g2o/examples/tutorial_slam2d/vertex_point_xy.cpp	/^    VertexPointXY::VertexPointXY() :$/;"	f	class:g2o::tutorial::VertexPointXY
g2o	trunk/g2o/examples/tutorial_slam2d/vertex_point_xy.cpp	/^namespace g2o {$/;"	n	file:
read	trunk/g2o/examples/tutorial_slam2d/vertex_point_xy.cpp	/^    bool VertexPointXY::read(std::istream& is)$/;"	f	class:g2o::tutorial::VertexPointXY
tutorial	trunk/g2o/examples/tutorial_slam2d/vertex_point_xy.cpp	/^  namespace tutorial {$/;"	n	namespace:g2o	file:
write	trunk/g2o/examples/tutorial_slam2d/vertex_point_xy.cpp	/^    bool VertexPointXY::write(std::ostream& os) const$/;"	f	class:g2o::tutorial::VertexPointXY
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/tutorial_slam2d/vertex_point_xy.h	/^        EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::tutorial::VertexPointXY
G2O_TUTORIAL_VERTEX_POINT_XY_H	trunk/g2o/examples/tutorial_slam2d/vertex_point_xy.h	28;"	d
VertexPointXY	trunk/g2o/examples/tutorial_slam2d/vertex_point_xy.h	/^    class G2O_TUTORIAL_SLAM2D_API VertexPointXY : public BaseVertex<2, Eigen::Vector2d>$/;"	c	namespace:g2o::tutorial
g2o	trunk/g2o/examples/tutorial_slam2d/vertex_point_xy.h	/^namespace g2o {$/;"	n
oplusImpl	trunk/g2o/examples/tutorial_slam2d/vertex_point_xy.h	/^        virtual void oplusImpl(const double* update)$/;"	f	class:g2o::tutorial::VertexPointXY
setToOriginImpl	trunk/g2o/examples/tutorial_slam2d/vertex_point_xy.h	/^        virtual void setToOriginImpl() {$/;"	f	class:g2o::tutorial::VertexPointXY
tutorial	trunk/g2o/examples/tutorial_slam2d/vertex_point_xy.h	/^  namespace tutorial {$/;"	n	namespace:g2o
VertexSE2	trunk/g2o/examples/tutorial_slam2d/vertex_se2.cpp	/^    VertexSE2::VertexSE2() :$/;"	f	class:g2o::tutorial::VertexSE2
g2o	trunk/g2o/examples/tutorial_slam2d/vertex_se2.cpp	/^namespace g2o {$/;"	n	file:
read	trunk/g2o/examples/tutorial_slam2d/vertex_se2.cpp	/^    bool VertexSE2::read(std::istream& is)$/;"	f	class:g2o::tutorial::VertexSE2
tutorial	trunk/g2o/examples/tutorial_slam2d/vertex_se2.cpp	/^  namespace tutorial {$/;"	n	namespace:g2o	file:
write	trunk/g2o/examples/tutorial_slam2d/vertex_se2.cpp	/^    bool VertexSE2::write(std::ostream& os) const$/;"	f	class:g2o::tutorial::VertexSE2
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/examples/tutorial_slam2d/vertex_se2.h	/^        EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::tutorial::VertexSE2
G2O_TUTORIAL_VERTEX_SE2_H	trunk/g2o/examples/tutorial_slam2d/vertex_se2.h	28;"	d
VertexSE2	trunk/g2o/examples/tutorial_slam2d/vertex_se2.h	/^    class G2O_TUTORIAL_SLAM2D_API VertexSE2 : public BaseVertex<3, SE2>$/;"	c	namespace:g2o::tutorial
g2o	trunk/g2o/examples/tutorial_slam2d/vertex_se2.h	/^namespace g2o {$/;"	n
oplusImpl	trunk/g2o/examples/tutorial_slam2d/vertex_se2.h	/^        virtual void oplusImpl(const double* update)$/;"	f	class:g2o::tutorial::VertexSE2
setToOriginImpl	trunk/g2o/examples/tutorial_slam2d/vertex_se2.h	/^        virtual void setToOriginImpl() {$/;"	f	class:g2o::tutorial::VertexSE2
tutorial	trunk/g2o/examples/tutorial_slam2d/vertex_se2.h	/^  namespace tutorial {$/;"	n	namespace:g2o
CholmodExt	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^  CholmodExt()$/;"	f	struct:g2o::CholmodExt
CholmodExt	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^struct CholmodExt : public cholmod_sparse$/;"	s	namespace:g2o
G2O_LINEAR_SOLVER_CHOLMOD	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	28;"	d
LinearSolverCholmod	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    LinearSolverCholmod() :$/;"	f	class:g2o::LinearSolverCholmod
LinearSolverCholmod	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^class LinearSolverCholmod : public LinearSolverCCS<MatrixType>$/;"	c	namespace:g2o
_blockOrdering	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    bool _blockOrdering;$/;"	m	class:g2o::LinearSolverCholmod
_blockPermutation	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    VectorXi _scalarPermutation, _blockPermutation;$/;"	m	class:g2o::LinearSolverCholmod
_cholmodCommon	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    cholmod_common _cholmodCommon;$/;"	m	class:g2o::LinearSolverCholmod
_cholmodFactor	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    cholmod_factor* _cholmodFactor;$/;"	m	class:g2o::LinearSolverCholmod
_cholmodSparse	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    CholmodExt* _cholmodSparse;$/;"	m	class:g2o::LinearSolverCholmod
_matrixStructure	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    MatrixStructure _matrixStructure;$/;"	m	class:g2o::LinearSolverCholmod
_scalarPermutation	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    VectorXi _scalarPermutation, _blockPermutation;$/;"	m	class:g2o::LinearSolverCholmod
_writeDebug	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    bool _writeDebug;$/;"	m	class:g2o::LinearSolverCholmod
blockOrdering	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    bool blockOrdering() const { return _blockOrdering;}$/;"	f	class:g2o::LinearSolverCholmod
columnsAllocated	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^  size_t columnsAllocated;$/;"	m	struct:g2o::CholmodExt
computeSymbolicDecomposition	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    void computeSymbolicDecomposition(const SparseBlockMatrix<MatrixType>& A)$/;"	f	class:g2o::LinearSolverCholmod
fillCholmodExt	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    void fillCholmodExt(const SparseBlockMatrix<MatrixType>& A, bool onlyValues)$/;"	f	class:g2o::LinearSolverCholmod
g2o	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^namespace g2o {$/;"	n
init	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    virtual bool init()$/;"	f	class:g2o::LinearSolverCholmod
saveMatrix	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    virtual bool saveMatrix(const std::string& fileName) {$/;"	f	class:g2o::LinearSolverCholmod
setBlockOrdering	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    void setBlockOrdering(bool blockOrdering) { _blockOrdering = blockOrdering;}$/;"	f	class:g2o::LinearSolverCholmod
setWriteDebug	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    virtual void setWriteDebug(bool b) { _writeDebug = b;}$/;"	f	class:g2o::LinearSolverCholmod
solve	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    bool solve(const SparseBlockMatrix<MatrixType>& A, double* x, double* b)$/;"	f	class:g2o::LinearSolverCholmod
solveBlocks	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    bool solveBlocks(double**& blocks, const SparseBlockMatrix<MatrixType>& A)$/;"	f	class:g2o::LinearSolverCholmod
solvePattern	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    virtual bool solvePattern(SparseBlockMatrix<MatrixXd>& spinv, const std::vector<std::pair<int, int> >& blockIndices, const SparseBlockMatrix<MatrixType>& A)$/;"	f	class:g2o::LinearSolverCholmod
writeDebug	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    virtual bool writeDebug() const { return _writeDebug;}$/;"	f	class:g2o::LinearSolverCholmod
~CholmodExt	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^  ~CholmodExt()$/;"	f	struct:g2o::CholmodExt
~LinearSolverCholmod	trunk/g2o/solvers/cholmod/linear_solver_cholmod.h	/^    virtual ~LinearSolverCholmod()$/;"	f	class:g2o::LinearSolverCholmod
ALLOC_CHOLMOD	trunk/g2o/solvers/cholmod/solver_cholmod.cpp	43;"	d	file:
CholmodSolverCreator	trunk/g2o/solvers/cholmod/solver_cholmod.cpp	/^      CholmodSolverCreator(const OptimizationAlgorithmProperty& p) : AbstractOptimizationAlgorithmCreator(p) {}$/;"	f	class:g2o::CholmodSolverCreator
CholmodSolverCreator	trunk/g2o/solvers/cholmod/solver_cholmod.cpp	/^  class CholmodSolverCreator : public AbstractOptimizationAlgorithmCreator$/;"	c	namespace:g2o	file:
DIM_TO_SOLVER	trunk/g2o/solvers/cholmod/solver_cholmod.cpp	41;"	d	file:
cholmod	trunk/g2o/solvers/cholmod/solver_cholmod.cpp	/^  G2O_REGISTER_OPTIMIZATION_LIBRARY(cholmod);$/;"	v
construct	trunk/g2o/solvers/cholmod/solver_cholmod.cpp	/^      virtual OptimizationAlgorithm* construct()$/;"	f	class:g2o::CholmodSolverCreator
createSolver	trunk/g2o/solvers/cholmod/solver_cholmod.cpp	/^  static OptimizationAlgorithm* createSolver(const std::string& fullSolverName)$/;"	f	namespace:g2o	file:
g2o	trunk/g2o/solvers/cholmod/solver_cholmod.cpp	/^namespace g2o {$/;"	n	file:
SparseMatrixEntry	trunk/g2o/solvers/csparse/csparse_helper.cpp	/^    SparseMatrixEntry(int r=-1, int c=-1, double x=0.) :$/;"	f	struct:g2o::csparse_extension::SparseMatrixEntry
SparseMatrixEntry	trunk/g2o/solvers/csparse/csparse_helper.cpp	/^  struct SparseMatrixEntry{$/;"	s	namespace:g2o::csparse_extension	file:
SparseMatrixEntryColSort	trunk/g2o/solvers/csparse/csparse_helper.cpp	/^  struct SparseMatrixEntryColSort$/;"	s	namespace:g2o::csparse_extension	file:
_c	trunk/g2o/solvers/csparse/csparse_helper.cpp	/^    int _r,_c;$/;"	m	struct:g2o::csparse_extension::SparseMatrixEntry	file:
_r	trunk/g2o/solvers/csparse/csparse_helper.cpp	/^    int _r,_c;$/;"	m	struct:g2o::csparse_extension::SparseMatrixEntry	file:
_x	trunk/g2o/solvers/csparse/csparse_helper.cpp	/^    double _x;$/;"	m	struct:g2o::csparse_extension::SparseMatrixEntry	file:
cs_chol_workspace	trunk/g2o/solvers/csparse/csparse_helper.cpp	/^  csn* cs_chol_workspace (const cs *A, const css *S, int* cin, double* xin)$/;"	f	namespace:g2o::csparse_extension
cs_cholsolsymb	trunk/g2o/solvers/csparse/csparse_helper.cpp	/^  int cs_cholsolsymb(const cs *A, double *b, const css* S, double* x, int* work)$/;"	f	namespace:g2o::csparse_extension
csparse_extension	trunk/g2o/solvers/csparse/csparse_helper.cpp	/^namespace csparse_extension {$/;"	n	namespace:g2o	file:
g2o	trunk/g2o/solvers/csparse/csparse_helper.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/solvers/csparse/csparse_helper.cpp	/^    bool operator()(const SparseMatrixEntry& e1, const SparseMatrixEntry& e2) const$/;"	f	struct:g2o::csparse_extension::SparseMatrixEntryColSort
writeCs2Octave	trunk/g2o/solvers/csparse/csparse_helper.cpp	/^  bool writeCs2Octave(const char* filename, const cs* A, bool upperTriangular)$/;"	f	namespace:g2o::csparse_extension
G2O_CSPARSE_HELPER_H	trunk/g2o/solvers/csparse/csparse_helper.h	18;"	d
NCOMPLEX	trunk/g2o/solvers/csparse/csparse_helper.h	21;"	d
csparse_extension	trunk/g2o/solvers/csparse/csparse_helper.h	/^  namespace csparse_extension {$/;"	n	namespace:g2o
g2o	trunk/g2o/solvers/csparse/csparse_helper.h	/^namespace g2o {$/;"	n
G2O_SOLVER_CSPARSE_API	trunk/g2o/solvers/csparse/g2o_csparse_api.h	19;"	d
G2O_SOLVER_CSPARSE_API	trunk/g2o/solvers/csparse/g2o_csparse_api.h	21;"	d
G2O_SOLVER_CSPARSE_API	trunk/g2o/solvers/csparse/g2o_csparse_api.h	24;"	d
G2O_SOLVER_CSPARSE_API	trunk/g2o/solvers/csparse/g2o_csparse_api.h	29;"	d
G2O_SOLVER_CSPARSE_API_H	trunk/g2o/solvers/csparse/g2o_csparse_api.h	11;"	d
G2O_CSPARSE_EXTENSION_API	trunk/g2o/solvers/csparse/g2o_csparse_extension_api.h	26;"	d
G2O_CSPARSE_EXTENSION_API	trunk/g2o/solvers/csparse/g2o_csparse_extension_api.h	28;"	d
G2O_CSPARSE_EXTENSION_API	trunk/g2o/solvers/csparse/g2o_csparse_extension_api.h	31;"	d
G2O_CSPARSE_EXTENSION_API	trunk/g2o/solvers/csparse/g2o_csparse_extension_api.h	36;"	d
G2O_CSPARSE_EXTENSION_API_H	trunk/g2o/solvers/csparse/g2o_csparse_extension_api.h	18;"	d
CSparseExt	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^  CSparseExt()$/;"	f	struct:g2o::CSparseExt
CSparseExt	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^struct G2O_SOLVER_CSPARSE_API CSparseExt : public cs$/;"	s	namespace:g2o
G2O_LINEAR_SOLVERCSPARSE_H	trunk/g2o/solvers/csparse/linear_solver_csparse.h	28;"	d
LinearSolverCSparse	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    LinearSolverCSparse() :$/;"	f	class:g2o::LinearSolverCSparse
LinearSolverCSparse	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^class LinearSolverCSparse : public LinearSolverCCS<MatrixType>$/;"	c	namespace:g2o
_blockOrdering	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    bool _blockOrdering;$/;"	m	class:g2o::LinearSolverCSparse
_ccsA	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    CSparseExt* _ccsA;$/;"	m	class:g2o::LinearSolverCSparse
_csIntWorkspace	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    int* _csIntWorkspace;$/;"	m	class:g2o::LinearSolverCSparse
_csWorkspace	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    double* _csWorkspace;$/;"	m	class:g2o::LinearSolverCSparse
_csWorkspaceSize	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    int _csWorkspaceSize;$/;"	m	class:g2o::LinearSolverCSparse
_matrixStructure	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    MatrixStructure _matrixStructure;$/;"	m	class:g2o::LinearSolverCSparse
_scalarPermutation	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    VectorXi _scalarPermutation;$/;"	m	class:g2o::LinearSolverCSparse
_symbolicDecomposition	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    css* _symbolicDecomposition;$/;"	m	class:g2o::LinearSolverCSparse
_writeDebug	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    bool _writeDebug;$/;"	m	class:g2o::LinearSolverCSparse
blockOrdering	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    bool blockOrdering() const { return _blockOrdering;}$/;"	f	class:g2o::LinearSolverCSparse
columnsAllocated	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^  int columnsAllocated;$/;"	m	struct:g2o::CSparseExt
computeSymbolicDecomposition	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    void computeSymbolicDecomposition(const SparseBlockMatrix<MatrixType>& A)$/;"	f	class:g2o::LinearSolverCSparse
fillCSparse	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    void fillCSparse(const SparseBlockMatrix<MatrixType>& A, bool onlyValues)$/;"	f	class:g2o::LinearSolverCSparse
g2o	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^namespace g2o {$/;"	n
init	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    virtual bool init()$/;"	f	class:g2o::LinearSolverCSparse
setBlockOrdering	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    void setBlockOrdering(bool blockOrdering) { _blockOrdering = blockOrdering;}$/;"	f	class:g2o::LinearSolverCSparse
setWriteDebug	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    virtual void setWriteDebug(bool b) { _writeDebug = b;}$/;"	f	class:g2o::LinearSolverCSparse
solve	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    bool solve(const SparseBlockMatrix<MatrixType>& A, double* x, double* b)$/;"	f	class:g2o::LinearSolverCSparse
solveBlocks	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    bool solveBlocks(double**& blocks, const SparseBlockMatrix<MatrixType>& A) {$/;"	f	class:g2o::LinearSolverCSparse
solvePattern	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    virtual bool solvePattern(SparseBlockMatrix<MatrixXd>& spinv, const std::vector<std::pair<int, int> >& blockIndices, const SparseBlockMatrix<MatrixType>& A) {$/;"	f	class:g2o::LinearSolverCSparse
writeDebug	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    virtual bool writeDebug() const { return _writeDebug;}$/;"	f	class:g2o::LinearSolverCSparse
~CSparseExt	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^  ~CSparseExt()$/;"	f	struct:g2o::CSparseExt
~LinearSolverCSparse	trunk/g2o/solvers/csparse/linear_solver_csparse.h	/^    virtual ~LinearSolverCSparse()$/;"	f	class:g2o::LinearSolverCSparse
ALLOC_CSPARSE	trunk/g2o/solvers/csparse/solver_csparse.cpp	34;"	d	file:
CSparseSolverCreator	trunk/g2o/solvers/csparse/solver_csparse.cpp	/^      CSparseSolverCreator(const OptimizationAlgorithmProperty& p) : AbstractOptimizationAlgorithmCreator(p) {}$/;"	f	class:g2o::CSparseSolverCreator
CSparseSolverCreator	trunk/g2o/solvers/csparse/solver_csparse.cpp	/^  class CSparseSolverCreator : public AbstractOptimizationAlgorithmCreator$/;"	c	namespace:g2o	file:
DIM_TO_SOLVER	trunk/g2o/solvers/csparse/solver_csparse.cpp	32;"	d	file:
construct	trunk/g2o/solvers/csparse/solver_csparse.cpp	/^      virtual OptimizationAlgorithm* construct()$/;"	f	class:g2o::CSparseSolverCreator
createSolver	trunk/g2o/solvers/csparse/solver_csparse.cpp	/^  static OptimizationAlgorithm* createSolver(const std::string& fullSolverName)$/;"	f	namespace:g2o	file:
csparse	trunk/g2o/solvers/csparse/solver_csparse.cpp	/^  G2O_REGISTER_OPTIMIZATION_LIBRARY(csparse);$/;"	v
g2o	trunk/g2o/solvers/csparse/solver_csparse.cpp	/^namespace g2o {$/;"	n	file:
G2O_LINEAR_SOLVER_DENSE_H	trunk/g2o/solvers/dense/linear_solver_dense.h	29;"	d
LinearSolverDense	trunk/g2o/solvers/dense/linear_solver_dense.h	/^      LinearSolverDense() :$/;"	f	class:g2o::LinearSolverDense
LinearSolverDense	trunk/g2o/solvers/dense/linear_solver_dense.h	/^  class LinearSolverDense : public LinearSolver<MatrixType>$/;"	c	namespace:g2o
_H	trunk/g2o/solvers/dense/linear_solver_dense.h	/^      Eigen::MatrixXd _H;$/;"	m	class:g2o::LinearSolverDense
_cholesky	trunk/g2o/solvers/dense/linear_solver_dense.h	/^      Eigen::LDLT<Eigen::MatrixXd> _cholesky;$/;"	m	class:g2o::LinearSolverDense
_reset	trunk/g2o/solvers/dense/linear_solver_dense.h	/^      bool _reset;$/;"	m	class:g2o::LinearSolverDense
g2o	trunk/g2o/solvers/dense/linear_solver_dense.h	/^namespace g2o {$/;"	n
init	trunk/g2o/solvers/dense/linear_solver_dense.h	/^      virtual bool init()$/;"	f	class:g2o::LinearSolverDense
solve	trunk/g2o/solvers/dense/linear_solver_dense.h	/^      bool solve(const SparseBlockMatrix<MatrixType>& A, double* x, double* b)$/;"	f	class:g2o::LinearSolverDense
~LinearSolverDense	trunk/g2o/solvers/dense/linear_solver_dense.h	/^      virtual ~LinearSolverDense()$/;"	f	class:g2o::LinearSolverDense
ALLOC_DENSE	trunk/g2o/solvers/dense/solver_dense.cpp	39;"	d	file:
DIM_TO_SOLVER	trunk/g2o/solvers/dense/solver_dense.cpp	37;"	d	file:
DenseSolverCreator	trunk/g2o/solvers/dense/solver_dense.cpp	/^      DenseSolverCreator(const OptimizationAlgorithmProperty& p) : AbstractOptimizationAlgorithmCreator(p) {}$/;"	f	class:g2o::DenseSolverCreator
DenseSolverCreator	trunk/g2o/solvers/dense/solver_dense.cpp	/^  class DenseSolverCreator : public AbstractOptimizationAlgorithmCreator$/;"	c	namespace:g2o	file:
construct	trunk/g2o/solvers/dense/solver_dense.cpp	/^      virtual OptimizationAlgorithm* construct()$/;"	f	class:g2o::DenseSolverCreator
createSolver	trunk/g2o/solvers/dense/solver_dense.cpp	/^  static OptimizationAlgorithm* createSolver(const std::string& fullSolverName)$/;"	f	namespace:g2o	file:
dense	trunk/g2o/solvers/dense/solver_dense.cpp	/^  G2O_REGISTER_OPTIMIZATION_LIBRARY(dense);$/;"	v
g2o	trunk/g2o/solvers/dense/solver_dense.cpp	/^namespace g2o {$/;"	n	file:
CholeskyDecomposition	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^        CholeskyDecomposition() : Eigen::SimplicialLDLT<SparseMatrix, Eigen::Upper>() {}$/;"	f	class:g2o::LinearSolverEigen::CholeskyDecomposition
CholeskyDecomposition	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^    class CholeskyDecomposition : public Eigen::SimplicialLDLT<SparseMatrix, Eigen::Upper>$/;"	c	class:g2o::LinearSolverEigen
G2O_LINEAR_SOLVER_EIGEN_H	trunk/g2o/solvers/eigen/linear_solver_eigen.h	28;"	d
LinearSolverEigen	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^    LinearSolverEigen() :$/;"	f	class:g2o::LinearSolverEigen
LinearSolverEigen	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^class LinearSolverEigen: public LinearSolver<MatrixType>$/;"	c	namespace:g2o
PermutationMatrix	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^    typedef Eigen::PermutationMatrix<Eigen::Dynamic, Eigen::Dynamic, SparseMatrix::Index> PermutationMatrix;$/;"	t	class:g2o::LinearSolverEigen
SparseMatrix	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^    typedef Eigen::SparseMatrix<double, ColMajor> SparseMatrix;$/;"	t	class:g2o::LinearSolverEigen
Triplet	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^    typedef Eigen::Triplet<double> Triplet;$/;"	t	class:g2o::LinearSolverEigen
_blockOrdering	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^    bool _blockOrdering;$/;"	m	class:g2o::LinearSolverEigen
_cholesky	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^    CholeskyDecomposition _cholesky;$/;"	m	class:g2o::LinearSolverEigen
_init	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^    bool _init;$/;"	m	class:g2o::LinearSolverEigen
_sparseMatrix	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^    SparseMatrix _sparseMatrix;$/;"	m	class:g2o::LinearSolverEigen
_writeDebug	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^    bool _writeDebug;$/;"	m	class:g2o::LinearSolverEigen
analyzePatternWithPermutation	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^        void analyzePatternWithPermutation(SparseMatrix& a, const PermutationMatrix& permutation)$/;"	f	class:g2o::LinearSolverEigen::CholeskyDecomposition
blockOrdering	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^    bool blockOrdering() const { return _blockOrdering;}$/;"	f	class:g2o::LinearSolverEigen
computeSymbolicDecomposition	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^    void computeSymbolicDecomposition(const SparseBlockMatrix<MatrixType>& A)$/;"	f	class:g2o::LinearSolverEigen
fillSparseMatrix	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^    void fillSparseMatrix(const SparseBlockMatrix<MatrixType>& A, bool onlyValues)$/;"	f	class:g2o::LinearSolverEigen
g2o	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^namespace g2o {$/;"	n
init	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^    virtual bool init()$/;"	f	class:g2o::LinearSolverEigen
setBlockOrdering	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^    void setBlockOrdering(bool blockOrdering) { _blockOrdering = blockOrdering;}$/;"	f	class:g2o::LinearSolverEigen
setWriteDebug	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^    virtual void setWriteDebug(bool b) { _writeDebug = b;}$/;"	f	class:g2o::LinearSolverEigen
solve	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^    bool solve(const SparseBlockMatrix<MatrixType>& A, double* x, double* b)$/;"	f	class:g2o::LinearSolverEigen
writeDebug	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^    virtual bool writeDebug() const { return _writeDebug;}$/;"	f	class:g2o::LinearSolverEigen
~LinearSolverEigen	trunk/g2o/solvers/eigen/linear_solver_eigen.h	/^    virtual ~LinearSolverEigen()$/;"	f	class:g2o::LinearSolverEigen
ALLOC_EIGEN_SPARSE_CHOLESKY	trunk/g2o/solvers/eigen/solver_eigen.cpp	32;"	d	file:
DIM_TO_SOLVER	trunk/g2o/solvers/eigen/solver_eigen.cpp	30;"	d	file:
EigenSolverCreator	trunk/g2o/solvers/eigen/solver_eigen.cpp	/^      EigenSolverCreator(const OptimizationAlgorithmProperty& p) : AbstractOptimizationAlgorithmCreator(p) {}$/;"	f	class:g2o::EigenSolverCreator
EigenSolverCreator	trunk/g2o/solvers/eigen/solver_eigen.cpp	/^  class EigenSolverCreator : public AbstractOptimizationAlgorithmCreator$/;"	c	namespace:g2o	file:
construct	trunk/g2o/solvers/eigen/solver_eigen.cpp	/^      virtual OptimizationAlgorithm* construct()$/;"	f	class:g2o::EigenSolverCreator
createSolver	trunk/g2o/solvers/eigen/solver_eigen.cpp	/^  static OptimizationAlgorithm* createSolver(const std::string& fullSolverName)$/;"	f	namespace:g2o	file:
eigen	trunk/g2o/solvers/eigen/solver_eigen.cpp	/^  G2O_REGISTER_OPTIMIZATION_LIBRARY(eigen);$/;"	v
g2o	trunk/g2o/solvers/eigen/solver_eigen.cpp	/^namespace g2o {$/;"	n	file:
G2O_LINEAR_SOLVER_PCG_H	trunk/g2o/solvers/pcg/linear_solver_pcg.h	28;"	d
LinearSolverPCG	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      LinearSolverPCG() :$/;"	f	class:g2o::LinearSolverPCG
LinearSolverPCG	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^  class LinearSolverPCG : public LinearSolver<MatrixType>$/;"	c	namespace:g2o
MatrixPtrVector	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      typedef std::vector< const MatrixType* > MatrixPtrVector;$/;"	t	class:g2o::LinearSolverPCG
MatrixVector	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      typedef std::vector< MatrixType, Eigen::aligned_allocator<MatrixType> > MatrixVector;$/;"	t	class:g2o::LinearSolverPCG
_J	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      MatrixVector _J;$/;"	m	class:g2o::LinearSolverPCG
_absoluteTolerance	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      bool _absoluteTolerance;$/;"	m	class:g2o::LinearSolverPCG
_diag	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      MatrixPtrVector _diag;$/;"	m	class:g2o::LinearSolverPCG
_indices	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      std::vector<std::pair<int, int> > _indices;$/;"	m	class:g2o::LinearSolverPCG
_maxIter	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      int _maxIter;$/;"	m	class:g2o::LinearSolverPCG
_residual	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      double _residual;$/;"	m	class:g2o::LinearSolverPCG
_sparseMat	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      MatrixPtrVector _sparseMat;$/;"	m	class:g2o::LinearSolverPCG
_tolerance	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      double _tolerance;$/;"	m	class:g2o::LinearSolverPCG
_verbose	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      bool _verbose;$/;"	m	class:g2o::LinearSolverPCG
absoluteTolerance	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      bool absoluteTolerance() const { return _absoluteTolerance;}$/;"	f	class:g2o::LinearSolverPCG
g2o	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^namespace g2o {$/;"	n
init	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      virtual bool init()$/;"	f	class:g2o::LinearSolverPCG
maxIterations	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      int maxIterations() const { return _maxIter;}$/;"	f	class:g2o::LinearSolverPCG
setAbsoluteTolerance	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      void setAbsoluteTolerance(bool absoluteTolerance) { _absoluteTolerance = absoluteTolerance;}$/;"	f	class:g2o::LinearSolverPCG
setMaxIterations	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      void setMaxIterations(int maxIter) { _maxIter = maxIter;}$/;"	f	class:g2o::LinearSolverPCG
setTolerance	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      void setTolerance(double tolerance) { _tolerance = tolerance;}$/;"	f	class:g2o::LinearSolverPCG
setVerbose	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      void setVerbose(bool verbose) { _verbose = verbose;}$/;"	f	class:g2o::LinearSolverPCG
tolerance	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      double tolerance() const { return _tolerance;}$/;"	f	class:g2o::LinearSolverPCG
verbose	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      bool verbose() const { return _verbose;}$/;"	f	class:g2o::LinearSolverPCG
~LinearSolverPCG	trunk/g2o/solvers/pcg/linear_solver_pcg.h	/^      virtual ~LinearSolverPCG()$/;"	f	class:g2o::LinearSolverPCG
internal	trunk/g2o/solvers/pcg/linear_solver_pcg.hpp	/^namespace internal {$/;"	n
mult	trunk/g2o/solvers/pcg/linear_solver_pcg.hpp	/^void LinearSolverPCG<MatrixType>::mult(const std::vector<int>& colBlockIndices, const Eigen::VectorXd& src, Eigen::VectorXd& dest)$/;"	f	class:LinearSolverPCG
multDiag	trunk/g2o/solvers/pcg/linear_solver_pcg.hpp	/^void LinearSolverPCG<MatrixType>::multDiag(const std::vector<int>& colBlockIndices, MatrixPtrVector& A, const Eigen::VectorXd& src, Eigen::VectorXd& dest)$/;"	f	class:LinearSolverPCG
multDiag	trunk/g2o/solvers/pcg/linear_solver_pcg.hpp	/^void LinearSolverPCG<MatrixType>::multDiag(const std::vector<int>& colBlockIndices, MatrixVector& A, const Eigen::VectorXd& src, Eigen::VectorXd& dest)$/;"	f	class:LinearSolverPCG
pcg_atxpy	trunk/g2o/solvers/pcg/linear_solver_pcg.hpp	/^  inline void pcg_atxpy(const Eigen::MatrixXd& A, const Eigen::VectorXd& x, int xoff, Eigen::VectorXd& y, int yoff)$/;"	f	namespace:internal
pcg_atxpy	trunk/g2o/solvers/pcg/linear_solver_pcg.hpp	/^  inline void pcg_atxpy(const MatrixType& A, const Eigen::VectorXd& x, int xoff, Eigen::VectorXd& y, int yoff)$/;"	f	namespace:internal
pcg_axpy	trunk/g2o/solvers/pcg/linear_solver_pcg.hpp	/^  inline void pcg_axpy(const Eigen::MatrixXd& A, const Eigen::VectorXd& x, int xoff, Eigen::VectorXd& y, int yoff)$/;"	f	namespace:internal
pcg_axpy	trunk/g2o/solvers/pcg/linear_solver_pcg.hpp	/^  inline void pcg_axpy(const MatrixType& A, const Eigen::VectorXd& x, int xoff, Eigen::VectorXd& y, int yoff)$/;"	f	namespace:internal
pcg_axy	trunk/g2o/solvers/pcg/linear_solver_pcg.hpp	/^  void pcg_axy(const MatrixType& A, const Eigen::VectorXd& x, int xoff, Eigen::VectorXd& y, int yoff)$/;"	f	namespace:internal
solve	trunk/g2o/solvers/pcg/linear_solver_pcg.hpp	/^bool LinearSolverPCG<MatrixType>::solve(const SparseBlockMatrix<MatrixType>& A, double* x, double* b)$/;"	f	class:LinearSolverPCG
ALLOC_PCG	trunk/g2o/solvers/pcg/solver_pcg.cpp	39;"	d	file:
DIM_TO_SOLVER	trunk/g2o/solvers/pcg/solver_pcg.cpp	37;"	d	file:
PCGSolverCreator	trunk/g2o/solvers/pcg/solver_pcg.cpp	/^      PCGSolverCreator(const OptimizationAlgorithmProperty& p) : AbstractOptimizationAlgorithmCreator(p) {}$/;"	f	class:g2o::PCGSolverCreator
PCGSolverCreator	trunk/g2o/solvers/pcg/solver_pcg.cpp	/^  class PCGSolverCreator : public AbstractOptimizationAlgorithmCreator$/;"	c	namespace:g2o	file:
construct	trunk/g2o/solvers/pcg/solver_pcg.cpp	/^      virtual OptimizationAlgorithm* construct()$/;"	f	class:g2o::PCGSolverCreator
createSolver	trunk/g2o/solvers/pcg/solver_pcg.cpp	/^  static OptimizationAlgorithm* createSolver(const std::string& fullSolverName)$/;"	f	namespace:g2o	file:
g2o	trunk/g2o/solvers/pcg/solver_pcg.cpp	/^namespace g2o {$/;"	n	file:
pcg	trunk/g2o/solvers/pcg/solver_pcg.cpp	/^  G2O_REGISTER_OPTIMIZATION_LIBRARY(pcg);$/;"	v
G2O_SLAM2D_LINEAR_API	trunk/g2o/solvers/slam2d_linear/g2o_slam2d_linear_api.h	19;"	d
G2O_SLAM2D_LINEAR_API	trunk/g2o/solvers/slam2d_linear/g2o_slam2d_linear_api.h	21;"	d
G2O_SLAM2D_LINEAR_API	trunk/g2o/solvers/slam2d_linear/g2o_slam2d_linear_api.h	24;"	d
G2O_SLAM2D_LINEAR_API	trunk/g2o/solvers/slam2d_linear/g2o_slam2d_linear_api.h	29;"	d
G2O_SLAM2D_LINEAR_API_H	trunk/g2o/solvers/slam2d_linear/g2o_slam2d_linear_api.h	11;"	d
ALLOC_CSPARSE	trunk/g2o/solvers/slam2d_linear/slam2d_linear.cpp	41;"	d	file:
DIM_TO_SOLVER	trunk/g2o/solvers/slam2d_linear/slam2d_linear.cpp	39;"	d	file:
SLAM2DLinearSolverCreator	trunk/g2o/solvers/slam2d_linear/slam2d_linear.cpp	/^      SLAM2DLinearSolverCreator(const OptimizationAlgorithmProperty& p) : AbstractOptimizationAlgorithmCreator(p) {}$/;"	f	class:g2o::SLAM2DLinearSolverCreator
SLAM2DLinearSolverCreator	trunk/g2o/solvers/slam2d_linear/slam2d_linear.cpp	/^  class SLAM2DLinearSolverCreator : public AbstractOptimizationAlgorithmCreator$/;"	c	namespace:g2o	file:
construct	trunk/g2o/solvers/slam2d_linear/slam2d_linear.cpp	/^      virtual OptimizationAlgorithm* construct()$/;"	f	class:g2o::SLAM2DLinearSolverCreator
createSolver	trunk/g2o/solvers/slam2d_linear/slam2d_linear.cpp	/^  static OptimizationAlgorithm* createSolver(const std::string& fullSolverName)$/;"	f	namespace:g2o	file:
g2o	trunk/g2o/solvers/slam2d_linear/slam2d_linear.cpp	/^namespace g2o {$/;"	n	file:
slam2d_linear	trunk/g2o/solvers/slam2d_linear/slam2d_linear.cpp	/^  G2O_REGISTER_OPTIMIZATION_LIBRARY(slam2d_linear);$/;"	v
SolverSLAM2DLinear	trunk/g2o/solvers/slam2d_linear/solver_slam2d_linear.cpp	/^  SolverSLAM2DLinear::SolverSLAM2DLinear(Solver* solver) :$/;"	f	class:g2o::SolverSLAM2DLinear
ThetaTreeAction	trunk/g2o/solvers/slam2d_linear/solver_slam2d_linear.cpp	/^      ThetaTreeAction(double* theta) : HyperDijkstra::TreeAction(), _thetaGuess(theta) {}$/;"	f	class:g2o::ThetaTreeAction
ThetaTreeAction	trunk/g2o/solvers/slam2d_linear/solver_slam2d_linear.cpp	/^  class ThetaTreeAction : public HyperDijkstra::TreeAction$/;"	c	namespace:g2o	file:
_thetaGuess	trunk/g2o/solvers/slam2d_linear/solver_slam2d_linear.cpp	/^      double* _thetaGuess;$/;"	m	class:g2o::ThetaTreeAction	file:
g2o	trunk/g2o/solvers/slam2d_linear/solver_slam2d_linear.cpp	/^namespace g2o {$/;"	n	file:
perform	trunk/g2o/solvers/slam2d_linear/solver_slam2d_linear.cpp	/^      virtual double perform(HyperGraph::Vertex* v, HyperGraph::Vertex* vParent, HyperGraph::Edge* e)$/;"	f	class:g2o::ThetaTreeAction
solve	trunk/g2o/solvers/slam2d_linear/solver_slam2d_linear.cpp	/^  OptimizationAlgorithm::SolverResult SolverSLAM2DLinear::solve(int iteration, bool online)$/;"	f	class:g2o::SolverSLAM2DLinear
solveOrientation	trunk/g2o/solvers/slam2d_linear/solver_slam2d_linear.cpp	/^  bool SolverSLAM2DLinear::solveOrientation()$/;"	f	class:g2o::SolverSLAM2DLinear
~SolverSLAM2DLinear	trunk/g2o/solvers/slam2d_linear/solver_slam2d_linear.cpp	/^  SolverSLAM2DLinear::~SolverSLAM2DLinear()$/;"	f	class:g2o::SolverSLAM2DLinear
G2O_SOLVER_SLAM2D_LINEAR	trunk/g2o/solvers/slam2d_linear/solver_slam2d_linear.h	28;"	d
SolverSLAM2DLinear	trunk/g2o/solvers/slam2d_linear/solver_slam2d_linear.h	/^  class G2O_SLAM2D_LINEAR_API SolverSLAM2DLinear : public OptimizationAlgorithmGaussNewton$/;"	c	namespace:g2o
g2o	trunk/g2o/solvers/slam2d_linear/solver_slam2d_linear.h	/^namespace g2o {$/;"	n
StructureOnlyCreator	trunk/g2o/solvers/structure_only/structure_only.cpp	/^      StructureOnlyCreator(const OptimizationAlgorithmProperty& p) : AbstractOptimizationAlgorithmCreator(p) {}$/;"	f	class:g2o::StructureOnlyCreator
StructureOnlyCreator	trunk/g2o/solvers/structure_only/structure_only.cpp	/^  class StructureOnlyCreator : public AbstractOptimizationAlgorithmCreator$/;"	c	namespace:g2o	file:
construct	trunk/g2o/solvers/structure_only/structure_only.cpp	/^      virtual OptimizationAlgorithm* construct()$/;"	f	class:g2o::StructureOnlyCreator
createSolver	trunk/g2o/solvers/structure_only/structure_only.cpp	/^  static OptimizationAlgorithm* createSolver(const std::string& fullSolverName)$/;"	f	namespace:g2o	file:
g2o	trunk/g2o/solvers/structure_only/structure_only.cpp	/^namespace g2o {$/;"	n	file:
structure_only	trunk/g2o/solvers/structure_only/structure_only.cpp	/^  G2O_REGISTER_OPTIMIZATION_LIBRARY(structure_only);$/;"	v
G2O_STRUCTURE_ONLY_SOLVER_H	trunk/g2o/solvers/structure_only/structure_only_solver.h	29;"	d
StructureOnlySolver	trunk/g2o/solvers/structure_only/structure_only_solver.h	/^    StructureOnlySolver()$/;"	f	class:g2o::StructureOnlySolver
StructureOnlySolver	trunk/g2o/solvers/structure_only/structure_only_solver.h	/^class StructureOnlySolver : public OptimizationAlgorithm$/;"	c	namespace:g2o
_points	trunk/g2o/solvers/structure_only/structure_only_solver.h	/^    OptimizableGraph::VertexContainer _points;$/;"	m	class:g2o::StructureOnlySolver
_verbose	trunk/g2o/solvers/structure_only/structure_only_solver.h	/^    bool _verbose;$/;"	m	class:g2o::StructureOnlySolver
calc	trunk/g2o/solvers/structure_only/structure_only_solver.h	/^    OptimizationAlgorithm::SolverResult calc(OptimizableGraph::VertexContainer& vertices, int num_iters, int num_max_trials=10)$/;"	f	class:g2o::StructureOnlySolver
computeMarginals	trunk/g2o/solvers/structure_only/structure_only_solver.h	/^    virtual bool computeMarginals(SparseBlockMatrix<MatrixXd>&, const std::vector<std::pair<int, int> >&) { return false;}$/;"	f	class:g2o::StructureOnlySolver
g2o	trunk/g2o/solvers/structure_only/structure_only_solver.h	/^namespace g2o$/;"	n
init	trunk/g2o/solvers/structure_only/structure_only_solver.h	/^    virtual bool init(bool )$/;"	f	class:g2o::StructureOnlySolver
solve	trunk/g2o/solvers/structure_only/structure_only_solver.h	/^    virtual OptimizationAlgorithm::SolverResult solve(int iteration, bool online = false)$/;"	f	class:g2o::StructureOnlySolver
updateStructure	trunk/g2o/solvers/structure_only/structure_only_solver.h	/^    virtual bool updateStructure(const std::vector<HyperGraph::Vertex*>& , const HyperGraph::EdgeSet& ) { return true;}$/;"	f	class:g2o::StructureOnlySolver
BG_BLACK	trunk/g2o/stuff/color_macros.h	35;"	d
BG_BLUE	trunk/g2o/stuff/color_macros.h	41;"	d
BG_GREEN	trunk/g2o/stuff/color_macros.h	37;"	d
BG_LIGHTBLUE	trunk/g2o/stuff/color_macros.h	39;"	d
BG_MAGENTA	trunk/g2o/stuff/color_macros.h	40;"	d
BG_RED	trunk/g2o/stuff/color_macros.h	36;"	d
BG_WHITE	trunk/g2o/stuff/color_macros.h	42;"	d
BG_YELLOW	trunk/g2o/stuff/color_macros.h	38;"	d
CL_BLACK	trunk/g2o/stuff/color_macros.h	45;"	d
CL_BLUE	trunk/g2o/stuff/color_macros.h	51;"	d
CL_GREEN	trunk/g2o/stuff/color_macros.h	47;"	d
CL_LIGHTBLUE	trunk/g2o/stuff/color_macros.h	49;"	d
CL_MAGENTA	trunk/g2o/stuff/color_macros.h	50;"	d
CL_RED	trunk/g2o/stuff/color_macros.h	46;"	d
CL_WHITE	trunk/g2o/stuff/color_macros.h	52;"	d
CL_YELLOW	trunk/g2o/stuff/color_macros.h	48;"	d
FG_BLACK	trunk/g2o/stuff/color_macros.h	54;"	d
FG_BLUE	trunk/g2o/stuff/color_macros.h	60;"	d
FG_GREEN	trunk/g2o/stuff/color_macros.h	56;"	d
FG_LIGHTBLUE	trunk/g2o/stuff/color_macros.h	58;"	d
FG_MAGENTA	trunk/g2o/stuff/color_macros.h	59;"	d
FG_NORM	trunk/g2o/stuff/color_macros.h	63;"	d
FG_RED	trunk/g2o/stuff/color_macros.h	55;"	d
FG_WHITE	trunk/g2o/stuff/color_macros.h	61;"	d
FG_YELLOW	trunk/g2o/stuff/color_macros.h	57;"	d
FT_BOLD	trunk/g2o/stuff/color_macros.h	31;"	d
FT_UNDERLINE	trunk/g2o/stuff/color_macros.h	32;"	d
G2O_COLOR_MACROS_H	trunk/g2o/stuff/color_macros.h	28;"	d
CAT_BOOL	trunk/g2o/stuff/command_args.cpp	/^  CAT_DOUBLE, CAT_FLOAT, CAT_INT, CAT_STRING, CAT_BOOL, CAT_VECTOR_INT, CAT_VECTOR_DOUBLE$/;"	e	enum:g2o::CommandArgumentType	file:
CAT_DOUBLE	trunk/g2o/stuff/command_args.cpp	/^  CAT_DOUBLE, CAT_FLOAT, CAT_INT, CAT_STRING, CAT_BOOL, CAT_VECTOR_INT, CAT_VECTOR_DOUBLE$/;"	e	enum:g2o::CommandArgumentType	file:
CAT_FLOAT	trunk/g2o/stuff/command_args.cpp	/^  CAT_DOUBLE, CAT_FLOAT, CAT_INT, CAT_STRING, CAT_BOOL, CAT_VECTOR_INT, CAT_VECTOR_DOUBLE$/;"	e	enum:g2o::CommandArgumentType	file:
CAT_INT	trunk/g2o/stuff/command_args.cpp	/^  CAT_DOUBLE, CAT_FLOAT, CAT_INT, CAT_STRING, CAT_BOOL, CAT_VECTOR_INT, CAT_VECTOR_DOUBLE$/;"	e	enum:g2o::CommandArgumentType	file:
CAT_STRING	trunk/g2o/stuff/command_args.cpp	/^  CAT_DOUBLE, CAT_FLOAT, CAT_INT, CAT_STRING, CAT_BOOL, CAT_VECTOR_INT, CAT_VECTOR_DOUBLE$/;"	e	enum:g2o::CommandArgumentType	file:
CAT_VECTOR_DOUBLE	trunk/g2o/stuff/command_args.cpp	/^  CAT_DOUBLE, CAT_FLOAT, CAT_INT, CAT_STRING, CAT_BOOL, CAT_VECTOR_INT, CAT_VECTOR_DOUBLE$/;"	e	enum:g2o::CommandArgumentType	file:
CAT_VECTOR_INT	trunk/g2o/stuff/command_args.cpp	/^  CAT_DOUBLE, CAT_FLOAT, CAT_INT, CAT_STRING, CAT_BOOL, CAT_VECTOR_INT, CAT_VECTOR_DOUBLE$/;"	e	enum:g2o::CommandArgumentType	file:
CmpPairFirst	trunk/g2o/stuff/command_args.cpp	/^struct CmpPairFirst {$/;"	s	namespace:g2o	file:
CommandArgs	trunk/g2o/stuff/command_args.cpp	/^CommandArgs::CommandArgs()$/;"	f	class:g2o::CommandArgs
CommandArgumentType	trunk/g2o/stuff/command_args.cpp	/^enum CommandArgumentType$/;"	g	namespace:g2o	file:
arg2str	trunk/g2o/stuff/command_args.cpp	/^std::string CommandArgs::arg2str(const CommandArgument& ca) const$/;"	f	class:g2o::CommandArgs
convertString	trunk/g2o/stuff/command_args.cpp	/^bool convertString(const std::string& s, T& x)$/;"	f	namespace:g2o
g2o	trunk/g2o/stuff/command_args.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/stuff/command_args.cpp	/^  bool operator()(const std::pair<T1,T2>& left, const std::pair<T1,T2>& right) {$/;"	f	struct:g2o::CmpPairFirst
operator <<	trunk/g2o/stuff/command_args.cpp	/^std::ostream& operator<<(std::ostream& os, const std::vector<double>& v)$/;"	f	namespace:g2o
operator <<	trunk/g2o/stuff/command_args.cpp	/^std::ostream& operator<<(std::ostream& os, const std::vector<int>& v){$/;"	f	namespace:g2o
operator >>	trunk/g2o/stuff/command_args.cpp	/^std::istream& operator>>(std::istream& is, std::vector<double>& v){$/;"	f	namespace:g2o
operator >>	trunk/g2o/stuff/command_args.cpp	/^std::istream& operator>>(std::istream& is, std::vector<int>& v){$/;"	f	namespace:g2o
param	trunk/g2o/stuff/command_args.cpp	/^void CommandArgs::param(const std::string& name, bool& p, bool defValue, const std::string& desc)$/;"	f	class:g2o::CommandArgs
param	trunk/g2o/stuff/command_args.cpp	/^void CommandArgs::param(const std::string& name, double& p, double defValue, const std::string& desc)$/;"	f	class:g2o::CommandArgs
param	trunk/g2o/stuff/command_args.cpp	/^void CommandArgs::param(const std::string& name, float& p, float defValue, const std::string& desc)$/;"	f	class:g2o::CommandArgs
param	trunk/g2o/stuff/command_args.cpp	/^void CommandArgs::param(const std::string& name, int& p, int defValue, const std::string& desc)$/;"	f	class:g2o::CommandArgs
param	trunk/g2o/stuff/command_args.cpp	/^void CommandArgs::param(const std::string& name, std::string& p, const std::string& defValue, const std::string& desc)$/;"	f	class:g2o::CommandArgs
param	trunk/g2o/stuff/command_args.cpp	/^void CommandArgs::param(const std::string& name, std::vector<double>& p, const std::vector<double>& defValue, const std::string& desc)$/;"	f	class:g2o::CommandArgs
param	trunk/g2o/stuff/command_args.cpp	/^void CommandArgs::param(const std::string& name, std::vector<int>& p, const std::vector<int>& defValue, const std::string& desc){$/;"	f	class:g2o::CommandArgs
paramLeftOver	trunk/g2o/stuff/command_args.cpp	/^void CommandArgs::paramLeftOver(const std::string& name, std::string& p, const std::string& defValue, const std::string& desc, bool optional)$/;"	f	class:g2o::CommandArgs
parseArgs	trunk/g2o/stuff/command_args.cpp	/^bool CommandArgs::parseArgs(int argc, char** argv, bool exitOnError)$/;"	f	class:g2o::CommandArgs
parsedParam	trunk/g2o/stuff/command_args.cpp	/^bool CommandArgs::parsedParam(const std::string& param) const$/;"	f	class:g2o::CommandArgs
printHelp	trunk/g2o/stuff/command_args.cpp	/^void CommandArgs::printHelp(std::ostream& os)$/;"	f	class:g2o::CommandArgs
setBanner	trunk/g2o/stuff/command_args.cpp	/^void CommandArgs::setBanner(const std::string& banner)$/;"	f	class:g2o::CommandArgs
str2arg	trunk/g2o/stuff/command_args.cpp	/^void CommandArgs::str2arg(const std::string& input, CommandArgument& ca) const$/;"	f	class:g2o::CommandArgs
trim	trunk/g2o/stuff/command_args.cpp	/^std::string CommandArgs::trim(const std::string& s) const$/;"	f	class:g2o::CommandArgs
type2str	trunk/g2o/stuff/command_args.cpp	/^const char* CommandArgs::type2str(int t) const$/;"	f	class:g2o::CommandArgs
~CommandArgs	trunk/g2o/stuff/command_args.cpp	/^CommandArgs::~CommandArgs()$/;"	f	class:g2o::CommandArgs
CommandArgs	trunk/g2o/stuff/command_args.h	/^class G2O_STUFF_API CommandArgs$/;"	c	namespace:g2o
CommandArgument	trunk/g2o/stuff/command_args.h	/^      CommandArgument() : name(""), description(""), type(0), data(0), parsed(false), optional(false)$/;"	f	struct:g2o::CommandArgs::CommandArgument
CommandArgument	trunk/g2o/stuff/command_args.h	/^    struct CommandArgument$/;"	s	class:g2o::CommandArgs
G2O_COMMAND_ARGS_H	trunk/g2o/stuff/command_args.h	28;"	d
_args	trunk/g2o/stuff/command_args.h	/^    std::vector<CommandArgument> _args;$/;"	m	class:g2o::CommandArgs
_banner	trunk/g2o/stuff/command_args.h	/^    std::string _banner;$/;"	m	class:g2o::CommandArgs
_leftOvers	trunk/g2o/stuff/command_args.h	/^    std::vector<CommandArgument> _leftOvers;$/;"	m	class:g2o::CommandArgs
_leftOversOptional	trunk/g2o/stuff/command_args.h	/^    std::vector<CommandArgument> _leftOversOptional;$/;"	m	class:g2o::CommandArgs
_progName	trunk/g2o/stuff/command_args.h	/^    std::string _progName;$/;"	m	class:g2o::CommandArgs
data	trunk/g2o/stuff/command_args.h	/^      void* data;$/;"	m	struct:g2o::CommandArgs::CommandArgument
description	trunk/g2o/stuff/command_args.h	/^      std::string description;$/;"	m	struct:g2o::CommandArgs::CommandArgument
g2o	trunk/g2o/stuff/command_args.h	/^namespace g2o {$/;"	n
getBanner	trunk/g2o/stuff/command_args.h	/^    const std::string& getBanner() const { return _banner; }$/;"	f	class:g2o::CommandArgs
name	trunk/g2o/stuff/command_args.h	/^      std::string name;$/;"	m	struct:g2o::CommandArgs::CommandArgument
optional	trunk/g2o/stuff/command_args.h	/^      bool optional;$/;"	m	struct:g2o::CommandArgs::CommandArgument
parsed	trunk/g2o/stuff/command_args.h	/^      bool parsed;$/;"	m	struct:g2o::CommandArgs::CommandArgument
type	trunk/g2o/stuff/command_args.h	/^      int type;$/;"	m	struct:g2o::CommandArgs::CommandArgument
changeFileExtension	trunk/g2o/stuff/filesys_tools.cpp	/^std::string changeFileExtension(const std::string& filename, const std::string& newExt, bool stripDot)$/;"	f	namespace:g2o
fileExists	trunk/g2o/stuff/filesys_tools.cpp	/^bool fileExists(const char* filename)$/;"	f	namespace:g2o
g2o	trunk/g2o/stuff/filesys_tools.cpp	/^namespace g2o {$/;"	n	file:
getBasename	trunk/g2o/stuff/filesys_tools.cpp	/^std::string getBasename(const std::string& filename)$/;"	f	namespace:g2o
getDirname	trunk/g2o/stuff/filesys_tools.cpp	/^std::string getDirname(const std::string& filename)$/;"	f	namespace:g2o
getFileExtension	trunk/g2o/stuff/filesys_tools.cpp	/^std::string getFileExtension(const std::string& filename)$/;"	f	namespace:g2o
getFilesByPattern	trunk/g2o/stuff/filesys_tools.cpp	/^std::vector<std::string> getFilesByPattern(const char* pattern)$/;"	f	namespace:g2o
getPureFilename	trunk/g2o/stuff/filesys_tools.cpp	/^std::string getPureFilename(const std::string& filename)$/;"	f	namespace:g2o
G2O_FILESYS_TOOLS_H	trunk/g2o/stuff/filesys_tools.h	36;"	d
g2o	trunk/g2o/stuff/filesys_tools.h	/^namespace g2o {$/;"	n
G2O_STUFF_API	trunk/g2o/stuff/g2o_stuff_api.h	20;"	d
G2O_STUFF_API	trunk/g2o/stuff/g2o_stuff_api.h	22;"	d
G2O_STUFF_API	trunk/g2o/stuff/g2o_stuff_api.h	25;"	d
G2O_STUFF_API	trunk/g2o/stuff/g2o_stuff_api.h	30;"	d
G2O_STUFF_API_H	trunk/g2o/stuff/g2o_stuff_api.h	11;"	d
DEG2RAD	trunk/g2o/stuff/macros.h	31;"	d
FIXED	trunk/g2o/stuff/macros.h	128;"	d
G2O_ATTRIBUTE_CONSTRUCTOR	trunk/g2o/stuff/macros.h	40;"	d
G2O_ATTRIBUTE_CONSTRUCTOR	trunk/g2o/stuff/macros.h	74;"	d
G2O_ATTRIBUTE_CONSTRUCTOR	trunk/g2o/stuff/macros.h	97;"	d
G2O_ATTRIBUTE_DEPRECATED	trunk/g2o/stuff/macros.h	102;"	d
G2O_ATTRIBUTE_DEPRECATED	trunk/g2o/stuff/macros.h	48;"	d
G2O_ATTRIBUTE_DEPRECATED	trunk/g2o/stuff/macros.h	84;"	d
G2O_ATTRIBUTE_FORMAT12	trunk/g2o/stuff/macros.h	45;"	d
G2O_ATTRIBUTE_FORMAT12	trunk/g2o/stuff/macros.h	81;"	d
G2O_ATTRIBUTE_FORMAT12	trunk/g2o/stuff/macros.h	99;"	d
G2O_ATTRIBUTE_FORMAT23	trunk/g2o/stuff/macros.h	100;"	d
G2O_ATTRIBUTE_FORMAT23	trunk/g2o/stuff/macros.h	46;"	d
G2O_ATTRIBUTE_FORMAT23	trunk/g2o/stuff/macros.h	82;"	d
G2O_ATTRIBUTE_UNUSED	trunk/g2o/stuff/macros.h	44;"	d
G2O_ATTRIBUTE_UNUSED	trunk/g2o/stuff/macros.h	80;"	d
G2O_ATTRIBUTE_UNUSED	trunk/g2o/stuff/macros.h	98;"	d
G2O_ATTRIBUTE_WARNING	trunk/g2o/stuff/macros.h	101;"	d
G2O_ATTRIBUTE_WARNING	trunk/g2o/stuff/macros.h	47;"	d
G2O_ATTRIBUTE_WARNING	trunk/g2o/stuff/macros.h	83;"	d
G2O_FSKIP_LINE	trunk/g2o/stuff/macros.h	114;"	d
G2O_MACROS_H	trunk/g2o/stuff/macros.h	28;"	d
PVAR	trunk/g2o/stuff/macros.h	118;"	d
PVARA	trunk/g2o/stuff/macros.h	123;"	d
RAD2DEG	trunk/g2o/stuff/macros.h	35;"	d
__PRETTY_FUNCTION__	trunk/g2o/stuff/macros.h	62;"	d
__PRETTY_FUNCTION__	trunk/g2o/stuff/macros.h	95;"	d
g2o_isfinite	trunk/g2o/stuff/macros.h	107;"	d
g2o_isfinite	trunk/g2o/stuff/macros.h	53;"	d
g2o_isfinite	trunk/g2o/stuff/macros.h	57;"	d
g2o_isfinite	trunk/g2o/stuff/macros.h	90;"	d
g2o_isinf	trunk/g2o/stuff/macros.h	106;"	d
g2o_isinf	trunk/g2o/stuff/macros.h	52;"	d
g2o_isinf	trunk/g2o/stuff/macros.h	56;"	d
g2o_isinf	trunk/g2o/stuff/macros.h	89;"	d
g2o_isnan	trunk/g2o/stuff/macros.h	105;"	d
g2o_isnan	trunk/g2o/stuff/macros.h	51;"	d
g2o_isnan	trunk/g2o/stuff/macros.h	55;"	d
g2o_isnan	trunk/g2o/stuff/macros.h	88;"	d
ForceLinkFunction	trunk/g2o/stuff/misc.h	/^    typedef void (* ForceLinkFunction) (void);$/;"	t
ForceLinker	trunk/g2o/stuff/misc.h	/^    ForceLinker(ForceLinkFunction function) { (function)(); }$/;"	f	struct:g2o::ForceLinker
ForceLinker	trunk/g2o/stuff/misc.h	/^struct ForceLinker$/;"	s	namespace:g2o
G2O_STUFF_MISC_H	trunk/g2o/stuff/misc.h	28;"	d
M_PI	trunk/g2o/stuff/misc.h	34;"	d
arrayHasNaN	trunk/g2o/stuff/misc.h	/^inline bool arrayHasNaN(const double* array, int size, int* nanIndex = 0)$/;"	f	namespace:g2o
average_angle	trunk/g2o/stuff/misc.h	/^inline double average_angle(double theta1, double theta2)$/;"	f	namespace:g2o
clamp	trunk/g2o/stuff/misc.h	/^inline T clamp(T l, T x, T u) $/;"	f	namespace:g2o
deg2rad	trunk/g2o/stuff/misc.h	/^inline double deg2rad(double degree)$/;"	f	namespace:g2o
g2o	trunk/g2o/stuff/misc.h	/^namespace g2o {$/;"	n
hypot	trunk/g2o/stuff/misc.h	/^inline T hypot(T x, T y)$/;"	f	namespace:g2o
hypot_sqr	trunk/g2o/stuff/misc.h	/^inline T hypot_sqr(T x, T y)$/;"	f	namespace:g2o
inverse_theta	trunk/g2o/stuff/misc.h	/^inline double inverse_theta(double th)$/;"	f	namespace:g2o
normalize_theta	trunk/g2o/stuff/misc.h	/^inline double normalize_theta(double theta)$/;"	f	namespace:g2o
rad2deg	trunk/g2o/stuff/misc.h	/^inline double rad2deg(double rad)$/;"	f	namespace:g2o
sign	trunk/g2o/stuff/misc.h	/^inline int sign(T x)$/;"	f	namespace:g2o
square	trunk/g2o/stuff/misc.h	/^inline T square(T x)$/;"	f	namespace:g2o
wrap	trunk/g2o/stuff/misc.h	/^inline T wrap(T l, T x, T u) $/;"	f	namespace:g2o
GLUWrapper	trunk/g2o/stuff/opengl_primitives.cpp	/^    GLUWrapper()$/;"	f	class:g2o::opengl::GLUWrapper
GLUWrapper	trunk/g2o/stuff/opengl_primitives.cpp	/^class GLUWrapper$/;"	c	namespace:g2o::opengl	file:
_quadratic	trunk/g2o/stuff/opengl_primitives.cpp	/^    GLUquadricObj* _quadratic;;$/;"	m	class:g2o::opengl::GLUWrapper	file:
drawArrow2D	trunk/g2o/stuff/opengl_primitives.cpp	/^void drawArrow2D(float len, float head_width, float head_len)$/;"	f	namespace:g2o::opengl
drawBox	trunk/g2o/stuff/opengl_primitives.cpp	/^void drawBox(GLfloat l, GLfloat w, GLfloat h)$/;"	f	namespace:g2o::opengl
drawCone	trunk/g2o/stuff/opengl_primitives.cpp	/^void drawCone(GLfloat radius, GLfloat height)$/;"	f	namespace:g2o::opengl
drawCylinder	trunk/g2o/stuff/opengl_primitives.cpp	/^void drawCylinder(GLfloat radius, GLfloat height)$/;"	f	namespace:g2o::opengl
drawDisk	trunk/g2o/stuff/opengl_primitives.cpp	/^void drawDisk(GLfloat radius)$/;"	f	namespace:g2o::opengl
drawEllipsoid	trunk/g2o/stuff/opengl_primitives.cpp	/^void drawEllipsoid(GLfloat r1, GLfloat r2, GLfloat r3)$/;"	f	namespace:g2o::opengl
drawPlane	trunk/g2o/stuff/opengl_primitives.cpp	/^void drawPlane(GLfloat l, GLfloat w)$/;"	f	namespace:g2o::opengl
drawPoseBox	trunk/g2o/stuff/opengl_primitives.cpp	/^void drawPoseBox()$/;"	f	namespace:g2o::opengl
drawPyramid	trunk/g2o/stuff/opengl_primitives.cpp	/^void drawPyramid(GLfloat length, GLfloat height)$/;"	f	namespace:g2o::opengl
drawRangeRing	trunk/g2o/stuff/opengl_primitives.cpp	/^void drawRangeRing(GLfloat range, GLfloat fov, GLfloat range_width)$/;"	f	namespace:g2o::opengl
drawSlice	trunk/g2o/stuff/opengl_primitives.cpp	/^void drawSlice(GLfloat radius, GLfloat height, GLfloat fov, int slices_per_circle)$/;"	f	namespace:g2o::opengl
drawSphere	trunk/g2o/stuff/opengl_primitives.cpp	/^void drawSphere(GLfloat radius)$/;"	f	namespace:g2o::opengl
g2o	trunk/g2o/stuff/opengl_primitives.cpp	/^namespace g2o {$/;"	n	file:
getQuadradic	trunk/g2o/stuff/opengl_primitives.cpp	/^    static GLUquadricObj* getQuadradic()$/;"	f	class:g2o::opengl::GLUWrapper
opengl	trunk/g2o/stuff/opengl_primitives.cpp	/^namespace opengl {$/;"	n	namespace:g2o	file:
~GLUWrapper	trunk/g2o/stuff/opengl_primitives.cpp	/^    ~GLUWrapper()$/;"	f	class:g2o::opengl::GLUWrapper
G2O_OPENGL_API	trunk/g2o/stuff/opengl_primitives.h	36;"	d
G2O_OPENGL_API	trunk/g2o/stuff/opengl_primitives.h	38;"	d
G2O_OPENGL_API	trunk/g2o/stuff/opengl_primitives.h	41;"	d
G2O_OPENGL_API	trunk/g2o/stuff/opengl_primitives.h	44;"	d
G2O_OPENGL_PRIMITIVES_H	trunk/g2o/stuff/opengl_primitives.h	20;"	d
g2o	trunk/g2o/stuff/opengl_primitives.h	/^namespace g2o {$/;"	n
opengl	trunk/g2o/stuff/opengl_primitives.h	/^namespace opengl {$/;"	n	namespace:g2o
G2O_OPENGL_WRAPPER_H	trunk/g2o/stuff/opengl_wrapper.h	2;"	d
vasprintf	trunk/g2o/stuff/os_specific.c	/^int vasprintf(char** strp, const char* fmt, va_list ap)$/;"	f
G2O_OS_SPECIFIC_HH_	trunk/g2o/stuff/os_specific.h	28;"	d
drand48	trunk/g2o/stuff/os_specific.h	37;"	d
BaseProperty	trunk/g2o/stuff/property.cpp	/^  BaseProperty::BaseProperty(const std::string name_) :_name(name_){$/;"	f	class:g2o::BaseProperty
addProperty	trunk/g2o/stuff/property.cpp	/^  bool PropertyMap::addProperty(BaseProperty* p) {$/;"	f	class:g2o::PropertyMap
eraseProperty	trunk/g2o/stuff/property.cpp	/^  bool PropertyMap::eraseProperty(const std::string& name) {$/;"	f	class:g2o::PropertyMap
g2o	trunk/g2o/stuff/property.cpp	/^namespace g2o {$/;"	n	file:
updateMapFromString	trunk/g2o/stuff/property.cpp	/^  bool PropertyMap::updateMapFromString(const std::string& values)$/;"	f	class:g2o::PropertyMap
updatePropertyFromString	trunk/g2o/stuff/property.cpp	/^  bool PropertyMap::updatePropertyFromString(const std::string& name, const std::string& value)$/;"	f	class:g2o::PropertyMap
writeToCSV	trunk/g2o/stuff/property.cpp	/^  void PropertyMap::writeToCSV(std::ostream& os) const$/;"	f	class:g2o::PropertyMap
~BaseProperty	trunk/g2o/stuff/property.cpp	/^  BaseProperty::~BaseProperty(){}$/;"	f	class:g2o::BaseProperty
~PropertyMap	trunk/g2o/stuff/property.cpp	/^  PropertyMap::~PropertyMap() {$/;"	f	class:g2o::PropertyMap
BaseClass	trunk/g2o/stuff/property.h	/^      typedef std::map<std::string, BaseProperty*>        BaseClass;$/;"	t	class:g2o::PropertyMap
BaseProperty	trunk/g2o/stuff/property.h	/^  class G2O_STUFF_API BaseProperty {$/;"	c	namespace:g2o
BoolProperty	trunk/g2o/stuff/property.h	/^  typedef Property<bool> BoolProperty;$/;"	t	namespace:g2o
DoubleProperty	trunk/g2o/stuff/property.h	/^  typedef Property<double> DoubleProperty;$/;"	t	namespace:g2o
FloatProperty	trunk/g2o/stuff/property.h	/^  typedef Property<float> FloatProperty;$/;"	t	namespace:g2o
G2O_PROPERTY_H_	trunk/g2o/stuff/property.h	28;"	d
IntProperty	trunk/g2o/stuff/property.h	/^  typedef Property<int> IntProperty;$/;"	t	namespace:g2o
Property	trunk/g2o/stuff/property.h	/^      Property(const std::string& name_): BaseProperty(name_){}$/;"	f	class:g2o::Property
Property	trunk/g2o/stuff/property.h	/^      Property(const std::string& name_, const T& v): BaseProperty(name_), _value(v){}$/;"	f	class:g2o::Property
Property	trunk/g2o/stuff/property.h	/^  class Property: public BaseProperty {$/;"	c	namespace:g2o
PropertyMap	trunk/g2o/stuff/property.h	/^  class G2O_STUFF_API PropertyMap : protected std::map<std::string, BaseProperty*>$/;"	c	namespace:g2o
PropertyMapConstIterator	trunk/g2o/stuff/property.h	/^      typedef BaseClass::const_iterator                   PropertyMapConstIterator;$/;"	t	class:g2o::PropertyMap
PropertyMapIterator	trunk/g2o/stuff/property.h	/^      typedef BaseClass::iterator                         PropertyMapIterator;$/;"	t	class:g2o::PropertyMap
StringProperty	trunk/g2o/stuff/property.h	/^  typedef Property<std::string> StringProperty;$/;"	t	namespace:g2o
ValueType	trunk/g2o/stuff/property.h	/^      typedef T ValueType;$/;"	t	class:g2o::Property
_name	trunk/g2o/stuff/property.h	/^      std::string _name;$/;"	m	class:g2o::BaseProperty
_value	trunk/g2o/stuff/property.h	/^      T _value;$/;"	m	class:g2o::Property
fromString	trunk/g2o/stuff/property.h	/^      virtual bool fromString(const std::string& s)$/;"	f	class:g2o::Property
g2o	trunk/g2o/stuff/property.h	/^namespace g2o {$/;"	n
getProperty	trunk/g2o/stuff/property.h	/^      P* getProperty(const std::string& name_)$/;"	f	class:g2o::PropertyMap
getProperty	trunk/g2o/stuff/property.h	/^      const P* getProperty(const std::string& name_) const$/;"	f	class:g2o::PropertyMap
makeProperty	trunk/g2o/stuff/property.h	/^      P* makeProperty(const std::string& name_, const typename P::ValueType& v)$/;"	f	class:g2o::PropertyMap
name	trunk/g2o/stuff/property.h	/^      const std::string& name() {return _name;}$/;"	f	class:g2o::BaseProperty
setValue	trunk/g2o/stuff/property.h	/^      void setValue(const T& v) {_value = v; }$/;"	f	class:g2o::Property
toString	trunk/g2o/stuff/property.h	/^      virtual std::string toString() const$/;"	f	class:g2o::Property
value	trunk/g2o/stuff/property.h	/^      const T& value() const {return _value;}$/;"	f	class:g2o::Property
_gen_real	trunk/g2o/stuff/sampler.cpp	/^  static std::tr1::ranlux_base_01* _gen_real = new std::tr1::ranlux_base_01;$/;"	v	file:
_uniformReal	trunk/g2o/stuff/sampler.cpp	/^  static std::tr1::uniform_real<double> _uniformReal;$/;"	v	file:
g2o	trunk/g2o/stuff/sampler.cpp	/^namespace g2o {$/;"	n	file:
sampleGaussian	trunk/g2o/stuff/sampler.cpp	/^  double sampleGaussian(std::tr1::ranlux_base_01* generator){$/;"	f	namespace:g2o
sampleUniform	trunk/g2o/stuff/sampler.cpp	/^  double sampleUniform(double min, double max, std::tr1::ranlux_base_01* generator){$/;"	f	namespace:g2o
G2O_GAUSSIAN_SAMPLER_	trunk/g2o/stuff/sampler.h	28;"	d
GaussianSampler	trunk/g2o/stuff/sampler.h	/^    GaussianSampler(bool hasGenerator=true){$/;"	f	class:g2o::GaussianSampler
GaussianSampler	trunk/g2o/stuff/sampler.h	/^  class GaussianSampler {$/;"	c	namespace:g2o
Sampler	trunk/g2o/stuff/sampler.h	/^  class G2O_STUFF_API Sampler$/;"	c	namespace:g2o
_cholesky	trunk/g2o/stuff/sampler.h	/^    CovarianceType _cholesky;$/;"	m	class:g2o::GaussianSampler
_generator	trunk/g2o/stuff/sampler.h	/^    std::tr1::ranlux_base_01* _generator;$/;"	m	class:g2o::GaussianSampler
g2o	trunk/g2o/stuff/sampler.h	/^namespace g2o {$/;"	n
gaussRand	trunk/g2o/stuff/sampler.h	/^      static double gaussRand(double mean, double sigma)$/;"	f	class:g2o::Sampler
generateSample	trunk/g2o/stuff/sampler.h	/^    SampleType generateSample() {$/;"	f	class:g2o::GaussianSampler
seedRand	trunk/g2o/stuff/sampler.h	/^      static void seedRand()$/;"	f	class:g2o::Sampler
seedRand	trunk/g2o/stuff/sampler.h	/^      static void seedRand(unsigned int seed)$/;"	f	class:g2o::Sampler
setDistribution	trunk/g2o/stuff/sampler.h	/^    void setDistribution(const CovarianceType& cov){$/;"	f	class:g2o::GaussianSampler
uniformRand	trunk/g2o/stuff/sampler.h	/^      static double uniformRand(double lowerBndr, double upperBndr)$/;"	f	class:g2o::Sampler
~GaussianSampler	trunk/g2o/stuff/sampler.h	/^    ~GaussianSampler() {$/;"	f	class:g2o::GaussianSampler
G2O_SCOPED_POINTER_H	trunk/g2o/stuff/scoped_pointer.h	28;"	d
ScopedArray	trunk/g2o/stuff/scoped_pointer.h	/^      ScopedArray(T* t = 0) : _pointer(t) {}$/;"	f	class:g2o::ScopedArray
ScopedArray	trunk/g2o/stuff/scoped_pointer.h	/^  class ScopedArray$/;"	c	namespace:g2o
ScopedPointer	trunk/g2o/stuff/scoped_pointer.h	/^      ScopedPointer(T* t = 0) : _pointer(t) {}$/;"	f	class:g2o::ScopedPointer
ScopedPointer	trunk/g2o/stuff/scoped_pointer.h	/^  class ScopedPointer $/;"	c	namespace:g2o
ScopedPointerDeleter	trunk/g2o/stuff/scoped_pointer.h	/^    struct ScopedPointerDeleter$/;"	s	namespace:g2o::<anonymous>
_pointer	trunk/g2o/stuff/scoped_pointer.h	/^      T* _pointer;$/;"	m	class:g2o::ScopedArray
_pointer	trunk/g2o/stuff/scoped_pointer.h	/^      T* _pointer;$/;"	m	class:g2o::ScopedPointer
g2o	trunk/g2o/stuff/scoped_pointer.h	/^namespace g2o {$/;"	n
get	trunk/g2o/stuff/scoped_pointer.h	/^      T* get() const { return _pointer;}$/;"	f	class:g2o::ScopedArray
get	trunk/g2o/stuff/scoped_pointer.h	/^      T* get() const { return _pointer;}$/;"	f	class:g2o::ScopedPointer
operator ()	trunk/g2o/stuff/scoped_pointer.h	/^      void operator()(T* t) { delete t;}$/;"	f	struct:g2o::<anonymous>::ScopedPointerDeleter
operator *	trunk/g2o/stuff/scoped_pointer.h	/^      T& operator*() const { return *_pointer;}$/;"	f	class:g2o::ScopedPointer
operator ->	trunk/g2o/stuff/scoped_pointer.h	/^      T* operator->() const { return _pointer;}$/;"	f	class:g2o::ScopedPointer
operator []	trunk/g2o/stuff/scoped_pointer.h	/^      T & operator[](std::ptrdiff_t i) const$/;"	f	class:g2o::ScopedArray
reset	trunk/g2o/stuff/scoped_pointer.h	/^      void reset(T* p)$/;"	f	class:g2o::ScopedArray
reset	trunk/g2o/stuff/scoped_pointer.h	/^      void reset(T* p)$/;"	f	class:g2o::ScopedPointer
swap	trunk/g2o/stuff/scoped_pointer.h	/^      void swap(ScopedArray & b)$/;"	f	class:g2o::ScopedArray
swap	trunk/g2o/stuff/scoped_pointer.h	/^      void swap(ScopedPointer& b)$/;"	f	class:g2o::ScopedPointer
~ScopedArray	trunk/g2o/stuff/scoped_pointer.h	/^      ~ScopedArray()$/;"	f	class:g2o::ScopedArray
~ScopedPointer	trunk/g2o/stuff/scoped_pointer.h	/^      ~ScopedPointer()$/;"	f	class:g2o::ScopedPointer
TripletColSort	trunk/g2o/stuff/sparse_helper.cpp	/^    struct TripletColSort$/;"	s	namespace:g2o::<anonymous>	file:
TripletEntry	trunk/g2o/stuff/sparse_helper.cpp	/^      TripletEntry(int r_, int c_, double x_) : r(r_), c(c_), x(x_) {}$/;"	f	struct:g2o::<anonymous>::TripletEntry
TripletEntry	trunk/g2o/stuff/sparse_helper.cpp	/^    struct TripletEntry$/;"	s	namespace:g2o::<anonymous>	file:
c	trunk/g2o/stuff/sparse_helper.cpp	/^      int r, c;$/;"	m	struct:g2o::<anonymous>::TripletEntry	file:
g2o	trunk/g2o/stuff/sparse_helper.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/stuff/sparse_helper.cpp	/^      bool operator()(const TripletEntry& e1, const TripletEntry& e2) const$/;"	f	struct:g2o::<anonymous>::TripletColSort
r	trunk/g2o/stuff/sparse_helper.cpp	/^      int r, c;$/;"	m	struct:g2o::<anonymous>::TripletEntry	file:
writeCCSMatrix	trunk/g2o/stuff/sparse_helper.cpp	/^  bool writeCCSMatrix(const string& filename, int rows, int cols, const int* Ap, const int* Ai, const double* Ax, bool upperTriangleSymmetric)$/;"	f	namespace:g2o
writeVector	trunk/g2o/stuff/sparse_helper.cpp	/^  bool writeVector(const string& filename, const double*v, int n)$/;"	f	namespace:g2o
x	trunk/g2o/stuff/sparse_helper.cpp	/^      double x;$/;"	m	struct:g2o::<anonymous>::TripletEntry	file:
G2O_SPARSE_HELPER_H	trunk/g2o/stuff/sparse_helper.h	28;"	d
g2o	trunk/g2o/stuff/sparse_helper.h	/^namespace g2o {$/;"	n
formatString	trunk/g2o/stuff/string_tools.cpp	/^std::string formatString(const char* fmt, ...)$/;"	f	namespace:g2o
g2o	trunk/g2o/stuff/string_tools.cpp	/^namespace g2o {$/;"	n	file:
readLine	trunk/g2o/stuff/string_tools.cpp	/^int readLine(std::istream& is, std::stringstream& currentLine)$/;"	f	namespace:g2o
strEndsWith	trunk/g2o/stuff/string_tools.cpp	/^bool strEndsWith(const std::string& s, const std::string& end)$/;"	f	namespace:g2o
strExpandFilename	trunk/g2o/stuff/string_tools.cpp	/^std::string strExpandFilename(const std::string& filename)$/;"	f	namespace:g2o
strPrintf	trunk/g2o/stuff/string_tools.cpp	/^int strPrintf(std::string& str, const char* fmt, ...)$/;"	f	namespace:g2o
strSplit	trunk/g2o/stuff/string_tools.cpp	/^std::vector<std::string> strSplit(const std::string& str, const std::string& delimiters)$/;"	f	namespace:g2o
strStartsWith	trunk/g2o/stuff/string_tools.cpp	/^bool strStartsWith(const std::string& s, const std::string& start)$/;"	f	namespace:g2o
strToLower	trunk/g2o/stuff/string_tools.cpp	/^std::string strToLower(const std::string& s)$/;"	f	namespace:g2o
strToUpper	trunk/g2o/stuff/string_tools.cpp	/^std::string strToUpper(const std::string& s)$/;"	f	namespace:g2o
trim	trunk/g2o/stuff/string_tools.cpp	/^std::string trim(const std::string& s)$/;"	f	namespace:g2o
trimLeft	trunk/g2o/stuff/string_tools.cpp	/^std::string trimLeft(const std::string& s)$/;"	f	namespace:g2o
trimRight	trunk/g2o/stuff/string_tools.cpp	/^std::string trimRight(const std::string& s)$/;"	f	namespace:g2o
G2O_STRING_TOOLS_H	trunk/g2o/stuff/string_tools.h	28;"	d
convertString	trunk/g2o/stuff/string_tools.h	/^bool convertString(const std::string& s, T& x, bool failIfLeftoverChars = true)$/;"	f	namespace:g2o
g2o	trunk/g2o/stuff/string_tools.h	/^namespace g2o {$/;"	n
readFloats	trunk/g2o/stuff/string_tools.h	/^OutputIterator readFloats(const char* str, OutputIterator out)$/;"	f	namespace:g2o
readInts	trunk/g2o/stuff/string_tools.h	/^OutputIterator readInts(const char* str, OutputIterator out)$/;"	f	namespace:g2o
stringToType	trunk/g2o/stuff/string_tools.h	/^T stringToType(const std::string& s, bool failIfLeftoverChars = true)$/;"	f	namespace:g2o
ScopedTictoc	trunk/g2o/stuff/tictoc.cpp	/^  ScopedTictoc::ScopedTictoc(const char* algorithmPart) :$/;"	f	class:g2o::ScopedTictoc
TicTocElement	trunk/g2o/stuff/tictoc.cpp	/^    TicTocElement() :$/;"	f	struct:g2o::TicTocElement
TicTocElement	trunk/g2o/stuff/tictoc.cpp	/^  struct TicTocElement$/;"	s	namespace:g2o	file:
TicTocInitializer	trunk/g2o/stuff/tictoc.cpp	/^    TicTocInitializer()$/;"	f	struct:g2o::TicTocInitializer
TicTocInitializer	trunk/g2o/stuff/tictoc.cpp	/^  struct TicTocInitializer$/;"	s	namespace:g2o	file:
TicTocMap	trunk/g2o/stuff/tictoc.cpp	/^  typedef std::map<std::string, TicTocElement> TicTocMap;$/;"	t	namespace:g2o	file:
algorithmPart	trunk/g2o/stuff/tictoc.cpp	/^    std::string algorithmPart;              \/\/\/< name \/ description of the code block$/;"	m	struct:g2o::TicTocElement	file:
clockIsRunning	trunk/g2o/stuff/tictoc.cpp	/^    bool clockIsRunning;$/;"	m	struct:g2o::TicTocElement	file:
enabled	trunk/g2o/stuff/tictoc.cpp	/^    bool enabled;$/;"	m	struct:g2o::TicTocInitializer	file:
exponentialMovingAverage	trunk/g2o/stuff/tictoc.cpp	/^    double exponentialMovingAverage;        \/\/\/< exponential moving average with alpha = 0.01$/;"	m	struct:g2o::TicTocElement	file:
g2o	trunk/g2o/stuff/tictoc.cpp	/^namespace g2o {$/;"	n	file:
maxTime	trunk/g2o/stuff/tictoc.cpp	/^    double maxTime;$/;"	m	struct:g2o::TicTocElement	file:
minTime	trunk/g2o/stuff/tictoc.cpp	/^    double minTime;$/;"	m	struct:g2o::TicTocElement	file:
numCalls	trunk/g2o/stuff/tictoc.cpp	/^    int numCalls;                           \/\/\/< the number of calls$/;"	m	struct:g2o::TicTocElement	file:
operator <	trunk/g2o/stuff/tictoc.cpp	/^    bool operator<(const TicTocElement& other) const$/;"	f	struct:g2o::TicTocElement
ticTime	trunk/g2o/stuff/tictoc.cpp	/^    double ticTime;                         \/\/\/< the time of the last tic$/;"	m	struct:g2o::TicTocElement	file:
tictoc	trunk/g2o/stuff/tictoc.cpp	/^  double tictoc(const char* algorithmPart)$/;"	f	namespace:g2o
tictocElements	trunk/g2o/stuff/tictoc.cpp	/^    TicTocMap tictocElements;$/;"	m	struct:g2o::TicTocInitializer	file:
totalTime	trunk/g2o/stuff/tictoc.cpp	/^    double totalTime;                       \/\/\/< the total time of this part of the algorithm$/;"	m	struct:g2o::TicTocElement	file:
~ScopedTictoc	trunk/g2o/stuff/tictoc.cpp	/^  ScopedTictoc::~ScopedTictoc()$/;"	f	class:g2o::ScopedTictoc
~TicTocInitializer	trunk/g2o/stuff/tictoc.cpp	/^    ~TicTocInitializer()$/;"	f	struct:g2o::TicTocInitializer
G2O_SCOPED_TICTOC	trunk/g2o/stuff/tictoc.h	71;"	d
G2O_TICTOC_H	trunk/g2o/stuff/tictoc.h	28;"	d
ScopedTictoc	trunk/g2o/stuff/tictoc.h	/^   class G2O_STUFF_API ScopedTictoc$/;"	c	namespace:g2o
_algorithmPart	trunk/g2o/stuff/tictoc.h	/^       std::string _algorithmPart;$/;"	m	class:g2o::ScopedTictoc
g2o	trunk/g2o/stuff/tictoc.h	/^namespace g2o {$/;"	n
DELTA_EPOCH_IN_MICROSECS	trunk/g2o/stuff/timeutil.cpp	43;"	d	file:
DELTA_EPOCH_IN_MICROSECS	trunk/g2o/stuff/timeutil.cpp	45;"	d	file:
ScopeTime	trunk/g2o/stuff/timeutil.cpp	/^ScopeTime::ScopeTime(const char* title) : _title(title), _startTime(get_monotonic_time()) {}$/;"	f	class:g2o::ScopeTime
g2o	trunk/g2o/stuff/timeutil.cpp	/^namespace g2o {$/;"	n	file:
get_monotonic_time	trunk/g2o/stuff/timeutil.cpp	/^double get_monotonic_time()$/;"	f	namespace:g2o
gettimeofday	trunk/g2o/stuff/timeutil.cpp	/^int gettimeofday(struct timeval *tv, struct timezone *tz)$/;"	f	namespace:g2o
timezone	trunk/g2o/stuff/timeutil.cpp	/^struct timezone$/;"	s	namespace:g2o	file:
tz_dsttime	trunk/g2o/stuff/timeutil.cpp	/^  int  tz_dsttime;     \/* type of dst correction *\/$/;"	m	struct:g2o::timezone	file:
tz_minuteswest	trunk/g2o/stuff/timeutil.cpp	/^  int  tz_minuteswest; \/* minutes W of Greenwich *\/$/;"	m	struct:g2o::timezone	file:
~ScopeTime	trunk/g2o/stuff/timeutil.cpp	/^ScopeTime::~ScopeTime() {$/;"	f	class:g2o::ScopeTime
DO_EVERY	trunk/g2o/stuff/timeutil.h	66;"	d
DO_EVERY_TS	trunk/g2o/stuff/timeutil.h	50;"	d
G2O_TIMEUTIL_H	trunk/g2o/stuff/timeutil.h	28;"	d
MEASURE_FUNCTION_TIME	trunk/g2o/stuff/timeutil.h	127;"	d
MEASURE_TIME	trunk/g2o/stuff/timeutil.h	70;"	d
ScopeTime	trunk/g2o/stuff/timeutil.h	/^class G2O_STUFF_API ScopeTime {$/;"	c	namespace:g2o
_startTime	trunk/g2o/stuff/timeutil.h	/^    double _startTime;$/;"	m	class:g2o::ScopeTime
_title	trunk/g2o/stuff/timeutil.h	/^    std::string _title;$/;"	m	class:g2o::ScopeTime
g2o	trunk/g2o/stuff/timeutil.h	/^namespace g2o {$/;"	n
get_time	trunk/g2o/stuff/timeutil.h	/^inline double get_time() $/;"	f	namespace:g2o
timeval	trunk/g2o/stuff/timeutil.h	/^typedef struct timeval {$/;"	s	namespace:g2o
timeval	trunk/g2o/stuff/timeutil.h	/^} timeval;$/;"	t	namespace:g2o
tv_sec	trunk/g2o/stuff/timeutil.h	/^  long tv_sec;$/;"	m	struct:g2o::timeval
tv_usec	trunk/g2o/stuff/timeutil.h	/^  long tv_usec;$/;"	m	struct:g2o::timeval
G2O_UNSCENTED_	trunk/g2o/stuff/unscented.h	28;"	d
SigmaPoint	trunk/g2o/stuff/unscented.h	/^    SigmaPoint(): _wi(0), _wp(0) {}$/;"	f	struct:g2o::SigmaPoint
SigmaPoint	trunk/g2o/stuff/unscented.h	/^    SigmaPoint(const SampleType& sample, double wi, double wp):$/;"	f	struct:g2o::SigmaPoint
SigmaPoint	trunk/g2o/stuff/unscented.h	/^  struct SigmaPoint {$/;"	s	namespace:g2o
_sample	trunk/g2o/stuff/unscented.h	/^    SampleType _sample;$/;"	m	struct:g2o::SigmaPoint
_wi	trunk/g2o/stuff/unscented.h	/^    double _wi;$/;"	m	struct:g2o::SigmaPoint
_wp	trunk/g2o/stuff/unscented.h	/^    double _wp;$/;"	m	struct:g2o::SigmaPoint
g2o	trunk/g2o/stuff/unscented.h	/^namespace g2o {$/;"	n
reconstructGaussian	trunk/g2o/stuff/unscented.h	/^  void reconstructGaussian(SampleType& mean, CovarianceType& covariance, const std::vector<SigmaPoint<SampleType> >& sigmaPoints){$/;"	f	namespace:g2o
sampleUnscented	trunk/g2o/stuff/unscented.h	/^  bool sampleUnscented(std::vector<SigmaPoint <SampleType> >& sigmaPoints, const SampleType& mean, const CovarianceType& covariance){$/;"	f	namespace:g2o
DataQueue	trunk/g2o/types/data/data_queue.cpp	/^  DataQueue::DataQueue()$/;"	f	class:g2o::DataQueue
add	trunk/g2o/types/data/data_queue.cpp	/^  void DataQueue::add(RobotData* rd)$/;"	f	class:g2o::DataQueue
after	trunk/g2o/types/data/data_queue.cpp	/^  RobotData* DataQueue::after(double timestamp) const$/;"	f	class:g2o::DataQueue
before	trunk/g2o/types/data/data_queue.cpp	/^  RobotData* DataQueue::before(double timestamp) const$/;"	f	class:g2o::DataQueue
findClosestData	trunk/g2o/types/data/data_queue.cpp	/^  RobotData* DataQueue::findClosestData(double timestamp) const$/;"	f	class:g2o::DataQueue
g2o	trunk/g2o/types/data/data_queue.cpp	/^namespace g2o {$/;"	n	file:
~DataQueue	trunk/g2o/types/data/data_queue.cpp	/^  DataQueue::~DataQueue()$/;"	f	class:g2o::DataQueue
Buffer	trunk/g2o/types/data/data_queue.h	/^      typedef std::map<double, RobotData*>           Buffer;$/;"	t	class:g2o::DataQueue
DataQueue	trunk/g2o/types/data/data_queue.h	/^  class G2O_TYPES_DATA_API DataQueue$/;"	c	namespace:g2o
G2O_DATA_QUEUE_H	trunk/g2o/types/data/data_queue.h	28;"	d
_buffer	trunk/g2o/types/data/data_queue.h	/^      Buffer _buffer;$/;"	m	class:g2o::DataQueue
buffer	trunk/g2o/types/data/data_queue.h	/^      const Buffer& buffer() const {return _buffer;}$/;"	f	class:g2o::DataQueue
g2o	trunk/g2o/types/data/data_queue.h	/^namespace g2o {$/;"	n
G2O_TYPES_DATA_API	trunk/g2o/types/data/g2o_types_data_api.h	19;"	d
G2O_TYPES_DATA_API	trunk/g2o/types/data/g2o_types_data_api.h	21;"	d
G2O_TYPES_DATA_API	trunk/g2o/types/data/g2o_types_data_api.h	24;"	d
G2O_TYPES_DATA_API	trunk/g2o/types/data/g2o_types_data_api.h	29;"	d
G2O_TYPES_DATA_API_H	trunk/g2o/types/data/g2o_types_data_api.h	11;"	d
LaserParameters	trunk/g2o/types/data/laser_parameters.cpp	/^  LaserParameters::LaserParameters(int nbeams, double _firstBeamAngle, double _angularStep, double _maxRange)$/;"	f	class:g2o::LaserParameters
LaserParameters	trunk/g2o/types/data/laser_parameters.cpp	/^  LaserParameters::LaserParameters(int t, int nbeams, double _firstBeamAngle, double _angularStep, double _maxRange, double _accuracy, int _remissionMode)$/;"	f	class:g2o::LaserParameters
g2o	trunk/g2o/types/data/laser_parameters.cpp	/^namespace g2o {$/;"	n	file:
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/data/laser_parameters.h	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	struct:g2o::LaserParameters
G2O_LASER_PARAMETERS_H	trunk/g2o/types/data/laser_parameters.h	28;"	d
LaserParameters	trunk/g2o/types/data/laser_parameters.h	/^  struct G2O_TYPES_DATA_API LaserParameters$/;"	s	namespace:g2o
accuracy	trunk/g2o/types/data/laser_parameters.h	/^    double accuracy;$/;"	m	struct:g2o::LaserParameters
angularStep	trunk/g2o/types/data/laser_parameters.h	/^    double angularStep;$/;"	m	struct:g2o::LaserParameters
firstBeamAngle	trunk/g2o/types/data/laser_parameters.h	/^    double firstBeamAngle;$/;"	m	struct:g2o::LaserParameters
fov	trunk/g2o/types/data/laser_parameters.h	/^    double fov;$/;"	m	struct:g2o::LaserParameters
g2o	trunk/g2o/types/data/laser_parameters.h	/^namespace g2o {$/;"	n
laserPose	trunk/g2o/types/data/laser_parameters.h	/^    SE2 laserPose;$/;"	m	struct:g2o::LaserParameters
maxRange	trunk/g2o/types/data/laser_parameters.h	/^    double maxRange;$/;"	m	struct:g2o::LaserParameters
remissionMode	trunk/g2o/types/data/laser_parameters.h	/^    int remissionMode;$/;"	m	struct:g2o::LaserParameters
type	trunk/g2o/types/data/laser_parameters.h	/^    int type;$/;"	m	struct:g2o::LaserParameters
RawLaser	trunk/g2o/types/data/raw_laser.cpp	/^  RawLaser::RawLaser() :$/;"	f	class:g2o::RawLaser
cartesian	trunk/g2o/types/data/raw_laser.cpp	/^  RawLaser::Point2DVector RawLaser::cartesian() const$/;"	f	class:g2o::RawLaser
g2o	trunk/g2o/types/data/raw_laser.cpp	/^namespace g2o {$/;"	n	file:
read	trunk/g2o/types/data/raw_laser.cpp	/^  bool RawLaser::read(std::istream& is)$/;"	f	class:g2o::RawLaser
setLaserParams	trunk/g2o/types/data/raw_laser.cpp	/^  void RawLaser::setLaserParams(const LaserParameters& laserParams)$/;"	f	class:g2o::RawLaser
setRanges	trunk/g2o/types/data/raw_laser.cpp	/^  void RawLaser::setRanges(const vector<double>& ranges)$/;"	f	class:g2o::RawLaser
setRemissions	trunk/g2o/types/data/raw_laser.cpp	/^  void RawLaser::setRemissions(const std::vector<double>& remissions)$/;"	f	class:g2o::RawLaser
write	trunk/g2o/types/data/raw_laser.cpp	/^  bool RawLaser::write(std::ostream& \/*os*\/) const$/;"	f	class:g2o::RawLaser
~RawLaser	trunk/g2o/types/data/raw_laser.cpp	/^  RawLaser::~RawLaser()$/;"	f	class:g2o::RawLaser
G2O_RAW_LASER_H	trunk/g2o/types/data/raw_laser.h	28;"	d
Point2DVector	trunk/g2o/types/data/raw_laser.h	/^      typedef std::vector<Eigen::Vector2d, Eigen::aligned_allocator<Eigen::Vector2d> >      Point2DVector;$/;"	t	class:g2o::RawLaser
RawLaser	trunk/g2o/types/data/raw_laser.h	/^  class G2O_TYPES_DATA_API RawLaser : public RobotData {$/;"	c	namespace:g2o
_laserParams	trunk/g2o/types/data/raw_laser.h	/^      LaserParameters _laserParams;$/;"	m	class:g2o::RawLaser
_ranges	trunk/g2o/types/data/raw_laser.h	/^      std::vector<double> _ranges;$/;"	m	class:g2o::RawLaser
_remissions	trunk/g2o/types/data/raw_laser.h	/^      std::vector<double> _remissions;$/;"	m	class:g2o::RawLaser
g2o	trunk/g2o/types/data/raw_laser.h	/^namespace g2o {$/;"	n
laserParams	trunk/g2o/types/data/raw_laser.h	/^      const LaserParameters& laserParams() const { return _laserParams;}$/;"	f	class:g2o::RawLaser
ranges	trunk/g2o/types/data/raw_laser.h	/^      const std::vector<double>& ranges() const { return _ranges;}$/;"	f	class:g2o::RawLaser
remissions	trunk/g2o/types/data/raw_laser.h	/^      const std::vector<double>& remissions() const { return _remissions;}$/;"	f	class:g2o::RawLaser
RobotData	trunk/g2o/types/data/robot_data.cpp	/^  RobotData::RobotData() :$/;"	f	class:g2o::RobotData
g2o	trunk/g2o/types/data/robot_data.cpp	/^namespace g2o {$/;"	n	file:
setHostname	trunk/g2o/types/data/robot_data.cpp	/^  void RobotData::setHostname(const std::string& hostname)$/;"	f	class:g2o::RobotData
setLoggerTimestamp	trunk/g2o/types/data/robot_data.cpp	/^  void RobotData::setLoggerTimestamp(double ts)$/;"	f	class:g2o::RobotData
setTag	trunk/g2o/types/data/robot_data.cpp	/^  void RobotData::setTag(const std::string& tag)$/;"	f	class:g2o::RobotData
setTimestamp	trunk/g2o/types/data/robot_data.cpp	/^  void RobotData::setTimestamp(double ts)$/;"	f	class:g2o::RobotData
~RobotData	trunk/g2o/types/data/robot_data.cpp	/^  RobotData::~RobotData()$/;"	f	class:g2o::RobotData
G2O_ROBOT_DATA_H	trunk/g2o/types/data/robot_data.h	28;"	d
RobotData	trunk/g2o/types/data/robot_data.h	/^  class G2O_TYPES_DATA_API RobotData : public OptimizableGraph::Data$/;"	c	namespace:g2o
_hostname	trunk/g2o/types/data/robot_data.h	/^      std::string _hostname; \/\/\/< name of the computer\/robot generating the data$/;"	m	class:g2o::RobotData
_loggerTimestamp	trunk/g2o/types/data/robot_data.h	/^      double _loggerTimestamp; \/\/\/< timestamp when the measurement was recorded$/;"	m	class:g2o::RobotData
_tag	trunk/g2o/types/data/robot_data.h	/^      std::string _tag; \/\/\/< string tag (FLASER, ROBOTLASER, ODOM..) of the line in the log$/;"	m	class:g2o::RobotData
_timestamp	trunk/g2o/types/data/robot_data.h	/^      double _timestamp; \/\/\/< timestamp when the measurement was generated$/;"	m	class:g2o::RobotData
g2o	trunk/g2o/types/data/robot_data.h	/^namespace g2o {$/;"	n
hostname	trunk/g2o/types/data/robot_data.h	/^      const std::string& hostname() const { return _hostname;}$/;"	f	class:g2o::RobotData
loggerTimestamp	trunk/g2o/types/data/robot_data.h	/^      double loggerTimestamp() const { return _loggerTimestamp;}$/;"	f	class:g2o::RobotData
tag	trunk/g2o/types/data/robot_data.h	/^      const std::string& tag() const { return _tag;}$/;"	f	class:g2o::RobotData
timestamp	trunk/g2o/types/data/robot_data.h	/^      double timestamp() const { return _timestamp;}$/;"	f	class:g2o::RobotData
RobotLaser	trunk/g2o/types/data/robot_laser.cpp	/^  RobotLaser::RobotLaser() :$/;"	f	class:g2o::RobotLaser
RobotLaserDrawAction	trunk/g2o/types/data/robot_laser.cpp	/^  RobotLaserDrawAction::RobotLaserDrawAction(): DrawAction(typeid(RobotLaser).name()){$/;"	f	class:g2o::RobotLaserDrawAction
g2o	trunk/g2o/types/data/robot_laser.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/types/data/robot_laser.cpp	/^  HyperGraphElementAction* RobotLaserDrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::RobotLaserDrawAction
read	trunk/g2o/types/data/robot_laser.cpp	/^  bool RobotLaser::read(std::istream& is)$/;"	f	class:g2o::RobotLaser
refreshPropertyPtrs	trunk/g2o/types/data/robot_laser.cpp	/^  bool RobotLaserDrawAction::refreshPropertyPtrs(HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::RobotLaserDrawAction
setOdomPose	trunk/g2o/types/data/robot_laser.cpp	/^  void RobotLaser::setOdomPose(const SE2& odomPose)$/;"	f	class:g2o::RobotLaser
write	trunk/g2o/types/data/robot_laser.cpp	/^  bool RobotLaser::write(std::ostream& os) const$/;"	f	class:g2o::RobotLaser
~RobotLaser	trunk/g2o/types/data/robot_laser.cpp	/^  RobotLaser::~RobotLaser()$/;"	f	class:g2o::RobotLaser
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/data/robot_laser.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::RobotLaser
G2O_ROBOT_LASER_H	trunk/g2o/types/data/robot_laser.h	28;"	d
RobotLaser	trunk/g2o/types/data/robot_laser.h	/^  class G2O_TYPES_DATA_API RobotLaser : public RawLaser$/;"	c	namespace:g2o
RobotLaserDrawAction	trunk/g2o/types/data/robot_laser.h	/^  class G2O_TYPES_DATA_API RobotLaserDrawAction: public DrawAction{$/;"	c	namespace:g2o
_beamsDownsampling	trunk/g2o/types/data/robot_laser.h	/^    IntProperty* _beamsDownsampling;$/;"	m	class:g2o::RobotLaserDrawAction
_forwardSafetyDist	trunk/g2o/types/data/robot_laser.h	/^      double _laserTv, _laserRv, _forwardSafetyDist, _sideSaftyDist, _turnAxis;$/;"	m	class:g2o::RobotLaser
_laserRv	trunk/g2o/types/data/robot_laser.h	/^      double _laserTv, _laserRv, _forwardSafetyDist, _sideSaftyDist, _turnAxis;$/;"	m	class:g2o::RobotLaser
_laserTv	trunk/g2o/types/data/robot_laser.h	/^      double _laserTv, _laserRv, _forwardSafetyDist, _sideSaftyDist, _turnAxis;$/;"	m	class:g2o::RobotLaser
_maxRange	trunk/g2o/types/data/robot_laser.h	/^    FloatProperty* _maxRange;$/;"	m	class:g2o::RobotLaserDrawAction
_odomPose	trunk/g2o/types/data/robot_laser.h	/^      SE2 _odomPose;$/;"	m	class:g2o::RobotLaser
_pointSize	trunk/g2o/types/data/robot_laser.h	/^    FloatProperty* _pointSize;$/;"	m	class:g2o::RobotLaserDrawAction
_sideSaftyDist	trunk/g2o/types/data/robot_laser.h	/^      double _laserTv, _laserRv, _forwardSafetyDist, _sideSaftyDist, _turnAxis;$/;"	m	class:g2o::RobotLaser
_turnAxis	trunk/g2o/types/data/robot_laser.h	/^      double _laserTv, _laserRv, _forwardSafetyDist, _sideSaftyDist, _turnAxis;$/;"	m	class:g2o::RobotLaser
g2o	trunk/g2o/types/data/robot_laser.h	/^namespace g2o {$/;"	n
laserPose	trunk/g2o/types/data/robot_laser.h	/^      SE2 laserPose() const { return _odomPose * _laserParams.laserPose;} $/;"	f	class:g2o::RobotLaser
odomPose	trunk/g2o/types/data/robot_laser.h	/^      const SE2& odomPose() const { return _odomPose;}$/;"	f	class:g2o::RobotLaser
RobotLaserDrawAction	trunk/g2o/types/data/types_data.cpp	/^  G2O_REGISTER_ACTION(RobotLaserDrawAction);$/;"	v
VertexTagDrawAction	trunk/g2o/types/data/types_data.cpp	/^  G2O_REGISTER_ACTION(VertexTagDrawAction);$/;"	v
data	trunk/g2o/types/data/types_data.cpp	/^  G2O_REGISTER_TYPE_GROUP(data);$/;"	v
g2o	trunk/g2o/types/data/types_data.cpp	/^namespace g2o {$/;"	n	file:
G2O_TYPES_DATA_H	trunk/g2o/types/data/types_data.h	28;"	d
VertexTag	trunk/g2o/types/data/vertex_tag.cpp	/^  VertexTag::VertexTag() : RobotData()$/;"	f	class:g2o::VertexTag
VertexTagDrawAction	trunk/g2o/types/data/vertex_tag.cpp	/^  VertexTagDrawAction::VertexTagDrawAction(): DrawAction(typeid(VertexTag).name()){$/;"	f	class:g2o::VertexTagDrawAction
g2o	trunk/g2o/types/data/vertex_tag.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/types/data/vertex_tag.cpp	/^  HyperGraphElementAction* VertexTagDrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::VertexTagDrawAction
read	trunk/g2o/types/data/vertex_tag.cpp	/^  bool VertexTag::read(std::istream& is)$/;"	f	class:g2o::VertexTag
refreshPropertyPtrs	trunk/g2o/types/data/vertex_tag.cpp	/^  bool VertexTagDrawAction::refreshPropertyPtrs(HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::VertexTagDrawAction
write	trunk/g2o/types/data/vertex_tag.cpp	/^  bool VertexTag::write(std::ostream& os) const$/;"	f	class:g2o::VertexTag
~VertexTag	trunk/g2o/types/data/vertex_tag.cpp	/^  VertexTag::~VertexTag()$/;"	f	class:g2o::VertexTag
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/data/vertex_tag.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::VertexTag
G2O_VERTEX_TAG_H	trunk/g2o/types/data/vertex_tag.h	28;"	d
VertexTag	trunk/g2o/types/data/vertex_tag.h	/^  class G2O_TYPES_DATA_API VertexTag : public RobotData$/;"	c	namespace:g2o
VertexTagDrawAction	trunk/g2o/types/data/vertex_tag.h	/^  class G2O_TYPES_DATA_API VertexTagDrawAction: public DrawAction{$/;"	c	namespace:g2o
_name	trunk/g2o/types/data/vertex_tag.h	/^      std::string _name;$/;"	m	class:g2o::VertexTag
_odom2d	trunk/g2o/types/data/vertex_tag.h	/^      Eigen::Vector3f _odom2d;$/;"	m	class:g2o::VertexTag
_position	trunk/g2o/types/data/vertex_tag.h	/^      Eigen::Vector3f _position;$/;"	m	class:g2o::VertexTag
_textSize	trunk/g2o/types/data/vertex_tag.h	/^    DoubleProperty* _textSize;$/;"	m	class:g2o::VertexTagDrawAction
g2o	trunk/g2o/types/data/vertex_tag.h	/^namespace g2o {$/;"	n
name	trunk/g2o/types/data/vertex_tag.h	/^      const std::string name() const { return _name;} $/;"	f	class:g2o::VertexTag
position	trunk/g2o/types/data/vertex_tag.h	/^      const Eigen::Vector3f& position() const {return _position;}$/;"	f	class:g2o::VertexTag
setName	trunk/g2o/types/data/vertex_tag.h	/^      void setName(const std::string& name_) {_name=name_;}$/;"	f	class:g2o::VertexTag
setPosition	trunk/g2o/types/data/vertex_tag.h	/^      void setPosition( const Eigen::Vector3f& p) {_position = p;}$/;"	f	class:g2o::VertexTag
EdgeSE3Offset	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.cpp	/^  EdgeSE3Offset::EdgeSE3Offset() : BaseBinaryEdge<6, SE3Quat, VertexSE3, VertexSE3>() {$/;"	f	class:g2o::deprecated::EdgeSE3Offset
computeError	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.cpp	/^  void EdgeSE3Offset::computeError() {$/;"	f	class:g2o::deprecated::EdgeSE3Offset
deprecated	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.cpp	/^namespace deprecated {$/;"	n	namespace:g2o	file:
g2o	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.cpp	/^  void EdgeSE3Offset::initialEstimate(const OptimizableGraph::VertexSet& from_, OptimizableGraph::Vertex* \/*to_*\/) {$/;"	f	class:g2o::deprecated::EdgeSE3Offset
linearizeOplus	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.cpp	/^  void EdgeSE3Offset::linearizeOplus(){$/;"	f	class:g2o::deprecated::EdgeSE3Offset
read	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.cpp	/^  bool EdgeSE3Offset::read(std::istream& is) {$/;"	f	class:g2o::deprecated::EdgeSE3Offset
resolveCaches	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.cpp	/^  bool EdgeSE3Offset::resolveCaches(){$/;"	f	class:g2o::deprecated::EdgeSE3Offset
setMeasurementFromState	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.cpp	/^  bool EdgeSE3Offset::setMeasurementFromState(){$/;"	f	class:g2o::deprecated::EdgeSE3Offset
write	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.cpp	/^  bool EdgeSE3Offset::write(std::ostream& os) const {$/;"	f	class:g2o::deprecated::EdgeSE3Offset
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::deprecated::EdgeSE3Offset
EdgeSE3Offset	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.h	/^  class G2O_DEPRECATED_TYPES_SLAM3D_API EdgeSE3Offset : public BaseBinaryEdge<6, SE3Quat, VertexSE3, VertexSE3> {$/;"	c	namespace:g2o::deprecated
G2O_DEPRECATED_EDGE_SE3_OFFSET_H_	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.h	28;"	d
_cacheFrom	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.h	/^      CacheSE3Offset  *_cacheFrom, *_cacheTo;$/;"	m	class:g2o::deprecated::EdgeSE3Offset
_cacheTo	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.h	/^      CacheSE3Offset  *_cacheFrom, *_cacheTo;$/;"	m	class:g2o::deprecated::EdgeSE3Offset
_inverseMeasurement	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.h	/^      SE3Quat _inverseMeasurement;$/;"	m	class:g2o::deprecated::EdgeSE3Offset
_offsetFrom	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.h	/^      ParameterSE3Offset *_offsetFrom, *_offsetTo;$/;"	m	class:g2o::deprecated::EdgeSE3Offset
_offsetTo	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.h	/^      ParameterSE3Offset *_offsetFrom, *_offsetTo;$/;"	m	class:g2o::deprecated::EdgeSE3Offset
deprecated	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.h	/^namespace deprecated {$/;"	n	namespace:g2o
g2o	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.h	/^namespace g2o {$/;"	n
getMeasurementData	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.h	/^      virtual bool getMeasurementData(double* d) const{$/;"	f	class:g2o::deprecated::EdgeSE3Offset
initialEstimatePossible	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.h	/^      virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& \/*from*\/, $/;"	f	class:g2o::deprecated::EdgeSE3Offset
measurementDimension	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.h	/^      virtual int measurementDimension() const {return 7;}$/;"	f	class:g2o::deprecated::EdgeSE3Offset
setMeasurement	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.h	/^      virtual void setMeasurement(const SE3Quat& m){$/;"	f	class:g2o::deprecated::EdgeSE3Offset
setMeasurementData	trunk/g2o/types/deprecated/slam3d/edge_se3_offset.h	/^      virtual bool setMeasurementData(const double* d){$/;"	f	class:g2o::deprecated::EdgeSE3Offset
EdgeSE3PointXYZ	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.cpp	/^  EdgeSE3PointXYZ::EdgeSE3PointXYZ() : BaseBinaryEdge<3, Vector3d, VertexSE3, VertexPointXYZ>() {$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZ
computeError	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.cpp	/^  void EdgeSE3PointXYZ::computeError() {$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZ
deprecated	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.cpp	/^namespace deprecated {$/;"	n	namespace:g2o	file:
g2o	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.cpp	/^  void EdgeSE3PointXYZ::initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/*to_*\/)$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZ
linearizeOplus	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.cpp	/^  void EdgeSE3PointXYZ::linearizeOplus() {$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZ
read	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.cpp	/^  bool EdgeSE3PointXYZ::read(std::istream& is) {$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZ
resolveCaches	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.cpp	/^  bool EdgeSE3PointXYZ::resolveCaches(){$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZ
setMeasurementFromState	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.cpp	/^  bool EdgeSE3PointXYZ::setMeasurementFromState(){$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZ
write	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.cpp	/^  bool EdgeSE3PointXYZ::write(std::ostream& os) const {$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZ
EdgeSE3PointXYZ	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.h	/^  class G2O_DEPRECATED_TYPES_SLAM3D_API EdgeSE3PointXYZ : public BaseBinaryEdge<3, Vector3d, VertexSE3, VertexPointXYZ> {$/;"	c	namespace:g2o::deprecated
G2O_DEPRECATED_EDGE_SE3_POINT_XYZ_H_	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.h	28;"	d
J	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.h	/^    Eigen::Matrix<double,3,9> J; \/\/ jacobian before projection$/;"	m	class:g2o::deprecated::EdgeSE3PointXYZ
cache	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.h	/^    CacheSE3Offset* cache;$/;"	m	class:g2o::deprecated::EdgeSE3PointXYZ
deprecated	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.h	/^namespace deprecated {$/;"	n	namespace:g2o
g2o	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.h	/^namespace g2o {$/;"	n
getMeasurementData	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.h	/^    virtual bool getMeasurementData(double* d) const{$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZ
initialEstimatePossible	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.h	/^    virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& from, $/;"	f	class:g2o::deprecated::EdgeSE3PointXYZ
measurementDimension	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.h	/^    virtual int measurementDimension() const {return 3;}$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZ
offsetParam	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.h	/^    ParameterSE3Offset* offsetParam;$/;"	m	class:g2o::deprecated::EdgeSE3PointXYZ
setMeasurement	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.h	/^    virtual void setMeasurement(const Vector3d& m){$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZ
setMeasurementData	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz.h	/^    virtual bool setMeasurementData(const double* d){$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZ
EdgeSE3PointXYZDepth	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.cpp	/^  EdgeSE3PointXYZDepth::EdgeSE3PointXYZDepth() : BaseBinaryEdge<3, Vector3d, VertexSE3, VertexPointXYZ>() {$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDepth
computeError	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.cpp	/^  void EdgeSE3PointXYZDepth::computeError() {$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDepth
deprecated	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.cpp	/^namespace deprecated {$/;"	n	namespace:g2o	file:
g2o	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.cpp	/^  void EdgeSE3PointXYZDepth::initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/*to_*\/)$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDepth
linearizeOplus	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.cpp	/^  void EdgeSE3PointXYZDepth::linearizeOplus() {$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDepth
read	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.cpp	/^  bool EdgeSE3PointXYZDepth::read(std::istream& is) {$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDepth
resolveCaches	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.cpp	/^  bool EdgeSE3PointXYZDepth::resolveCaches(){$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDepth
setMeasurementFromState	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.cpp	/^  bool EdgeSE3PointXYZDepth::setMeasurementFromState(){$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDepth
write	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.cpp	/^  bool EdgeSE3PointXYZDepth::write(std::ostream& os) const {$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDepth
EdgeSE3PointXYZDepth	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.h	/^  class G2O_DEPRECATED_TYPES_SLAM3D_API EdgeSE3PointXYZDepth : public BaseBinaryEdge<3, Vector3d, VertexSE3, VertexPointXYZ> {$/;"	c	namespace:g2o::deprecated
G2O_DEPRECATED_EDGE_PROJECT_DEPTH_H_	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.h	28;"	d
J	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.h	/^    Eigen::Matrix<double,3,9> J; \/\/ jacobian before projection$/;"	m	class:g2o::deprecated::EdgeSE3PointXYZDepth
cache	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.h	/^    CacheCamera* cache;$/;"	m	class:g2o::deprecated::EdgeSE3PointXYZDepth
deprecated	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.h	/^namespace deprecated {$/;"	n	namespace:g2o
g2o	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.h	/^namespace g2o {$/;"	n
getMeasurementData	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.h	/^    virtual bool getMeasurementData(double* d) const{$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDepth
initialEstimatePossible	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.h	/^    virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& from, $/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDepth
measurementDimension	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.h	/^    virtual int measurementDimension() const {return 3;}$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDepth
params	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.h	/^    ParameterCamera* params;$/;"	m	class:g2o::deprecated::EdgeSE3PointXYZDepth
setMeasurement	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.h	/^    virtual void setMeasurement(const Vector3d& m){$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDepth
setMeasurementData	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_depth.h	/^    virtual bool setMeasurementData(const double* d){$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDepth
EdgeProjectDisparityDrawAction	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.cpp	/^  EdgeProjectDisparityDrawAction::EdgeProjectDisparityDrawAction(): DrawAction(typeid(EdgeSE3PointXYZDisparity).name()){}$/;"	f	class:g2o::deprecated::EdgeProjectDisparityDrawAction
EdgeSE3PointXYZDisparity	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.cpp	/^  EdgeSE3PointXYZDisparity::EdgeSE3PointXYZDisparity() : BaseBinaryEdge<3, Vector3d, VertexSE3, VertexPointXYZ>() {$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDisparity
computeError	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.cpp	/^  void EdgeSE3PointXYZDisparity::computeError() {$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDisparity
deprecated	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.cpp	/^namespace deprecated {$/;"	n	namespace:g2o	file:
g2o	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.cpp	/^  void EdgeSE3PointXYZDisparity::initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/*to*\/)$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDisparity
linearizeOplus	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.cpp	/^  void EdgeSE3PointXYZDisparity::linearizeOplus() {$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDisparity
operator ()	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.cpp	/^  HyperGraphElementAction* EdgeProjectDisparityDrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::deprecated::EdgeProjectDisparityDrawAction
read	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.cpp	/^  bool EdgeSE3PointXYZDisparity::read(std::istream& is) {$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDisparity
resolveCaches	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.cpp	/^  bool EdgeSE3PointXYZDisparity::resolveCaches(){$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDisparity
setMeasurementFromState	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.cpp	/^  bool EdgeSE3PointXYZDisparity::setMeasurementFromState(){$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDisparity
write	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.cpp	/^  bool EdgeSE3PointXYZDisparity::write(std::ostream& os) const {$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDisparity
EDGE_PROJECT_DISPARITY_ANALYTIC_JACOBIAN	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.h	36;"	d
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.h	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::deprecated::EdgeSE3PointXYZDisparity
EdgeProjectDisparityDrawAction	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.h	/^  class EdgeProjectDisparityDrawAction: public DrawAction{$/;"	c	namespace:g2o::deprecated
EdgeSE3PointXYZDisparity	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.h	/^  class G2O_DEPRECATED_TYPES_SLAM3D_API EdgeSE3PointXYZDisparity : public BaseBinaryEdge<3, Vector3d, VertexSE3, VertexPointXYZ> {$/;"	c	namespace:g2o::deprecated
G2O_DEPRECATED_EDGE_SE3_POINTXYZ_DISPARITY_H_	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.h	28;"	d
J	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.h	/^    Eigen::Matrix<double,3,9> J; \/\/ jacobian before projection$/;"	m	class:g2o::deprecated::EdgeSE3PointXYZDisparity
cache	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.h	/^    CacheCamera* cache;$/;"	m	class:g2o::deprecated::EdgeSE3PointXYZDisparity
deprecated	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.h	/^namespace deprecated {$/;"	n	namespace:g2o
g2o	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.h	/^namespace g2o {$/;"	n
getMeasurementData	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.h	/^    virtual bool getMeasurementData(double* d) const{$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDisparity
initialEstimatePossible	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.h	/^    virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& from, $/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDisparity
measurementDimension	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.h	/^    virtual int measurementDimension() const {return 3;}$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDisparity
params	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.h	/^    ParameterCamera* params;$/;"	m	class:g2o::deprecated::EdgeSE3PointXYZDisparity
setMeasurement	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.h	/^    virtual void setMeasurement(const Vector3d& m){$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDisparity
setMeasurementData	trunk/g2o/types/deprecated/slam3d/edge_se3_pointxyz_disparity.h	/^    virtual bool setMeasurementData(const double* d){$/;"	f	class:g2o::deprecated::EdgeSE3PointXYZDisparity
EdgeSE3Prior	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.cpp	/^  EdgeSE3Prior::EdgeSE3Prior() : BaseUnaryEdge<6, SE3Quat, VertexSE3>() {$/;"	f	class:g2o::deprecated::EdgeSE3Prior
computeError	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.cpp	/^  void EdgeSE3Prior::computeError() {$/;"	f	class:g2o::deprecated::EdgeSE3Prior
deprecated	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.cpp	/^namespace deprecated {$/;"	n	namespace:g2o	file:
g2o	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.cpp	/^  void EdgeSE3Prior::initialEstimate(const OptimizableGraph::VertexSet& \/*from_*\/, OptimizableGraph::Vertex* \/*to_*\/) {$/;"	f	class:g2o::deprecated::EdgeSE3Prior
linearizeOplus	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.cpp	/^  void EdgeSE3Prior::linearizeOplus(){$/;"	f	class:g2o::deprecated::EdgeSE3Prior
read	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.cpp	/^  bool EdgeSE3Prior::read(std::istream& is) {$/;"	f	class:g2o::deprecated::EdgeSE3Prior
resolveCaches	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.cpp	/^  bool EdgeSE3Prior::resolveCaches(){$/;"	f	class:g2o::deprecated::EdgeSE3Prior
setMeasurementFromState	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.cpp	/^  bool EdgeSE3Prior::setMeasurementFromState(){$/;"	f	class:g2o::deprecated::EdgeSE3Prior
write	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.cpp	/^  bool EdgeSE3Prior::write(std::ostream& os) const {$/;"	f	class:g2o::deprecated::EdgeSE3Prior
EdgeSE3Prior	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.h	/^  class G2O_DEPRECATED_TYPES_SLAM3D_API EdgeSE3Prior : public BaseUnaryEdge<6, SE3Quat, VertexSE3> {$/;"	c	namespace:g2o::deprecated
G2O_DEPRECATED_EDGE_SE3_PRIOR_H_	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.h	28;"	d
_cache	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.h	/^    CacheSE3Offset* _cache;$/;"	m	class:g2o::deprecated::EdgeSE3Prior
_inverseMeasurement	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.h	/^    SE3Quat _inverseMeasurement;$/;"	m	class:g2o::deprecated::EdgeSE3Prior
_offsetParam	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.h	/^    ParameterSE3Offset* _offsetParam;$/;"	m	class:g2o::deprecated::EdgeSE3Prior
deprecated	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.h	/^namespace deprecated {$/;"	n	namespace:g2o
g2o	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.h	/^namespace g2o {$/;"	n
getMeasurementData	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.h	/^    virtual bool getMeasurementData(double* d) const{$/;"	f	class:g2o::deprecated::EdgeSE3Prior
initialEstimatePossible	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.h	/^    virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& \/*from*\/, $/;"	f	class:g2o::deprecated::EdgeSE3Prior
measurementDimension	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.h	/^    virtual int measurementDimension() const {return 7;}$/;"	f	class:g2o::deprecated::EdgeSE3Prior
setMeasurement	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.h	/^    virtual void setMeasurement(const SE3Quat& m){$/;"	f	class:g2o::deprecated::EdgeSE3Prior
setMeasurementData	trunk/g2o/types/deprecated/slam3d/edge_se3_prior.h	/^    virtual bool setMeasurementData(const double* d){$/;"	f	class:g2o::deprecated::EdgeSE3Prior
EdgeSE3	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.cpp	/^  EdgeSE3::EdgeSE3() :$/;"	f	class:g2o::deprecated::EdgeSE3
EdgeSE3DrawAction	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.cpp	/^  EdgeSE3DrawAction::EdgeSE3DrawAction(): DrawAction(typeid(EdgeSE3).name()){}$/;"	f	class:g2o::deprecated::EdgeSE3DrawAction
EdgeSE3WriteGnuplotAction	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.cpp	/^  EdgeSE3WriteGnuplotAction::EdgeSE3WriteGnuplotAction(): WriteGnuplotAction(typeid(EdgeSE3).name()){}$/;"	f	class:g2o::deprecated::EdgeSE3WriteGnuplotAction
deprecated	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.cpp	/^namespace deprecated {$/;"	n	namespace:g2o	file:
g2o	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.cpp	/^  void EdgeSE3::initialEstimate(const OptimizableGraph::VertexSet& from_, OptimizableGraph::Vertex* \/*to_*\/)$/;"	f	class:g2o::deprecated::EdgeSE3
linearizeOplus	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.cpp	/^  void EdgeSE3::linearizeOplus(){$/;"	f	class:g2o::deprecated::EdgeSE3
operator ()	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.cpp	/^  HyperGraphElementAction* EdgeSE3DrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::deprecated::EdgeSE3DrawAction
operator ()	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.cpp	/^  HyperGraphElementAction* EdgeSE3WriteGnuplotAction::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::deprecated::EdgeSE3WriteGnuplotAction
read	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.cpp	/^  bool EdgeSE3::read(std::istream& is)$/;"	f	class:g2o::deprecated::EdgeSE3
setMeasurementFromState	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.cpp	/^  bool EdgeSE3::setMeasurementFromState(){$/;"	f	class:g2o::deprecated::EdgeSE3
write	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.cpp	/^  bool EdgeSE3::write(std::ostream& os) const$/;"	f	class:g2o::deprecated::EdgeSE3
EDGE_SE3_QUAT_ANALYTIC_JACOBIAN	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.h	36;"	d
EdgeSE3	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.h	/^ class G2O_DEPRECATED_TYPES_SLAM3D_API EdgeSE3 : public BaseBinaryEdge<6, SE3Quat, VertexSE3, VertexSE3>$/;"	c	namespace:g2o::deprecated
EdgeSE3DrawAction	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.h	/^  class EdgeSE3DrawAction: public DrawAction{$/;"	c	namespace:g2o::deprecated
EdgeSE3WriteGnuplotAction	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.h	/^  class EdgeSE3WriteGnuplotAction: public WriteGnuplotAction {$/;"	c	namespace:g2o::deprecated
G2O_DEPRECATED_EDGE_SE3_QUAT_	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.h	28;"	d
_inverseMeasurement	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.h	/^    SE3Quat _inverseMeasurement;$/;"	m	class:g2o::deprecated::EdgeSE3
computeError	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.h	/^    void computeError()$/;"	f	class:g2o::deprecated::EdgeSE3
deprecated	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.h	/^namespace deprecated {$/;"	n	namespace:g2o
g2o	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.h	/^namespace g2o {$/;"	n
getMeasurementData	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.h	/^    virtual bool getMeasurementData(double* d) const{$/;"	f	class:g2o::deprecated::EdgeSE3
initialEstimatePossible	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.h	/^    virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& , OptimizableGraph::Vertex* ) { return 1.;}$/;"	f	class:g2o::deprecated::EdgeSE3
measurementDimension	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.h	/^    virtual int measurementDimension() const {return 7;}$/;"	f	class:g2o::deprecated::EdgeSE3
setMeasurement	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.h	/^    virtual void setMeasurement(const SE3Quat& m){$/;"	f	class:g2o::deprecated::EdgeSE3
setMeasurementData	trunk/g2o/types/deprecated/slam3d/edge_se3_quat.h	/^    virtual bool setMeasurementData(const double* d){$/;"	f	class:g2o::deprecated::EdgeSE3
G2O_DEPRECATED_TYPES_SLAM3D_API	trunk/g2o/types/deprecated/slam3d/g2o_deprecated_types_slam3d_api.h	19;"	d
G2O_DEPRECATED_TYPES_SLAM3D_API	trunk/g2o/types/deprecated/slam3d/g2o_deprecated_types_slam3d_api.h	21;"	d
G2O_DEPRECATED_TYPES_SLAM3D_API	trunk/g2o/types/deprecated/slam3d/g2o_deprecated_types_slam3d_api.h	24;"	d
G2O_DEPRECATED_TYPES_SLAM3D_API	trunk/g2o/types/deprecated/slam3d/g2o_deprecated_types_slam3d_api.h	29;"	d
G2O_DEPRECATED_TYPES_SLAM3D_API_H	trunk/g2o/types/deprecated/slam3d/g2o_deprecated_types_slam3d_api.h	11;"	d
CacheCameraDrawAction	trunk/g2o/types/deprecated/slam3d/parameter_camera.cpp	/^  CacheCameraDrawAction::CacheCameraDrawAction(): DrawAction(typeid(CacheCamera).name()){$/;"	f	class:g2o::deprecated::CacheCameraDrawAction
ParameterCamera	trunk/g2o/types/deprecated/slam3d/parameter_camera.cpp	/^  ParameterCamera::ParameterCamera(){$/;"	f	class:g2o::deprecated::ParameterCamera
deprecated	trunk/g2o/types/deprecated/slam3d/parameter_camera.cpp	/^namespace deprecated {$/;"	n	namespace:g2o	file:
drawMyPyramid	trunk/g2o/types/deprecated/slam3d/parameter_camera.cpp	/^  static void drawMyPyramid(float height, float side){$/;"	f	namespace:g2o::deprecated	file:
g2o	trunk/g2o/types/deprecated/slam3d/parameter_camera.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/types/deprecated/slam3d/parameter_camera.cpp	/^  HyperGraphElementAction* CacheCameraDrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::deprecated::CacheCameraDrawAction
read	trunk/g2o/types/deprecated/slam3d/parameter_camera.cpp	/^  bool ParameterCamera::read(std::istream& is) {$/;"	f	class:g2o::deprecated::ParameterCamera
refreshPropertyPtrs	trunk/g2o/types/deprecated/slam3d/parameter_camera.cpp	/^  bool CacheCameraDrawAction::refreshPropertyPtrs(HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::deprecated::CacheCameraDrawAction
resolveDependancies	trunk/g2o/types/deprecated/slam3d/parameter_camera.cpp	/^  bool CacheCamera::resolveDependancies(){$/;"	f	class:g2o::deprecated::CacheCamera
setKcam	trunk/g2o/types/deprecated/slam3d/parameter_camera.cpp	/^  void ParameterCamera::setKcam(double fx, double fy, double cx, double cy){$/;"	f	class:g2o::deprecated::ParameterCamera
setOffset	trunk/g2o/types/deprecated/slam3d/parameter_camera.cpp	/^  void ParameterCamera::setOffset(const SE3Quat& offset_){$/;"	f	class:g2o::deprecated::ParameterCamera
updateImpl	trunk/g2o/types/deprecated/slam3d/parameter_camera.cpp	/^  void CacheCamera::updateImpl(){$/;"	f	class:g2o::deprecated::CacheCamera
write	trunk/g2o/types/deprecated/slam3d/parameter_camera.cpp	/^  bool ParameterCamera::write(std::ostream& os) const {$/;"	f	class:g2o::deprecated::ParameterCamera
CacheCamera	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	/^  class G2O_DEPRECATED_TYPES_SLAM3D_API CacheCamera: public CacheSE3Offset {$/;"	c	namespace:g2o::deprecated
CacheCameraDrawAction	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	/^  class G2O_DEPRECATED_TYPES_SLAM3D_API CacheCameraDrawAction: public DrawAction{$/;"	c	namespace:g2o::deprecated
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::deprecated::ParameterCamera
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::deprecated::CacheCamera
G2O_DEPRECATED_CAMERA_PARAMETERS_H_	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	28;"	d
Kcam	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	/^      const Eigen::Matrix3d& Kcam() const { return _Kcam;}$/;"	f	class:g2o::deprecated::ParameterCamera
Kcam_inverseOffsetR	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	/^      const Eigen::Matrix3d& Kcam_inverseOffsetR() const { return _Kcam_inverseOffsetR;}$/;"	f	class:g2o::deprecated::ParameterCamera
ParameterCamera	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	/^  class G2O_DEPRECATED_TYPES_SLAM3D_API ParameterCamera: public ParameterSE3Offset {$/;"	c	namespace:g2o::deprecated
_Kcam	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	/^      Eigen::Matrix3d _Kcam;$/;"	m	class:g2o::deprecated::ParameterCamera
_Kcam_inverseOffsetR	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	/^      Eigen::Matrix3d _Kcam_inverseOffsetR;$/;"	m	class:g2o::deprecated::ParameterCamera
_cameraSide	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	/^      FloatProperty* _cameraZ, *_cameraSide;$/;"	m	class:g2o::deprecated::CacheCameraDrawAction
_cameraZ	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	/^      FloatProperty* _cameraZ, *_cameraSide;$/;"	m	class:g2o::deprecated::CacheCameraDrawAction
_invKcam	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	/^      Eigen::Matrix3d _invKcam;$/;"	m	class:g2o::deprecated::ParameterCamera
_w2i	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	/^    Eigen::Affine3d _w2i; \/\/\/< world to image transform$/;"	m	class:g2o::deprecated::CacheCamera
camParams	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	/^    const ParameterCamera* camParams() const {return params;}$/;"	f	class:g2o::deprecated::CacheCamera
deprecated	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	/^namespace deprecated {$/;"	n	namespace:g2o
g2o	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	/^namespace g2o {$/;"	n
invKcam	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	/^      const Eigen::Matrix3d& invKcam() const { return _invKcam;}$/;"	f	class:g2o::deprecated::ParameterCamera
params	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	/^    ParameterCamera* params;$/;"	m	class:g2o::deprecated::CacheCamera
w2i	trunk/g2o/types/deprecated/slam3d/parameter_camera.h	/^    const Eigen::Affine3d& w2i() const {return _w2i;}$/;"	f	class:g2o::deprecated::CacheCamera
CacheSE3Offset	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.cpp	/^  CacheSE3Offset::CacheSE3Offset() :$/;"	f	class:g2o::deprecated::CacheSE3Offset
CacheSE3OffsetDrawAction	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.cpp	/^  CacheSE3OffsetDrawAction::CacheSE3OffsetDrawAction(): DrawAction(typeid(CacheSE3Offset).name()){$/;"	f	class:g2o::deprecated::CacheSE3OffsetDrawAction
ParameterSE3Offset	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.cpp	/^  ParameterSE3Offset::ParameterSE3Offset(){$/;"	f	class:g2o::deprecated::ParameterSE3Offset
deprecated	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.cpp	/^namespace deprecated {$/;"	n	namespace:g2o	file:
g2o	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.cpp	/^  HyperGraphElementAction* CacheSE3OffsetDrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::deprecated::CacheSE3OffsetDrawAction
read	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.cpp	/^  bool ParameterSE3Offset::read(std::istream& is) {$/;"	f	class:g2o::deprecated::ParameterSE3Offset
refreshPropertyPtrs	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.cpp	/^  bool CacheSE3OffsetDrawAction::refreshPropertyPtrs(HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::deprecated::CacheSE3OffsetDrawAction
resolveDependancies	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.cpp	/^  bool CacheSE3Offset::resolveDependancies(){$/;"	f	class:g2o::deprecated::CacheSE3Offset
setOffset	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.cpp	/^  void ParameterSE3Offset::setOffset(const SE3Quat& offset_){$/;"	f	class:g2o::deprecated::ParameterSE3Offset
setOffsetParam	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.cpp	/^  void CacheSE3Offset::setOffsetParam(ParameterSE3Offset* offsetParam)$/;"	f	class:g2o::deprecated::CacheSE3Offset
updateImpl	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.cpp	/^  void CacheSE3Offset::updateImpl(){$/;"	f	class:g2o::deprecated::CacheSE3Offset
write	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.cpp	/^  bool ParameterSE3Offset::write(std::ostream& os) const {$/;"	f	class:g2o::deprecated::ParameterSE3Offset
CacheSE3Offset	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^  class G2O_DEPRECATED_TYPES_SLAM3D_API CacheSE3Offset: public Cache {$/;"	c	namespace:g2o::deprecated
CacheSE3OffsetDrawAction	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^  class G2O_DEPRECATED_TYPES_SLAM3D_API CacheSE3OffsetDrawAction: public DrawAction{$/;"	c	namespace:g2o::deprecated
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::deprecated::CacheSE3Offset
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::deprecated::ParameterSE3Offset
G2O_DEPRECATED_VERTEX_SE3_OFFSET_PARAMETERS_H_	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	28;"	d
ParameterSE3Offset	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^  class G2O_DEPRECATED_TYPES_SLAM3D_API ParameterSE3Offset: public Parameter$/;"	c	namespace:g2o::deprecated
_cubeSide	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      FloatProperty* _cubeSide;$/;"	m	class:g2o::deprecated::CacheSE3OffsetDrawAction
_inverseOffsetMatrix	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      Eigen::Isometry3d _inverseOffsetMatrix;$/;"	m	class:g2o::deprecated::ParameterSE3Offset
_n2w	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      Eigen::Isometry3d _n2w; \/\/\/< sensor to world$/;"	m	class:g2o::deprecated::CacheSE3Offset
_offset	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      SE3Quat _offset;$/;"	m	class:g2o::deprecated::ParameterSE3Offset
_offsetMatrix	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      Eigen::Isometry3d _offsetMatrix;$/;"	m	class:g2o::deprecated::ParameterSE3Offset
_offsetParam	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      ParameterSE3Offset* _offsetParam; \/\/\/< the parameter connected to the cache$/;"	m	class:g2o::deprecated::CacheSE3Offset
_se3_n2w	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      SE3Quat _se3_n2w;$/;"	m	class:g2o::deprecated::CacheSE3Offset
_se3_w2n	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      SE3Quat _se3_w2n;$/;"	m	class:g2o::deprecated::CacheSE3Offset
_w2l	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      Eigen::Isometry3d _w2l; \/\/\/< world to local$/;"	m	class:g2o::deprecated::CacheSE3Offset
_w2n	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      Eigen::Isometry3d _w2n; \/\/\/< world to sensor transform$/;"	m	class:g2o::deprecated::CacheSE3Offset
deprecated	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^namespace deprecated {$/;"	n	namespace:g2o
g2o	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^namespace g2o {$/;"	n
inverseOffsetMatrix	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      const Eigen::Isometry3d& inverseOffsetMatrix() const { return _inverseOffsetMatrix;}$/;"	f	class:g2o::deprecated::ParameterSE3Offset
n2w	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      const SE3Quat& n2w() const {return _se3_n2w;}$/;"	f	class:g2o::deprecated::CacheSE3Offset
n2wMatrix	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      const Eigen::Isometry3d& n2wMatrix() const { return _n2w;}$/;"	f	class:g2o::deprecated::CacheSE3Offset
offset	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      const SE3Quat& offset() const { return _offset;}$/;"	f	class:g2o::deprecated::ParameterSE3Offset
offsetMatrix	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      const Eigen::Isometry3d& offsetMatrix() const { return _offsetMatrix;}$/;"	f	class:g2o::deprecated::ParameterSE3Offset
offsetParam	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      const ParameterSE3Offset* offsetParam() const { return _offsetParam;}$/;"	f	class:g2o::deprecated::CacheSE3Offset
w2lMatrix	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      const Eigen::Isometry3d& w2lMatrix() const { return _w2l;}$/;"	f	class:g2o::deprecated::CacheSE3Offset
w2n	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      const SE3Quat& w2n() const {return _se3_w2n;}$/;"	f	class:g2o::deprecated::CacheSE3Offset
w2nMatrix	trunk/g2o/types/deprecated/slam3d/parameter_se3_offset.h	/^      const Eigen::Isometry3d& w2nMatrix() const { return _w2n;}$/;"	f	class:g2o::deprecated::CacheSE3Offset
deprecated	trunk/g2o/types/deprecated/slam3d/se3quat_gradients.cpp	/^namespace deprecated {$/;"	n	namespace:g2o	file:
euler_to_quat	trunk/g2o/types/deprecated/slam3d/se3quat_gradients.cpp	/^Eigen::Quaterniond euler_to_quat(double yaw, double pitch, double roll)$/;"	f	namespace:g2o::deprecated
g2o	trunk/g2o/types/deprecated/slam3d/se3quat_gradients.cpp	/^namespace g2o {$/;"	n	file:
jac_quat3_euler3	trunk/g2o/types/deprecated/slam3d/se3quat_gradients.cpp	/^void jac_quat3_euler3(Eigen::Matrix<double, 6, 6>& J, const SE3Quat& t)$/;"	f	namespace:g2o::deprecated
quat_to_euler	trunk/g2o/types/deprecated/slam3d/se3quat_gradients.cpp	/^void quat_to_euler(const Eigen::Quaterniond& q, double& yaw, double& pitch, double& roll)$/;"	f	namespace:g2o::deprecated
G2O_DEPRECATED_SE3QUAT_GRADIENTS_H	trunk/g2o/types/deprecated/slam3d/se3quat_gradients.h	28;"	d
deprecated	trunk/g2o/types/deprecated/slam3d/se3quat_gradients.h	/^namespace deprecated {$/;"	n	namespace:g2o
g2o	trunk/g2o/types/deprecated/slam3d/se3quat_gradients.h	/^namespace g2o {$/;"	n
jacobian_3d_qman	trunk/g2o/types/deprecated/slam3d/se3quat_gradients.h	/^void jacobian_3d_qman ( MatrixBase<Derived> &  Ji , MatrixBase<Derived> &  Jj,$/;"	f	namespace:g2o::deprecated
deprecated	trunk/g2o/types/deprecated/slam3d/types_slam3d.cpp	/^namespace deprecated {$/;"	n	namespace:g2o	file:
deprecated_slam3d	trunk/g2o/types/deprecated/slam3d/types_slam3d.cpp	/^  G2O_REGISTER_TYPE_GROUP(deprecated_slam3d);$/;"	v
g2o	trunk/g2o/types/deprecated/slam3d/types_slam3d.cpp	/^namespace g2o {$/;"	n	file:
G2O_DEPRECATED_TYPES_SLAM3D_	trunk/g2o/types/deprecated/slam3d/types_slam3d.h	28;"	d
THREE_D_TYPES_ANALYTIC_JACOBIAN	trunk/g2o/types/deprecated/slam3d/types_slam3d.h	35;"	d
VertexPointXYZDrawAction	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.cpp	/^  VertexPointXYZDrawAction::VertexPointXYZDrawAction(): DrawAction(typeid(VertexPointXYZ).name()){$/;"	f	class:g2o::deprecated::VertexPointXYZDrawAction
VertexPointXYZWriteGnuplotAction	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.cpp	/^  VertexPointXYZWriteGnuplotAction::VertexPointXYZWriteGnuplotAction() :$/;"	f	class:g2o::deprecated::VertexPointXYZWriteGnuplotAction
deprecated	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.cpp	/^namespace deprecated {$/;"	n	namespace:g2o	file:
g2o	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.cpp	/^  HyperGraphElementAction* VertexPointXYZDrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::deprecated::VertexPointXYZDrawAction
operator ()	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.cpp	/^  HyperGraphElementAction* VertexPointXYZWriteGnuplotAction::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params_ )$/;"	f	class:g2o::deprecated::VertexPointXYZWriteGnuplotAction
read	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.cpp	/^  bool VertexPointXYZ::read(std::istream& is) {$/;"	f	class:g2o::deprecated::VertexPointXYZ
refreshPropertyPtrs	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.cpp	/^  bool VertexPointXYZDrawAction::refreshPropertyPtrs(HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::deprecated::VertexPointXYZDrawAction
write	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.cpp	/^  bool VertexPointXYZ::write(std::ostream& os) const {$/;"	f	class:g2o::deprecated::VertexPointXYZ
G2O_DEPRECATED_VERTEX_TRACKXYZ_H_	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.h	28;"	d
VertexPointXYZ	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.h	/^          VertexPointXYZ() {}$/;"	f	class:g2o::deprecated::VertexPointXYZ
VertexPointXYZ	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.h	/^  class G2O_DEPRECATED_TYPES_SLAM3D_API VertexPointXYZ : public BaseVertex<3, Eigen::Vector3d>$/;"	c	namespace:g2o::deprecated
VertexPointXYZDrawAction	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.h	/^  class G2O_DEPRECATED_TYPES_SLAM3D_API VertexPointXYZDrawAction: public DrawAction{$/;"	c	namespace:g2o::deprecated
VertexPointXYZWriteGnuplotAction	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.h	/^  class G2O_DEPRECATED_TYPES_SLAM3D_API VertexPointXYZWriteGnuplotAction: public WriteGnuplotAction$/;"	c	namespace:g2o::deprecated
_pointSize	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.h	/^    FloatProperty *_pointSize;$/;"	m	class:g2o::deprecated::VertexPointXYZDrawAction
deprecated	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.h	/^namespace deprecated {$/;"	n	namespace:g2o
estimateDimension	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.h	/^        virtual int estimateDimension() const {$/;"	f	class:g2o::deprecated::VertexPointXYZ
g2o	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.h	/^namespace g2o {$/;"	n
getEstimateData	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.h	/^        virtual bool getEstimateData(double* est) const{$/;"	f	class:g2o::deprecated::VertexPointXYZ
getMinimalEstimateData	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.h	/^        virtual bool getMinimalEstimateData(double* est) const{$/;"	f	class:g2o::deprecated::VertexPointXYZ
minimalEstimateDimension	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.h	/^        virtual int minimalEstimateDimension() const {$/;"	f	class:g2o::deprecated::VertexPointXYZ
oplusImpl	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.h	/^        virtual void oplusImpl(const double* update_) {$/;"	f	class:g2o::deprecated::VertexPointXYZ
setEstimateDataImpl	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.h	/^        virtual bool setEstimateDataImpl(const double* est){$/;"	f	class:g2o::deprecated::VertexPointXYZ
setMinimalEstimateDataImpl	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.h	/^        virtual bool setMinimalEstimateDataImpl(const double* est){$/;"	f	class:g2o::deprecated::VertexPointXYZ
setToOriginImpl	trunk/g2o/types/deprecated/slam3d/vertex_pointxyz.h	/^        virtual void setToOriginImpl() { _estimate.fill(0.); }$/;"	f	class:g2o::deprecated::VertexPointXYZ
VertexSE3	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.cpp	/^  VertexSE3::VertexSE3() :$/;"	f	class:g2o::deprecated::VertexSE3
VertexSE3DrawAction	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.cpp	/^  VertexSE3DrawAction::VertexSE3DrawAction(): DrawAction(typeid(VertexSE3).name()){$/;"	f	class:g2o::deprecated::VertexSE3DrawAction
VertexSE3WriteGnuplotAction	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.cpp	/^  VertexSE3WriteGnuplotAction::VertexSE3WriteGnuplotAction(): WriteGnuplotAction(typeid(VertexSE3).name()){}$/;"	f	class:g2o::deprecated::VertexSE3WriteGnuplotAction
deprecated	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.cpp	/^namespace deprecated {$/;"	n	namespace:g2o	file:
drawTriangle	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.cpp	/^  void drawTriangle(float xSize, float ySize){$/;"	f	namespace:g2o::deprecated
g2o	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.cpp	/^  HyperGraphElementAction* VertexSE3DrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::deprecated::VertexSE3DrawAction
operator ()	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.cpp	/^  HyperGraphElementAction* VertexSE3WriteGnuplotAction::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::deprecated::VertexSE3WriteGnuplotAction
read	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.cpp	/^  bool VertexSE3::read(std::istream& is)$/;"	f	class:g2o::deprecated::VertexSE3
refreshPropertyPtrs	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.cpp	/^  bool VertexSE3DrawAction::refreshPropertyPtrs(HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::deprecated::VertexSE3DrawAction
write	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.cpp	/^  bool VertexSE3::write(std::ostream& os) const$/;"	f	class:g2o::deprecated::VertexSE3
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.h	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::deprecated::VertexSE3
G2O_DEPRECATED_VERTEX_SE3_QUAT_	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.h	28;"	d
VertexSE3	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.h	/^class G2O_DEPRECATED_TYPES_SLAM3D_API VertexSE3 : public BaseVertex<6, SE3Quat>$/;"	c	namespace:g2o::deprecated
VertexSE3DrawAction	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.h	/^  class G2O_DEPRECATED_TYPES_SLAM3D_API VertexSE3DrawAction: public DrawAction{$/;"	c	namespace:g2o::deprecated
VertexSE3WriteGnuplotAction	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.h	/^  class G2O_DEPRECATED_TYPES_SLAM3D_API VertexSE3WriteGnuplotAction: public WriteGnuplotAction {$/;"	c	namespace:g2o::deprecated
_cacheDrawActions	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.h	/^    HyperGraphElementAction* _cacheDrawActions;$/;"	m	class:g2o::deprecated::VertexSE3DrawAction
_triangleX	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.h	/^    FloatProperty* _triangleX, *_triangleY;$/;"	m	class:g2o::deprecated::VertexSE3DrawAction
_triangleY	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.h	/^    FloatProperty* _triangleX, *_triangleY;$/;"	m	class:g2o::deprecated::VertexSE3DrawAction
deprecated	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.h	/^namespace deprecated {$/;"	n	namespace:g2o
estimateDimension	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.h	/^    virtual int estimateDimension() const {$/;"	f	class:g2o::deprecated::VertexSE3
g2o	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.h	/^namespace g2o {$/;"	n
getEstimateData	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.h	/^    virtual bool getEstimateData(double* est) const{$/;"	f	class:g2o::deprecated::VertexSE3
getMinimalEstimateData	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.h	/^    virtual bool getMinimalEstimateData(double* est) const{$/;"	f	class:g2o::deprecated::VertexSE3
minimalEstimateDimension	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.h	/^    virtual int minimalEstimateDimension() const {$/;"	f	class:g2o::deprecated::VertexSE3
oplusImpl	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.h	/^    virtual void oplusImpl(const double* update)$/;"	f	class:g2o::deprecated::VertexSE3
setEstimateDataImpl	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.h	/^    virtual bool setEstimateDataImpl(const double* est){$/;"	f	class:g2o::deprecated::VertexSE3
setMinimalEstimateDataImpl	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.h	/^    virtual bool setMinimalEstimateDataImpl(const double* est){$/;"	f	class:g2o::deprecated::VertexSE3
setToOriginImpl	trunk/g2o/types/deprecated/slam3d/vertex_se3_quat.h	/^    virtual void setToOriginImpl() {$/;"	f	class:g2o::deprecated::VertexSE3
G2O_TYPES_ICP_API	trunk/g2o/types/icp/g2o_types_icp_api.h	19;"	d
G2O_TYPES_ICP_API	trunk/g2o/types/icp/g2o_types_icp_api.h	21;"	d
G2O_TYPES_ICP_API	trunk/g2o/types/icp/g2o_types_icp_api.h	24;"	d
G2O_TYPES_ICP_API	trunk/g2o/types/icp/g2o_types_icp_api.h	29;"	d
G2O_TYPES_ICP_API_H	trunk/g2o/types/icp/g2o_types_icp_api.h	11;"	d
Edge_V_V_GICP	trunk/g2o/types/icp/types_icp.cpp	/^  Edge_V_V_GICP::Edge_V_V_GICP(const Edge_V_V_GICP* e)$/;"	f	class:g2o::Edge_V_V_GICP
Edge_XYZ_VSC	trunk/g2o/types/icp/types_icp.cpp	/^  Edge_XYZ_VSC::Edge_XYZ_VSC()$/;"	f	class:g2o::Edge_XYZ_VSC
G2O_ATTRIBUTE_CONSTRUCTOR	trunk/g2o/types/icp/types_icp.cpp	/^  G2O_ATTRIBUTE_CONSTRUCTOR(init_icp_types)$/;"	f	namespace:g2o
Kcam	trunk/g2o/types/icp/types_icp.cpp	/^  Matrix3d VertexSCam::Kcam;$/;"	m	class:g2o::VertexSCam	file:
Vector6d	trunk/g2o/types/icp/types_icp.cpp	/^  typedef  Matrix<double, 6, 1> Vector6d;$/;"	t	namespace:g2o	file:
VertexSCam	trunk/g2o/types/icp/types_icp.cpp	/^  VertexSCam::VertexSCam() :$/;"	f	class:g2o::VertexSCam
baseline	trunk/g2o/types/icp/types_icp.cpp	/^  double VertexSCam::baseline;$/;"	m	class:g2o::VertexSCam	file:
dRidx	trunk/g2o/types/icp/types_icp.cpp	/^  Matrix3d Edge_V_V_GICP::dRidx; \/\/ differential quat matrices$/;"	m	class:g2o::Edge_V_V_GICP	file:
dRidx	trunk/g2o/types/icp/types_icp.cpp	/^  Matrix3d VertexSCam::dRidx; \/\/ differential quat matrices$/;"	m	class:g2o::VertexSCam	file:
dRidy	trunk/g2o/types/icp/types_icp.cpp	/^  Matrix3d Edge_V_V_GICP::dRidy; \/\/ differential quat matrices$/;"	m	class:g2o::Edge_V_V_GICP	file:
dRidy	trunk/g2o/types/icp/types_icp.cpp	/^  Matrix3d VertexSCam::dRidy; \/\/ differential quat matrices$/;"	m	class:g2o::VertexSCam	file:
dRidz	trunk/g2o/types/icp/types_icp.cpp	/^  Matrix3d Edge_V_V_GICP::dRidz; \/\/ differential quat matrices$/;"	m	class:g2o::Edge_V_V_GICP	file:
dRidz	trunk/g2o/types/icp/types_icp.cpp	/^  Matrix3d VertexSCam::dRidz; \/\/ differential quat matrices$/;"	m	class:g2o::VertexSCam	file:
g2o	trunk/g2o/types/icp/types_icp.cpp	/^namespace g2o {$/;"	n	file:
icp	trunk/g2o/types/icp/types_icp.cpp	/^  G2O_REGISTER_TYPE_GROUP(icp);$/;"	v
init	trunk/g2o/types/icp/types_icp.cpp	/^    void init()$/;"	f	namespace:g2o::types_icp
initialized	trunk/g2o/types/icp/types_icp.cpp	/^    int initialized = 0;$/;"	v
linearizeOplus	trunk/g2o/types/icp/types_icp.cpp	/^  void Edge_V_V_GICP::linearizeOplus()$/;"	f	class:g2o::Edge_V_V_GICP
linearizeOplus	trunk/g2o/types/icp/types_icp.cpp	/^  void Edge_XYZ_VSC::linearizeOplus()$/;"	f	class:g2o::Edge_XYZ_VSC
read	trunk/g2o/types/icp/types_icp.cpp	/^  bool Edge_V_V_GICP::read(std::istream& is)$/;"	f	class:g2o::Edge_V_V_GICP
read	trunk/g2o/types/icp/types_icp.cpp	/^  bool Edge_XYZ_VSC::read(std::istream&)$/;"	f	class:g2o::Edge_XYZ_VSC
read	trunk/g2o/types/icp/types_icp.cpp	/^  bool VertexSCam::read(std::istream&)$/;"	f	class:g2o::VertexSCam
types_icp	trunk/g2o/types/icp/types_icp.cpp	/^  namespace types_icp {$/;"	n	namespace:g2o	file:
write	trunk/g2o/types/icp/types_icp.cpp	/^  bool Edge_V_V_GICP::write(std::ostream& os) const$/;"	f	class:g2o::Edge_V_V_GICP
write	trunk/g2o/types/icp/types_icp.cpp	/^  bool Edge_XYZ_VSC::write(std::ostream&) const$/;"	f	class:g2o::Edge_XYZ_VSC
write	trunk/g2o/types/icp/types_icp.cpp	/^  bool VertexSCam::write(std::ostream&) const$/;"	f	class:g2o::VertexSCam
EdgeGICP	trunk/g2o/types/icp/types_icp.h	/^    EdgeGICP()$/;"	f	class:g2o::EdgeGICP
EdgeGICP	trunk/g2o/types/icp/types_icp.h	/^  class G2O_TYPES_ICP_API EdgeGICP$/;"	c	namespace:g2o
Edge_V_V_GICP	trunk/g2o/types/icp/types_icp.h	/^      Edge_V_V_GICP() : pl_pl(false) {};$/;"	f	class:g2o::Edge_V_V_GICP
Edge_V_V_GICP	trunk/g2o/types/icp/types_icp.h	/^  class G2O_TYPES_ICP_API Edge_V_V_GICP : public  BaseBinaryEdge<3, EdgeGICP, VertexSE3, VertexSE3>$/;"	c	namespace:g2o
Edge_XYZ_VSC	trunk/g2o/types/icp/types_icp.h	/^  class G2O_TYPES_ICP_API Edge_XYZ_VSC : public  BaseBinaryEdge<3, Vector3d, VertexSBAPointXYZ, VertexSCam>$/;"	c	namespace:g2o
G2O_TYPES_ICP	trunk/g2o/types/icp/types_icp.h	28;"	d
GICP_ANALYTIC_JACOBIANS	trunk/g2o/types/icp/types_icp.h	30;"	d
Kcam	trunk/g2o/types/icp/types_icp.h	/^      static Matrix3d Kcam;$/;"	m	class:g2o::VertexSCam
R0	trunk/g2o/types/icp/types_icp.h	/^    Matrix3d R0,R1;$/;"	m	class:g2o::EdgeGICP
R1	trunk/g2o/types/icp/types_icp.h	/^    Matrix3d R0,R1;$/;"	m	class:g2o::EdgeGICP
Vector6d	trunk/g2o/types/icp/types_icp.h	/^  typedef  Matrix<double, 6, 1> Vector6d;$/;"	t	namespace:g2o
VertexSCam	trunk/g2o/types/icp/types_icp.h	/^  class G2O_TYPES_ICP_API VertexSCam : public VertexSE3$/;"	c	namespace:g2o
baseline	trunk/g2o/types/icp/types_icp.h	/^      static double baseline;$/;"	m	class:g2o::VertexSCam
computeError	trunk/g2o/types/icp/types_icp.h	/^    void computeError()$/;"	f	class:g2o::Edge_V_V_GICP
computeError	trunk/g2o/types/icp/types_icp.h	/^    void computeError()$/;"	f	class:g2o::Edge_XYZ_VSC
cov0	trunk/g2o/types/icp/types_icp.h	/^    Matrix3d cov0(double e)$/;"	f	class:g2o::EdgeGICP
cov0	trunk/g2o/types/icp/types_icp.h	/^    Matrix3d cov0, cov1;$/;"	m	class:g2o::Edge_V_V_GICP
cov1	trunk/g2o/types/icp/types_icp.h	/^    Matrix3d cov0, cov1;$/;"	m	class:g2o::Edge_V_V_GICP
cov1	trunk/g2o/types/icp/types_icp.h	/^    Matrix3d cov1(double e)$/;"	f	class:g2o::EdgeGICP
dRdx	trunk/g2o/types/icp/types_icp.h	/^      Matrix3d dRdx, dRdy, dRdz;$/;"	m	class:g2o::VertexSCam
dRdy	trunk/g2o/types/icp/types_icp.h	/^      Matrix3d dRdx, dRdy, dRdz;$/;"	m	class:g2o::VertexSCam
dRdz	trunk/g2o/types/icp/types_icp.h	/^      Matrix3d dRdx, dRdy, dRdz;$/;"	m	class:g2o::VertexSCam
dRidx	trunk/g2o/types/icp/types_icp.h	/^      static Matrix3d dRidx;$/;"	m	class:g2o::VertexSCam
dRidx	trunk/g2o/types/icp/types_icp.h	/^    static Matrix3d dRidx;$/;"	m	class:g2o::Edge_V_V_GICP
dRidy	trunk/g2o/types/icp/types_icp.h	/^	  static Matrix3d dRidy;$/;"	m	class:g2o::VertexSCam
dRidy	trunk/g2o/types/icp/types_icp.h	/^	static Matrix3d dRidy;$/;"	m	class:g2o::Edge_V_V_GICP
dRidz	trunk/g2o/types/icp/types_icp.h	/^	  static Matrix3d dRidz;$/;"	m	class:g2o::VertexSCam
dRidz	trunk/g2o/types/icp/types_icp.h	/^	static Matrix3d dRidz; \/\/ differential quat matrices$/;"	m	class:g2o::Edge_V_V_GICP
g2o	trunk/g2o/types/icp/types_icp.h	/^namespace g2o {$/;"	n
makeRot0	trunk/g2o/types/icp/types_icp.h	/^    void makeRot0() $/;"	f	class:g2o::EdgeGICP
makeRot1	trunk/g2o/types/icp/types_icp.h	/^    void makeRot1()$/;"	f	class:g2o::EdgeGICP
mapPoint	trunk/g2o/types/icp/types_icp.h	/^      void mapPoint(Vector3d &res, const Vector3d &pt3)$/;"	f	class:g2o::VertexSCam
normal0	trunk/g2o/types/icp/types_icp.h	/^    Vector3d normal0, normal1;$/;"	m	class:g2o::EdgeGICP
normal1	trunk/g2o/types/icp/types_icp.h	/^    Vector3d normal0, normal1;$/;"	m	class:g2o::EdgeGICP
oplusImpl	trunk/g2o/types/icp/types_icp.h	/^      virtual void oplusImpl(const double* update)$/;"	f	class:g2o::VertexSCam
pl_pl	trunk/g2o/types/icp/types_icp.h	/^    bool pl_pl;$/;"	m	class:g2o::Edge_V_V_GICP
pos0	trunk/g2o/types/icp/types_icp.h	/^    Vector3d pos0, pos1;$/;"	m	class:g2o::EdgeGICP
pos1	trunk/g2o/types/icp/types_icp.h	/^    Vector3d pos0, pos1;$/;"	m	class:g2o::EdgeGICP
prec0	trunk/g2o/types/icp/types_icp.h	/^    Matrix3d prec0(double e)$/;"	f	class:g2o::EdgeGICP
prec1	trunk/g2o/types/icp/types_icp.h	/^    Matrix3d prec1(double e)$/;"	f	class:g2o::EdgeGICP
setAll	trunk/g2o/types/icp/types_icp.h	/^      void setAll()$/;"	f	class:g2o::VertexSCam
setDr	trunk/g2o/types/icp/types_icp.h	/^      void setDr()$/;"	f	class:g2o::VertexSCam
setKcam	trunk/g2o/types/icp/types_icp.h	/^      static void setKcam(double fx, double fy, double cx, double cy, double tx)$/;"	f	class:g2o::VertexSCam
setProjection	trunk/g2o/types/icp/types_icp.h	/^      void setProjection() { w2i = Kcam * w2n; }$/;"	f	class:g2o::VertexSCam
setTransform	trunk/g2o/types/icp/types_icp.h	/^      void setTransform()  {$/;"	f	class:g2o::VertexSCam
transformF2W	trunk/g2o/types/icp/types_icp.h	/^      static void transformF2W(Matrix<double,3,4> &m,$/;"	f	class:g2o::VertexSCam
transformW2F	trunk/g2o/types/icp/types_icp.h	/^      static void transformW2F(Matrix<double,3,4> &m,$/;"	f	class:g2o::VertexSCam
types_icp	trunk/g2o/types/icp/types_icp.h	/^  namespace types_icp {$/;"	n	namespace:g2o
w2i	trunk/g2o/types/icp/types_icp.h	/^      Matrix<double,3,4> w2i; \/\/ transform from world to image coordinates$/;"	m	class:g2o::VertexSCam
w2n	trunk/g2o/types/icp/types_icp.h	/^      Matrix<double,3,4> w2n; \/\/ transform from world to node coordinates$/;"	m	class:g2o::VertexSCam
G2O_TYPES_SBA_API	trunk/g2o/types/sba/g2o_types_sba_api.h	19;"	d
G2O_TYPES_SBA_API	trunk/g2o/types/sba/g2o_types_sba_api.h	21;"	d
G2O_TYPES_SBA_API	trunk/g2o/types/sba/g2o_types_sba_api.h	24;"	d
G2O_TYPES_SBA_API	trunk/g2o/types/sba/g2o_types_sba_api.h	29;"	d
G2O_TYPES_SBA_API_H	trunk/g2o/types/sba/g2o_types_sba_api.h	11;"	d
EdgeNormal	trunk/g2o/types/sba/sbacam.h	/^    EdgeNormal()$/;"	f	class:g2o::EdgeNormal
EdgeNormal	trunk/g2o/types/sba/sbacam.h	/^  class G2O_TYPES_SBA_API EdgeNormal$/;"	c	namespace:g2o
G2O_SBACam_	trunk/g2o/types/sba/sbacam.h	39;"	d
Kcam	trunk/g2o/types/sba/sbacam.h	/^    Matrix3d Kcam; $/;"	m	class:g2o::SBACam
R	trunk/g2o/types/sba/sbacam.h	/^    Matrix3d R; $/;"	m	class:g2o::EdgeNormal
SBACam	trunk/g2o/types/sba/sbacam.h	/^  SBACam()$/;"	f	class:g2o::SBACam
SBACam	trunk/g2o/types/sba/sbacam.h	/^  SBACam(const Quaterniond&  r_, const Vector3d& t_) : SE3Quat(r_, t_)$/;"	f	class:g2o::SBACam
SBACam	trunk/g2o/types/sba/sbacam.h	/^  SBACam(const SE3Quat& p) : SE3Quat(p) {$/;"	f	class:g2o::SBACam
SBACam	trunk/g2o/types/sba/sbacam.h	/^  class G2O_TYPES_SBA_API SBACam: public SE3Quat$/;"	c	namespace:g2o
Vector6d	trunk/g2o/types/sba/sbacam.h	/^  typedef  Matrix<double, 6, 1> Vector6d;$/;"	t	namespace:g2o
baseline	trunk/g2o/types/sba/sbacam.h	/^    double baseline;$/;"	m	class:g2o::SBACam
dRdx	trunk/g2o/types/sba/sbacam.h	/^    Matrix3d dRdx, dRdy, dRdz;$/;"	m	class:g2o::SBACam
dRdy	trunk/g2o/types/sba/sbacam.h	/^    Matrix3d dRdx, dRdy, dRdz;$/;"	m	class:g2o::SBACam
dRdz	trunk/g2o/types/sba/sbacam.h	/^    Matrix3d dRdx, dRdy, dRdz;$/;"	m	class:g2o::SBACam
g2o	trunk/g2o/types/sba/sbacam.h	/^namespace g2o {$/;"	n
makeRot	trunk/g2o/types/sba/sbacam.h	/^    void makeRot()$/;"	f	class:g2o::EdgeNormal
normal	trunk/g2o/types/sba/sbacam.h	/^    Vector3d normal;$/;"	m	class:g2o::EdgeNormal
operator <<	trunk/g2o/types/sba/sbacam.h	/^  inline std::ostream& operator <<(std::ostream& out_str,$/;"	f	namespace:g2o
pos	trunk/g2o/types/sba/sbacam.h	/^    Vector3d pos;$/;"	m	class:g2o::EdgeNormal
setDr	trunk/g2o/types/sba/sbacam.h	/^    void setDr()$/;"	f	class:g2o::SBACam
setKcam	trunk/g2o/types/sba/sbacam.h	/^    void setKcam(double fx, double fy, double cx, double cy, double tx)$/;"	f	class:g2o::SBACam
setProjection	trunk/g2o/types/sba/sbacam.h	/^    void setProjection() { w2i = Kcam * w2n; }$/;"	f	class:g2o::SBACam
setTransform	trunk/g2o/types/sba/sbacam.h	/^    void setTransform()  { transformW2F(w2n,_t,_r); }$/;"	f	class:g2o::SBACam
transformF2W	trunk/g2o/types/sba/sbacam.h	/^    static void transformF2W(Matrix<double,3,4> &m, $/;"	f	class:g2o::SBACam
transformW2F	trunk/g2o/types/sba/sbacam.h	/^    static void transformW2F(Matrix<double,3,4> &m, $/;"	f	class:g2o::SBACam
update	trunk/g2o/types/sba/sbacam.h	/^    void update(const Vector6d& update)$/;"	f	class:g2o::SBACam
w2i	trunk/g2o/types/sba/sbacam.h	/^    Matrix<double,3,4> w2i; \/\/ transform from world to image coordinates$/;"	m	class:g2o::SBACam
w2n	trunk/g2o/types/sba/sbacam.h	/^    Matrix<double,3,4> w2n; \/\/ transform from world to node coordinates$/;"	m	class:g2o::SBACam
EdgeProjectP2MC	trunk/g2o/types/sba/types_sba.cpp	/^  EdgeProjectP2MC::EdgeProjectP2MC() :$/;"	f	class:g2o::EdgeProjectP2MC
EdgeProjectP2MC_Intrinsics	trunk/g2o/types/sba/types_sba.cpp	/^  EdgeProjectP2MC_Intrinsics::EdgeProjectP2MC_Intrinsics() :$/;"	f	class:g2o::EdgeProjectP2MC_Intrinsics
EdgeProjectP2SC	trunk/g2o/types/sba/types_sba.cpp	/^  EdgeProjectP2SC::EdgeProjectP2SC() :$/;"	f	class:g2o::EdgeProjectP2SC
EdgeSBACam	trunk/g2o/types/sba/types_sba.cpp	/^  EdgeSBACam::EdgeSBACam() :$/;"	f	class:g2o::EdgeSBACam
EdgeSBAScale	trunk/g2o/types/sba/types_sba.cpp	/^  EdgeSBAScale::EdgeSBAScale() :$/;"	f	class:g2o::EdgeSBAScale
VertexCam	trunk/g2o/types/sba/types_sba.cpp	/^  VertexCam::VertexCam() $/;"	f	class:g2o::VertexCam
VertexIntrinsics	trunk/g2o/types/sba/types_sba.cpp	/^  VertexIntrinsics::VertexIntrinsics() $/;"	f	class:g2o::VertexIntrinsics
VertexSBAPointXYZ	trunk/g2o/types/sba/types_sba.cpp	/^  VertexSBAPointXYZ::VertexSBAPointXYZ() : BaseVertex<3, Vector3d>()$/;"	f	class:g2o::VertexSBAPointXYZ
g2o	trunk/g2o/types/sba/types_sba.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/sba/types_sba.cpp	/^  void EdgeSBACam::initialEstimate(const OptimizableGraph::VertexSet& from_, OptimizableGraph::Vertex* \/*to_*\/)$/;"	f	class:g2o::EdgeSBACam
initialEstimate	trunk/g2o/types/sba/types_sba.cpp	/^  void EdgeSBAScale::initialEstimate(const OptimizableGraph::VertexSet& from_, OptimizableGraph::Vertex* \/*to_*\/)$/;"	f	class:g2o::EdgeSBAScale
linearizeOplus	trunk/g2o/types/sba/types_sba.cpp	/^  void EdgeProjectP2MC::linearizeOplus()$/;"	f	class:g2o::EdgeProjectP2MC
linearizeOplus	trunk/g2o/types/sba/types_sba.cpp	/^  void EdgeProjectP2MC_Intrinsics::linearizeOplus()$/;"	f	class:g2o::EdgeProjectP2MC_Intrinsics
linearizeOplus	trunk/g2o/types/sba/types_sba.cpp	/^  void EdgeProjectP2SC::linearizeOplus()$/;"	f	class:g2o::EdgeProjectP2SC
read	trunk/g2o/types/sba/types_sba.cpp	/^  bool EdgeProjectP2MC::read(std::istream& is)$/;"	f	class:g2o::EdgeProjectP2MC
read	trunk/g2o/types/sba/types_sba.cpp	/^  bool EdgeProjectP2MC_Intrinsics::read(std::istream& is)$/;"	f	class:g2o::EdgeProjectP2MC_Intrinsics
read	trunk/g2o/types/sba/types_sba.cpp	/^  bool EdgeProjectP2SC::read(std::istream& is)$/;"	f	class:g2o::EdgeProjectP2SC
read	trunk/g2o/types/sba/types_sba.cpp	/^  bool EdgeSBACam::read(std::istream& is)$/;"	f	class:g2o::EdgeSBACam
read	trunk/g2o/types/sba/types_sba.cpp	/^  bool EdgeSBAScale::read(std::istream& is)$/;"	f	class:g2o::EdgeSBAScale
read	trunk/g2o/types/sba/types_sba.cpp	/^  bool VertexCam::read(std::istream& is)$/;"	f	class:g2o::VertexCam
read	trunk/g2o/types/sba/types_sba.cpp	/^  bool VertexIntrinsics::read(std::istream& is)$/;"	f	class:g2o::VertexIntrinsics
read	trunk/g2o/types/sba/types_sba.cpp	/^  bool VertexSBAPointXYZ::read(std::istream& is)$/;"	f	class:g2o::VertexSBAPointXYZ
sba	trunk/g2o/types/sba/types_sba.cpp	/^  G2O_REGISTER_TYPE_GROUP(sba);$/;"	v
setMeasurementFromState	trunk/g2o/types/sba/types_sba.cpp	/^  bool EdgeSBACam::setMeasurementFromState()$/;"	f	class:g2o::EdgeSBACam
write	trunk/g2o/types/sba/types_sba.cpp	/^  bool EdgeProjectP2MC::write(std::ostream& os) const$/;"	f	class:g2o::EdgeProjectP2MC
write	trunk/g2o/types/sba/types_sba.cpp	/^  bool EdgeProjectP2MC_Intrinsics::write(std::ostream& os) const$/;"	f	class:g2o::EdgeProjectP2MC_Intrinsics
write	trunk/g2o/types/sba/types_sba.cpp	/^  bool EdgeProjectP2SC::write(std::ostream& os) const$/;"	f	class:g2o::EdgeProjectP2SC
write	trunk/g2o/types/sba/types_sba.cpp	/^  bool EdgeSBACam::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSBACam
write	trunk/g2o/types/sba/types_sba.cpp	/^  bool EdgeSBAScale::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSBAScale
write	trunk/g2o/types/sba/types_sba.cpp	/^  bool VertexCam::write(std::ostream& os) const$/;"	f	class:g2o::VertexCam
write	trunk/g2o/types/sba/types_sba.cpp	/^  bool VertexIntrinsics::write(std::ostream& os) const$/;"	f	class:g2o::VertexIntrinsics
write	trunk/g2o/types/sba/types_sba.cpp	/^  bool VertexSBAPointXYZ::write(std::ostream& os) const$/;"	f	class:g2o::VertexSBAPointXYZ
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/sba/types_sba.h	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::EdgeSBACam
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/sba/types_sba.h	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::VertexCam
EdgeProjectP2MC	trunk/g2o/types/sba/types_sba.h	/^ class G2O_TYPES_SBA_API EdgeProjectP2MC : public  BaseBinaryEdge<2, Vector2d, VertexSBAPointXYZ, VertexCam> $/;"	c	namespace:g2o
EdgeProjectP2MC_Intrinsics	trunk/g2o/types/sba/types_sba.h	/^ class G2O_TYPES_SBA_API EdgeProjectP2MC_Intrinsics : public  BaseMultiEdge<2, Vector2d> $/;"	c	namespace:g2o
EdgeProjectP2SC	trunk/g2o/types/sba/types_sba.h	/^ class G2O_TYPES_SBA_API EdgeProjectP2SC : public  BaseBinaryEdge<3, Vector3d, VertexSBAPointXYZ, VertexCam>$/;"	c	namespace:g2o
EdgeSBACam	trunk/g2o/types/sba/types_sba.h	/^ class G2O_TYPES_SBA_API EdgeSBACam : public BaseBinaryEdge<6, SE3Quat, VertexCam, VertexCam>$/;"	c	namespace:g2o
EdgeSBAScale	trunk/g2o/types/sba/types_sba.h	/^ class G2O_TYPES_SBA_API EdgeSBAScale : public BaseBinaryEdge<1, double, VertexCam, VertexCam>$/;"	c	namespace:g2o
G2O_SBA_TYPES	trunk/g2o/types/sba/types_sba.h	28;"	d
VertexCam	trunk/g2o/types/sba/types_sba.h	/^  class G2O_TYPES_SBA_API VertexCam : public BaseVertex<6, SBACam>$/;"	c	namespace:g2o
VertexIntrinsics	trunk/g2o/types/sba/types_sba.h	/^class G2O_TYPES_SBA_API VertexIntrinsics : public BaseVertex<4, Matrix<double, 5, 1> >$/;"	c	namespace:g2o
VertexSBAPointXYZ	trunk/g2o/types/sba/types_sba.h	/^ class G2O_TYPES_SBA_API VertexSBAPointXYZ : public BaseVertex<3, Vector3d>$/;"	c	namespace:g2o
_inverseMeasurement	trunk/g2o/types/sba/types_sba.h	/^    SE3Quat _inverseMeasurement;$/;"	m	class:g2o::EdgeSBACam
computeError	trunk/g2o/types/sba/types_sba.h	/^    void computeError()$/;"	f	class:g2o::EdgeProjectP2MC
computeError	trunk/g2o/types/sba/types_sba.h	/^    void computeError()$/;"	f	class:g2o::EdgeProjectP2MC_Intrinsics
computeError	trunk/g2o/types/sba/types_sba.h	/^    void computeError()$/;"	f	class:g2o::EdgeProjectP2SC
computeError	trunk/g2o/types/sba/types_sba.h	/^    void computeError()$/;"	f	class:g2o::EdgeSBACam
computeError	trunk/g2o/types/sba/types_sba.h	/^    void computeError()$/;"	f	class:g2o::EdgeSBAScale
estimateDimension	trunk/g2o/types/sba/types_sba.h	/^    virtual int estimateDimension() const {$/;"	f	class:g2o::VertexCam
g2o	trunk/g2o/types/sba/types_sba.h	/^namespace g2o {$/;"	n
getEstimateData	trunk/g2o/types/sba/types_sba.h	/^    virtual bool getEstimateData(double* est) const{$/;"	f	class:g2o::VertexCam
getMeasurementData	trunk/g2o/types/sba/types_sba.h	/^    virtual bool getMeasurementData(double* d) const{$/;"	f	class:g2o::EdgeSBACam
getMinimalEstimateData	trunk/g2o/types/sba/types_sba.h	/^    virtual bool getMinimalEstimateData(double* est) const{$/;"	f	class:g2o::VertexCam
initialEstimatePossible	trunk/g2o/types/sba/types_sba.h	/^    virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& , OptimizableGraph::Vertex* ) { return 1.;}$/;"	f	class:g2o::EdgeSBACam
initialEstimatePossible	trunk/g2o/types/sba/types_sba.h	/^    virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& , OptimizableGraph::Vertex* ) { return 1.;}$/;"	f	class:g2o::EdgeSBAScale
measurementDimension	trunk/g2o/types/sba/types_sba.h	/^    virtual int measurementDimension() const {return 7;}$/;"	f	class:g2o::EdgeSBACam
minimalEstimateDimension	trunk/g2o/types/sba/types_sba.h	/^    virtual int minimalEstimateDimension() const {$/;"	f	class:g2o::VertexCam
oplusImpl	trunk/g2o/types/sba/types_sba.h	/^    virtual void oplusImpl(const double* update)$/;"	f	class:g2o::VertexCam
oplusImpl	trunk/g2o/types/sba/types_sba.h	/^    virtual void oplusImpl(const double* update)$/;"	f	class:g2o::VertexIntrinsics
oplusImpl	trunk/g2o/types/sba/types_sba.h	/^    virtual void oplusImpl(const double* update)$/;"	f	class:g2o::VertexSBAPointXYZ
setEstimate	trunk/g2o/types/sba/types_sba.h	/^    virtual void setEstimate(const SBACam& cam){$/;"	f	class:g2o::VertexCam
setEstimateDataImpl	trunk/g2o/types/sba/types_sba.h	/^    virtual bool setEstimateDataImpl(const double* est){$/;"	f	class:g2o::VertexCam
setMeasurement	trunk/g2o/types/sba/types_sba.h	/^    virtual void setMeasurement(const SE3Quat& meas){$/;"	f	class:g2o::EdgeSBACam
setMeasurement	trunk/g2o/types/sba/types_sba.h	/^    virtual void setMeasurement(const double& m){$/;"	f	class:g2o::EdgeSBAScale
setMeasurementData	trunk/g2o/types/sba/types_sba.h	/^    virtual bool setMeasurementData(const double* d){$/;"	f	class:g2o::EdgeSBACam
setMinimalEstimateDataImpl	trunk/g2o/types/sba/types_sba.h	/^    virtual bool setMinimalEstimateDataImpl(const double* est){$/;"	f	class:g2o::VertexCam
setToOriginImpl	trunk/g2o/types/sba/types_sba.h	/^    virtual void setToOriginImpl() {$/;"	f	class:g2o::VertexCam
setToOriginImpl	trunk/g2o/types/sba/types_sba.h	/^    virtual void setToOriginImpl() {$/;"	f	class:g2o::VertexIntrinsics
setToOriginImpl	trunk/g2o/types/sba/types_sba.h	/^    virtual void setToOriginImpl() {$/;"	f	class:g2o::VertexSBAPointXYZ
CameraParameters	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^::CameraParameters()$/;"	f	class:g2o::CameraParameters
EdgeProjectXYZ2UV	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^EdgeProjectXYZ2UV::EdgeProjectXYZ2UV() : BaseBinaryEdge<2, Vector2d, VertexSBAPointXYZ, VertexSE3Expmap>() {$/;"	f	class:g2o::EdgeProjectXYZ2UV
EdgeProjectXYZ2UVU	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^EdgeProjectXYZ2UVU::EdgeProjectXYZ2UVU() : BaseBinaryEdge<3, Vector3d, VertexSBAPointXYZ, VertexSE3Expmap>()$/;"	f	class:g2o::EdgeProjectXYZ2UVU
EdgeSE3Expmap	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^EdgeSE3Expmap::EdgeSE3Expmap() :$/;"	f	class:g2o::EdgeSE3Expmap
VertexSE3Expmap	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^VertexSE3Expmap::VertexSE3Expmap() : BaseVertex<6, SE3Quat>() {$/;"	f	class:g2o::VertexSE3Expmap
cam_map	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^Vector2d  CameraParameters::cam_map(const Vector3d & trans_xyz) const {$/;"	f	class:g2o::CameraParameters
computeError	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^void EdgeProjectPSI2UV::computeError(){$/;"	f	class:g2o::EdgeProjectPSI2UV
d_Tinvpsi_d_psi	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^inline Matrix3d d_Tinvpsi_d_psi(const SE3Quat & T, const Vector3d & psi){$/;"	f	namespace:g2o
d_expy_d_y	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^inline Matrix<double,3,6> d_expy_d_y(const Vector3d & y){$/;"	f	namespace:g2o
d_proj_d_y	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^inline Matrix<double,2,3> d_proj_d_y(const double & f, const Vector3d & xyz){$/;"	f	namespace:g2o
expmap	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^G2O_REGISTER_TYPE_GROUP(expmap);$/;"	v
g2o	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^namespace g2o {$/;"	n	file:
invert_depth	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^inline Vector3d invert_depth(const Vector3d & x){$/;"	f	namespace:g2o
linearizeOplus	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^void EdgeProjectPSI2UV::linearizeOplus(){$/;"	f	class:g2o::EdgeProjectPSI2UV
linearizeOplus	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^void EdgeProjectXYZ2UV::linearizeOplus() {$/;"	f	class:g2o::EdgeProjectXYZ2UV
linearizeOplus	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^void EdgeSE3Expmap::linearizeOplus() {$/;"	f	class:g2o::EdgeSE3Expmap
project2d	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^Vector2d project2d(const Vector3d& v)  {$/;"	f	namespace:g2o
read	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^bool EdgeProjectPSI2UV::read(std::istream& is) {$/;"	f	class:g2o::EdgeProjectPSI2UV
read	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^bool EdgeProjectXYZ2UV::read(std::istream& is){$/;"	f	class:g2o::EdgeProjectXYZ2UV
read	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^bool EdgeProjectXYZ2UVU::read(std::istream& is){$/;"	f	class:g2o::EdgeProjectXYZ2UVU
read	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^bool EdgeSE3Expmap::read(std::istream& is)  {$/;"	f	class:g2o::EdgeSE3Expmap
read	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^bool VertexSE3Expmap::read(std::istream& is) {$/;"	f	class:g2o::VertexSE3Expmap
stereocam_uvu_map	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^Vector3d CameraParameters::stereocam_uvu_map(const Vector3d & trans_xyz) const {$/;"	f	class:g2o::CameraParameters
unproject2d	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^Vector3d unproject2d(const Vector2d& v)  {$/;"	f	namespace:g2o
write	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^bool EdgeProjectPSI2UV::write(std::ostream& os) const  {$/;"	f	class:g2o::EdgeProjectPSI2UV
write	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^bool EdgeProjectXYZ2UV::write(std::ostream& os) const {$/;"	f	class:g2o::EdgeProjectXYZ2UV
write	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^bool EdgeProjectXYZ2UVU::write(std::ostream& os) const {$/;"	f	class:g2o::EdgeProjectXYZ2UVU
write	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^bool EdgeSE3Expmap::write(std::ostream& os) const {$/;"	f	class:g2o::EdgeSE3Expmap
write	trunk/g2o/types/sba/types_six_dof_expmap.cpp	/^bool VertexSE3Expmap::write(std::ostream& os) const {$/;"	f	class:g2o::VertexSE3Expmap
CameraParameters	trunk/g2o/types/sba/types_six_dof_expmap.h	/^  CameraParameters(double focal_length,$/;"	f	class:g2o::CameraParameters
CameraParameters	trunk/g2o/types/sba/types_six_dof_expmap.h	/^class G2O_TYPES_SBA_API CameraParameters : public g2o::Parameter$/;"	c	namespace:g2o
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/sba/types_six_dof_expmap.h	/^  EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::CameraParameters
EdgeProjectPSI2UV	trunk/g2o/types/sba/types_six_dof_expmap.h	/^  EdgeProjectPSI2UV()  {$/;"	f	class:g2o::EdgeProjectPSI2UV
EdgeProjectPSI2UV	trunk/g2o/types/sba/types_six_dof_expmap.h	/^class G2O_TYPES_SBA_API EdgeProjectPSI2UV : public  g2o::BaseMultiEdge<2, Vector2d>$/;"	c	namespace:g2o
EdgeProjectXYZ2UV	trunk/g2o/types/sba/types_six_dof_expmap.h	/^class G2O_TYPES_SBA_API EdgeProjectXYZ2UV : public  BaseBinaryEdge<2, Vector2d, VertexSBAPointXYZ, VertexSE3Expmap>{$/;"	c	namespace:g2o
EdgeProjectXYZ2UVU	trunk/g2o/types/sba/types_six_dof_expmap.h	/^class G2O_TYPES_SBA_API EdgeProjectXYZ2UVU : public  BaseBinaryEdge<3, Vector3d, VertexSBAPointXYZ, VertexSE3Expmap>{$/;"	c	namespace:g2o
EdgeSE3Expmap	trunk/g2o/types/sba/types_six_dof_expmap.h	/^class G2O_TYPES_SBA_API EdgeSE3Expmap : public BaseBinaryEdge<6, SE3Quat, VertexSE3Expmap, VertexSE3Expmap>{$/;"	c	namespace:g2o
G2O_SIX_DOF_TYPES_EXPMAP	trunk/g2o/types/sba/types_six_dof_expmap.h	28;"	d
Matrix6d	trunk/g2o/types/sba/types_six_dof_expmap.h	/^typedef Matrix<double, 6, 6> Matrix6d;$/;"	t	namespace:g2o
VertexSE3Expmap	trunk/g2o/types/sba/types_six_dof_expmap.h	/^class G2O_TYPES_SBA_API VertexSE3Expmap : public BaseVertex<6, SE3Quat>{$/;"	c	namespace:g2o
_cam	trunk/g2o/types/sba/types_six_dof_expmap.h	/^  CameraParameters * _cam;$/;"	m	class:g2o::EdgeProjectPSI2UV
_cam	trunk/g2o/types/sba/types_six_dof_expmap.h	/^  CameraParameters * _cam;$/;"	m	class:g2o::EdgeProjectXYZ2UV
baseline	trunk/g2o/types/sba/types_six_dof_expmap.h	/^  double baseline;$/;"	m	class:g2o::CameraParameters
computeError	trunk/g2o/types/sba/types_six_dof_expmap.h	/^  void computeError()  {$/;"	f	class:g2o::EdgeProjectXYZ2UV
computeError	trunk/g2o/types/sba/types_six_dof_expmap.h	/^  void computeError()  {$/;"	f	class:g2o::EdgeSE3Expmap
computeError	trunk/g2o/types/sba/types_six_dof_expmap.h	/^  void computeError(){$/;"	f	class:g2o::EdgeProjectXYZ2UVU
focal_length	trunk/g2o/types/sba/types_six_dof_expmap.h	/^  double focal_length;$/;"	m	class:g2o::CameraParameters
g2o	trunk/g2o/types/sba/types_six_dof_expmap.h	/^namespace g2o {$/;"	n
oplusImpl	trunk/g2o/types/sba/types_six_dof_expmap.h	/^  virtual void oplusImpl(const double* update_)  {$/;"	f	class:g2o::VertexSE3Expmap
principle_point	trunk/g2o/types/sba/types_six_dof_expmap.h	/^  Vector2d principle_point;$/;"	m	class:g2o::CameraParameters
read	trunk/g2o/types/sba/types_six_dof_expmap.h	/^  virtual bool read (std::istream& is){$/;"	f	class:g2o::CameraParameters
setToOriginImpl	trunk/g2o/types/sba/types_six_dof_expmap.h	/^  virtual void setToOriginImpl() {$/;"	f	class:g2o::VertexSE3Expmap
types_six_dof_expmap	trunk/g2o/types/sba/types_six_dof_expmap.h	/^namespace types_six_dof_expmap {$/;"	n	namespace:g2o
write	trunk/g2o/types/sba/types_six_dof_expmap.h	/^  virtual bool write (std::ostream& os) const {$/;"	f	class:g2o::CameraParameters
EdgeSE2OdomDifferentialCalib	trunk/g2o/types/sclam2d/edge_se2_odom_differential_calib.cpp	/^  EdgeSE2OdomDifferentialCalib::EdgeSE2OdomDifferentialCalib() :$/;"	f	class:g2o::EdgeSE2OdomDifferentialCalib
EdgeSE2OdomDifferentialCalibDrawAction	trunk/g2o/types/sclam2d/edge_se2_odom_differential_calib.cpp	/^  EdgeSE2OdomDifferentialCalibDrawAction::EdgeSE2OdomDifferentialCalibDrawAction() :$/;"	f	class:g2o::EdgeSE2OdomDifferentialCalibDrawAction
g2o	trunk/g2o/types/sclam2d/edge_se2_odom_differential_calib.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/types/sclam2d/edge_se2_odom_differential_calib.cpp	/^  HyperGraphElementAction* EdgeSE2OdomDifferentialCalibDrawAction::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* )$/;"	f	class:g2o::EdgeSE2OdomDifferentialCalibDrawAction
read	trunk/g2o/types/sclam2d/edge_se2_odom_differential_calib.cpp	/^  bool EdgeSE2OdomDifferentialCalib::read(std::istream& is)$/;"	f	class:g2o::EdgeSE2OdomDifferentialCalib
write	trunk/g2o/types/sclam2d/edge_se2_odom_differential_calib.cpp	/^  bool EdgeSE2OdomDifferentialCalib::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSE2OdomDifferentialCalib
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/sclam2d/edge_se2_odom_differential_calib.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::EdgeSE2OdomDifferentialCalib
EdgeSE2OdomDifferentialCalib	trunk/g2o/types/sclam2d/edge_se2_odom_differential_calib.h	/^  class G2O_TYPES_SCLAM2D_API EdgeSE2OdomDifferentialCalib : public BaseMultiEdge<3, VelocityMeasurement>$/;"	c	namespace:g2o
EdgeSE2OdomDifferentialCalibDrawAction	trunk/g2o/types/sclam2d/edge_se2_odom_differential_calib.h	/^  class G2O_TYPES_SCLAM2D_API EdgeSE2OdomDifferentialCalibDrawAction: public DrawAction {$/;"	c	namespace:g2o
G2O_EDGE_SE2_ODOM_CALIB_DIFFERENTIAL_H	trunk/g2o/types/sclam2d/edge_se2_odom_differential_calib.h	28;"	d
computeError	trunk/g2o/types/sclam2d/edge_se2_odom_differential_calib.h	/^      void computeError()$/;"	f	class:g2o::EdgeSE2OdomDifferentialCalib
g2o	trunk/g2o/types/sclam2d/edge_se2_odom_differential_calib.h	/^namespace g2o {$/;"	n
EdgeSE2SensorCalib	trunk/g2o/types/sclam2d/edge_se2_sensor_calib.cpp	/^  EdgeSE2SensorCalib::EdgeSE2SensorCalib() :$/;"	f	class:g2o::EdgeSE2SensorCalib
EdgeSE2SensorCalibDrawAction	trunk/g2o/types/sclam2d/edge_se2_sensor_calib.cpp	/^  EdgeSE2SensorCalibDrawAction::EdgeSE2SensorCalibDrawAction() : $/;"	f	class:g2o::EdgeSE2SensorCalibDrawAction
g2o	trunk/g2o/types/sclam2d/edge_se2_sensor_calib.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/sclam2d/edge_se2_sensor_calib.cpp	/^  void EdgeSE2SensorCalib::initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to)$/;"	f	class:g2o::EdgeSE2SensorCalib
operator ()	trunk/g2o/types/sclam2d/edge_se2_sensor_calib.cpp	/^  HyperGraphElementAction* EdgeSE2SensorCalibDrawAction::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* )$/;"	f	class:g2o::EdgeSE2SensorCalibDrawAction
read	trunk/g2o/types/sclam2d/edge_se2_sensor_calib.cpp	/^  bool EdgeSE2SensorCalib::read(std::istream& is)$/;"	f	class:g2o::EdgeSE2SensorCalib
write	trunk/g2o/types/sclam2d/edge_se2_sensor_calib.cpp	/^  bool EdgeSE2SensorCalib::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSE2SensorCalib
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/sclam2d/edge_se2_sensor_calib.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::EdgeSE2SensorCalib
EdgeSE2SensorCalib	trunk/g2o/types/sclam2d/edge_se2_sensor_calib.h	/^  class G2O_TYPES_SCLAM2D_API EdgeSE2SensorCalib : public BaseMultiEdge<3, SE2>$/;"	c	namespace:g2o
EdgeSE2SensorCalibDrawAction	trunk/g2o/types/sclam2d/edge_se2_sensor_calib.h	/^  class EdgeSE2SensorCalibDrawAction: public DrawAction {$/;"	c	namespace:g2o
G2O_EDGE_SE2_SENSOR_CALIB_H	trunk/g2o/types/sclam2d/edge_se2_sensor_calib.h	28;"	d
_inverseMeasurement	trunk/g2o/types/sclam2d/edge_se2_sensor_calib.h	/^      SE2 _inverseMeasurement;$/;"	m	class:g2o::EdgeSE2SensorCalib
computeError	trunk/g2o/types/sclam2d/edge_se2_sensor_calib.h	/^      void computeError()$/;"	f	class:g2o::EdgeSE2SensorCalib
g2o	trunk/g2o/types/sclam2d/edge_se2_sensor_calib.h	/^namespace g2o {$/;"	n
initialEstimatePossible	trunk/g2o/types/sclam2d/edge_se2_sensor_calib.h	/^      virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to)$/;"	f	class:g2o::EdgeSE2SensorCalib
setMeasurement	trunk/g2o/types/sclam2d/edge_se2_sensor_calib.h	/^      void setMeasurement(const SE2& m){$/;"	f	class:g2o::EdgeSE2SensorCalib
G2O_TYPES_SCLAM2D_API	trunk/g2o/types/sclam2d/g2o_types_sclam2d_api.h	19;"	d
G2O_TYPES_SCLAM2D_API	trunk/g2o/types/sclam2d/g2o_types_sclam2d_api.h	21;"	d
G2O_TYPES_SCLAM2D_API	trunk/g2o/types/sclam2d/g2o_types_sclam2d_api.h	24;"	d
G2O_TYPES_SCLAM2D_API	trunk/g2o/types/sclam2d/g2o_types_sclam2d_api.h	29;"	d
G2O_TYPES_SCLAM2D_API_H	trunk/g2o/types/sclam2d/g2o_types_sclam2d_api.h	11;"	d
MotionMeasurement	trunk/g2o/types/sclam2d/odometry_measurement.cpp	/^  MotionMeasurement::MotionMeasurement() :$/;"	f	class:g2o::MotionMeasurement
MotionMeasurement	trunk/g2o/types/sclam2d/odometry_measurement.cpp	/^  MotionMeasurement::MotionMeasurement(const Eigen::Vector3d& m, double dt) :$/;"	f	class:g2o::MotionMeasurement
MotionMeasurement	trunk/g2o/types/sclam2d/odometry_measurement.cpp	/^  MotionMeasurement::MotionMeasurement(double x, double y, double theta, double dt) :$/;"	f	class:g2o::MotionMeasurement
VelocityMeasurement	trunk/g2o/types/sclam2d/odometry_measurement.cpp	/^  VelocityMeasurement::VelocityMeasurement() :$/;"	f	class:g2o::VelocityMeasurement
VelocityMeasurement	trunk/g2o/types/sclam2d/odometry_measurement.cpp	/^  VelocityMeasurement::VelocityMeasurement(double vl, double vr, double dt) :$/;"	f	class:g2o::VelocityMeasurement
convertToMotion	trunk/g2o/types/sclam2d/odometry_measurement.cpp	/^  MotionMeasurement OdomConvert::convertToMotion(const VelocityMeasurement& v, double l)$/;"	f	class:g2o::OdomConvert
convertToVelocity	trunk/g2o/types/sclam2d/odometry_measurement.cpp	/^  VelocityMeasurement OdomConvert::convertToVelocity(const MotionMeasurement& m)$/;"	f	class:g2o::OdomConvert
g2o	trunk/g2o/types/sclam2d/odometry_measurement.cpp	/^namespace g2o {$/;"	n	file:
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::MotionMeasurement
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::VelocityMeasurement
G2O_ODOMETRY_MEASUREMENT_H	trunk/g2o/types/sclam2d/odometry_measurement.h	28;"	d
MotionMeasurement	trunk/g2o/types/sclam2d/odometry_measurement.h	/^  class G2O_TYPES_SCLAM2D_API MotionMeasurement$/;"	c	namespace:g2o
OdomConvert	trunk/g2o/types/sclam2d/odometry_measurement.h	/^  class G2O_TYPES_SCLAM2D_API OdomConvert$/;"	c	namespace:g2o
VelocityMeasurement	trunk/g2o/types/sclam2d/odometry_measurement.h	/^  class G2O_TYPES_SCLAM2D_API VelocityMeasurement$/;"	c	namespace:g2o
_dt	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      double _dt;$/;"	m	class:g2o::MotionMeasurement
_dt	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      double _dt;$/;"	m	class:g2o::VelocityMeasurement
_measurement	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      Eigen::Vector2d _measurement;$/;"	m	class:g2o::VelocityMeasurement
_measurement	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      Eigen::Vector3d _measurement;$/;"	m	class:g2o::MotionMeasurement
dt	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      double dt() const { return _dt;}$/;"	f	class:g2o::MotionMeasurement
dt	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      double dt() const { return _dt;}$/;"	f	class:g2o::VelocityMeasurement
g2o	trunk/g2o/types/sclam2d/odometry_measurement.h	/^namespace g2o {$/;"	n
measurement	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      const Eigen::Vector2d& measurement() const { return _measurement;}$/;"	f	class:g2o::VelocityMeasurement
measurement	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      const Eigen::Vector3d& measurement() const { return _measurement;}$/;"	f	class:g2o::MotionMeasurement
setDt	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      void setDt(double t) { _dt = t;}$/;"	f	class:g2o::MotionMeasurement
setDt	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      void setDt(double t) { _dt = t;}$/;"	f	class:g2o::VelocityMeasurement
setTheta	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      void setTheta(double v) { _measurement(2) = v;}$/;"	f	class:g2o::MotionMeasurement
setVl	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      void setVl(double v) { _measurement(0) = v;}$/;"	f	class:g2o::VelocityMeasurement
setVr	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      void setVr(double v) { _measurement(1) = v;}$/;"	f	class:g2o::VelocityMeasurement
setX	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      void setX(double v) { _measurement(0) = v;}$/;"	f	class:g2o::MotionMeasurement
setY	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      void setY(double v) { _measurement(1) = v;}$/;"	f	class:g2o::MotionMeasurement
theta	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      double theta() const { return _measurement(2);}$/;"	f	class:g2o::MotionMeasurement
vl	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      double vl() const { return _measurement(0);}$/;"	f	class:g2o::VelocityMeasurement
vr	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      double vr() const { return _measurement(1);}$/;"	f	class:g2o::VelocityMeasurement
x	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      double x() const { return _measurement(0);}$/;"	f	class:g2o::MotionMeasurement
y	trunk/g2o/types/sclam2d/odometry_measurement.h	/^      double y() const { return _measurement(1);}$/;"	f	class:g2o::MotionMeasurement
EdgeSE2OdomDifferentialCalibDrawAction	trunk/g2o/types/sclam2d/types_sclam2d.cpp	/^  G2O_REGISTER_ACTION(EdgeSE2OdomDifferentialCalibDrawAction);$/;"	v
EdgeSE2SensorCalibDrawAction	trunk/g2o/types/sclam2d/types_sclam2d.cpp	/^  G2O_REGISTER_ACTION(EdgeSE2SensorCalibDrawAction);$/;"	v
g2o	trunk/g2o/types/sclam2d/types_sclam2d.cpp	/^namespace g2o {$/;"	n	file:
sclam	trunk/g2o/types/sclam2d/types_sclam2d.cpp	/^  G2O_REGISTER_TYPE_GROUP(sclam);$/;"	v
slam2d	trunk/g2o/types/sclam2d/types_sclam2d.cpp	/^  G2O_USE_TYPE_GROUP(slam2d);$/;"	v
G2O_TYPES_SCLAM_H	trunk/g2o/types/sclam2d/types_sclam2d.h	28;"	d
VertexOdomDifferentialParams	trunk/g2o/types/sclam2d/vertex_odom_differential_params.cpp	/^  VertexOdomDifferentialParams::VertexOdomDifferentialParams() :$/;"	f	class:g2o::VertexOdomDifferentialParams
g2o	trunk/g2o/types/sclam2d/vertex_odom_differential_params.cpp	/^namespace g2o {$/;"	n	file:
read	trunk/g2o/types/sclam2d/vertex_odom_differential_params.cpp	/^  bool VertexOdomDifferentialParams::read(std::istream& is)$/;"	f	class:g2o::VertexOdomDifferentialParams
write	trunk/g2o/types/sclam2d/vertex_odom_differential_params.cpp	/^  bool VertexOdomDifferentialParams::write(std::ostream& os) const$/;"	f	class:g2o::VertexOdomDifferentialParams
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/sclam2d/vertex_odom_differential_params.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::VertexOdomDifferentialParams
G2O_VERTEX_ODOM_DIFFERENTIAL_PARAMS_H	trunk/g2o/types/sclam2d/vertex_odom_differential_params.h	28;"	d
VertexOdomDifferentialParams	trunk/g2o/types/sclam2d/vertex_odom_differential_params.h	/^  class G2O_TYPES_SCLAM2D_API VertexOdomDifferentialParams: public BaseVertex <3, Vector3d> {$/;"	c	namespace:g2o
g2o	trunk/g2o/types/sclam2d/vertex_odom_differential_params.h	/^namespace g2o {$/;"	n
oplusImpl	trunk/g2o/types/sclam2d/vertex_odom_differential_params.h	/^      virtual void oplusImpl(const double* v) {$/;"	f	class:g2o::VertexOdomDifferentialParams
setToOriginImpl	trunk/g2o/types/sclam2d/vertex_odom_differential_params.h	/^      virtual void setToOriginImpl() {$/;"	f	class:g2o::VertexOdomDifferentialParams
G2O_SIM_3	trunk/g2o/types/sim3/sim3.h	28;"	d
Matrix7d	trunk/g2o/types/sim3/sim3.h	/^  typedef  Matrix <double, 7, 7> Matrix7d;$/;"	t	namespace:g2o
Sim3	trunk/g2o/types/sim3/sim3.h	/^    Sim3()$/;"	f	struct:g2o::Sim3
Sim3	trunk/g2o/types/sim3/sim3.h	/^    Sim3(const Matrix3d & R, const Vector3d & t, double s)$/;"	f	struct:g2o::Sim3
Sim3	trunk/g2o/types/sim3/sim3.h	/^    Sim3(const Quaterniond & r, const Vector3d & t, double s)$/;"	f	struct:g2o::Sim3
Sim3	trunk/g2o/types/sim3/sim3.h	/^    Sim3(const Vector7d & update)$/;"	f	struct:g2o::Sim3
Sim3	trunk/g2o/types/sim3/sim3.h	/^  struct Sim3$/;"	s	namespace:g2o
Vector7d	trunk/g2o/types/sim3/sim3.h	/^  typedef  Matrix <double, 7, 1> Vector7d;$/;"	t	namespace:g2o
g2o	trunk/g2o/types/sim3/sim3.h	/^namespace g2o$/;"	n
inverse	trunk/g2o/types/sim3/sim3.h	/^    Sim3 inverse() const$/;"	f	struct:g2o::Sim3
log	trunk/g2o/types/sim3/sim3.h	/^    Vector7d log() const$/;"	f	struct:g2o::Sim3
map	trunk/g2o/types/sim3/sim3.h	/^     Vector3d map (const Vector3d& xyz) const {$/;"	f	struct:g2o::Sim3
operator *	trunk/g2o/types/sim3/sim3.h	/^    Sim3 operator *(const Sim3& other) const {$/;"	f	struct:g2o::Sim3
operator *=	trunk/g2o/types/sim3/sim3.h	/^    Sim3& operator *=(const Sim3& other){$/;"	f	struct:g2o::Sim3
operator <<	trunk/g2o/types/sim3/sim3.h	/^  inline std::ostream& operator <<(std::ostream& out_str,$/;"	f	namespace:g2o
operator []	trunk/g2o/types/sim3/sim3.h	/^    double operator[](int i) const$/;"	f	struct:g2o::Sim3
operator []	trunk/g2o/types/sim3/sim3.h	/^    double& operator[](int i)$/;"	f	struct:g2o::Sim3
r	trunk/g2o/types/sim3/sim3.h	/^    Quaterniond r;$/;"	m	struct:g2o::Sim3
rotation	trunk/g2o/types/sim3/sim3.h	/^    inline Quaterniond& rotation() {return r;}$/;"	f	struct:g2o::Sim3
rotation	trunk/g2o/types/sim3/sim3.h	/^    inline const Quaterniond& rotation() const {return r;}$/;"	f	struct:g2o::Sim3
s	trunk/g2o/types/sim3/sim3.h	/^    double s;$/;"	m	struct:g2o::Sim3
scale	trunk/g2o/types/sim3/sim3.h	/^    inline const double& scale() const {return s;}$/;"	f	struct:g2o::Sim3
scale	trunk/g2o/types/sim3/sim3.h	/^    inline double& scale() {return s;}$/;"	f	struct:g2o::Sim3
t	trunk/g2o/types/sim3/sim3.h	/^    Vector3d t;$/;"	m	struct:g2o::Sim3
translation	trunk/g2o/types/sim3/sim3.h	/^    inline Vector3d& translation() {return t;}$/;"	f	struct:g2o::Sim3
translation	trunk/g2o/types/sim3/sim3.h	/^    inline const Vector3d& translation() const {return t;}$/;"	f	struct:g2o::Sim3
EdgeSim3	trunk/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  EdgeSim3::EdgeSim3() :$/;"	f	class:g2o::EdgeSim3
EdgeSim3ProjectXYZ	trunk/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  EdgeSim3ProjectXYZ::EdgeSim3ProjectXYZ() :$/;"	f	class:g2o::EdgeSim3ProjectXYZ
VertexSim3Expmap	trunk/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  VertexSim3Expmap::VertexSim3Expmap() : BaseVertex<7, Sim3>()$/;"	f	class:g2o::VertexSim3Expmap
g2o	trunk/g2o/types/sim3/types_seven_dof_expmap.cpp	/^namespace g2o {$/;"	n	file:
read	trunk/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  bool EdgeSim3::read(std::istream& is)$/;"	f	class:g2o::EdgeSim3
read	trunk/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  bool EdgeSim3ProjectXYZ::read(std::istream& is)$/;"	f	class:g2o::EdgeSim3ProjectXYZ
read	trunk/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  bool VertexSim3Expmap::read(std::istream& is)$/;"	f	class:g2o::VertexSim3Expmap
sba	trunk/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  G2O_USE_TYPE_GROUP(sba);$/;"	v
sim3	trunk/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  G2O_REGISTER_TYPE_GROUP(sim3);$/;"	v
write	trunk/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  bool EdgeSim3::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSim3
write	trunk/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  bool EdgeSim3ProjectXYZ::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSim3ProjectXYZ
write	trunk/g2o/types/sim3/types_seven_dof_expmap.cpp	/^  bool VertexSim3Expmap::write(std::ostream& os) const$/;"	f	class:g2o::VertexSim3Expmap
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/sim3/types_seven_dof_expmap.h	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::VertexSim3Expmap
EdgeSim3	trunk/g2o/types/sim3/types_seven_dof_expmap.h	/^  class EdgeSim3 : public BaseBinaryEdge<7, Sim3, VertexSim3Expmap, VertexSim3Expmap>$/;"	c	namespace:g2o
EdgeSim3ProjectXYZ	trunk/g2o/types/sim3/types_seven_dof_expmap.h	/^class EdgeSim3ProjectXYZ : public  BaseBinaryEdge<2, Vector2d,  VertexSBAPointXYZ, VertexSim3Expmap>$/;"	c	namespace:g2o
G2O_SEVEN_DOF_EXPMAP_TYPES	trunk/g2o/types/sim3/types_seven_dof_expmap.h	28;"	d
VertexSim3Expmap	trunk/g2o/types/sim3/types_seven_dof_expmap.h	/^  class VertexSim3Expmap : public BaseVertex<7, Sim3>$/;"	c	namespace:g2o
_fix_scale	trunk/g2o/types/sim3/types_seven_dof_expmap.h	/^    bool _fix_scale;$/;"	m	class:g2o::VertexSim3Expmap
_focal_length	trunk/g2o/types/sim3/types_seven_dof_expmap.h	/^    Vector2d _focal_length;$/;"	m	class:g2o::VertexSim3Expmap
_principle_point	trunk/g2o/types/sim3/types_seven_dof_expmap.h	/^    Vector2d _principle_point;$/;"	m	class:g2o::VertexSim3Expmap
cam_map	trunk/g2o/types/sim3/types_seven_dof_expmap.h	/^    Vector2d cam_map(const Vector2d & v) const$/;"	f	class:g2o::VertexSim3Expmap
computeError	trunk/g2o/types/sim3/types_seven_dof_expmap.h	/^    void computeError()$/;"	f	class:g2o::EdgeSim3
computeError	trunk/g2o/types/sim3/types_seven_dof_expmap.h	/^    void computeError()$/;"	f	class:g2o::EdgeSim3ProjectXYZ
g2o	trunk/g2o/types/sim3/types_seven_dof_expmap.h	/^namespace g2o {$/;"	n
initialEstimate	trunk/g2o/types/sim3/types_seven_dof_expmap.h	/^    virtual void initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/*to*\/)$/;"	f	class:g2o::EdgeSim3
initialEstimatePossible	trunk/g2o/types/sim3/types_seven_dof_expmap.h	/^    virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& , OptimizableGraph::Vertex* ) { return 1.;}$/;"	f	class:g2o::EdgeSim3
oplusImpl	trunk/g2o/types/sim3/types_seven_dof_expmap.h	/^    virtual void oplusImpl(const double* update_)$/;"	f	class:g2o::VertexSim3Expmap
setToOriginImpl	trunk/g2o/types/sim3/types_seven_dof_expmap.h	/^    virtual void setToOriginImpl() {$/;"	f	class:g2o::VertexSim3Expmap
EdgeSE2	trunk/g2o/types/slam2d/edge_se2.cpp	/^  EdgeSE2::EdgeSE2() :$/;"	f	class:g2o::EdgeSE2
EdgeSE2DrawAction	trunk/g2o/types/slam2d/edge_se2.cpp	/^  EdgeSE2DrawAction::EdgeSE2DrawAction(): DrawAction(typeid(EdgeSE2).name()){}$/;"	f	class:g2o::EdgeSE2DrawAction
EdgeSE2WriteGnuplotAction	trunk/g2o/types/slam2d/edge_se2.cpp	/^  EdgeSE2WriteGnuplotAction::EdgeSE2WriteGnuplotAction(): WriteGnuplotAction(typeid(EdgeSE2).name()){}$/;"	f	class:g2o::EdgeSE2WriteGnuplotAction
g2o	trunk/g2o/types/slam2d/edge_se2.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/slam2d/edge_se2.cpp	/^  void EdgeSE2::initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/* to *\/)$/;"	f	class:g2o::EdgeSE2
linearizeOplus	trunk/g2o/types/slam2d/edge_se2.cpp	/^  void EdgeSE2::linearizeOplus()$/;"	f	class:g2o::EdgeSE2
operator ()	trunk/g2o/types/slam2d/edge_se2.cpp	/^  HyperGraphElementAction* EdgeSE2DrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::EdgeSE2DrawAction
operator ()	trunk/g2o/types/slam2d/edge_se2.cpp	/^  HyperGraphElementAction* EdgeSE2WriteGnuplotAction::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::EdgeSE2WriteGnuplotAction
read	trunk/g2o/types/slam2d/edge_se2.cpp	/^  bool EdgeSE2::read(std::istream& is)$/;"	f	class:g2o::EdgeSE2
write	trunk/g2o/types/slam2d/edge_se2.cpp	/^  bool EdgeSE2::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSE2
EdgeSE2	trunk/g2o/types/slam2d/edge_se2.h	/^  class G2O_TYPES_SLAM2D_API EdgeSE2 : public BaseBinaryEdge<3, SE2, VertexSE2, VertexSE2>$/;"	c	namespace:g2o
EdgeSE2DrawAction	trunk/g2o/types/slam2d/edge_se2.h	/^  class G2O_TYPES_SLAM2D_API EdgeSE2DrawAction: public DrawAction{$/;"	c	namespace:g2o
EdgeSE2WriteGnuplotAction	trunk/g2o/types/slam2d/edge_se2.h	/^  class G2O_TYPES_SLAM2D_API EdgeSE2WriteGnuplotAction: public WriteGnuplotAction {$/;"	c	namespace:g2o
G2O_EDGE_SE2_H	trunk/g2o/types/slam2d/edge_se2.h	28;"	d
_inverseMeasurement	trunk/g2o/types/slam2d/edge_se2.h	/^      SE2 _inverseMeasurement;$/;"	m	class:g2o::EdgeSE2
computeError	trunk/g2o/types/slam2d/edge_se2.h	/^      void computeError()$/;"	f	class:g2o::EdgeSE2
g2o	trunk/g2o/types/slam2d/edge_se2.h	/^namespace g2o {$/;"	n
getMeasurementData	trunk/g2o/types/slam2d/edge_se2.h	/^      virtual bool getMeasurementData(double* d) const {$/;"	f	class:g2o::EdgeSE2
initialEstimatePossible	trunk/g2o/types/slam2d/edge_se2.h	/^      virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& , OptimizableGraph::Vertex* ) { return 1.;}$/;"	f	class:g2o::EdgeSE2
measurementDimension	trunk/g2o/types/slam2d/edge_se2.h	/^      virtual int measurementDimension() const {return 3;}$/;"	f	class:g2o::EdgeSE2
setMeasurement	trunk/g2o/types/slam2d/edge_se2.h	/^      virtual void setMeasurement(const SE2& m){$/;"	f	class:g2o::EdgeSE2
setMeasurementData	trunk/g2o/types/slam2d/edge_se2.h	/^      virtual bool setMeasurementData(const double* d){$/;"	f	class:g2o::EdgeSE2
setMeasurementFromState	trunk/g2o/types/slam2d/edge_se2.h	/^      virtual bool setMeasurementFromState() {$/;"	f	class:g2o::EdgeSE2
EdgeSE2Offset	trunk/g2o/types/slam2d/edge_se2_offset.cpp	/^  EdgeSE2Offset::EdgeSE2Offset() : BaseBinaryEdge<3, SE2, VertexSE2, VertexSE2>() {$/;"	f	class:g2o::EdgeSE2Offset
computeError	trunk/g2o/types/slam2d/edge_se2_offset.cpp	/^  void EdgeSE2Offset::computeError() {$/;"	f	class:g2o::EdgeSE2Offset
g2o	trunk/g2o/types/slam2d/edge_se2_offset.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/slam2d/edge_se2_offset.cpp	/^  void EdgeSE2Offset::initialEstimate(const OptimizableGraph::VertexSet& from_, OptimizableGraph::Vertex* \/*to_*\/) {$/;"	f	class:g2o::EdgeSE2Offset
read	trunk/g2o/types/slam2d/edge_se2_offset.cpp	/^  bool EdgeSE2Offset::read(std::istream& is) {$/;"	f	class:g2o::EdgeSE2Offset
resolveCaches	trunk/g2o/types/slam2d/edge_se2_offset.cpp	/^  bool EdgeSE2Offset::resolveCaches(){$/;"	f	class:g2o::EdgeSE2Offset
setMeasurementFromState	trunk/g2o/types/slam2d/edge_se2_offset.cpp	/^  bool EdgeSE2Offset::setMeasurementFromState(){$/;"	f	class:g2o::EdgeSE2Offset
write	trunk/g2o/types/slam2d/edge_se2_offset.cpp	/^  bool EdgeSE2Offset::write(std::ostream& os) const {$/;"	f	class:g2o::EdgeSE2Offset
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/slam2d/edge_se2_offset.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::EdgeSE2Offset
EdgeSE2Offset	trunk/g2o/types/slam2d/edge_se2_offset.h	/^  class G2O_TYPES_SLAM2D_API EdgeSE2Offset : public BaseBinaryEdge<3, SE2, VertexSE2, VertexSE2> {$/;"	c	namespace:g2o
G2O_EDGE_SE2_OFFSET_H_	trunk/g2o/types/slam2d/edge_se2_offset.h	28;"	d
_cacheFrom	trunk/g2o/types/slam2d/edge_se2_offset.h	/^      CacheSE2Offset  *_cacheFrom, *_cacheTo;$/;"	m	class:g2o::EdgeSE2Offset
_cacheTo	trunk/g2o/types/slam2d/edge_se2_offset.h	/^      CacheSE2Offset  *_cacheFrom, *_cacheTo;$/;"	m	class:g2o::EdgeSE2Offset
_inverseMeasurement	trunk/g2o/types/slam2d/edge_se2_offset.h	/^      SE2 _inverseMeasurement;$/;"	m	class:g2o::EdgeSE2Offset
_offsetFrom	trunk/g2o/types/slam2d/edge_se2_offset.h	/^      ParameterSE2Offset *_offsetFrom, *_offsetTo;$/;"	m	class:g2o::EdgeSE2Offset
_offsetTo	trunk/g2o/types/slam2d/edge_se2_offset.h	/^      ParameterSE2Offset *_offsetFrom, *_offsetTo;$/;"	m	class:g2o::EdgeSE2Offset
g2o	trunk/g2o/types/slam2d/edge_se2_offset.h	/^namespace g2o {$/;"	n
getMeasurementData	trunk/g2o/types/slam2d/edge_se2_offset.h	/^      virtual bool getMeasurementData(double* d) const{$/;"	f	class:g2o::EdgeSE2Offset
initialEstimatePossible	trunk/g2o/types/slam2d/edge_se2_offset.h	/^      virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& \/*from*\/, $/;"	f	class:g2o::EdgeSE2Offset
measurementDimension	trunk/g2o/types/slam2d/edge_se2_offset.h	/^      virtual int measurementDimension() const {return 3;}$/;"	f	class:g2o::EdgeSE2Offset
setMeasurement	trunk/g2o/types/slam2d/edge_se2_offset.h	/^      virtual void setMeasurement(const SE2& m){$/;"	f	class:g2o::EdgeSE2Offset
setMeasurementData	trunk/g2o/types/slam2d/edge_se2_offset.h	/^      virtual bool setMeasurementData(const double* d){$/;"	f	class:g2o::EdgeSE2Offset
EdgeSE2PointXY	trunk/g2o/types/slam2d/edge_se2_pointxy.cpp	/^  EdgeSE2PointXY::EdgeSE2PointXY() :$/;"	f	class:g2o::EdgeSE2PointXY
EdgeSE2PointXYDrawAction	trunk/g2o/types/slam2d/edge_se2_pointxy.cpp	/^  EdgeSE2PointXYDrawAction::EdgeSE2PointXYDrawAction(): DrawAction(typeid(EdgeSE2PointXY).name()){}$/;"	f	class:g2o::EdgeSE2PointXYDrawAction
EdgeSE2PointXYWriteGnuplotAction	trunk/g2o/types/slam2d/edge_se2_pointxy.cpp	/^  EdgeSE2PointXYWriteGnuplotAction::EdgeSE2PointXYWriteGnuplotAction(): WriteGnuplotAction(typeid(EdgeSE2PointXY).name()){}$/;"	f	class:g2o::EdgeSE2PointXYWriteGnuplotAction
g2o	trunk/g2o/types/slam2d/edge_se2_pointxy.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/slam2d/edge_se2_pointxy.cpp	/^  void EdgeSE2PointXY::initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to)$/;"	f	class:g2o::EdgeSE2PointXY
linearizeOplus	trunk/g2o/types/slam2d/edge_se2_pointxy.cpp	/^  void EdgeSE2PointXY::linearizeOplus()$/;"	f	class:g2o::EdgeSE2PointXY
operator ()	trunk/g2o/types/slam2d/edge_se2_pointxy.cpp	/^  HyperGraphElementAction* EdgeSE2PointXYDrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::EdgeSE2PointXYDrawAction
operator ()	trunk/g2o/types/slam2d/edge_se2_pointxy.cpp	/^  HyperGraphElementAction* EdgeSE2PointXYWriteGnuplotAction::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::EdgeSE2PointXYWriteGnuplotAction
read	trunk/g2o/types/slam2d/edge_se2_pointxy.cpp	/^  bool EdgeSE2PointXY::read(std::istream& is)$/;"	f	class:g2o::EdgeSE2PointXY
write	trunk/g2o/types/slam2d/edge_se2_pointxy.cpp	/^  bool EdgeSE2PointXY::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSE2PointXY
EdgeSE2PointXY	trunk/g2o/types/slam2d/edge_se2_pointxy.h	/^  class G2O_TYPES_SLAM2D_API EdgeSE2PointXY : public BaseBinaryEdge<2, Eigen::Vector2d, VertexSE2, VertexPointXY>$/;"	c	namespace:g2o
EdgeSE2PointXYDrawAction	trunk/g2o/types/slam2d/edge_se2_pointxy.h	/^  class G2O_TYPES_SLAM2D_API EdgeSE2PointXYDrawAction: public DrawAction{$/;"	c	namespace:g2o
EdgeSE2PointXYWriteGnuplotAction	trunk/g2o/types/slam2d/edge_se2_pointxy.h	/^  class G2O_TYPES_SLAM2D_API EdgeSE2PointXYWriteGnuplotAction: public WriteGnuplotAction {$/;"	c	namespace:g2o
G2O_EDGE_SE2_POINT_XY_H	trunk/g2o/types/slam2d/edge_se2_pointxy.h	28;"	d
computeError	trunk/g2o/types/slam2d/edge_se2_pointxy.h	/^      void computeError()$/;"	f	class:g2o::EdgeSE2PointXY
g2o	trunk/g2o/types/slam2d/edge_se2_pointxy.h	/^namespace g2o {$/;"	n
getMeasurementData	trunk/g2o/types/slam2d/edge_se2_pointxy.h	/^      virtual bool getMeasurementData(double* d) const{$/;"	f	class:g2o::EdgeSE2PointXY
initialEstimatePossible	trunk/g2o/types/slam2d/edge_se2_pointxy.h	/^      virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to) { (void) to; return (from.count(_vertices[0]) == 1 ? 1.0 : -1.0);}$/;"	f	class:g2o::EdgeSE2PointXY
measurementDimension	trunk/g2o/types/slam2d/edge_se2_pointxy.h	/^      virtual int measurementDimension() const {return 2;}$/;"	f	class:g2o::EdgeSE2PointXY
setMeasurementData	trunk/g2o/types/slam2d/edge_se2_pointxy.h	/^      virtual bool setMeasurementData(const double* d){$/;"	f	class:g2o::EdgeSE2PointXY
setMeasurementFromState	trunk/g2o/types/slam2d/edge_se2_pointxy.h	/^      virtual bool setMeasurementFromState(){$/;"	f	class:g2o::EdgeSE2PointXY
EdgeSE2PointXYBearing	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.cpp	/^  EdgeSE2PointXYBearing::EdgeSE2PointXYBearing()$/;"	f	class:g2o::EdgeSE2PointXYBearing
EdgeSE2PointXYBearingDrawAction	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.cpp	/^  EdgeSE2PointXYBearingDrawAction::EdgeSE2PointXYBearingDrawAction(): DrawAction(typeid(EdgeSE2PointXYBearing).name()){}$/;"	f	class:g2o::EdgeSE2PointXYBearingDrawAction
EdgeSE2PointXYBearingWriteGnuplotAction	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.cpp	/^  EdgeSE2PointXYBearingWriteGnuplotAction::EdgeSE2PointXYBearingWriteGnuplotAction(): WriteGnuplotAction(typeid(EdgeSE2PointXYBearing).name()){}$/;"	f	class:g2o::EdgeSE2PointXYBearingWriteGnuplotAction
g2o	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.cpp	/^  void EdgeSE2PointXYBearing::initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/*to*\/)$/;"	f	class:g2o::EdgeSE2PointXYBearing
operator ()	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.cpp	/^  HyperGraphElementAction* EdgeSE2PointXYBearingDrawAction::operator()(HyperGraph::HyperGraphElement* element,  HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::EdgeSE2PointXYBearingDrawAction
operator ()	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.cpp	/^  HyperGraphElementAction* EdgeSE2PointXYBearingWriteGnuplotAction::operator()(HyperGraph::HyperGraphElement* element,$/;"	f	class:g2o::EdgeSE2PointXYBearingWriteGnuplotAction
read	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.cpp	/^  bool EdgeSE2PointXYBearing::read(std::istream& is)$/;"	f	class:g2o::EdgeSE2PointXYBearing
write	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.cpp	/^  bool EdgeSE2PointXYBearing::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSE2PointXYBearing
EdgeSE2PointXYBearing	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^  class G2O_TYPES_SLAM2D_API EdgeSE2PointXYBearing: public BaseBinaryEdge<1, double, VertexSE2, VertexPointXY>$/;"	c	namespace:g2o
EdgeSE2PointXYBearingDrawAction	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^  class G2O_TYPES_SLAM2D_API EdgeSE2PointXYBearingDrawAction: public DrawAction{$/;"	c	namespace:g2o
EdgeSE2PointXYBearingWriteGnuplotAction	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^  class G2O_TYPES_SLAM2D_API EdgeSE2PointXYBearingWriteGnuplotAction: public WriteGnuplotAction {$/;"	c	namespace:g2o
G2O_EDGE_SE2_POINT_XY_BEARING_H	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.h	28;"	d
computeError	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^      void computeError()$/;"	f	class:g2o::EdgeSE2PointXYBearing
g2o	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^namespace g2o {$/;"	n
getMeasurementData	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^      virtual bool getMeasurementData(double* d) const {$/;"	f	class:g2o::EdgeSE2PointXYBearing
initialEstimatePossible	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^      virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex*) { return (from.count(_vertices[0]) == 1 ? 1.0 : -1.0);}$/;"	f	class:g2o::EdgeSE2PointXYBearing
measurementDimension	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^      int measurementDimension() const {return 1;}$/;"	f	class:g2o::EdgeSE2PointXYBearing
setMeasurementData	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^      virtual bool setMeasurementData(const double* d) {$/;"	f	class:g2o::EdgeSE2PointXYBearing
setMeasurementFromState	trunk/g2o/types/slam2d/edge_se2_pointxy_bearing.h	/^      virtual bool setMeasurementFromState(){$/;"	f	class:g2o::EdgeSE2PointXYBearing
EdgeSE2PointXYCalib	trunk/g2o/types/slam2d/edge_se2_pointxy_calib.cpp	/^  EdgeSE2PointXYCalib::EdgeSE2PointXYCalib() :$/;"	f	class:g2o::EdgeSE2PointXYCalib
g2o	trunk/g2o/types/slam2d/edge_se2_pointxy_calib.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/slam2d/edge_se2_pointxy_calib.cpp	/^  void EdgeSE2PointXYCalib::initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/*to*\/)$/;"	f	class:g2o::EdgeSE2PointXYCalib
read	trunk/g2o/types/slam2d/edge_se2_pointxy_calib.cpp	/^  bool EdgeSE2PointXYCalib::read(std::istream& is)$/;"	f	class:g2o::EdgeSE2PointXYCalib
write	trunk/g2o/types/slam2d/edge_se2_pointxy_calib.cpp	/^  bool EdgeSE2PointXYCalib::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSE2PointXYCalib
EdgeSE2PointXYCalib	trunk/g2o/types/slam2d/edge_se2_pointxy_calib.h	/^  class G2O_TYPES_SLAM2D_API EdgeSE2PointXYCalib : public BaseMultiEdge<2, Eigen::Vector2d>$/;"	c	namespace:g2o
G2O_EDGE_SE2_XY_CALIB_H	trunk/g2o/types/slam2d/edge_se2_pointxy_calib.h	28;"	d
computeError	trunk/g2o/types/slam2d/edge_se2_pointxy_calib.h	/^      void computeError()$/;"	f	class:g2o::EdgeSE2PointXYCalib
g2o	trunk/g2o/types/slam2d/edge_se2_pointxy_calib.h	/^namespace g2o {$/;"	n
initialEstimatePossible	trunk/g2o/types/slam2d/edge_se2_pointxy_calib.h	/^      virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to) { (void) to; return (from.count(_vertices[0]) == 1 ? 1.0 : -1.0);}$/;"	f	class:g2o::EdgeSE2PointXYCalib
EdgeSE2PointXYOffset	trunk/g2o/types/slam2d/edge_se2_pointxy_offset.cpp	/^  EdgeSE2PointXYOffset::EdgeSE2PointXYOffset() : BaseBinaryEdge<2, Vector2d, VertexSE2, VertexPointXY>() {$/;"	f	class:g2o::EdgeSE2PointXYOffset
computeError	trunk/g2o/types/slam2d/edge_se2_pointxy_offset.cpp	/^  void EdgeSE2PointXYOffset::computeError() {$/;"	f	class:g2o::EdgeSE2PointXYOffset
g2o	trunk/g2o/types/slam2d/edge_se2_pointxy_offset.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/slam2d/edge_se2_pointxy_offset.cpp	/^  void EdgeSE2PointXYOffset::initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/*to_*\/)$/;"	f	class:g2o::EdgeSE2PointXYOffset
linearizeOplus	trunk/g2o/types/slam2d/edge_se2_pointxy_offset.cpp	/^  void EdgeSE2PointXYOffset::linearizeOplus() {$/;"	f	class:g2o::EdgeSE2PointXYOffset
read	trunk/g2o/types/slam2d/edge_se2_pointxy_offset.cpp	/^  bool EdgeSE2PointXYOffset::read(std::istream& is) {$/;"	f	class:g2o::EdgeSE2PointXYOffset
resolveCaches	trunk/g2o/types/slam2d/edge_se2_pointxy_offset.cpp	/^  bool EdgeSE2PointXYOffset::resolveCaches(){$/;"	f	class:g2o::EdgeSE2PointXYOffset
setMeasurementFromState	trunk/g2o/types/slam2d/edge_se2_pointxy_offset.cpp	/^  bool EdgeSE2PointXYOffset::setMeasurementFromState(){$/;"	f	class:g2o::EdgeSE2PointXYOffset
write	trunk/g2o/types/slam2d/edge_se2_pointxy_offset.cpp	/^  bool EdgeSE2PointXYOffset::write(std::ostream& os) const {$/;"	f	class:g2o::EdgeSE2PointXYOffset
EdgeSE2PointXYOffset	trunk/g2o/types/slam2d/edge_se2_pointxy_offset.h	/^  class G2O_TYPES_SLAM2D_API EdgeSE2PointXYOffset : public BaseBinaryEdge<2, Vector2d, VertexSE2, VertexPointXY> {$/;"	c	namespace:g2o
G2O_EDGE_SE2_POINT_XY_OFFSET_H_	trunk/g2o/types/slam2d/edge_se2_pointxy_offset.h	28;"	d
cache	trunk/g2o/types/slam2d/edge_se2_pointxy_offset.h	/^    CacheSE2Offset* cache;$/;"	m	class:g2o::EdgeSE2PointXYOffset
g2o	trunk/g2o/types/slam2d/edge_se2_pointxy_offset.h	/^namespace g2o {$/;"	n
getMeasurementData	trunk/g2o/types/slam2d/edge_se2_pointxy_offset.h	/^    virtual bool getMeasurementData(double* d) const{$/;"	f	class:g2o::EdgeSE2PointXYOffset
initialEstimatePossible	trunk/g2o/types/slam2d/edge_se2_pointxy_offset.h	/^    virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& from, $/;"	f	class:g2o::EdgeSE2PointXYOffset
measurementDimension	trunk/g2o/types/slam2d/edge_se2_pointxy_offset.h	/^    virtual int measurementDimension() const {return 3;}$/;"	f	class:g2o::EdgeSE2PointXYOffset
offsetParam	trunk/g2o/types/slam2d/edge_se2_pointxy_offset.h	/^    ParameterSE2Offset* offsetParam;$/;"	m	class:g2o::EdgeSE2PointXYOffset
setMeasurement	trunk/g2o/types/slam2d/edge_se2_pointxy_offset.h	/^    virtual void setMeasurement(const Vector2d& m){$/;"	f	class:g2o::EdgeSE2PointXYOffset
setMeasurementData	trunk/g2o/types/slam2d/edge_se2_pointxy_offset.h	/^    virtual bool setMeasurementData(const double* d){$/;"	f	class:g2o::EdgeSE2PointXYOffset
EdgeSE2Prior	trunk/g2o/types/slam2d/edge_se2_prior.cpp	/^  EdgeSE2Prior::EdgeSE2Prior() : BaseUnaryEdge<3, SE2, VertexSE2>()$/;"	f	class:g2o::EdgeSE2Prior
g2o	trunk/g2o/types/slam2d/edge_se2_prior.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/slam2d/edge_se2_prior.cpp	/^  void EdgeSE2Prior::initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* to)$/;"	f	class:g2o::EdgeSE2Prior
read	trunk/g2o/types/slam2d/edge_se2_prior.cpp	/^  bool EdgeSE2Prior::read(std::istream& is)$/;"	f	class:g2o::EdgeSE2Prior
setMeasurement	trunk/g2o/types/slam2d/edge_se2_prior.cpp	/^  void EdgeSE2Prior::setMeasurement(const SE2& m)$/;"	f	class:g2o::EdgeSE2Prior
setMeasurementData	trunk/g2o/types/slam2d/edge_se2_prior.cpp	/^  bool EdgeSE2Prior::setMeasurementData(const double* d) {$/;"	f	class:g2o::EdgeSE2Prior
write	trunk/g2o/types/slam2d/edge_se2_prior.cpp	/^  bool EdgeSE2Prior::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSE2Prior
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/slam2d/edge_se2_prior.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::EdgeSE2Prior
EdgeSE2Prior	trunk/g2o/types/slam2d/edge_se2_prior.h	/^  class G2O_TYPES_SLAM2D_API EdgeSE2Prior : public BaseUnaryEdge<3, SE2, VertexSE2>$/;"	c	namespace:g2o
G2O_EDGE_SE2_PRIOR_H	trunk/g2o/types/slam2d/edge_se2_prior.h	28;"	d
_inverseMeasurement	trunk/g2o/types/slam2d/edge_se2_prior.h	/^      SE2 _inverseMeasurement;$/;"	m	class:g2o::EdgeSE2Prior
computeError	trunk/g2o/types/slam2d/edge_se2_prior.h	/^      void computeError()$/;"	f	class:g2o::EdgeSE2Prior
g2o	trunk/g2o/types/slam2d/edge_se2_prior.h	/^namespace g2o {$/;"	n
getMeasurementData	trunk/g2o/types/slam2d/edge_se2_prior.h	/^      virtual bool getMeasurementData(double* d) const {$/;"	f	class:g2o::EdgeSE2Prior
initialEstimatePossible	trunk/g2o/types/slam2d/edge_se2_prior.h	/^      virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& , OptimizableGraph::Vertex* ) { return 1.;}$/;"	f	class:g2o::EdgeSE2Prior
measurementDimension	trunk/g2o/types/slam2d/edge_se2_prior.h	/^      int measurementDimension() const {return 3;}$/;"	f	class:g2o::EdgeSE2Prior
EdgeSE2XYPrior	trunk/g2o/types/slam2d/edge_se2_xyprior.cpp	/^  EdgeSE2XYPrior::EdgeSE2XYPrior() : BaseUnaryEdge< 2, Eigen::Vector2d, g2o::VertexSE2 >()$/;"	f	class:g2o::EdgeSE2XYPrior
g2o	trunk/g2o/types/slam2d/edge_se2_xyprior.cpp	/^namespace g2o {$/;"	n	file:
linearizeOplus	trunk/g2o/types/slam2d/edge_se2_xyprior.cpp	/^  void EdgeSE2XYPrior::linearizeOplus()$/;"	f	class:g2o::EdgeSE2XYPrior
read	trunk/g2o/types/slam2d/edge_se2_xyprior.cpp	/^  bool EdgeSE2XYPrior::read(std::istream& is)$/;"	f	class:g2o::EdgeSE2XYPrior
write	trunk/g2o/types/slam2d/edge_se2_xyprior.cpp	/^  bool EdgeSE2XYPrior::write(std::ostream& os) const$/;"	f	class:g2o::EdgeSE2XYPrior
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/slam2d/edge_se2_xyprior.h	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::EdgeSE2XYPrior
EdgeSE2XYPrior	trunk/g2o/types/slam2d/edge_se2_xyprior.h	/^  class G2O_TYPES_SLAM2D_API EdgeSE2XYPrior : public BaseUnaryEdge<2, Eigen::Vector2d, VertexSE2>$/;"	c	namespace:g2o
G2O_EDGE_SE2_PRIOR_XY_H	trunk/g2o/types/slam2d/edge_se2_xyprior.h	28;"	d
computeError	trunk/g2o/types/slam2d/edge_se2_xyprior.h	/^    virtual void computeError()$/;"	f	class:g2o::EdgeSE2XYPrior
g2o	trunk/g2o/types/slam2d/edge_se2_xyprior.h	/^namespace g2o {$/;"	n
getMeasurementData	trunk/g2o/types/slam2d/edge_se2_xyprior.h	/^    virtual bool getMeasurementData(double* d) const$/;"	f	class:g2o::EdgeSE2XYPrior
measurementDimension	trunk/g2o/types/slam2d/edge_se2_xyprior.h	/^    virtual int measurementDimension() const {return 2;}$/;"	f	class:g2o::EdgeSE2XYPrior
setMeasurementData	trunk/g2o/types/slam2d/edge_se2_xyprior.h	/^    virtual bool setMeasurementData(const double* d)$/;"	f	class:g2o::EdgeSE2XYPrior
G2O_TYPES_SLAM2D_API	trunk/g2o/types/slam2d/g2o_types_slam2d_api.h	19;"	d
G2O_TYPES_SLAM2D_API	trunk/g2o/types/slam2d/g2o_types_slam2d_api.h	21;"	d
G2O_TYPES_SLAM2D_API	trunk/g2o/types/slam2d/g2o_types_slam2d_api.h	24;"	d
G2O_TYPES_SLAM2D_API	trunk/g2o/types/slam2d/g2o_types_slam2d_api.h	29;"	d
G2O_TYPES_SLAM2D_API_H	trunk/g2o/types/slam2d/g2o_types_slam2d_api.h	11;"	d
CacheSE2Offset	trunk/g2o/types/slam2d/parameter_se2_offset.cpp	/^  CacheSE2Offset::CacheSE2Offset() :$/;"	f	class:g2o::CacheSE2Offset
ParameterSE2Offset	trunk/g2o/types/slam2d/parameter_se2_offset.cpp	/^  ParameterSE2Offset::ParameterSE2Offset(){$/;"	f	class:g2o::ParameterSE2Offset
g2o	trunk/g2o/types/slam2d/parameter_se2_offset.cpp	/^namespace g2o {$/;"	n	file:
read	trunk/g2o/types/slam2d/parameter_se2_offset.cpp	/^  bool ParameterSE2Offset::read(std::istream& is) {$/;"	f	class:g2o::ParameterSE2Offset
resolveDependancies	trunk/g2o/types/slam2d/parameter_se2_offset.cpp	/^  bool CacheSE2Offset::resolveDependancies(){$/;"	f	class:g2o::CacheSE2Offset
setOffset	trunk/g2o/types/slam2d/parameter_se2_offset.cpp	/^  void ParameterSE2Offset::setOffset(const SE2& offset_){$/;"	f	class:g2o::ParameterSE2Offset
setOffsetParam	trunk/g2o/types/slam2d/parameter_se2_offset.cpp	/^  void CacheSE2Offset::setOffsetParam(ParameterSE2Offset* offsetParam)$/;"	f	class:g2o::CacheSE2Offset
updateImpl	trunk/g2o/types/slam2d/parameter_se2_offset.cpp	/^  void CacheSE2Offset::updateImpl(){$/;"	f	class:g2o::CacheSE2Offset
write	trunk/g2o/types/slam2d/parameter_se2_offset.cpp	/^  bool ParameterSE2Offset::write(std::ostream& os) const {$/;"	f	class:g2o::ParameterSE2Offset
CacheSE2Offset	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^  class G2O_TYPES_SLAM2D_API CacheSE2Offset: public Cache {$/;"	c	namespace:g2o
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::CacheSE2Offset
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::ParameterSE2Offset
G2O_VERTEX_SE2_OFFSET_PARAMETERS_H_	trunk/g2o/types/slam2d/parameter_se2_offset.h	28;"	d
ParameterSE2Offset	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^  class G2O_TYPES_SLAM2D_API ParameterSE2Offset: public Parameter$/;"	c	namespace:g2o
RpInverseRInverseMatrix	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      const Eigen::Matrix2d RpInverseRInverseMatrix() const { return _RpInverse_RInverse; }$/;"	f	class:g2o::CacheSE2Offset
RpInverseRInversePrimeMatrix	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      const Eigen::Matrix2d RpInverseRInversePrimeMatrix() const { return _RpInverse_RInversePrime; }$/;"	f	class:g2o::CacheSE2Offset
_RpInverse_RInverse	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      Matrix2d _RpInverse_RInverse;$/;"	m	class:g2o::CacheSE2Offset
_RpInverse_RInversePrime	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      Matrix2d _RpInverse_RInversePrime;$/;"	m	class:g2o::CacheSE2Offset
_inverseOffsetMatrix	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      Eigen::Isometry2d _inverseOffsetMatrix;$/;"	m	class:g2o::ParameterSE2Offset
_n2w	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      Eigen::Isometry2d _n2w; \/\/\/< sensor to world$/;"	m	class:g2o::CacheSE2Offset
_offset	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      SE2 _offset;$/;"	m	class:g2o::ParameterSE2Offset
_offsetMatrix	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      Eigen::Isometry2d _offsetMatrix;$/;"	m	class:g2o::ParameterSE2Offset
_offsetParam	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      ParameterSE2Offset* _offsetParam; \/\/\/< the parameter connected to the cache$/;"	m	class:g2o::CacheSE2Offset
_se2_n2w	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      SE2 _se2_n2w;$/;"	m	class:g2o::CacheSE2Offset
_se2_w2n	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      SE2 _se2_w2n;$/;"	m	class:g2o::CacheSE2Offset
_w2l	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      Eigen::Isometry2d _w2l; \/\/\/< world to local$/;"	m	class:g2o::CacheSE2Offset
_w2n	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      Eigen::Isometry2d _w2n; \/\/\/< world to sensor transform$/;"	m	class:g2o::CacheSE2Offset
g2o	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^namespace g2o {$/;"	n
inverseOffsetMatrix	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      const Eigen::Isometry2d& inverseOffsetMatrix() const { return _inverseOffsetMatrix;}$/;"	f	class:g2o::ParameterSE2Offset
n2w	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      const SE2& n2w() const {return _se2_n2w;}$/;"	f	class:g2o::CacheSE2Offset
n2wMatrix	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      const Eigen::Isometry2d& n2wMatrix() const { return _n2w;}$/;"	f	class:g2o::CacheSE2Offset
offset	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      const SE2& offset() const { return _offset;}$/;"	f	class:g2o::ParameterSE2Offset
offsetMatrix	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      const Eigen::Isometry2d& offsetMatrix() const { return _offsetMatrix;}$/;"	f	class:g2o::ParameterSE2Offset
offsetParam	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      const ParameterSE2Offset* offsetParam() const { return _offsetParam;}$/;"	f	class:g2o::CacheSE2Offset
w2lMatrix	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      const Eigen::Isometry2d& w2lMatrix() const { return _w2l;}$/;"	f	class:g2o::CacheSE2Offset
w2n	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      const SE2& w2n() const {return _se2_w2n;}$/;"	f	class:g2o::CacheSE2Offset
w2nMatrix	trunk/g2o/types/slam2d/parameter_se2_offset.h	/^      const Eigen::Isometry2d& w2nMatrix() const { return _w2n;}$/;"	f	class:g2o::CacheSE2Offset
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/slam2d/se2.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::SE2
G2O_SE2_H_	trunk/g2o/types/slam2d/se2.h	28;"	d
SE2	trunk/g2o/types/slam2d/se2.h	/^      SE2():_R(0),_t(0,0){}$/;"	f	class:g2o::SE2
SE2	trunk/g2o/types/slam2d/se2.h	/^      SE2(const Vector3d& v):_R(v[2]),_t(v[0],v[1]){}$/;"	f	class:g2o::SE2
SE2	trunk/g2o/types/slam2d/se2.h	/^      SE2(double x, double y, double theta):_R(theta),_t(x,y){}$/;"	f	class:g2o::SE2
SE2	trunk/g2o/types/slam2d/se2.h	/^  class G2O_TYPES_SLAM2D_API SE2 {$/;"	c	namespace:g2o
_R	trunk/g2o/types/slam2d/se2.h	/^      Rotation2Dd _R;$/;"	m	class:g2o::SE2
_t	trunk/g2o/types/slam2d/se2.h	/^      Vector2d _t;$/;"	m	class:g2o::SE2
fromVector	trunk/g2o/types/slam2d/se2.h	/^      inline void fromVector (const Vector3d& v){$/;"	f	class:g2o::SE2
g2o	trunk/g2o/types/slam2d/se2.h	/^namespace g2o {$/;"	n
inverse	trunk/g2o/types/slam2d/se2.h	/^      inline SE2 inverse() const{$/;"	f	class:g2o::SE2
operator *	trunk/g2o/types/slam2d/se2.h	/^      inline SE2 operator * (const SE2& tr2) const{$/;"	f	class:g2o::SE2
operator *	trunk/g2o/types/slam2d/se2.h	/^      inline Vector2d operator * (const Vector2d& v) const {$/;"	f	class:g2o::SE2
operator *=	trunk/g2o/types/slam2d/se2.h	/^      inline SE2& operator *= (const SE2& tr2){$/;"	f	class:g2o::SE2
operator Eigen::Isometry2d	trunk/g2o/types/slam2d/se2.h	/^      operator Eigen::Isometry2d() const$/;"	f	class:g2o::SE2
operator []	trunk/g2o/types/slam2d/se2.h	/^      inline double operator [](int i) const {$/;"	f	class:g2o::SE2
rotation	trunk/g2o/types/slam2d/se2.h	/^      inline const Rotation2Dd& rotation() const {return _R;}$/;"	f	class:g2o::SE2
setRotation	trunk/g2o/types/slam2d/se2.h	/^      void setRotation(const Rotation2Dd& R_) {_R=R_;}$/;"	f	class:g2o::SE2
setTranslation	trunk/g2o/types/slam2d/se2.h	/^      void setTranslation(const Vector2d& t_) {_t=t_;}$/;"	f	class:g2o::SE2
toVector	trunk/g2o/types/slam2d/se2.h	/^      inline Vector3d toVector() const {$/;"	f	class:g2o::SE2
translation	trunk/g2o/types/slam2d/se2.h	/^      inline const Vector2d& translation() const {return _t;}$/;"	f	class:g2o::SE2
EdgeSE2DrawAction	trunk/g2o/types/slam2d/types_slam2d.cpp	/^  G2O_REGISTER_ACTION(EdgeSE2DrawAction);$/;"	v
EdgeSE2PointXYBearingDrawAction	trunk/g2o/types/slam2d/types_slam2d.cpp	/^  G2O_REGISTER_ACTION(EdgeSE2PointXYBearingDrawAction);$/;"	v
EdgeSE2PointXYBearingWriteGnuplotAction	trunk/g2o/types/slam2d/types_slam2d.cpp	/^  G2O_REGISTER_ACTION(EdgeSE2PointXYBearingWriteGnuplotAction);$/;"	v
EdgeSE2PointXYDrawAction	trunk/g2o/types/slam2d/types_slam2d.cpp	/^  G2O_REGISTER_ACTION(EdgeSE2PointXYDrawAction);$/;"	v
EdgeSE2PointXYWriteGnuplotAction	trunk/g2o/types/slam2d/types_slam2d.cpp	/^  G2O_REGISTER_ACTION(EdgeSE2PointXYWriteGnuplotAction);$/;"	v
EdgeSE2WriteGnuplotAction	trunk/g2o/types/slam2d/types_slam2d.cpp	/^  G2O_REGISTER_ACTION(EdgeSE2WriteGnuplotAction);$/;"	v
VertexPointXYDrawAction	trunk/g2o/types/slam2d/types_slam2d.cpp	/^  G2O_REGISTER_ACTION(VertexPointXYDrawAction);$/;"	v
VertexPointXYWriteGnuplotAction	trunk/g2o/types/slam2d/types_slam2d.cpp	/^  G2O_REGISTER_ACTION(VertexPointXYWriteGnuplotAction);$/;"	v
VertexSE2DrawAction	trunk/g2o/types/slam2d/types_slam2d.cpp	/^  G2O_REGISTER_ACTION(VertexSE2DrawAction);$/;"	v
VertexSE2WriteGnuplotAction	trunk/g2o/types/slam2d/types_slam2d.cpp	/^  G2O_REGISTER_ACTION(VertexSE2WriteGnuplotAction);$/;"	v
g2o	trunk/g2o/types/slam2d/types_slam2d.cpp	/^namespace g2o {$/;"	n	file:
slam2d	trunk/g2o/types/slam2d/types_slam2d.cpp	/^  G2O_REGISTER_TYPE_GROUP(slam2d);$/;"	v
G2O_TYPES_SLAM2D_	trunk/g2o/types/slam2d/types_slam2d.h	28;"	d
VertexPointXY	trunk/g2o/types/slam2d/vertex_point_xy.cpp	/^  VertexPointXY::VertexPointXY() :$/;"	f	class:g2o::VertexPointXY
VertexPointXYDrawAction	trunk/g2o/types/slam2d/vertex_point_xy.cpp	/^  VertexPointXYDrawAction::VertexPointXYDrawAction(): DrawAction(typeid(VertexPointXY).name()){}$/;"	f	class:g2o::VertexPointXYDrawAction
VertexPointXYWriteGnuplotAction	trunk/g2o/types/slam2d/vertex_point_xy.cpp	/^  VertexPointXYWriteGnuplotAction::VertexPointXYWriteGnuplotAction(): WriteGnuplotAction(typeid(VertexPointXY).name()){}$/;"	f	class:g2o::VertexPointXYWriteGnuplotAction
g2o	trunk/g2o/types/slam2d/vertex_point_xy.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/types/slam2d/vertex_point_xy.cpp	/^  HyperGraphElementAction* VertexPointXYDrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::VertexPointXYDrawAction
operator ()	trunk/g2o/types/slam2d/vertex_point_xy.cpp	/^  HyperGraphElementAction* VertexPointXYWriteGnuplotAction::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::VertexPointXYWriteGnuplotAction
read	trunk/g2o/types/slam2d/vertex_point_xy.cpp	/^  bool VertexPointXY::read(std::istream& is)$/;"	f	class:g2o::VertexPointXY
refreshPropertyPtrs	trunk/g2o/types/slam2d/vertex_point_xy.cpp	/^  bool VertexPointXYDrawAction::refreshPropertyPtrs(HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::VertexPointXYDrawAction
write	trunk/g2o/types/slam2d/vertex_point_xy.cpp	/^  bool VertexPointXY::write(std::ostream& os) const$/;"	f	class:g2o::VertexPointXY
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/slam2d/vertex_point_xy.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::VertexPointXY
G2O_VERTEX_POINT_XY_H	trunk/g2o/types/slam2d/vertex_point_xy.h	28;"	d
VertexPointXY	trunk/g2o/types/slam2d/vertex_point_xy.h	/^  class G2O_TYPES_SLAM2D_API VertexPointXY : public BaseVertex<2, Eigen::Vector2d>$/;"	c	namespace:g2o
VertexPointXYDrawAction	trunk/g2o/types/slam2d/vertex_point_xy.h	/^  class G2O_TYPES_SLAM2D_API VertexPointXYDrawAction: public DrawAction{$/;"	c	namespace:g2o
VertexPointXYWriteGnuplotAction	trunk/g2o/types/slam2d/vertex_point_xy.h	/^  class G2O_TYPES_SLAM2D_API VertexPointXYWriteGnuplotAction: public WriteGnuplotAction {$/;"	c	namespace:g2o
_pointSize	trunk/g2o/types/slam2d/vertex_point_xy.h	/^    FloatProperty *_pointSize;$/;"	m	class:g2o::VertexPointXYDrawAction
estimateDimension	trunk/g2o/types/slam2d/vertex_point_xy.h	/^      virtual int estimateDimension() const { $/;"	f	class:g2o::VertexPointXY
g2o	trunk/g2o/types/slam2d/vertex_point_xy.h	/^namespace g2o {$/;"	n
getEstimateData	trunk/g2o/types/slam2d/vertex_point_xy.h	/^      virtual bool getEstimateData(double* est) const{$/;"	f	class:g2o::VertexPointXY
getMinimalEstimateData	trunk/g2o/types/slam2d/vertex_point_xy.h	/^      virtual bool getMinimalEstimateData(double* est) const{$/;"	f	class:g2o::VertexPointXY
minimalEstimateDimension	trunk/g2o/types/slam2d/vertex_point_xy.h	/^      virtual int minimalEstimateDimension() const { $/;"	f	class:g2o::VertexPointXY
oplusImpl	trunk/g2o/types/slam2d/vertex_point_xy.h	/^      virtual void oplusImpl(const double* update)$/;"	f	class:g2o::VertexPointXY
setEstimateDataImpl	trunk/g2o/types/slam2d/vertex_point_xy.h	/^      virtual bool setEstimateDataImpl(const double* est){$/;"	f	class:g2o::VertexPointXY
setMinimalEstimateDataImpl	trunk/g2o/types/slam2d/vertex_point_xy.h	/^      virtual bool setMinimalEstimateDataImpl(const double* est){$/;"	f	class:g2o::VertexPointXY
setToOriginImpl	trunk/g2o/types/slam2d/vertex_point_xy.h	/^      virtual void setToOriginImpl() {$/;"	f	class:g2o::VertexPointXY
VertexSE2	trunk/g2o/types/slam2d/vertex_se2.cpp	/^  VertexSE2::VertexSE2() :$/;"	f	class:g2o::VertexSE2
VertexSE2DrawAction	trunk/g2o/types/slam2d/vertex_se2.cpp	/^  VertexSE2DrawAction::VertexSE2DrawAction(): DrawAction(typeid(VertexSE2).name()){$/;"	f	class:g2o::VertexSE2DrawAction
VertexSE2WriteGnuplotAction	trunk/g2o/types/slam2d/vertex_se2.cpp	/^  VertexSE2WriteGnuplotAction::VertexSE2WriteGnuplotAction(): WriteGnuplotAction(typeid(VertexSE2).name()){}$/;"	f	class:g2o::VertexSE2WriteGnuplotAction
g2o	trunk/g2o/types/slam2d/vertex_se2.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/types/slam2d/vertex_se2.cpp	/^  HyperGraphElementAction* VertexSE2DrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::VertexSE2DrawAction
operator ()	trunk/g2o/types/slam2d/vertex_se2.cpp	/^  HyperGraphElementAction* VertexSE2WriteGnuplotAction::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::VertexSE2WriteGnuplotAction
read	trunk/g2o/types/slam2d/vertex_se2.cpp	/^  bool VertexSE2::read(std::istream& is)$/;"	f	class:g2o::VertexSE2
refreshPropertyPtrs	trunk/g2o/types/slam2d/vertex_se2.cpp	/^  bool VertexSE2DrawAction::refreshPropertyPtrs(HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::VertexSE2DrawAction
write	trunk/g2o/types/slam2d/vertex_se2.cpp	/^  bool VertexSE2::write(std::ostream& os) const$/;"	f	class:g2o::VertexSE2
G2O_VERTEX_SE2_H	trunk/g2o/types/slam2d/vertex_se2.h	28;"	d
VertexSE2	trunk/g2o/types/slam2d/vertex_se2.h	/^  class G2O_TYPES_SLAM2D_API VertexSE2 : public BaseVertex<3, SE2>$/;"	c	namespace:g2o
VertexSE2DrawAction	trunk/g2o/types/slam2d/vertex_se2.h	/^  class G2O_TYPES_SLAM2D_API VertexSE2DrawAction: public DrawAction{$/;"	c	namespace:g2o
VertexSE2WriteGnuplotAction	trunk/g2o/types/slam2d/vertex_se2.h	/^  class G2O_TYPES_SLAM2D_API VertexSE2WriteGnuplotAction: public WriteGnuplotAction {$/;"	c	namespace:g2o
_drawActions	trunk/g2o/types/slam2d/vertex_se2.h	/^    HyperGraphElementAction* _drawActions;$/;"	m	class:g2o::VertexSE2DrawAction
_triangleX	trunk/g2o/types/slam2d/vertex_se2.h	/^    FloatProperty* _triangleX, *_triangleY;$/;"	m	class:g2o::VertexSE2DrawAction
_triangleY	trunk/g2o/types/slam2d/vertex_se2.h	/^    FloatProperty* _triangleX, *_triangleY;$/;"	m	class:g2o::VertexSE2DrawAction
estimateDimension	trunk/g2o/types/slam2d/vertex_se2.h	/^      virtual int estimateDimension() const { return 3; }$/;"	f	class:g2o::VertexSE2
g2o	trunk/g2o/types/slam2d/vertex_se2.h	/^namespace g2o {$/;"	n
getEstimateData	trunk/g2o/types/slam2d/vertex_se2.h	/^      virtual bool getEstimateData(double* est) const {$/;"	f	class:g2o::VertexSE2
getMinimalEstimateData	trunk/g2o/types/slam2d/vertex_se2.h	/^      virtual bool getMinimalEstimateData(double* est) const {$/;"	f	class:g2o::VertexSE2
minimalEstimateDimension	trunk/g2o/types/slam2d/vertex_se2.h	/^      virtual int minimalEstimateDimension() const { return 3; }$/;"	f	class:g2o::VertexSE2
oplusImpl	trunk/g2o/types/slam2d/vertex_se2.h	/^      virtual void oplusImpl(const double* update)$/;"	f	class:g2o::VertexSE2
setEstimateDataImpl	trunk/g2o/types/slam2d/vertex_se2.h	/^      virtual bool setEstimateDataImpl(const double* est){$/;"	f	class:g2o::VertexSE2
setMinimalEstimateDataImpl	trunk/g2o/types/slam2d/vertex_se2.h	/^      virtual bool setMinimalEstimateDataImpl(const double* est){$/;"	f	class:g2o::VertexSE2
setToOriginImpl	trunk/g2o/types/slam2d/vertex_se2.h	/^      virtual void setToOriginImpl() {$/;"	f	class:g2o::VertexSE2
_q2m	trunk/g2o/types/slam3d/dquat2mat.cpp	/^    int _q2m(double& S, double& qw, const double&  r00 , const double&  r10 , const double&  r20 , const double&  r01 , const double&  r11 , const double&  r21 , const double&  r02 , const double&  r12 , const double&  r22 ){$/;"	f	namespace:g2o::internal
compute_dq_dR	trunk/g2o/types/slam3d/dquat2mat.cpp	/^    void  compute_dq_dR ( Eigen::Matrix<double, 3 , 9 >&  dq_dR , const double&  r11 , const double&  r21 , const double&  r31 , const double&  r12 , const double&  r22 , const double&  r32 , const double&  r13 , const double&  r23 , const double&  r33 ){$/;"	f	namespace:g2o::internal
g2o	trunk/g2o/types/slam3d/dquat2mat.cpp	/^namespace g2o {$/;"	n	file:
internal	trunk/g2o/types/slam3d/dquat2mat.cpp	/^  namespace internal {$/;"	n	namespace:g2o	file:
_DQUAT2MAT_H_	trunk/g2o/types/slam3d/dquat2mat.h	2;"	d
g2o	trunk/g2o/types/slam3d/dquat2mat.h	/^namespace g2o {$/;"	n
internal	trunk/g2o/types/slam3d/dquat2mat.h	/^  namespace internal {$/;"	n	namespace:g2o
compute_dR_dq	trunk/g2o/types/slam3d/dquat2mat_maxima_generated.cpp	/^void  compute_dR_dq ( Eigen::Matrix<double, 9 , 3 >&  dR_dq , const double&  qx , const double&  qy , const double&  qz , const double&  qw ) { $/;"	f
compute_dq_dR_w	trunk/g2o/types/slam3d/dquat2mat_maxima_generated.cpp	/^void  compute_dq_dR_w ( Eigen::Matrix<double, 3 , 9 >&  dq_dR_w , const double&  qw , const double&  r00 , const double&  r10 , const double&  r20 , const double&  r01 , const double&  r11 , const double&  r21 , const double&  r02 , const double&  r12 , const double&  r22 ) { $/;"	f
compute_dq_dR_x	trunk/g2o/types/slam3d/dquat2mat_maxima_generated.cpp	/^void  compute_dq_dR_x ( Eigen::Matrix<double, 3 , 9 >&  dq_dR_x , const double&  qx , const double&  r00 , const double&  r10 , const double&  r20 , const double&  r01 , const double&  r11 , const double&  r21 , const double&  r02 , const double&  r12 , const double&  r22 ) { $/;"	f
compute_dq_dR_y	trunk/g2o/types/slam3d/dquat2mat_maxima_generated.cpp	/^void  compute_dq_dR_y ( Eigen::Matrix<double, 3 , 9 >&  dq_dR_y , const double&  qy , const double&  r00 , const double&  r10 , const double&  r20 , const double&  r01 , const double&  r11 , const double&  r21 , const double&  r02 , const double&  r12 , const double&  r22 ) { $/;"	f
compute_dq_dR_z	trunk/g2o/types/slam3d/dquat2mat_maxima_generated.cpp	/^void  compute_dq_dR_z ( Eigen::Matrix<double, 3 , 9 >&  dq_dR_z , const double&  qz , const double&  r00 , const double&  r10 , const double&  r20 , const double&  r01 , const double&  r11 , const double&  r21 , const double&  r02 , const double&  r12 , const double&  r22 ) { $/;"	f
EdgeSE3	trunk/g2o/types/slam3d/edge_se3.cpp	/^  EdgeSE3::EdgeSE3() : BaseBinaryEdge<6, Eigen::Isometry3d, VertexSE3, VertexSE3>() {$/;"	f	class:g2o::EdgeSE3
EdgeSE3DrawAction	trunk/g2o/types/slam3d/edge_se3.cpp	/^  EdgeSE3DrawAction::EdgeSE3DrawAction(): DrawAction(typeid(EdgeSE3).name()){}$/;"	f	class:g2o::EdgeSE3DrawAction
EdgeSE3WriteGnuplotAction	trunk/g2o/types/slam3d/edge_se3.cpp	/^  EdgeSE3WriteGnuplotAction::EdgeSE3WriteGnuplotAction(): WriteGnuplotAction(typeid(EdgeSE3).name()){}$/;"	f	class:g2o::EdgeSE3WriteGnuplotAction
computeError	trunk/g2o/types/slam3d/edge_se3.cpp	/^  void EdgeSE3::computeError() {$/;"	f	class:g2o::EdgeSE3
g2o	trunk/g2o/types/slam3d/edge_se3.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/slam3d/edge_se3.cpp	/^  void EdgeSE3::initialEstimate(const OptimizableGraph::VertexSet& from_, OptimizableGraph::Vertex* \/*to_*\/) {$/;"	f	class:g2o::EdgeSE3
linearizeOplus	trunk/g2o/types/slam3d/edge_se3.cpp	/^  void EdgeSE3::linearizeOplus(){$/;"	f	class:g2o::EdgeSE3
operator ()	trunk/g2o/types/slam3d/edge_se3.cpp	/^  HyperGraphElementAction* EdgeSE3DrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::EdgeSE3DrawAction
operator ()	trunk/g2o/types/slam3d/edge_se3.cpp	/^  HyperGraphElementAction* EdgeSE3WriteGnuplotAction::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::EdgeSE3WriteGnuplotAction
read	trunk/g2o/types/slam3d/edge_se3.cpp	/^  bool EdgeSE3::read(std::istream& is) {$/;"	f	class:g2o::EdgeSE3
setMeasurementFromState	trunk/g2o/types/slam3d/edge_se3.cpp	/^  bool EdgeSE3::setMeasurementFromState(){$/;"	f	class:g2o::EdgeSE3
write	trunk/g2o/types/slam3d/edge_se3.cpp	/^  bool EdgeSE3::write(std::ostream& os) const {$/;"	f	class:g2o::EdgeSE3
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/slam3d/edge_se3.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::EdgeSE3
EdgeSE3	trunk/g2o/types/slam3d/edge_se3.h	/^  class G2O_TYPES_SLAM3D_API EdgeSE3 : public BaseBinaryEdge<6, Eigen::Isometry3d, VertexSE3, VertexSE3> {$/;"	c	namespace:g2o
EdgeSE3DrawAction	trunk/g2o/types/slam3d/edge_se3.h	/^  class G2O_TYPES_SLAM3D_API EdgeSE3DrawAction: public DrawAction{$/;"	c	namespace:g2o
EdgeSE3WriteGnuplotAction	trunk/g2o/types/slam3d/edge_se3.h	/^  class G2O_TYPES_SLAM3D_API EdgeSE3WriteGnuplotAction: public WriteGnuplotAction {$/;"	c	namespace:g2o
G2O_EDGE_SE3_H_	trunk/g2o/types/slam3d/edge_se3.h	2;"	d
_inverseMeasurement	trunk/g2o/types/slam3d/edge_se3.h	/^      Eigen::Isometry3d _inverseMeasurement;$/;"	m	class:g2o::EdgeSE3
g2o	trunk/g2o/types/slam3d/edge_se3.h	/^namespace g2o {$/;"	n
getMeasurementData	trunk/g2o/types/slam3d/edge_se3.h	/^      virtual bool getMeasurementData(double* d) const{$/;"	f	class:g2o::EdgeSE3
initialEstimatePossible	trunk/g2o/types/slam3d/edge_se3.h	/^      virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& \/*from*\/, $/;"	f	class:g2o::EdgeSE3
measurementDimension	trunk/g2o/types/slam3d/edge_se3.h	/^      virtual int measurementDimension() const {return 7;}$/;"	f	class:g2o::EdgeSE3
setMeasurement	trunk/g2o/types/slam3d/edge_se3.h	/^      virtual void setMeasurement(const Eigen::Isometry3d& m){$/;"	f	class:g2o::EdgeSE3
setMeasurementData	trunk/g2o/types/slam3d/edge_se3.h	/^      virtual bool setMeasurementData(const double* d){$/;"	f	class:g2o::EdgeSE3
EdgeSE3Offset	trunk/g2o/types/slam3d/edge_se3_offset.cpp	/^  EdgeSE3Offset::EdgeSE3Offset() : EdgeSE3() {$/;"	f	class:g2o::EdgeSE3Offset
computeError	trunk/g2o/types/slam3d/edge_se3_offset.cpp	/^  void EdgeSE3Offset::computeError() {$/;"	f	class:g2o::EdgeSE3Offset
g2o	trunk/g2o/types/slam3d/edge_se3_offset.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/slam3d/edge_se3_offset.cpp	/^  void EdgeSE3Offset::initialEstimate(const OptimizableGraph::VertexSet& from_, OptimizableGraph::Vertex* \/*to_*\/) {$/;"	f	class:g2o::EdgeSE3Offset
linearizeOplus	trunk/g2o/types/slam3d/edge_se3_offset.cpp	/^  void EdgeSE3Offset::linearizeOplus(){$/;"	f	class:g2o::EdgeSE3Offset
read	trunk/g2o/types/slam3d/edge_se3_offset.cpp	/^  bool EdgeSE3Offset::read(std::istream& is) {$/;"	f	class:g2o::EdgeSE3Offset
resolveCaches	trunk/g2o/types/slam3d/edge_se3_offset.cpp	/^  bool EdgeSE3Offset::resolveCaches(){$/;"	f	class:g2o::EdgeSE3Offset
setMeasurementFromState	trunk/g2o/types/slam3d/edge_se3_offset.cpp	/^  bool EdgeSE3Offset::setMeasurementFromState(){$/;"	f	class:g2o::EdgeSE3Offset
write	trunk/g2o/types/slam3d/edge_se3_offset.cpp	/^  bool EdgeSE3Offset::write(std::ostream& os) const {$/;"	f	class:g2o::EdgeSE3Offset
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/slam3d/edge_se3_offset.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::EdgeSE3Offset
EdgeSE3Offset	trunk/g2o/types/slam3d/edge_se3_offset.h	/^  class G2O_TYPES_SLAM3D_API EdgeSE3Offset : public EdgeSE3 {$/;"	c	namespace:g2o
G2O_EDGE_SE3_OFFSET_H_	trunk/g2o/types/slam3d/edge_se3_offset.h	28;"	d
_cacheFrom	trunk/g2o/types/slam3d/edge_se3_offset.h	/^      CacheSE3Offset  *_cacheFrom, *_cacheTo;$/;"	m	class:g2o::EdgeSE3Offset
_cacheTo	trunk/g2o/types/slam3d/edge_se3_offset.h	/^      CacheSE3Offset  *_cacheFrom, *_cacheTo;$/;"	m	class:g2o::EdgeSE3Offset
_offsetFrom	trunk/g2o/types/slam3d/edge_se3_offset.h	/^      ParameterSE3Offset *_offsetFrom, *_offsetTo;$/;"	m	class:g2o::EdgeSE3Offset
_offsetTo	trunk/g2o/types/slam3d/edge_se3_offset.h	/^      ParameterSE3Offset *_offsetFrom, *_offsetTo;$/;"	m	class:g2o::EdgeSE3Offset
g2o	trunk/g2o/types/slam3d/edge_se3_offset.h	/^namespace g2o {$/;"	n
initialEstimatePossible	trunk/g2o/types/slam3d/edge_se3_offset.h	/^      virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& \/*from*\/, $/;"	f	class:g2o::EdgeSE3Offset
EdgeSE3PointXYZ	trunk/g2o/types/slam3d/edge_se3_pointxyz.cpp	/^  EdgeSE3PointXYZ::EdgeSE3PointXYZ() : BaseBinaryEdge<3, Vector3d, VertexSE3, VertexPointXYZ>() {$/;"	f	class:g2o::EdgeSE3PointXYZ
EdgeSE3PointXYZDrawAction	trunk/g2o/types/slam3d/edge_se3_pointxyz.cpp	/^  EdgeSE3PointXYZDrawAction::EdgeSE3PointXYZDrawAction(): DrawAction(typeid(EdgeSE3PointXYZ).name()){}$/;"	f	class:g2o::EdgeSE3PointXYZDrawAction
computeError	trunk/g2o/types/slam3d/edge_se3_pointxyz.cpp	/^  void EdgeSE3PointXYZ::computeError() {$/;"	f	class:g2o::EdgeSE3PointXYZ
g2o	trunk/g2o/types/slam3d/edge_se3_pointxyz.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/slam3d/edge_se3_pointxyz.cpp	/^  void EdgeSE3PointXYZ::initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/*to_*\/)$/;"	f	class:g2o::EdgeSE3PointXYZ
linearizeOplus	trunk/g2o/types/slam3d/edge_se3_pointxyz.cpp	/^  void EdgeSE3PointXYZ::linearizeOplus() {$/;"	f	class:g2o::EdgeSE3PointXYZ
operator ()	trunk/g2o/types/slam3d/edge_se3_pointxyz.cpp	/^  HyperGraphElementAction* EdgeSE3PointXYZDrawAction::operator()(HyperGraph::HyperGraphElement* element,$/;"	f	class:g2o::EdgeSE3PointXYZDrawAction
read	trunk/g2o/types/slam3d/edge_se3_pointxyz.cpp	/^  bool EdgeSE3PointXYZ::read(std::istream& is) {$/;"	f	class:g2o::EdgeSE3PointXYZ
resolveCaches	trunk/g2o/types/slam3d/edge_se3_pointxyz.cpp	/^  bool EdgeSE3PointXYZ::resolveCaches(){$/;"	f	class:g2o::EdgeSE3PointXYZ
setMeasurementFromState	trunk/g2o/types/slam3d/edge_se3_pointxyz.cpp	/^  bool EdgeSE3PointXYZ::setMeasurementFromState(){$/;"	f	class:g2o::EdgeSE3PointXYZ
write	trunk/g2o/types/slam3d/edge_se3_pointxyz.cpp	/^  bool EdgeSE3PointXYZ::write(std::ostream& os) const {$/;"	f	class:g2o::EdgeSE3PointXYZ
EdgeSE3PointXYZ	trunk/g2o/types/slam3d/edge_se3_pointxyz.h	/^  class G2O_TYPES_SLAM3D_API EdgeSE3PointXYZ : public BaseBinaryEdge<3, Vector3d, VertexSE3, VertexPointXYZ> {$/;"	c	namespace:g2o
EdgeSE3PointXYZDrawAction	trunk/g2o/types/slam3d/edge_se3_pointxyz.h	/^  class EdgeSE3PointXYZDrawAction: public DrawAction{$/;"	c	namespace:g2o
G2O_EDGE_SE3_POINT_XYZ_H_	trunk/g2o/types/slam3d/edge_se3_pointxyz.h	28;"	d
J	trunk/g2o/types/slam3d/edge_se3_pointxyz.h	/^    Eigen::Matrix<double,3,9> J; \/\/ jacobian before projection$/;"	m	class:g2o::EdgeSE3PointXYZ
cache	trunk/g2o/types/slam3d/edge_se3_pointxyz.h	/^    CacheSE3Offset* cache;$/;"	m	class:g2o::EdgeSE3PointXYZ
g2o	trunk/g2o/types/slam3d/edge_se3_pointxyz.h	/^namespace g2o {$/;"	n
getMeasurementData	trunk/g2o/types/slam3d/edge_se3_pointxyz.h	/^    virtual bool getMeasurementData(double* d) const{$/;"	f	class:g2o::EdgeSE3PointXYZ
initialEstimatePossible	trunk/g2o/types/slam3d/edge_se3_pointxyz.h	/^    virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& from, $/;"	f	class:g2o::EdgeSE3PointXYZ
measurementDimension	trunk/g2o/types/slam3d/edge_se3_pointxyz.h	/^    virtual int measurementDimension() const {return 3;}$/;"	f	class:g2o::EdgeSE3PointXYZ
offsetParam	trunk/g2o/types/slam3d/edge_se3_pointxyz.h	/^    ParameterSE3Offset* offsetParam;$/;"	m	class:g2o::EdgeSE3PointXYZ
setMeasurement	trunk/g2o/types/slam3d/edge_se3_pointxyz.h	/^    virtual void setMeasurement(const Vector3d& m){$/;"	f	class:g2o::EdgeSE3PointXYZ
setMeasurementData	trunk/g2o/types/slam3d/edge_se3_pointxyz.h	/^    virtual bool setMeasurementData(const double* d){$/;"	f	class:g2o::EdgeSE3PointXYZ
EdgeSE3PointXYZDepth	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.cpp	/^  EdgeSE3PointXYZDepth::EdgeSE3PointXYZDepth() : BaseBinaryEdge<3, Vector3d, VertexSE3, VertexPointXYZ>() {$/;"	f	class:g2o::EdgeSE3PointXYZDepth
computeError	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.cpp	/^  void EdgeSE3PointXYZDepth::computeError() {$/;"	f	class:g2o::EdgeSE3PointXYZDepth
g2o	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.cpp	/^  void EdgeSE3PointXYZDepth::initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/*to_*\/)$/;"	f	class:g2o::EdgeSE3PointXYZDepth
linearizeOplus	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.cpp	/^  void EdgeSE3PointXYZDepth::linearizeOplus() {$/;"	f	class:g2o::EdgeSE3PointXYZDepth
read	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.cpp	/^  bool EdgeSE3PointXYZDepth::read(std::istream& is) {$/;"	f	class:g2o::EdgeSE3PointXYZDepth
resolveCaches	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.cpp	/^  bool EdgeSE3PointXYZDepth::resolveCaches(){$/;"	f	class:g2o::EdgeSE3PointXYZDepth
setMeasurementFromState	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.cpp	/^  bool EdgeSE3PointXYZDepth::setMeasurementFromState(){$/;"	f	class:g2o::EdgeSE3PointXYZDepth
write	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.cpp	/^  bool EdgeSE3PointXYZDepth::write(std::ostream& os) const {$/;"	f	class:g2o::EdgeSE3PointXYZDepth
EdgeSE3PointXYZDepth	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.h	/^  class G2O_TYPES_SLAM3D_API EdgeSE3PointXYZDepth : public BaseBinaryEdge<3, Vector3d, VertexSE3, VertexPointXYZ> {$/;"	c	namespace:g2o
G2O_EDGE_PROJECT_DEPTH_H_	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.h	28;"	d
J	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.h	/^    Eigen::Matrix<double,3,9> J; \/\/ jacobian before projection$/;"	m	class:g2o::EdgeSE3PointXYZDepth
cache	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.h	/^    CacheCamera* cache;$/;"	m	class:g2o::EdgeSE3PointXYZDepth
g2o	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.h	/^namespace g2o {$/;"	n
getMeasurementData	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.h	/^    virtual bool getMeasurementData(double* d) const{$/;"	f	class:g2o::EdgeSE3PointXYZDepth
initialEstimatePossible	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.h	/^    virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& from, $/;"	f	class:g2o::EdgeSE3PointXYZDepth
measurementDimension	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.h	/^    virtual int measurementDimension() const {return 3;}$/;"	f	class:g2o::EdgeSE3PointXYZDepth
params	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.h	/^    ParameterCamera* params;$/;"	m	class:g2o::EdgeSE3PointXYZDepth
setMeasurement	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.h	/^    virtual void setMeasurement(const Vector3d& m){$/;"	f	class:g2o::EdgeSE3PointXYZDepth
setMeasurementData	trunk/g2o/types/slam3d/edge_se3_pointxyz_depth.h	/^    virtual bool setMeasurementData(const double* d){$/;"	f	class:g2o::EdgeSE3PointXYZDepth
EdgeProjectDisparityDrawAction	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.cpp	/^  EdgeProjectDisparityDrawAction::EdgeProjectDisparityDrawAction(): DrawAction(typeid(EdgeSE3PointXYZDisparity).name()){}$/;"	f	class:g2o::EdgeProjectDisparityDrawAction
EdgeSE3PointXYZDisparity	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.cpp	/^  EdgeSE3PointXYZDisparity::EdgeSE3PointXYZDisparity() : BaseBinaryEdge<3, Vector3d, VertexSE3, VertexPointXYZ>() {$/;"	f	class:g2o::EdgeSE3PointXYZDisparity
computeError	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.cpp	/^  void EdgeSE3PointXYZDisparity::computeError() {$/;"	f	class:g2o::EdgeSE3PointXYZDisparity
g2o	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.cpp	/^  void EdgeSE3PointXYZDisparity::initialEstimate(const OptimizableGraph::VertexSet& from, OptimizableGraph::Vertex* \/*to*\/)$/;"	f	class:g2o::EdgeSE3PointXYZDisparity
linearizeOplus	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.cpp	/^  void EdgeSE3PointXYZDisparity::linearizeOplus() {$/;"	f	class:g2o::EdgeSE3PointXYZDisparity
operator ()	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.cpp	/^  HyperGraphElementAction* EdgeProjectDisparityDrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::EdgeProjectDisparityDrawAction
read	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.cpp	/^  bool EdgeSE3PointXYZDisparity::read(std::istream& is) {$/;"	f	class:g2o::EdgeSE3PointXYZDisparity
resolveCaches	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.cpp	/^  bool EdgeSE3PointXYZDisparity::resolveCaches(){$/;"	f	class:g2o::EdgeSE3PointXYZDisparity
setMeasurementFromState	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.cpp	/^  bool EdgeSE3PointXYZDisparity::setMeasurementFromState(){$/;"	f	class:g2o::EdgeSE3PointXYZDisparity
write	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.cpp	/^  bool EdgeSE3PointXYZDisparity::write(std::ostream& os) const {$/;"	f	class:g2o::EdgeSE3PointXYZDisparity
EDGE_PROJECT_DISPARITY_ANALYTIC_JACOBIAN	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.h	36;"	d
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.h	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::EdgeSE3PointXYZDisparity
EdgeProjectDisparityDrawAction	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.h	/^  class G2O_TYPES_SLAM3D_API EdgeProjectDisparityDrawAction: public DrawAction{$/;"	c	namespace:g2o
EdgeSE3PointXYZDisparity	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.h	/^  class G2O_TYPES_SLAM3D_API EdgeSE3PointXYZDisparity : public BaseBinaryEdge<3, Vector3d, VertexSE3, VertexPointXYZ> {$/;"	c	namespace:g2o
G2O_EDGE_SE3_POINTXYZ_DISPARITY_H_	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.h	28;"	d
J	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.h	/^    Eigen::Matrix<double,3,9> J; \/\/ jacobian before projection$/;"	m	class:g2o::EdgeSE3PointXYZDisparity
cache	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.h	/^    CacheCamera* cache;$/;"	m	class:g2o::EdgeSE3PointXYZDisparity
g2o	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.h	/^namespace g2o {$/;"	n
getMeasurementData	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.h	/^    virtual bool getMeasurementData(double* d) const{$/;"	f	class:g2o::EdgeSE3PointXYZDisparity
initialEstimatePossible	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.h	/^    virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& from, $/;"	f	class:g2o::EdgeSE3PointXYZDisparity
measurementDimension	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.h	/^    virtual int measurementDimension() const {return 3;}$/;"	f	class:g2o::EdgeSE3PointXYZDisparity
params	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.h	/^    ParameterCamera* params;$/;"	m	class:g2o::EdgeSE3PointXYZDisparity
setMeasurement	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.h	/^    virtual void setMeasurement(const Vector3d& m){$/;"	f	class:g2o::EdgeSE3PointXYZDisparity
setMeasurementData	trunk/g2o/types/slam3d/edge_se3_pointxyz_disparity.h	/^    virtual bool setMeasurementData(const double* d){$/;"	f	class:g2o::EdgeSE3PointXYZDisparity
EdgeSE3Prior	trunk/g2o/types/slam3d/edge_se3_prior.cpp	/^  EdgeSE3Prior::EdgeSE3Prior() : BaseUnaryEdge<6, Eigen::Isometry3d, VertexSE3>() {$/;"	f	class:g2o::EdgeSE3Prior
computeError	trunk/g2o/types/slam3d/edge_se3_prior.cpp	/^  void EdgeSE3Prior::computeError() {$/;"	f	class:g2o::EdgeSE3Prior
g2o	trunk/g2o/types/slam3d/edge_se3_prior.cpp	/^namespace g2o {$/;"	n	file:
initialEstimate	trunk/g2o/types/slam3d/edge_se3_prior.cpp	/^  void EdgeSE3Prior::initialEstimate(const OptimizableGraph::VertexSet& \/*from_*\/, OptimizableGraph::Vertex* \/*to_*\/) {$/;"	f	class:g2o::EdgeSE3Prior
linearizeOplus	trunk/g2o/types/slam3d/edge_se3_prior.cpp	/^  void EdgeSE3Prior::linearizeOplus(){$/;"	f	class:g2o::EdgeSE3Prior
read	trunk/g2o/types/slam3d/edge_se3_prior.cpp	/^  bool EdgeSE3Prior::read(std::istream& is) {$/;"	f	class:g2o::EdgeSE3Prior
resolveCaches	trunk/g2o/types/slam3d/edge_se3_prior.cpp	/^  bool EdgeSE3Prior::resolveCaches(){$/;"	f	class:g2o::EdgeSE3Prior
setMeasurementFromState	trunk/g2o/types/slam3d/edge_se3_prior.cpp	/^  bool EdgeSE3Prior::setMeasurementFromState(){$/;"	f	class:g2o::EdgeSE3Prior
write	trunk/g2o/types/slam3d/edge_se3_prior.cpp	/^  bool EdgeSE3Prior::write(std::ostream& os) const {$/;"	f	class:g2o::EdgeSE3Prior
EdgeSE3Prior	trunk/g2o/types/slam3d/edge_se3_prior.h	/^  class G2O_TYPES_SLAM3D_API EdgeSE3Prior : public BaseUnaryEdge<6, Eigen::Isometry3d, VertexSE3> {$/;"	c	namespace:g2o
G2O_EDGE_SE3_PRIOR_H_	trunk/g2o/types/slam3d/edge_se3_prior.h	28;"	d
_cache	trunk/g2o/types/slam3d/edge_se3_prior.h	/^    CacheSE3Offset* _cache;$/;"	m	class:g2o::EdgeSE3Prior
_inverseMeasurement	trunk/g2o/types/slam3d/edge_se3_prior.h	/^    Eigen::Isometry3d _inverseMeasurement;$/;"	m	class:g2o::EdgeSE3Prior
_offsetParam	trunk/g2o/types/slam3d/edge_se3_prior.h	/^    ParameterSE3Offset* _offsetParam;$/;"	m	class:g2o::EdgeSE3Prior
g2o	trunk/g2o/types/slam3d/edge_se3_prior.h	/^namespace g2o {$/;"	n
getMeasurementData	trunk/g2o/types/slam3d/edge_se3_prior.h	/^    virtual bool getMeasurementData(double* d) const{$/;"	f	class:g2o::EdgeSE3Prior
initialEstimatePossible	trunk/g2o/types/slam3d/edge_se3_prior.h	/^    virtual double initialEstimatePossible(const OptimizableGraph::VertexSet& \/*from*\/, $/;"	f	class:g2o::EdgeSE3Prior
measurementDimension	trunk/g2o/types/slam3d/edge_se3_prior.h	/^    virtual int measurementDimension() const {return 7;}$/;"	f	class:g2o::EdgeSE3Prior
setMeasurement	trunk/g2o/types/slam3d/edge_se3_prior.h	/^    virtual void setMeasurement(const Eigen::Isometry3d& m){$/;"	f	class:g2o::EdgeSE3Prior
setMeasurementData	trunk/g2o/types/slam3d/edge_se3_prior.h	/^    virtual bool setMeasurementData(const double* d){$/;"	f	class:g2o::EdgeSE3Prior
G2O_TYPES_SLAM3D_API	trunk/g2o/types/slam3d/g2o_types_slam3d_api.h	19;"	d
G2O_TYPES_SLAM3D_API	trunk/g2o/types/slam3d/g2o_types_slam3d_api.h	21;"	d
G2O_TYPES_SLAM3D_API	trunk/g2o/types/slam3d/g2o_types_slam3d_api.h	24;"	d
G2O_TYPES_SLAM3D_API	trunk/g2o/types/slam3d/g2o_types_slam3d_api.h	29;"	d
G2O_TYPES_SLAM3D_API_H	trunk/g2o/types/slam3d/g2o_types_slam3d_api.h	11;"	d
g2o	trunk/g2o/types/slam3d/isometry3d_gradients.cpp	/^namespace g2o {$/;"	n	file:
internal	trunk/g2o/types/slam3d/isometry3d_gradients.cpp	/^  namespace internal {$/;"	n	namespace:g2o	file:
G2O_ISOMETRY3D_GRADIENTS_H_	trunk/g2o/types/slam3d/isometry3d_gradients.h	28;"	d
computeEdgeSE3Gradient	trunk/g2o/types/slam3d/isometry3d_gradients.h	/^  void computeEdgeSE3Gradient(Eigen::Isometry3d& E,$/;"	f	namespace:g2o::internal
computeEdgeSE3PriorGradient	trunk/g2o/types/slam3d/isometry3d_gradients.h	/^  void computeEdgeSE3PriorGradient(Eigen::Isometry3d& E,$/;"	f	namespace:g2o::internal
g2o	trunk/g2o/types/slam3d/isometry3d_gradients.h	/^namespace g2o {$/;"	n
internal	trunk/g2o/types/slam3d/isometry3d_gradients.h	/^  namespace internal {$/;"	n	namespace:g2o
skew	trunk/g2o/types/slam3d/isometry3d_gradients.h	/^    inline void skew(Eigen::MatrixBase<Derived>& s, const Eigen::MatrixBase<DerivedOther>& v){$/;"	f	namespace:g2o::internal
skew	trunk/g2o/types/slam3d/isometry3d_gradients.h	/^    void skew(Eigen::MatrixBase<Derived>& Sx, $/;"	f	namespace:g2o::internal
skewT	trunk/g2o/types/slam3d/isometry3d_gradients.h	/^    inline void skewT(Eigen::MatrixBase<Derived>& Sx, $/;"	f	namespace:g2o::internal
skewT	trunk/g2o/types/slam3d/isometry3d_gradients.h	/^    inline void skewT(Eigen::MatrixBase<Derived>& s, const Eigen::MatrixBase<DerivedOther>& v){$/;"	f	namespace:g2o::internal
fromCompactQuaternion	trunk/g2o/types/slam3d/isometry3d_mappings.cpp	/^    Matrix3d fromCompactQuaternion(const Vector3d& v) {$/;"	f	namespace:g2o::internal
fromEuler	trunk/g2o/types/slam3d/isometry3d_mappings.cpp	/^    Matrix3d fromEuler(const Vector3d& v) {$/;"	f	namespace:g2o::internal
fromSE3Quat	trunk/g2o/types/slam3d/isometry3d_mappings.cpp	/^    Isometry3d fromSE3Quat(const SE3Quat& t)$/;"	f	namespace:g2o::internal
fromVectorET	trunk/g2o/types/slam3d/isometry3d_mappings.cpp	/^    Isometry3d fromVectorET(const Vector6d& v) {$/;"	f	namespace:g2o::internal
fromVectorMQT	trunk/g2o/types/slam3d/isometry3d_mappings.cpp	/^    Isometry3d fromVectorMQT(const Vector6d& v){$/;"	f	namespace:g2o::internal
fromVectorQT	trunk/g2o/types/slam3d/isometry3d_mappings.cpp	/^    Isometry3d fromVectorQT(const Vector7d& v) {$/;"	f	namespace:g2o::internal
g2o	trunk/g2o/types/slam3d/isometry3d_mappings.cpp	/^namespace g2o {$/;"	n	file:
internal	trunk/g2o/types/slam3d/isometry3d_mappings.cpp	/^  namespace internal {$/;"	n	namespace:g2o	file:
normalize	trunk/g2o/types/slam3d/isometry3d_mappings.cpp	/^    Quaterniond& normalize(Quaterniond& q){$/;"	f	namespace:g2o::internal
normalized	trunk/g2o/types/slam3d/isometry3d_mappings.cpp	/^    Quaterniond normalized(const Quaterniond& q) {$/;"	f	namespace:g2o::internal
toCompactQuaternion	trunk/g2o/types/slam3d/isometry3d_mappings.cpp	/^    Vector3d toCompactQuaternion(const Eigen::Matrix3d& R) {$/;"	f	namespace:g2o::internal
toEuler	trunk/g2o/types/slam3d/isometry3d_mappings.cpp	/^    Vector3d toEuler(const Eigen::Matrix3d& R) {$/;"	f	namespace:g2o::internal
toSE3Quat	trunk/g2o/types/slam3d/isometry3d_mappings.cpp	/^    SE3Quat toSE3Quat(const Isometry3d& t)$/;"	f	namespace:g2o::internal
toVectorET	trunk/g2o/types/slam3d/isometry3d_mappings.cpp	/^    Vector6d toVectorET(const Isometry3d& t) {$/;"	f	namespace:g2o::internal
toVectorMQT	trunk/g2o/types/slam3d/isometry3d_mappings.cpp	/^    Vector6d toVectorMQT(const Isometry3d& t) {$/;"	f	namespace:g2o::internal
toVectorQT	trunk/g2o/types/slam3d/isometry3d_mappings.cpp	/^    Vector7d toVectorQT(const Isometry3d& t){$/;"	f	namespace:g2o::internal
G2O_ISOMETRY3D_MAPPINGS_H_	trunk/g2o/types/slam3d/isometry3d_mappings.h	28;"	d
Vector6d	trunk/g2o/types/slam3d/isometry3d_mappings.h	/^  typedef Matrix<double, 6, 1> Vector6d;$/;"	t	namespace:g2o
Vector7d	trunk/g2o/types/slam3d/isometry3d_mappings.h	/^  typedef Matrix<double, 7, 1> Vector7d;$/;"	t	namespace:g2o
approximateNearestOrthogonalMatrix	trunk/g2o/types/slam3d/isometry3d_mappings.h	/^    void approximateNearestOrthogonalMatrix(const Eigen::MatrixBase<Derived>& R)$/;"	f	namespace:g2o::internal
extractRotation	trunk/g2o/types/slam3d/isometry3d_mappings.h	/^    inline Eigen::Isometry3d::ConstLinearPart extractRotation(const Eigen::Isometry3d& A)$/;"	f	namespace:g2o::internal
g2o	trunk/g2o/types/slam3d/isometry3d_mappings.h	/^namespace g2o {$/;"	n
internal	trunk/g2o/types/slam3d/isometry3d_mappings.h	/^  namespace internal {$/;"	n	namespace:g2o
nearestOrthogonalMatrix	trunk/g2o/types/slam3d/isometry3d_mappings.h	/^    void nearestOrthogonalMatrix(const Eigen::MatrixBase<Derived>& R)$/;"	f	namespace:g2o::internal
CacheCameraDrawAction	trunk/g2o/types/slam3d/parameter_camera.cpp	/^  CacheCameraDrawAction::CacheCameraDrawAction(): DrawAction(typeid(CacheCamera).name()){$/;"	f	class:g2o::CacheCameraDrawAction
ParameterCamera	trunk/g2o/types/slam3d/parameter_camera.cpp	/^  ParameterCamera::ParameterCamera(){$/;"	f	class:g2o::ParameterCamera
drawMyPyramid	trunk/g2o/types/slam3d/parameter_camera.cpp	/^  static void drawMyPyramid(float height, float side){$/;"	f	namespace:g2o	file:
g2o	trunk/g2o/types/slam3d/parameter_camera.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/types/slam3d/parameter_camera.cpp	/^  HyperGraphElementAction* CacheCameraDrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::CacheCameraDrawAction
read	trunk/g2o/types/slam3d/parameter_camera.cpp	/^  bool ParameterCamera::read(std::istream& is) {$/;"	f	class:g2o::ParameterCamera
refreshPropertyPtrs	trunk/g2o/types/slam3d/parameter_camera.cpp	/^  bool CacheCameraDrawAction::refreshPropertyPtrs(HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::CacheCameraDrawAction
resolveDependancies	trunk/g2o/types/slam3d/parameter_camera.cpp	/^  bool CacheCamera::resolveDependancies(){$/;"	f	class:g2o::CacheCamera
setKcam	trunk/g2o/types/slam3d/parameter_camera.cpp	/^  void ParameterCamera::setKcam(double fx, double fy, double cx, double cy){$/;"	f	class:g2o::ParameterCamera
setOffset	trunk/g2o/types/slam3d/parameter_camera.cpp	/^  void ParameterCamera::setOffset(const Eigen::Isometry3d& offset_){$/;"	f	class:g2o::ParameterCamera
updateImpl	trunk/g2o/types/slam3d/parameter_camera.cpp	/^  void CacheCamera::updateImpl(){$/;"	f	class:g2o::CacheCamera
write	trunk/g2o/types/slam3d/parameter_camera.cpp	/^  bool ParameterCamera::write(std::ostream& os) const {$/;"	f	class:g2o::ParameterCamera
CacheCamera	trunk/g2o/types/slam3d/parameter_camera.h	/^  class G2O_TYPES_SLAM3D_API CacheCamera: public CacheSE3Offset {$/;"	c	namespace:g2o
CacheCameraDrawAction	trunk/g2o/types/slam3d/parameter_camera.h	/^  class G2O_TYPES_SLAM3D_API CacheCameraDrawAction: public DrawAction{$/;"	c	namespace:g2o
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/slam3d/parameter_camera.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::ParameterCamera
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/slam3d/parameter_camera.h	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::CacheCamera
G2O_CAMERA_PARAMETERS_H_	trunk/g2o/types/slam3d/parameter_camera.h	28;"	d
Kcam	trunk/g2o/types/slam3d/parameter_camera.h	/^      const Eigen::Matrix3d& Kcam() const { return _Kcam;}$/;"	f	class:g2o::ParameterCamera
Kcam_inverseOffsetR	trunk/g2o/types/slam3d/parameter_camera.h	/^      const Eigen::Matrix3d& Kcam_inverseOffsetR() const { return _Kcam_inverseOffsetR;}$/;"	f	class:g2o::ParameterCamera
ParameterCamera	trunk/g2o/types/slam3d/parameter_camera.h	/^  class G2O_TYPES_SLAM3D_API ParameterCamera: public ParameterSE3Offset {$/;"	c	namespace:g2o
_Kcam	trunk/g2o/types/slam3d/parameter_camera.h	/^      Eigen::Matrix3d _Kcam;$/;"	m	class:g2o::ParameterCamera
_Kcam_inverseOffsetR	trunk/g2o/types/slam3d/parameter_camera.h	/^      Eigen::Matrix3d _Kcam_inverseOffsetR;$/;"	m	class:g2o::ParameterCamera
_cameraSide	trunk/g2o/types/slam3d/parameter_camera.h	/^      FloatProperty* _cameraZ, *_cameraSide;$/;"	m	class:g2o::CacheCameraDrawAction
_cameraZ	trunk/g2o/types/slam3d/parameter_camera.h	/^      FloatProperty* _cameraZ, *_cameraSide;$/;"	m	class:g2o::CacheCameraDrawAction
_invKcam	trunk/g2o/types/slam3d/parameter_camera.h	/^      Eigen::Matrix3d _invKcam;$/;"	m	class:g2o::ParameterCamera
_w2i	trunk/g2o/types/slam3d/parameter_camera.h	/^    Eigen::Affine3d _w2i; \/\/\/< world to image transform$/;"	m	class:g2o::CacheCamera
camParams	trunk/g2o/types/slam3d/parameter_camera.h	/^    const ParameterCamera* camParams() const {return params;}$/;"	f	class:g2o::CacheCamera
g2o	trunk/g2o/types/slam3d/parameter_camera.h	/^namespace g2o {$/;"	n
invKcam	trunk/g2o/types/slam3d/parameter_camera.h	/^      const Eigen::Matrix3d& invKcam() const { return _invKcam;}$/;"	f	class:g2o::ParameterCamera
params	trunk/g2o/types/slam3d/parameter_camera.h	/^    ParameterCamera* params;$/;"	m	class:g2o::CacheCamera
w2i	trunk/g2o/types/slam3d/parameter_camera.h	/^    const Eigen::Affine3d& w2i() const {return _w2i;}$/;"	f	class:g2o::CacheCamera
CacheSE3Offset	trunk/g2o/types/slam3d/parameter_se3_offset.cpp	/^  CacheSE3Offset::CacheSE3Offset() :$/;"	f	class:g2o::CacheSE3Offset
CacheSE3OffsetDrawAction	trunk/g2o/types/slam3d/parameter_se3_offset.cpp	/^  CacheSE3OffsetDrawAction::CacheSE3OffsetDrawAction(): DrawAction(typeid(CacheSE3Offset).name()){$/;"	f	class:g2o::CacheSE3OffsetDrawAction
ParameterSE3Offset	trunk/g2o/types/slam3d/parameter_se3_offset.cpp	/^  ParameterSE3Offset::ParameterSE3Offset(){$/;"	f	class:g2o::ParameterSE3Offset
g2o	trunk/g2o/types/slam3d/parameter_se3_offset.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/types/slam3d/parameter_se3_offset.cpp	/^  HyperGraphElementAction* CacheSE3OffsetDrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::CacheSE3OffsetDrawAction
read	trunk/g2o/types/slam3d/parameter_se3_offset.cpp	/^  bool ParameterSE3Offset::read(std::istream& is) {$/;"	f	class:g2o::ParameterSE3Offset
refreshPropertyPtrs	trunk/g2o/types/slam3d/parameter_se3_offset.cpp	/^  bool CacheSE3OffsetDrawAction::refreshPropertyPtrs(HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::CacheSE3OffsetDrawAction
resolveDependancies	trunk/g2o/types/slam3d/parameter_se3_offset.cpp	/^  bool CacheSE3Offset::resolveDependancies(){$/;"	f	class:g2o::CacheSE3Offset
setOffset	trunk/g2o/types/slam3d/parameter_se3_offset.cpp	/^  void ParameterSE3Offset::setOffset(const Isometry3d& offset_){$/;"	f	class:g2o::ParameterSE3Offset
setOffsetParam	trunk/g2o/types/slam3d/parameter_se3_offset.cpp	/^  void CacheSE3Offset::setOffsetParam(ParameterSE3Offset* offsetParam)$/;"	f	class:g2o::CacheSE3Offset
updateImpl	trunk/g2o/types/slam3d/parameter_se3_offset.cpp	/^  void CacheSE3Offset::updateImpl(){$/;"	f	class:g2o::CacheSE3Offset
write	trunk/g2o/types/slam3d/parameter_se3_offset.cpp	/^  bool ParameterSE3Offset::write(std::ostream& os) const {$/;"	f	class:g2o::ParameterSE3Offset
CacheSE3Offset	trunk/g2o/types/slam3d/parameter_se3_offset.h	/^  class G2O_TYPES_SLAM3D_API CacheSE3Offset: public Cache {$/;"	c	namespace:g2o
CacheSE3OffsetDrawAction	trunk/g2o/types/slam3d/parameter_se3_offset.h	/^  class G2O_TYPES_SLAM3D_API CacheSE3OffsetDrawAction: public DrawAction{$/;"	c	namespace:g2o
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/slam3d/parameter_se3_offset.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::CacheSE3Offset
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/slam3d/parameter_se3_offset.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::ParameterSE3Offset
G2O_VERTEX_SE3_OFFSET_PARAMETERS_H_	trunk/g2o/types/slam3d/parameter_se3_offset.h	28;"	d
ParameterSE3Offset	trunk/g2o/types/slam3d/parameter_se3_offset.h	/^  class G2O_TYPES_SLAM3D_API ParameterSE3Offset: public Parameter$/;"	c	namespace:g2o
_cubeSide	trunk/g2o/types/slam3d/parameter_se3_offset.h	/^      FloatProperty* _cubeSide;$/;"	m	class:g2o::CacheSE3OffsetDrawAction
_inverseOffset	trunk/g2o/types/slam3d/parameter_se3_offset.h	/^      Eigen::Isometry3d _inverseOffset;$/;"	m	class:g2o::ParameterSE3Offset
_n2w	trunk/g2o/types/slam3d/parameter_se3_offset.h	/^      Eigen::Isometry3d _n2w;$/;"	m	class:g2o::CacheSE3Offset
_offset	trunk/g2o/types/slam3d/parameter_se3_offset.h	/^      Eigen::Isometry3d _offset;$/;"	m	class:g2o::ParameterSE3Offset
_offsetParam	trunk/g2o/types/slam3d/parameter_se3_offset.h	/^      ParameterSE3Offset* _offsetParam; \/\/\/< the parameter connected to the cache$/;"	m	class:g2o::CacheSE3Offset
_w2l	trunk/g2o/types/slam3d/parameter_se3_offset.h	/^      Eigen::Isometry3d _w2l;$/;"	m	class:g2o::CacheSE3Offset
_w2n	trunk/g2o/types/slam3d/parameter_se3_offset.h	/^      Eigen::Isometry3d _w2n;$/;"	m	class:g2o::CacheSE3Offset
g2o	trunk/g2o/types/slam3d/parameter_se3_offset.h	/^namespace g2o {$/;"	n
inverseOffset	trunk/g2o/types/slam3d/parameter_se3_offset.h	/^      const Eigen::Isometry3d& inverseOffset() const { return _inverseOffset;}$/;"	f	class:g2o::ParameterSE3Offset
n2w	trunk/g2o/types/slam3d/parameter_se3_offset.h	/^      const Eigen::Isometry3d& n2w() const { return _n2w;}$/;"	f	class:g2o::CacheSE3Offset
offset	trunk/g2o/types/slam3d/parameter_se3_offset.h	/^      const Eigen::Isometry3d& offset() const { return _offset;}$/;"	f	class:g2o::ParameterSE3Offset
offsetParam	trunk/g2o/types/slam3d/parameter_se3_offset.h	/^      const ParameterSE3Offset* offsetParam() const { return _offsetParam;}$/;"	f	class:g2o::CacheSE3Offset
w2l	trunk/g2o/types/slam3d/parameter_se3_offset.h	/^      const Eigen::Isometry3d& w2l() const { return _w2l;}$/;"	f	class:g2o::CacheSE3Offset
w2n	trunk/g2o/types/slam3d/parameter_se3_offset.h	/^      const Eigen::Isometry3d& w2n() const { return _w2n;}$/;"	f	class:g2o::CacheSE3Offset
ParameterStereoCamera	trunk/g2o/types/slam3d/parameter_stereo_camera.cpp	/^  ParameterStereoCamera::ParameterStereoCamera(){$/;"	f	class:g2o::ParameterStereoCamera
g2o	trunk/g2o/types/slam3d/parameter_stereo_camera.cpp	/^namespace g2o {$/;"	n	file:
read	trunk/g2o/types/slam3d/parameter_stereo_camera.cpp	/^  bool ParameterStereoCamera::read(std::istream& is) {$/;"	f	class:g2o::ParameterStereoCamera
write	trunk/g2o/types/slam3d/parameter_stereo_camera.cpp	/^  bool ParameterStereoCamera::write(std::ostream& os) const {$/;"	f	class:g2o::ParameterStereoCamera
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/slam3d/parameter_stereo_camera.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::ParameterStereoCamera
G2O_STEREO_CAMERA_PARAMETERS_H_	trunk/g2o/types/slam3d/parameter_stereo_camera.h	28;"	d
ParameterStereoCamera	trunk/g2o/types/slam3d/parameter_stereo_camera.h	/^  class G2O_TYPES_SLAM3D_API ParameterStereoCamera: public ParameterCamera {$/;"	c	namespace:g2o
_baseline	trunk/g2o/types/slam3d/parameter_stereo_camera.h	/^      double _baseline;$/;"	m	class:g2o::ParameterStereoCamera
baseline	trunk/g2o/types/slam3d/parameter_stereo_camera.h	/^      double baseline() const {return _baseline;}$/;"	f	class:g2o::ParameterStereoCamera
g2o	trunk/g2o/types/slam3d/parameter_stereo_camera.h	/^namespace g2o {$/;"	n
setBaseline	trunk/g2o/types/slam3d/parameter_stereo_camera.h	/^      void  setBaseline(double baseline_) { _baseline = baseline_;}$/;"	f	class:g2o::ParameterStereoCamera
G2O_MATH_STUFF	trunk/g2o/types/slam3d/se3_ops.h	28;"	d
g2o	trunk/g2o/types/slam3d/se3_ops.h	/^namespace g2o {$/;"	n
deltaR	trunk/g2o/types/slam3d/se3_ops.hpp	/^  Vector3d deltaR(const Matrix3d& R)$/;"	f
project	trunk/g2o/types/slam3d/se3_ops.hpp	/^  Vector2d project(const Vector3d& v)$/;"	f
project	trunk/g2o/types/slam3d/se3_ops.hpp	/^  Vector3d project(const Vector4d& v)$/;"	f
skew	trunk/g2o/types/slam3d/se3_ops.hpp	/^  Matrix3d skew(const Vector3d&v)$/;"	f
unproject	trunk/g2o/types/slam3d/se3_ops.hpp	/^  Vector3d unproject(const Vector2d& v)$/;"	f
unproject	trunk/g2o/types/slam3d/se3_ops.hpp	/^  Vector4d unproject(const Vector3d& v)$/;"	f
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/slam3d/se3quat.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::SE3Quat
G2O_SE3QUAT_H_	trunk/g2o/types/slam3d/se3quat.h	28;"	d
SE3Quat	trunk/g2o/types/slam3d/se3quat.h	/^        explicit SE3Quat(const MatrixBase<Derived>& v)$/;"	f	class:g2o::SE3Quat
SE3Quat	trunk/g2o/types/slam3d/se3quat.h	/^      SE3Quat(){$/;"	f	class:g2o::SE3Quat
SE3Quat	trunk/g2o/types/slam3d/se3quat.h	/^      SE3Quat(const Matrix3d& R, const Vector3d& t):_r(Quaterniond(R)),_t(t){ $/;"	f	class:g2o::SE3Quat
SE3Quat	trunk/g2o/types/slam3d/se3quat.h	/^      SE3Quat(const Quaterniond& q, const Vector3d& t):_r(q),_t(t){$/;"	f	class:g2o::SE3Quat
SE3Quat	trunk/g2o/types/slam3d/se3quat.h	/^  class G2O_TYPES_SLAM3D_API SE3Quat {$/;"	c	namespace:g2o
Vector6d	trunk/g2o/types/slam3d/se3quat.h	/^  typedef Matrix<double, 6, 1> Vector6d;$/;"	t	namespace:g2o
Vector7d	trunk/g2o/types/slam3d/se3quat.h	/^  typedef Matrix<double, 7, 1> Vector7d;$/;"	t	namespace:g2o
_r	trunk/g2o/types/slam3d/se3quat.h	/^      Quaterniond _r;$/;"	m	class:g2o::SE3Quat
_t	trunk/g2o/types/slam3d/se3quat.h	/^      Vector3d _t;$/;"	m	class:g2o::SE3Quat
adj	trunk/g2o/types/slam3d/se3quat.h	/^      Matrix<double, 6, 6> adj() const$/;"	f	class:g2o::SE3Quat
exp	trunk/g2o/types/slam3d/se3quat.h	/^      static SE3Quat exp(const Vector6d & update)$/;"	f	class:g2o::SE3Quat
fromMinimalVector	trunk/g2o/types/slam3d/se3quat.h	/^      inline void fromMinimalVector(const Vector6d& v){$/;"	f	class:g2o::SE3Quat
fromVector	trunk/g2o/types/slam3d/se3quat.h	/^      inline void fromVector(const Vector7d& v){$/;"	f	class:g2o::SE3Quat
g2o	trunk/g2o/types/slam3d/se3quat.h	/^namespace g2o {$/;"	n
inverse	trunk/g2o/types/slam3d/se3quat.h	/^      inline SE3Quat inverse() const{$/;"	f	class:g2o::SE3Quat
log	trunk/g2o/types/slam3d/se3quat.h	/^      Vector6d log() const {$/;"	f	class:g2o::SE3Quat
map	trunk/g2o/types/slam3d/se3quat.h	/^      Vector3d map(const Vector3d & xyz) const$/;"	f	class:g2o::SE3Quat
normalizeRotation	trunk/g2o/types/slam3d/se3quat.h	/^      void normalizeRotation(){$/;"	f	class:g2o::SE3Quat
operator *	trunk/g2o/types/slam3d/se3quat.h	/^      inline SE3Quat operator* (const SE3Quat& tr2) const{$/;"	f	class:g2o::SE3Quat
operator *	trunk/g2o/types/slam3d/se3quat.h	/^      inline Vector3d operator* (const Vector3d& v) const {$/;"	f	class:g2o::SE3Quat
operator *=	trunk/g2o/types/slam3d/se3quat.h	/^      inline SE3Quat& operator*= (const SE3Quat& tr2){$/;"	f	class:g2o::SE3Quat
operator <<	trunk/g2o/types/slam3d/se3quat.h	/^  inline std::ostream& operator <<(std::ostream& out_str, const SE3Quat& se3)$/;"	f	namespace:g2o
operator Eigen::Isometry3d	trunk/g2o/types/slam3d/se3quat.h	/^      operator Eigen::Isometry3d() const$/;"	f	class:g2o::SE3Quat
operator []	trunk/g2o/types/slam3d/se3quat.h	/^      inline double operator [](int i) const {$/;"	f	class:g2o::SE3Quat
rotation	trunk/g2o/types/slam3d/se3quat.h	/^      inline const Quaterniond& rotation() const {return _r;}$/;"	f	class:g2o::SE3Quat
setRotation	trunk/g2o/types/slam3d/se3quat.h	/^      void setRotation(const Quaterniond& r_) {_r=r_;}$/;"	f	class:g2o::SE3Quat
setTranslation	trunk/g2o/types/slam3d/se3quat.h	/^      inline void setTranslation(const Vector3d& t_) {_t = t_;}$/;"	f	class:g2o::SE3Quat
toMinimalVector	trunk/g2o/types/slam3d/se3quat.h	/^      inline Vector6d toMinimalVector() const{$/;"	f	class:g2o::SE3Quat
toVector	trunk/g2o/types/slam3d/se3quat.h	/^      inline Vector7d toVector() const{$/;"	f	class:g2o::SE3Quat
to_homogeneous_matrix	trunk/g2o/types/slam3d/se3quat.h	/^      Matrix<double,4,4> to_homogeneous_matrix() const$/;"	f	class:g2o::SE3Quat
translation	trunk/g2o/types/slam3d/se3quat.h	/^      inline const Vector3d& translation() const {return _t;}$/;"	f	class:g2o::SE3Quat
main	trunk/g2o/types/slam3d/test_isometry3d_mappings.cpp	/^int main(int , char** ){$/;"	f
RotationMatrix2QuaternionManifold	trunk/g2o/types/slam3d/test_mat2quat_jacobian.cpp	/^struct RotationMatrix2QuaternionManifold$/;"	s	file:
main	trunk/g2o/types/slam3d/test_mat2quat_jacobian.cpp	/^int main(int , char** )$/;"	f
operator ()	trunk/g2o/types/slam3d/test_mat2quat_jacobian.cpp	/^  bool operator()(const T* rotMatSerialized, T* quaternion) const$/;"	f	struct:RotationMatrix2QuaternionManifold
main	trunk/g2o/types/slam3d/test_slam3d_jacobian.cpp	/^int main(int , char** )$/;"	f
randomIsometry3d	trunk/g2o/types/slam3d/test_slam3d_jacobian.cpp	/^Eigen::Isometry3d randomIsometry3d()$/;"	f
CacheCameraDrawAction	trunk/g2o/types/slam3d/types_slam3d.cpp	/^  G2O_REGISTER_ACTION(CacheCameraDrawAction);$/;"	v
EdgeSE3DrawAction	trunk/g2o/types/slam3d/types_slam3d.cpp	/^  G2O_REGISTER_ACTION(EdgeSE3DrawAction);$/;"	v
EdgeSE3PointXYZDrawAction	trunk/g2o/types/slam3d/types_slam3d.cpp	/^  G2O_REGISTER_ACTION(EdgeSE3PointXYZDrawAction);$/;"	v
EdgeSE3WriteGnuplotAction	trunk/g2o/types/slam3d/types_slam3d.cpp	/^  G2O_REGISTER_ACTION(EdgeSE3WriteGnuplotAction);$/;"	v
VertexPointXYZDrawAction	trunk/g2o/types/slam3d/types_slam3d.cpp	/^  G2O_REGISTER_ACTION(VertexPointXYZDrawAction);$/;"	v
VertexPointXYZWriteGnuplotAction	trunk/g2o/types/slam3d/types_slam3d.cpp	/^  G2O_REGISTER_ACTION(VertexPointXYZWriteGnuplotAction);$/;"	v
VertexSE3DrawAction	trunk/g2o/types/slam3d/types_slam3d.cpp	/^  G2O_REGISTER_ACTION(VertexSE3DrawAction);$/;"	v
VertexSE3WriteGnuplotAction	trunk/g2o/types/slam3d/types_slam3d.cpp	/^  G2O_REGISTER_ACTION(VertexSE3WriteGnuplotAction);$/;"	v
g2o	trunk/g2o/types/slam3d/types_slam3d.cpp	/^namespace g2o {$/;"	n	file:
slam3d	trunk/g2o/types/slam3d/types_slam3d.cpp	/^  G2O_REGISTER_TYPE_GROUP(slam3d);$/;"	v
G2O_TYPES_SLAM3D_	trunk/g2o/types/slam3d/types_slam3d.h	18;"	d
THREE_D_TYPES_ANALYTIC_JACOBIAN	trunk/g2o/types/slam3d/types_slam3d.h	25;"	d
VertexPointXYZDrawAction	trunk/g2o/types/slam3d/vertex_pointxyz.cpp	/^  VertexPointXYZDrawAction::VertexPointXYZDrawAction(): DrawAction(typeid(VertexPointXYZ).name()){$/;"	f	class:g2o::VertexPointXYZDrawAction
VertexPointXYZWriteGnuplotAction	trunk/g2o/types/slam3d/vertex_pointxyz.cpp	/^  VertexPointXYZWriteGnuplotAction::VertexPointXYZWriteGnuplotAction() :$/;"	f	class:g2o::VertexPointXYZWriteGnuplotAction
g2o	trunk/g2o/types/slam3d/vertex_pointxyz.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/types/slam3d/vertex_pointxyz.cpp	/^  HyperGraphElementAction* VertexPointXYZDrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::VertexPointXYZDrawAction
operator ()	trunk/g2o/types/slam3d/vertex_pointxyz.cpp	/^  HyperGraphElementAction* VertexPointXYZWriteGnuplotAction::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params_ )$/;"	f	class:g2o::VertexPointXYZWriteGnuplotAction
read	trunk/g2o/types/slam3d/vertex_pointxyz.cpp	/^  bool VertexPointXYZ::read(std::istream& is) {$/;"	f	class:g2o::VertexPointXYZ
refreshPropertyPtrs	trunk/g2o/types/slam3d/vertex_pointxyz.cpp	/^  bool VertexPointXYZDrawAction::refreshPropertyPtrs(HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::VertexPointXYZDrawAction
write	trunk/g2o/types/slam3d/vertex_pointxyz.cpp	/^  bool VertexPointXYZ::write(std::ostream& os) const {$/;"	f	class:g2o::VertexPointXYZ
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/slam3d/vertex_pointxyz.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::VertexPointXYZ
G2O_VERTEX_TRACKXYZ_H_	trunk/g2o/types/slam3d/vertex_pointxyz.h	28;"	d
VertexPointXYZ	trunk/g2o/types/slam3d/vertex_pointxyz.h	/^      VertexPointXYZ() {}$/;"	f	class:g2o::VertexPointXYZ
VertexPointXYZ	trunk/g2o/types/slam3d/vertex_pointxyz.h	/^  class G2O_TYPES_SLAM3D_API VertexPointXYZ : public BaseVertex<3, Eigen::Vector3d>$/;"	c	namespace:g2o
VertexPointXYZDrawAction	trunk/g2o/types/slam3d/vertex_pointxyz.h	/^  class VertexPointXYZDrawAction: public DrawAction{$/;"	c	namespace:g2o
VertexPointXYZWriteGnuplotAction	trunk/g2o/types/slam3d/vertex_pointxyz.h	/^  class G2O_TYPES_SLAM3D_API VertexPointXYZWriteGnuplotAction: public WriteGnuplotAction$/;"	c	namespace:g2o
_pointSize	trunk/g2o/types/slam3d/vertex_pointxyz.h	/^      FloatProperty *_pointSize;$/;"	m	class:g2o::VertexPointXYZDrawAction
estimateDimension	trunk/g2o/types/slam3d/vertex_pointxyz.h	/^      virtual int estimateDimension() const {$/;"	f	class:g2o::VertexPointXYZ
g2o	trunk/g2o/types/slam3d/vertex_pointxyz.h	/^namespace g2o {$/;"	n
getEstimateData	trunk/g2o/types/slam3d/vertex_pointxyz.h	/^      virtual bool getEstimateData(double* est) const{$/;"	f	class:g2o::VertexPointXYZ
getMinimalEstimateData	trunk/g2o/types/slam3d/vertex_pointxyz.h	/^      virtual bool getMinimalEstimateData(double* est) const{$/;"	f	class:g2o::VertexPointXYZ
minimalEstimateDimension	trunk/g2o/types/slam3d/vertex_pointxyz.h	/^      virtual int minimalEstimateDimension() const {$/;"	f	class:g2o::VertexPointXYZ
oplusImpl	trunk/g2o/types/slam3d/vertex_pointxyz.h	/^      virtual void oplusImpl(const double* update_) {$/;"	f	class:g2o::VertexPointXYZ
setEstimateDataImpl	trunk/g2o/types/slam3d/vertex_pointxyz.h	/^      virtual bool setEstimateDataImpl(const double* est){$/;"	f	class:g2o::VertexPointXYZ
setMinimalEstimateDataImpl	trunk/g2o/types/slam3d/vertex_pointxyz.h	/^      virtual bool setMinimalEstimateDataImpl(const double* est){$/;"	f	class:g2o::VertexPointXYZ
setToOriginImpl	trunk/g2o/types/slam3d/vertex_pointxyz.h	/^      virtual void setToOriginImpl() { _estimate.fill(0.); }$/;"	f	class:g2o::VertexPointXYZ
VertexSE3	trunk/g2o/types/slam3d/vertex_se3.cpp	/^  VertexSE3::VertexSE3() :$/;"	f	class:g2o::VertexSE3
VertexSE3DrawAction	trunk/g2o/types/slam3d/vertex_se3.cpp	/^  VertexSE3DrawAction::VertexSE3DrawAction(): DrawAction(typeid(VertexSE3).name()){$/;"	f	class:g2o::VertexSE3DrawAction
VertexSE3WriteGnuplotAction	trunk/g2o/types/slam3d/vertex_se3.cpp	/^  VertexSE3WriteGnuplotAction::VertexSE3WriteGnuplotAction(): WriteGnuplotAction(typeid(VertexSE3).name()){}$/;"	f	class:g2o::VertexSE3WriteGnuplotAction
drawTriangle	trunk/g2o/types/slam3d/vertex_se3.cpp	/^  void drawTriangle(float xSize, float ySize){$/;"	f	namespace:g2o
g2o	trunk/g2o/types/slam3d/vertex_se3.cpp	/^namespace g2o {$/;"	n	file:
operator ()	trunk/g2o/types/slam3d/vertex_se3.cpp	/^  HyperGraphElementAction* VertexSE3DrawAction::operator()(HyperGraph::HyperGraphElement* element, $/;"	f	class:g2o::VertexSE3DrawAction
operator ()	trunk/g2o/types/slam3d/vertex_se3.cpp	/^  HyperGraphElementAction* VertexSE3WriteGnuplotAction::operator()(HyperGraph::HyperGraphElement* element, HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::VertexSE3WriteGnuplotAction
read	trunk/g2o/types/slam3d/vertex_se3.cpp	/^  bool VertexSE3::read(std::istream& is)$/;"	f	class:g2o::VertexSE3
refreshPropertyPtrs	trunk/g2o/types/slam3d/vertex_se3.cpp	/^  bool VertexSE3DrawAction::refreshPropertyPtrs(HyperGraphElementAction::Parameters* params_){$/;"	f	class:g2o::VertexSE3DrawAction
write	trunk/g2o/types/slam3d/vertex_se3.cpp	/^  bool VertexSE3::write(std::ostream& os) const$/;"	f	class:g2o::VertexSE3
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	trunk/g2o/types/slam3d/vertex_se3.h	/^      EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:g2o::VertexSE3
G2O_VERTEX_SE3_	trunk/g2o/types/slam3d/vertex_se3.h	28;"	d
VertexSE3	trunk/g2o/types/slam3d/vertex_se3.h	/^  class G2O_TYPES_SLAM3D_API VertexSE3 : public BaseVertex<6, Eigen::Isometry3d>$/;"	c	namespace:g2o
VertexSE3DrawAction	trunk/g2o/types/slam3d/vertex_se3.h	/^  class VertexSE3DrawAction: public DrawAction{$/;"	c	namespace:g2o
VertexSE3WriteGnuplotAction	trunk/g2o/types/slam3d/vertex_se3.h	/^  class VertexSE3WriteGnuplotAction: public WriteGnuplotAction {$/;"	c	namespace:g2o
_cacheDrawActions	trunk/g2o/types/slam3d/vertex_se3.h	/^      HyperGraphElementAction* _cacheDrawActions;$/;"	m	class:g2o::VertexSE3DrawAction
_numOplusCalls	trunk/g2o/types/slam3d/vertex_se3.h	/^      int _numOplusCalls;     \/\/\/< store how often opluse was called to trigger orthogonaliation of the rotation matrix$/;"	m	class:g2o::VertexSE3
_triangleX	trunk/g2o/types/slam3d/vertex_se3.h	/^      FloatProperty* _triangleX, *_triangleY;$/;"	m	class:g2o::VertexSE3DrawAction
_triangleY	trunk/g2o/types/slam3d/vertex_se3.h	/^      FloatProperty* _triangleX, *_triangleY;$/;"	m	class:g2o::VertexSE3DrawAction
estimateAsSE3Quat	trunk/g2o/types/slam3d/vertex_se3.h	/^      SE3Quat G2O_ATTRIBUTE_DEPRECATED(estimateAsSE3Quat() const) { return internal::toSE3Quat(estimate());}$/;"	f	class:g2o::VertexSE3
estimateDimension	trunk/g2o/types/slam3d/vertex_se3.h	/^      virtual int estimateDimension() const {$/;"	f	class:g2o::VertexSE3
g2o	trunk/g2o/types/slam3d/vertex_se3.h	/^namespace g2o {$/;"	n
getEstimateData	trunk/g2o/types/slam3d/vertex_se3.h	/^      virtual bool getEstimateData(double* est) const{$/;"	f	class:g2o::VertexSE3
getMinimalEstimateData	trunk/g2o/types/slam3d/vertex_se3.h	/^      virtual bool getMinimalEstimateData(double* est) const{$/;"	f	class:g2o::VertexSE3
minimalEstimateDimension	trunk/g2o/types/slam3d/vertex_se3.h	/^      virtual int minimalEstimateDimension() const {$/;"	f	class:g2o::VertexSE3
oplusImpl	trunk/g2o/types/slam3d/vertex_se3.h	/^      virtual void oplusImpl(const double* update)$/;"	f	class:g2o::VertexSE3
orthogonalizeAfter	trunk/g2o/types/slam3d/vertex_se3.h	/^      static const int orthogonalizeAfter = 1000; \/\/< orthogonalize the rotation matrix after N updates$/;"	m	class:g2o::VertexSE3
setEstimateDataImpl	trunk/g2o/types/slam3d/vertex_se3.h	/^      virtual bool setEstimateDataImpl(const double* est){$/;"	f	class:g2o::VertexSE3
setEstimateFromSE3Quat	trunk/g2o/types/slam3d/vertex_se3.h	/^      void G2O_ATTRIBUTE_DEPRECATED(setEstimateFromSE3Quat(const SE3Quat& se3)) { setEstimate(internal::fromSE3Quat(se3));}$/;"	f	class:g2o::VertexSE3
setMinimalEstimateDataImpl	trunk/g2o/types/slam3d/vertex_se3.h	/^      virtual bool setMinimalEstimateDataImpl(const double* est){$/;"	f	class:g2o::VertexSE3
setToOriginImpl	trunk/g2o/types/slam3d/vertex_se3.h	/^      virtual void setToOriginImpl() {$/;"	f	class:g2o::VertexSE3
